// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Mon Aug  2 16:57:17 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_12_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_12_9_64_512_512_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output [63:0] q_d;
  input [8:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_11_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_11_9_64_512_512_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output [63:0] q_d;
  input [8:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_9_64_512_512_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, COMP_LOOP_C_31_tr0, COMP_LOOP_C_62_tr0, VEC_LOOP_C_0_tr0,
      STAGE_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input COMP_LOOP_C_31_tr0;
  input COMP_LOOP_C_62_tr0;
  input VEC_LOOP_C_0_tr0;
  input STAGE_LOOP_C_1_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 7'd0,
    STAGE_LOOP_C_0 = 7'd1,
    COMP_LOOP_C_0 = 7'd2,
    COMP_LOOP_C_1 = 7'd3,
    COMP_LOOP_C_2 = 7'd4,
    COMP_LOOP_C_3 = 7'd5,
    COMP_LOOP_C_4 = 7'd6,
    COMP_LOOP_C_5 = 7'd7,
    COMP_LOOP_C_6 = 7'd8,
    COMP_LOOP_C_7 = 7'd9,
    COMP_LOOP_C_8 = 7'd10,
    COMP_LOOP_C_9 = 7'd11,
    COMP_LOOP_C_10 = 7'd12,
    COMP_LOOP_C_11 = 7'd13,
    COMP_LOOP_C_12 = 7'd14,
    COMP_LOOP_C_13 = 7'd15,
    COMP_LOOP_C_14 = 7'd16,
    COMP_LOOP_C_15 = 7'd17,
    COMP_LOOP_C_16 = 7'd18,
    COMP_LOOP_C_17 = 7'd19,
    COMP_LOOP_C_18 = 7'd20,
    COMP_LOOP_C_19 = 7'd21,
    COMP_LOOP_C_20 = 7'd22,
    COMP_LOOP_C_21 = 7'd23,
    COMP_LOOP_C_22 = 7'd24,
    COMP_LOOP_C_23 = 7'd25,
    COMP_LOOP_C_24 = 7'd26,
    COMP_LOOP_C_25 = 7'd27,
    COMP_LOOP_C_26 = 7'd28,
    COMP_LOOP_C_27 = 7'd29,
    COMP_LOOP_C_28 = 7'd30,
    COMP_LOOP_C_29 = 7'd31,
    COMP_LOOP_C_30 = 7'd32,
    COMP_LOOP_C_31 = 7'd33,
    COMP_LOOP_C_32 = 7'd34,
    COMP_LOOP_C_33 = 7'd35,
    COMP_LOOP_C_34 = 7'd36,
    COMP_LOOP_C_35 = 7'd37,
    COMP_LOOP_C_36 = 7'd38,
    COMP_LOOP_C_37 = 7'd39,
    COMP_LOOP_C_38 = 7'd40,
    COMP_LOOP_C_39 = 7'd41,
    COMP_LOOP_C_40 = 7'd42,
    COMP_LOOP_C_41 = 7'd43,
    COMP_LOOP_C_42 = 7'd44,
    COMP_LOOP_C_43 = 7'd45,
    COMP_LOOP_C_44 = 7'd46,
    COMP_LOOP_C_45 = 7'd47,
    COMP_LOOP_C_46 = 7'd48,
    COMP_LOOP_C_47 = 7'd49,
    COMP_LOOP_C_48 = 7'd50,
    COMP_LOOP_C_49 = 7'd51,
    COMP_LOOP_C_50 = 7'd52,
    COMP_LOOP_C_51 = 7'd53,
    COMP_LOOP_C_52 = 7'd54,
    COMP_LOOP_C_53 = 7'd55,
    COMP_LOOP_C_54 = 7'd56,
    COMP_LOOP_C_55 = 7'd57,
    COMP_LOOP_C_56 = 7'd58,
    COMP_LOOP_C_57 = 7'd59,
    COMP_LOOP_C_58 = 7'd60,
    COMP_LOOP_C_59 = 7'd61,
    COMP_LOOP_C_60 = 7'd62,
    COMP_LOOP_C_61 = 7'd63,
    COMP_LOOP_C_62 = 7'd64,
    VEC_LOOP_C_0 = 7'd65,
    STAGE_LOOP_C_1 = 7'd66,
    main_C_1 = 7'd67;

  reg [6:0] state_var;
  reg [6:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 7'b0000001;
        state_var_NS = COMP_LOOP_C_0;
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 7'b0000010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 7'b0000011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 7'b0000100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 7'b0000101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 7'b0000110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 7'b0000111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 7'b0001000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 7'b0001001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 7'b0001010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 7'b0001011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 7'b0001100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 7'b0001101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 7'b0001110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 7'b0001111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 7'b0010000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 7'b0010001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 7'b0010010;
        state_var_NS = COMP_LOOP_C_17;
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 7'b0010011;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 7'b0010100;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 7'b0010101;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 7'b0010110;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 7'b0010111;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 7'b0011000;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 7'b0011001;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 7'b0011010;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 7'b0011011;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 7'b0011100;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 7'b0011101;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 7'b0011110;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 7'b0011111;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 7'b0100000;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 7'b0100001;
        if ( COMP_LOOP_C_31_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_32;
        end
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 7'b0100010;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 7'b0100011;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 7'b0100100;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 7'b0100101;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 7'b0100110;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 7'b0100111;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 7'b0101000;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 7'b0101001;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 7'b0101010;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 7'b0101011;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 7'b0101100;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 7'b0101101;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 7'b0101110;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 7'b0101111;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 7'b0110000;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 7'b0110001;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 7'b0110010;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 7'b0110011;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 7'b0110100;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 7'b0110101;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 7'b0110110;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 7'b0110111;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 7'b0111000;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 7'b0111001;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 7'b0111010;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 7'b0111011;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 7'b0111100;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 7'b0111101;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 7'b0111110;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 7'b0111111;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 7'b1000000;
        if ( COMP_LOOP_C_62_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      VEC_LOOP_C_0 : begin
        fsm_output = 7'b1000001;
        if ( VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 7'b1000010;
        if ( STAGE_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 7'b1000011;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_triosy_lz, twiddle_rsc_triosy_0_0_lz, twiddle_rsc_triosy_0_1_lz, vec_rsc_0_0_i_q_d,
      vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_q_d, vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_0_i_radr_d, twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_1_i_radr_d, twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_0_i_d_d_pff, vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff,
      vec_rsc_0_0_i_we_d_pff, vec_rsc_0_1_i_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  output twiddle_rsc_triosy_0_0_lz;
  output twiddle_rsc_triosy_0_1_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_0_i_q_d;
  output [8:0] twiddle_rsc_0_0_i_radr_d;
  output twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_1_i_q_d;
  output [8:0] twiddle_rsc_0_1_i_radr_d;
  output twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [8:0] vec_rsc_0_0_i_radr_d_pff;
  output [8:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_cmp_ccs_ccore_en;
  wire [6:0] fsm_output;
  wire or_tmp_2;
  wire or_tmp_10;
  wire and_dcpl_7;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire and_dcpl_11;
  wire and_dcpl_15;
  wire or_dcpl_4;
  wire or_dcpl_5;
  wire mux_tmp_17;
  wire nor_tmp_7;
  wire and_dcpl_20;
  wire and_dcpl_21;
  wire and_dcpl_22;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_27;
  wire nor_tmp_9;
  wire nor_tmp_10;
  wire or_tmp_18;
  wire mux_tmp_21;
  wire and_tmp;
  wire and_dcpl_34;
  wire and_dcpl_35;
  wire or_tmp_22;
  wire mux_tmp_25;
  wire and_dcpl_39;
  wire mux_tmp_38;
  wire and_dcpl_52;
  wire and_dcpl_53;
  wire and_dcpl_54;
  wire or_tmp_38;
  wire and_dcpl_56;
  wire or_tmp_41;
  wire or_dcpl_13;
  wire or_dcpl_14;
  wire mux_tmp_52;
  wire and_dcpl_71;
  wire and_dcpl_77;
  reg COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  reg [9:0] VEC_LOOP_j_10_0_sva_9_0;
  reg [9:0] COMP_LOOP_2_tmp_mul_idiv_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_1_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_sva;
  reg [10:0] STAGE_LOOP_lshift_psp_sva;
  reg [8:0] COMP_LOOP_acc_psp_sva;
  reg [8:0] reg_COMP_LOOP_k_10_1_ftd;
  reg reg_vec_rsc_triosy_0_1_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  wire nor_28_cse;
  wire nor_32_rmff;
  reg [63:0] COMP_LOOP_1_acc_8_itm;
  wire [63:0] tmp_3_lpi_4_dfm_mx0;
  reg [63:0] p_sva;
  wire [8:0] COMP_LOOP_1_tmp_lshift_itm;
  wire [10:0] z_out;
  wire [9:0] z_out_1;
  wire [10:0] nl_z_out_1;
  wire and_dcpl_136;
  wire [10:0] z_out_4;
  wire and_dcpl_144;
  wire [3:0] z_out_5;
  wire [4:0] nl_z_out_5;
  wire and_dcpl_158;
  wire [63:0] z_out_6;
  wire [127:0] nl_z_out_6;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [63:0] tmp_4_sva;
  reg [63:0] COMP_LOOP_tmp_mux_itm;
  wire STAGE_LOOP_i_3_0_sva_mx0c1;
  wire VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  wire COMP_LOOP_1_acc_8_itm_mx0c0;
  wire COMP_LOOP_1_acc_8_itm_mx0c1;
  wire COMP_LOOP_1_acc_8_itm_mx0c3;
  wire COMP_LOOP_1_acc_8_itm_mx0c4;
  wire COMP_LOOP_1_acc_8_itm_mx0c6;
  wire and_127_cse;
  wire [9:0] COMP_LOOP_1_acc_10_itm_10_1_1;
  wire [63:0] COMP_LOOP_mux_14_cse;
  wire nor_cse;

  wire[0:0] nor_55_nl;
  wire[0:0] mux_46_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] VEC_LOOP_j_not_1_nl;
  wire[8:0] COMP_LOOP_COMP_LOOP_mux_1_nl;
  wire[8:0] COMP_LOOP_acc_nl;
  wire[9:0] nl_COMP_LOOP_acc_nl;
  wire[0:0] nand_4_nl;
  wire[0:0] mux_nl;
  wire[0:0] and_nl;
  wire[0:0] mux_58_nl;
  wire[10:0] COMP_LOOP_2_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_2_acc_10_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] mux_59_nl;
  wire[10:0] COMP_LOOP_1_acc_nl;
  wire[11:0] nl_COMP_LOOP_1_acc_nl;
  wire[0:0] and_69_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] nor_20_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] or_63_nl;
  wire[63:0] COMP_LOOP_acc_1_nl;
  wire[64:0] nl_COMP_LOOP_acc_1_nl;
  wire[63:0] COMP_LOOP_mux_23_nl;
  wire[0:0] COMP_LOOP_or_nl;
  wire[0:0] COMP_LOOP_or_2_nl;
  wire[10:0] COMP_LOOP_1_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_1_acc_10_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] nor_18_nl;
  wire[0:0] nor_19_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] and_85_nl;
  wire[0:0] nor_17_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] or_69_nl;
  wire[0:0] and_18_nl;
  wire[0:0] mux_24_nl;
  wire[0:0] and_19_nl;
  wire[0:0] and_28_nl;
  wire[0:0] and_29_nl;
  wire[0:0] and_30_nl;
  wire[0:0] and_31_nl;
  wire[0:0] and_32_nl;
  wire[0:0] mux_29_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] mux_27_nl;
  wire[0:0] nor_23_nl;
  wire[0:0] mux_25_nl;
  wire[0:0] and_89_nl;
  wire[0:0] nor_24_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] nand_1_nl;
  wire[0:0] or_31_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] or_28_nl;
  wire[0:0] or_26_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] mux_37_nl;
  wire[0:0] nor_21_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] nor_22_nl;
  wire[0:0] and_88_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] or_73_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] or_38_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] and_87_nl;
  wire[8:0] COMP_LOOP_1_tmp_mul_nl;
  wire[17:0] nl_COMP_LOOP_1_tmp_mul_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nor_nl;
  wire[0:0] COMP_LOOP_and_2_nl;
  wire[8:0] COMP_LOOP_mux_22_nl;
  wire[0:0] and_175_nl;
  wire[11:0] acc_3_nl;
  wire[12:0] nl_acc_3_nl;
  wire[10:0] COMP_LOOP_mux_25_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nand_1_nl;
  wire[9:0] COMP_LOOP_mux_26_nl;
  wire[3:0] STAGE_LOOP_mux_4_nl;
  wire[63:0] COMP_LOOP_mux1h_19_nl;
  wire[0:0] and_176_nl;
  wire[0:0] and_177_nl;
  wire[63:0] COMP_LOOP_mux_27_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] COMP_LOOP_mux_24_nl;
  wire[0:0] and_56_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] or_47_nl;
  wire[0:0] mux_47_nl;
  wire[0:0] or_44_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat;
  assign COMP_LOOP_mux_24_nl = MUX_v_64_2_2((~ COMP_LOOP_1_acc_8_itm), (~ tmp_3_lpi_4_dfm_mx0),
      and_127_cse);
  assign nl_acc_2_nl = ({COMP_LOOP_mux_14_cse , 1'b1}) + ({COMP_LOOP_mux_24_nl ,
      1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign or_47_nl = (~ (fsm_output[4])) | (~ (fsm_output[1])) | (fsm_output[2]);
  assign mux_48_nl = MUX_s_1_2_2(or_47_nl, or_tmp_38, fsm_output[5]);
  assign or_44_nl = (~ (fsm_output[4])) | (fsm_output[1]) | (fsm_output[2]);
  assign mux_47_nl = MUX_s_1_2_2(or_tmp_38, or_44_nl, fsm_output[5]);
  assign mux_49_nl = MUX_s_1_2_2(mux_48_nl, mux_47_nl, fsm_output[0]);
  assign and_56_nl = (~ mux_49_nl) & and_dcpl_54;
  assign nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat = MUX_v_64_2_2((readslicef_65_64_1(acc_2_nl)),
      COMP_LOOP_1_acc_8_itm, and_56_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_54_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] or_50_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] or_48_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat;
  assign or_50_nl = (fsm_output[2:1]!=2'b10);
  assign mux_52_nl = MUX_s_1_2_2(or_50_nl, or_tmp_41, fsm_output[4]);
  assign mux_53_nl = MUX_s_1_2_2(mux_52_nl, or_tmp_38, fsm_output[5]);
  assign or_48_nl = (fsm_output[2:1]!=2'b00);
  assign mux_50_nl = MUX_s_1_2_2(or_tmp_41, or_48_nl, fsm_output[4]);
  assign mux_51_nl = MUX_s_1_2_2(or_tmp_38, mux_50_nl, fsm_output[5]);
  assign mux_54_nl = MUX_s_1_2_2(mux_53_nl, mux_51_nl, fsm_output[0]);
  assign nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat = (~ mux_54_nl) & and_dcpl_54;
  wire[0:0] and_107_nl;
  wire [3:0] nl_COMP_LOOP_2_tmp_lshift_rg_s;
  assign and_107_nl = (fsm_output==7'b0000010);
  assign nl_COMP_LOOP_2_tmp_lshift_rg_s = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, z_out_5,
      and_107_nl);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0 = ~ COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0 = z_out_4[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 = ~ (z_out_1[4]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  modulo  COMP_LOOP_1_modulo_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd9)) COMP_LOOP_1_tmp_lshift_rg (
      .a(1'b1),
      .s(z_out_5),
      .z(COMP_LOOP_1_tmp_lshift_itm)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd11)) COMP_LOOP_2_tmp_lshift_rg (
      .a(1'b1),
      .s(nl_COMP_LOOP_2_tmp_lshift_rg_s[3:0]),
      .z(z_out)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(nor_32_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .COMP_LOOP_C_31_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0[0:0]),
      .COMP_LOOP_C_62_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0[0:0]),
      .VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0[0:0]),
      .STAGE_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0[0:0])
    );
  assign mux_45_nl = MUX_s_1_2_2((~ or_tmp_2), mux_tmp_38, fsm_output[5]);
  assign mux_44_nl = MUX_s_1_2_2(mux_tmp_38, mux_tmp_21, fsm_output[5]);
  assign mux_46_nl = MUX_s_1_2_2(mux_45_nl, mux_44_nl, fsm_output[0]);
  assign nor_32_rmff = ~(mux_46_nl | (fsm_output[6]));
  assign nor_cse = ~((fsm_output[6]) | (fsm_output[5]) | (fsm_output[0]));
  assign nor_28_cse = ~((fsm_output[3:2]!=2'b00));
  assign nl_COMP_LOOP_1_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_acc_psp_sva
      , 1'b0}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_1_acc_10_nl = nl_COMP_LOOP_1_acc_10_nl[10:0];
  assign COMP_LOOP_1_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_1_acc_10_nl);
  assign tmp_3_lpi_4_dfm_mx0 = MUX_v_64_2_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
      COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign or_tmp_2 = (fsm_output[4:2]!=3'b000);
  assign or_tmp_10 = (fsm_output[5:1]!=5'b00000);
  assign and_dcpl_7 = ~((fsm_output[5]) | (fsm_output[0]));
  assign and_dcpl_8 = and_dcpl_7 & (~ (fsm_output[6]));
  assign and_dcpl_9 = ~((fsm_output[1]) | (fsm_output[4]));
  assign and_dcpl_11 = nor_28_cse & and_dcpl_9;
  assign and_dcpl_15 = nor_28_cse & (fsm_output[1]) & (~ (fsm_output[4]));
  assign or_dcpl_4 = (fsm_output[3:2]!=2'b00);
  assign or_dcpl_5 = or_dcpl_4 | (fsm_output[5:4]!=2'b00);
  assign mux_tmp_17 = MUX_s_1_2_2(or_dcpl_5, or_tmp_10, fsm_output[0]);
  assign nor_tmp_7 = (fsm_output[4:1]==4'b1111);
  assign and_dcpl_20 = (~ (fsm_output[5])) & (fsm_output[0]);
  assign and_dcpl_21 = and_dcpl_20 & (~ (fsm_output[6]));
  assign and_dcpl_22 = and_dcpl_15 & and_dcpl_21;
  assign and_dcpl_24 = (fsm_output[5]) & (fsm_output[0]) & (~ (fsm_output[6]));
  assign and_dcpl_25 = and_dcpl_11 & and_dcpl_24;
  assign and_dcpl_27 = (fsm_output[5]) & (~ (fsm_output[0])) & (~ (fsm_output[6]));
  assign nor_tmp_9 = (fsm_output[5:1]==5'b11111);
  assign nor_tmp_10 = (fsm_output[3:1]==3'b111);
  assign or_tmp_18 = (fsm_output[3:1]!=3'b000);
  assign mux_tmp_21 = MUX_s_1_2_2((~ or_tmp_18), nor_tmp_10, fsm_output[4]);
  assign and_tmp = (fsm_output[5]) & mux_tmp_21;
  assign and_dcpl_34 = ~((fsm_output[4]) | (fsm_output[6]));
  assign and_dcpl_35 = nor_28_cse & and_dcpl_34;
  assign or_tmp_22 = (~ (fsm_output[5])) | (fsm_output[1]);
  assign mux_tmp_25 = MUX_s_1_2_2((~ (fsm_output[1])), (fsm_output[1]), fsm_output[5]);
  assign and_dcpl_39 = ~((fsm_output[5:4]!=2'b00));
  assign mux_tmp_38 = MUX_s_1_2_2(nor_28_cse, nor_tmp_10, fsm_output[4]);
  assign and_dcpl_52 = (fsm_output[3:2]==2'b01) & and_dcpl_9;
  assign and_dcpl_53 = and_dcpl_52 & and_dcpl_8;
  assign and_dcpl_54 = ~((fsm_output[3]) | (fsm_output[6]));
  assign or_tmp_38 = (fsm_output[4]) | (fsm_output[1]) | (~ (fsm_output[2]));
  assign and_dcpl_56 = and_dcpl_15 & and_dcpl_24;
  assign or_tmp_41 = (fsm_output[2:1]!=2'b01);
  assign or_dcpl_13 = or_dcpl_4 | (~ (fsm_output[1])) | (fsm_output[4]);
  assign or_dcpl_14 = or_dcpl_13 | (fsm_output[5]) | (fsm_output[0]) | (fsm_output[6]);
  assign mux_tmp_52 = MUX_s_1_2_2(and_dcpl_11, nor_tmp_7, fsm_output[5]);
  assign and_dcpl_71 = (fsm_output[2:1]==2'b01) & and_dcpl_34;
  assign and_dcpl_77 = nor_28_cse & (~ (fsm_output[1])) & (fsm_output[4]);
  assign STAGE_LOOP_i_3_0_sva_mx0c1 = and_dcpl_15 & and_dcpl_7 & (fsm_output[6]);
  assign VEC_LOOP_j_10_0_sva_9_0_mx0c0 = and_dcpl_11 & and_dcpl_21;
  assign nor_18_nl = ~((COMP_LOOP_acc_1_cse_sva[0]) | (~ (fsm_output[5])));
  assign nor_19_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[0]) | (fsm_output[5]));
  assign mux_64_nl = MUX_s_1_2_2(nor_18_nl, nor_19_nl, fsm_output[0]);
  assign COMP_LOOP_1_acc_8_itm_mx0c0 = mux_64_nl & (~ (fsm_output[3])) & and_dcpl_71;
  assign and_85_nl = (COMP_LOOP_acc_1_cse_sva[0]) & (fsm_output[5]);
  assign nor_17_nl = ~((~ (COMP_LOOP_acc_10_cse_10_1_1_sva[0])) | (fsm_output[5]));
  assign mux_65_nl = MUX_s_1_2_2(and_85_nl, nor_17_nl, fsm_output[0]);
  assign COMP_LOOP_1_acc_8_itm_mx0c1 = mux_65_nl & (~ (fsm_output[3])) & and_dcpl_71;
  assign COMP_LOOP_1_acc_8_itm_mx0c3 = and_dcpl_77 & and_dcpl_21;
  assign or_69_nl = (fsm_output[5]) | (~ (fsm_output[1]));
  assign mux_66_nl = MUX_s_1_2_2(or_69_nl, or_tmp_22, fsm_output[0]);
  assign COMP_LOOP_1_acc_8_itm_mx0c4 = ~(mux_66_nl | (fsm_output[3]) | (fsm_output[2])
      | (~ (fsm_output[4])) | (fsm_output[6]));
  assign COMP_LOOP_1_acc_8_itm_mx0c6 = and_dcpl_77 & and_dcpl_27;
  assign mux_24_nl = MUX_s_1_2_2(and_dcpl_11, nor_tmp_7, fsm_output[0]);
  assign and_18_nl = mux_24_nl & (fsm_output[6:5]==2'b01);
  assign vec_rsc_0_0_i_d_d_pff = MUX_v_64_2_2(COMP_LOOP_1_modulo_cmp_return_rsc_z,
      COMP_LOOP_1_acc_8_itm, and_18_nl);
  assign and_19_nl = and_dcpl_15 & and_dcpl_8;
  assign and_28_nl = and_dcpl_15 & and_dcpl_27;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_9_4_2((COMP_LOOP_1_acc_10_itm_10_1_1[9:1]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_1_cse_sva[9:1]), (COMP_LOOP_acc_10_cse_10_1_sva[9:1]),
      {and_19_nl , and_dcpl_22 , and_dcpl_25 , and_28_nl});
  assign and_29_nl = nor_tmp_7 & and_dcpl_21;
  assign and_30_nl = and_dcpl_11 & and_dcpl_27;
  assign and_31_nl = nor_tmp_7 & and_dcpl_27;
  assign and_32_nl = nor_tmp_7 & and_dcpl_24;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_9_4_2((COMP_LOOP_acc_10_cse_10_1_1_sva[9:1]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_10_cse_10_1_sva[9:1]), (COMP_LOOP_acc_1_cse_sva[9:1]),
      {and_29_nl , and_30_nl , and_31_nl , and_32_nl});
  assign mux_27_nl = MUX_s_1_2_2(and_tmp, nor_tmp_9, VEC_LOOP_j_10_0_sva_9_0[0]);
  assign nor_23_nl = ~((VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[5:1]!=5'b10000));
  assign mux_28_nl = MUX_s_1_2_2(mux_27_nl, nor_23_nl, COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign and_89_nl = ((~ (COMP_LOOP_acc_10_cse_10_1_1_sva[0])) | (fsm_output[5]))
      & (fsm_output[4:1]==4'b1111);
  assign nor_24_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[0]) | (fsm_output[5]) | (~
      nor_tmp_7));
  assign mux_25_nl = MUX_s_1_2_2(and_89_nl, nor_24_nl, COMP_LOOP_acc_1_cse_sva[0]);
  assign mux_29_nl = MUX_s_1_2_2(mux_28_nl, mux_25_nl, fsm_output[0]);
  assign vec_rsc_0_0_i_we_d_pff = mux_29_nl & (~ (fsm_output[6]));
  assign nand_1_nl = ~(((~ (COMP_LOOP_1_acc_10_itm_10_1_1[0])) | (fsm_output[5]))
      & (fsm_output[1]));
  assign or_31_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[0]) | (fsm_output[5]) | (~ (fsm_output[1]));
  assign mux_33_nl = MUX_s_1_2_2(nand_1_nl, or_31_nl, COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign mux_31_nl = MUX_s_1_2_2(mux_tmp_25, or_tmp_22, VEC_LOOP_j_10_0_sva_9_0[0]);
  assign or_28_nl = (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[5]) | (~ (fsm_output[1]));
  assign or_26_nl = (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (COMP_LOOP_acc_1_cse_sva[0]);
  assign mux_32_nl = MUX_s_1_2_2(mux_31_nl, or_28_nl, or_26_nl);
  assign mux_34_nl = MUX_s_1_2_2(mux_33_nl, mux_32_nl, fsm_output[0]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_34_nl) & and_dcpl_35;
  assign nor_21_nl = ~((~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[5:1]!=5'b10000));
  assign mux_36_nl = MUX_s_1_2_2(nor_tmp_9, and_tmp, VEC_LOOP_j_10_0_sva_9_0[0]);
  assign mux_37_nl = MUX_s_1_2_2(nor_21_nl, mux_36_nl, COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign nor_22_nl = ~((~ (COMP_LOOP_acc_10_cse_10_1_1_sva[0])) | (fsm_output[5])
      | (~ nor_tmp_7));
  assign and_88_nl = ((COMP_LOOP_acc_10_cse_10_1_1_sva[0]) | (fsm_output[5])) & (fsm_output[4:1]==4'b1111);
  assign mux_35_nl = MUX_s_1_2_2(nor_22_nl, and_88_nl, COMP_LOOP_acc_1_cse_sva[0]);
  assign mux_38_nl = MUX_s_1_2_2(mux_37_nl, mux_35_nl, fsm_output[0]);
  assign vec_rsc_0_1_i_we_d_pff = mux_38_nl & (~ (fsm_output[6]));
  assign or_73_nl = (~ (COMP_LOOP_1_acc_10_itm_10_1_1[0])) | (fsm_output[5]) | (~
      (fsm_output[1]));
  assign nand_nl = ~(((COMP_LOOP_1_acc_10_itm_10_1_1[0]) | (fsm_output[5])) & (fsm_output[1]));
  assign mux_41_nl = MUX_s_1_2_2(or_73_nl, nand_nl, COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign or_38_nl = (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[5]) | (~ (fsm_output[1]));
  assign mux_39_nl = MUX_s_1_2_2(or_tmp_22, mux_tmp_25, VEC_LOOP_j_10_0_sva_9_0[0]);
  assign and_87_nl = COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm & (COMP_LOOP_acc_1_cse_sva[0]);
  assign mux_40_nl = MUX_s_1_2_2(or_38_nl, mux_39_nl, and_87_nl);
  assign mux_42_nl = MUX_s_1_2_2(mux_41_nl, mux_40_nl, fsm_output[0]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_42_nl) & and_dcpl_35;
  assign nl_COMP_LOOP_1_tmp_mul_nl = COMP_LOOP_1_tmp_lshift_itm * COMP_LOOP_acc_psp_sva;
  assign COMP_LOOP_1_tmp_mul_nl = nl_COMP_LOOP_1_tmp_mul_nl[8:0];
  assign twiddle_rsc_0_0_i_radr_d = MUX_v_9_2_2(COMP_LOOP_1_tmp_mul_nl, (COMP_LOOP_2_tmp_mul_idiv_sva[9:1]),
      and_dcpl_22);
  assign twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = nor_28_cse & (fsm_output[1])
      & (~ (fsm_output[6])) & and_dcpl_39 & (~((fsm_output[0]) & (COMP_LOOP_2_tmp_mul_idiv_sva[0])));
  assign twiddle_rsc_0_1_i_radr_d = z_out_6[9:1];
  assign twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = and_dcpl_15 & and_dcpl_7
      & (~ (fsm_output[6])) & (z_out_6[0]);
  assign and_127_cse = (fsm_output==7'b0100011);
  assign and_dcpl_136 = nor_28_cse & (~ (fsm_output[4])) & (~ (fsm_output[1])) &
      (~ (fsm_output[5])) & (fsm_output[0]) & (fsm_output[6]);
  assign and_dcpl_144 = nor_28_cse & (~ (fsm_output[4])) & (fsm_output[1]) & and_dcpl_7
      & (~ (fsm_output[6]));
  assign and_dcpl_158 = nor_28_cse & (~ (fsm_output[4])) & (fsm_output[1]) & (~ (fsm_output[5]))
      & (~ (fsm_output[0])) & (~ (fsm_output[6]));
  assign COMP_LOOP_COMP_LOOP_nor_nl = ~((VEC_LOOP_j_10_0_sva_9_0[0]) | and_127_cse);
  assign COMP_LOOP_and_2_nl = (VEC_LOOP_j_10_0_sva_9_0[0]) & (~ and_127_cse);
  assign COMP_LOOP_mux_14_cse = MUX1HOT_v_64_3_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
      COMP_LOOP_1_acc_8_itm, {COMP_LOOP_COMP_LOOP_nor_nl , COMP_LOOP_and_2_nl , and_127_cse});
  always @(posedge clk) begin
    if ( (and_dcpl_11 & and_dcpl_8) | STAGE_LOOP_i_3_0_sva_mx0c1 ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b1010, z_out_5, STAGE_LOOP_i_3_0_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_55_nl, mux_tmp_17, fsm_output[6]) ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_15 & and_dcpl_7 & (fsm_output[6])
          & (~ (z_out_1[4]));
      reg_ensig_cgo_cse <= nor_32_rmff;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= 10'b0000000000;
    end
    else if ( VEC_LOOP_j_10_0_sva_9_0_mx0c0 | (and_dcpl_11 & and_dcpl_20 & (fsm_output[6]))
        ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_4[9:0]), VEC_LOOP_j_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~(or_tmp_10 ^ (fsm_output[6])) ) begin
      STAGE_LOOP_lshift_psp_sva <= z_out;
    end
  end
  always @(posedge clk) begin
    if ( mux_nl & (fsm_output[4:2]==3'b000) ) begin
      COMP_LOOP_acc_psp_sva <= MUX_v_9_2_2(9'b000000000, COMP_LOOP_COMP_LOOP_mux_1_nl,
          nand_4_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_14 ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= COMP_LOOP_1_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_tmp_mul_idiv_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_14 ) begin
      COMP_LOOP_2_tmp_mul_idiv_sva <= z_out_6[9:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_14 ) begin
      COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm <= z_out_4[10];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_sva <= 10'b0000000000;
    end
    else if ( ~(mux_58_nl & (~ (fsm_output[6]))) ) begin
      COMP_LOOP_acc_1_cse_sva <= nl_COMP_LOOP_acc_1_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= 10'b0000000000;
    end
    else if ( mux_60_nl | (fsm_output[6]) ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= readslicef_11_10_1(COMP_LOOP_2_acc_10_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_tmp_17 & (~ (fsm_output[6]))) ) begin
      COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_1_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_14 ) begin
      reg_COMP_LOOP_k_10_1_ftd <= z_out_1[8:0];
    end
  end
  always @(posedge clk) begin
    if ( ~(or_dcpl_13 | (fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[6]))
        ) begin
      tmp_4_sva <= twiddle_rsc_0_0_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( mux_63_nl | (fsm_output[6]) ) begin
      COMP_LOOP_tmp_mux_itm <= MUX_v_64_2_2(twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_0_i_q_d,
          and_69_nl);
    end
  end
  always @(posedge clk) begin
    if ( COMP_LOOP_1_acc_8_itm_mx0c0 | COMP_LOOP_1_acc_8_itm_mx0c1 | and_dcpl_53
        | COMP_LOOP_1_acc_8_itm_mx0c3 | COMP_LOOP_1_acc_8_itm_mx0c4 | and_dcpl_56
        | COMP_LOOP_1_acc_8_itm_mx0c6 ) begin
      COMP_LOOP_1_acc_8_itm <= MUX1HOT_v_64_5_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
          COMP_LOOP_acc_1_nl, z_out_6, COMP_LOOP_1_modulo_cmp_return_rsc_z, {COMP_LOOP_1_acc_8_itm_mx0c0
          , COMP_LOOP_1_acc_8_itm_mx0c1 , COMP_LOOP_or_nl , COMP_LOOP_or_2_nl , COMP_LOOP_1_acc_8_itm_mx0c4});
    end
  end
  assign nor_55_nl = ~((fsm_output[5:0]!=6'b000000));
  assign VEC_LOOP_j_not_1_nl = ~ VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  assign nl_COMP_LOOP_acc_nl = (VEC_LOOP_j_10_0_sva_9_0[9:1]) + COMP_LOOP_acc_psp_sva;
  assign COMP_LOOP_acc_nl = nl_COMP_LOOP_acc_nl[8:0];
  assign COMP_LOOP_COMP_LOOP_mux_1_nl = MUX_v_9_2_2(COMP_LOOP_acc_nl, reg_COMP_LOOP_k_10_1_ftd,
      and_dcpl_25);
  assign nand_4_nl = ~((~ or_tmp_18) & and_dcpl_39 & (fsm_output[0]));
  assign and_nl = (~((fsm_output[6:5]==2'b11))) & (fsm_output[0]);
  assign mux_nl = MUX_s_1_2_2(and_nl, nor_cse, fsm_output[1]);
  assign nl_COMP_LOOP_acc_1_cse_sva  = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_acc_psp_sva
      , 1'b1});
  assign mux_58_nl = MUX_s_1_2_2(or_dcpl_5, (~ mux_tmp_52), fsm_output[0]);
  assign nl_COMP_LOOP_2_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_acc_psp_sva
      , 1'b1}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_2_acc_10_nl = nl_COMP_LOOP_2_acc_10_nl[10:0];
  assign mux_59_nl = MUX_s_1_2_2((~ or_tmp_2), nor_tmp_7, fsm_output[5]);
  assign mux_60_nl = MUX_s_1_2_2(mux_59_nl, mux_tmp_52, fsm_output[0]);
  assign nl_COMP_LOOP_1_acc_nl = ({z_out_1 , 1'b0}) + ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + 11'b00000000001;
  assign COMP_LOOP_1_acc_nl = nl_COMP_LOOP_1_acc_nl[10:0];
  assign and_69_nl = and_dcpl_52 & and_dcpl_7 & (~ (fsm_output[6])) & (~ (COMP_LOOP_2_tmp_mul_idiv_sva[0]));
  assign nor_20_nl = ~((fsm_output[4]) | ((fsm_output[2:1]==2'b11)) | (fsm_output[3]));
  assign mux_62_nl = MUX_s_1_2_2(nor_20_nl, (fsm_output[4]), fsm_output[5]);
  assign mux_61_nl = MUX_s_1_2_2((~ or_tmp_2), (fsm_output[4]), fsm_output[5]);
  assign or_63_nl = (COMP_LOOP_2_tmp_mul_idiv_sva[0]) | (fsm_output[0]);
  assign mux_63_nl = MUX_s_1_2_2(mux_62_nl, mux_61_nl, or_63_nl);
  assign COMP_LOOP_mux_23_nl = MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, tmp_3_lpi_4_dfm_mx0,
      and_127_cse);
  assign nl_COMP_LOOP_acc_1_nl = COMP_LOOP_mux_14_cse + COMP_LOOP_mux_23_nl;
  assign COMP_LOOP_acc_1_nl = nl_COMP_LOOP_acc_1_nl[63:0];
  assign COMP_LOOP_or_nl = and_dcpl_53 | and_dcpl_56;
  assign COMP_LOOP_or_2_nl = COMP_LOOP_1_acc_8_itm_mx0c3 | COMP_LOOP_1_acc_8_itm_mx0c6;
  assign and_175_nl = (fsm_output==7'b1000010);
  assign COMP_LOOP_mux_22_nl = MUX_v_9_2_2(COMP_LOOP_acc_psp_sva, ({5'b00001 , (~
      z_out_5)}), and_175_nl);
  assign nl_z_out_1 = conv_u2u_9_10(COMP_LOOP_mux_22_nl) + 10'b0000000001;
  assign z_out_1 = nl_z_out_1[9:0];
  assign COMP_LOOP_mux_25_nl = MUX_v_11_2_2(({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))}),
      STAGE_LOOP_lshift_psp_sva, and_dcpl_136);
  assign COMP_LOOP_COMP_LOOP_nand_1_nl = ~(and_dcpl_136 & (~(nor_28_cse & (~ (fsm_output[4]))
      & (fsm_output[1]) & nor_cse)));
  assign COMP_LOOP_mux_26_nl = MUX_v_10_2_2(({COMP_LOOP_acc_psp_sva , 1'b1}), VEC_LOOP_j_10_0_sva_9_0,
      and_dcpl_136);
  assign nl_acc_3_nl = ({COMP_LOOP_mux_25_nl , COMP_LOOP_COMP_LOOP_nand_1_nl}) +
      conv_u2u_11_12({COMP_LOOP_mux_26_nl , 1'b1});
  assign acc_3_nl = nl_acc_3_nl[11:0];
  assign z_out_4 = readslicef_12_11_1(acc_3_nl);
  assign STAGE_LOOP_mux_4_nl = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, (~ STAGE_LOOP_i_3_0_sva),
      and_dcpl_144);
  assign nl_z_out_5 = STAGE_LOOP_mux_4_nl + ({1'b1 , (~ and_dcpl_144) , 2'b11});
  assign z_out_5 = nl_z_out_5[3:0];
  assign and_176_nl = and_dcpl_77 & (~ (fsm_output[5])) & (fsm_output[0]) & (~ (fsm_output[6]));
  assign and_177_nl = and_dcpl_77 & (fsm_output[5]) & (~ (fsm_output[0])) & (~ (fsm_output[6]));
  assign COMP_LOOP_mux1h_19_nl = MUX1HOT_v_64_3_2(tmp_4_sva, COMP_LOOP_tmp_mux_itm,
      ({54'b000000000000000000000000000000000000000000000000000000 , (z_out[9:0])}),
      {and_176_nl , and_177_nl , and_dcpl_158});
  assign COMP_LOOP_mux_27_nl = MUX_v_64_2_2(COMP_LOOP_1_modulo_cmp_return_rsc_z,
      ({54'b000000000000000000000000000000000000000000000000000000 , COMP_LOOP_acc_psp_sva
      , 1'b1}), and_dcpl_158);
  assign nl_z_out_6 = COMP_LOOP_mux1h_19_nl * COMP_LOOP_mux_27_nl;
  assign z_out_6 = nl_z_out_6[63:0];

  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat,
      r_rsc_triosy_lz, twiddle_rsc_0_0_radr, twiddle_rsc_0_0_q, twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_0_1_radr, twiddle_rsc_0_1_q, twiddle_rsc_triosy_0_1_lz
);
  input clk;
  input rst;
  output [8:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [8:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [8:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [8:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  output [8:0] twiddle_rsc_0_0_radr;
  input [63:0] twiddle_rsc_0_0_q;
  output twiddle_rsc_triosy_0_0_lz;
  output [8:0] twiddle_rsc_0_1_radr;
  input [63:0] twiddle_rsc_0_1_q;
  output twiddle_rsc_triosy_0_1_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_0_i_q_d;
  wire [8:0] twiddle_rsc_0_0_i_radr_d;
  wire twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_1_i_q_d;
  wire [8:0] twiddle_rsc_0_1_i_radr_d;
  wire twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [8:0] vec_rsc_0_0_i_radr_d_iff;
  wire [8:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_9_64_512_512_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_11_9_64_512_512_64_1_gen twiddle_rsc_0_0_i
      (
      .q(twiddle_rsc_0_0_q),
      .radr(twiddle_rsc_0_0_radr),
      .q_d(twiddle_rsc_0_0_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_12_9_64_512_512_64_1_gen twiddle_rsc_0_1_i
      (
      .q(twiddle_rsc_0_1_q),
      .radr(twiddle_rsc_0_1_radr),
      .q_d(twiddle_rsc_0_1_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_0_i_q_d(twiddle_rsc_0_0_i_q_d),
      .twiddle_rsc_0_0_i_radr_d(twiddle_rsc_0_0_i_radr_d),
      .twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_1_i_q_d(twiddle_rsc_0_1_i_q_d),
      .twiddle_rsc_0_1_i_radr_d(twiddle_rsc_0_1_i_radr_d),
      .twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff)
    );
endmodule



