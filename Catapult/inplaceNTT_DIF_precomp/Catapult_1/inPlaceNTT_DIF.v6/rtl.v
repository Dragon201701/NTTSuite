// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Mon Aug  2 17:18:47 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output [63:0] q_d;
  input [6:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [6:0] radr;
  output we;
  output [63:0] d;
  output [6:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [6:0] radr_d;
  input [6:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, COMP_LOOP_C_31_tr0, COMP_LOOP_C_62_tr0, COMP_LOOP_C_93_tr0,
      COMP_LOOP_C_124_tr0, COMP_LOOP_C_155_tr0, COMP_LOOP_C_186_tr0, COMP_LOOP_C_217_tr0,
      COMP_LOOP_C_248_tr0, VEC_LOOP_C_0_tr0, STAGE_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input COMP_LOOP_C_31_tr0;
  input COMP_LOOP_C_62_tr0;
  input COMP_LOOP_C_93_tr0;
  input COMP_LOOP_C_124_tr0;
  input COMP_LOOP_C_155_tr0;
  input COMP_LOOP_C_186_tr0;
  input COMP_LOOP_C_217_tr0;
  input COMP_LOOP_C_248_tr0;
  input VEC_LOOP_C_0_tr0;
  input STAGE_LOOP_C_1_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_LOOP_C_0 = 8'd1,
    COMP_LOOP_C_0 = 8'd2,
    COMP_LOOP_C_1 = 8'd3,
    COMP_LOOP_C_2 = 8'd4,
    COMP_LOOP_C_3 = 8'd5,
    COMP_LOOP_C_4 = 8'd6,
    COMP_LOOP_C_5 = 8'd7,
    COMP_LOOP_C_6 = 8'd8,
    COMP_LOOP_C_7 = 8'd9,
    COMP_LOOP_C_8 = 8'd10,
    COMP_LOOP_C_9 = 8'd11,
    COMP_LOOP_C_10 = 8'd12,
    COMP_LOOP_C_11 = 8'd13,
    COMP_LOOP_C_12 = 8'd14,
    COMP_LOOP_C_13 = 8'd15,
    COMP_LOOP_C_14 = 8'd16,
    COMP_LOOP_C_15 = 8'd17,
    COMP_LOOP_C_16 = 8'd18,
    COMP_LOOP_C_17 = 8'd19,
    COMP_LOOP_C_18 = 8'd20,
    COMP_LOOP_C_19 = 8'd21,
    COMP_LOOP_C_20 = 8'd22,
    COMP_LOOP_C_21 = 8'd23,
    COMP_LOOP_C_22 = 8'd24,
    COMP_LOOP_C_23 = 8'd25,
    COMP_LOOP_C_24 = 8'd26,
    COMP_LOOP_C_25 = 8'd27,
    COMP_LOOP_C_26 = 8'd28,
    COMP_LOOP_C_27 = 8'd29,
    COMP_LOOP_C_28 = 8'd30,
    COMP_LOOP_C_29 = 8'd31,
    COMP_LOOP_C_30 = 8'd32,
    COMP_LOOP_C_31 = 8'd33,
    COMP_LOOP_C_32 = 8'd34,
    COMP_LOOP_C_33 = 8'd35,
    COMP_LOOP_C_34 = 8'd36,
    COMP_LOOP_C_35 = 8'd37,
    COMP_LOOP_C_36 = 8'd38,
    COMP_LOOP_C_37 = 8'd39,
    COMP_LOOP_C_38 = 8'd40,
    COMP_LOOP_C_39 = 8'd41,
    COMP_LOOP_C_40 = 8'd42,
    COMP_LOOP_C_41 = 8'd43,
    COMP_LOOP_C_42 = 8'd44,
    COMP_LOOP_C_43 = 8'd45,
    COMP_LOOP_C_44 = 8'd46,
    COMP_LOOP_C_45 = 8'd47,
    COMP_LOOP_C_46 = 8'd48,
    COMP_LOOP_C_47 = 8'd49,
    COMP_LOOP_C_48 = 8'd50,
    COMP_LOOP_C_49 = 8'd51,
    COMP_LOOP_C_50 = 8'd52,
    COMP_LOOP_C_51 = 8'd53,
    COMP_LOOP_C_52 = 8'd54,
    COMP_LOOP_C_53 = 8'd55,
    COMP_LOOP_C_54 = 8'd56,
    COMP_LOOP_C_55 = 8'd57,
    COMP_LOOP_C_56 = 8'd58,
    COMP_LOOP_C_57 = 8'd59,
    COMP_LOOP_C_58 = 8'd60,
    COMP_LOOP_C_59 = 8'd61,
    COMP_LOOP_C_60 = 8'd62,
    COMP_LOOP_C_61 = 8'd63,
    COMP_LOOP_C_62 = 8'd64,
    COMP_LOOP_C_63 = 8'd65,
    COMP_LOOP_C_64 = 8'd66,
    COMP_LOOP_C_65 = 8'd67,
    COMP_LOOP_C_66 = 8'd68,
    COMP_LOOP_C_67 = 8'd69,
    COMP_LOOP_C_68 = 8'd70,
    COMP_LOOP_C_69 = 8'd71,
    COMP_LOOP_C_70 = 8'd72,
    COMP_LOOP_C_71 = 8'd73,
    COMP_LOOP_C_72 = 8'd74,
    COMP_LOOP_C_73 = 8'd75,
    COMP_LOOP_C_74 = 8'd76,
    COMP_LOOP_C_75 = 8'd77,
    COMP_LOOP_C_76 = 8'd78,
    COMP_LOOP_C_77 = 8'd79,
    COMP_LOOP_C_78 = 8'd80,
    COMP_LOOP_C_79 = 8'd81,
    COMP_LOOP_C_80 = 8'd82,
    COMP_LOOP_C_81 = 8'd83,
    COMP_LOOP_C_82 = 8'd84,
    COMP_LOOP_C_83 = 8'd85,
    COMP_LOOP_C_84 = 8'd86,
    COMP_LOOP_C_85 = 8'd87,
    COMP_LOOP_C_86 = 8'd88,
    COMP_LOOP_C_87 = 8'd89,
    COMP_LOOP_C_88 = 8'd90,
    COMP_LOOP_C_89 = 8'd91,
    COMP_LOOP_C_90 = 8'd92,
    COMP_LOOP_C_91 = 8'd93,
    COMP_LOOP_C_92 = 8'd94,
    COMP_LOOP_C_93 = 8'd95,
    COMP_LOOP_C_94 = 8'd96,
    COMP_LOOP_C_95 = 8'd97,
    COMP_LOOP_C_96 = 8'd98,
    COMP_LOOP_C_97 = 8'd99,
    COMP_LOOP_C_98 = 8'd100,
    COMP_LOOP_C_99 = 8'd101,
    COMP_LOOP_C_100 = 8'd102,
    COMP_LOOP_C_101 = 8'd103,
    COMP_LOOP_C_102 = 8'd104,
    COMP_LOOP_C_103 = 8'd105,
    COMP_LOOP_C_104 = 8'd106,
    COMP_LOOP_C_105 = 8'd107,
    COMP_LOOP_C_106 = 8'd108,
    COMP_LOOP_C_107 = 8'd109,
    COMP_LOOP_C_108 = 8'd110,
    COMP_LOOP_C_109 = 8'd111,
    COMP_LOOP_C_110 = 8'd112,
    COMP_LOOP_C_111 = 8'd113,
    COMP_LOOP_C_112 = 8'd114,
    COMP_LOOP_C_113 = 8'd115,
    COMP_LOOP_C_114 = 8'd116,
    COMP_LOOP_C_115 = 8'd117,
    COMP_LOOP_C_116 = 8'd118,
    COMP_LOOP_C_117 = 8'd119,
    COMP_LOOP_C_118 = 8'd120,
    COMP_LOOP_C_119 = 8'd121,
    COMP_LOOP_C_120 = 8'd122,
    COMP_LOOP_C_121 = 8'd123,
    COMP_LOOP_C_122 = 8'd124,
    COMP_LOOP_C_123 = 8'd125,
    COMP_LOOP_C_124 = 8'd126,
    COMP_LOOP_C_125 = 8'd127,
    COMP_LOOP_C_126 = 8'd128,
    COMP_LOOP_C_127 = 8'd129,
    COMP_LOOP_C_128 = 8'd130,
    COMP_LOOP_C_129 = 8'd131,
    COMP_LOOP_C_130 = 8'd132,
    COMP_LOOP_C_131 = 8'd133,
    COMP_LOOP_C_132 = 8'd134,
    COMP_LOOP_C_133 = 8'd135,
    COMP_LOOP_C_134 = 8'd136,
    COMP_LOOP_C_135 = 8'd137,
    COMP_LOOP_C_136 = 8'd138,
    COMP_LOOP_C_137 = 8'd139,
    COMP_LOOP_C_138 = 8'd140,
    COMP_LOOP_C_139 = 8'd141,
    COMP_LOOP_C_140 = 8'd142,
    COMP_LOOP_C_141 = 8'd143,
    COMP_LOOP_C_142 = 8'd144,
    COMP_LOOP_C_143 = 8'd145,
    COMP_LOOP_C_144 = 8'd146,
    COMP_LOOP_C_145 = 8'd147,
    COMP_LOOP_C_146 = 8'd148,
    COMP_LOOP_C_147 = 8'd149,
    COMP_LOOP_C_148 = 8'd150,
    COMP_LOOP_C_149 = 8'd151,
    COMP_LOOP_C_150 = 8'd152,
    COMP_LOOP_C_151 = 8'd153,
    COMP_LOOP_C_152 = 8'd154,
    COMP_LOOP_C_153 = 8'd155,
    COMP_LOOP_C_154 = 8'd156,
    COMP_LOOP_C_155 = 8'd157,
    COMP_LOOP_C_156 = 8'd158,
    COMP_LOOP_C_157 = 8'd159,
    COMP_LOOP_C_158 = 8'd160,
    COMP_LOOP_C_159 = 8'd161,
    COMP_LOOP_C_160 = 8'd162,
    COMP_LOOP_C_161 = 8'd163,
    COMP_LOOP_C_162 = 8'd164,
    COMP_LOOP_C_163 = 8'd165,
    COMP_LOOP_C_164 = 8'd166,
    COMP_LOOP_C_165 = 8'd167,
    COMP_LOOP_C_166 = 8'd168,
    COMP_LOOP_C_167 = 8'd169,
    COMP_LOOP_C_168 = 8'd170,
    COMP_LOOP_C_169 = 8'd171,
    COMP_LOOP_C_170 = 8'd172,
    COMP_LOOP_C_171 = 8'd173,
    COMP_LOOP_C_172 = 8'd174,
    COMP_LOOP_C_173 = 8'd175,
    COMP_LOOP_C_174 = 8'd176,
    COMP_LOOP_C_175 = 8'd177,
    COMP_LOOP_C_176 = 8'd178,
    COMP_LOOP_C_177 = 8'd179,
    COMP_LOOP_C_178 = 8'd180,
    COMP_LOOP_C_179 = 8'd181,
    COMP_LOOP_C_180 = 8'd182,
    COMP_LOOP_C_181 = 8'd183,
    COMP_LOOP_C_182 = 8'd184,
    COMP_LOOP_C_183 = 8'd185,
    COMP_LOOP_C_184 = 8'd186,
    COMP_LOOP_C_185 = 8'd187,
    COMP_LOOP_C_186 = 8'd188,
    COMP_LOOP_C_187 = 8'd189,
    COMP_LOOP_C_188 = 8'd190,
    COMP_LOOP_C_189 = 8'd191,
    COMP_LOOP_C_190 = 8'd192,
    COMP_LOOP_C_191 = 8'd193,
    COMP_LOOP_C_192 = 8'd194,
    COMP_LOOP_C_193 = 8'd195,
    COMP_LOOP_C_194 = 8'd196,
    COMP_LOOP_C_195 = 8'd197,
    COMP_LOOP_C_196 = 8'd198,
    COMP_LOOP_C_197 = 8'd199,
    COMP_LOOP_C_198 = 8'd200,
    COMP_LOOP_C_199 = 8'd201,
    COMP_LOOP_C_200 = 8'd202,
    COMP_LOOP_C_201 = 8'd203,
    COMP_LOOP_C_202 = 8'd204,
    COMP_LOOP_C_203 = 8'd205,
    COMP_LOOP_C_204 = 8'd206,
    COMP_LOOP_C_205 = 8'd207,
    COMP_LOOP_C_206 = 8'd208,
    COMP_LOOP_C_207 = 8'd209,
    COMP_LOOP_C_208 = 8'd210,
    COMP_LOOP_C_209 = 8'd211,
    COMP_LOOP_C_210 = 8'd212,
    COMP_LOOP_C_211 = 8'd213,
    COMP_LOOP_C_212 = 8'd214,
    COMP_LOOP_C_213 = 8'd215,
    COMP_LOOP_C_214 = 8'd216,
    COMP_LOOP_C_215 = 8'd217,
    COMP_LOOP_C_216 = 8'd218,
    COMP_LOOP_C_217 = 8'd219,
    COMP_LOOP_C_218 = 8'd220,
    COMP_LOOP_C_219 = 8'd221,
    COMP_LOOP_C_220 = 8'd222,
    COMP_LOOP_C_221 = 8'd223,
    COMP_LOOP_C_222 = 8'd224,
    COMP_LOOP_C_223 = 8'd225,
    COMP_LOOP_C_224 = 8'd226,
    COMP_LOOP_C_225 = 8'd227,
    COMP_LOOP_C_226 = 8'd228,
    COMP_LOOP_C_227 = 8'd229,
    COMP_LOOP_C_228 = 8'd230,
    COMP_LOOP_C_229 = 8'd231,
    COMP_LOOP_C_230 = 8'd232,
    COMP_LOOP_C_231 = 8'd233,
    COMP_LOOP_C_232 = 8'd234,
    COMP_LOOP_C_233 = 8'd235,
    COMP_LOOP_C_234 = 8'd236,
    COMP_LOOP_C_235 = 8'd237,
    COMP_LOOP_C_236 = 8'd238,
    COMP_LOOP_C_237 = 8'd239,
    COMP_LOOP_C_238 = 8'd240,
    COMP_LOOP_C_239 = 8'd241,
    COMP_LOOP_C_240 = 8'd242,
    COMP_LOOP_C_241 = 8'd243,
    COMP_LOOP_C_242 = 8'd244,
    COMP_LOOP_C_243 = 8'd245,
    COMP_LOOP_C_244 = 8'd246,
    COMP_LOOP_C_245 = 8'd247,
    COMP_LOOP_C_246 = 8'd248,
    COMP_LOOP_C_247 = 8'd249,
    COMP_LOOP_C_248 = 8'd250,
    VEC_LOOP_C_0 = 8'd251,
    STAGE_LOOP_C_1 = 8'd252,
    main_C_1 = 8'd253;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = COMP_LOOP_C_0;
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00000010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00000011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00000100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00000101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00000110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00000111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00001000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00001001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00001010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00001011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00001100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00001101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00001110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00001111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00010000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00010001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00010010;
        state_var_NS = COMP_LOOP_C_17;
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00100001;
        if ( COMP_LOOP_C_31_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_32;
        end
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00100010;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b00101110;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01000000;
        if ( COMP_LOOP_C_62_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_63;
        end
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01001011;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_C_91;
      end
      COMP_LOOP_C_91 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_C_92;
      end
      COMP_LOOP_C_92 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_C_93;
      end
      COMP_LOOP_C_93 : begin
        fsm_output = 8'b01011111;
        if ( COMP_LOOP_C_93_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_94;
        end
      end
      COMP_LOOP_C_94 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_C_95;
      end
      COMP_LOOP_C_95 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_C_96;
      end
      COMP_LOOP_C_96 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_C_97;
      end
      COMP_LOOP_C_97 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_C_98;
      end
      COMP_LOOP_C_98 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_C_99;
      end
      COMP_LOOP_C_99 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_C_100;
      end
      COMP_LOOP_C_100 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_C_101;
      end
      COMP_LOOP_C_101 : begin
        fsm_output = 8'b01100111;
        state_var_NS = COMP_LOOP_C_102;
      end
      COMP_LOOP_C_102 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_103;
      end
      COMP_LOOP_C_103 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_104;
      end
      COMP_LOOP_C_104 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_105;
      end
      COMP_LOOP_C_105 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_106;
      end
      COMP_LOOP_C_106 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_107;
      end
      COMP_LOOP_C_107 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_108;
      end
      COMP_LOOP_C_108 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_109;
      end
      COMP_LOOP_C_109 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_110;
      end
      COMP_LOOP_C_110 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_111;
      end
      COMP_LOOP_C_111 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_112;
      end
      COMP_LOOP_C_112 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_113;
      end
      COMP_LOOP_C_113 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_114;
      end
      COMP_LOOP_C_114 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_115;
      end
      COMP_LOOP_C_115 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_116;
      end
      COMP_LOOP_C_116 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_117;
      end
      COMP_LOOP_C_117 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_118;
      end
      COMP_LOOP_C_118 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_119;
      end
      COMP_LOOP_C_119 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_120;
      end
      COMP_LOOP_C_120 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_121;
      end
      COMP_LOOP_C_121 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_122;
      end
      COMP_LOOP_C_122 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_123;
      end
      COMP_LOOP_C_123 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_124;
      end
      COMP_LOOP_C_124 : begin
        fsm_output = 8'b01111110;
        if ( COMP_LOOP_C_124_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_125;
        end
      end
      COMP_LOOP_C_125 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_126;
      end
      COMP_LOOP_C_126 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_127;
      end
      COMP_LOOP_C_127 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_128;
      end
      COMP_LOOP_C_128 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_129;
      end
      COMP_LOOP_C_129 : begin
        fsm_output = 8'b10000011;
        state_var_NS = COMP_LOOP_C_130;
      end
      COMP_LOOP_C_130 : begin
        fsm_output = 8'b10000100;
        state_var_NS = COMP_LOOP_C_131;
      end
      COMP_LOOP_C_131 : begin
        fsm_output = 8'b10000101;
        state_var_NS = COMP_LOOP_C_132;
      end
      COMP_LOOP_C_132 : begin
        fsm_output = 8'b10000110;
        state_var_NS = COMP_LOOP_C_133;
      end
      COMP_LOOP_C_133 : begin
        fsm_output = 8'b10000111;
        state_var_NS = COMP_LOOP_C_134;
      end
      COMP_LOOP_C_134 : begin
        fsm_output = 8'b10001000;
        state_var_NS = COMP_LOOP_C_135;
      end
      COMP_LOOP_C_135 : begin
        fsm_output = 8'b10001001;
        state_var_NS = COMP_LOOP_C_136;
      end
      COMP_LOOP_C_136 : begin
        fsm_output = 8'b10001010;
        state_var_NS = COMP_LOOP_C_137;
      end
      COMP_LOOP_C_137 : begin
        fsm_output = 8'b10001011;
        state_var_NS = COMP_LOOP_C_138;
      end
      COMP_LOOP_C_138 : begin
        fsm_output = 8'b10001100;
        state_var_NS = COMP_LOOP_C_139;
      end
      COMP_LOOP_C_139 : begin
        fsm_output = 8'b10001101;
        state_var_NS = COMP_LOOP_C_140;
      end
      COMP_LOOP_C_140 : begin
        fsm_output = 8'b10001110;
        state_var_NS = COMP_LOOP_C_141;
      end
      COMP_LOOP_C_141 : begin
        fsm_output = 8'b10001111;
        state_var_NS = COMP_LOOP_C_142;
      end
      COMP_LOOP_C_142 : begin
        fsm_output = 8'b10010000;
        state_var_NS = COMP_LOOP_C_143;
      end
      COMP_LOOP_C_143 : begin
        fsm_output = 8'b10010001;
        state_var_NS = COMP_LOOP_C_144;
      end
      COMP_LOOP_C_144 : begin
        fsm_output = 8'b10010010;
        state_var_NS = COMP_LOOP_C_145;
      end
      COMP_LOOP_C_145 : begin
        fsm_output = 8'b10010011;
        state_var_NS = COMP_LOOP_C_146;
      end
      COMP_LOOP_C_146 : begin
        fsm_output = 8'b10010100;
        state_var_NS = COMP_LOOP_C_147;
      end
      COMP_LOOP_C_147 : begin
        fsm_output = 8'b10010101;
        state_var_NS = COMP_LOOP_C_148;
      end
      COMP_LOOP_C_148 : begin
        fsm_output = 8'b10010110;
        state_var_NS = COMP_LOOP_C_149;
      end
      COMP_LOOP_C_149 : begin
        fsm_output = 8'b10010111;
        state_var_NS = COMP_LOOP_C_150;
      end
      COMP_LOOP_C_150 : begin
        fsm_output = 8'b10011000;
        state_var_NS = COMP_LOOP_C_151;
      end
      COMP_LOOP_C_151 : begin
        fsm_output = 8'b10011001;
        state_var_NS = COMP_LOOP_C_152;
      end
      COMP_LOOP_C_152 : begin
        fsm_output = 8'b10011010;
        state_var_NS = COMP_LOOP_C_153;
      end
      COMP_LOOP_C_153 : begin
        fsm_output = 8'b10011011;
        state_var_NS = COMP_LOOP_C_154;
      end
      COMP_LOOP_C_154 : begin
        fsm_output = 8'b10011100;
        state_var_NS = COMP_LOOP_C_155;
      end
      COMP_LOOP_C_155 : begin
        fsm_output = 8'b10011101;
        if ( COMP_LOOP_C_155_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_156;
        end
      end
      COMP_LOOP_C_156 : begin
        fsm_output = 8'b10011110;
        state_var_NS = COMP_LOOP_C_157;
      end
      COMP_LOOP_C_157 : begin
        fsm_output = 8'b10011111;
        state_var_NS = COMP_LOOP_C_158;
      end
      COMP_LOOP_C_158 : begin
        fsm_output = 8'b10100000;
        state_var_NS = COMP_LOOP_C_159;
      end
      COMP_LOOP_C_159 : begin
        fsm_output = 8'b10100001;
        state_var_NS = COMP_LOOP_C_160;
      end
      COMP_LOOP_C_160 : begin
        fsm_output = 8'b10100010;
        state_var_NS = COMP_LOOP_C_161;
      end
      COMP_LOOP_C_161 : begin
        fsm_output = 8'b10100011;
        state_var_NS = COMP_LOOP_C_162;
      end
      COMP_LOOP_C_162 : begin
        fsm_output = 8'b10100100;
        state_var_NS = COMP_LOOP_C_163;
      end
      COMP_LOOP_C_163 : begin
        fsm_output = 8'b10100101;
        state_var_NS = COMP_LOOP_C_164;
      end
      COMP_LOOP_C_164 : begin
        fsm_output = 8'b10100110;
        state_var_NS = COMP_LOOP_C_165;
      end
      COMP_LOOP_C_165 : begin
        fsm_output = 8'b10100111;
        state_var_NS = COMP_LOOP_C_166;
      end
      COMP_LOOP_C_166 : begin
        fsm_output = 8'b10101000;
        state_var_NS = COMP_LOOP_C_167;
      end
      COMP_LOOP_C_167 : begin
        fsm_output = 8'b10101001;
        state_var_NS = COMP_LOOP_C_168;
      end
      COMP_LOOP_C_168 : begin
        fsm_output = 8'b10101010;
        state_var_NS = COMP_LOOP_C_169;
      end
      COMP_LOOP_C_169 : begin
        fsm_output = 8'b10101011;
        state_var_NS = COMP_LOOP_C_170;
      end
      COMP_LOOP_C_170 : begin
        fsm_output = 8'b10101100;
        state_var_NS = COMP_LOOP_C_171;
      end
      COMP_LOOP_C_171 : begin
        fsm_output = 8'b10101101;
        state_var_NS = COMP_LOOP_C_172;
      end
      COMP_LOOP_C_172 : begin
        fsm_output = 8'b10101110;
        state_var_NS = COMP_LOOP_C_173;
      end
      COMP_LOOP_C_173 : begin
        fsm_output = 8'b10101111;
        state_var_NS = COMP_LOOP_C_174;
      end
      COMP_LOOP_C_174 : begin
        fsm_output = 8'b10110000;
        state_var_NS = COMP_LOOP_C_175;
      end
      COMP_LOOP_C_175 : begin
        fsm_output = 8'b10110001;
        state_var_NS = COMP_LOOP_C_176;
      end
      COMP_LOOP_C_176 : begin
        fsm_output = 8'b10110010;
        state_var_NS = COMP_LOOP_C_177;
      end
      COMP_LOOP_C_177 : begin
        fsm_output = 8'b10110011;
        state_var_NS = COMP_LOOP_C_178;
      end
      COMP_LOOP_C_178 : begin
        fsm_output = 8'b10110100;
        state_var_NS = COMP_LOOP_C_179;
      end
      COMP_LOOP_C_179 : begin
        fsm_output = 8'b10110101;
        state_var_NS = COMP_LOOP_C_180;
      end
      COMP_LOOP_C_180 : begin
        fsm_output = 8'b10110110;
        state_var_NS = COMP_LOOP_C_181;
      end
      COMP_LOOP_C_181 : begin
        fsm_output = 8'b10110111;
        state_var_NS = COMP_LOOP_C_182;
      end
      COMP_LOOP_C_182 : begin
        fsm_output = 8'b10111000;
        state_var_NS = COMP_LOOP_C_183;
      end
      COMP_LOOP_C_183 : begin
        fsm_output = 8'b10111001;
        state_var_NS = COMP_LOOP_C_184;
      end
      COMP_LOOP_C_184 : begin
        fsm_output = 8'b10111010;
        state_var_NS = COMP_LOOP_C_185;
      end
      COMP_LOOP_C_185 : begin
        fsm_output = 8'b10111011;
        state_var_NS = COMP_LOOP_C_186;
      end
      COMP_LOOP_C_186 : begin
        fsm_output = 8'b10111100;
        if ( COMP_LOOP_C_186_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_187;
        end
      end
      COMP_LOOP_C_187 : begin
        fsm_output = 8'b10111101;
        state_var_NS = COMP_LOOP_C_188;
      end
      COMP_LOOP_C_188 : begin
        fsm_output = 8'b10111110;
        state_var_NS = COMP_LOOP_C_189;
      end
      COMP_LOOP_C_189 : begin
        fsm_output = 8'b10111111;
        state_var_NS = COMP_LOOP_C_190;
      end
      COMP_LOOP_C_190 : begin
        fsm_output = 8'b11000000;
        state_var_NS = COMP_LOOP_C_191;
      end
      COMP_LOOP_C_191 : begin
        fsm_output = 8'b11000001;
        state_var_NS = COMP_LOOP_C_192;
      end
      COMP_LOOP_C_192 : begin
        fsm_output = 8'b11000010;
        state_var_NS = COMP_LOOP_C_193;
      end
      COMP_LOOP_C_193 : begin
        fsm_output = 8'b11000011;
        state_var_NS = COMP_LOOP_C_194;
      end
      COMP_LOOP_C_194 : begin
        fsm_output = 8'b11000100;
        state_var_NS = COMP_LOOP_C_195;
      end
      COMP_LOOP_C_195 : begin
        fsm_output = 8'b11000101;
        state_var_NS = COMP_LOOP_C_196;
      end
      COMP_LOOP_C_196 : begin
        fsm_output = 8'b11000110;
        state_var_NS = COMP_LOOP_C_197;
      end
      COMP_LOOP_C_197 : begin
        fsm_output = 8'b11000111;
        state_var_NS = COMP_LOOP_C_198;
      end
      COMP_LOOP_C_198 : begin
        fsm_output = 8'b11001000;
        state_var_NS = COMP_LOOP_C_199;
      end
      COMP_LOOP_C_199 : begin
        fsm_output = 8'b11001001;
        state_var_NS = COMP_LOOP_C_200;
      end
      COMP_LOOP_C_200 : begin
        fsm_output = 8'b11001010;
        state_var_NS = COMP_LOOP_C_201;
      end
      COMP_LOOP_C_201 : begin
        fsm_output = 8'b11001011;
        state_var_NS = COMP_LOOP_C_202;
      end
      COMP_LOOP_C_202 : begin
        fsm_output = 8'b11001100;
        state_var_NS = COMP_LOOP_C_203;
      end
      COMP_LOOP_C_203 : begin
        fsm_output = 8'b11001101;
        state_var_NS = COMP_LOOP_C_204;
      end
      COMP_LOOP_C_204 : begin
        fsm_output = 8'b11001110;
        state_var_NS = COMP_LOOP_C_205;
      end
      COMP_LOOP_C_205 : begin
        fsm_output = 8'b11001111;
        state_var_NS = COMP_LOOP_C_206;
      end
      COMP_LOOP_C_206 : begin
        fsm_output = 8'b11010000;
        state_var_NS = COMP_LOOP_C_207;
      end
      COMP_LOOP_C_207 : begin
        fsm_output = 8'b11010001;
        state_var_NS = COMP_LOOP_C_208;
      end
      COMP_LOOP_C_208 : begin
        fsm_output = 8'b11010010;
        state_var_NS = COMP_LOOP_C_209;
      end
      COMP_LOOP_C_209 : begin
        fsm_output = 8'b11010011;
        state_var_NS = COMP_LOOP_C_210;
      end
      COMP_LOOP_C_210 : begin
        fsm_output = 8'b11010100;
        state_var_NS = COMP_LOOP_C_211;
      end
      COMP_LOOP_C_211 : begin
        fsm_output = 8'b11010101;
        state_var_NS = COMP_LOOP_C_212;
      end
      COMP_LOOP_C_212 : begin
        fsm_output = 8'b11010110;
        state_var_NS = COMP_LOOP_C_213;
      end
      COMP_LOOP_C_213 : begin
        fsm_output = 8'b11010111;
        state_var_NS = COMP_LOOP_C_214;
      end
      COMP_LOOP_C_214 : begin
        fsm_output = 8'b11011000;
        state_var_NS = COMP_LOOP_C_215;
      end
      COMP_LOOP_C_215 : begin
        fsm_output = 8'b11011001;
        state_var_NS = COMP_LOOP_C_216;
      end
      COMP_LOOP_C_216 : begin
        fsm_output = 8'b11011010;
        state_var_NS = COMP_LOOP_C_217;
      end
      COMP_LOOP_C_217 : begin
        fsm_output = 8'b11011011;
        if ( COMP_LOOP_C_217_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_218;
        end
      end
      COMP_LOOP_C_218 : begin
        fsm_output = 8'b11011100;
        state_var_NS = COMP_LOOP_C_219;
      end
      COMP_LOOP_C_219 : begin
        fsm_output = 8'b11011101;
        state_var_NS = COMP_LOOP_C_220;
      end
      COMP_LOOP_C_220 : begin
        fsm_output = 8'b11011110;
        state_var_NS = COMP_LOOP_C_221;
      end
      COMP_LOOP_C_221 : begin
        fsm_output = 8'b11011111;
        state_var_NS = COMP_LOOP_C_222;
      end
      COMP_LOOP_C_222 : begin
        fsm_output = 8'b11100000;
        state_var_NS = COMP_LOOP_C_223;
      end
      COMP_LOOP_C_223 : begin
        fsm_output = 8'b11100001;
        state_var_NS = COMP_LOOP_C_224;
      end
      COMP_LOOP_C_224 : begin
        fsm_output = 8'b11100010;
        state_var_NS = COMP_LOOP_C_225;
      end
      COMP_LOOP_C_225 : begin
        fsm_output = 8'b11100011;
        state_var_NS = COMP_LOOP_C_226;
      end
      COMP_LOOP_C_226 : begin
        fsm_output = 8'b11100100;
        state_var_NS = COMP_LOOP_C_227;
      end
      COMP_LOOP_C_227 : begin
        fsm_output = 8'b11100101;
        state_var_NS = COMP_LOOP_C_228;
      end
      COMP_LOOP_C_228 : begin
        fsm_output = 8'b11100110;
        state_var_NS = COMP_LOOP_C_229;
      end
      COMP_LOOP_C_229 : begin
        fsm_output = 8'b11100111;
        state_var_NS = COMP_LOOP_C_230;
      end
      COMP_LOOP_C_230 : begin
        fsm_output = 8'b11101000;
        state_var_NS = COMP_LOOP_C_231;
      end
      COMP_LOOP_C_231 : begin
        fsm_output = 8'b11101001;
        state_var_NS = COMP_LOOP_C_232;
      end
      COMP_LOOP_C_232 : begin
        fsm_output = 8'b11101010;
        state_var_NS = COMP_LOOP_C_233;
      end
      COMP_LOOP_C_233 : begin
        fsm_output = 8'b11101011;
        state_var_NS = COMP_LOOP_C_234;
      end
      COMP_LOOP_C_234 : begin
        fsm_output = 8'b11101100;
        state_var_NS = COMP_LOOP_C_235;
      end
      COMP_LOOP_C_235 : begin
        fsm_output = 8'b11101101;
        state_var_NS = COMP_LOOP_C_236;
      end
      COMP_LOOP_C_236 : begin
        fsm_output = 8'b11101110;
        state_var_NS = COMP_LOOP_C_237;
      end
      COMP_LOOP_C_237 : begin
        fsm_output = 8'b11101111;
        state_var_NS = COMP_LOOP_C_238;
      end
      COMP_LOOP_C_238 : begin
        fsm_output = 8'b11110000;
        state_var_NS = COMP_LOOP_C_239;
      end
      COMP_LOOP_C_239 : begin
        fsm_output = 8'b11110001;
        state_var_NS = COMP_LOOP_C_240;
      end
      COMP_LOOP_C_240 : begin
        fsm_output = 8'b11110010;
        state_var_NS = COMP_LOOP_C_241;
      end
      COMP_LOOP_C_241 : begin
        fsm_output = 8'b11110011;
        state_var_NS = COMP_LOOP_C_242;
      end
      COMP_LOOP_C_242 : begin
        fsm_output = 8'b11110100;
        state_var_NS = COMP_LOOP_C_243;
      end
      COMP_LOOP_C_243 : begin
        fsm_output = 8'b11110101;
        state_var_NS = COMP_LOOP_C_244;
      end
      COMP_LOOP_C_244 : begin
        fsm_output = 8'b11110110;
        state_var_NS = COMP_LOOP_C_245;
      end
      COMP_LOOP_C_245 : begin
        fsm_output = 8'b11110111;
        state_var_NS = COMP_LOOP_C_246;
      end
      COMP_LOOP_C_246 : begin
        fsm_output = 8'b11111000;
        state_var_NS = COMP_LOOP_C_247;
      end
      COMP_LOOP_C_247 : begin
        fsm_output = 8'b11111001;
        state_var_NS = COMP_LOOP_C_248;
      end
      COMP_LOOP_C_248 : begin
        fsm_output = 8'b11111010;
        if ( COMP_LOOP_C_248_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      VEC_LOOP_C_0 : begin
        fsm_output = 8'b11111011;
        if ( VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 8'b11111100;
        if ( STAGE_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b11111101;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, vec_rsc_triosy_0_4_lz, vec_rsc_triosy_0_5_lz, vec_rsc_triosy_0_6_lz,
      vec_rsc_triosy_0_7_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_triosy_lz, twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_triosy_0_1_lz, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_triosy_0_3_lz,
      twiddle_rsc_triosy_0_4_lz, twiddle_rsc_triosy_0_5_lz, twiddle_rsc_triosy_0_6_lz,
      twiddle_rsc_triosy_0_7_lz, vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_q_d, vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_q_d,
      vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_3_i_q_d, vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_4_i_q_d, vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_5_i_q_d,
      vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_6_i_q_d, vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_7_i_q_d, vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d, twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_0_i_radr_d, twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_4_i_q_d, twiddle_rsc_0_4_i_radr_d, twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_5_i_q_d, twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_6_i_q_d, twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_7_i_q_d, twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_0_i_d_d_pff, vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff,
      vec_rsc_0_0_i_we_d_pff, vec_rsc_0_1_i_we_d_pff, vec_rsc_0_2_i_we_d_pff, vec_rsc_0_3_i_we_d_pff,
      vec_rsc_0_4_i_we_d_pff, vec_rsc_0_5_i_we_d_pff, vec_rsc_0_6_i_we_d_pff, vec_rsc_0_7_i_we_d_pff,
      twiddle_rsc_0_1_i_radr_d_pff, twiddle_rsc_0_2_i_radr_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  output vec_rsc_triosy_0_4_lz;
  output vec_rsc_triosy_0_5_lz;
  output vec_rsc_triosy_0_6_lz;
  output vec_rsc_triosy_0_7_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  output twiddle_rsc_triosy_0_0_lz;
  output twiddle_rsc_triosy_0_1_lz;
  output twiddle_rsc_triosy_0_2_lz;
  output twiddle_rsc_triosy_0_3_lz;
  output twiddle_rsc_triosy_0_4_lz;
  output twiddle_rsc_triosy_0_5_lz;
  output twiddle_rsc_triosy_0_6_lz;
  output twiddle_rsc_triosy_0_7_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_q_d;
  output vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_q_d;
  output vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_4_i_q_d;
  output vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_5_i_q_d;
  output vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_6_i_q_d;
  output vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_7_i_q_d;
  output vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_0_i_q_d;
  output [6:0] twiddle_rsc_0_0_i_radr_d;
  output twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_1_i_q_d;
  output twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_2_i_q_d;
  output twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_3_i_q_d;
  output twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_4_i_q_d;
  output [6:0] twiddle_rsc_0_4_i_radr_d;
  output twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_5_i_q_d;
  output twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_6_i_q_d;
  output twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_7_i_q_d;
  output twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [6:0] vec_rsc_0_0_i_radr_d_pff;
  output [6:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;
  output vec_rsc_0_2_i_we_d_pff;
  output vec_rsc_0_3_i_we_d_pff;
  output vec_rsc_0_4_i_we_d_pff;
  output vec_rsc_0_5_i_we_d_pff;
  output vec_rsc_0_6_i_we_d_pff;
  output vec_rsc_0_7_i_we_d_pff;
  output [6:0] twiddle_rsc_0_1_i_radr_d_pff;
  output [6:0] twiddle_rsc_0_2_i_radr_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_cmp_ccs_ccore_en;
  wire [7:0] fsm_output;
  wire or_dcpl;
  wire or_tmp_25;
  wire or_tmp_38;
  wire nor_tmp_29;
  wire nor_tmp_35;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_26;
  wire and_dcpl_28;
  wire and_dcpl_29;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_35;
  wire nor_tmp_64;
  wire mux_tmp_192;
  wire nand_tmp_2;
  wire and_dcpl_37;
  wire and_dcpl_38;
  wire and_dcpl_39;
  wire and_dcpl_41;
  wire and_dcpl_42;
  wire and_dcpl_43;
  wire and_dcpl_44;
  wire and_dcpl_45;
  wire and_dcpl_47;
  wire and_dcpl_48;
  wire and_dcpl_49;
  wire and_dcpl_50;
  wire and_dcpl_52;
  wire and_dcpl_53;
  wire and_dcpl_55;
  wire and_dcpl_56;
  wire and_dcpl_58;
  wire and_dcpl_59;
  wire and_dcpl_60;
  wire and_dcpl_61;
  wire and_dcpl_62;
  wire and_dcpl_63;
  wire and_dcpl_65;
  wire and_dcpl_66;
  wire and_dcpl_68;
  wire and_dcpl_69;
  wire and_dcpl_70;
  wire and_dcpl_71;
  wire and_dcpl_73;
  wire and_dcpl_74;
  wire and_dcpl_83;
  wire and_dcpl_86;
  wire and_dcpl_88;
  wire not_tmp_134;
  wire not_tmp_135;
  wire not_tmp_138;
  wire not_tmp_147;
  wire not_tmp_153;
  wire and_dcpl_94;
  wire and_dcpl_95;
  wire and_dcpl_96;
  wire and_dcpl_97;
  wire and_dcpl_98;
  wire and_dcpl_99;
  wire and_dcpl_100;
  wire and_dcpl_101;
  wire and_dcpl_102;
  wire and_dcpl_104;
  wire and_dcpl_117;
  wire or_tmp_588;
  wire mux_tmp_472;
  wire mux_tmp_475;
  wire mux_tmp_478;
  wire mux_tmp_486;
  wire mux_tmp_487;
  wire mux_tmp_489;
  wire mux_tmp_490;
  wire and_dcpl_120;
  wire and_dcpl_121;
  wire and_dcpl_122;
  wire and_dcpl_123;
  wire and_dcpl_124;
  wire and_dcpl_125;
  wire and_dcpl_126;
  wire mux_tmp_495;
  wire not_tmp_290;
  wire mux_tmp_501;
  wire mux_tmp_503;
  wire or_tmp_610;
  wire or_dcpl_46;
  wire or_dcpl_51;
  wire or_dcpl_52;
  wire or_tmp_616;
  wire or_tmp_617;
  wire or_tmp_620;
  wire mux_tmp_522;
  wire mux_tmp_523;
  wire mux_tmp_526;
  wire mux_tmp_527;
  wire or_tmp_621;
  wire or_dcpl_53;
  wire and_dcpl_138;
  wire and_dcpl_143;
  wire and_dcpl_144;
  wire mux_tmp_554;
  wire mux_tmp_557;
  wire not_tmp_329;
  wire and_dcpl_145;
  wire and_dcpl_148;
  wire and_dcpl_150;
  wire or_tmp_631;
  wire mux_tmp_575;
  wire or_tmp_634;
  wire and_dcpl_153;
  wire and_dcpl_156;
  wire and_dcpl_159;
  wire and_dcpl_165;
  wire and_dcpl_167;
  wire and_dcpl_168;
  wire or_tmp_649;
  wire and_tmp_15;
  wire or_tmp_651;
  wire and_tmp_16;
  reg COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  wire [9:0] COMP_LOOP_acc_1_cse_6_sva_1;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_6_sva_1;
  reg [9:0] VEC_LOOP_j_10_0_sva_9_0;
  wire [9:0] COMP_LOOP_acc_1_cse_4_sva_1;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_4_sva_1;
  wire [8:0] COMP_LOOP_acc_11_psp_sva_1;
  wire [9:0] nl_COMP_LOOP_acc_11_psp_sva_1;
  reg COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm;
  reg COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm;
  reg COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  reg [9:0] COMP_LOOP_2_tmp_mul_idiv_sva;
  reg [9:0] COMP_LOOP_2_tmp_lshift_ncse_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_2_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_2_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_4_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_4_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_6_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_6_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_sva;
  reg [7:0] COMP_LOOP_acc_13_psp_sva;
  wire [8:0] nl_COMP_LOOP_acc_13_psp_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_1_sva;
  reg [8:0] COMP_LOOP_acc_11_psp_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_3_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_5_sva;
  reg [8:0] COMP_LOOP_acc_14_psp_sva;
  wire [9:0] nl_COMP_LOOP_acc_14_psp_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_7_sva;
  reg [7:0] COMP_LOOP_5_tmp_mul_idiv_sva;
  reg [8:0] COMP_LOOP_3_tmp_lshift_ncse_sva;
  reg [1:0] COMP_LOOP_3_tmp_mul_idiv_sva_1_0;
  reg [10:0] STAGE_LOOP_lshift_psp_sva;
  reg [6:0] COMP_LOOP_k_10_3_sva_6_0;
  wire [9:0] COMP_LOOP_acc_1_cse_2_sva_1;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_2_sva_1;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt;
  wire and_203_m1c;
  reg [6:0] reg_COMP_LOOP_k_10_3_ftd;
  wire nand_137_cse;
  wire nand_138_cse;
  wire nand_126_cse;
  wire nand_127_cse;
  reg reg_vec_rsc_triosy_0_7_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  wire and_263_cse;
  wire or_731_cse;
  wire and_280_cse;
  wire COMP_LOOP_tmp_or_2_cse;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse;
  wire or_735_cse;
  wire nor_441_cse;
  wire nor_474_cse;
  wire nand_132_cse;
  wire nand_130_cse;
  wire nand_97_cse;
  wire nand_98_cse;
  wire nand_99_cse;
  wire nand_133_cse;
  wire and_283_cse;
  wire mux_141_cse;
  reg [63:0] COMP_LOOP_1_acc_8_itm;
  reg [63:0] p_sva;
  reg [6:0] COMP_LOOP_acc_psp_sva;
  wire [7:0] nl_COMP_LOOP_acc_psp_sva;
  wire mux_496_itm;
  wire mux_529_itm;
  wire mux_564_itm;
  wire mux_573_itm;
  wire mux_575_itm;
  wire mux_580_itm;
  wire [10:0] z_out;
  wire [9:0] z_out_1;
  wire [7:0] z_out_2;
  wire [8:0] nl_z_out_2;
  wire and_dcpl_240;
  wire [10:0] z_out_3;
  wire and_dcpl_241;
  wire and_dcpl_242;
  wire and_dcpl_243;
  wire and_dcpl_247;
  wire and_dcpl_248;
  wire and_dcpl_249;
  wire and_dcpl_250;
  wire and_dcpl_253;
  wire and_dcpl_254;
  wire and_dcpl_256;
  wire and_dcpl_257;
  wire and_dcpl_260;
  wire and_dcpl_261;
  wire and_dcpl_263;
  wire and_dcpl_264;
  wire and_dcpl_268;
  wire and_dcpl_270;
  wire and_dcpl_271;
  wire and_dcpl_274;
  wire and_dcpl_275;
  wire and_dcpl_277;
  wire and_dcpl_278;
  wire and_dcpl_280;
  wire and_dcpl_281;
  wire and_dcpl_282;
  wire and_dcpl_284;
  wire and_dcpl_285;
  wire and_dcpl_286;
  wire [63:0] z_out_4;
  wire [127:0] nl_z_out_4;
  wire and_dcpl_300;
  wire [3:0] z_out_5;
  wire [4:0] nl_z_out_5;
  wire and_dcpl_312;
  wire and_dcpl_316;
  wire and_dcpl_377;
  wire [63:0] z_out_8;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [3:0] COMP_LOOP_1_tmp_acc_cse_sva;
  reg [63:0] tmp_16_sva;
  reg [63:0] tmp_21_sva_3;
  reg [63:0] tmp_21_sva_6;
  reg [63:0] tmp_21_sva_7;
  reg [63:0] tmp_23_sva_1;
  reg [63:0] tmp_23_sva_2;
  reg COMP_LOOP_COMP_LOOP_nor_1_itm;
  reg COMP_LOOP_COMP_LOOP_and_11_itm;
  reg COMP_LOOP_COMP_LOOP_and_12_itm;
  reg COMP_LOOP_COMP_LOOP_and_13_itm;
  reg COMP_LOOP_COMP_LOOP_nor_4_itm;
  reg COMP_LOOP_COMP_LOOP_and_30_itm;
  reg COMP_LOOP_COMP_LOOP_and_32_itm;
  reg COMP_LOOP_COMP_LOOP_and_33_itm;
  reg COMP_LOOP_COMP_LOOP_and_34_itm;
  reg COMP_LOOP_COMP_LOOP_nor_5_itm;
  reg COMP_LOOP_COMP_LOOP_and_37_itm;
  reg COMP_LOOP_COMP_LOOP_and_39_itm;
  reg COMP_LOOP_COMP_LOOP_and_40_itm;
  reg COMP_LOOP_COMP_LOOP_and_41_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_itm;
  reg COMP_LOOP_COMP_LOOP_and_60_itm;
  reg COMP_LOOP_COMP_LOOP_and_69_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_1_itm;
  reg COMP_LOOP_COMP_LOOP_and_86_itm;
  reg COMP_LOOP_COMP_LOOP_nor_13_itm;
  reg COMP_LOOP_COMP_LOOP_and_93_itm;
  reg COMP_LOOP_COMP_LOOP_and_95_itm;
  reg COMP_LOOP_COMP_LOOP_and_96_itm;
  reg COMP_LOOP_COMP_LOOP_and_97_itm;
  reg COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm;
  reg COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm;
  reg COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm;
  reg COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm;
  reg COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_2_itm;
  reg COMP_LOOP_COMP_LOOP_nor_17_itm;
  reg COMP_LOOP_COMP_LOOP_and_121_itm;
  reg COMP_LOOP_COMP_LOOP_and_123_itm;
  reg COMP_LOOP_COMP_LOOP_and_124_itm;
  reg COMP_LOOP_COMP_LOOP_and_125_itm;
  reg [63:0] COMP_LOOP_tmp_mux_itm;
  reg COMP_LOOP_COMP_LOOP_and_145_itm;
  reg COMP_LOOP_COMP_LOOP_nor_21_itm;
  reg COMP_LOOP_COMP_LOOP_and_149_itm;
  reg COMP_LOOP_COMP_LOOP_and_151_itm;
  reg COMP_LOOP_COMP_LOOP_and_152_itm;
  reg COMP_LOOP_COMP_LOOP_and_153_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_3_itm;
  reg COMP_LOOP_COMP_LOOP_nor_25_itm;
  reg COMP_LOOP_COMP_LOOP_and_177_itm;
  reg COMP_LOOP_COMP_LOOP_and_179_itm;
  reg COMP_LOOP_COMP_LOOP_and_180_itm;
  reg COMP_LOOP_COMP_LOOP_and_181_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_4_itm;
  reg COMP_LOOP_COMP_LOOP_nor_29_itm;
  reg COMP_LOOP_COMP_LOOP_and_205_itm;
  reg COMP_LOOP_COMP_LOOP_and_207_itm;
  reg COMP_LOOP_COMP_LOOP_and_208_itm;
  reg COMP_LOOP_COMP_LOOP_and_209_itm;
  wire STAGE_LOOP_i_3_0_sva_mx0c1;
  wire VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  wire COMP_LOOP_1_acc_8_itm_mx0c3;
  wire COMP_LOOP_1_acc_8_itm_mx0c4;
  wire COMP_LOOP_1_acc_8_itm_mx0c7;
  wire COMP_LOOP_1_acc_8_itm_mx0c10;
  wire COMP_LOOP_1_acc_8_itm_mx0c13;
  wire COMP_LOOP_1_acc_8_itm_mx0c16;
  wire COMP_LOOP_1_acc_8_itm_mx0c19;
  wire COMP_LOOP_1_acc_8_itm_mx0c22;
  wire COMP_LOOP_1_acc_8_itm_mx0c25;
  wire [63:0] COMP_LOOP_tmp_mux1h_itm_mx0w0;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_35;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_37;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_and_39;
  wire COMP_LOOP_tmp_or_15_ssc;
  wire or_584_cse;
  wire nor_230_cse;
  wire COMP_LOOP_tmp_or_7_cse;
  wire nor_226_cse;
  wire nor_225_cse;
  wire nor_220_cse;
  wire COMP_LOOP_tmp_or_16_cse;
  wire nor_209_cse;
  wire nor_205_cse;
  wire nor_204_cse;
  wire and_235_cse;
  wire and_230_cse;
  wire COMP_LOOP_or_14_cse;
  wire and_459_cse;
  wire and_437_cse;
  wire and_441_cse;
  wire and_443_cse;
  wire and_446_cse;
  wire and_452_cse;
  wire and_455_cse;
  wire and_532_cse;
  wire COMP_LOOP_tmp_nor_24_itm;
  wire COMP_LOOP_tmp_or_31_itm;
  wire COMP_LOOP_tmp_nor_25_itm;
  wire COMP_LOOP_tmp_or_35_itm;
  wire COMP_LOOP_tmp_or_37_itm;
  wire COMP_LOOP_or_9_itm;
  wire [9:0] COMP_LOOP_1_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_2_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_4_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_5_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_6_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_7_acc_10_itm_10_1_1;
  wire [9:0] COMP_LOOP_8_acc_10_itm_10_1_1;
  wire [63:0] COMP_LOOP_mux_95_cse;

  wire[0:0] nor_nl;
  wire[0:0] and_531_nl;
  wire[0:0] mux_495_nl;
  wire[0:0] mux_494_nl;
  wire[0:0] mux_493_nl;
  wire[0:0] mux_492_nl;
  wire[0:0] mux_491_nl;
  wire[0:0] mux_490_nl;
  wire[0:0] mux_487_nl;
  wire[0:0] mux_484_nl;
  wire[0:0] VEC_LOOP_j_not_1_nl;
  wire[0:0] nor_194_nl;
  wire[0:0] and_264_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] nor_438_nl;
  wire[0:0] and_262_nl;
  wire[0:0] or_743_nl;
  wire[0:0] mux_632_nl;
  wire[0:0] or_742_nl;
  wire[0:0] nand_155_nl;
  wire[0:0] mux_631_nl;
  wire[0:0] mux_nl;
  wire[0:0] nand_154_nl;
  wire[0:0] mux_532_nl;
  wire[0:0] mux_531_nl;
  wire[0:0] mux_530_nl;
  wire[0:0] or_671_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nor_1_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nor_9_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_11_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_65_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_12_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_67_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_13_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_68_nl;
  wire[0:0] and_140_nl;
  wire[0:0] mux_536_nl;
  wire[0:0] mux_540_nl;
  wire[0:0] mux_539_nl;
  wire[0:0] mux_541_nl;
  wire[0:0] nand_151_nl;
  wire[0:0] mux_542_nl;
  wire[0:0] nand_35_nl;
  wire[10:0] COMP_LOOP_3_acc_nl;
  wire[11:0] nl_COMP_LOOP_3_acc_nl;
  wire[10:0] COMP_LOOP_3_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_3_acc_10_nl;
  wire[0:0] mux_545_nl;
  wire[0:0] mux_544_nl;
  wire[0:0] mux_543_nl;
  wire[8:0] COMP_LOOP_acc_12_nl;
  wire[9:0] nl_COMP_LOOP_acc_12_nl;
  wire[0:0] mux_547_nl;
  wire[0:0] mux_546_nl;
  wire[0:0] mux_548_nl;
  wire[10:0] COMP_LOOP_5_acc_nl;
  wire[11:0] nl_COMP_LOOP_5_acc_nl;
  wire[0:0] mux_549_nl;
  wire[0:0] nand_34_nl;
  wire[0:0] mux_552_nl;
  wire[0:0] mux_554_nl;
  wire[10:0] COMP_LOOP_6_acc_nl;
  wire[11:0] nl_COMP_LOOP_6_acc_nl;
  wire[0:0] mux_557_nl;
  wire[0:0] mux_556_nl;
  wire[0:0] and_155_nl;
  wire[0:0] mux_559_nl;
  wire[10:0] COMP_LOOP_7_acc_nl;
  wire[11:0] nl_COMP_LOOP_7_acc_nl;
  wire[0:0] and_156_nl;
  wire[0:0] mux_566_nl;
  wire[0:0] mux_569_nl;
  wire[7:0] COMP_LOOP_acc_15_nl;
  wire[8:0] nl_COMP_LOOP_acc_15_nl;
  wire[0:0] nor_459_nl;
  wire[0:0] and_158_nl;
  wire[0:0] and_215_nl;
  wire[10:0] COMP_LOOP_1_acc_nl;
  wire[11:0] nl_COMP_LOOP_1_acc_nl;
  wire[0:0] and_159_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_9_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_69_nl;
  wire[63:0] COMP_LOOP_acc_17_nl;
  wire[64:0] nl_COMP_LOOP_acc_17_nl;
  wire[63:0] COMP_LOOP_COMP_LOOP_mux_8_nl;
  wire[0:0] COMP_LOOP_or_nl;
  wire[0:0] COMP_LOOP_or_1_nl;
  wire[0:0] COMP_LOOP_or_2_nl;
  wire[0:0] COMP_LOOP_or_3_nl;
  wire[0:0] COMP_LOOP_or_4_nl;
  wire[0:0] COMP_LOOP_or_5_nl;
  wire[0:0] COMP_LOOP_or_6_nl;
  wire[0:0] COMP_LOOP_or_7_nl;
  wire[0:0] COMP_LOOP_or_12_nl;
  wire[0:0] COMP_LOOP_or_13_nl;
  wire[0:0] mux_608_nl;
  wire[0:0] nor_477_nl;
  wire[0:0] and_184_nl;
  wire[0:0] and_187_nl;
  wire[0:0] and_190_nl;
  wire[0:0] and_193_nl;
  wire[0:0] mux_614_nl;
  wire[0:0] mux_613_nl;
  wire[0:0] mux_612_nl;
  wire[0:0] mux_611_nl;
  wire[0:0] mux_610_nl;
  wire[0:0] mux_609_nl;
  wire[0:0] mux_617_nl;
  wire[0:0] mux_616_nl;
  wire[0:0] mux_615_nl;
  wire[0:0] and_210_nl;
  wire[0:0] and_202_nl;
  wire[0:0] mux_619_nl;
  wire[0:0] mux_618_nl;
  wire[0:0] or_734_nl;
  wire[0:0] COMP_LOOP_tmp_and_11_nl;
  wire[0:0] COMP_LOOP_tmp_and_12_nl;
  wire[0:0] COMP_LOOP_tmp_and_13_nl;
  wire[0:0] COMP_LOOP_tmp_and_14_nl;
  wire[0:0] COMP_LOOP_tmp_and_15_nl;
  wire[0:0] COMP_LOOP_tmp_and_16_nl;
  wire[0:0] COMP_LOOP_tmp_and_17_nl;
  wire[0:0] mux_623_nl;
  wire[0:0] or_725_nl;
  wire[0:0] mux_622_nl;
  wire[0:0] nand_31_nl;
  wire[0:0] mux_621_nl;
  wire[0:0] COMP_LOOP_tmp_and_18_nl;
  wire[0:0] COMP_LOOP_tmp_and_19_nl;
  wire[0:0] COMP_LOOP_tmp_and_5_nl;
  wire[0:0] COMP_LOOP_tmp_and_6_nl;
  wire[0:0] COMP_LOOP_tmp_and_7_nl;
  wire[0:0] COMP_LOOP_tmp_and_8_nl;
  wire[0:0] COMP_LOOP_tmp_and_9_nl;
  wire[0:0] COMP_LOOP_tmp_and_10_nl;
  wire[0:0] mux_626_nl;
  wire[0:0] mux_625_nl;
  wire[0:0] mux_624_nl;
  wire[0:0] nand_30_nl;
  wire[0:0] COMP_LOOP_tmp_and_nl;
  wire[0:0] COMP_LOOP_tmp_and_2_nl;
  wire[0:0] COMP_LOOP_tmp_and_3_nl;
  wire[0:0] mux_630_nl;
  wire[0:0] mux_629_nl;
  wire[0:0] mux_628_nl;
  wire[0:0] mux_627_nl;
  wire[10:0] COMP_LOOP_1_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_1_acc_10_nl;
  wire[10:0] COMP_LOOP_2_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_2_acc_10_nl;
  wire[10:0] COMP_LOOP_4_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_4_acc_10_nl;
  wire[10:0] COMP_LOOP_5_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_5_acc_10_nl;
  wire[10:0] COMP_LOOP_6_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_6_acc_10_nl;
  wire[10:0] COMP_LOOP_7_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_7_acc_10_nl;
  wire[10:0] COMP_LOOP_8_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_8_acc_10_nl;
  wire[0:0] nand_144_nl;
  wire[0:0] or_134_nl;
  wire[0:0] mux_485_nl;
  wire[0:0] nand_38_nl;
  wire[0:0] or_636_nl;
  wire[0:0] or_637_nl;
  wire[0:0] or_640_nl;
  wire[0:0] or_638_nl;
  wire[0:0] nor_197_nl;
  wire[0:0] or_650_nl;
  wire[0:0] nand_152_nl;
  wire[0:0] or_653_nl;
  wire[0:0] mux_528_nl;
  wire[0:0] mux_551_nl;
  wire[0:0] mux_550_nl;
  wire[0:0] and_152_nl;
  wire[0:0] mux_563_nl;
  wire[0:0] mux_562_nl;
  wire[0:0] mux_572_nl;
  wire[0:0] mux_571_nl;
  wire[0:0] and_157_nl;
  wire[0:0] mux_574_nl;
  wire[0:0] mux_579_nl;
  wire[0:0] mux_584_nl;
  wire[0:0] nor_504_nl;
  wire[0:0] nor_505_nl;
  wire[0:0] or_699_nl;
  wire[0:0] nor_192_nl;
  wire[0:0] mux_588_nl;
  wire[0:0] nand_27_nl;
  wire[0:0] and_214_nl;
  wire[0:0] mux_587_nl;
  wire[0:0] nand_25_nl;
  wire[0:0] mux_585_nl;
  wire[0:0] or_696_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] or_137_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] nand_143_nl;
  wire[0:0] or_136_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] or_135_nl;
  wire[0:0] and_54_nl;
  wire[0:0] and_59_nl;
  wire[0:0] and_62_nl;
  wire[0:0] and_65_nl;
  wire[0:0] and_72_nl;
  wire[0:0] and_75_nl;
  wire[0:0] and_80_nl;
  wire[0:0] and_83_nl;
  wire[0:0] and_84_nl;
  wire[0:0] and_85_nl;
  wire[0:0] and_86_nl;
  wire[0:0] and_87_nl;
  wire[0:0] and_88_nl;
  wire[0:0] and_89_nl;
  wire[0:0] and_90_nl;
  wire[0:0] and_92_nl;
  wire[0:0] and_93_nl;
  wire[0:0] and_95_nl;
  wire[0:0] and_97_nl;
  wire[0:0] and_98_nl;
  wire[0:0] and_99_nl;
  wire[0:0] and_100_nl;
  wire[0:0] and_101_nl;
  wire[0:0] mux_221_nl;
  wire[0:0] and_259_nl;
  wire[0:0] mux_220_nl;
  wire[0:0] nor_423_nl;
  wire[0:0] mux_219_nl;
  wire[0:0] nor_424_nl;
  wire[0:0] nor_425_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] mux_217_nl;
  wire[0:0] nor_426_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] nor_427_nl;
  wire[0:0] nor_428_nl;
  wire[0:0] nor_429_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] mux_214_nl;
  wire[0:0] nor_430_nl;
  wire[0:0] mux_213_nl;
  wire[0:0] mux_212_nl;
  wire[0:0] nor_431_nl;
  wire[0:0] nor_432_nl;
  wire[0:0] mux_211_nl;
  wire[0:0] nor_433_nl;
  wire[0:0] nor_434_nl;
  wire[0:0] nor_435_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] mux_209_nl;
  wire[0:0] or_145_nl;
  wire[0:0] or_143_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] or_141_nl;
  wire[0:0] or_139_nl;
  wire[0:0] mux_236_nl;
  wire[0:0] mux_235_nl;
  wire[0:0] and_258_nl;
  wire[0:0] mux_234_nl;
  wire[0:0] nor_410_nl;
  wire[0:0] nor_411_nl;
  wire[0:0] mux_233_nl;
  wire[0:0] nor_412_nl;
  wire[0:0] nor_413_nl;
  wire[0:0] mux_232_nl;
  wire[0:0] mux_231_nl;
  wire[0:0] nor_414_nl;
  wire[0:0] nor_415_nl;
  wire[0:0] nor_416_nl;
  wire[0:0] mux_230_nl;
  wire[0:0] or_187_nl;
  wire[0:0] or_185_nl;
  wire[0:0] mux_229_nl;
  wire[0:0] mux_228_nl;
  wire[0:0] mux_227_nl;
  wire[0:0] mux_226_nl;
  wire[0:0] nor_417_nl;
  wire[0:0] nor_418_nl;
  wire[0:0] nor_419_nl;
  wire[0:0] mux_225_nl;
  wire[0:0] nor_420_nl;
  wire[0:0] nor_421_nl;
  wire[0:0] nor_422_nl;
  wire[0:0] mux_224_nl;
  wire[0:0] or_174_nl;
  wire[0:0] mux_223_nl;
  wire[0:0] or_173_nl;
  wire[0:0] or_171_nl;
  wire[0:0] mux_251_nl;
  wire[0:0] and_257_nl;
  wire[0:0] mux_250_nl;
  wire[0:0] nor_397_nl;
  wire[0:0] mux_249_nl;
  wire[0:0] nor_398_nl;
  wire[0:0] nor_399_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] nor_400_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] nor_401_nl;
  wire[0:0] nor_402_nl;
  wire[0:0] nor_403_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] mux_244_nl;
  wire[0:0] nor_404_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] mux_242_nl;
  wire[0:0] nor_405_nl;
  wire[0:0] nor_406_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] nor_407_nl;
  wire[0:0] nor_408_nl;
  wire[0:0] nor_409_nl;
  wire[0:0] mux_240_nl;
  wire[0:0] mux_239_nl;
  wire[0:0] or_204_nl;
  wire[0:0] or_202_nl;
  wire[0:0] mux_238_nl;
  wire[0:0] or_200_nl;
  wire[0:0] or_198_nl;
  wire[0:0] mux_266_nl;
  wire[0:0] mux_265_nl;
  wire[0:0] and_256_nl;
  wire[0:0] mux_264_nl;
  wire[0:0] nor_384_nl;
  wire[0:0] nor_385_nl;
  wire[0:0] mux_263_nl;
  wire[0:0] nor_386_nl;
  wire[0:0] nor_387_nl;
  wire[0:0] mux_262_nl;
  wire[0:0] mux_261_nl;
  wire[0:0] mux_260_nl;
  wire[0:0] nor_388_nl;
  wire[0:0] nor_389_nl;
  wire[0:0] nor_390_nl;
  wire[0:0] mux_259_nl;
  wire[0:0] nor_391_nl;
  wire[0:0] nor_392_nl;
  wire[0:0] mux_258_nl;
  wire[0:0] mux_257_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] nor_393_nl;
  wire[0:0] nor_394_nl;
  wire[0:0] nor_395_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] or_238_nl;
  wire[0:0] or_236_nl;
  wire[0:0] nor_396_nl;
  wire[0:0] mux_254_nl;
  wire[0:0] or_233_nl;
  wire[0:0] mux_253_nl;
  wire[0:0] or_232_nl;
  wire[0:0] or_230_nl;
  wire[0:0] mux_281_nl;
  wire[0:0] and_255_nl;
  wire[0:0] mux_280_nl;
  wire[0:0] nor_371_nl;
  wire[0:0] mux_279_nl;
  wire[0:0] nor_372_nl;
  wire[0:0] nor_373_nl;
  wire[0:0] mux_278_nl;
  wire[0:0] mux_277_nl;
  wire[0:0] nor_374_nl;
  wire[0:0] mux_276_nl;
  wire[0:0] nor_375_nl;
  wire[0:0] nor_376_nl;
  wire[0:0] nor_377_nl;
  wire[0:0] mux_275_nl;
  wire[0:0] mux_274_nl;
  wire[0:0] nor_378_nl;
  wire[0:0] mux_273_nl;
  wire[0:0] mux_272_nl;
  wire[0:0] nor_379_nl;
  wire[0:0] nor_380_nl;
  wire[0:0] mux_271_nl;
  wire[0:0] nor_381_nl;
  wire[0:0] nor_382_nl;
  wire[0:0] nor_383_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] or_263_nl;
  wire[0:0] or_261_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] or_259_nl;
  wire[0:0] or_257_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] mux_295_nl;
  wire[0:0] and_254_nl;
  wire[0:0] mux_294_nl;
  wire[0:0] nor_358_nl;
  wire[0:0] nor_359_nl;
  wire[0:0] mux_293_nl;
  wire[0:0] nor_360_nl;
  wire[0:0] nor_361_nl;
  wire[0:0] mux_292_nl;
  wire[0:0] mux_291_nl;
  wire[0:0] nor_362_nl;
  wire[0:0] nor_363_nl;
  wire[0:0] nor_364_nl;
  wire[0:0] mux_290_nl;
  wire[0:0] or_305_nl;
  wire[0:0] or_303_nl;
  wire[0:0] mux_289_nl;
  wire[0:0] mux_288_nl;
  wire[0:0] mux_287_nl;
  wire[0:0] mux_286_nl;
  wire[0:0] nor_365_nl;
  wire[0:0] nor_366_nl;
  wire[0:0] nor_367_nl;
  wire[0:0] mux_285_nl;
  wire[0:0] nor_368_nl;
  wire[0:0] nor_369_nl;
  wire[0:0] nor_370_nl;
  wire[0:0] mux_284_nl;
  wire[0:0] or_292_nl;
  wire[0:0] mux_283_nl;
  wire[0:0] or_291_nl;
  wire[0:0] or_289_nl;
  wire[0:0] mux_311_nl;
  wire[0:0] mux_310_nl;
  wire[0:0] nor_345_nl;
  wire[0:0] mux_309_nl;
  wire[0:0] nor_346_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] nor_347_nl;
  wire[0:0] nor_348_nl;
  wire[0:0] and_253_nl;
  wire[0:0] mux_307_nl;
  wire[0:0] mux_306_nl;
  wire[0:0] nor_349_nl;
  wire[0:0] nor_350_nl;
  wire[0:0] mux_305_nl;
  wire[0:0] nor_351_nl;
  wire[0:0] nor_352_nl;
  wire[0:0] mux_304_nl;
  wire[0:0] mux_303_nl;
  wire[0:0] mux_302_nl;
  wire[0:0] nor_353_nl;
  wire[0:0] mux_301_nl;
  wire[0:0] nor_354_nl;
  wire[0:0] nor_355_nl;
  wire[0:0] nor_356_nl;
  wire[0:0] nor_357_nl;
  wire[0:0] mux_300_nl;
  wire[0:0] mux_299_nl;
  wire[0:0] or_321_nl;
  wire[0:0] or_320_nl;
  wire[0:0] mux_298_nl;
  wire[0:0] or_318_nl;
  wire[0:0] or_316_nl;
  wire[0:0] mux_326_nl;
  wire[0:0] mux_325_nl;
  wire[0:0] and_252_nl;
  wire[0:0] mux_324_nl;
  wire[0:0] nor_332_nl;
  wire[0:0] nor_333_nl;
  wire[0:0] mux_323_nl;
  wire[0:0] nor_334_nl;
  wire[0:0] nor_335_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] nor_336_nl;
  wire[0:0] nor_337_nl;
  wire[0:0] nor_338_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] nor_339_nl;
  wire[0:0] nor_340_nl;
  wire[0:0] mux_318_nl;
  wire[0:0] mux_317_nl;
  wire[0:0] mux_316_nl;
  wire[0:0] nor_341_nl;
  wire[0:0] nor_342_nl;
  wire[0:0] nor_343_nl;
  wire[0:0] mux_315_nl;
  wire[0:0] or_351_nl;
  wire[0:0] or_349_nl;
  wire[0:0] nor_344_nl;
  wire[0:0] mux_314_nl;
  wire[0:0] or_347_nl;
  wire[0:0] mux_313_nl;
  wire[0:0] or_346_nl;
  wire[0:0] or_344_nl;
  wire[0:0] mux_341_nl;
  wire[0:0] and_251_nl;
  wire[0:0] mux_340_nl;
  wire[0:0] nor_319_nl;
  wire[0:0] mux_339_nl;
  wire[0:0] nor_320_nl;
  wire[0:0] nor_321_nl;
  wire[0:0] mux_338_nl;
  wire[0:0] mux_337_nl;
  wire[0:0] nor_322_nl;
  wire[0:0] mux_336_nl;
  wire[0:0] nor_323_nl;
  wire[0:0] nor_324_nl;
  wire[0:0] nor_325_nl;
  wire[0:0] mux_335_nl;
  wire[0:0] mux_334_nl;
  wire[0:0] nor_326_nl;
  wire[0:0] mux_333_nl;
  wire[0:0] mux_332_nl;
  wire[0:0] nor_327_nl;
  wire[0:0] nor_328_nl;
  wire[0:0] mux_331_nl;
  wire[0:0] nor_329_nl;
  wire[0:0] nor_330_nl;
  wire[0:0] nor_331_nl;
  wire[0:0] mux_330_nl;
  wire[0:0] mux_329_nl;
  wire[0:0] or_376_nl;
  wire[0:0] or_374_nl;
  wire[0:0] mux_328_nl;
  wire[0:0] or_372_nl;
  wire[0:0] or_370_nl;
  wire[0:0] mux_356_nl;
  wire[0:0] mux_355_nl;
  wire[0:0] and_250_nl;
  wire[0:0] mux_354_nl;
  wire[0:0] nor_306_nl;
  wire[0:0] nor_307_nl;
  wire[0:0] mux_353_nl;
  wire[0:0] nor_308_nl;
  wire[0:0] nor_309_nl;
  wire[0:0] mux_352_nl;
  wire[0:0] mux_351_nl;
  wire[0:0] nor_310_nl;
  wire[0:0] nor_311_nl;
  wire[0:0] nor_312_nl;
  wire[0:0] mux_350_nl;
  wire[0:0] or_418_nl;
  wire[0:0] or_416_nl;
  wire[0:0] mux_349_nl;
  wire[0:0] mux_348_nl;
  wire[0:0] mux_347_nl;
  wire[0:0] mux_346_nl;
  wire[0:0] nor_313_nl;
  wire[0:0] nor_314_nl;
  wire[0:0] nor_315_nl;
  wire[0:0] mux_345_nl;
  wire[0:0] nor_316_nl;
  wire[0:0] nor_317_nl;
  wire[0:0] nor_318_nl;
  wire[0:0] mux_344_nl;
  wire[0:0] or_405_nl;
  wire[0:0] mux_343_nl;
  wire[0:0] or_404_nl;
  wire[0:0] or_402_nl;
  wire[0:0] mux_371_nl;
  wire[0:0] and_249_nl;
  wire[0:0] mux_370_nl;
  wire[0:0] nor_293_nl;
  wire[0:0] mux_369_nl;
  wire[0:0] nor_294_nl;
  wire[0:0] nor_295_nl;
  wire[0:0] mux_368_nl;
  wire[0:0] mux_367_nl;
  wire[0:0] nor_296_nl;
  wire[0:0] mux_366_nl;
  wire[0:0] nor_297_nl;
  wire[0:0] nor_298_nl;
  wire[0:0] nor_299_nl;
  wire[0:0] mux_365_nl;
  wire[0:0] mux_364_nl;
  wire[0:0] nor_300_nl;
  wire[0:0] mux_363_nl;
  wire[0:0] mux_362_nl;
  wire[0:0] nor_301_nl;
  wire[0:0] nor_302_nl;
  wire[0:0] mux_361_nl;
  wire[0:0] nor_303_nl;
  wire[0:0] nor_304_nl;
  wire[0:0] nor_305_nl;
  wire[0:0] mux_360_nl;
  wire[0:0] mux_359_nl;
  wire[0:0] or_434_nl;
  wire[0:0] or_433_nl;
  wire[0:0] mux_358_nl;
  wire[0:0] or_431_nl;
  wire[0:0] or_429_nl;
  wire[0:0] mux_386_nl;
  wire[0:0] mux_385_nl;
  wire[0:0] and_248_nl;
  wire[0:0] mux_384_nl;
  wire[0:0] nor_280_nl;
  wire[0:0] nor_281_nl;
  wire[0:0] mux_383_nl;
  wire[0:0] nor_282_nl;
  wire[0:0] nor_283_nl;
  wire[0:0] mux_382_nl;
  wire[0:0] mux_381_nl;
  wire[0:0] mux_380_nl;
  wire[0:0] nor_284_nl;
  wire[0:0] nor_285_nl;
  wire[0:0] nor_286_nl;
  wire[0:0] mux_379_nl;
  wire[0:0] nor_287_nl;
  wire[0:0] nor_288_nl;
  wire[0:0] mux_378_nl;
  wire[0:0] mux_377_nl;
  wire[0:0] mux_376_nl;
  wire[0:0] nor_289_nl;
  wire[0:0] nor_290_nl;
  wire[0:0] nor_291_nl;
  wire[0:0] mux_375_nl;
  wire[0:0] or_467_nl;
  wire[0:0] or_465_nl;
  wire[0:0] nor_292_nl;
  wire[0:0] mux_374_nl;
  wire[0:0] or_462_nl;
  wire[0:0] mux_373_nl;
  wire[0:0] or_461_nl;
  wire[0:0] or_459_nl;
  wire[0:0] mux_401_nl;
  wire[0:0] and_247_nl;
  wire[0:0] mux_400_nl;
  wire[0:0] nor_267_nl;
  wire[0:0] mux_399_nl;
  wire[0:0] nor_268_nl;
  wire[0:0] nor_269_nl;
  wire[0:0] mux_398_nl;
  wire[0:0] mux_397_nl;
  wire[0:0] nor_270_nl;
  wire[0:0] mux_396_nl;
  wire[0:0] nor_271_nl;
  wire[0:0] nor_272_nl;
  wire[0:0] nor_273_nl;
  wire[0:0] mux_395_nl;
  wire[0:0] mux_394_nl;
  wire[0:0] nor_274_nl;
  wire[0:0] mux_393_nl;
  wire[0:0] mux_392_nl;
  wire[0:0] nor_275_nl;
  wire[0:0] nor_276_nl;
  wire[0:0] mux_391_nl;
  wire[0:0] nor_277_nl;
  wire[0:0] nor_278_nl;
  wire[0:0] nor_279_nl;
  wire[0:0] mux_390_nl;
  wire[0:0] mux_389_nl;
  wire[0:0] or_492_nl;
  wire[0:0] or_490_nl;
  wire[0:0] mux_388_nl;
  wire[0:0] or_488_nl;
  wire[0:0] or_486_nl;
  wire[0:0] mux_416_nl;
  wire[0:0] mux_415_nl;
  wire[0:0] and_246_nl;
  wire[0:0] mux_414_nl;
  wire[0:0] nor_254_nl;
  wire[0:0] nor_255_nl;
  wire[0:0] mux_413_nl;
  wire[0:0] nor_256_nl;
  wire[0:0] nor_257_nl;
  wire[0:0] mux_412_nl;
  wire[0:0] mux_411_nl;
  wire[0:0] nor_258_nl;
  wire[0:0] nor_259_nl;
  wire[0:0] nor_260_nl;
  wire[0:0] mux_410_nl;
  wire[0:0] or_531_nl;
  wire[0:0] or_529_nl;
  wire[0:0] mux_409_nl;
  wire[0:0] mux_408_nl;
  wire[0:0] mux_407_nl;
  wire[0:0] mux_406_nl;
  wire[0:0] nor_261_nl;
  wire[0:0] nor_262_nl;
  wire[0:0] nor_263_nl;
  wire[0:0] mux_405_nl;
  wire[0:0] nor_264_nl;
  wire[0:0] nor_265_nl;
  wire[0:0] nor_266_nl;
  wire[0:0] mux_404_nl;
  wire[0:0] or_518_nl;
  wire[0:0] mux_403_nl;
  wire[0:0] or_517_nl;
  wire[0:0] or_515_nl;
  wire[0:0] mux_431_nl;
  wire[0:0] mux_430_nl;
  wire[0:0] nor_247_nl;
  wire[0:0] mux_429_nl;
  wire[0:0] and_239_nl;
  wire[0:0] mux_428_nl;
  wire[0:0] and_240_nl;
  wire[0:0] nor_248_nl;
  wire[0:0] and_241_nl;
  wire[0:0] mux_427_nl;
  wire[0:0] mux_426_nl;
  wire[0:0] and_242_nl;
  wire[0:0] nor_249_nl;
  wire[0:0] mux_425_nl;
  wire[0:0] and_243_nl;
  wire[0:0] nor_250_nl;
  wire[0:0] mux_424_nl;
  wire[0:0] mux_423_nl;
  wire[0:0] mux_422_nl;
  wire[0:0] and_244_nl;
  wire[0:0] mux_421_nl;
  wire[0:0] and_245_nl;
  wire[0:0] nor_251_nl;
  wire[0:0] nor_252_nl;
  wire[0:0] nor_253_nl;
  wire[0:0] mux_420_nl;
  wire[0:0] mux_419_nl;
  wire[0:0] nand_58_nl;
  wire[0:0] or_544_nl;
  wire[0:0] mux_418_nl;
  wire[0:0] nand_60_nl;
  wire[0:0] or_542_nl;
  wire[0:0] mux_446_nl;
  wire[0:0] mux_445_nl;
  wire[0:0] and_237_nl;
  wire[0:0] mux_444_nl;
  wire[0:0] nor_233_nl;
  wire[0:0] nor_234_nl;
  wire[0:0] mux_443_nl;
  wire[0:0] mux_442_nl;
  wire[0:0] nor_235_nl;
  wire[0:0] nor_236_nl;
  wire[0:0] nor_237_nl;
  wire[0:0] mux_441_nl;
  wire[0:0] mux_440_nl;
  wire[0:0] nor_238_nl;
  wire[0:0] nor_239_nl;
  wire[0:0] mux_439_nl;
  wire[0:0] nor_240_nl;
  wire[0:0] nor_241_nl;
  wire[0:0] mux_438_nl;
  wire[0:0] mux_437_nl;
  wire[0:0] mux_436_nl;
  wire[0:0] nor_242_nl;
  wire[0:0] nor_243_nl;
  wire[0:0] mux_435_nl;
  wire[0:0] nor_244_nl;
  wire[0:0] mux_434_nl;
  wire[0:0] nor_245_nl;
  wire[0:0] and_238_nl;
  wire[0:0] nor_246_nl;
  wire[0:0] mux_433_nl;
  wire[0:0] or_728_nl;
  wire[0:0] nand_51_nl;
  wire[6:0] COMP_LOOP_1_tmp_mul_nl;
  wire[13:0] nl_COMP_LOOP_1_tmp_mul_nl;
  wire[0:0] mux_454_nl;
  wire[0:0] mux_453_nl;
  wire[0:0] mux_452_nl;
  wire[0:0] or_588_nl;
  wire[0:0] or_586_nl;
  wire[0:0] mux_451_nl;
  wire[0:0] mux_450_nl;
  wire[0:0] mux_449_nl;
  wire[0:0] or_583_nl;
  wire[0:0] mux_448_nl;
  wire[0:0] or_581_nl;
  wire[0:0] or_580_nl;
  wire[0:0] mux_457_nl;
  wire[0:0] mux_456_nl;
  wire[0:0] nor_229_nl;
  wire[0:0] mux_455_nl;
  wire[0:0] nor_232_nl;
  wire[0:0] mux_462_nl;
  wire[0:0] mux_461_nl;
  wire[0:0] nor_223_nl;
  wire[0:0] nor_224_nl;
  wire[0:0] mux_460_nl;
  wire[0:0] mux_459_nl;
  wire[0:0] mux_458_nl;
  wire[0:0] mux_465_nl;
  wire[0:0] mux_464_nl;
  wire[0:0] nor_219_nl;
  wire[0:0] mux_463_nl;
  wire[0:0] nor_222_nl;
  wire[0:0] mux_471_nl;
  wire[0:0] mux_470_nl;
  wire[0:0] mux_469_nl;
  wire[0:0] nor_212_nl;
  wire[0:0] nor_213_nl;
  wire[0:0] nor_214_nl;
  wire[0:0] mux_468_nl;
  wire[0:0] mux_467_nl;
  wire[0:0] nor_215_nl;
  wire[0:0] nor_216_nl;
  wire[0:0] mux_466_nl;
  wire[0:0] nor_217_nl;
  wire[0:0] nor_218_nl;
  wire[0:0] mux_474_nl;
  wire[0:0] mux_473_nl;
  wire[0:0] nor_208_nl;
  wire[0:0] mux_472_nl;
  wire[0:0] nor_211_nl;
  wire[0:0] mux_479_nl;
  wire[0:0] mux_478_nl;
  wire[0:0] nor_202_nl;
  wire[0:0] nor_203_nl;
  wire[0:0] mux_477_nl;
  wire[0:0] mux_476_nl;
  wire[0:0] mux_475_nl;
  wire[0:0] mux_482_nl;
  wire[0:0] mux_481_nl;
  wire[0:0] and_nl;
  wire[0:0] mux_480_nl;
  wire[0:0] nor_201_nl;
  wire[6:0] COMP_LOOP_mux_92_nl;
  wire[0:0] and_533_nl;
  wire[11:0] acc_1_nl;
  wire[12:0] nl_acc_1_nl;
  wire[10:0] COMP_LOOP_mux_93_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nand_1_nl;
  wire[9:0] COMP_LOOP_mux_94_nl;
  wire[53:0] COMP_LOOP_tmp_and_28_nl;
  wire[53:0] COMP_LOOP_tmp_mux1h_52_nl;
  wire[0:0] COMP_LOOP_tmp_and_29_nl;
  wire[0:0] COMP_LOOP_tmp_mux1h_53_nl;
  wire[8:0] COMP_LOOP_tmp_mux1h_54_nl;
  wire[0:0] COMP_LOOP_tmp_or_40_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl;
  wire[0:0] COMP_LOOP_tmp_and_30_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl;
  wire[5:0] COMP_LOOP_tmp_mux1h_55_nl;
  wire[0:0] COMP_LOOP_tmp_or_41_nl;
  wire[0:0] COMP_LOOP_tmp_mux1h_56_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl;
  wire[0:0] COMP_LOOP_tmp_mux_8_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl;
  wire[3:0] STAGE_LOOP_mux_4_nl;
  wire[0:0] COMP_LOOP_mux1h_178_nl;
  wire[0:0] COMP_LOOP_mux1h_179_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_210_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_211_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_212_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_213_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_214_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_215_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_216_nl;
  wire[0:0] COMP_LOOP_mux1h_180_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_217_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_218_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_219_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_220_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_221_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_222_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_223_nl;
  wire[0:0] COMP_LOOP_mux1h_181_nl;
  wire[0:0] COMP_LOOP_mux1h_182_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_224_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_225_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_226_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_227_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_228_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_229_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_and_230_nl;
  wire[0:0] COMP_LOOP_mux1h_183_nl;
  wire[0:0] COMP_LOOP_mux1h_184_nl;
  wire[0:0] COMP_LOOP_mux1h_185_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[64:0] acc_4_nl;
  wire[65:0] nl_acc_4_nl;
  wire[63:0] COMP_LOOP_COMP_LOOP_mux_9_nl;
  wire[0:0] mux_505_nl;
  wire[0:0] mux_504_nl;
  wire[0:0] or_641_nl;
  wire[0:0] mux_503_nl;
  wire[0:0] nand_21_nl;
  wire[0:0] mux_502_nl;
  wire[0:0] nand_20_nl;
  wire[0:0] mux_499_nl;
  wire[0:0] nand_19_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat;
  assign COMP_LOOP_COMP_LOOP_mux_9_nl = MUX_v_64_2_2((~ COMP_LOOP_1_acc_8_itm), (~
      z_out_8), COMP_LOOP_or_9_itm);
  assign nl_acc_4_nl = ({COMP_LOOP_mux_95_cse , 1'b1}) + ({COMP_LOOP_COMP_LOOP_mux_9_nl
      , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[64:0];
  assign nand_21_nl = ~((fsm_output[1]) & (fsm_output[6]) & (~ mux_tmp_489));
  assign mux_503_nl = MUX_s_1_2_2(nand_21_nl, mux_tmp_487, fsm_output[4]);
  assign or_641_nl = (fsm_output[3]) | mux_503_nl;
  assign mux_504_nl = MUX_s_1_2_2(or_641_nl, mux_tmp_490, fsm_output[7]);
  assign nand_19_nl = ~((fsm_output[1]) & (~ mux_tmp_486));
  assign mux_499_nl = MUX_s_1_2_2(mux_tmp_487, nand_19_nl, fsm_output[4]);
  assign nand_20_nl = ~((fsm_output[3]) & (~ mux_499_nl));
  assign mux_502_nl = MUX_s_1_2_2(mux_tmp_490, nand_20_nl, fsm_output[7]);
  assign mux_505_nl = MUX_s_1_2_2(mux_504_nl, mux_502_nl, fsm_output[2]);
  assign nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat = MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm,
      (readslicef_65_64_1(acc_4_nl)), mux_505_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_521_nl;
  wire[0:0] mux_520_nl;
  wire[0:0] mux_519_nl;
  wire[0:0] mux_518_nl;
  wire[0:0] mux_517_nl;
  wire[0:0] or_655_nl;
  wire[0:0] mux_516_nl;
  wire[0:0] mux_515_nl;
  wire[0:0] or_651_nl;
  wire[0:0] mux_513_nl;
  wire[0:0] mux_511_nl;
  wire[0:0] mux_510_nl;
  wire[0:0] mux_509_nl;
  wire[0:0] nor_196_nl;
  wire[0:0] or_645_nl;
  wire[0:0] mux_508_nl;
  wire[0:0] mux_507_nl;
  wire[0:0] or_644_nl;
  wire[0:0] or_643_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat;
  assign or_655_nl = (~ (fsm_output[1])) | (~ (fsm_output[4])) | (fsm_output[3]);
  assign mux_517_nl = MUX_s_1_2_2(or_655_nl, mux_tmp_503, fsm_output[6]);
  assign mux_518_nl = MUX_s_1_2_2(mux_517_nl, or_tmp_610, fsm_output[5]);
  assign or_651_nl = (fsm_output[1]) | (fsm_output[4]) | (fsm_output[3]);
  assign mux_515_nl = MUX_s_1_2_2(mux_tmp_503, or_651_nl, fsm_output[6]);
  assign mux_516_nl = MUX_s_1_2_2(or_tmp_610, mux_515_nl, fsm_output[5]);
  assign mux_519_nl = MUX_s_1_2_2(mux_518_nl, mux_516_nl, fsm_output[0]);
  assign mux_520_nl = MUX_s_1_2_2(mux_519_nl, mux_tmp_501, fsm_output[7]);
  assign nor_196_nl = ~((~ (fsm_output[1])) | (fsm_output[4]) | (~ (fsm_output[3])));
  assign mux_509_nl = MUX_s_1_2_2(nor_196_nl, mux_tmp_495, fsm_output[6]);
  assign or_645_nl = (fsm_output[6]) | not_tmp_290;
  assign mux_510_nl = MUX_s_1_2_2((~ mux_509_nl), or_645_nl, fsm_output[5]);
  assign or_644_nl = (fsm_output[1]) | (~ and_532_cse);
  assign mux_507_nl = MUX_s_1_2_2(not_tmp_290, or_644_nl, fsm_output[6]);
  assign or_643_nl = (fsm_output[6]) | (~ mux_tmp_495);
  assign mux_508_nl = MUX_s_1_2_2(mux_507_nl, or_643_nl, fsm_output[5]);
  assign mux_511_nl = MUX_s_1_2_2(mux_510_nl, mux_508_nl, fsm_output[0]);
  assign mux_513_nl = MUX_s_1_2_2(mux_tmp_501, mux_511_nl, fsm_output[7]);
  assign mux_521_nl = MUX_s_1_2_2(mux_520_nl, mux_513_nl, fsm_output[2]);
  assign nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat = ~ mux_521_nl;
  wire[0:0] and_321_nl;
  wire [3:0] nl_COMP_LOOP_5_tmp_lshift_rg_s;
  assign and_321_nl = (fsm_output==8'b00000010);
  assign nl_COMP_LOOP_5_tmp_lshift_rg_s = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, z_out_5,
      and_321_nl);
  wire[0:0] and_336_nl;
  wire [3:0] nl_COMP_LOOP_1_tmp_lshift_rg_s;
  assign and_336_nl = (fsm_output==8'b00000010);
  assign nl_COMP_LOOP_1_tmp_lshift_rg_s = MUX_v_4_2_2(COMP_LOOP_1_tmp_acc_cse_sva,
      z_out_5, and_336_nl);
  wire [0:0] nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro = ~ mux_496_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0 = ~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0 = ~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0 = ~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0 = ~ COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0 = ~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0 = ~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0 = ~ COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0 = z_out_3[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 = ~ (z_out_2[4]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_7_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_7_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_6_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_6_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_5_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_5_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_4_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_4_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_7_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_7_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_6_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_6_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_5_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_5_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_4_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_4_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_7_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  modulo  COMP_LOOP_1_modulo_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd11)) COMP_LOOP_5_tmp_lshift_rg (
      .a(1'b1),
      .s(nl_COMP_LOOP_5_tmp_lshift_rg_s[3:0]),
      .z(z_out)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) COMP_LOOP_1_tmp_lshift_rg (
      .a(1'b1),
      .s(nl_COMP_LOOP_1_tmp_lshift_rg_s[3:0]),
      .z(z_out_1)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .COMP_LOOP_C_31_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0[0:0]),
      .COMP_LOOP_C_62_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0[0:0]),
      .COMP_LOOP_C_93_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0[0:0]),
      .COMP_LOOP_C_124_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0[0:0]),
      .COMP_LOOP_C_155_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0[0:0]),
      .COMP_LOOP_C_186_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0[0:0]),
      .COMP_LOOP_C_217_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0[0:0]),
      .COMP_LOOP_C_248_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0[0:0]),
      .VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0[0:0]),
      .STAGE_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0[0:0])
    );
  assign or_731_cse = (fsm_output[1:0]!=2'b00);
  assign nand_137_cse = ~((fsm_output[0]) & (fsm_output[2]) & (fsm_output[3]) & (fsm_output[4]));
  assign nand_138_cse = ~((fsm_output[4:3]==2'b11));
  assign nand_126_cse = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[0]) & (fsm_output[4:2]==3'b111));
  assign nand_127_cse = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[0]) & (fsm_output[4:2]==3'b111));
  assign mux_492_nl = MUX_s_1_2_2(and_dcpl_28, and_532_cse, or_735_cse);
  assign mux_493_nl = MUX_s_1_2_2(mux_492_nl, and_283_cse, fsm_output[0]);
  assign mux_494_nl = MUX_s_1_2_2((~ mux_tmp_478), mux_493_nl, fsm_output[5]);
  assign mux_495_nl = MUX_s_1_2_2(mux_141_cse, mux_494_nl, fsm_output[6]);
  assign mux_487_nl = MUX_s_1_2_2(mux_tmp_475, mux_tmp_472, fsm_output[0]);
  assign mux_490_nl = MUX_s_1_2_2(mux_tmp_478, mux_487_nl, fsm_output[5]);
  assign mux_484_nl = MUX_s_1_2_2((~ mux_tmp_472), and_283_cse, fsm_output[5]);
  assign mux_491_nl = MUX_s_1_2_2((~ mux_490_nl), mux_484_nl, fsm_output[6]);
  assign mux_496_itm = MUX_s_1_2_2(mux_495_nl, mux_491_nl, fsm_output[1]);
  assign and_263_cse = (fsm_output[1:0]==2'b11);
  assign nor_441_cse = ~((fsm_output[7:6]!=2'b00));
  assign and_532_cse = (fsm_output[4:3]==2'b11);
  assign mux_530_nl = MUX_s_1_2_2((~ or_tmp_617), or_tmp_617, fsm_output[6]);
  assign or_671_nl = (fsm_output[6]) | (~ or_tmp_617);
  assign mux_531_nl = MUX_s_1_2_2(mux_530_nl, or_671_nl, fsm_output[1]);
  assign mux_532_nl = MUX_s_1_2_2(mux_531_nl, (fsm_output[6]), fsm_output[5]);
  assign COMP_LOOP_or_14_cse = mux_532_nl | (fsm_output[7]);
  assign or_735_cse = (fsm_output[2]) | (fsm_output[7]);
  assign and_283_cse = or_735_cse & (fsm_output[4:3]==2'b11);
  assign nor_459_nl = ~((fsm_output[7]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_141_cse = MUX_s_1_2_2(nor_459_nl, nor_tmp_35, fsm_output[2]);
  assign and_280_cse = (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]);
  assign COMP_LOOP_tmp_or_2_cse = and_dcpl_42 | and_dcpl_96 | and_dcpl_97 | and_dcpl_101;
  assign COMP_LOOP_tmp_or_7_cse = and_dcpl_95 | and_dcpl_98;
  assign nor_474_cse = ~((fsm_output[2]) | (fsm_output[6]));
  assign and_203_m1c = and_dcpl_100 & and_dcpl_38;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse = ~((COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]!=2'b00));
  assign nl_COMP_LOOP_1_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b000}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_1_acc_10_nl = nl_COMP_LOOP_1_acc_10_nl[10:0];
  assign COMP_LOOP_1_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_1_acc_10_nl);
  assign nl_COMP_LOOP_acc_1_cse_6_sva_1 = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_3_sva_6_0
      , 3'b101});
  assign COMP_LOOP_acc_1_cse_6_sva_1 = nl_COMP_LOOP_acc_1_cse_6_sva_1[9:0];
  assign nl_COMP_LOOP_acc_1_cse_4_sva_1 = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_3_sva_6_0
      , 3'b011});
  assign COMP_LOOP_acc_1_cse_4_sva_1 = nl_COMP_LOOP_acc_1_cse_4_sva_1[9:0];
  assign nl_COMP_LOOP_acc_11_psp_sva_1 = (VEC_LOOP_j_10_0_sva_9_0[9:1]) + ({COMP_LOOP_k_10_3_sva_6_0
      , 2'b01});
  assign COMP_LOOP_acc_11_psp_sva_1 = nl_COMP_LOOP_acc_11_psp_sva_1[8:0];
  assign nl_COMP_LOOP_acc_1_cse_2_sva_1 = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_3_sva_6_0
      , 3'b001});
  assign COMP_LOOP_acc_1_cse_2_sva_1 = nl_COMP_LOOP_acc_1_cse_2_sva_1[9:0];
  assign nl_COMP_LOOP_2_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b001}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_2_acc_10_nl = nl_COMP_LOOP_2_acc_10_nl[10:0];
  assign COMP_LOOP_2_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_2_acc_10_nl);
  assign nl_COMP_LOOP_4_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b011}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_4_acc_10_nl = nl_COMP_LOOP_4_acc_10_nl[10:0];
  assign COMP_LOOP_4_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_4_acc_10_nl);
  assign nl_COMP_LOOP_5_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b100}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_5_acc_10_nl = nl_COMP_LOOP_5_acc_10_nl[10:0];
  assign COMP_LOOP_5_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_5_acc_10_nl);
  assign nl_COMP_LOOP_6_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b101}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_6_acc_10_nl = nl_COMP_LOOP_6_acc_10_nl[10:0];
  assign COMP_LOOP_6_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_6_acc_10_nl);
  assign nl_COMP_LOOP_7_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b110}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_7_acc_10_nl = nl_COMP_LOOP_7_acc_10_nl[10:0];
  assign COMP_LOOP_7_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_7_acc_10_nl);
  assign nl_COMP_LOOP_8_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b111}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_8_acc_10_nl = nl_COMP_LOOP_8_acc_10_nl[10:0];
  assign COMP_LOOP_8_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_8_acc_10_nl);
  assign COMP_LOOP_tmp_mux1h_itm_mx0w0 = MUX1HOT_v_64_8_2(twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_4_i_q_d,
      twiddle_rsc_0_5_i_q_d, twiddle_rsc_0_6_i_q_d, twiddle_rsc_0_7_i_q_d, {COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 , COMP_LOOP_tmp_COMP_LOOP_tmp_and_37 ,
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm , COMP_LOOP_tmp_COMP_LOOP_tmp_and_39
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm , COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm});
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt = (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]==3'b001);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt = (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]==3'b010);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt = (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]==3'b100);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 = (COMP_LOOP_2_tmp_mul_idiv_sva[2:0]==3'b001);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_37 = (COMP_LOOP_2_tmp_mul_idiv_sva[2:0]==3'b010);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_39 = (COMP_LOOP_2_tmp_mul_idiv_sva[2:0]==3'b100);
  assign or_dcpl = (fsm_output[4:3]!=2'b00);
  assign or_tmp_25 = (fsm_output[6]) | and_532_cse;
  assign or_tmp_38 = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[3]);
  assign nor_tmp_29 = (fsm_output[7:6]==2'b11);
  assign nor_tmp_35 = (fsm_output[7]) & (fsm_output[3]) & (fsm_output[4]);
  assign and_dcpl_24 = ~((fsm_output[7]) | (fsm_output[5]));
  assign and_dcpl_25 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_26 = and_dcpl_25 & and_dcpl_24;
  assign and_dcpl_28 = ~((fsm_output[4:3]!=2'b00));
  assign and_dcpl_29 = and_dcpl_28 & nor_474_cse;
  assign and_dcpl_31 = (fsm_output[7]) & (fsm_output[5]);
  assign and_dcpl_32 = and_dcpl_25 & and_dcpl_31;
  assign and_dcpl_33 = (fsm_output[2]) & (fsm_output[6]);
  assign and_dcpl_35 = and_532_cse & and_dcpl_33;
  assign nor_tmp_64 = or_731_cse & (fsm_output[6]) & (fsm_output[2]) & (fsm_output[3])
      & (fsm_output[4]);
  assign nand_144_nl = ~((fsm_output[7]) & (fsm_output[3]) & (fsm_output[4]));
  assign or_134_nl = (fsm_output[7]) | nand_138_cse;
  assign mux_tmp_192 = MUX_s_1_2_2(nand_144_nl, or_134_nl, fsm_output[2]);
  assign nand_tmp_2 = ~((fsm_output[0]) & (fsm_output[5]) & (~ mux_tmp_192));
  assign and_dcpl_37 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_38 = and_dcpl_37 & and_dcpl_24;
  assign and_dcpl_39 = and_dcpl_29 & and_dcpl_38;
  assign and_dcpl_41 = and_263_cse & and_dcpl_24;
  assign and_dcpl_42 = and_dcpl_29 & and_dcpl_41;
  assign and_dcpl_43 = (~ (fsm_output[7])) & (fsm_output[5]);
  assign and_dcpl_44 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_45 = and_dcpl_44 & and_dcpl_43;
  assign and_dcpl_47 = and_dcpl_37 & and_dcpl_43;
  assign and_dcpl_48 = and_dcpl_29 & and_dcpl_47;
  assign and_dcpl_49 = (~ (fsm_output[2])) & (fsm_output[6]);
  assign and_dcpl_50 = and_dcpl_28 & and_dcpl_49;
  assign and_dcpl_52 = and_dcpl_44 & and_dcpl_24;
  assign and_dcpl_53 = and_dcpl_50 & and_dcpl_52;
  assign and_dcpl_55 = and_dcpl_25 & and_dcpl_43;
  assign and_dcpl_56 = and_dcpl_50 & and_dcpl_55;
  assign and_dcpl_58 = and_263_cse & and_dcpl_43;
  assign and_dcpl_59 = and_dcpl_35 & and_dcpl_58;
  assign and_dcpl_60 = (fsm_output[7]) & (~ (fsm_output[5]));
  assign and_dcpl_61 = and_dcpl_44 & and_dcpl_60;
  assign and_dcpl_62 = (fsm_output[2]) & (~ (fsm_output[6]));
  assign and_dcpl_63 = and_532_cse & and_dcpl_62;
  assign and_dcpl_65 = and_dcpl_37 & and_dcpl_60;
  assign and_dcpl_66 = and_dcpl_63 & and_dcpl_65;
  assign and_dcpl_68 = and_dcpl_44 & and_dcpl_31;
  assign and_dcpl_69 = and_dcpl_63 & and_dcpl_68;
  assign and_dcpl_70 = and_263_cse & and_dcpl_60;
  assign and_dcpl_71 = and_532_cse & and_dcpl_49;
  assign and_dcpl_73 = and_dcpl_25 & and_dcpl_60;
  assign and_dcpl_74 = and_dcpl_35 & and_dcpl_73;
  assign and_dcpl_83 = and_532_cse & nor_474_cse;
  assign and_dcpl_86 = and_dcpl_37 & and_dcpl_31;
  assign and_dcpl_88 = and_263_cse & and_dcpl_31;
  assign not_tmp_134 = ~((fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]));
  assign not_tmp_135 = ~((fsm_output[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]));
  assign not_tmp_138 = ~((fsm_output[4:2]==3'b111));
  assign not_tmp_147 = ~((VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[4]));
  assign nand_132_cse = ~((COMP_LOOP_acc_10_cse_10_1_4_sva[0]) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]));
  assign nand_130_cse = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[0]) & (fsm_output[0])
      & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]));
  assign nand_133_cse = ~((COMP_LOOP_acc_1_cse_4_sva[0]) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[4]));
  assign not_tmp_153 = ~((VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[4:2]==3'b111));
  assign nand_97_cse = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2]) & (fsm_output[0]) &
      (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]));
  assign nand_98_cse = ~((COMP_LOOP_acc_10_cse_10_1_sva[2]) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[4]));
  assign nand_99_cse = ~((COMP_LOOP_acc_1_cse_sva[2]) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[4]));
  assign and_dcpl_94 = and_dcpl_28 & and_dcpl_62;
  assign and_dcpl_95 = and_dcpl_94 & and_dcpl_26;
  assign and_dcpl_96 = and_dcpl_94 & and_dcpl_52;
  assign and_dcpl_97 = and_dcpl_94 & and_dcpl_38;
  assign and_dcpl_98 = and_dcpl_94 & and_dcpl_41;
  assign and_dcpl_99 = (fsm_output[4:3]==2'b01);
  assign and_dcpl_100 = and_dcpl_99 & nor_474_cse;
  assign and_dcpl_101 = and_dcpl_100 & and_dcpl_26;
  assign and_dcpl_102 = and_dcpl_100 & and_dcpl_52;
  assign and_dcpl_104 = (~ (fsm_output[4])) & (~ (fsm_output[6])) & and_dcpl_24;
  assign and_dcpl_117 = and_532_cse & (fsm_output[2]);
  assign or_tmp_588 = (fsm_output[7]) | (~ and_532_cse);
  assign mux_tmp_472 = MUX_s_1_2_2((~ nor_tmp_35), or_tmp_588, fsm_output[2]);
  assign mux_485_nl = MUX_s_1_2_2(and_dcpl_28, and_532_cse, fsm_output[7]);
  assign mux_tmp_475 = MUX_s_1_2_2((~ mux_485_nl), or_tmp_588, fsm_output[2]);
  assign mux_tmp_478 = MUX_s_1_2_2((~ mux_141_cse), mux_tmp_475, fsm_output[0]);
  assign nand_38_nl = ~((fsm_output[0]) & (fsm_output[5]));
  assign or_636_nl = (fsm_output[0]) | (fsm_output[5]);
  assign mux_tmp_486 = MUX_s_1_2_2(nand_38_nl, or_636_nl, fsm_output[6]);
  assign or_637_nl = (fsm_output[6]) | (fsm_output[0]) | (fsm_output[5]);
  assign mux_tmp_487 = MUX_s_1_2_2(mux_tmp_486, or_637_nl, fsm_output[1]);
  assign mux_tmp_489 = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[0]);
  assign or_640_nl = (fsm_output[4]) | (fsm_output[1]) | (fsm_output[6]) | mux_tmp_489;
  assign or_638_nl = (fsm_output[4]) | (~((fsm_output[1]) & (fsm_output[6]) & (fsm_output[0])
      & (fsm_output[5])));
  assign mux_tmp_490 = MUX_s_1_2_2(or_640_nl, or_638_nl, fsm_output[3]);
  assign and_dcpl_120 = and_dcpl_29 & and_dcpl_58;
  assign and_dcpl_121 = and_dcpl_50 & and_dcpl_38;
  assign and_dcpl_122 = and_dcpl_50 & and_dcpl_45;
  assign and_dcpl_123 = and_dcpl_29 & and_dcpl_73;
  assign and_dcpl_124 = and_dcpl_63 & and_dcpl_70;
  assign and_dcpl_125 = and_dcpl_63 & and_dcpl_86;
  assign and_dcpl_126 = and_dcpl_35 & and_dcpl_61;
  assign nor_197_nl = ~((fsm_output[4:3]!=2'b01));
  assign mux_tmp_495 = MUX_s_1_2_2(nor_197_nl, and_532_cse, fsm_output[1]);
  assign not_tmp_290 = ~((fsm_output[1]) & (fsm_output[4]) & (fsm_output[3]));
  assign and_230_cse = (fsm_output[0]) & (fsm_output[5]);
  assign or_650_nl = (fsm_output[6]) | (fsm_output[1]) | (fsm_output[4]) | (fsm_output[3]);
  assign nand_152_nl = ~((fsm_output[6]) & (fsm_output[1]) & (~ (fsm_output[4]))
      & (fsm_output[3]));
  assign mux_tmp_501 = MUX_s_1_2_2(or_650_nl, nand_152_nl, and_230_cse);
  assign or_653_nl = (fsm_output[4:3]!=2'b10);
  assign mux_tmp_503 = MUX_s_1_2_2(or_653_nl, or_dcpl, fsm_output[1]);
  assign or_tmp_610 = (~ (fsm_output[6])) | (~ (fsm_output[1])) | (fsm_output[4])
      | (fsm_output[3]);
  assign or_dcpl_46 = (fsm_output[7]) | (fsm_output[5]);
  assign or_dcpl_51 = or_dcpl | (fsm_output[6]) | (fsm_output[2]);
  assign or_dcpl_52 = or_dcpl_51 | (fsm_output[1:0]!=2'b10) | or_dcpl_46;
  assign or_tmp_616 = and_263_cse | (fsm_output[6]) | (fsm_output[2]) | (fsm_output[3])
      | (fsm_output[4]);
  assign mux_528_nl = MUX_s_1_2_2((~ or_tmp_616), and_dcpl_35, fsm_output[7]);
  assign mux_529_itm = MUX_s_1_2_2(mux_528_nl, nor_tmp_29, fsm_output[5]);
  assign or_tmp_617 = (fsm_output[4:2]!=3'b000);
  assign or_tmp_620 = (fsm_output[6]) | and_dcpl_117;
  assign mux_tmp_522 = MUX_s_1_2_2(or_tmp_620, or_tmp_25, and_263_cse);
  assign mux_tmp_523 = MUX_s_1_2_2((~ or_tmp_616), (fsm_output[6]), fsm_output[7]);
  assign mux_tmp_526 = MUX_s_1_2_2((~ or_tmp_617), and_dcpl_117, fsm_output[6]);
  assign mux_tmp_527 = MUX_s_1_2_2(mux_tmp_526, and_dcpl_35, fsm_output[0]);
  assign or_tmp_621 = and_263_cse | (fsm_output[4:2]!=3'b000);
  assign or_dcpl_53 = and_263_cse | (fsm_output[5]);
  assign and_dcpl_138 = (or_tmp_621 ^ (fsm_output[5])) & nor_441_cse;
  assign and_152_nl = (fsm_output[6]) & or_tmp_617;
  assign mux_550_nl = MUX_s_1_2_2(and_152_nl, (fsm_output[6]), or_731_cse);
  assign mux_551_nl = MUX_s_1_2_2(or_tmp_616, (~ mux_550_nl), fsm_output[5]);
  assign and_dcpl_143 = mux_551_nl & (~ (fsm_output[7]));
  assign and_dcpl_144 = ~((~(or_dcpl_51 | or_dcpl_53)) | (fsm_output[7]));
  assign mux_562_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp_620, and_263_cse);
  assign mux_563_nl = MUX_s_1_2_2((~ or_tmp_616), mux_562_nl, fsm_output[7]);
  assign mux_564_itm = MUX_s_1_2_2(mux_563_nl, (fsm_output[7]), fsm_output[5]);
  assign mux_tmp_554 = MUX_s_1_2_2(and_dcpl_35, and_280_cse, fsm_output[1]);
  assign mux_tmp_557 = MUX_s_1_2_2(and_dcpl_35, and_280_cse, or_731_cse);
  assign mux_571_nl = MUX_s_1_2_2(and_dcpl_35, and_280_cse, and_263_cse);
  assign mux_572_nl = MUX_s_1_2_2((~ or_tmp_616), mux_571_nl, fsm_output[7]);
  assign mux_573_itm = MUX_s_1_2_2(mux_572_nl, nor_tmp_29, fsm_output[5]);
  assign mux_574_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp_620, fsm_output[1]);
  assign and_157_nl = (fsm_output[7]) & mux_574_nl;
  assign mux_575_itm = MUX_s_1_2_2(mux_tmp_523, and_157_nl, fsm_output[5]);
  assign not_tmp_329 = ~((fsm_output[7]) | or_tmp_616);
  assign mux_579_nl = MUX_s_1_2_2((~ or_tmp_616), nor_tmp_64, fsm_output[7]);
  assign mux_580_itm = MUX_s_1_2_2(mux_579_nl, nor_tmp_29, fsm_output[5]);
  assign and_dcpl_145 = (~ (fsm_output[6])) & (fsm_output[0]);
  assign nor_504_nl = ~((fsm_output[3:2]!=2'b10));
  assign nor_505_nl = ~((fsm_output[3:2]!=2'b01));
  assign mux_584_nl = MUX_s_1_2_2(nor_504_nl, nor_505_nl, fsm_output[1]);
  assign and_dcpl_148 = mux_584_nl & (~ (fsm_output[4])) & and_dcpl_145 & and_dcpl_24;
  assign and_dcpl_150 = (fsm_output[4:3]==2'b10) & nor_474_cse;
  assign or_tmp_631 = (~ (fsm_output[7])) | (~ (fsm_output[3])) | (fsm_output[4]);
  assign or_699_nl = (fsm_output[7]) | (fsm_output[3]) | (~ (fsm_output[4]));
  assign mux_tmp_575 = MUX_s_1_2_2(or_699_nl, or_tmp_631, fsm_output[2]);
  assign or_tmp_634 = (fsm_output[6]) | mux_tmp_575;
  assign and_dcpl_153 = and_dcpl_99 & and_dcpl_33;
  assign and_dcpl_156 = and_dcpl_99 & and_dcpl_62;
  assign and_dcpl_159 = and_dcpl_99 & and_dcpl_49;
  assign and_dcpl_165 = ~((fsm_output[1]) | (fsm_output[7]) | (fsm_output[5]));
  assign and_dcpl_167 = and_dcpl_28 & (fsm_output[2]);
  assign and_dcpl_168 = and_dcpl_167 & and_dcpl_145;
  assign or_tmp_649 = ((fsm_output[3:2]==2'b11)) | (fsm_output[4]);
  assign and_tmp_15 = (fsm_output[6]) & or_tmp_649;
  assign or_tmp_651 = (fsm_output[6]) | or_tmp_649;
  assign and_tmp_16 = (fsm_output[6]) & or_dcpl;
  assign STAGE_LOOP_i_3_0_sva_mx0c1 = and_dcpl_35 & and_dcpl_32;
  assign VEC_LOOP_j_10_0_sva_9_0_mx0c0 = and_dcpl_29 & and_dcpl_52;
  assign COMP_LOOP_1_acc_8_itm_mx0c3 = and_dcpl_150 & and_dcpl_52;
  assign nand_27_nl = ~((fsm_output[6]) & (~ mux_tmp_575));
  assign mux_588_nl = MUX_s_1_2_2(nand_27_nl, or_tmp_634, fsm_output[1]);
  assign nor_192_nl = ~((fsm_output[5]) | mux_588_nl);
  assign or_696_nl = (fsm_output[7]) | (~ (fsm_output[3])) | (fsm_output[4]);
  assign mux_585_nl = MUX_s_1_2_2(or_tmp_631, or_696_nl, fsm_output[2]);
  assign nand_25_nl = ~((fsm_output[6]) & (~ mux_585_nl));
  assign mux_587_nl = MUX_s_1_2_2(or_tmp_634, nand_25_nl, fsm_output[1]);
  assign and_214_nl = (fsm_output[5]) & (~ mux_587_nl);
  assign COMP_LOOP_1_acc_8_itm_mx0c4 = MUX_s_1_2_2(nor_192_nl, and_214_nl, fsm_output[0]);
  assign COMP_LOOP_1_acc_8_itm_mx0c7 = and_dcpl_150 & and_dcpl_55;
  assign COMP_LOOP_1_acc_8_itm_mx0c10 = and_dcpl_153 & and_dcpl_41;
  assign COMP_LOOP_1_acc_8_itm_mx0c13 = and_dcpl_153 & and_dcpl_47;
  assign COMP_LOOP_1_acc_8_itm_mx0c16 = and_dcpl_156 & and_dcpl_61;
  assign COMP_LOOP_1_acc_8_itm_mx0c19 = and_dcpl_156 & and_dcpl_32;
  assign COMP_LOOP_1_acc_8_itm_mx0c22 = and_dcpl_159 & and_dcpl_70;
  assign COMP_LOOP_1_acc_8_itm_mx0c25 = and_dcpl_159 & and_dcpl_86;
  assign nand_143_nl = ~((fsm_output[2]) & (fsm_output[7]) & (fsm_output[3]) & (fsm_output[4]));
  assign or_136_nl = (fsm_output[2]) | (fsm_output[7]) | (fsm_output[3]) | (fsm_output[4]);
  assign mux_205_nl = MUX_s_1_2_2(nand_143_nl, or_136_nl, fsm_output[5]);
  assign or_137_nl = (fsm_output[0]) | mux_205_nl;
  assign mux_206_nl = MUX_s_1_2_2(or_137_nl, nand_tmp_2, fsm_output[6]);
  assign or_135_nl = (fsm_output[0]) | (fsm_output[5]) | mux_tmp_192;
  assign mux_204_nl = MUX_s_1_2_2(nand_tmp_2, or_135_nl, fsm_output[6]);
  assign mux_207_nl = MUX_s_1_2_2(mux_206_nl, mux_204_nl, fsm_output[1]);
  assign vec_rsc_0_0_i_d_d_pff = MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, COMP_LOOP_1_modulo_cmp_return_rsc_z,
      mux_207_nl);
  assign and_54_nl = and_dcpl_29 & and_dcpl_45;
  assign and_59_nl = and_dcpl_50 & and_dcpl_26;
  assign and_62_nl = and_dcpl_35 & and_dcpl_41;
  assign and_65_nl = and_dcpl_35 & and_dcpl_47;
  assign and_72_nl = and_dcpl_63 & and_dcpl_61;
  assign and_75_nl = and_dcpl_63 & and_dcpl_32;
  assign and_80_nl = and_dcpl_71 & and_dcpl_70;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_7_16_2((COMP_LOOP_1_acc_10_itm_10_1_1[9:3]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_1_cse_2_sva[9:3]), (COMP_LOOP_acc_10_cse_10_1_2_sva[9:3]),
      (COMP_LOOP_acc_11_psp_sva[8:2]), (COMP_LOOP_acc_10_cse_10_1_3_sva[9:3]), (COMP_LOOP_acc_1_cse_4_sva[9:3]),
      (COMP_LOOP_acc_10_cse_10_1_4_sva[9:3]), (COMP_LOOP_acc_13_psp_sva[7:1]), (COMP_LOOP_acc_10_cse_10_1_5_sva[9:3]),
      (COMP_LOOP_acc_1_cse_6_sva[9:3]), (COMP_LOOP_acc_10_cse_10_1_6_sva[9:3]), (COMP_LOOP_acc_14_psp_sva[8:2]),
      (COMP_LOOP_acc_10_cse_10_1_7_sva[9:3]), (COMP_LOOP_acc_1_cse_sva[9:3]), (COMP_LOOP_acc_10_cse_10_1_sva[9:3]),
      {and_dcpl_39 , and_dcpl_42 , and_54_nl , and_dcpl_48 , and_59_nl , and_dcpl_53
      , and_62_nl , and_dcpl_56 , and_65_nl , and_dcpl_59 , and_72_nl , and_dcpl_66
      , and_75_nl , and_dcpl_69 , and_80_nl , and_dcpl_74});
  assign and_83_nl = and_dcpl_63 & and_dcpl_41;
  assign and_84_nl = and_dcpl_29 & and_dcpl_55;
  assign and_85_nl = and_dcpl_63 & and_dcpl_47;
  assign and_86_nl = and_dcpl_63 & and_dcpl_58;
  assign and_87_nl = and_dcpl_35 & and_dcpl_52;
  assign and_88_nl = and_dcpl_35 & and_dcpl_38;
  assign and_89_nl = and_dcpl_35 & and_dcpl_55;
  assign and_90_nl = and_dcpl_35 & and_dcpl_45;
  assign and_92_nl = and_dcpl_83 & and_dcpl_70;
  assign and_93_nl = and_dcpl_63 & and_dcpl_73;
  assign and_95_nl = and_dcpl_83 & and_dcpl_86;
  assign and_97_nl = and_dcpl_83 & and_dcpl_88;
  assign and_98_nl = and_dcpl_71 & and_dcpl_61;
  assign and_99_nl = and_dcpl_71 & and_dcpl_65;
  assign and_100_nl = and_dcpl_71 & and_dcpl_32;
  assign and_101_nl = and_dcpl_71 & and_dcpl_68;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_7_16_2((COMP_LOOP_acc_10_cse_10_1_1_sva[9:3]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_10_cse_10_1_2_sva[9:3]), (COMP_LOOP_acc_1_cse_2_sva[9:3]),
      (COMP_LOOP_acc_10_cse_10_1_3_sva[9:3]), (COMP_LOOP_acc_11_psp_sva[8:2]), (COMP_LOOP_acc_10_cse_10_1_4_sva[9:3]),
      (COMP_LOOP_acc_1_cse_4_sva[9:3]), (COMP_LOOP_acc_10_cse_10_1_5_sva[9:3]), (COMP_LOOP_acc_13_psp_sva[7:1]),
      (COMP_LOOP_acc_10_cse_10_1_6_sva[9:3]), (COMP_LOOP_acc_1_cse_6_sva[9:3]), (COMP_LOOP_acc_10_cse_10_1_7_sva[9:3]),
      (COMP_LOOP_acc_14_psp_sva[8:2]), (COMP_LOOP_acc_10_cse_10_1_sva[9:3]), (COMP_LOOP_acc_1_cse_sva[9:3]),
      {and_83_nl , and_84_nl , and_85_nl , and_86_nl , and_87_nl , and_88_nl , and_89_nl
      , and_90_nl , and_92_nl , and_93_nl , and_95_nl , and_97_nl , and_98_nl , and_99_nl
      , and_100_nl , and_101_nl});
  assign nor_423_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b000) | not_tmp_135);
  assign nor_424_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b00) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_425_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b000) | (fsm_output[6])
      | nand_138_cse);
  assign mux_219_nl = MUX_s_1_2_2(nor_424_nl, nor_425_nl, fsm_output[0]);
  assign mux_220_nl = MUX_s_1_2_2(nor_423_nl, mux_219_nl, fsm_output[1]);
  assign and_259_nl = (fsm_output[7]) & mux_220_nl;
  assign nor_426_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b000) | not_tmp_135);
  assign nor_427_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b00) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_428_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b000) | (fsm_output[6])
      | nand_138_cse);
  assign mux_216_nl = MUX_s_1_2_2(nor_427_nl, nor_428_nl, fsm_output[0]);
  assign mux_217_nl = MUX_s_1_2_2(nor_426_nl, mux_216_nl, fsm_output[1]);
  assign nor_429_nl = ~((COMP_LOOP_acc_13_psp_sva[0]) | (fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[1])
      | (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | nand_138_cse);
  assign mux_218_nl = MUX_s_1_2_2(mux_217_nl, nor_429_nl, fsm_output[7]);
  assign mux_221_nl = MUX_s_1_2_2(and_259_nl, mux_218_nl, fsm_output[2]);
  assign nor_430_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b00) |
      (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_431_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b000) | not_tmp_134);
  assign nor_432_nl = ~((COMP_LOOP_acc_1_cse_sva[2:0]!=3'b000) | not_tmp_134);
  assign mux_212_nl = MUX_s_1_2_2(nor_431_nl, nor_432_nl, fsm_output[0]);
  assign nor_433_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b000) | (fsm_output[6])
      | nand_138_cse);
  assign nor_434_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b000) | (fsm_output[6])
      | nand_138_cse);
  assign mux_211_nl = MUX_s_1_2_2(nor_433_nl, nor_434_nl, fsm_output[0]);
  assign mux_213_nl = MUX_s_1_2_2(mux_212_nl, mux_211_nl, fsm_output[1]);
  assign mux_214_nl = MUX_s_1_2_2(nor_430_nl, mux_213_nl, fsm_output[7]);
  assign or_145_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b000) | not_tmp_134;
  assign or_143_nl = (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b000) | not_tmp_134;
  assign mux_209_nl = MUX_s_1_2_2(or_145_nl, or_143_nl, fsm_output[0]);
  assign or_141_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b000) | (fsm_output[6])
      | nand_138_cse;
  assign or_139_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b000) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_208_nl = MUX_s_1_2_2(or_141_nl, or_139_nl, fsm_output[0]);
  assign mux_210_nl = MUX_s_1_2_2(mux_209_nl, mux_208_nl, fsm_output[1]);
  assign nor_435_nl = ~((fsm_output[7]) | mux_210_nl);
  assign mux_215_nl = MUX_s_1_2_2(mux_214_nl, nor_435_nl, fsm_output[2]);
  assign vec_rsc_0_0_i_we_d_pff = MUX_s_1_2_2(mux_221_nl, mux_215_nl, fsm_output[5]);
  assign nor_410_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b000) | (fsm_output[4:2]!=3'b000));
  assign nor_411_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b000) | (fsm_output[4:2]!=3'b000));
  assign mux_234_nl = MUX_s_1_2_2(nor_410_nl, nor_411_nl, fsm_output[0]);
  assign and_258_nl = (fsm_output[1]) & mux_234_nl;
  assign nor_412_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b000) | (~ COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)
      | nand_137_cse);
  assign nor_413_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b000) | (fsm_output[0])
      | not_tmp_138);
  assign mux_233_nl = MUX_s_1_2_2(nor_412_nl, nor_413_nl, fsm_output[1]);
  assign mux_235_nl = MUX_s_1_2_2(and_258_nl, mux_233_nl, fsm_output[7]);
  assign nor_414_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b000)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_415_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b000) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_231_nl = MUX_s_1_2_2(nor_414_nl, nor_415_nl, fsm_output[1]);
  assign or_187_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b00) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | not_tmp_138;
  assign or_185_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b000) | not_tmp_138;
  assign mux_230_nl = MUX_s_1_2_2(or_187_nl, or_185_nl, fsm_output[0]);
  assign nor_416_nl = ~((fsm_output[1]) | mux_230_nl);
  assign mux_232_nl = MUX_s_1_2_2(mux_231_nl, nor_416_nl, fsm_output[7]);
  assign mux_236_nl = MUX_s_1_2_2(mux_235_nl, mux_232_nl, fsm_output[5]);
  assign nor_417_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b00) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[4:2]!=3'b000));
  assign nor_418_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b000) | (fsm_output[4:2]!=3'b000));
  assign mux_226_nl = MUX_s_1_2_2(nor_417_nl, nor_418_nl, fsm_output[0]);
  assign nor_419_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b000)
      | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm) | not_tmp_138);
  assign mux_227_nl = MUX_s_1_2_2(mux_226_nl, nor_419_nl, fsm_output[1]);
  assign nor_420_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b000) | (fsm_output[0])
      | not_tmp_138);
  assign nor_421_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b000)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_225_nl = MUX_s_1_2_2(nor_420_nl, nor_421_nl, fsm_output[1]);
  assign mux_228_nl = MUX_s_1_2_2(mux_227_nl, mux_225_nl, fsm_output[7]);
  assign or_174_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b000) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_173_nl = (VEC_LOOP_j_10_0_sva_9_0[1]) | (COMP_LOOP_acc_13_psp_sva[0])
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | (VEC_LOOP_j_10_0_sva_9_0[0]) |
      not_tmp_138;
  assign or_171_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b000) | not_tmp_138;
  assign mux_223_nl = MUX_s_1_2_2(or_173_nl, or_171_nl, fsm_output[0]);
  assign mux_224_nl = MUX_s_1_2_2(or_174_nl, mux_223_nl, fsm_output[1]);
  assign nor_422_nl = ~((fsm_output[7]) | mux_224_nl);
  assign mux_229_nl = MUX_s_1_2_2(mux_228_nl, nor_422_nl, fsm_output[5]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_236_nl,
      mux_229_nl, fsm_output[6]);
  assign nor_397_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:1]!=2'b00) | nand_130_cse);
  assign nor_398_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b00) | not_tmp_147);
  assign nor_399_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b001) | (fsm_output[6])
      | nand_138_cse);
  assign mux_249_nl = MUX_s_1_2_2(nor_398_nl, nor_399_nl, fsm_output[0]);
  assign mux_250_nl = MUX_s_1_2_2(nor_397_nl, mux_249_nl, fsm_output[1]);
  assign and_257_nl = (fsm_output[7]) & mux_250_nl;
  assign nor_400_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b001) | not_tmp_135);
  assign nor_401_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b00) | not_tmp_147);
  assign nor_402_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b001) | (fsm_output[6])
      | nand_138_cse);
  assign mux_246_nl = MUX_s_1_2_2(nor_401_nl, nor_402_nl, fsm_output[0]);
  assign mux_247_nl = MUX_s_1_2_2(nor_400_nl, mux_246_nl, fsm_output[1]);
  assign nor_403_nl = ~((COMP_LOOP_acc_13_psp_sva[0]) | (fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[1])
      | (fsm_output[0]) | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[6]) | nand_138_cse);
  assign mux_248_nl = MUX_s_1_2_2(mux_247_nl, nor_403_nl, fsm_output[7]);
  assign mux_251_nl = MUX_s_1_2_2(and_257_nl, mux_248_nl, fsm_output[2]);
  assign nor_404_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b00) |
      (fsm_output[0]) | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_405_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b001) | not_tmp_134);
  assign nor_406_nl = ~((COMP_LOOP_acc_1_cse_sva[2:0]!=3'b001) | not_tmp_134);
  assign mux_242_nl = MUX_s_1_2_2(nor_405_nl, nor_406_nl, fsm_output[0]);
  assign nor_407_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b001) | (fsm_output[6])
      | nand_138_cse);
  assign nor_408_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b001) | (fsm_output[6])
      | nand_138_cse);
  assign mux_241_nl = MUX_s_1_2_2(nor_407_nl, nor_408_nl, fsm_output[0]);
  assign mux_243_nl = MUX_s_1_2_2(mux_242_nl, mux_241_nl, fsm_output[1]);
  assign mux_244_nl = MUX_s_1_2_2(nor_404_nl, mux_243_nl, fsm_output[7]);
  assign or_204_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:1]!=2'b00) | nand_132_cse;
  assign or_202_nl = (COMP_LOOP_acc_1_cse_4_sva[2:1]!=2'b00) | nand_133_cse;
  assign mux_239_nl = MUX_s_1_2_2(or_204_nl, or_202_nl, fsm_output[0]);
  assign or_200_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b001) | (fsm_output[6])
      | nand_138_cse;
  assign or_198_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b001) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_238_nl = MUX_s_1_2_2(or_200_nl, or_198_nl, fsm_output[0]);
  assign mux_240_nl = MUX_s_1_2_2(mux_239_nl, mux_238_nl, fsm_output[1]);
  assign nor_409_nl = ~((fsm_output[7]) | mux_240_nl);
  assign mux_245_nl = MUX_s_1_2_2(mux_244_nl, nor_409_nl, fsm_output[2]);
  assign vec_rsc_0_1_i_we_d_pff = MUX_s_1_2_2(mux_251_nl, mux_245_nl, fsm_output[5]);
  assign nor_384_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b001) | (fsm_output[4:2]!=3'b000));
  assign nor_385_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b001) | (fsm_output[4:2]!=3'b000));
  assign mux_264_nl = MUX_s_1_2_2(nor_384_nl, nor_385_nl, fsm_output[0]);
  assign and_256_nl = (fsm_output[1]) & mux_264_nl;
  assign nor_386_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b001) | (~ COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)
      | nand_137_cse);
  assign nor_387_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b001) | (fsm_output[0])
      | not_tmp_138);
  assign mux_263_nl = MUX_s_1_2_2(nor_386_nl, nor_387_nl, fsm_output[1]);
  assign mux_265_nl = MUX_s_1_2_2(and_256_nl, mux_263_nl, fsm_output[7]);
  assign nor_388_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b00) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[4:2]!=3'b000));
  assign nor_389_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b001) | (fsm_output[4:2]!=3'b000));
  assign mux_260_nl = MUX_s_1_2_2(nor_388_nl, nor_389_nl, fsm_output[0]);
  assign nor_390_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b001)
      | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm) | not_tmp_138);
  assign mux_261_nl = MUX_s_1_2_2(mux_260_nl, nor_390_nl, fsm_output[1]);
  assign nor_391_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b001) | (fsm_output[0])
      | not_tmp_138);
  assign nor_392_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b001)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_259_nl = MUX_s_1_2_2(nor_391_nl, nor_392_nl, fsm_output[1]);
  assign mux_262_nl = MUX_s_1_2_2(mux_261_nl, mux_259_nl, fsm_output[7]);
  assign mux_266_nl = MUX_s_1_2_2(mux_265_nl, mux_262_nl, fsm_output[6]);
  assign nor_393_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b001)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_394_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b001) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_256_nl = MUX_s_1_2_2(nor_393_nl, nor_394_nl, fsm_output[1]);
  assign or_238_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b00) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | not_tmp_153;
  assign or_236_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:1]!=2'b00) | nand_126_cse;
  assign mux_255_nl = MUX_s_1_2_2(or_238_nl, or_236_nl, fsm_output[0]);
  assign nor_395_nl = ~((fsm_output[1]) | mux_255_nl);
  assign mux_257_nl = MUX_s_1_2_2(mux_256_nl, nor_395_nl, fsm_output[7]);
  assign or_233_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b001) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_232_nl = (VEC_LOOP_j_10_0_sva_9_0[1]) | (COMP_LOOP_acc_13_psp_sva[0])
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | not_tmp_153;
  assign or_230_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:1]!=2'b00) | nand_127_cse;
  assign mux_253_nl = MUX_s_1_2_2(or_232_nl, or_230_nl, fsm_output[0]);
  assign mux_254_nl = MUX_s_1_2_2(or_233_nl, mux_253_nl, fsm_output[1]);
  assign nor_396_nl = ~((fsm_output[7]) | mux_254_nl);
  assign mux_258_nl = MUX_s_1_2_2(mux_257_nl, nor_396_nl, fsm_output[6]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_266_nl,
      mux_258_nl, fsm_output[5]);
  assign nor_371_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b010) | not_tmp_135);
  assign nor_372_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b01) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_373_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b010) | (fsm_output[6])
      | nand_138_cse);
  assign mux_279_nl = MUX_s_1_2_2(nor_372_nl, nor_373_nl, fsm_output[0]);
  assign mux_280_nl = MUX_s_1_2_2(nor_371_nl, mux_279_nl, fsm_output[1]);
  assign and_255_nl = (fsm_output[7]) & mux_280_nl;
  assign nor_374_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b010) | not_tmp_135);
  assign nor_375_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b01) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_376_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b010) | (fsm_output[6])
      | nand_138_cse);
  assign mux_276_nl = MUX_s_1_2_2(nor_375_nl, nor_376_nl, fsm_output[0]);
  assign mux_277_nl = MUX_s_1_2_2(nor_374_nl, mux_276_nl, fsm_output[1]);
  assign nor_377_nl = ~((COMP_LOOP_acc_13_psp_sva[0]) | (fsm_output[1]) | (~ (VEC_LOOP_j_10_0_sva_9_0[1]))
      | (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | nand_138_cse);
  assign mux_278_nl = MUX_s_1_2_2(mux_277_nl, nor_377_nl, fsm_output[7]);
  assign mux_281_nl = MUX_s_1_2_2(and_255_nl, mux_278_nl, fsm_output[2]);
  assign nor_378_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b01) |
      (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_379_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b010) | not_tmp_134);
  assign nor_380_nl = ~((COMP_LOOP_acc_1_cse_sva[2:0]!=3'b010) | not_tmp_134);
  assign mux_272_nl = MUX_s_1_2_2(nor_379_nl, nor_380_nl, fsm_output[0]);
  assign nor_381_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b010) | (fsm_output[6])
      | nand_138_cse);
  assign nor_382_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b010) | (fsm_output[6])
      | nand_138_cse);
  assign mux_271_nl = MUX_s_1_2_2(nor_381_nl, nor_382_nl, fsm_output[0]);
  assign mux_273_nl = MUX_s_1_2_2(mux_272_nl, mux_271_nl, fsm_output[1]);
  assign mux_274_nl = MUX_s_1_2_2(nor_378_nl, mux_273_nl, fsm_output[7]);
  assign or_263_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b010) | not_tmp_134;
  assign or_261_nl = (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b010) | not_tmp_134;
  assign mux_269_nl = MUX_s_1_2_2(or_263_nl, or_261_nl, fsm_output[0]);
  assign or_259_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b010) | (fsm_output[6])
      | nand_138_cse;
  assign or_257_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b010) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_268_nl = MUX_s_1_2_2(or_259_nl, or_257_nl, fsm_output[0]);
  assign mux_270_nl = MUX_s_1_2_2(mux_269_nl, mux_268_nl, fsm_output[1]);
  assign nor_383_nl = ~((fsm_output[7]) | mux_270_nl);
  assign mux_275_nl = MUX_s_1_2_2(mux_274_nl, nor_383_nl, fsm_output[2]);
  assign vec_rsc_0_2_i_we_d_pff = MUX_s_1_2_2(mux_281_nl, mux_275_nl, fsm_output[5]);
  assign nor_358_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b010) | (fsm_output[4:2]!=3'b000));
  assign nor_359_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b010) | (fsm_output[4:2]!=3'b000));
  assign mux_294_nl = MUX_s_1_2_2(nor_358_nl, nor_359_nl, fsm_output[0]);
  assign and_254_nl = (fsm_output[1]) & mux_294_nl;
  assign nor_360_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b010) | (~ COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)
      | nand_137_cse);
  assign nor_361_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b010) | (fsm_output[0])
      | not_tmp_138);
  assign mux_293_nl = MUX_s_1_2_2(nor_360_nl, nor_361_nl, fsm_output[1]);
  assign mux_295_nl = MUX_s_1_2_2(and_254_nl, mux_293_nl, fsm_output[7]);
  assign nor_362_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b010)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_363_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b010) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_291_nl = MUX_s_1_2_2(nor_362_nl, nor_363_nl, fsm_output[1]);
  assign or_305_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b01) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | not_tmp_138;
  assign or_303_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b010) | not_tmp_138;
  assign mux_290_nl = MUX_s_1_2_2(or_305_nl, or_303_nl, fsm_output[0]);
  assign nor_364_nl = ~((fsm_output[1]) | mux_290_nl);
  assign mux_292_nl = MUX_s_1_2_2(mux_291_nl, nor_364_nl, fsm_output[7]);
  assign mux_296_nl = MUX_s_1_2_2(mux_295_nl, mux_292_nl, fsm_output[5]);
  assign nor_365_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b01) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[4:2]!=3'b000));
  assign nor_366_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b010) | (fsm_output[4:2]!=3'b000));
  assign mux_286_nl = MUX_s_1_2_2(nor_365_nl, nor_366_nl, fsm_output[0]);
  assign nor_367_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b010)
      | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm) | not_tmp_138);
  assign mux_287_nl = MUX_s_1_2_2(mux_286_nl, nor_367_nl, fsm_output[1]);
  assign nor_368_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b010) | (fsm_output[0])
      | not_tmp_138);
  assign nor_369_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b010)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_285_nl = MUX_s_1_2_2(nor_368_nl, nor_369_nl, fsm_output[1]);
  assign mux_288_nl = MUX_s_1_2_2(mux_287_nl, mux_285_nl, fsm_output[7]);
  assign or_292_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b010) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_291_nl = (~ (VEC_LOOP_j_10_0_sva_9_0[1])) | (COMP_LOOP_acc_13_psp_sva[0])
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | (VEC_LOOP_j_10_0_sva_9_0[0]) |
      not_tmp_138;
  assign or_289_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b010) | not_tmp_138;
  assign mux_283_nl = MUX_s_1_2_2(or_291_nl, or_289_nl, fsm_output[0]);
  assign mux_284_nl = MUX_s_1_2_2(or_292_nl, mux_283_nl, fsm_output[1]);
  assign nor_370_nl = ~((fsm_output[7]) | mux_284_nl);
  assign mux_289_nl = MUX_s_1_2_2(mux_288_nl, nor_370_nl, fsm_output[5]);
  assign vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_296_nl,
      mux_289_nl, fsm_output[6]);
  assign nor_345_nl = ~((fsm_output[0]) | (~ (fsm_output[5])) | (VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b011)
      | (fsm_output[6]) | (fsm_output[3]) | (fsm_output[4]));
  assign nor_346_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b011) | (fsm_output[6:3]!=4'b1111));
  assign nor_347_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2]) | (~((COMP_LOOP_acc_10_cse_10_1_7_sva[1:0]==2'b11)
      & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign nor_348_nl = ~((COMP_LOOP_acc_1_cse_sva[2:0]!=3'b011) | not_tmp_134);
  assign mux_308_nl = MUX_s_1_2_2(nor_347_nl, nor_348_nl, fsm_output[5]);
  assign mux_309_nl = MUX_s_1_2_2(nor_346_nl, mux_308_nl, fsm_output[0]);
  assign mux_310_nl = MUX_s_1_2_2(nor_345_nl, mux_309_nl, fsm_output[7]);
  assign nor_349_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b01) | not_tmp_147);
  assign nor_350_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b011) | (fsm_output[6])
      | nand_138_cse);
  assign mux_306_nl = MUX_s_1_2_2(nor_349_nl, nor_350_nl, fsm_output[5]);
  assign nor_351_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b011) | (fsm_output[6])
      | nand_138_cse);
  assign nor_352_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b011) | (fsm_output[6])
      | nand_138_cse);
  assign mux_305_nl = MUX_s_1_2_2(nor_351_nl, nor_352_nl, fsm_output[5]);
  assign mux_307_nl = MUX_s_1_2_2(mux_306_nl, mux_305_nl, fsm_output[0]);
  assign and_253_nl = (fsm_output[7]) & mux_307_nl;
  assign mux_311_nl = MUX_s_1_2_2(mux_310_nl, and_253_nl, fsm_output[1]);
  assign nor_353_nl = ~((~ (fsm_output[5])) | (COMP_LOOP_acc_10_cse_10_1_4_sva[2:1]!=2'b01)
      | nand_132_cse);
  assign nor_354_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b011) | not_tmp_134);
  assign nor_355_nl = ~((COMP_LOOP_acc_1_cse_4_sva[2]) | (~((COMP_LOOP_acc_1_cse_4_sva[1:0]==2'b11)
      & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign mux_301_nl = MUX_s_1_2_2(nor_354_nl, nor_355_nl, fsm_output[5]);
  assign mux_302_nl = MUX_s_1_2_2(nor_353_nl, mux_301_nl, fsm_output[0]);
  assign nor_356_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_13_psp_sva[0]) | (fsm_output[5])
      | (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b11) | (fsm_output[6]) | nand_138_cse);
  assign mux_303_nl = MUX_s_1_2_2(mux_302_nl, nor_356_nl, fsm_output[7]);
  assign or_321_nl = (COMP_LOOP_acc_11_psp_sva[1]) | (~((COMP_LOOP_acc_11_psp_sva[0])
      & (VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4])));
  assign or_320_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b011) | (fsm_output[6])
      | nand_138_cse;
  assign mux_299_nl = MUX_s_1_2_2(or_321_nl, or_320_nl, fsm_output[5]);
  assign or_318_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b011) | (fsm_output[6])
      | nand_138_cse;
  assign or_316_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b011) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_298_nl = MUX_s_1_2_2(or_318_nl, or_316_nl, fsm_output[5]);
  assign mux_300_nl = MUX_s_1_2_2(mux_299_nl, mux_298_nl, fsm_output[0]);
  assign nor_357_nl = ~((fsm_output[7]) | mux_300_nl);
  assign mux_304_nl = MUX_s_1_2_2(mux_303_nl, nor_357_nl, fsm_output[1]);
  assign vec_rsc_0_3_i_we_d_pff = MUX_s_1_2_2(mux_311_nl, mux_304_nl, fsm_output[2]);
  assign nor_332_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b011) | (fsm_output[4:2]!=3'b000));
  assign nor_333_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b011) | (fsm_output[4:2]!=3'b000));
  assign mux_324_nl = MUX_s_1_2_2(nor_332_nl, nor_333_nl, fsm_output[0]);
  assign and_252_nl = (fsm_output[1]) & mux_324_nl;
  assign nor_334_nl = ~((~((COMP_LOOP_acc_1_cse_6_sva[2:0]==3'b011) & COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm))
      | nand_137_cse);
  assign nor_335_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b011) | (fsm_output[0])
      | not_tmp_138);
  assign mux_323_nl = MUX_s_1_2_2(nor_334_nl, nor_335_nl, fsm_output[1]);
  assign mux_325_nl = MUX_s_1_2_2(and_252_nl, mux_323_nl, fsm_output[7]);
  assign nor_336_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b01) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[4:2]!=3'b000));
  assign nor_337_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b011) | (fsm_output[4:2]!=3'b000));
  assign mux_320_nl = MUX_s_1_2_2(nor_336_nl, nor_337_nl, fsm_output[0]);
  assign nor_338_nl = ~((~((fsm_output[0]) & (COMP_LOOP_acc_1_cse_4_sva[2:0]==3'b011)
      & COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)) | not_tmp_138);
  assign mux_321_nl = MUX_s_1_2_2(mux_320_nl, nor_338_nl, fsm_output[1]);
  assign nor_339_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b011) | (fsm_output[0])
      | not_tmp_138);
  assign nor_340_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b011)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_319_nl = MUX_s_1_2_2(nor_339_nl, nor_340_nl, fsm_output[1]);
  assign mux_322_nl = MUX_s_1_2_2(mux_321_nl, mux_319_nl, fsm_output[7]);
  assign mux_326_nl = MUX_s_1_2_2(mux_325_nl, mux_322_nl, fsm_output[6]);
  assign nor_341_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b011)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_342_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b011) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_316_nl = MUX_s_1_2_2(nor_341_nl, nor_342_nl, fsm_output[1]);
  assign or_351_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b01) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | not_tmp_153;
  assign or_349_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2]) | (~((COMP_LOOP_acc_10_cse_10_1_7_sva[1:0]==2'b11)
      & (fsm_output[4:2]==3'b111)));
  assign mux_315_nl = MUX_s_1_2_2(or_351_nl, or_349_nl, fsm_output[0]);
  assign nor_343_nl = ~((fsm_output[1]) | mux_315_nl);
  assign mux_317_nl = MUX_s_1_2_2(mux_316_nl, nor_343_nl, fsm_output[7]);
  assign or_347_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b011) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_346_nl = (~ (VEC_LOOP_j_10_0_sva_9_0[1])) | (COMP_LOOP_acc_13_psp_sva[0])
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | not_tmp_153;
  assign or_344_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2]) | (~((COMP_LOOP_acc_10_cse_10_1_5_sva[1:0]==2'b11)
      & (fsm_output[4:2]==3'b111)));
  assign mux_313_nl = MUX_s_1_2_2(or_346_nl, or_344_nl, fsm_output[0]);
  assign mux_314_nl = MUX_s_1_2_2(or_347_nl, mux_313_nl, fsm_output[1]);
  assign nor_344_nl = ~((fsm_output[7]) | mux_314_nl);
  assign mux_318_nl = MUX_s_1_2_2(mux_317_nl, nor_344_nl, fsm_output[6]);
  assign vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_326_nl,
      mux_318_nl, fsm_output[5]);
  assign nor_319_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b100) | not_tmp_135);
  assign nor_320_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b10) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_321_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b100) | (fsm_output[6])
      | nand_138_cse);
  assign mux_339_nl = MUX_s_1_2_2(nor_320_nl, nor_321_nl, fsm_output[0]);
  assign mux_340_nl = MUX_s_1_2_2(nor_319_nl, mux_339_nl, fsm_output[1]);
  assign and_251_nl = (fsm_output[7]) & mux_340_nl;
  assign nor_322_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b00) | nand_97_cse);
  assign nor_323_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b10) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_324_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b100) | (fsm_output[6])
      | nand_138_cse);
  assign mux_336_nl = MUX_s_1_2_2(nor_323_nl, nor_324_nl, fsm_output[0]);
  assign mux_337_nl = MUX_s_1_2_2(nor_322_nl, mux_336_nl, fsm_output[1]);
  assign nor_325_nl = ~((~ (COMP_LOOP_acc_13_psp_sva[0])) | (fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[1])
      | (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | nand_138_cse);
  assign mux_338_nl = MUX_s_1_2_2(mux_337_nl, nor_325_nl, fsm_output[7]);
  assign mux_341_nl = MUX_s_1_2_2(and_251_nl, mux_338_nl, fsm_output[2]);
  assign nor_326_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b10) |
      (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_327_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b00) | nand_98_cse);
  assign nor_328_nl = ~((COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) | nand_99_cse);
  assign mux_332_nl = MUX_s_1_2_2(nor_327_nl, nor_328_nl, fsm_output[0]);
  assign nor_329_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b100) | (fsm_output[6])
      | nand_138_cse);
  assign nor_330_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b100) | (fsm_output[6])
      | nand_138_cse);
  assign mux_331_nl = MUX_s_1_2_2(nor_329_nl, nor_330_nl, fsm_output[0]);
  assign mux_333_nl = MUX_s_1_2_2(mux_332_nl, mux_331_nl, fsm_output[1]);
  assign mux_334_nl = MUX_s_1_2_2(nor_326_nl, mux_333_nl, fsm_output[7]);
  assign or_376_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b100) | not_tmp_134;
  assign or_374_nl = (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b100) | not_tmp_134;
  assign mux_329_nl = MUX_s_1_2_2(or_376_nl, or_374_nl, fsm_output[0]);
  assign or_372_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b100) | (fsm_output[6])
      | nand_138_cse;
  assign or_370_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b100) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_328_nl = MUX_s_1_2_2(or_372_nl, or_370_nl, fsm_output[0]);
  assign mux_330_nl = MUX_s_1_2_2(mux_329_nl, mux_328_nl, fsm_output[1]);
  assign nor_331_nl = ~((fsm_output[7]) | mux_330_nl);
  assign mux_335_nl = MUX_s_1_2_2(mux_334_nl, nor_331_nl, fsm_output[2]);
  assign vec_rsc_0_4_i_we_d_pff = MUX_s_1_2_2(mux_341_nl, mux_335_nl, fsm_output[5]);
  assign nor_306_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b100) | (fsm_output[4:2]!=3'b000));
  assign nor_307_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b100) | (fsm_output[4:2]!=3'b000));
  assign mux_354_nl = MUX_s_1_2_2(nor_306_nl, nor_307_nl, fsm_output[0]);
  assign and_250_nl = (fsm_output[1]) & mux_354_nl;
  assign nor_308_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b100) | (~ COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)
      | nand_137_cse);
  assign nor_309_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b100) | (fsm_output[0])
      | not_tmp_138);
  assign mux_353_nl = MUX_s_1_2_2(nor_308_nl, nor_309_nl, fsm_output[1]);
  assign mux_355_nl = MUX_s_1_2_2(and_250_nl, mux_353_nl, fsm_output[7]);
  assign nor_310_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b100)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_311_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b100) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_351_nl = MUX_s_1_2_2(nor_310_nl, nor_311_nl, fsm_output[1]);
  assign or_418_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b10) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | not_tmp_138;
  assign or_416_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b100) | not_tmp_138;
  assign mux_350_nl = MUX_s_1_2_2(or_418_nl, or_416_nl, fsm_output[0]);
  assign nor_312_nl = ~((fsm_output[1]) | mux_350_nl);
  assign mux_352_nl = MUX_s_1_2_2(mux_351_nl, nor_312_nl, fsm_output[7]);
  assign mux_356_nl = MUX_s_1_2_2(mux_355_nl, mux_352_nl, fsm_output[5]);
  assign nor_313_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b10) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[4:2]!=3'b000));
  assign nor_314_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b100) | (fsm_output[4:2]!=3'b000));
  assign mux_346_nl = MUX_s_1_2_2(nor_313_nl, nor_314_nl, fsm_output[0]);
  assign nor_315_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b100)
      | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm) | not_tmp_138);
  assign mux_347_nl = MUX_s_1_2_2(mux_346_nl, nor_315_nl, fsm_output[1]);
  assign nor_316_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b100) | (fsm_output[0])
      | not_tmp_138);
  assign nor_317_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b100)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_345_nl = MUX_s_1_2_2(nor_316_nl, nor_317_nl, fsm_output[1]);
  assign mux_348_nl = MUX_s_1_2_2(mux_347_nl, mux_345_nl, fsm_output[7]);
  assign or_405_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b100) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_404_nl = (VEC_LOOP_j_10_0_sva_9_0[1]) | (~ (COMP_LOOP_acc_13_psp_sva[0]))
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | (VEC_LOOP_j_10_0_sva_9_0[0]) |
      not_tmp_138;
  assign or_402_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b100) | not_tmp_138;
  assign mux_343_nl = MUX_s_1_2_2(or_404_nl, or_402_nl, fsm_output[0]);
  assign mux_344_nl = MUX_s_1_2_2(or_405_nl, mux_343_nl, fsm_output[1]);
  assign nor_318_nl = ~((fsm_output[7]) | mux_344_nl);
  assign mux_349_nl = MUX_s_1_2_2(mux_348_nl, nor_318_nl, fsm_output[5]);
  assign vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_356_nl,
      mux_349_nl, fsm_output[6]);
  assign nor_293_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:1]!=2'b10) | nand_130_cse);
  assign nor_294_nl = ~((COMP_LOOP_acc_14_psp_sva[0]) | (~((COMP_LOOP_acc_14_psp_sva[1])
      & (VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign nor_295_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b101) | (fsm_output[6])
      | nand_138_cse);
  assign mux_369_nl = MUX_s_1_2_2(nor_294_nl, nor_295_nl, fsm_output[0]);
  assign mux_370_nl = MUX_s_1_2_2(nor_293_nl, mux_369_nl, fsm_output[1]);
  assign and_249_nl = (fsm_output[7]) & mux_370_nl;
  assign nor_296_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b01) | nand_97_cse);
  assign nor_297_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b10) | not_tmp_147);
  assign nor_298_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b101) | (fsm_output[6])
      | nand_138_cse);
  assign mux_366_nl = MUX_s_1_2_2(nor_297_nl, nor_298_nl, fsm_output[0]);
  assign mux_367_nl = MUX_s_1_2_2(nor_296_nl, mux_366_nl, fsm_output[1]);
  assign nor_299_nl = ~((~ (COMP_LOOP_acc_13_psp_sva[0])) | (fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[1])
      | (fsm_output[0]) | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[6]) | nand_138_cse);
  assign mux_368_nl = MUX_s_1_2_2(mux_367_nl, nor_299_nl, fsm_output[7]);
  assign mux_371_nl = MUX_s_1_2_2(and_249_nl, mux_368_nl, fsm_output[2]);
  assign nor_300_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b10) |
      (fsm_output[0]) | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_301_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b01) | nand_98_cse);
  assign nor_302_nl = ~((COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) | nand_99_cse);
  assign mux_362_nl = MUX_s_1_2_2(nor_301_nl, nor_302_nl, fsm_output[0]);
  assign nor_303_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b101) | (fsm_output[6])
      | nand_138_cse);
  assign nor_304_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b101) | (fsm_output[6])
      | nand_138_cse);
  assign mux_361_nl = MUX_s_1_2_2(nor_303_nl, nor_304_nl, fsm_output[0]);
  assign mux_363_nl = MUX_s_1_2_2(mux_362_nl, mux_361_nl, fsm_output[1]);
  assign mux_364_nl = MUX_s_1_2_2(nor_300_nl, mux_363_nl, fsm_output[7]);
  assign or_434_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[1]) | (~((COMP_LOOP_acc_10_cse_10_1_4_sva[2])
      & (COMP_LOOP_acc_10_cse_10_1_4_sva[0]) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[4])));
  assign or_433_nl = (COMP_LOOP_acc_1_cse_4_sva[2:1]!=2'b10) | nand_133_cse;
  assign mux_359_nl = MUX_s_1_2_2(or_434_nl, or_433_nl, fsm_output[0]);
  assign or_431_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b101) | (fsm_output[6])
      | nand_138_cse;
  assign or_429_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b101) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_358_nl = MUX_s_1_2_2(or_431_nl, or_429_nl, fsm_output[0]);
  assign mux_360_nl = MUX_s_1_2_2(mux_359_nl, mux_358_nl, fsm_output[1]);
  assign nor_305_nl = ~((fsm_output[7]) | mux_360_nl);
  assign mux_365_nl = MUX_s_1_2_2(mux_364_nl, nor_305_nl, fsm_output[2]);
  assign vec_rsc_0_5_i_we_d_pff = MUX_s_1_2_2(mux_371_nl, mux_365_nl, fsm_output[5]);
  assign nor_280_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b101) | (fsm_output[4:2]!=3'b000));
  assign nor_281_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b101) | (fsm_output[4:2]!=3'b000));
  assign mux_384_nl = MUX_s_1_2_2(nor_280_nl, nor_281_nl, fsm_output[0]);
  assign and_248_nl = (fsm_output[1]) & mux_384_nl;
  assign nor_282_nl = ~((~((COMP_LOOP_acc_1_cse_6_sva[2:0]==3'b101) & COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm))
      | nand_137_cse);
  assign nor_283_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b101) | (fsm_output[0])
      | not_tmp_138);
  assign mux_383_nl = MUX_s_1_2_2(nor_282_nl, nor_283_nl, fsm_output[1]);
  assign mux_385_nl = MUX_s_1_2_2(and_248_nl, mux_383_nl, fsm_output[7]);
  assign nor_284_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b10) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[4:2]!=3'b000));
  assign nor_285_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b101) | (fsm_output[4:2]!=3'b000));
  assign mux_380_nl = MUX_s_1_2_2(nor_284_nl, nor_285_nl, fsm_output[0]);
  assign nor_286_nl = ~((~((fsm_output[0]) & (COMP_LOOP_acc_1_cse_4_sva[2:0]==3'b101)
      & COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)) | not_tmp_138);
  assign mux_381_nl = MUX_s_1_2_2(mux_380_nl, nor_286_nl, fsm_output[1]);
  assign nor_287_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b101) | (fsm_output[0])
      | not_tmp_138);
  assign nor_288_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b101)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_379_nl = MUX_s_1_2_2(nor_287_nl, nor_288_nl, fsm_output[1]);
  assign mux_382_nl = MUX_s_1_2_2(mux_381_nl, mux_379_nl, fsm_output[7]);
  assign mux_386_nl = MUX_s_1_2_2(mux_385_nl, mux_382_nl, fsm_output[6]);
  assign nor_289_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b101)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_290_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b101) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_376_nl = MUX_s_1_2_2(nor_289_nl, nor_290_nl, fsm_output[1]);
  assign or_467_nl = (COMP_LOOP_acc_14_psp_sva[1:0]!=2'b10) | (~ COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)
      | not_tmp_153;
  assign or_465_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:1]!=2'b10) | nand_126_cse;
  assign mux_375_nl = MUX_s_1_2_2(or_467_nl, or_465_nl, fsm_output[0]);
  assign nor_291_nl = ~((fsm_output[1]) | mux_375_nl);
  assign mux_377_nl = MUX_s_1_2_2(mux_376_nl, nor_291_nl, fsm_output[7]);
  assign or_462_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b101) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_461_nl = (VEC_LOOP_j_10_0_sva_9_0[1]) | (~ (COMP_LOOP_acc_13_psp_sva[0]))
      | (~ COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) | not_tmp_153;
  assign or_459_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:1]!=2'b10) | nand_127_cse;
  assign mux_373_nl = MUX_s_1_2_2(or_461_nl, or_459_nl, fsm_output[0]);
  assign mux_374_nl = MUX_s_1_2_2(or_462_nl, mux_373_nl, fsm_output[1]);
  assign nor_292_nl = ~((fsm_output[7]) | mux_374_nl);
  assign mux_378_nl = MUX_s_1_2_2(mux_377_nl, nor_292_nl, fsm_output[6]);
  assign vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_386_nl,
      mux_378_nl, fsm_output[5]);
  assign nor_267_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b110) | not_tmp_135);
  assign nor_268_nl = ~((COMP_LOOP_acc_14_psp_sva[1:0]!=2'b11) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_269_nl = ~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b110) | (fsm_output[6])
      | nand_138_cse);
  assign mux_399_nl = MUX_s_1_2_2(nor_268_nl, nor_269_nl, fsm_output[0]);
  assign mux_400_nl = MUX_s_1_2_2(nor_267_nl, mux_399_nl, fsm_output[1]);
  assign and_247_nl = (fsm_output[7]) & mux_400_nl;
  assign nor_270_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[0]) | (~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:1]==2'b11)
      & (fsm_output[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign nor_271_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b11) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | not_tmp_134);
  assign nor_272_nl = ~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]!=3'b110) | (fsm_output[6])
      | nand_138_cse);
  assign mux_396_nl = MUX_s_1_2_2(nor_271_nl, nor_272_nl, fsm_output[0]);
  assign mux_397_nl = MUX_s_1_2_2(nor_270_nl, mux_396_nl, fsm_output[1]);
  assign nor_273_nl = ~((~ (COMP_LOOP_acc_13_psp_sva[0])) | (fsm_output[1]) | (~
      (VEC_LOOP_j_10_0_sva_9_0[1])) | (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | (fsm_output[6]) | nand_138_cse);
  assign mux_398_nl = MUX_s_1_2_2(mux_397_nl, nor_273_nl, fsm_output[7]);
  assign mux_401_nl = MUX_s_1_2_2(and_247_nl, mux_398_nl, fsm_output[2]);
  assign nor_274_nl = ~((fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:1]!=2'b11) |
      (fsm_output[0]) | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[6]) | (fsm_output[3])
      | (fsm_output[4]));
  assign nor_275_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[0]) | (~((COMP_LOOP_acc_10_cse_10_1_sva[2:1]==2'b11)
      & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign nor_276_nl = ~((COMP_LOOP_acc_1_cse_sva[0]) | (~((COMP_LOOP_acc_1_cse_sva[2:1]==2'b11)
      & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]))));
  assign mux_392_nl = MUX_s_1_2_2(nor_275_nl, nor_276_nl, fsm_output[0]);
  assign nor_277_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b110) | (fsm_output[6])
      | nand_138_cse);
  assign nor_278_nl = ~((COMP_LOOP_acc_1_cse_6_sva[2:0]!=3'b110) | (fsm_output[6])
      | nand_138_cse);
  assign mux_391_nl = MUX_s_1_2_2(nor_277_nl, nor_278_nl, fsm_output[0]);
  assign mux_393_nl = MUX_s_1_2_2(mux_392_nl, mux_391_nl, fsm_output[1]);
  assign mux_394_nl = MUX_s_1_2_2(nor_274_nl, mux_393_nl, fsm_output[7]);
  assign or_492_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b110) | not_tmp_134;
  assign or_490_nl = (COMP_LOOP_acc_1_cse_4_sva[2:0]!=3'b110) | not_tmp_134;
  assign mux_389_nl = MUX_s_1_2_2(or_492_nl, or_490_nl, fsm_output[0]);
  assign or_488_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b110) | (fsm_output[6])
      | nand_138_cse;
  assign or_486_nl = (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b110) | (fsm_output[6]) |
      nand_138_cse;
  assign mux_388_nl = MUX_s_1_2_2(or_488_nl, or_486_nl, fsm_output[0]);
  assign mux_390_nl = MUX_s_1_2_2(mux_389_nl, mux_388_nl, fsm_output[1]);
  assign nor_279_nl = ~((fsm_output[7]) | mux_390_nl);
  assign mux_395_nl = MUX_s_1_2_2(mux_394_nl, nor_279_nl, fsm_output[2]);
  assign vec_rsc_0_6_i_we_d_pff = MUX_s_1_2_2(mux_401_nl, mux_395_nl, fsm_output[5]);
  assign nor_254_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b110) | (fsm_output[4:2]!=3'b000));
  assign nor_255_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b110) | (fsm_output[4:2]!=3'b000));
  assign mux_414_nl = MUX_s_1_2_2(nor_254_nl, nor_255_nl, fsm_output[0]);
  assign and_246_nl = (fsm_output[1]) & mux_414_nl;
  assign nor_256_nl = ~((~((COMP_LOOP_acc_1_cse_6_sva[2:0]==3'b110) & COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm))
      | nand_137_cse);
  assign nor_257_nl = ~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]!=3'b110) | (fsm_output[0])
      | not_tmp_138);
  assign mux_413_nl = MUX_s_1_2_2(nor_256_nl, nor_257_nl, fsm_output[1]);
  assign mux_415_nl = MUX_s_1_2_2(and_246_nl, mux_413_nl, fsm_output[7]);
  assign nor_258_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b110)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_259_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b110) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_411_nl = MUX_s_1_2_2(nor_258_nl, nor_259_nl, fsm_output[1]);
  assign or_531_nl = (~((COMP_LOOP_acc_14_psp_sva[1:0]==2'b11) & COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm
      & (~ (VEC_LOOP_j_10_0_sva_9_0[0])))) | not_tmp_138;
  assign or_529_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]!=3'b110) | not_tmp_138;
  assign mux_410_nl = MUX_s_1_2_2(or_531_nl, or_529_nl, fsm_output[0]);
  assign nor_260_nl = ~((fsm_output[1]) | mux_410_nl);
  assign mux_412_nl = MUX_s_1_2_2(mux_411_nl, nor_260_nl, fsm_output[7]);
  assign mux_416_nl = MUX_s_1_2_2(mux_415_nl, mux_412_nl, fsm_output[5]);
  assign nor_261_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b11) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (VEC_LOOP_j_10_0_sva_9_0[0]) | (fsm_output[4:2]!=3'b000));
  assign nor_262_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b110) | (fsm_output[4:2]!=3'b000));
  assign mux_406_nl = MUX_s_1_2_2(nor_261_nl, nor_262_nl, fsm_output[0]);
  assign nor_263_nl = ~((~((fsm_output[0]) & (COMP_LOOP_acc_1_cse_4_sva[2:0]==3'b110)
      & COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)) | not_tmp_138);
  assign mux_407_nl = MUX_s_1_2_2(mux_406_nl, nor_263_nl, fsm_output[1]);
  assign nor_264_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]!=3'b110) | (fsm_output[0])
      | not_tmp_138);
  assign nor_265_nl = ~((~ COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) | (COMP_LOOP_acc_1_cse_sva[2:0]!=3'b110)
      | (~ (fsm_output[0])) | (fsm_output[2]) | nand_138_cse);
  assign mux_405_nl = MUX_s_1_2_2(nor_264_nl, nor_265_nl, fsm_output[1]);
  assign mux_408_nl = MUX_s_1_2_2(mux_407_nl, mux_405_nl, fsm_output[7]);
  assign or_518_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b110) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_517_nl = (~((VEC_LOOP_j_10_0_sva_9_0[1]) & (COMP_LOOP_acc_13_psp_sva[0])
      & COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm & (~ (VEC_LOOP_j_10_0_sva_9_0[0]))))
      | not_tmp_138;
  assign or_515_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]!=3'b110) | not_tmp_138;
  assign mux_403_nl = MUX_s_1_2_2(or_517_nl, or_515_nl, fsm_output[0]);
  assign mux_404_nl = MUX_s_1_2_2(or_518_nl, mux_403_nl, fsm_output[1]);
  assign nor_266_nl = ~((fsm_output[7]) | mux_404_nl);
  assign mux_409_nl = MUX_s_1_2_2(mux_408_nl, nor_266_nl, fsm_output[5]);
  assign vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_416_nl,
      mux_409_nl, fsm_output[6]);
  assign nor_247_nl = ~((~ (fsm_output[5])) | (fsm_output[1]) | (VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b111)
      | (fsm_output[6]) | (fsm_output[3]) | (fsm_output[4]));
  assign and_239_nl = (COMP_LOOP_acc_14_psp_sva[1:0]==2'b11) & (fsm_output[1]) &
      (VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]);
  assign and_240_nl = (COMP_LOOP_acc_10_cse_10_1_sva[2:0]==3'b111) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]);
  assign nor_248_nl = ~((~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse);
  assign mux_428_nl = MUX_s_1_2_2(and_240_nl, nor_248_nl, fsm_output[1]);
  assign mux_429_nl = MUX_s_1_2_2(and_239_nl, mux_428_nl, fsm_output[5]);
  assign mux_430_nl = MUX_s_1_2_2(nor_247_nl, mux_429_nl, fsm_output[7]);
  assign and_242_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]==3'b111) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]);
  assign nor_249_nl = ~((~((COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse);
  assign mux_426_nl = MUX_s_1_2_2(and_242_nl, nor_249_nl, fsm_output[1]);
  assign and_243_nl = (COMP_LOOP_acc_1_cse_sva[2:0]==3'b111) & (fsm_output[6]) &
      (fsm_output[3]) & (fsm_output[4]);
  assign nor_250_nl = ~((~((COMP_LOOP_acc_1_cse_6_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse);
  assign mux_425_nl = MUX_s_1_2_2(and_243_nl, nor_250_nl, fsm_output[1]);
  assign mux_427_nl = MUX_s_1_2_2(mux_426_nl, mux_425_nl, fsm_output[5]);
  assign and_241_nl = (fsm_output[7]) & mux_427_nl;
  assign mux_431_nl = MUX_s_1_2_2(mux_430_nl, and_241_nl, fsm_output[0]);
  assign and_244_nl = (COMP_LOOP_acc_11_psp_sva[1:0]==2'b11) & (fsm_output[1]) &
      (VEC_LOOP_j_10_0_sva_9_0[0]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]);
  assign and_245_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]==3'b111) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]);
  assign nor_251_nl = ~((~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse);
  assign mux_421_nl = MUX_s_1_2_2(and_245_nl, nor_251_nl, fsm_output[1]);
  assign mux_422_nl = MUX_s_1_2_2(and_244_nl, mux_421_nl, fsm_output[5]);
  assign nor_252_nl = ~((fsm_output[5]) | (~ (COMP_LOOP_acc_13_psp_sva[0])) | (fsm_output[1])
      | (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b11) | (fsm_output[6]) | nand_138_cse);
  assign mux_423_nl = MUX_s_1_2_2(mux_422_nl, nor_252_nl, fsm_output[7]);
  assign nand_58_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b111) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]));
  assign or_544_nl = (~((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse;
  assign mux_419_nl = MUX_s_1_2_2(nand_58_nl, or_544_nl, fsm_output[1]);
  assign nand_60_nl = ~((COMP_LOOP_acc_1_cse_4_sva[2:0]==3'b111) & (fsm_output[6])
      & (fsm_output[3]) & (fsm_output[4]));
  assign or_542_nl = (~((COMP_LOOP_acc_1_cse_2_sva[2:0]==3'b111) & (~ (fsm_output[6]))))
      | nand_138_cse;
  assign mux_418_nl = MUX_s_1_2_2(nand_60_nl, or_542_nl, fsm_output[1]);
  assign mux_420_nl = MUX_s_1_2_2(mux_419_nl, mux_418_nl, fsm_output[5]);
  assign nor_253_nl = ~((fsm_output[7]) | mux_420_nl);
  assign mux_424_nl = MUX_s_1_2_2(mux_423_nl, nor_253_nl, fsm_output[0]);
  assign vec_rsc_0_7_i_we_d_pff = MUX_s_1_2_2(mux_431_nl, mux_424_nl, fsm_output[2]);
  assign nor_233_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b111) | (fsm_output[4:2]!=3'b000));
  assign nor_234_nl = ~((VEC_LOOP_j_10_0_sva_9_0[2:0]!=3'b111) | (fsm_output[4:2]!=3'b000));
  assign mux_444_nl = MUX_s_1_2_2(nor_233_nl, nor_234_nl, fsm_output[0]);
  assign and_237_nl = (fsm_output[1]) & mux_444_nl;
  assign nor_235_nl = ~((COMP_LOOP_acc_11_psp_sva[1:0]!=2'b11) | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm)
      | (~ (VEC_LOOP_j_10_0_sva_9_0[0])) | (fsm_output[4:2]!=3'b000));
  assign nor_236_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b111) | (fsm_output[4:2]!=3'b000));
  assign mux_442_nl = MUX_s_1_2_2(nor_235_nl, nor_236_nl, fsm_output[0]);
  assign nor_237_nl = ~((~((fsm_output[0]) & (COMP_LOOP_acc_1_cse_4_sva[2:0]==3'b111)
      & COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)) | not_tmp_138);
  assign mux_443_nl = MUX_s_1_2_2(mux_442_nl, nor_237_nl, fsm_output[1]);
  assign mux_445_nl = MUX_s_1_2_2(and_237_nl, mux_443_nl, fsm_output[6]);
  assign nor_238_nl = ~((~((COMP_LOOP_acc_1_cse_6_sva[2:0]==3'b111) & COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm))
      | nand_137_cse);
  assign nor_239_nl = ~((~((COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]==3'b111) & (~ (fsm_output[0]))))
      | not_tmp_138);
  assign mux_440_nl = MUX_s_1_2_2(nor_238_nl, nor_239_nl, fsm_output[1]);
  assign nor_240_nl = ~((~((COMP_LOOP_acc_10_cse_10_1_sva[2:0]==3'b111) & (~ (fsm_output[0]))))
      | not_tmp_138);
  assign nor_241_nl = ~((~(COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm & (COMP_LOOP_acc_1_cse_sva[2:0]==3'b111)
      & (fsm_output[0]) & (~ (fsm_output[2])))) | nand_138_cse);
  assign mux_439_nl = MUX_s_1_2_2(nor_240_nl, nor_241_nl, fsm_output[1]);
  assign mux_441_nl = MUX_s_1_2_2(mux_440_nl, mux_439_nl, fsm_output[6]);
  assign mux_446_nl = MUX_s_1_2_2(mux_445_nl, mux_441_nl, fsm_output[7]);
  assign nor_242_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_1_cse_2_sva[2:0]!=3'b111)
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (fsm_output[4:2]!=3'b000));
  assign nor_243_nl = ~((COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]!=3'b111) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign mux_436_nl = MUX_s_1_2_2(nor_242_nl, nor_243_nl, fsm_output[1]);
  assign nor_244_nl = ~((COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]!=3'b111) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign nor_245_nl = ~((~((VEC_LOOP_j_10_0_sva_9_0[1]) & (COMP_LOOP_acc_13_psp_sva[0])
      & COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm)) | not_tmp_153);
  assign and_238_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]==3'b111) & (fsm_output[4:2]==3'b111);
  assign mux_434_nl = MUX_s_1_2_2(nor_245_nl, and_238_nl, fsm_output[0]);
  assign mux_435_nl = MUX_s_1_2_2(nor_244_nl, mux_434_nl, fsm_output[1]);
  assign mux_437_nl = MUX_s_1_2_2(mux_436_nl, mux_435_nl, fsm_output[6]);
  assign or_728_nl = (~((COMP_LOOP_acc_14_psp_sva[1:0]==2'b11) & COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm))
      | not_tmp_153;
  assign nand_51_nl = ~((COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]==3'b111) & (fsm_output[4:2]==3'b111));
  assign mux_433_nl = MUX_s_1_2_2(or_728_nl, nand_51_nl, fsm_output[0]);
  assign nor_246_nl = ~((fsm_output[6]) | (fsm_output[1]) | mux_433_nl);
  assign mux_438_nl = MUX_s_1_2_2(mux_437_nl, nor_246_nl, fsm_output[7]);
  assign vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(mux_446_nl,
      mux_438_nl, fsm_output[5]);
  assign COMP_LOOP_tmp_or_16_cse = and_dcpl_42 | and_dcpl_96;
  assign nl_COMP_LOOP_1_tmp_mul_nl = (z_out_1[6:0]) * COMP_LOOP_k_10_3_sva_6_0;
  assign COMP_LOOP_1_tmp_mul_nl = nl_COMP_LOOP_1_tmp_mul_nl[6:0];
  assign twiddle_rsc_0_0_i_radr_d = MUX1HOT_v_7_7_2(COMP_LOOP_1_tmp_mul_nl, (z_out_4[9:3]),
      (z_out_4[8:2]), (COMP_LOOP_5_tmp_mul_idiv_sva[7:1]), (COMP_LOOP_2_tmp_mul_idiv_sva[9:3]),
      (COMP_LOOP_3_tmp_lshift_ncse_sva[8:2]), (COMP_LOOP_2_tmp_lshift_ncse_sva[9:3]),
      {and_dcpl_39 , COMP_LOOP_tmp_or_16_cse , and_dcpl_95 , and_dcpl_97 , and_dcpl_98
      , and_dcpl_101 , and_dcpl_102});
  assign or_584_cse = (z_out_4[2:0]!=3'b000) | (fsm_output[3]);
  assign or_588_nl = (COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]!=2'b00) | (~ (fsm_output[3]));
  assign or_586_nl = (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]!=3'b000) | (~ (fsm_output[3]));
  assign mux_452_nl = MUX_s_1_2_2(or_588_nl, or_586_nl, fsm_output[0]);
  assign mux_451_nl = MUX_s_1_2_2((fsm_output[3]), or_584_cse, fsm_output[0]);
  assign mux_453_nl = MUX_s_1_2_2(mux_452_nl, mux_451_nl, fsm_output[1]);
  assign or_583_nl = (z_out_4[1:0]!=2'b00) | (fsm_output[3]);
  assign mux_449_nl = MUX_s_1_2_2(or_583_nl, or_584_cse, fsm_output[0]);
  assign or_581_nl = (COMP_LOOP_5_tmp_mul_idiv_sva[0]) | (fsm_output[3]);
  assign or_580_nl = (COMP_LOOP_2_tmp_mul_idiv_sva[2:0]!=3'b000) | (fsm_output[3]);
  assign mux_448_nl = MUX_s_1_2_2(or_581_nl, or_580_nl, fsm_output[0]);
  assign mux_450_nl = MUX_s_1_2_2(mux_449_nl, mux_448_nl, fsm_output[1]);
  assign mux_454_nl = MUX_s_1_2_2(mux_453_nl, mux_450_nl, fsm_output[2]);
  assign twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_454_nl) & and_dcpl_104;
  assign twiddle_rsc_0_1_i_radr_d_pff = z_out_4[9:3];
  assign nor_230_cse = ~((z_out_4[2:0]!=3'b001) | (fsm_output[3:2]!=2'b01));
  assign nor_229_nl = ~((z_out_4[2:0]!=3'b001) | (fsm_output[3:2]!=2'b10));
  assign mux_456_nl = MUX_s_1_2_2(nor_229_nl, nor_230_cse, fsm_output[0]);
  assign nor_232_nl = ~((z_out_4[2:0]!=3'b001) | (fsm_output[3:2]!=2'b00));
  assign mux_455_nl = MUX_s_1_2_2(nor_230_cse, nor_232_nl, fsm_output[0]);
  assign mux_457_nl = MUX_s_1_2_2(mux_456_nl, mux_455_nl, fsm_output[1]);
  assign twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = mux_457_nl & and_dcpl_104;
  assign twiddle_rsc_0_2_i_radr_d_pff = MUX_v_7_2_2((z_out_4[9:3]), (z_out_4[8:2]),
      COMP_LOOP_tmp_or_7_cse);
  assign nor_226_cse = ~((z_out_4[2:0]!=3'b010) | (fsm_output[3]));
  assign nor_225_cse = ~((z_out_4[1:0]!=2'b01) | (fsm_output[3]));
  assign nor_223_nl = ~((fsm_output[0]) | (z_out_4[2:0]!=3'b010) | (~ (fsm_output[3])));
  assign nor_224_nl = ~((~ (fsm_output[0])) | (z_out_4[2:0]!=3'b010) | (fsm_output[3]));
  assign mux_461_nl = MUX_s_1_2_2(nor_223_nl, nor_224_nl, fsm_output[1]);
  assign mux_459_nl = MUX_s_1_2_2(nor_225_cse, nor_226_cse, fsm_output[0]);
  assign mux_458_nl = MUX_s_1_2_2(nor_226_cse, nor_225_cse, fsm_output[0]);
  assign mux_460_nl = MUX_s_1_2_2(mux_459_nl, mux_458_nl, fsm_output[1]);
  assign mux_462_nl = MUX_s_1_2_2(mux_461_nl, mux_460_nl, fsm_output[2]);
  assign twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = mux_462_nl & and_dcpl_104;
  assign nor_220_cse = ~((z_out_4[2:0]!=3'b011) | (fsm_output[3:2]!=2'b01));
  assign nor_219_nl = ~((z_out_4[2:0]!=3'b011) | (fsm_output[3:2]!=2'b10));
  assign mux_464_nl = MUX_s_1_2_2(nor_219_nl, nor_220_cse, fsm_output[0]);
  assign nor_222_nl = ~((z_out_4[2:0]!=3'b011) | (fsm_output[3:2]!=2'b00));
  assign mux_463_nl = MUX_s_1_2_2(nor_220_cse, nor_222_nl, fsm_output[0]);
  assign mux_465_nl = MUX_s_1_2_2(mux_464_nl, mux_463_nl, fsm_output[1]);
  assign twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = mux_465_nl & and_dcpl_104;
  assign twiddle_rsc_0_4_i_radr_d = MUX1HOT_v_7_6_2((z_out_4[9:3]), (z_out_4[8:2]),
      (COMP_LOOP_5_tmp_mul_idiv_sva[7:1]), (COMP_LOOP_2_tmp_mul_idiv_sva[9:3]), (COMP_LOOP_3_tmp_lshift_ncse_sva[8:2]),
      (COMP_LOOP_2_tmp_lshift_ncse_sva[9:3]), {COMP_LOOP_tmp_or_16_cse , and_dcpl_95
      , and_dcpl_97 , and_dcpl_98 , and_dcpl_101 , and_dcpl_102});
  assign nor_212_nl = ~((COMP_LOOP_3_tmp_lshift_ncse_sva[0]) | (~((COMP_LOOP_3_tmp_lshift_ncse_sva[1])
      & (fsm_output[3]))));
  assign nor_213_nl = ~((COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]!=2'b00) | (~((COMP_LOOP_2_tmp_lshift_ncse_sva[2])
      & (fsm_output[3]))));
  assign mux_469_nl = MUX_s_1_2_2(nor_212_nl, nor_213_nl, fsm_output[0]);
  assign nor_214_nl = ~((~ (fsm_output[0])) | (z_out_4[2:0]!=3'b100) | (fsm_output[3]));
  assign mux_470_nl = MUX_s_1_2_2(mux_469_nl, nor_214_nl, fsm_output[1]);
  assign nor_215_nl = ~((z_out_4[1:0]!=2'b10) | (fsm_output[3]));
  assign nor_216_nl = ~((z_out_4[2:0]!=3'b100) | (fsm_output[3]));
  assign mux_467_nl = MUX_s_1_2_2(nor_215_nl, nor_216_nl, fsm_output[0]);
  assign nor_217_nl = ~((~ (COMP_LOOP_5_tmp_mul_idiv_sva[0])) | (fsm_output[3]));
  assign nor_218_nl = ~((COMP_LOOP_2_tmp_mul_idiv_sva[2:0]!=3'b100) | (fsm_output[3]));
  assign mux_466_nl = MUX_s_1_2_2(nor_217_nl, nor_218_nl, fsm_output[0]);
  assign mux_468_nl = MUX_s_1_2_2(mux_467_nl, mux_466_nl, fsm_output[1]);
  assign mux_471_nl = MUX_s_1_2_2(mux_470_nl, mux_468_nl, fsm_output[2]);
  assign twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d = mux_471_nl & and_dcpl_104;
  assign nor_209_cse = ~((z_out_4[2:0]!=3'b101) | (fsm_output[3:2]!=2'b01));
  assign nor_208_nl = ~((z_out_4[2:0]!=3'b101) | (fsm_output[3:2]!=2'b10));
  assign mux_473_nl = MUX_s_1_2_2(nor_208_nl, nor_209_cse, fsm_output[0]);
  assign nor_211_nl = ~((z_out_4[2:0]!=3'b101) | (fsm_output[3:2]!=2'b00));
  assign mux_472_nl = MUX_s_1_2_2(nor_209_cse, nor_211_nl, fsm_output[0]);
  assign mux_474_nl = MUX_s_1_2_2(mux_473_nl, mux_472_nl, fsm_output[1]);
  assign twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d = mux_474_nl & and_dcpl_104;
  assign nor_205_cse = ~((z_out_4[2:0]!=3'b110) | (fsm_output[3]));
  assign nor_204_cse = ~((z_out_4[1:0]!=2'b11) | (fsm_output[3]));
  assign nor_202_nl = ~((fsm_output[0]) | (z_out_4[2:0]!=3'b110) | (~ (fsm_output[3])));
  assign nor_203_nl = ~((~ (fsm_output[0])) | (z_out_4[2:0]!=3'b110) | (fsm_output[3]));
  assign mux_478_nl = MUX_s_1_2_2(nor_202_nl, nor_203_nl, fsm_output[1]);
  assign mux_476_nl = MUX_s_1_2_2(nor_204_cse, nor_205_cse, fsm_output[0]);
  assign mux_475_nl = MUX_s_1_2_2(nor_205_cse, nor_204_cse, fsm_output[0]);
  assign mux_477_nl = MUX_s_1_2_2(mux_476_nl, mux_475_nl, fsm_output[1]);
  assign mux_479_nl = MUX_s_1_2_2(mux_478_nl, mux_477_nl, fsm_output[2]);
  assign twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d = mux_479_nl & and_dcpl_104;
  assign and_235_cse = (z_out_4[2:0]==3'b111) & (fsm_output[3:2]==2'b01);
  assign and_nl = (z_out_4[2:0]==3'b111) & (fsm_output[3:2]==2'b10);
  assign mux_481_nl = MUX_s_1_2_2(and_nl, and_235_cse, fsm_output[0]);
  assign nor_201_nl = ~((z_out_4[2:0]!=3'b111) | (fsm_output[3:2]!=2'b00));
  assign mux_480_nl = MUX_s_1_2_2(and_235_cse, nor_201_nl, fsm_output[0]);
  assign mux_482_nl = MUX_s_1_2_2(mux_481_nl, mux_480_nl, fsm_output[1]);
  assign twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d = mux_482_nl & and_dcpl_104;
  assign and_dcpl_240 = (fsm_output==8'b11111011);
  assign and_dcpl_241 = ~((fsm_output[0]) | (fsm_output[5]));
  assign and_dcpl_242 = (~ (fsm_output[7])) & (fsm_output[1]);
  assign and_dcpl_243 = and_dcpl_242 & and_dcpl_241;
  assign and_dcpl_247 = and_dcpl_29 & and_dcpl_243;
  assign and_dcpl_248 = (fsm_output[0]) & (~ (fsm_output[5]));
  assign and_dcpl_249 = ~((fsm_output[7]) | (fsm_output[1]));
  assign and_dcpl_250 = and_dcpl_249 & and_dcpl_248;
  assign and_dcpl_253 = and_dcpl_150 & and_dcpl_250;
  assign and_dcpl_254 = (~ (fsm_output[0])) & (fsm_output[5]);
  assign and_dcpl_256 = and_dcpl_150 & and_dcpl_249 & and_dcpl_254;
  assign and_dcpl_257 = and_dcpl_242 & and_dcpl_248;
  assign and_dcpl_260 = and_dcpl_99 & (fsm_output[2]) & (fsm_output[6]);
  assign and_dcpl_261 = and_dcpl_260 & and_dcpl_257;
  assign and_dcpl_263 = and_dcpl_260 & and_dcpl_242 & and_dcpl_254;
  assign and_dcpl_264 = (fsm_output[7]) & (~ (fsm_output[1]));
  assign and_dcpl_268 = and_dcpl_156 & and_dcpl_264 & and_dcpl_248;
  assign and_dcpl_270 = and_dcpl_156 & and_dcpl_264 & and_dcpl_254;
  assign and_dcpl_271 = (fsm_output[7]) & (fsm_output[1]);
  assign and_dcpl_274 = and_dcpl_99 & (~ (fsm_output[2])) & (fsm_output[6]);
  assign and_dcpl_275 = and_dcpl_274 & and_dcpl_271 & and_dcpl_248;
  assign and_dcpl_277 = and_dcpl_274 & and_dcpl_271 & and_dcpl_254;
  assign and_dcpl_278 = and_dcpl_29 & and_dcpl_257;
  assign and_dcpl_280 = and_dcpl_94 & and_dcpl_250;
  assign and_dcpl_281 = and_dcpl_94 & and_dcpl_243;
  assign and_dcpl_282 = and_dcpl_249 & and_dcpl_241;
  assign and_dcpl_284 = and_dcpl_99 & nor_474_cse & and_dcpl_282;
  assign and_dcpl_285 = and_dcpl_94 & and_dcpl_282;
  assign and_dcpl_286 = and_dcpl_94 & and_dcpl_257;
  assign and_dcpl_300 = ~((fsm_output!=8'b00000010));
  assign and_dcpl_312 = and_dcpl_28 & (~ (fsm_output[2])) & (~ (fsm_output[6]));
  assign and_437_cse = and_dcpl_312 & and_dcpl_242 & and_230_cse;
  assign and_dcpl_316 = and_dcpl_28 & (~ (fsm_output[2])) & (fsm_output[6]);
  assign and_441_cse = and_dcpl_316 & and_dcpl_242 & and_dcpl_241;
  assign and_443_cse = and_dcpl_316 & and_dcpl_249 & and_230_cse;
  assign and_446_cse = and_dcpl_312 & and_dcpl_264 & and_dcpl_241;
  assign and_452_cse = and_dcpl_63 & and_dcpl_271 & and_dcpl_248;
  assign and_455_cse = and_dcpl_63 & and_dcpl_271 & (~ (fsm_output[0])) & (fsm_output[5]);
  assign and_459_cse = and_532_cse & (fsm_output[2]) & (fsm_output[6]) & and_dcpl_264
      & and_dcpl_248;
  assign and_dcpl_377 = and_dcpl_28 & and_dcpl_62 & and_dcpl_249 & and_dcpl_241;
  assign COMP_LOOP_tmp_or_15_ssc = and_dcpl_253 | and_dcpl_256 | and_dcpl_261 | and_dcpl_263
      | and_dcpl_268 | and_dcpl_270 | and_dcpl_275 | and_dcpl_277;
  assign COMP_LOOP_tmp_nor_24_itm = ~(and_dcpl_247 | and_dcpl_278 | and_dcpl_280
      | and_dcpl_281 | and_dcpl_284 | and_dcpl_285 | and_dcpl_286);
  assign COMP_LOOP_tmp_or_31_itm = and_dcpl_280 | and_dcpl_281 | and_dcpl_284;
  assign COMP_LOOP_tmp_nor_25_itm = ~(and_dcpl_247 | and_dcpl_285 | and_dcpl_286);
  assign COMP_LOOP_tmp_or_35_itm = and_dcpl_278 | and_dcpl_280 | and_dcpl_281 | and_dcpl_284;
  assign COMP_LOOP_tmp_or_37_itm = and_dcpl_285 | and_dcpl_286;
  assign COMP_LOOP_or_9_itm = and_437_cse | and_441_cse | and_443_cse | and_446_cse
      | and_452_cse | and_455_cse | and_459_cse;
  always @(posedge clk) begin
    if ( (and_dcpl_29 & and_dcpl_26) | STAGE_LOOP_i_3_0_sva_mx0c1 ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b1010, z_out_5, STAGE_LOOP_i_3_0_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_nl, and_531_nl, fsm_output[5]) ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_7_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      COMP_LOOP_3_tmp_mul_idiv_sva_1_0 <= 2'b00;
    end
    else begin
      reg_vec_rsc_triosy_0_7_obj_ld_cse <= and_dcpl_117 & (fsm_output[6]) & (~ (fsm_output[0]))
          & (~ (fsm_output[1])) & (fsm_output[7]) & (fsm_output[5]) & (~ (z_out_2[4]));
      reg_ensig_cgo_cse <= ~ mux_496_itm;
      COMP_LOOP_3_tmp_mul_idiv_sva_1_0 <= z_out_4[1:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= 10'b0000000000;
    end
    else if ( VEC_LOOP_j_10_0_sva_9_0_mx0c0 | (and_dcpl_71 & and_dcpl_88) ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_3[9:0]), VEC_LOOP_j_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_194_nl, and_264_nl, fsm_output[5]) ) begin
      STAGE_LOOP_lshift_psp_sva <= z_out;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(or_743_nl, nand_155_nl, fsm_output[7]) ) begin
      COMP_LOOP_k_10_3_sva_6_0 <= MUX_v_7_2_2(7'b0000000, reg_COMP_LOOP_k_10_3_ftd,
          nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_52 ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= COMP_LOOP_1_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_52 ) begin
      COMP_LOOP_acc_psp_sva <= nl_COMP_LOOP_acc_psp_sva[6:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_5_tmp_mul_idiv_sva <= 8'b00000000;
    end
    else if ( ~ or_dcpl_52 ) begin
      COMP_LOOP_5_tmp_mul_idiv_sva <= z_out_4[7:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_52 ) begin
      COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm <= z_out_3[10];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_52 ) begin
      COMP_LOOP_1_tmp_acc_cse_sva <= z_out_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_86_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_145_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_30_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_60_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_32_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_33_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_34_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_nor_4_itm <= 1'b0;
    end
    else if ( mux_529_itm ) begin
      COMP_LOOP_COMP_LOOP_and_86_itm <= (COMP_LOOP_acc_1_cse_4_sva_1[2:0]==3'b011);
      COMP_LOOP_COMP_LOOP_and_145_itm <= (COMP_LOOP_acc_1_cse_6_sva_1[2:0]==3'b110);
      COMP_LOOP_COMP_LOOP_and_30_itm <= (COMP_LOOP_acc_1_cse_2_sva_1[2:0]==3'b011);
      COMP_LOOP_COMP_LOOP_and_60_itm <= (COMP_LOOP_acc_11_psp_sva_1[1]) & (VEC_LOOP_j_10_0_sva_9_0[0])
          & (~ (COMP_LOOP_acc_11_psp_sva_1[0]));
      COMP_LOOP_COMP_LOOP_and_32_itm <= (COMP_LOOP_acc_1_cse_2_sva_1[2:0]==3'b101);
      COMP_LOOP_COMP_LOOP_and_33_itm <= (COMP_LOOP_acc_1_cse_2_sva_1[2:0]==3'b110);
      COMP_LOOP_COMP_LOOP_and_34_itm <= (COMP_LOOP_acc_1_cse_2_sva_1[2:0]==3'b111);
      COMP_LOOP_COMP_LOOP_nor_4_itm <= ~((COMP_LOOP_acc_1_cse_2_sva_1[2:0]!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_1_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_11_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_12_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_13_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_69_itm <= 1'b0;
    end
    else if ( COMP_LOOP_or_14_cse ) begin
      COMP_LOOP_COMP_LOOP_nor_1_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_nor_1_nl,
          COMP_LOOP_COMP_LOOP_nor_9_nl, and_dcpl_42);
      COMP_LOOP_COMP_LOOP_and_11_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_11_nl,
          COMP_LOOP_COMP_LOOP_and_65_nl, and_dcpl_42);
      COMP_LOOP_COMP_LOOP_and_12_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_12_nl,
          COMP_LOOP_COMP_LOOP_and_67_nl, and_dcpl_42);
      COMP_LOOP_COMP_LOOP_and_13_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_13_nl,
          COMP_LOOP_COMP_LOOP_and_68_nl, and_dcpl_42);
      COMP_LOOP_COMP_LOOP_and_69_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_9_nl,
          COMP_LOOP_COMP_LOOP_and_69_nl, and_dcpl_42);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_6_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_tmp_523, and_140_nl, fsm_output[5]) ) begin
      COMP_LOOP_acc_1_cse_6_sva <= COMP_LOOP_acc_1_cse_6_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_4_sva <= 10'b0000000000;
    end
    else if ( ~(mux_536_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_acc_1_cse_4_sva <= COMP_LOOP_acc_1_cse_4_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_11_psp_sva <= 9'b000000000;
    end
    else if ( mux_540_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_11_psp_sva <= COMP_LOOP_acc_11_psp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_2_sva <= 10'b0000000000;
    end
    else if ( ~(mux_541_nl & nor_441_cse) ) begin
      COMP_LOOP_acc_1_cse_2_sva <= COMP_LOOP_acc_1_cse_2_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_2_sva <= 10'b0000000000;
    end
    else if ( ~(mux_542_nl & nor_441_cse) ) begin
      COMP_LOOP_acc_10_cse_10_1_2_sva <= COMP_LOOP_2_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( ~((or_tmp_617 | or_dcpl_53) & nor_441_cse) ) begin
      COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_3_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_5_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_138 ) begin
      COMP_LOOP_COMP_LOOP_nor_5_itm <= ~((COMP_LOOP_2_acc_10_itm_10_1_1[2:0]!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_37_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_138 ) begin
      COMP_LOOP_COMP_LOOP_and_37_itm <= (COMP_LOOP_2_acc_10_itm_10_1_1[2:0]==3'b011);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_39_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_138 ) begin
      COMP_LOOP_COMP_LOOP_and_39_itm <= (COMP_LOOP_2_acc_10_itm_10_1_1[2:0]==3'b101);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_40_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_138 ) begin
      COMP_LOOP_COMP_LOOP_and_40_itm <= (COMP_LOOP_2_acc_10_itm_10_1_1[2:0]==3'b110);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_41_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_138 ) begin
      COMP_LOOP_COMP_LOOP_and_41_itm <= (COMP_LOOP_2_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_3_sva <= 10'b0000000000;
    end
    else if ( mux_545_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_10_cse_10_1_3_sva <= readslicef_11_10_1(COMP_LOOP_3_acc_10_nl);
    end
  end
  always @(posedge clk) begin
    if ( mux_547_nl | (fsm_output[7]) ) begin
      COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm <= readslicef_9_1_8(COMP_LOOP_acc_12_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_4_sva <= 10'b0000000000;
    end
    else if ( ~(mux_548_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_acc_10_cse_10_1_4_sva <= COMP_LOOP_4_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_549_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_5_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_13_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_143 ) begin
      COMP_LOOP_COMP_LOOP_nor_13_itm <= ~((COMP_LOOP_4_acc_10_itm_10_1_1[2:0]!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_93_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_143 ) begin
      COMP_LOOP_COMP_LOOP_and_93_itm <= (COMP_LOOP_4_acc_10_itm_10_1_1[2:0]==3'b011);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_95_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_143 ) begin
      COMP_LOOP_COMP_LOOP_and_95_itm <= (COMP_LOOP_4_acc_10_itm_10_1_1[2:0]==3'b101);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_96_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_143 ) begin
      COMP_LOOP_COMP_LOOP_and_96_itm <= (COMP_LOOP_4_acc_10_itm_10_1_1[2:0]==3'b110);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_97_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_143 ) begin
      COMP_LOOP_COMP_LOOP_and_97_itm <= (COMP_LOOP_4_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_13_psp_sva <= 8'b00000000;
    end
    else if ( MUX_s_1_2_2(mux_552_nl, (fsm_output[7]), fsm_output[5]) ) begin
      COMP_LOOP_acc_13_psp_sva <= nl_COMP_LOOP_acc_13_psp_sva[7:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_5_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_554_nl, (fsm_output[7]), fsm_output[5]) ) begin
      COMP_LOOP_acc_10_cse_10_1_5_sva <= COMP_LOOP_5_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_557_nl, (fsm_output[7]), fsm_output[5]) ) begin
      COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_6_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_17_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_144 ) begin
      COMP_LOOP_COMP_LOOP_nor_17_itm <= ~((COMP_LOOP_5_acc_10_itm_10_1_1[2:0]!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_121_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_144 ) begin
      COMP_LOOP_COMP_LOOP_and_121_itm <= (COMP_LOOP_5_acc_10_itm_10_1_1[2:0]==3'b011);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_123_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_144 ) begin
      COMP_LOOP_COMP_LOOP_and_123_itm <= (COMP_LOOP_5_acc_10_itm_10_1_1[2:0]==3'b101);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_124_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_144 ) begin
      COMP_LOOP_COMP_LOOP_and_124_itm <= (COMP_LOOP_5_acc_10_itm_10_1_1[2:0]==3'b110);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_and_125_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_144 ) begin
      COMP_LOOP_COMP_LOOP_and_125_itm <= (COMP_LOOP_5_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_6_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_tmp_523, and_155_nl, fsm_output[5]) ) begin
      COMP_LOOP_acc_10_cse_10_1_6_sva <= COMP_LOOP_6_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_tmp_523, and_156_nl, fsm_output[5]) ) begin
      COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_7_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_21_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_149_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_151_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_152_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_153_itm <= 1'b0;
    end
    else if ( mux_564_itm ) begin
      COMP_LOOP_COMP_LOOP_nor_21_itm <= ~((COMP_LOOP_6_acc_10_itm_10_1_1[2:0]!=3'b000));
      COMP_LOOP_COMP_LOOP_and_149_itm <= (COMP_LOOP_6_acc_10_itm_10_1_1[2:0]==3'b011);
      COMP_LOOP_COMP_LOOP_and_151_itm <= (COMP_LOOP_6_acc_10_itm_10_1_1[2:0]==3'b101);
      COMP_LOOP_COMP_LOOP_and_152_itm <= (COMP_LOOP_6_acc_10_itm_10_1_1[2:0]==3'b110);
      COMP_LOOP_COMP_LOOP_and_153_itm <= (COMP_LOOP_6_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_14_psp_sva <= 9'b000000000;
    end
    else if ( MUX_s_1_2_2(mux_566_nl, nor_tmp_29, fsm_output[5]) ) begin
      COMP_LOOP_acc_14_psp_sva <= nl_COMP_LOOP_acc_14_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_7_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_569_nl, nor_tmp_29, fsm_output[5]) ) begin
      COMP_LOOP_acc_10_cse_10_1_7_sva <= COMP_LOOP_7_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( mux_573_itm ) begin
      COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm <= readslicef_8_1_7(COMP_LOOP_acc_15_nl);
      reg_COMP_LOOP_k_10_3_ftd <= z_out_2[6:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_25_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_177_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_179_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_180_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_181_itm <= 1'b0;
    end
    else if ( mux_575_itm ) begin
      COMP_LOOP_COMP_LOOP_nor_25_itm <= ~((COMP_LOOP_7_acc_10_itm_10_1_1[2:0]!=3'b000));
      COMP_LOOP_COMP_LOOP_and_177_itm <= (COMP_LOOP_7_acc_10_itm_10_1_1[2:0]==3'b011);
      COMP_LOOP_COMP_LOOP_and_179_itm <= (COMP_LOOP_7_acc_10_itm_10_1_1[2:0]==3'b101);
      COMP_LOOP_COMP_LOOP_and_180_itm <= (COMP_LOOP_7_acc_10_itm_10_1_1[2:0]==3'b110);
      COMP_LOOP_COMP_LOOP_and_181_itm <= (COMP_LOOP_7_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(not_tmp_329, and_158_nl, fsm_output[5]) ) begin
      COMP_LOOP_acc_1_cse_sva <= nl_COMP_LOOP_acc_1_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(not_tmp_329, and_215_nl, fsm_output[5]) ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= COMP_LOOP_8_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(not_tmp_329, and_159_nl, fsm_output[5]) ) begin
      COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_1_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_COMP_LOOP_nor_29_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_205_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_207_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_208_itm <= 1'b0;
      COMP_LOOP_COMP_LOOP_and_209_itm <= 1'b0;
    end
    else if ( mux_580_itm ) begin
      COMP_LOOP_COMP_LOOP_nor_29_itm <= ~((COMP_LOOP_8_acc_10_itm_10_1_1[2:0]!=3'b000));
      COMP_LOOP_COMP_LOOP_and_205_itm <= (COMP_LOOP_8_acc_10_itm_10_1_1[2:0]==3'b011);
      COMP_LOOP_COMP_LOOP_and_207_itm <= (COMP_LOOP_8_acc_10_itm_10_1_1[2:0]==3'b101);
      COMP_LOOP_COMP_LOOP_and_208_itm <= (COMP_LOOP_8_acc_10_itm_10_1_1[2:0]==3'b110);
      COMP_LOOP_COMP_LOOP_and_209_itm <= (COMP_LOOP_8_acc_10_itm_10_1_1[2:0]==3'b111);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_tmp_mul_idiv_sva <= 10'b0000000000;
    end
    else if ( and_dcpl_42 | and_dcpl_96 | and_dcpl_97 ) begin
      COMP_LOOP_2_tmp_mul_idiv_sva <= z_out_4[9:0];
    end
  end
  always @(posedge clk) begin
    if ( ~(or_dcpl_51 | (fsm_output[1:0]!=2'b11) | or_dcpl_46) ) begin
      tmp_16_sva <= twiddle_rsc_0_0_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_tmp_lshift_ncse_sva <= 10'b0000000000;
    end
    else if ( and_dcpl_42 | and_dcpl_101 ) begin
      COMP_LOOP_2_tmp_lshift_ncse_sva <= MUX_v_10_2_2(z_out_1, (z_out_4[9:0]), and_dcpl_101);
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_42 | and_dcpl_95 | and_dcpl_148 | COMP_LOOP_1_acc_8_itm_mx0c3 |
        COMP_LOOP_1_acc_8_itm_mx0c4 | and_dcpl_48 | and_dcpl_120 | COMP_LOOP_1_acc_8_itm_mx0c7
        | and_dcpl_53 | and_dcpl_121 | COMP_LOOP_1_acc_8_itm_mx0c10 | and_dcpl_56
        | and_dcpl_122 | COMP_LOOP_1_acc_8_itm_mx0c13 | and_dcpl_59 | and_dcpl_123
        | COMP_LOOP_1_acc_8_itm_mx0c16 | and_dcpl_66 | and_dcpl_124 | COMP_LOOP_1_acc_8_itm_mx0c19
        | and_dcpl_69 | and_dcpl_125 | COMP_LOOP_1_acc_8_itm_mx0c22 | and_dcpl_74
        | and_dcpl_126 | COMP_LOOP_1_acc_8_itm_mx0c25 ) begin
      COMP_LOOP_1_acc_8_itm <= MUX1HOT_v_64_12_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
          vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, vec_rsc_0_4_i_q_d, vec_rsc_0_5_i_q_d,
          vec_rsc_0_6_i_q_d, vec_rsc_0_7_i_q_d, COMP_LOOP_acc_17_nl, twiddle_rsc_0_5_i_q_d,
          z_out_4, COMP_LOOP_1_modulo_cmp_return_rsc_z, {COMP_LOOP_or_nl , COMP_LOOP_or_1_nl
          , COMP_LOOP_or_2_nl , COMP_LOOP_or_3_nl , COMP_LOOP_or_4_nl , COMP_LOOP_or_5_nl
          , COMP_LOOP_or_6_nl , COMP_LOOP_or_7_nl , COMP_LOOP_or_12_nl , and_dcpl_148
          , COMP_LOOP_or_13_nl , COMP_LOOP_1_acc_8_itm_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm <= 1'b0;
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm <= 1'b0;
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm <= 1'b0;
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm <= 1'b0;
      COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm <= 1'b0;
    end
    else if ( COMP_LOOP_tmp_or_2_cse ) begin
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm <= (z_out_4[2:0]==3'b011);
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm <= (z_out_4[2:0]==3'b101);
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm <= (z_out_4[2:0]==3'b110);
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm <= (z_out_4[2:0]==3'b111);
      COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm <= ~((z_out_4[2:0]!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_3_tmp_lshift_ncse_sva <= 9'b000000000;
    end
    else if ( COMP_LOOP_tmp_or_7_cse ) begin
      COMP_LOOP_3_tmp_lshift_ncse_sva <= MUX_v_9_2_2((z_out_1[8:0]), (z_out_4[8:0]),
          and_dcpl_98);
    end
  end
  always @(posedge clk) begin
    if ( ~((~ mux_608_nl) & nor_441_cse) ) begin
      COMP_LOOP_tmp_mux1h_itm <= COMP_LOOP_tmp_mux1h_itm_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( mux_614_nl | (fsm_output[7]) ) begin
      COMP_LOOP_tmp_mux1h_1_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_2_i_q_d,
          twiddle_rsc_0_4_i_q_d, twiddle_rsc_0_6_i_q_d, {and_184_nl , and_187_nl
          , and_190_nl , and_193_nl});
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_617_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_tmp_mux1h_2_itm <= COMP_LOOP_tmp_mux1h_itm_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_619_nl, (fsm_output[7]), fsm_output[5]) ) begin
      COMP_LOOP_tmp_mux_itm <= MUX_v_64_2_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_4_i_q_d,
          and_202_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~((~((~ COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm) | COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm
        | COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt | COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt
        | COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt | COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm
        | COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm | COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm
        | and_dcpl_148 | and_dcpl_101)) | mux_623_nl) ) begin
      tmp_21_sva_3 <= MUX1HOT_v_64_9_2(twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_6_i_q_d,
          twiddle_rsc_0_0_i_q_d, tmp_23_sva_1, tmp_23_sva_2, twiddle_rsc_0_4_i_q_d,
          COMP_LOOP_1_acc_8_itm, tmp_21_sva_6, tmp_21_sva_7, {and_dcpl_148 , and_dcpl_101
          , COMP_LOOP_tmp_and_11_nl , COMP_LOOP_tmp_and_12_nl , COMP_LOOP_tmp_and_13_nl
          , COMP_LOOP_tmp_and_14_nl , COMP_LOOP_tmp_and_15_nl , COMP_LOOP_tmp_and_16_nl
          , COMP_LOOP_tmp_and_17_nl});
    end
  end
  always @(posedge clk) begin
    if ( COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm ) begin
      tmp_21_sva_6 <= twiddle_rsc_0_6_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm ) begin
      tmp_21_sva_7 <= twiddle_rsc_0_7_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( ~((~((~(COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 | COMP_LOOP_tmp_COMP_LOOP_tmp_and_37))
        | COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm | COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm
        | COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm | COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm
        | COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm | and_dcpl_98)) | mux_626_nl) )
        begin
      COMP_LOOP_tmp_mux1h_3_itm <= MUX1HOT_v_64_8_2(twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_2_i_q_d,
          twiddle_rsc_0_0_i_q_d, tmp_21_sva_3, twiddle_rsc_0_4_i_q_d, COMP_LOOP_1_acc_8_itm,
          tmp_21_sva_6, tmp_21_sva_7, {COMP_LOOP_tmp_and_18_nl , COMP_LOOP_tmp_and_19_nl
          , COMP_LOOP_tmp_and_5_nl , COMP_LOOP_tmp_and_6_nl , COMP_LOOP_tmp_and_7_nl
          , COMP_LOOP_tmp_and_8_nl , COMP_LOOP_tmp_and_9_nl , COMP_LOOP_tmp_and_10_nl});
    end
  end
  always @(posedge clk) begin
    if ( (COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse | ((COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]==2'b10))
        | ((COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]==2'b11)) | and_dcpl_101) & mux_630_nl
        ) begin
      COMP_LOOP_tmp_mux1h_4_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_0_i_q_d,
          twiddle_rsc_0_4_i_q_d, tmp_21_sva_3, {and_dcpl_101 , COMP_LOOP_tmp_and_nl
          , COMP_LOOP_tmp_and_2_nl , COMP_LOOP_tmp_and_3_nl});
    end
  end
  always @(posedge clk) begin
    if ( (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]==3'b001) ) begin
      tmp_23_sva_1 <= twiddle_rsc_0_1_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( (COMP_LOOP_2_tmp_lshift_ncse_sva[2:0]==3'b010) ) begin
      tmp_23_sva_2 <= twiddle_rsc_0_2_i_q_d;
    end
  end
  assign nor_nl = ~((fsm_output[7]) | (fsm_output[1]) | (fsm_output[0]) | (fsm_output[6])
      | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]));
  assign and_531_nl = (fsm_output[7]) & nor_tmp_64;
  assign VEC_LOOP_j_not_1_nl = ~ VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  assign nor_194_nl = ~((fsm_output[7]) | (fsm_output[1]) | (fsm_output[6]) | (fsm_output[2])
      | (fsm_output[3]) | (fsm_output[4]));
  assign and_264_nl = (fsm_output[7]) & (fsm_output[6]) & (fsm_output[2]) & (fsm_output[4])
      & (fsm_output[3]);
  assign nor_438_nl = ~((fsm_output[7]) | (fsm_output[1]) | (fsm_output[6]) | (fsm_output[4])
      | (fsm_output[3]));
  assign and_262_nl = (fsm_output[7]) & (fsm_output[1]) & (fsm_output[6]) & (fsm_output[4])
      & (fsm_output[3]);
  assign mux_196_nl = MUX_s_1_2_2(nor_438_nl, and_262_nl, fsm_output[5]);
  assign nand_nl = ~(mux_196_nl & (~ (fsm_output[2])) & (fsm_output[0]));
  assign or_742_nl = (fsm_output[5]) | (~ (fsm_output[1]));
  assign mux_632_nl = MUX_s_1_2_2(or_742_nl, (fsm_output[5]), fsm_output[2]);
  assign or_743_nl = (fsm_output[6]) | (fsm_output[3]) | (fsm_output[4]) | mux_632_nl;
  assign nand_154_nl = ~((fsm_output[5]) & (~((fsm_output[1:0]==2'b11))));
  assign mux_nl = MUX_s_1_2_2(nand_154_nl, (fsm_output[5]), fsm_output[2]);
  assign mux_631_nl = MUX_s_1_2_2((fsm_output[5]), (~ mux_nl), and_532_cse);
  assign nand_155_nl = ~((fsm_output[6]) & mux_631_nl);
  assign nl_COMP_LOOP_acc_psp_sva  = (VEC_LOOP_j_10_0_sva_9_0[9:3]) + COMP_LOOP_k_10_3_sva_6_0;
  assign COMP_LOOP_COMP_LOOP_nor_1_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[2:0]!=3'b000));
  assign COMP_LOOP_COMP_LOOP_nor_9_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]!=3'b000));
  assign COMP_LOOP_COMP_LOOP_and_11_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[2:0]==3'b101);
  assign COMP_LOOP_COMP_LOOP_and_65_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b011);
  assign COMP_LOOP_COMP_LOOP_and_12_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[2:0]==3'b110);
  assign COMP_LOOP_COMP_LOOP_and_67_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b101);
  assign COMP_LOOP_COMP_LOOP_and_13_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[2:0]==3'b111);
  assign COMP_LOOP_COMP_LOOP_and_68_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b110);
  assign COMP_LOOP_COMP_LOOP_and_9_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[2:0]==3'b011);
  assign COMP_LOOP_COMP_LOOP_and_69_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b111);
  assign and_140_nl = (fsm_output[7]) & mux_tmp_522;
  assign mux_536_nl = MUX_s_1_2_2(or_tmp_616, (~ nor_tmp_64), fsm_output[5]);
  assign mux_539_nl = MUX_s_1_2_2(and_dcpl_29, mux_tmp_527, fsm_output[1]);
  assign mux_540_nl = MUX_s_1_2_2(mux_539_nl, (fsm_output[6]), fsm_output[5]);
  assign nand_151_nl = ~((fsm_output[4:0]==5'b11111));
  assign mux_541_nl = MUX_s_1_2_2(or_tmp_621, nand_151_nl, fsm_output[5]);
  assign nand_35_nl = ~((fsm_output[4:1]==4'b1111));
  assign mux_542_nl = MUX_s_1_2_2(or_tmp_621, nand_35_nl, fsm_output[5]);
  assign nl_COMP_LOOP_3_acc_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + conv_u2s_10_11({COMP_LOOP_k_10_3_sva_6_0 , 3'b010}) + 11'b00000000001;
  assign COMP_LOOP_3_acc_nl = nl_COMP_LOOP_3_acc_nl[10:0];
  assign nl_COMP_LOOP_3_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_3_sva_6_0
      , 3'b010}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_3_acc_10_nl = nl_COMP_LOOP_3_acc_10_nl[10:0];
  assign mux_543_nl = MUX_s_1_2_2(and_dcpl_29, mux_tmp_526, fsm_output[0]);
  assign mux_544_nl = MUX_s_1_2_2(mux_543_nl, mux_tmp_527, fsm_output[1]);
  assign mux_545_nl = MUX_s_1_2_2(mux_544_nl, (fsm_output[6]), fsm_output[5]);
  assign nl_COMP_LOOP_acc_12_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:3]))})
      + conv_u2u_8_9({COMP_LOOP_k_10_3_sva_6_0 , 1'b0}) + 9'b000000001;
  assign COMP_LOOP_acc_12_nl = nl_COMP_LOOP_acc_12_nl[8:0];
  assign mux_546_nl = MUX_s_1_2_2(and_dcpl_29, and_dcpl_35, and_263_cse);
  assign mux_547_nl = MUX_s_1_2_2(mux_546_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_548_nl = MUX_s_1_2_2(or_tmp_616, (~ and_dcpl_35), fsm_output[5]);
  assign nl_COMP_LOOP_5_acc_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + conv_u2s_10_11({COMP_LOOP_k_10_3_sva_6_0 , 3'b100}) + 11'b00000000001;
  assign COMP_LOOP_5_acc_nl = nl_COMP_LOOP_5_acc_nl[10:0];
  assign nand_34_nl = ~((fsm_output[1]) & (fsm_output[6]) & (fsm_output[2]) & (fsm_output[3])
      & (fsm_output[4]));
  assign mux_549_nl = MUX_s_1_2_2(or_tmp_616, nand_34_nl, fsm_output[5]);
  assign nl_COMP_LOOP_acc_13_psp_sva  = (VEC_LOOP_j_10_0_sva_9_0[9:2]) + ({COMP_LOOP_k_10_3_sva_6_0
      , 1'b1});
  assign mux_552_nl = MUX_s_1_2_2((~ or_tmp_616), or_tmp_620, fsm_output[7]);
  assign mux_554_nl = MUX_s_1_2_2((~ or_tmp_616), mux_tmp_522, fsm_output[7]);
  assign nl_COMP_LOOP_6_acc_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + conv_u2s_10_11({COMP_LOOP_k_10_3_sva_6_0 , 3'b101}) + 11'b00000000001;
  assign COMP_LOOP_6_acc_nl = nl_COMP_LOOP_6_acc_nl[10:0];
  assign mux_556_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp_620, or_731_cse);
  assign mux_557_nl = MUX_s_1_2_2((~ or_tmp_616), mux_556_nl, fsm_output[7]);
  assign mux_559_nl = MUX_s_1_2_2(or_tmp_620, or_tmp_25, fsm_output[1]);
  assign and_155_nl = (fsm_output[7]) & mux_559_nl;
  assign nl_COMP_LOOP_7_acc_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + conv_u2s_10_11({COMP_LOOP_k_10_3_sva_6_0 , 3'b110}) + 11'b00000000001;
  assign COMP_LOOP_7_acc_nl = nl_COMP_LOOP_7_acc_nl[10:0];
  assign and_156_nl = (fsm_output[7]) & or_tmp_620;
  assign nl_COMP_LOOP_acc_14_psp_sva  = (VEC_LOOP_j_10_0_sva_9_0[9:1]) + ({COMP_LOOP_k_10_3_sva_6_0
      , 2'b11});
  assign mux_566_nl = MUX_s_1_2_2((~ or_tmp_616), mux_tmp_554, fsm_output[7]);
  assign mux_569_nl = MUX_s_1_2_2((~ or_tmp_616), mux_tmp_557, fsm_output[7]);
  assign nl_COMP_LOOP_acc_15_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:4]))})
      + conv_u2u_7_8(COMP_LOOP_k_10_3_sva_6_0) + 8'b00000001;
  assign COMP_LOOP_acc_15_nl = nl_COMP_LOOP_acc_15_nl[7:0];
  assign nl_COMP_LOOP_acc_1_cse_sva  = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_3_sva_6_0
      , 3'b111});
  assign and_158_nl = (fsm_output[7]) & mux_tmp_557;
  assign and_215_nl = (fsm_output[7]) & (fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]);
  assign nl_COMP_LOOP_1_acc_nl = ({z_out_2 , 3'b000}) + ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + 11'b00000000001;
  assign COMP_LOOP_1_acc_nl = nl_COMP_LOOP_1_acc_nl[10:0];
  assign and_159_nl = (fsm_output[7]) & mux_tmp_554;
  assign COMP_LOOP_COMP_LOOP_mux_8_nl = MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, z_out_8,
      COMP_LOOP_or_9_itm);
  assign nl_COMP_LOOP_acc_17_nl = COMP_LOOP_mux_95_cse + COMP_LOOP_COMP_LOOP_mux_8_nl;
  assign COMP_LOOP_acc_17_nl = nl_COMP_LOOP_acc_17_nl[63:0];
  assign COMP_LOOP_or_nl = (COMP_LOOP_COMP_LOOP_nor_1_itm & and_dcpl_42) | (COMP_LOOP_COMP_LOOP_nor_4_itm
      & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_34_itm & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_33_itm
      & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_32_itm & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_60_itm
      & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_30_itm & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_145_itm
      & and_dcpl_74);
  assign COMP_LOOP_or_1_nl = ((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]==3'b001) & and_dcpl_42)
      | (COMP_LOOP_COMP_LOOP_and_86_itm & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_nor_4_itm
      & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_34_itm & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_33_itm
      & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_32_itm & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_60_itm
      & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_30_itm & and_dcpl_74);
  assign COMP_LOOP_or_2_nl = ((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]==3'b010) & and_dcpl_42)
      | (COMP_LOOP_COMP_LOOP_and_145_itm & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_86_itm
      & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_nor_4_itm & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_34_itm
      & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_33_itm & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_32_itm
      & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_60_itm & and_dcpl_74);
  assign COMP_LOOP_or_3_nl = (COMP_LOOP_COMP_LOOP_and_69_itm & and_dcpl_42) | (COMP_LOOP_COMP_LOOP_and_30_itm
      & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_145_itm & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_86_itm
      & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_nor_4_itm & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_34_itm
      & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_33_itm & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_32_itm
      & and_dcpl_74);
  assign COMP_LOOP_or_4_nl = ((COMP_LOOP_acc_10_cse_10_1_1_sva[2:0]==3'b100) & and_dcpl_42)
      | (COMP_LOOP_COMP_LOOP_and_60_itm & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_30_itm
      & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_145_itm & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_86_itm
      & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_nor_4_itm & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_34_itm
      & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_33_itm & and_dcpl_74);
  assign COMP_LOOP_or_5_nl = (COMP_LOOP_COMP_LOOP_and_11_itm & and_dcpl_42) | (COMP_LOOP_COMP_LOOP_and_32_itm
      & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_60_itm & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_30_itm
      & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_145_itm & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_86_itm
      & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_nor_4_itm & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_34_itm
      & and_dcpl_74);
  assign COMP_LOOP_or_6_nl = (COMP_LOOP_COMP_LOOP_and_12_itm & and_dcpl_42) | (COMP_LOOP_COMP_LOOP_and_33_itm
      & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_32_itm & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_60_itm
      & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_30_itm & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_145_itm
      & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_86_itm & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_nor_4_itm
      & and_dcpl_74);
  assign COMP_LOOP_or_7_nl = (COMP_LOOP_COMP_LOOP_and_13_itm & and_dcpl_42) | (COMP_LOOP_COMP_LOOP_and_34_itm
      & and_dcpl_48) | (COMP_LOOP_COMP_LOOP_and_33_itm & and_dcpl_53) | (COMP_LOOP_COMP_LOOP_and_32_itm
      & and_dcpl_56) | (COMP_LOOP_COMP_LOOP_and_60_itm & and_dcpl_59) | (COMP_LOOP_COMP_LOOP_and_30_itm
      & and_dcpl_66) | (COMP_LOOP_COMP_LOOP_and_145_itm & and_dcpl_69) | (COMP_LOOP_COMP_LOOP_and_86_itm
      & and_dcpl_74);
  assign COMP_LOOP_or_12_nl = and_dcpl_95 | and_dcpl_120 | and_dcpl_121 | and_dcpl_122
      | and_dcpl_123 | and_dcpl_124 | and_dcpl_125 | and_dcpl_126;
  assign COMP_LOOP_or_13_nl = COMP_LOOP_1_acc_8_itm_mx0c3 | COMP_LOOP_1_acc_8_itm_mx0c7
      | COMP_LOOP_1_acc_8_itm_mx0c10 | COMP_LOOP_1_acc_8_itm_mx0c13 | COMP_LOOP_1_acc_8_itm_mx0c16
      | COMP_LOOP_1_acc_8_itm_mx0c19 | COMP_LOOP_1_acc_8_itm_mx0c22 | COMP_LOOP_1_acc_8_itm_mx0c25;
  assign nor_477_nl = ~((or_731_cse & (fsm_output[2])) | (fsm_output[4:3]!=2'b00));
  assign mux_608_nl = MUX_s_1_2_2(nor_477_nl, (fsm_output[4]), fsm_output[5]);
  assign and_184_nl = and_dcpl_168 & and_dcpl_165 & (COMP_LOOP_3_tmp_mul_idiv_sva_1_0==2'b00);
  assign and_187_nl = and_dcpl_168 & and_dcpl_165 & (COMP_LOOP_3_tmp_mul_idiv_sva_1_0==2'b01);
  assign and_190_nl = and_dcpl_168 & and_dcpl_165 & (COMP_LOOP_3_tmp_mul_idiv_sva_1_0==2'b10);
  assign and_193_nl = and_dcpl_168 & and_dcpl_165 & (COMP_LOOP_3_tmp_mul_idiv_sva_1_0==2'b11);
  assign mux_612_nl = MUX_s_1_2_2(and_dcpl_28, (fsm_output[4]), fsm_output[6]);
  assign mux_610_nl = MUX_s_1_2_2((~ or_tmp_617), (fsm_output[4]), fsm_output[6]);
  assign mux_609_nl = MUX_s_1_2_2((~ or_tmp_617), or_tmp_649, fsm_output[6]);
  assign mux_611_nl = MUX_s_1_2_2(mux_610_nl, mux_609_nl, fsm_output[0]);
  assign mux_613_nl = MUX_s_1_2_2(mux_612_nl, mux_611_nl, fsm_output[1]);
  assign mux_614_nl = MUX_s_1_2_2(mux_613_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_616_nl = MUX_s_1_2_2(or_tmp_38, or_dcpl_51, and_263_cse);
  assign and_210_nl = (fsm_output[6]) & (fsm_output[4]);
  assign mux_615_nl = MUX_s_1_2_2(and_210_nl, and_tmp_15, fsm_output[1]);
  assign mux_617_nl = MUX_s_1_2_2(mux_616_nl, (~ mux_615_nl), fsm_output[5]);
  assign and_202_nl = and_dcpl_167 & (~ (fsm_output[6])) & (COMP_LOOP_5_tmp_mul_idiv_sva[0])
      & and_dcpl_41;
  assign or_734_nl = (fsm_output[6]) | (fsm_output[4]);
  assign mux_618_nl = MUX_s_1_2_2(or_734_nl, or_tmp_651, or_731_cse);
  assign mux_619_nl = MUX_s_1_2_2((~ or_tmp_38), mux_618_nl, fsm_output[7]);
  assign COMP_LOOP_tmp_and_11_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm & and_203_m1c;
  assign COMP_LOOP_tmp_and_12_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt & and_203_m1c;
  assign COMP_LOOP_tmp_and_13_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt & and_203_m1c;
  assign COMP_LOOP_tmp_and_14_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt & and_203_m1c;
  assign COMP_LOOP_tmp_and_15_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm & and_203_m1c;
  assign COMP_LOOP_tmp_and_16_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm & and_203_m1c;
  assign COMP_LOOP_tmp_and_17_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm & and_203_m1c;
  assign mux_622_nl = MUX_s_1_2_2(or_tmp_651, or_tmp_38, and_263_cse);
  assign or_725_nl = (fsm_output[7]) | mux_622_nl;
  assign mux_621_nl = MUX_s_1_2_2(and_tmp_15, and_tmp_16, fsm_output[1]);
  assign nand_31_nl = ~((fsm_output[7]) & mux_621_nl);
  assign mux_623_nl = MUX_s_1_2_2(or_725_nl, nand_31_nl, fsm_output[5]);
  assign COMP_LOOP_tmp_and_18_nl = (~ (COMP_LOOP_2_tmp_mul_idiv_sva[1])) & and_dcpl_98;
  assign COMP_LOOP_tmp_and_19_nl = (COMP_LOOP_2_tmp_mul_idiv_sva[1]) & and_dcpl_98;
  assign COMP_LOOP_tmp_and_5_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm & and_dcpl_101;
  assign COMP_LOOP_tmp_and_6_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm & and_dcpl_101;
  assign COMP_LOOP_tmp_and_7_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_39 & and_dcpl_101;
  assign COMP_LOOP_tmp_and_8_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm & and_dcpl_101;
  assign COMP_LOOP_tmp_and_9_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm & and_dcpl_101;
  assign COMP_LOOP_tmp_and_10_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm & and_dcpl_101;
  assign mux_624_nl = MUX_s_1_2_2(or_tmp_651, or_tmp_38, or_731_cse);
  assign mux_625_nl = MUX_s_1_2_2(mux_624_nl, (~ (fsm_output[6])), fsm_output[7]);
  assign nand_30_nl = ~((fsm_output[7]) & or_tmp_651);
  assign mux_626_nl = MUX_s_1_2_2(mux_625_nl, nand_30_nl, fsm_output[5]);
  assign COMP_LOOP_tmp_and_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse & and_dcpl_102;
  assign COMP_LOOP_tmp_and_2_nl = (COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]==2'b10) &
      and_dcpl_102;
  assign COMP_LOOP_tmp_and_3_nl = (COMP_LOOP_3_tmp_lshift_ncse_sva[1:0]==2'b11) &
      and_dcpl_102;
  assign mux_628_nl = MUX_s_1_2_2(or_tmp_651, or_tmp_38, fsm_output[1]);
  assign mux_627_nl = MUX_s_1_2_2(and_tmp_15, and_tmp_16, and_263_cse);
  assign mux_629_nl = MUX_s_1_2_2((~ mux_628_nl), mux_627_nl, fsm_output[7]);
  assign mux_630_nl = MUX_s_1_2_2(mux_629_nl, nor_tmp_29, fsm_output[5]);
  assign and_533_nl = (fsm_output==8'b11111100);
  assign COMP_LOOP_mux_92_nl = MUX_v_7_2_2(COMP_LOOP_k_10_3_sva_6_0, ({3'b001 , (~
      z_out_5)}), and_533_nl);
  assign nl_z_out_2 = conv_u2u_7_8(COMP_LOOP_mux_92_nl) + 8'b00000001;
  assign z_out_2 = nl_z_out_2[7:0];
  assign COMP_LOOP_mux_93_nl = MUX_v_11_2_2(({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))}),
      STAGE_LOOP_lshift_psp_sva, and_dcpl_240);
  assign COMP_LOOP_COMP_LOOP_nand_1_nl = ~(and_dcpl_240 & (~(and_dcpl_28 & nor_474_cse
      & (~ (fsm_output[7])) & (fsm_output[1]) & and_dcpl_241)));
  assign COMP_LOOP_mux_94_nl = MUX_v_10_2_2(({COMP_LOOP_k_10_3_sva_6_0 , 3'b001}),
      VEC_LOOP_j_10_0_sva_9_0, and_dcpl_240);
  assign nl_acc_1_nl = ({COMP_LOOP_mux_93_nl , COMP_LOOP_COMP_LOOP_nand_1_nl}) +
      conv_u2u_11_12({COMP_LOOP_mux_94_nl , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[11:0];
  assign z_out_3 = readslicef_12_11_1(acc_1_nl);
  assign COMP_LOOP_tmp_mux1h_52_nl = MUX1HOT_v_54_8_2((tmp_16_sva[63:10]), (COMP_LOOP_tmp_mux1h_itm[63:10]),
      (COMP_LOOP_tmp_mux1h_1_itm[63:10]), (COMP_LOOP_tmp_mux1h_2_itm[63:10]), (COMP_LOOP_tmp_mux_itm[63:10]),
      (COMP_LOOP_tmp_mux1h_3_itm[63:10]), (COMP_LOOP_tmp_mux1h_4_itm[63:10]), (tmp_21_sva_3[63:10]),
      {and_dcpl_253 , and_dcpl_256 , and_dcpl_261 , and_dcpl_263 , and_dcpl_268 ,
      and_dcpl_270 , and_dcpl_275 , and_dcpl_277});
  assign COMP_LOOP_tmp_and_28_nl = MUX_v_54_2_2(54'b000000000000000000000000000000000000000000000000000000,
      COMP_LOOP_tmp_mux1h_52_nl, COMP_LOOP_tmp_nor_24_itm);
  assign COMP_LOOP_tmp_mux1h_53_nl = MUX1HOT_s_1_10_2((tmp_16_sva[9]), (COMP_LOOP_tmp_mux1h_itm[9]),
      (COMP_LOOP_tmp_mux1h_1_itm[9]), (COMP_LOOP_tmp_mux1h_2_itm[9]), (COMP_LOOP_tmp_mux_itm[9]),
      (COMP_LOOP_tmp_mux1h_3_itm[9]), (COMP_LOOP_tmp_mux1h_4_itm[9]), (tmp_21_sva_3[9]),
      (z_out_1[9]), (COMP_LOOP_2_tmp_lshift_ncse_sva[9]), {and_dcpl_253 , and_dcpl_256
      , and_dcpl_261 , and_dcpl_263 , and_dcpl_268 , and_dcpl_270 , and_dcpl_275
      , and_dcpl_277 , and_dcpl_278 , COMP_LOOP_tmp_or_31_itm});
  assign COMP_LOOP_tmp_and_29_nl = COMP_LOOP_tmp_mux1h_53_nl & COMP_LOOP_tmp_nor_25_itm;
  assign COMP_LOOP_tmp_or_40_nl = and_dcpl_278 | and_dcpl_285;
  assign COMP_LOOP_tmp_mux1h_54_nl = MUX1HOT_v_9_12_2(({1'b0 , (z_out[7:0])}), (tmp_16_sva[8:0]),
      (COMP_LOOP_tmp_mux1h_itm[8:0]), (COMP_LOOP_tmp_mux1h_1_itm[8:0]), (COMP_LOOP_tmp_mux1h_2_itm[8:0]),
      (COMP_LOOP_tmp_mux_itm[8:0]), (COMP_LOOP_tmp_mux1h_3_itm[8:0]), (COMP_LOOP_tmp_mux1h_4_itm[8:0]),
      (tmp_21_sva_3[8:0]), (z_out_1[8:0]), (COMP_LOOP_2_tmp_lshift_ncse_sva[8:0]),
      COMP_LOOP_3_tmp_lshift_ncse_sva, {and_dcpl_247 , and_dcpl_253 , and_dcpl_256
      , and_dcpl_261 , and_dcpl_263 , and_dcpl_268 , and_dcpl_270 , and_dcpl_275
      , and_dcpl_277 , COMP_LOOP_tmp_or_40_nl , COMP_LOOP_tmp_or_31_itm , and_dcpl_286});
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[63])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[62])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[61])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[60])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[59])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[58])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[57])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[56])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[55])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[54])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[53])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[52])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[51])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[50])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[49])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[48])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[47])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[46])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[45])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[44])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[43])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[42])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[41])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[40])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[39])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[38])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[37])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[36])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[35])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[34])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[33])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[32])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[31])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[30])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[29])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[28])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[27])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[26])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[25])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[24])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[23])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[22])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[21])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[20])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[19])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[18])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[17])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[16])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[15])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[14])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[13])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[12])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[11])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[10])
      & COMP_LOOP_tmp_nor_24_itm;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl = MUX_s_1_2_2((COMP_LOOP_1_modulo_cmp_return_rsc_z[9]),
      (COMP_LOOP_k_10_3_sva_6_0[6]), COMP_LOOP_tmp_or_35_itm);
  assign COMP_LOOP_tmp_and_30_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl & COMP_LOOP_tmp_nor_25_itm;
  assign COMP_LOOP_tmp_mux1h_55_nl = MUX1HOT_v_6_4_2(({1'b0 , (COMP_LOOP_k_10_3_sva_6_0[6:2])}),
      (COMP_LOOP_1_modulo_cmp_return_rsc_z[8:3]), (COMP_LOOP_k_10_3_sva_6_0[5:0]),
      (COMP_LOOP_k_10_3_sva_6_0[6:1]), {and_dcpl_247 , COMP_LOOP_tmp_or_15_ssc ,
      COMP_LOOP_tmp_or_35_itm , COMP_LOOP_tmp_or_37_itm});
  assign COMP_LOOP_tmp_mux1h_56_nl = MUX1HOT_s_1_3_2((COMP_LOOP_k_10_3_sva_6_0[1]),
      (COMP_LOOP_1_modulo_cmp_return_rsc_z[2]), (COMP_LOOP_k_10_3_sva_6_0[0]), {and_dcpl_247
      , COMP_LOOP_tmp_or_15_ssc , COMP_LOOP_tmp_or_37_itm});
  assign COMP_LOOP_tmp_or_41_nl = (COMP_LOOP_tmp_mux1h_56_nl & (~(and_dcpl_278 |
      and_dcpl_280))) | and_dcpl_281 | and_dcpl_284;
  assign COMP_LOOP_tmp_mux_8_nl = MUX_s_1_2_2((COMP_LOOP_k_10_3_sva_6_0[0]), (COMP_LOOP_1_modulo_cmp_return_rsc_z[1]),
      COMP_LOOP_tmp_or_15_ssc);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl = (COMP_LOOP_tmp_mux_8_nl & (~(and_dcpl_278
      | and_dcpl_281 | and_dcpl_285))) | and_dcpl_280 | and_dcpl_284 | and_dcpl_286;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[0])
      | and_dcpl_247 | and_dcpl_278 | and_dcpl_280 | and_dcpl_281 | and_dcpl_284
      | and_dcpl_285 | and_dcpl_286;
  assign nl_z_out_4 = ({COMP_LOOP_tmp_and_28_nl , COMP_LOOP_tmp_and_29_nl , COMP_LOOP_tmp_mux1h_54_nl})
      * ({COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl
      , COMP_LOOP_tmp_and_30_nl , COMP_LOOP_tmp_mux1h_55_nl , COMP_LOOP_tmp_or_41_nl
      , COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl});
  assign z_out_4 = nl_z_out_4[63:0];
  assign STAGE_LOOP_mux_4_nl = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, (~ STAGE_LOOP_i_3_0_sva),
      and_dcpl_300);
  assign nl_z_out_5 = STAGE_LOOP_mux_4_nl + ({1'b1 , (~ and_dcpl_300) , 2'b11});
  assign z_out_5 = nl_z_out_5[3:0];
  assign COMP_LOOP_mux_95_cse = MUX_v_64_2_2(z_out_8, COMP_LOOP_1_acc_8_itm, COMP_LOOP_or_9_itm);
  assign COMP_LOOP_mux1h_178_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_86_itm,
      COMP_LOOP_COMP_LOOP_nor_5_itm, COMP_LOOP_COMP_LOOP_nor_1_itm, COMP_LOOP_COMP_LOOP_nor_13_itm,
      COMP_LOOP_COMP_LOOP_nor_17_itm, COMP_LOOP_COMP_LOOP_nor_21_itm, COMP_LOOP_COMP_LOOP_nor_25_itm,
      COMP_LOOP_COMP_LOOP_nor_29_itm, {and_dcpl_377 , and_437_cse , and_441_cse ,
      and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_COMP_LOOP_and_210_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_211_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_212_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_213_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_214_nl = (COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_215_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]==3'b001);
  assign COMP_LOOP_COMP_LOOP_and_216_nl = (COMP_LOOP_acc_10_cse_10_1_sva[2:0]==3'b001);
  assign COMP_LOOP_mux1h_179_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_145_itm,
      COMP_LOOP_COMP_LOOP_and_210_nl, COMP_LOOP_COMP_LOOP_and_211_nl, COMP_LOOP_COMP_LOOP_and_212_nl,
      COMP_LOOP_COMP_LOOP_and_213_nl, COMP_LOOP_COMP_LOOP_and_214_nl, COMP_LOOP_COMP_LOOP_and_215_nl,
      COMP_LOOP_COMP_LOOP_and_216_nl, {and_dcpl_377 , and_437_cse , and_441_cse ,
      and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_COMP_LOOP_and_217_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_218_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_219_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_220_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_221_nl = (COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_222_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]==3'b010);
  assign COMP_LOOP_COMP_LOOP_and_223_nl = (COMP_LOOP_acc_10_cse_10_1_sva[2:0]==3'b010);
  assign COMP_LOOP_mux1h_180_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_30_itm,
      COMP_LOOP_COMP_LOOP_and_217_nl, COMP_LOOP_COMP_LOOP_and_218_nl, COMP_LOOP_COMP_LOOP_and_219_nl,
      COMP_LOOP_COMP_LOOP_and_220_nl, COMP_LOOP_COMP_LOOP_and_221_nl, COMP_LOOP_COMP_LOOP_and_222_nl,
      COMP_LOOP_COMP_LOOP_and_223_nl, {and_dcpl_377 , and_437_cse , and_441_cse ,
      and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_mux1h_181_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_60_itm,
      COMP_LOOP_COMP_LOOP_and_37_itm, COMP_LOOP_COMP_LOOP_and_11_itm, COMP_LOOP_COMP_LOOP_and_93_itm,
      COMP_LOOP_COMP_LOOP_and_121_itm, COMP_LOOP_COMP_LOOP_and_149_itm, COMP_LOOP_COMP_LOOP_and_177_itm,
      COMP_LOOP_COMP_LOOP_and_205_itm, {and_dcpl_377 , and_437_cse , and_441_cse
      , and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_COMP_LOOP_and_224_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_225_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_226_nl = (COMP_LOOP_acc_10_cse_10_1_4_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_227_nl = (COMP_LOOP_acc_10_cse_10_1_5_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_228_nl = (COMP_LOOP_acc_10_cse_10_1_6_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_229_nl = (COMP_LOOP_acc_10_cse_10_1_7_sva[2:0]==3'b100);
  assign COMP_LOOP_COMP_LOOP_and_230_nl = (COMP_LOOP_acc_10_cse_10_1_sva[2:0]==3'b100);
  assign COMP_LOOP_mux1h_182_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_32_itm,
      COMP_LOOP_COMP_LOOP_and_224_nl, COMP_LOOP_COMP_LOOP_and_225_nl, COMP_LOOP_COMP_LOOP_and_226_nl,
      COMP_LOOP_COMP_LOOP_and_227_nl, COMP_LOOP_COMP_LOOP_and_228_nl, COMP_LOOP_COMP_LOOP_and_229_nl,
      COMP_LOOP_COMP_LOOP_and_230_nl, {and_dcpl_377 , and_437_cse , and_441_cse ,
      and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_mux1h_183_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_33_itm,
      COMP_LOOP_COMP_LOOP_and_39_itm, COMP_LOOP_COMP_LOOP_and_12_itm, COMP_LOOP_COMP_LOOP_and_95_itm,
      COMP_LOOP_COMP_LOOP_and_123_itm, COMP_LOOP_COMP_LOOP_and_151_itm, COMP_LOOP_COMP_LOOP_and_179_itm,
      COMP_LOOP_COMP_LOOP_and_207_itm, {and_dcpl_377 , and_437_cse , and_441_cse
      , and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_mux1h_184_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_34_itm,
      COMP_LOOP_COMP_LOOP_and_40_itm, COMP_LOOP_COMP_LOOP_and_13_itm, COMP_LOOP_COMP_LOOP_and_96_itm,
      COMP_LOOP_COMP_LOOP_and_124_itm, COMP_LOOP_COMP_LOOP_and_152_itm, COMP_LOOP_COMP_LOOP_and_180_itm,
      COMP_LOOP_COMP_LOOP_and_208_itm, {and_dcpl_377 , and_437_cse , and_441_cse
      , and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign COMP_LOOP_mux1h_185_nl = MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_nor_4_itm,
      COMP_LOOP_COMP_LOOP_and_41_itm, COMP_LOOP_COMP_LOOP_and_69_itm, COMP_LOOP_COMP_LOOP_and_97_itm,
      COMP_LOOP_COMP_LOOP_and_125_itm, COMP_LOOP_COMP_LOOP_and_153_itm, COMP_LOOP_COMP_LOOP_and_181_itm,
      COMP_LOOP_COMP_LOOP_and_209_itm, {and_dcpl_377 , and_437_cse , and_441_cse
      , and_443_cse , and_446_cse , and_452_cse , and_455_cse , and_459_cse});
  assign z_out_8 = MUX1HOT_v_64_8_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d,
      vec_rsc_0_3_i_q_d, vec_rsc_0_4_i_q_d, vec_rsc_0_5_i_q_d, vec_rsc_0_6_i_q_d,
      vec_rsc_0_7_i_q_d, {COMP_LOOP_mux1h_178_nl , COMP_LOOP_mux1h_179_nl , COMP_LOOP_mux1h_180_nl
      , COMP_LOOP_mux1h_181_nl , COMP_LOOP_mux1h_182_nl , COMP_LOOP_mux1h_183_nl
      , COMP_LOOP_mux1h_184_nl , COMP_LOOP_mux1h_185_nl});

  function automatic [0:0] MUX1HOT_s_1_10_2;
    input [0:0] input_9;
    input [0:0] input_8;
    input [0:0] input_7;
    input [0:0] input_6;
    input [0:0] input_5;
    input [0:0] input_4;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [9:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    result = result | ( input_4 & {1{sel[4]}});
    result = result | ( input_5 & {1{sel[5]}});
    result = result | ( input_6 & {1{sel[6]}});
    result = result | ( input_7 & {1{sel[7]}});
    result = result | ( input_8 & {1{sel[8]}});
    result = result | ( input_9 & {1{sel[9]}});
    MUX1HOT_s_1_10_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_8_2;
    input [0:0] input_7;
    input [0:0] input_6;
    input [0:0] input_5;
    input [0:0] input_4;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [7:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    result = result | ( input_4 & {1{sel[4]}});
    result = result | ( input_5 & {1{sel[5]}});
    result = result | ( input_6 & {1{sel[6]}});
    result = result | ( input_7 & {1{sel[7]}});
    MUX1HOT_s_1_8_2 = result;
  end
  endfunction


  function automatic [53:0] MUX1HOT_v_54_8_2;
    input [53:0] input_7;
    input [53:0] input_6;
    input [53:0] input_5;
    input [53:0] input_4;
    input [53:0] input_3;
    input [53:0] input_2;
    input [53:0] input_1;
    input [53:0] input_0;
    input [7:0] sel;
    reg [53:0] result;
  begin
    result = input_0 & {54{sel[0]}};
    result = result | ( input_1 & {54{sel[1]}});
    result = result | ( input_2 & {54{sel[2]}});
    result = result | ( input_3 & {54{sel[3]}});
    result = result | ( input_4 & {54{sel[4]}});
    result = result | ( input_5 & {54{sel[5]}});
    result = result | ( input_6 & {54{sel[6]}});
    result = result | ( input_7 & {54{sel[7]}});
    MUX1HOT_v_54_8_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_12_2;
    input [63:0] input_11;
    input [63:0] input_10;
    input [63:0] input_9;
    input [63:0] input_8;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [11:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    result = result | ( input_8 & {64{sel[8]}});
    result = result | ( input_9 & {64{sel[9]}});
    result = result | ( input_10 & {64{sel[10]}});
    result = result | ( input_11 & {64{sel[11]}});
    MUX1HOT_v_64_12_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_8_2;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [7:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    MUX1HOT_v_64_8_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_9_2;
    input [63:0] input_8;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [8:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    result = result | ( input_8 & {64{sel[8]}});
    MUX1HOT_v_64_9_2 = result;
  end
  endfunction


  function automatic [5:0] MUX1HOT_v_6_4_2;
    input [5:0] input_3;
    input [5:0] input_2;
    input [5:0] input_1;
    input [5:0] input_0;
    input [3:0] sel;
    reg [5:0] result;
  begin
    result = input_0 & {6{sel[0]}};
    result = result | ( input_1 & {6{sel[1]}});
    result = result | ( input_2 & {6{sel[2]}});
    result = result | ( input_3 & {6{sel[3]}});
    MUX1HOT_v_6_4_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_16_2;
    input [6:0] input_15;
    input [6:0] input_14;
    input [6:0] input_13;
    input [6:0] input_12;
    input [6:0] input_11;
    input [6:0] input_10;
    input [6:0] input_9;
    input [6:0] input_8;
    input [6:0] input_7;
    input [6:0] input_6;
    input [6:0] input_5;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [15:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    result = result | ( input_3 & {7{sel[3]}});
    result = result | ( input_4 & {7{sel[4]}});
    result = result | ( input_5 & {7{sel[5]}});
    result = result | ( input_6 & {7{sel[6]}});
    result = result | ( input_7 & {7{sel[7]}});
    result = result | ( input_8 & {7{sel[8]}});
    result = result | ( input_9 & {7{sel[9]}});
    result = result | ( input_10 & {7{sel[10]}});
    result = result | ( input_11 & {7{sel[11]}});
    result = result | ( input_12 & {7{sel[12]}});
    result = result | ( input_13 & {7{sel[13]}});
    result = result | ( input_14 & {7{sel[14]}});
    result = result | ( input_15 & {7{sel[15]}});
    MUX1HOT_v_7_16_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_6_2;
    input [6:0] input_5;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [5:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    result = result | ( input_3 & {7{sel[3]}});
    result = result | ( input_4 & {7{sel[4]}});
    result = result | ( input_5 & {7{sel[5]}});
    MUX1HOT_v_7_6_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_7_2;
    input [6:0] input_6;
    input [6:0] input_5;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [6:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    result = result | ( input_3 & {7{sel[3]}});
    result = result | ( input_4 & {7{sel[4]}});
    result = result | ( input_5 & {7{sel[5]}});
    result = result | ( input_6 & {7{sel[6]}});
    MUX1HOT_v_7_7_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_12_2;
    input [8:0] input_11;
    input [8:0] input_10;
    input [8:0] input_9;
    input [8:0] input_8;
    input [8:0] input_7;
    input [8:0] input_6;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [11:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    result = result | ( input_5 & {9{sel[5]}});
    result = result | ( input_6 & {9{sel[6]}});
    result = result | ( input_7 & {9{sel[7]}});
    result = result | ( input_8 & {9{sel[8]}});
    result = result | ( input_9 & {9{sel[9]}});
    result = result | ( input_10 & {9{sel[10]}});
    result = result | ( input_11 & {9{sel[11]}});
    MUX1HOT_v_9_12_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [53:0] MUX_v_54_2_2;
    input [53:0] input_0;
    input [53:0] input_1;
    input [0:0] sel;
    reg [53:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_54_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, vec_rsc_0_2_wadr, vec_rsc_0_2_d, vec_rsc_0_2_we,
      vec_rsc_0_2_radr, vec_rsc_0_2_q, vec_rsc_triosy_0_2_lz, vec_rsc_0_3_wadr, vec_rsc_0_3_d,
      vec_rsc_0_3_we, vec_rsc_0_3_radr, vec_rsc_0_3_q, vec_rsc_triosy_0_3_lz, vec_rsc_0_4_wadr,
      vec_rsc_0_4_d, vec_rsc_0_4_we, vec_rsc_0_4_radr, vec_rsc_0_4_q, vec_rsc_triosy_0_4_lz,
      vec_rsc_0_5_wadr, vec_rsc_0_5_d, vec_rsc_0_5_we, vec_rsc_0_5_radr, vec_rsc_0_5_q,
      vec_rsc_triosy_0_5_lz, vec_rsc_0_6_wadr, vec_rsc_0_6_d, vec_rsc_0_6_we, vec_rsc_0_6_radr,
      vec_rsc_0_6_q, vec_rsc_triosy_0_6_lz, vec_rsc_0_7_wadr, vec_rsc_0_7_d, vec_rsc_0_7_we,
      vec_rsc_0_7_radr, vec_rsc_0_7_q, vec_rsc_triosy_0_7_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_dat, r_rsc_triosy_lz, twiddle_rsc_0_0_radr, twiddle_rsc_0_0_q, twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_0_1_radr, twiddle_rsc_0_1_q, twiddle_rsc_triosy_0_1_lz, twiddle_rsc_0_2_radr,
      twiddle_rsc_0_2_q, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_0_3_radr, twiddle_rsc_0_3_q,
      twiddle_rsc_triosy_0_3_lz, twiddle_rsc_0_4_radr, twiddle_rsc_0_4_q, twiddle_rsc_triosy_0_4_lz,
      twiddle_rsc_0_5_radr, twiddle_rsc_0_5_q, twiddle_rsc_triosy_0_5_lz, twiddle_rsc_0_6_radr,
      twiddle_rsc_0_6_q, twiddle_rsc_triosy_0_6_lz, twiddle_rsc_0_7_radr, twiddle_rsc_0_7_q,
      twiddle_rsc_triosy_0_7_lz
);
  input clk;
  input rst;
  output [6:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [6:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [6:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [6:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  output [6:0] vec_rsc_0_2_wadr;
  output [63:0] vec_rsc_0_2_d;
  output vec_rsc_0_2_we;
  output [6:0] vec_rsc_0_2_radr;
  input [63:0] vec_rsc_0_2_q;
  output vec_rsc_triosy_0_2_lz;
  output [6:0] vec_rsc_0_3_wadr;
  output [63:0] vec_rsc_0_3_d;
  output vec_rsc_0_3_we;
  output [6:0] vec_rsc_0_3_radr;
  input [63:0] vec_rsc_0_3_q;
  output vec_rsc_triosy_0_3_lz;
  output [6:0] vec_rsc_0_4_wadr;
  output [63:0] vec_rsc_0_4_d;
  output vec_rsc_0_4_we;
  output [6:0] vec_rsc_0_4_radr;
  input [63:0] vec_rsc_0_4_q;
  output vec_rsc_triosy_0_4_lz;
  output [6:0] vec_rsc_0_5_wadr;
  output [63:0] vec_rsc_0_5_d;
  output vec_rsc_0_5_we;
  output [6:0] vec_rsc_0_5_radr;
  input [63:0] vec_rsc_0_5_q;
  output vec_rsc_triosy_0_5_lz;
  output [6:0] vec_rsc_0_6_wadr;
  output [63:0] vec_rsc_0_6_d;
  output vec_rsc_0_6_we;
  output [6:0] vec_rsc_0_6_radr;
  input [63:0] vec_rsc_0_6_q;
  output vec_rsc_triosy_0_6_lz;
  output [6:0] vec_rsc_0_7_wadr;
  output [63:0] vec_rsc_0_7_d;
  output vec_rsc_0_7_we;
  output [6:0] vec_rsc_0_7_radr;
  input [63:0] vec_rsc_0_7_q;
  output vec_rsc_triosy_0_7_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  output [6:0] twiddle_rsc_0_0_radr;
  input [63:0] twiddle_rsc_0_0_q;
  output twiddle_rsc_triosy_0_0_lz;
  output [6:0] twiddle_rsc_0_1_radr;
  input [63:0] twiddle_rsc_0_1_q;
  output twiddle_rsc_triosy_0_1_lz;
  output [6:0] twiddle_rsc_0_2_radr;
  input [63:0] twiddle_rsc_0_2_q;
  output twiddle_rsc_triosy_0_2_lz;
  output [6:0] twiddle_rsc_0_3_radr;
  input [63:0] twiddle_rsc_0_3_q;
  output twiddle_rsc_triosy_0_3_lz;
  output [6:0] twiddle_rsc_0_4_radr;
  input [63:0] twiddle_rsc_0_4_q;
  output twiddle_rsc_triosy_0_4_lz;
  output [6:0] twiddle_rsc_0_5_radr;
  input [63:0] twiddle_rsc_0_5_q;
  output twiddle_rsc_triosy_0_5_lz;
  output [6:0] twiddle_rsc_0_6_radr;
  input [63:0] twiddle_rsc_0_6_q;
  output twiddle_rsc_triosy_0_6_lz;
  output [6:0] twiddle_rsc_0_7_radr;
  input [63:0] twiddle_rsc_0_7_q;
  output twiddle_rsc_triosy_0_7_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_q_d;
  wire vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_q_d;
  wire vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_4_i_q_d;
  wire vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_5_i_q_d;
  wire vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_6_i_q_d;
  wire vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_7_i_q_d;
  wire vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_0_i_q_d;
  wire [6:0] twiddle_rsc_0_0_i_radr_d;
  wire twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_1_i_q_d;
  wire twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_2_i_q_d;
  wire twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_3_i_q_d;
  wire twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_4_i_q_d;
  wire [6:0] twiddle_rsc_0_4_i_radr_d;
  wire twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_5_i_q_d;
  wire twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_6_i_q_d;
  wire twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_7_i_q_d;
  wire twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [6:0] vec_rsc_0_0_i_radr_d_iff;
  wire [6:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;
  wire vec_rsc_0_2_i_we_d_iff;
  wire vec_rsc_0_3_i_we_d_iff;
  wire vec_rsc_0_4_i_we_d_iff;
  wire vec_rsc_0_5_i_we_d_iff;
  wire vec_rsc_0_6_i_we_d_iff;
  wire vec_rsc_0_7_i_we_d_iff;
  wire [6:0] twiddle_rsc_0_1_i_radr_d_iff;
  wire [6:0] twiddle_rsc_0_2_i_radr_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen vec_rsc_0_2_i
      (
      .q(vec_rsc_0_2_q),
      .radr(vec_rsc_0_2_radr),
      .we(vec_rsc_0_2_we),
      .d(vec_rsc_0_2_d),
      .wadr(vec_rsc_0_2_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_2_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen vec_rsc_0_3_i
      (
      .q(vec_rsc_0_3_q),
      .radr(vec_rsc_0_3_radr),
      .we(vec_rsc_0_3_we),
      .d(vec_rsc_0_3_d),
      .wadr(vec_rsc_0_3_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_3_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen vec_rsc_0_4_i
      (
      .q(vec_rsc_0_4_q),
      .radr(vec_rsc_0_4_radr),
      .we(vec_rsc_0_4_we),
      .d(vec_rsc_0_4_d),
      .wadr(vec_rsc_0_4_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_4_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_4_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_4_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen vec_rsc_0_5_i
      (
      .q(vec_rsc_0_5_q),
      .radr(vec_rsc_0_5_radr),
      .we(vec_rsc_0_5_we),
      .d(vec_rsc_0_5_d),
      .wadr(vec_rsc_0_5_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_5_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_5_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_5_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen vec_rsc_0_6_i
      (
      .q(vec_rsc_0_6_q),
      .radr(vec_rsc_0_6_radr),
      .we(vec_rsc_0_6_we),
      .d(vec_rsc_0_6_d),
      .wadr(vec_rsc_0_6_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_6_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_6_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_6_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen vec_rsc_0_7_i
      (
      .q(vec_rsc_0_7_q),
      .radr(vec_rsc_0_7_radr),
      .we(vec_rsc_0_7_we),
      .d(vec_rsc_0_7_d),
      .wadr(vec_rsc_0_7_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_7_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_7_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_7_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen twiddle_rsc_0_0_i
      (
      .q(twiddle_rsc_0_0_q),
      .radr(twiddle_rsc_0_0_radr),
      .q_d(twiddle_rsc_0_0_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen twiddle_rsc_0_1_i
      (
      .q(twiddle_rsc_0_1_q),
      .radr(twiddle_rsc_0_1_radr),
      .q_d(twiddle_rsc_0_1_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen twiddle_rsc_0_2_i
      (
      .q(twiddle_rsc_0_2_q),
      .radr(twiddle_rsc_0_2_radr),
      .q_d(twiddle_rsc_0_2_i_q_d),
      .radr_d(twiddle_rsc_0_2_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen twiddle_rsc_0_3_i
      (
      .q(twiddle_rsc_0_3_q),
      .radr(twiddle_rsc_0_3_radr),
      .q_d(twiddle_rsc_0_3_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen twiddle_rsc_0_4_i
      (
      .q(twiddle_rsc_0_4_q),
      .radr(twiddle_rsc_0_4_radr),
      .q_d(twiddle_rsc_0_4_i_q_d),
      .radr_d(twiddle_rsc_0_4_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen twiddle_rsc_0_5_i
      (
      .q(twiddle_rsc_0_5_q),
      .radr(twiddle_rsc_0_5_radr),
      .q_d(twiddle_rsc_0_5_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen twiddle_rsc_0_6_i
      (
      .q(twiddle_rsc_0_6_q),
      .radr(twiddle_rsc_0_6_radr),
      .q_d(twiddle_rsc_0_6_i_q_d),
      .radr_d(twiddle_rsc_0_2_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen twiddle_rsc_0_7_i
      (
      .q(twiddle_rsc_0_7_q),
      .radr(twiddle_rsc_0_7_radr),
      .q_d(twiddle_rsc_0_7_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .vec_rsc_triosy_0_4_lz(vec_rsc_triosy_0_4_lz),
      .vec_rsc_triosy_0_5_lz(vec_rsc_triosy_0_5_lz),
      .vec_rsc_triosy_0_6_lz(vec_rsc_triosy_0_6_lz),
      .vec_rsc_triosy_0_7_lz(vec_rsc_triosy_0_7_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .twiddle_rsc_triosy_0_2_lz(twiddle_rsc_triosy_0_2_lz),
      .twiddle_rsc_triosy_0_3_lz(twiddle_rsc_triosy_0_3_lz),
      .twiddle_rsc_triosy_0_4_lz(twiddle_rsc_triosy_0_4_lz),
      .twiddle_rsc_triosy_0_5_lz(twiddle_rsc_triosy_0_5_lz),
      .twiddle_rsc_triosy_0_6_lz(twiddle_rsc_triosy_0_6_lz),
      .twiddle_rsc_triosy_0_7_lz(twiddle_rsc_triosy_0_7_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_q_d(vec_rsc_0_2_i_q_d),
      .vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_q_d(vec_rsc_0_3_i_q_d),
      .vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_4_i_q_d(vec_rsc_0_4_i_q_d),
      .vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_5_i_q_d(vec_rsc_0_5_i_q_d),
      .vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_6_i_q_d(vec_rsc_0_6_i_q_d),
      .vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_7_i_q_d(vec_rsc_0_7_i_q_d),
      .vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_0_i_q_d(twiddle_rsc_0_0_i_q_d),
      .twiddle_rsc_0_0_i_radr_d(twiddle_rsc_0_0_i_radr_d),
      .twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_1_i_q_d(twiddle_rsc_0_1_i_q_d),
      .twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_2_i_q_d(twiddle_rsc_0_2_i_q_d),
      .twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_3_i_q_d(twiddle_rsc_0_3_i_q_d),
      .twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_4_i_q_d(twiddle_rsc_0_4_i_q_d),
      .twiddle_rsc_0_4_i_radr_d(twiddle_rsc_0_4_i_radr_d),
      .twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_5_i_q_d(twiddle_rsc_0_5_i_q_d),
      .twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_6_i_q_d(twiddle_rsc_0_6_i_q_d),
      .twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_7_i_q_d(twiddle_rsc_0_7_i_q_d),
      .twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff),
      .vec_rsc_0_2_i_we_d_pff(vec_rsc_0_2_i_we_d_iff),
      .vec_rsc_0_3_i_we_d_pff(vec_rsc_0_3_i_we_d_iff),
      .vec_rsc_0_4_i_we_d_pff(vec_rsc_0_4_i_we_d_iff),
      .vec_rsc_0_5_i_we_d_pff(vec_rsc_0_5_i_we_d_iff),
      .vec_rsc_0_6_i_we_d_pff(vec_rsc_0_6_i_we_d_iff),
      .vec_rsc_0_7_i_we_d_pff(vec_rsc_0_7_i_we_d_iff),
      .twiddle_rsc_0_1_i_radr_d_pff(twiddle_rsc_0_1_i_radr_d_iff),
      .twiddle_rsc_0_2_i_radr_d_pff(twiddle_rsc_0_2_i_radr_d_iff)
    );
endmodule



