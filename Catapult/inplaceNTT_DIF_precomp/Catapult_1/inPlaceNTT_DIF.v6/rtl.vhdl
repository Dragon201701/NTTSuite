-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   yl7897@newnano.poly.edu
--  Generated date: Mon Aug  2 17:18:27 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen;

ARCHITECTURE v6 OF inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    COMP_LOOP_C_31_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_62_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_93_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_124_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_155_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_186_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_217_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_248_tr0 : IN STD_LOGIC;
    VEC_LOOP_C_0_tr0 : IN STD_LOGIC;
    STAGE_LOOP_C_1_tr0 : IN STD_LOGIC
  );
END inPlaceNTT_DIF_core_core_fsm;

ARCHITECTURE v6 OF inPlaceNTT_DIF_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  TYPE inPlaceNTT_DIF_core_core_fsm_1_ST IS (main_C_0, STAGE_LOOP_C_0, COMP_LOOP_C_0,
      COMP_LOOP_C_1, COMP_LOOP_C_2, COMP_LOOP_C_3, COMP_LOOP_C_4, COMP_LOOP_C_5,
      COMP_LOOP_C_6, COMP_LOOP_C_7, COMP_LOOP_C_8, COMP_LOOP_C_9, COMP_LOOP_C_10,
      COMP_LOOP_C_11, COMP_LOOP_C_12, COMP_LOOP_C_13, COMP_LOOP_C_14, COMP_LOOP_C_15,
      COMP_LOOP_C_16, COMP_LOOP_C_17, COMP_LOOP_C_18, COMP_LOOP_C_19, COMP_LOOP_C_20,
      COMP_LOOP_C_21, COMP_LOOP_C_22, COMP_LOOP_C_23, COMP_LOOP_C_24, COMP_LOOP_C_25,
      COMP_LOOP_C_26, COMP_LOOP_C_27, COMP_LOOP_C_28, COMP_LOOP_C_29, COMP_LOOP_C_30,
      COMP_LOOP_C_31, COMP_LOOP_C_32, COMP_LOOP_C_33, COMP_LOOP_C_34, COMP_LOOP_C_35,
      COMP_LOOP_C_36, COMP_LOOP_C_37, COMP_LOOP_C_38, COMP_LOOP_C_39, COMP_LOOP_C_40,
      COMP_LOOP_C_41, COMP_LOOP_C_42, COMP_LOOP_C_43, COMP_LOOP_C_44, COMP_LOOP_C_45,
      COMP_LOOP_C_46, COMP_LOOP_C_47, COMP_LOOP_C_48, COMP_LOOP_C_49, COMP_LOOP_C_50,
      COMP_LOOP_C_51, COMP_LOOP_C_52, COMP_LOOP_C_53, COMP_LOOP_C_54, COMP_LOOP_C_55,
      COMP_LOOP_C_56, COMP_LOOP_C_57, COMP_LOOP_C_58, COMP_LOOP_C_59, COMP_LOOP_C_60,
      COMP_LOOP_C_61, COMP_LOOP_C_62, COMP_LOOP_C_63, COMP_LOOP_C_64, COMP_LOOP_C_65,
      COMP_LOOP_C_66, COMP_LOOP_C_67, COMP_LOOP_C_68, COMP_LOOP_C_69, COMP_LOOP_C_70,
      COMP_LOOP_C_71, COMP_LOOP_C_72, COMP_LOOP_C_73, COMP_LOOP_C_74, COMP_LOOP_C_75,
      COMP_LOOP_C_76, COMP_LOOP_C_77, COMP_LOOP_C_78, COMP_LOOP_C_79, COMP_LOOP_C_80,
      COMP_LOOP_C_81, COMP_LOOP_C_82, COMP_LOOP_C_83, COMP_LOOP_C_84, COMP_LOOP_C_85,
      COMP_LOOP_C_86, COMP_LOOP_C_87, COMP_LOOP_C_88, COMP_LOOP_C_89, COMP_LOOP_C_90,
      COMP_LOOP_C_91, COMP_LOOP_C_92, COMP_LOOP_C_93, COMP_LOOP_C_94, COMP_LOOP_C_95,
      COMP_LOOP_C_96, COMP_LOOP_C_97, COMP_LOOP_C_98, COMP_LOOP_C_99, COMP_LOOP_C_100,
      COMP_LOOP_C_101, COMP_LOOP_C_102, COMP_LOOP_C_103, COMP_LOOP_C_104, COMP_LOOP_C_105,
      COMP_LOOP_C_106, COMP_LOOP_C_107, COMP_LOOP_C_108, COMP_LOOP_C_109, COMP_LOOP_C_110,
      COMP_LOOP_C_111, COMP_LOOP_C_112, COMP_LOOP_C_113, COMP_LOOP_C_114, COMP_LOOP_C_115,
      COMP_LOOP_C_116, COMP_LOOP_C_117, COMP_LOOP_C_118, COMP_LOOP_C_119, COMP_LOOP_C_120,
      COMP_LOOP_C_121, COMP_LOOP_C_122, COMP_LOOP_C_123, COMP_LOOP_C_124, COMP_LOOP_C_125,
      COMP_LOOP_C_126, COMP_LOOP_C_127, COMP_LOOP_C_128, COMP_LOOP_C_129, COMP_LOOP_C_130,
      COMP_LOOP_C_131, COMP_LOOP_C_132, COMP_LOOP_C_133, COMP_LOOP_C_134, COMP_LOOP_C_135,
      COMP_LOOP_C_136, COMP_LOOP_C_137, COMP_LOOP_C_138, COMP_LOOP_C_139, COMP_LOOP_C_140,
      COMP_LOOP_C_141, COMP_LOOP_C_142, COMP_LOOP_C_143, COMP_LOOP_C_144, COMP_LOOP_C_145,
      COMP_LOOP_C_146, COMP_LOOP_C_147, COMP_LOOP_C_148, COMP_LOOP_C_149, COMP_LOOP_C_150,
      COMP_LOOP_C_151, COMP_LOOP_C_152, COMP_LOOP_C_153, COMP_LOOP_C_154, COMP_LOOP_C_155,
      COMP_LOOP_C_156, COMP_LOOP_C_157, COMP_LOOP_C_158, COMP_LOOP_C_159, COMP_LOOP_C_160,
      COMP_LOOP_C_161, COMP_LOOP_C_162, COMP_LOOP_C_163, COMP_LOOP_C_164, COMP_LOOP_C_165,
      COMP_LOOP_C_166, COMP_LOOP_C_167, COMP_LOOP_C_168, COMP_LOOP_C_169, COMP_LOOP_C_170,
      COMP_LOOP_C_171, COMP_LOOP_C_172, COMP_LOOP_C_173, COMP_LOOP_C_174, COMP_LOOP_C_175,
      COMP_LOOP_C_176, COMP_LOOP_C_177, COMP_LOOP_C_178, COMP_LOOP_C_179, COMP_LOOP_C_180,
      COMP_LOOP_C_181, COMP_LOOP_C_182, COMP_LOOP_C_183, COMP_LOOP_C_184, COMP_LOOP_C_185,
      COMP_LOOP_C_186, COMP_LOOP_C_187, COMP_LOOP_C_188, COMP_LOOP_C_189, COMP_LOOP_C_190,
      COMP_LOOP_C_191, COMP_LOOP_C_192, COMP_LOOP_C_193, COMP_LOOP_C_194, COMP_LOOP_C_195,
      COMP_LOOP_C_196, COMP_LOOP_C_197, COMP_LOOP_C_198, COMP_LOOP_C_199, COMP_LOOP_C_200,
      COMP_LOOP_C_201, COMP_LOOP_C_202, COMP_LOOP_C_203, COMP_LOOP_C_204, COMP_LOOP_C_205,
      COMP_LOOP_C_206, COMP_LOOP_C_207, COMP_LOOP_C_208, COMP_LOOP_C_209, COMP_LOOP_C_210,
      COMP_LOOP_C_211, COMP_LOOP_C_212, COMP_LOOP_C_213, COMP_LOOP_C_214, COMP_LOOP_C_215,
      COMP_LOOP_C_216, COMP_LOOP_C_217, COMP_LOOP_C_218, COMP_LOOP_C_219, COMP_LOOP_C_220,
      COMP_LOOP_C_221, COMP_LOOP_C_222, COMP_LOOP_C_223, COMP_LOOP_C_224, COMP_LOOP_C_225,
      COMP_LOOP_C_226, COMP_LOOP_C_227, COMP_LOOP_C_228, COMP_LOOP_C_229, COMP_LOOP_C_230,
      COMP_LOOP_C_231, COMP_LOOP_C_232, COMP_LOOP_C_233, COMP_LOOP_C_234, COMP_LOOP_C_235,
      COMP_LOOP_C_236, COMP_LOOP_C_237, COMP_LOOP_C_238, COMP_LOOP_C_239, COMP_LOOP_C_240,
      COMP_LOOP_C_241, COMP_LOOP_C_242, COMP_LOOP_C_243, COMP_LOOP_C_244, COMP_LOOP_C_245,
      COMP_LOOP_C_246, COMP_LOOP_C_247, COMP_LOOP_C_248, VEC_LOOP_C_0, STAGE_LOOP_C_1,
      main_C_1);

  SIGNAL state_var : inPlaceNTT_DIF_core_core_fsm_1_ST;
  SIGNAL state_var_NS : inPlaceNTT_DIF_core_core_fsm_1_ST;

BEGIN
  inPlaceNTT_DIF_core_core_fsm_1 : PROCESS (COMP_LOOP_C_31_tr0, COMP_LOOP_C_62_tr0,
      COMP_LOOP_C_93_tr0, COMP_LOOP_C_124_tr0, COMP_LOOP_C_155_tr0, COMP_LOOP_C_186_tr0,
      COMP_LOOP_C_217_tr0, COMP_LOOP_C_248_tr0, VEC_LOOP_C_0_tr0, STAGE_LOOP_C_1_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN STAGE_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001");
        state_var_NS <= COMP_LOOP_C_0;
      WHEN COMP_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010");
        state_var_NS <= COMP_LOOP_C_1;
      WHEN COMP_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000011");
        state_var_NS <= COMP_LOOP_C_2;
      WHEN COMP_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100");
        state_var_NS <= COMP_LOOP_C_3;
      WHEN COMP_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000101");
        state_var_NS <= COMP_LOOP_C_4;
      WHEN COMP_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000110");
        state_var_NS <= COMP_LOOP_C_5;
      WHEN COMP_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000111");
        state_var_NS <= COMP_LOOP_C_6;
      WHEN COMP_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000");
        state_var_NS <= COMP_LOOP_C_7;
      WHEN COMP_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001001");
        state_var_NS <= COMP_LOOP_C_8;
      WHEN COMP_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001010");
        state_var_NS <= COMP_LOOP_C_9;
      WHEN COMP_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001011");
        state_var_NS <= COMP_LOOP_C_10;
      WHEN COMP_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001100");
        state_var_NS <= COMP_LOOP_C_11;
      WHEN COMP_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001101");
        state_var_NS <= COMP_LOOP_C_12;
      WHEN COMP_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001110");
        state_var_NS <= COMP_LOOP_C_13;
      WHEN COMP_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001111");
        state_var_NS <= COMP_LOOP_C_14;
      WHEN COMP_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000");
        state_var_NS <= COMP_LOOP_C_15;
      WHEN COMP_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010001");
        state_var_NS <= COMP_LOOP_C_16;
      WHEN COMP_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010010");
        state_var_NS <= COMP_LOOP_C_17;
      WHEN COMP_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010011");
        state_var_NS <= COMP_LOOP_C_18;
      WHEN COMP_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010100");
        state_var_NS <= COMP_LOOP_C_19;
      WHEN COMP_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010101");
        state_var_NS <= COMP_LOOP_C_20;
      WHEN COMP_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010110");
        state_var_NS <= COMP_LOOP_C_21;
      WHEN COMP_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010111");
        state_var_NS <= COMP_LOOP_C_22;
      WHEN COMP_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011000");
        state_var_NS <= COMP_LOOP_C_23;
      WHEN COMP_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011001");
        state_var_NS <= COMP_LOOP_C_24;
      WHEN COMP_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011010");
        state_var_NS <= COMP_LOOP_C_25;
      WHEN COMP_LOOP_C_25 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011011");
        state_var_NS <= COMP_LOOP_C_26;
      WHEN COMP_LOOP_C_26 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011100");
        state_var_NS <= COMP_LOOP_C_27;
      WHEN COMP_LOOP_C_27 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011101");
        state_var_NS <= COMP_LOOP_C_28;
      WHEN COMP_LOOP_C_28 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011110");
        state_var_NS <= COMP_LOOP_C_29;
      WHEN COMP_LOOP_C_29 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011111");
        state_var_NS <= COMP_LOOP_C_30;
      WHEN COMP_LOOP_C_30 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000");
        state_var_NS <= COMP_LOOP_C_31;
      WHEN COMP_LOOP_C_31 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100001");
        IF ( COMP_LOOP_C_31_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_32;
        END IF;
      WHEN COMP_LOOP_C_32 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100010");
        state_var_NS <= COMP_LOOP_C_33;
      WHEN COMP_LOOP_C_33 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100011");
        state_var_NS <= COMP_LOOP_C_34;
      WHEN COMP_LOOP_C_34 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100100");
        state_var_NS <= COMP_LOOP_C_35;
      WHEN COMP_LOOP_C_35 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100101");
        state_var_NS <= COMP_LOOP_C_36;
      WHEN COMP_LOOP_C_36 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100110");
        state_var_NS <= COMP_LOOP_C_37;
      WHEN COMP_LOOP_C_37 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100111");
        state_var_NS <= COMP_LOOP_C_38;
      WHEN COMP_LOOP_C_38 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101000");
        state_var_NS <= COMP_LOOP_C_39;
      WHEN COMP_LOOP_C_39 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101001");
        state_var_NS <= COMP_LOOP_C_40;
      WHEN COMP_LOOP_C_40 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101010");
        state_var_NS <= COMP_LOOP_C_41;
      WHEN COMP_LOOP_C_41 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101011");
        state_var_NS <= COMP_LOOP_C_42;
      WHEN COMP_LOOP_C_42 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101100");
        state_var_NS <= COMP_LOOP_C_43;
      WHEN COMP_LOOP_C_43 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101101");
        state_var_NS <= COMP_LOOP_C_44;
      WHEN COMP_LOOP_C_44 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101110");
        state_var_NS <= COMP_LOOP_C_45;
      WHEN COMP_LOOP_C_45 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101111");
        state_var_NS <= COMP_LOOP_C_46;
      WHEN COMP_LOOP_C_46 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110000");
        state_var_NS <= COMP_LOOP_C_47;
      WHEN COMP_LOOP_C_47 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110001");
        state_var_NS <= COMP_LOOP_C_48;
      WHEN COMP_LOOP_C_48 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110010");
        state_var_NS <= COMP_LOOP_C_49;
      WHEN COMP_LOOP_C_49 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110011");
        state_var_NS <= COMP_LOOP_C_50;
      WHEN COMP_LOOP_C_50 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110100");
        state_var_NS <= COMP_LOOP_C_51;
      WHEN COMP_LOOP_C_51 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110101");
        state_var_NS <= COMP_LOOP_C_52;
      WHEN COMP_LOOP_C_52 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110110");
        state_var_NS <= COMP_LOOP_C_53;
      WHEN COMP_LOOP_C_53 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110111");
        state_var_NS <= COMP_LOOP_C_54;
      WHEN COMP_LOOP_C_54 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111000");
        state_var_NS <= COMP_LOOP_C_55;
      WHEN COMP_LOOP_C_55 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111001");
        state_var_NS <= COMP_LOOP_C_56;
      WHEN COMP_LOOP_C_56 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111010");
        state_var_NS <= COMP_LOOP_C_57;
      WHEN COMP_LOOP_C_57 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111011");
        state_var_NS <= COMP_LOOP_C_58;
      WHEN COMP_LOOP_C_58 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111100");
        state_var_NS <= COMP_LOOP_C_59;
      WHEN COMP_LOOP_C_59 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111101");
        state_var_NS <= COMP_LOOP_C_60;
      WHEN COMP_LOOP_C_60 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111110");
        state_var_NS <= COMP_LOOP_C_61;
      WHEN COMP_LOOP_C_61 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111111");
        state_var_NS <= COMP_LOOP_C_62;
      WHEN COMP_LOOP_C_62 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000");
        IF ( COMP_LOOP_C_62_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_63;
        END IF;
      WHEN COMP_LOOP_C_63 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000001");
        state_var_NS <= COMP_LOOP_C_64;
      WHEN COMP_LOOP_C_64 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000010");
        state_var_NS <= COMP_LOOP_C_65;
      WHEN COMP_LOOP_C_65 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000011");
        state_var_NS <= COMP_LOOP_C_66;
      WHEN COMP_LOOP_C_66 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000100");
        state_var_NS <= COMP_LOOP_C_67;
      WHEN COMP_LOOP_C_67 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000101");
        state_var_NS <= COMP_LOOP_C_68;
      WHEN COMP_LOOP_C_68 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000110");
        state_var_NS <= COMP_LOOP_C_69;
      WHEN COMP_LOOP_C_69 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000111");
        state_var_NS <= COMP_LOOP_C_70;
      WHEN COMP_LOOP_C_70 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001000");
        state_var_NS <= COMP_LOOP_C_71;
      WHEN COMP_LOOP_C_71 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001001");
        state_var_NS <= COMP_LOOP_C_72;
      WHEN COMP_LOOP_C_72 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001010");
        state_var_NS <= COMP_LOOP_C_73;
      WHEN COMP_LOOP_C_73 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001011");
        state_var_NS <= COMP_LOOP_C_74;
      WHEN COMP_LOOP_C_74 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001100");
        state_var_NS <= COMP_LOOP_C_75;
      WHEN COMP_LOOP_C_75 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001101");
        state_var_NS <= COMP_LOOP_C_76;
      WHEN COMP_LOOP_C_76 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001110");
        state_var_NS <= COMP_LOOP_C_77;
      WHEN COMP_LOOP_C_77 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001111");
        state_var_NS <= COMP_LOOP_C_78;
      WHEN COMP_LOOP_C_78 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010000");
        state_var_NS <= COMP_LOOP_C_79;
      WHEN COMP_LOOP_C_79 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010001");
        state_var_NS <= COMP_LOOP_C_80;
      WHEN COMP_LOOP_C_80 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010010");
        state_var_NS <= COMP_LOOP_C_81;
      WHEN COMP_LOOP_C_81 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010011");
        state_var_NS <= COMP_LOOP_C_82;
      WHEN COMP_LOOP_C_82 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010100");
        state_var_NS <= COMP_LOOP_C_83;
      WHEN COMP_LOOP_C_83 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010101");
        state_var_NS <= COMP_LOOP_C_84;
      WHEN COMP_LOOP_C_84 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010110");
        state_var_NS <= COMP_LOOP_C_85;
      WHEN COMP_LOOP_C_85 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010111");
        state_var_NS <= COMP_LOOP_C_86;
      WHEN COMP_LOOP_C_86 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011000");
        state_var_NS <= COMP_LOOP_C_87;
      WHEN COMP_LOOP_C_87 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011001");
        state_var_NS <= COMP_LOOP_C_88;
      WHEN COMP_LOOP_C_88 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011010");
        state_var_NS <= COMP_LOOP_C_89;
      WHEN COMP_LOOP_C_89 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011011");
        state_var_NS <= COMP_LOOP_C_90;
      WHEN COMP_LOOP_C_90 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011100");
        state_var_NS <= COMP_LOOP_C_91;
      WHEN COMP_LOOP_C_91 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011101");
        state_var_NS <= COMP_LOOP_C_92;
      WHEN COMP_LOOP_C_92 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011110");
        state_var_NS <= COMP_LOOP_C_93;
      WHEN COMP_LOOP_C_93 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011111");
        IF ( COMP_LOOP_C_93_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_94;
        END IF;
      WHEN COMP_LOOP_C_94 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100000");
        state_var_NS <= COMP_LOOP_C_95;
      WHEN COMP_LOOP_C_95 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100001");
        state_var_NS <= COMP_LOOP_C_96;
      WHEN COMP_LOOP_C_96 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100010");
        state_var_NS <= COMP_LOOP_C_97;
      WHEN COMP_LOOP_C_97 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100011");
        state_var_NS <= COMP_LOOP_C_98;
      WHEN COMP_LOOP_C_98 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100100");
        state_var_NS <= COMP_LOOP_C_99;
      WHEN COMP_LOOP_C_99 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100101");
        state_var_NS <= COMP_LOOP_C_100;
      WHEN COMP_LOOP_C_100 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100110");
        state_var_NS <= COMP_LOOP_C_101;
      WHEN COMP_LOOP_C_101 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100111");
        state_var_NS <= COMP_LOOP_C_102;
      WHEN COMP_LOOP_C_102 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101000");
        state_var_NS <= COMP_LOOP_C_103;
      WHEN COMP_LOOP_C_103 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101001");
        state_var_NS <= COMP_LOOP_C_104;
      WHEN COMP_LOOP_C_104 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101010");
        state_var_NS <= COMP_LOOP_C_105;
      WHEN COMP_LOOP_C_105 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101011");
        state_var_NS <= COMP_LOOP_C_106;
      WHEN COMP_LOOP_C_106 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101100");
        state_var_NS <= COMP_LOOP_C_107;
      WHEN COMP_LOOP_C_107 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101101");
        state_var_NS <= COMP_LOOP_C_108;
      WHEN COMP_LOOP_C_108 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101110");
        state_var_NS <= COMP_LOOP_C_109;
      WHEN COMP_LOOP_C_109 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101111");
        state_var_NS <= COMP_LOOP_C_110;
      WHEN COMP_LOOP_C_110 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110000");
        state_var_NS <= COMP_LOOP_C_111;
      WHEN COMP_LOOP_C_111 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110001");
        state_var_NS <= COMP_LOOP_C_112;
      WHEN COMP_LOOP_C_112 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110010");
        state_var_NS <= COMP_LOOP_C_113;
      WHEN COMP_LOOP_C_113 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110011");
        state_var_NS <= COMP_LOOP_C_114;
      WHEN COMP_LOOP_C_114 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110100");
        state_var_NS <= COMP_LOOP_C_115;
      WHEN COMP_LOOP_C_115 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110101");
        state_var_NS <= COMP_LOOP_C_116;
      WHEN COMP_LOOP_C_116 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110110");
        state_var_NS <= COMP_LOOP_C_117;
      WHEN COMP_LOOP_C_117 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110111");
        state_var_NS <= COMP_LOOP_C_118;
      WHEN COMP_LOOP_C_118 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111000");
        state_var_NS <= COMP_LOOP_C_119;
      WHEN COMP_LOOP_C_119 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111001");
        state_var_NS <= COMP_LOOP_C_120;
      WHEN COMP_LOOP_C_120 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111010");
        state_var_NS <= COMP_LOOP_C_121;
      WHEN COMP_LOOP_C_121 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111011");
        state_var_NS <= COMP_LOOP_C_122;
      WHEN COMP_LOOP_C_122 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111100");
        state_var_NS <= COMP_LOOP_C_123;
      WHEN COMP_LOOP_C_123 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111101");
        state_var_NS <= COMP_LOOP_C_124;
      WHEN COMP_LOOP_C_124 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111110");
        IF ( COMP_LOOP_C_124_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_125;
        END IF;
      WHEN COMP_LOOP_C_125 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111111");
        state_var_NS <= COMP_LOOP_C_126;
      WHEN COMP_LOOP_C_126 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000");
        state_var_NS <= COMP_LOOP_C_127;
      WHEN COMP_LOOP_C_127 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000001");
        state_var_NS <= COMP_LOOP_C_128;
      WHEN COMP_LOOP_C_128 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000010");
        state_var_NS <= COMP_LOOP_C_129;
      WHEN COMP_LOOP_C_129 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000011");
        state_var_NS <= COMP_LOOP_C_130;
      WHEN COMP_LOOP_C_130 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000100");
        state_var_NS <= COMP_LOOP_C_131;
      WHEN COMP_LOOP_C_131 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000101");
        state_var_NS <= COMP_LOOP_C_132;
      WHEN COMP_LOOP_C_132 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000110");
        state_var_NS <= COMP_LOOP_C_133;
      WHEN COMP_LOOP_C_133 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000111");
        state_var_NS <= COMP_LOOP_C_134;
      WHEN COMP_LOOP_C_134 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001000");
        state_var_NS <= COMP_LOOP_C_135;
      WHEN COMP_LOOP_C_135 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001001");
        state_var_NS <= COMP_LOOP_C_136;
      WHEN COMP_LOOP_C_136 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001010");
        state_var_NS <= COMP_LOOP_C_137;
      WHEN COMP_LOOP_C_137 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001011");
        state_var_NS <= COMP_LOOP_C_138;
      WHEN COMP_LOOP_C_138 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001100");
        state_var_NS <= COMP_LOOP_C_139;
      WHEN COMP_LOOP_C_139 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001101");
        state_var_NS <= COMP_LOOP_C_140;
      WHEN COMP_LOOP_C_140 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001110");
        state_var_NS <= COMP_LOOP_C_141;
      WHEN COMP_LOOP_C_141 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001111");
        state_var_NS <= COMP_LOOP_C_142;
      WHEN COMP_LOOP_C_142 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010000");
        state_var_NS <= COMP_LOOP_C_143;
      WHEN COMP_LOOP_C_143 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010001");
        state_var_NS <= COMP_LOOP_C_144;
      WHEN COMP_LOOP_C_144 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010010");
        state_var_NS <= COMP_LOOP_C_145;
      WHEN COMP_LOOP_C_145 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010011");
        state_var_NS <= COMP_LOOP_C_146;
      WHEN COMP_LOOP_C_146 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010100");
        state_var_NS <= COMP_LOOP_C_147;
      WHEN COMP_LOOP_C_147 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010101");
        state_var_NS <= COMP_LOOP_C_148;
      WHEN COMP_LOOP_C_148 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010110");
        state_var_NS <= COMP_LOOP_C_149;
      WHEN COMP_LOOP_C_149 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010111");
        state_var_NS <= COMP_LOOP_C_150;
      WHEN COMP_LOOP_C_150 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011000");
        state_var_NS <= COMP_LOOP_C_151;
      WHEN COMP_LOOP_C_151 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011001");
        state_var_NS <= COMP_LOOP_C_152;
      WHEN COMP_LOOP_C_152 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011010");
        state_var_NS <= COMP_LOOP_C_153;
      WHEN COMP_LOOP_C_153 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011011");
        state_var_NS <= COMP_LOOP_C_154;
      WHEN COMP_LOOP_C_154 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011100");
        state_var_NS <= COMP_LOOP_C_155;
      WHEN COMP_LOOP_C_155 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011101");
        IF ( COMP_LOOP_C_155_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_156;
        END IF;
      WHEN COMP_LOOP_C_156 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011110");
        state_var_NS <= COMP_LOOP_C_157;
      WHEN COMP_LOOP_C_157 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10011111");
        state_var_NS <= COMP_LOOP_C_158;
      WHEN COMP_LOOP_C_158 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100000");
        state_var_NS <= COMP_LOOP_C_159;
      WHEN COMP_LOOP_C_159 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100001");
        state_var_NS <= COMP_LOOP_C_160;
      WHEN COMP_LOOP_C_160 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100010");
        state_var_NS <= COMP_LOOP_C_161;
      WHEN COMP_LOOP_C_161 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100011");
        state_var_NS <= COMP_LOOP_C_162;
      WHEN COMP_LOOP_C_162 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100100");
        state_var_NS <= COMP_LOOP_C_163;
      WHEN COMP_LOOP_C_163 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100101");
        state_var_NS <= COMP_LOOP_C_164;
      WHEN COMP_LOOP_C_164 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100110");
        state_var_NS <= COMP_LOOP_C_165;
      WHEN COMP_LOOP_C_165 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10100111");
        state_var_NS <= COMP_LOOP_C_166;
      WHEN COMP_LOOP_C_166 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101000");
        state_var_NS <= COMP_LOOP_C_167;
      WHEN COMP_LOOP_C_167 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101001");
        state_var_NS <= COMP_LOOP_C_168;
      WHEN COMP_LOOP_C_168 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101010");
        state_var_NS <= COMP_LOOP_C_169;
      WHEN COMP_LOOP_C_169 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101011");
        state_var_NS <= COMP_LOOP_C_170;
      WHEN COMP_LOOP_C_170 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101100");
        state_var_NS <= COMP_LOOP_C_171;
      WHEN COMP_LOOP_C_171 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101101");
        state_var_NS <= COMP_LOOP_C_172;
      WHEN COMP_LOOP_C_172 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101110");
        state_var_NS <= COMP_LOOP_C_173;
      WHEN COMP_LOOP_C_173 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10101111");
        state_var_NS <= COMP_LOOP_C_174;
      WHEN COMP_LOOP_C_174 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110000");
        state_var_NS <= COMP_LOOP_C_175;
      WHEN COMP_LOOP_C_175 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110001");
        state_var_NS <= COMP_LOOP_C_176;
      WHEN COMP_LOOP_C_176 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110010");
        state_var_NS <= COMP_LOOP_C_177;
      WHEN COMP_LOOP_C_177 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110011");
        state_var_NS <= COMP_LOOP_C_178;
      WHEN COMP_LOOP_C_178 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110100");
        state_var_NS <= COMP_LOOP_C_179;
      WHEN COMP_LOOP_C_179 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110101");
        state_var_NS <= COMP_LOOP_C_180;
      WHEN COMP_LOOP_C_180 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110110");
        state_var_NS <= COMP_LOOP_C_181;
      WHEN COMP_LOOP_C_181 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10110111");
        state_var_NS <= COMP_LOOP_C_182;
      WHEN COMP_LOOP_C_182 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111000");
        state_var_NS <= COMP_LOOP_C_183;
      WHEN COMP_LOOP_C_183 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111001");
        state_var_NS <= COMP_LOOP_C_184;
      WHEN COMP_LOOP_C_184 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111010");
        state_var_NS <= COMP_LOOP_C_185;
      WHEN COMP_LOOP_C_185 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111011");
        state_var_NS <= COMP_LOOP_C_186;
      WHEN COMP_LOOP_C_186 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111100");
        IF ( COMP_LOOP_C_186_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_187;
        END IF;
      WHEN COMP_LOOP_C_187 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111101");
        state_var_NS <= COMP_LOOP_C_188;
      WHEN COMP_LOOP_C_188 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111110");
        state_var_NS <= COMP_LOOP_C_189;
      WHEN COMP_LOOP_C_189 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10111111");
        state_var_NS <= COMP_LOOP_C_190;
      WHEN COMP_LOOP_C_190 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000000");
        state_var_NS <= COMP_LOOP_C_191;
      WHEN COMP_LOOP_C_191 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000001");
        state_var_NS <= COMP_LOOP_C_192;
      WHEN COMP_LOOP_C_192 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000010");
        state_var_NS <= COMP_LOOP_C_193;
      WHEN COMP_LOOP_C_193 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000011");
        state_var_NS <= COMP_LOOP_C_194;
      WHEN COMP_LOOP_C_194 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000100");
        state_var_NS <= COMP_LOOP_C_195;
      WHEN COMP_LOOP_C_195 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000101");
        state_var_NS <= COMP_LOOP_C_196;
      WHEN COMP_LOOP_C_196 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000110");
        state_var_NS <= COMP_LOOP_C_197;
      WHEN COMP_LOOP_C_197 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11000111");
        state_var_NS <= COMP_LOOP_C_198;
      WHEN COMP_LOOP_C_198 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001000");
        state_var_NS <= COMP_LOOP_C_199;
      WHEN COMP_LOOP_C_199 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001001");
        state_var_NS <= COMP_LOOP_C_200;
      WHEN COMP_LOOP_C_200 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001010");
        state_var_NS <= COMP_LOOP_C_201;
      WHEN COMP_LOOP_C_201 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001011");
        state_var_NS <= COMP_LOOP_C_202;
      WHEN COMP_LOOP_C_202 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001100");
        state_var_NS <= COMP_LOOP_C_203;
      WHEN COMP_LOOP_C_203 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001101");
        state_var_NS <= COMP_LOOP_C_204;
      WHEN COMP_LOOP_C_204 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001110");
        state_var_NS <= COMP_LOOP_C_205;
      WHEN COMP_LOOP_C_205 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11001111");
        state_var_NS <= COMP_LOOP_C_206;
      WHEN COMP_LOOP_C_206 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010000");
        state_var_NS <= COMP_LOOP_C_207;
      WHEN COMP_LOOP_C_207 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010001");
        state_var_NS <= COMP_LOOP_C_208;
      WHEN COMP_LOOP_C_208 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010010");
        state_var_NS <= COMP_LOOP_C_209;
      WHEN COMP_LOOP_C_209 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010011");
        state_var_NS <= COMP_LOOP_C_210;
      WHEN COMP_LOOP_C_210 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010100");
        state_var_NS <= COMP_LOOP_C_211;
      WHEN COMP_LOOP_C_211 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010101");
        state_var_NS <= COMP_LOOP_C_212;
      WHEN COMP_LOOP_C_212 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010110");
        state_var_NS <= COMP_LOOP_C_213;
      WHEN COMP_LOOP_C_213 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11010111");
        state_var_NS <= COMP_LOOP_C_214;
      WHEN COMP_LOOP_C_214 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011000");
        state_var_NS <= COMP_LOOP_C_215;
      WHEN COMP_LOOP_C_215 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011001");
        state_var_NS <= COMP_LOOP_C_216;
      WHEN COMP_LOOP_C_216 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011010");
        state_var_NS <= COMP_LOOP_C_217;
      WHEN COMP_LOOP_C_217 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011011");
        IF ( COMP_LOOP_C_217_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_218;
        END IF;
      WHEN COMP_LOOP_C_218 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011100");
        state_var_NS <= COMP_LOOP_C_219;
      WHEN COMP_LOOP_C_219 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011101");
        state_var_NS <= COMP_LOOP_C_220;
      WHEN COMP_LOOP_C_220 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011110");
        state_var_NS <= COMP_LOOP_C_221;
      WHEN COMP_LOOP_C_221 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11011111");
        state_var_NS <= COMP_LOOP_C_222;
      WHEN COMP_LOOP_C_222 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100000");
        state_var_NS <= COMP_LOOP_C_223;
      WHEN COMP_LOOP_C_223 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100001");
        state_var_NS <= COMP_LOOP_C_224;
      WHEN COMP_LOOP_C_224 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100010");
        state_var_NS <= COMP_LOOP_C_225;
      WHEN COMP_LOOP_C_225 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100011");
        state_var_NS <= COMP_LOOP_C_226;
      WHEN COMP_LOOP_C_226 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100100");
        state_var_NS <= COMP_LOOP_C_227;
      WHEN COMP_LOOP_C_227 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100101");
        state_var_NS <= COMP_LOOP_C_228;
      WHEN COMP_LOOP_C_228 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100110");
        state_var_NS <= COMP_LOOP_C_229;
      WHEN COMP_LOOP_C_229 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11100111");
        state_var_NS <= COMP_LOOP_C_230;
      WHEN COMP_LOOP_C_230 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101000");
        state_var_NS <= COMP_LOOP_C_231;
      WHEN COMP_LOOP_C_231 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101001");
        state_var_NS <= COMP_LOOP_C_232;
      WHEN COMP_LOOP_C_232 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101010");
        state_var_NS <= COMP_LOOP_C_233;
      WHEN COMP_LOOP_C_233 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101011");
        state_var_NS <= COMP_LOOP_C_234;
      WHEN COMP_LOOP_C_234 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101100");
        state_var_NS <= COMP_LOOP_C_235;
      WHEN COMP_LOOP_C_235 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101101");
        state_var_NS <= COMP_LOOP_C_236;
      WHEN COMP_LOOP_C_236 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101110");
        state_var_NS <= COMP_LOOP_C_237;
      WHEN COMP_LOOP_C_237 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11101111");
        state_var_NS <= COMP_LOOP_C_238;
      WHEN COMP_LOOP_C_238 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110000");
        state_var_NS <= COMP_LOOP_C_239;
      WHEN COMP_LOOP_C_239 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110001");
        state_var_NS <= COMP_LOOP_C_240;
      WHEN COMP_LOOP_C_240 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110010");
        state_var_NS <= COMP_LOOP_C_241;
      WHEN COMP_LOOP_C_241 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110011");
        state_var_NS <= COMP_LOOP_C_242;
      WHEN COMP_LOOP_C_242 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110100");
        state_var_NS <= COMP_LOOP_C_243;
      WHEN COMP_LOOP_C_243 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110101");
        state_var_NS <= COMP_LOOP_C_244;
      WHEN COMP_LOOP_C_244 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110110");
        state_var_NS <= COMP_LOOP_C_245;
      WHEN COMP_LOOP_C_245 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11110111");
        state_var_NS <= COMP_LOOP_C_246;
      WHEN COMP_LOOP_C_246 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111000");
        state_var_NS <= COMP_LOOP_C_247;
      WHEN COMP_LOOP_C_247 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111001");
        state_var_NS <= COMP_LOOP_C_248;
      WHEN COMP_LOOP_C_248 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111010");
        IF ( COMP_LOOP_C_248_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN VEC_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111011");
        IF ( VEC_LOOP_C_0_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP_C_1;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN STAGE_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111100");
        IF ( STAGE_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= STAGE_LOOP_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "11111101");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000");
        state_var_NS <= STAGE_LOOP_C_0;
    END CASE;
  END PROCESS inPlaceNTT_DIF_core_core_fsm_1;

  inPlaceNTT_DIF_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS inPlaceNTT_DIF_core_core_fsm_1_REG;

END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_core_wait_dp IS
  PORT(
    ensig_cgo_iro : IN STD_LOGIC;
    ensig_cgo : IN STD_LOGIC;
    COMP_LOOP_1_modulo_cmp_ccs_ccore_en : OUT STD_LOGIC
  );
END inPlaceNTT_DIF_core_wait_dp;

ARCHITECTURE v6 OF inPlaceNTT_DIF_core_wait_dp IS
  -- Default Constants

BEGIN
  COMP_LOOP_1_modulo_cmp_ccs_ccore_en <= ensig_cgo OR ensig_cgo_iro;
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_4_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_5_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_6_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_7_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_4_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_5_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_6_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_7_lz : OUT STD_LOGIC;
    vec_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_4_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_5_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_6_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_7_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_0_i_radr_d : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_4_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_4_i_radr_d : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_5_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_6_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_7_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_4_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_5_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_6_i_we_d_pff : OUT STD_LOGIC;
    vec_rsc_0_7_i_we_d_pff : OUT STD_LOGIC;
    twiddle_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_2_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0)
  );
END inPlaceNTT_DIF_core;

ARCHITECTURE v6 OF inPlaceNTT_DIF_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_modulo_cmp_return_rsc_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_modulo_cmp_ccs_ccore_en : STD_LOGIC;
  SIGNAL fsm_output : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL or_dcpl : STD_LOGIC;
  SIGNAL or_tmp_25 : STD_LOGIC;
  SIGNAL or_tmp_38 : STD_LOGIC;
  SIGNAL nor_tmp_29 : STD_LOGIC;
  SIGNAL nor_tmp_35 : STD_LOGIC;
  SIGNAL and_dcpl_24 : STD_LOGIC;
  SIGNAL and_dcpl_25 : STD_LOGIC;
  SIGNAL and_dcpl_26 : STD_LOGIC;
  SIGNAL and_dcpl_28 : STD_LOGIC;
  SIGNAL and_dcpl_29 : STD_LOGIC;
  SIGNAL and_dcpl_31 : STD_LOGIC;
  SIGNAL and_dcpl_32 : STD_LOGIC;
  SIGNAL and_dcpl_33 : STD_LOGIC;
  SIGNAL and_dcpl_35 : STD_LOGIC;
  SIGNAL nor_tmp_64 : STD_LOGIC;
  SIGNAL mux_tmp_192 : STD_LOGIC;
  SIGNAL nand_tmp_2 : STD_LOGIC;
  SIGNAL and_dcpl_37 : STD_LOGIC;
  SIGNAL and_dcpl_38 : STD_LOGIC;
  SIGNAL and_dcpl_39 : STD_LOGIC;
  SIGNAL and_dcpl_41 : STD_LOGIC;
  SIGNAL and_dcpl_42 : STD_LOGIC;
  SIGNAL and_dcpl_43 : STD_LOGIC;
  SIGNAL and_dcpl_44 : STD_LOGIC;
  SIGNAL and_dcpl_45 : STD_LOGIC;
  SIGNAL and_dcpl_47 : STD_LOGIC;
  SIGNAL and_dcpl_48 : STD_LOGIC;
  SIGNAL and_dcpl_49 : STD_LOGIC;
  SIGNAL and_dcpl_50 : STD_LOGIC;
  SIGNAL and_dcpl_52 : STD_LOGIC;
  SIGNAL and_dcpl_53 : STD_LOGIC;
  SIGNAL and_dcpl_55 : STD_LOGIC;
  SIGNAL and_dcpl_56 : STD_LOGIC;
  SIGNAL and_dcpl_58 : STD_LOGIC;
  SIGNAL and_dcpl_59 : STD_LOGIC;
  SIGNAL and_dcpl_60 : STD_LOGIC;
  SIGNAL and_dcpl_61 : STD_LOGIC;
  SIGNAL and_dcpl_62 : STD_LOGIC;
  SIGNAL and_dcpl_63 : STD_LOGIC;
  SIGNAL and_dcpl_65 : STD_LOGIC;
  SIGNAL and_dcpl_66 : STD_LOGIC;
  SIGNAL and_dcpl_68 : STD_LOGIC;
  SIGNAL and_dcpl_69 : STD_LOGIC;
  SIGNAL and_dcpl_70 : STD_LOGIC;
  SIGNAL and_dcpl_71 : STD_LOGIC;
  SIGNAL and_dcpl_73 : STD_LOGIC;
  SIGNAL and_dcpl_74 : STD_LOGIC;
  SIGNAL and_dcpl_83 : STD_LOGIC;
  SIGNAL and_dcpl_86 : STD_LOGIC;
  SIGNAL and_dcpl_88 : STD_LOGIC;
  SIGNAL not_tmp_134 : STD_LOGIC;
  SIGNAL not_tmp_135 : STD_LOGIC;
  SIGNAL not_tmp_138 : STD_LOGIC;
  SIGNAL not_tmp_147 : STD_LOGIC;
  SIGNAL not_tmp_153 : STD_LOGIC;
  SIGNAL and_dcpl_94 : STD_LOGIC;
  SIGNAL and_dcpl_95 : STD_LOGIC;
  SIGNAL and_dcpl_96 : STD_LOGIC;
  SIGNAL and_dcpl_97 : STD_LOGIC;
  SIGNAL and_dcpl_98 : STD_LOGIC;
  SIGNAL and_dcpl_99 : STD_LOGIC;
  SIGNAL and_dcpl_100 : STD_LOGIC;
  SIGNAL and_dcpl_101 : STD_LOGIC;
  SIGNAL and_dcpl_102 : STD_LOGIC;
  SIGNAL and_dcpl_104 : STD_LOGIC;
  SIGNAL and_dcpl_117 : STD_LOGIC;
  SIGNAL or_tmp_588 : STD_LOGIC;
  SIGNAL mux_tmp_472 : STD_LOGIC;
  SIGNAL mux_tmp_475 : STD_LOGIC;
  SIGNAL mux_tmp_478 : STD_LOGIC;
  SIGNAL mux_tmp_486 : STD_LOGIC;
  SIGNAL mux_tmp_487 : STD_LOGIC;
  SIGNAL mux_tmp_489 : STD_LOGIC;
  SIGNAL mux_tmp_490 : STD_LOGIC;
  SIGNAL and_dcpl_120 : STD_LOGIC;
  SIGNAL and_dcpl_121 : STD_LOGIC;
  SIGNAL and_dcpl_122 : STD_LOGIC;
  SIGNAL and_dcpl_123 : STD_LOGIC;
  SIGNAL and_dcpl_124 : STD_LOGIC;
  SIGNAL and_dcpl_125 : STD_LOGIC;
  SIGNAL and_dcpl_126 : STD_LOGIC;
  SIGNAL mux_tmp_495 : STD_LOGIC;
  SIGNAL not_tmp_290 : STD_LOGIC;
  SIGNAL mux_tmp_501 : STD_LOGIC;
  SIGNAL mux_tmp_503 : STD_LOGIC;
  SIGNAL or_tmp_610 : STD_LOGIC;
  SIGNAL or_dcpl_46 : STD_LOGIC;
  SIGNAL or_dcpl_51 : STD_LOGIC;
  SIGNAL or_dcpl_52 : STD_LOGIC;
  SIGNAL or_tmp_616 : STD_LOGIC;
  SIGNAL or_tmp_617 : STD_LOGIC;
  SIGNAL or_tmp_620 : STD_LOGIC;
  SIGNAL mux_tmp_522 : STD_LOGIC;
  SIGNAL mux_tmp_523 : STD_LOGIC;
  SIGNAL mux_tmp_526 : STD_LOGIC;
  SIGNAL mux_tmp_527 : STD_LOGIC;
  SIGNAL or_tmp_621 : STD_LOGIC;
  SIGNAL or_dcpl_53 : STD_LOGIC;
  SIGNAL and_dcpl_138 : STD_LOGIC;
  SIGNAL and_dcpl_143 : STD_LOGIC;
  SIGNAL and_dcpl_144 : STD_LOGIC;
  SIGNAL mux_tmp_554 : STD_LOGIC;
  SIGNAL mux_tmp_557 : STD_LOGIC;
  SIGNAL not_tmp_329 : STD_LOGIC;
  SIGNAL and_dcpl_145 : STD_LOGIC;
  SIGNAL and_dcpl_148 : STD_LOGIC;
  SIGNAL and_dcpl_150 : STD_LOGIC;
  SIGNAL or_tmp_631 : STD_LOGIC;
  SIGNAL mux_tmp_575 : STD_LOGIC;
  SIGNAL or_tmp_634 : STD_LOGIC;
  SIGNAL and_dcpl_153 : STD_LOGIC;
  SIGNAL and_dcpl_156 : STD_LOGIC;
  SIGNAL and_dcpl_159 : STD_LOGIC;
  SIGNAL and_dcpl_165 : STD_LOGIC;
  SIGNAL and_dcpl_167 : STD_LOGIC;
  SIGNAL and_dcpl_168 : STD_LOGIC;
  SIGNAL or_tmp_649 : STD_LOGIC;
  SIGNAL and_tmp_15 : STD_LOGIC;
  SIGNAL or_tmp_651 : STD_LOGIC;
  SIGNAL and_tmp_16 : STD_LOGIC;
  SIGNAL COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_acc_1_cse_6_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL VEC_LOOP_j_10_0_sva_9_0 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_4_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_11_psp_sva_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_2_tmp_mul_idiv_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_2_tmp_lshift_ncse_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_2_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_2_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_4_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_4_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_6_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_6_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_13_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_1_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_11_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_3_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_5_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_14_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_10_cse_10_1_7_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_5_tmp_mul_idiv_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COMP_LOOP_3_tmp_lshift_ncse_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_3_tmp_mul_idiv_sva_1_0 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL STAGE_LOOP_lshift_psp_sva : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_k_10_3_sva_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_2_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt : STD_LOGIC;
  SIGNAL and_203_m1c : STD_LOGIC;
  SIGNAL reg_COMP_LOOP_k_10_3_ftd : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL nand_137_cse : STD_LOGIC;
  SIGNAL nand_138_cse : STD_LOGIC;
  SIGNAL nand_126_cse : STD_LOGIC;
  SIGNAL nand_127_cse : STD_LOGIC;
  SIGNAL reg_vec_rsc_triosy_0_7_obj_ld_cse : STD_LOGIC;
  SIGNAL reg_ensig_cgo_cse : STD_LOGIC;
  SIGNAL and_263_cse : STD_LOGIC;
  SIGNAL or_731_cse : STD_LOGIC;
  SIGNAL and_280_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_2_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse : STD_LOGIC;
  SIGNAL or_735_cse : STD_LOGIC;
  SIGNAL nor_441_cse : STD_LOGIC;
  SIGNAL nor_474_cse : STD_LOGIC;
  SIGNAL nand_132_cse : STD_LOGIC;
  SIGNAL nand_130_cse : STD_LOGIC;
  SIGNAL nand_97_cse : STD_LOGIC;
  SIGNAL nand_98_cse : STD_LOGIC;
  SIGNAL nand_99_cse : STD_LOGIC;
  SIGNAL nand_133_cse : STD_LOGIC;
  SIGNAL and_283_cse : STD_LOGIC;
  SIGNAL mux_141_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_psp_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL mux_496_itm : STD_LOGIC;
  SIGNAL mux_529_itm : STD_LOGIC;
  SIGNAL mux_564_itm : STD_LOGIC;
  SIGNAL mux_573_itm : STD_LOGIC;
  SIGNAL mux_575_itm : STD_LOGIC;
  SIGNAL mux_580_itm : STD_LOGIC;
  SIGNAL z_out : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_dcpl_240 : STD_LOGIC;
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL and_dcpl_241 : STD_LOGIC;
  SIGNAL and_dcpl_242 : STD_LOGIC;
  SIGNAL and_dcpl_243 : STD_LOGIC;
  SIGNAL and_dcpl_247 : STD_LOGIC;
  SIGNAL and_dcpl_248 : STD_LOGIC;
  SIGNAL and_dcpl_249 : STD_LOGIC;
  SIGNAL and_dcpl_250 : STD_LOGIC;
  SIGNAL and_dcpl_253 : STD_LOGIC;
  SIGNAL and_dcpl_254 : STD_LOGIC;
  SIGNAL and_dcpl_256 : STD_LOGIC;
  SIGNAL and_dcpl_257 : STD_LOGIC;
  SIGNAL and_dcpl_260 : STD_LOGIC;
  SIGNAL and_dcpl_261 : STD_LOGIC;
  SIGNAL and_dcpl_263 : STD_LOGIC;
  SIGNAL and_dcpl_264 : STD_LOGIC;
  SIGNAL and_dcpl_268 : STD_LOGIC;
  SIGNAL and_dcpl_270 : STD_LOGIC;
  SIGNAL and_dcpl_271 : STD_LOGIC;
  SIGNAL and_dcpl_274 : STD_LOGIC;
  SIGNAL and_dcpl_275 : STD_LOGIC;
  SIGNAL and_dcpl_277 : STD_LOGIC;
  SIGNAL and_dcpl_278 : STD_LOGIC;
  SIGNAL and_dcpl_280 : STD_LOGIC;
  SIGNAL and_dcpl_281 : STD_LOGIC;
  SIGNAL and_dcpl_282 : STD_LOGIC;
  SIGNAL and_dcpl_284 : STD_LOGIC;
  SIGNAL and_dcpl_285 : STD_LOGIC;
  SIGNAL and_dcpl_286 : STD_LOGIC;
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_dcpl_300 : STD_LOGIC;
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL and_dcpl_312 : STD_LOGIC;
  SIGNAL and_dcpl_316 : STD_LOGIC;
  SIGNAL and_dcpl_377 : STD_LOGIC;
  SIGNAL z_out_8 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL STAGE_LOOP_i_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL COMP_LOOP_1_tmp_acc_cse_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL tmp_16_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL tmp_21_sva_3 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL tmp_21_sva_6 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL tmp_21_sva_7 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL tmp_23_sva_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL tmp_23_sva_2 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nor_1_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_11_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_12_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_13_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_4_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_30_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_32_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_33_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_34_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_5_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_37_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_39_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_40_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_41_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_and_60_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_69_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_1_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_and_86_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_13_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_93_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_95_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_96_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_97_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_2_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nor_17_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_121_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_123_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_124_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_125_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_and_145_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_21_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_149_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_151_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_152_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_153_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_3_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nor_25_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_177_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_179_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_180_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_181_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_4_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nor_29_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_205_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_207_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_208_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_209_itm : STD_LOGIC;
  SIGNAL STAGE_LOOP_i_3_0_sva_mx0c1 : STD_LOGIC;
  SIGNAL VEC_LOOP_j_10_0_sva_9_0_mx0c0 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c3 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c4 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c7 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c10 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c13 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c16 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c19 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c22 : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_8_itm_mx0c25 : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_itm_mx0w0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_37 : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_39 : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_15_ssc : STD_LOGIC;
  SIGNAL or_584_cse : STD_LOGIC;
  SIGNAL nor_230_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_7_cse : STD_LOGIC;
  SIGNAL nor_226_cse : STD_LOGIC;
  SIGNAL nor_225_cse : STD_LOGIC;
  SIGNAL nor_220_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_16_cse : STD_LOGIC;
  SIGNAL nor_209_cse : STD_LOGIC;
  SIGNAL nor_205_cse : STD_LOGIC;
  SIGNAL nor_204_cse : STD_LOGIC;
  SIGNAL and_235_cse : STD_LOGIC;
  SIGNAL and_230_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_or_14_cse : STD_LOGIC;
  SIGNAL and_459_cse : STD_LOGIC;
  SIGNAL and_437_cse : STD_LOGIC;
  SIGNAL and_441_cse : STD_LOGIC;
  SIGNAL and_443_cse : STD_LOGIC;
  SIGNAL and_446_cse : STD_LOGIC;
  SIGNAL and_452_cse : STD_LOGIC;
  SIGNAL and_455_cse : STD_LOGIC;
  SIGNAL and_532_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_nor_24_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_31_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_nor_25_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_35_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_or_37_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_or_9_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_2_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_4_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_5_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_6_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_7_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_8_acc_10_itm_10_1_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_mux_95_cse : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL nor_nl : STD_LOGIC;
  SIGNAL and_531_nl : STD_LOGIC;
  SIGNAL mux_495_nl : STD_LOGIC;
  SIGNAL mux_494_nl : STD_LOGIC;
  SIGNAL mux_493_nl : STD_LOGIC;
  SIGNAL mux_492_nl : STD_LOGIC;
  SIGNAL mux_491_nl : STD_LOGIC;
  SIGNAL mux_490_nl : STD_LOGIC;
  SIGNAL mux_487_nl : STD_LOGIC;
  SIGNAL mux_484_nl : STD_LOGIC;
  SIGNAL VEC_LOOP_j_not_1_nl : STD_LOGIC;
  SIGNAL nor_194_nl : STD_LOGIC;
  SIGNAL and_264_nl : STD_LOGIC;
  SIGNAL nand_nl : STD_LOGIC;
  SIGNAL mux_196_nl : STD_LOGIC;
  SIGNAL nor_438_nl : STD_LOGIC;
  SIGNAL and_262_nl : STD_LOGIC;
  SIGNAL or_743_nl : STD_LOGIC;
  SIGNAL mux_632_nl : STD_LOGIC;
  SIGNAL or_742_nl : STD_LOGIC;
  SIGNAL nand_155_nl : STD_LOGIC;
  SIGNAL mux_631_nl : STD_LOGIC;
  SIGNAL mux_nl : STD_LOGIC;
  SIGNAL nand_154_nl : STD_LOGIC;
  SIGNAL mux_532_nl : STD_LOGIC;
  SIGNAL mux_531_nl : STD_LOGIC;
  SIGNAL mux_530_nl : STD_LOGIC;
  SIGNAL or_671_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_1_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_nor_9_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_11_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_65_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_12_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_67_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_13_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_68_nl : STD_LOGIC;
  SIGNAL and_140_nl : STD_LOGIC;
  SIGNAL mux_536_nl : STD_LOGIC;
  SIGNAL mux_540_nl : STD_LOGIC;
  SIGNAL mux_539_nl : STD_LOGIC;
  SIGNAL mux_541_nl : STD_LOGIC;
  SIGNAL nand_151_nl : STD_LOGIC;
  SIGNAL mux_542_nl : STD_LOGIC;
  SIGNAL nand_35_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_3_acc_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_3_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL mux_545_nl : STD_LOGIC;
  SIGNAL mux_544_nl : STD_LOGIC;
  SIGNAL mux_543_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_acc_12_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mux_547_nl : STD_LOGIC;
  SIGNAL mux_546_nl : STD_LOGIC;
  SIGNAL mux_548_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_5_acc_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL mux_549_nl : STD_LOGIC;
  SIGNAL nand_34_nl : STD_LOGIC;
  SIGNAL mux_552_nl : STD_LOGIC;
  SIGNAL mux_554_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_6_acc_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL mux_557_nl : STD_LOGIC;
  SIGNAL mux_556_nl : STD_LOGIC;
  SIGNAL and_155_nl : STD_LOGIC;
  SIGNAL mux_559_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_7_acc_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL and_156_nl : STD_LOGIC;
  SIGNAL mux_566_nl : STD_LOGIC;
  SIGNAL mux_569_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_acc_15_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL nor_459_nl : STD_LOGIC;
  SIGNAL and_158_nl : STD_LOGIC;
  SIGNAL and_215_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL and_159_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_9_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_69_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_acc_17_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_mux_8_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_or_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_1_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_2_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_3_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_4_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_5_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_6_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_7_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_12_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_or_13_nl : STD_LOGIC;
  SIGNAL mux_608_nl : STD_LOGIC;
  SIGNAL nor_477_nl : STD_LOGIC;
  SIGNAL and_184_nl : STD_LOGIC;
  SIGNAL and_187_nl : STD_LOGIC;
  SIGNAL and_190_nl : STD_LOGIC;
  SIGNAL and_193_nl : STD_LOGIC;
  SIGNAL mux_614_nl : STD_LOGIC;
  SIGNAL mux_613_nl : STD_LOGIC;
  SIGNAL mux_612_nl : STD_LOGIC;
  SIGNAL mux_611_nl : STD_LOGIC;
  SIGNAL mux_610_nl : STD_LOGIC;
  SIGNAL mux_609_nl : STD_LOGIC;
  SIGNAL mux_617_nl : STD_LOGIC;
  SIGNAL mux_616_nl : STD_LOGIC;
  SIGNAL mux_615_nl : STD_LOGIC;
  SIGNAL and_210_nl : STD_LOGIC;
  SIGNAL and_202_nl : STD_LOGIC;
  SIGNAL mux_619_nl : STD_LOGIC;
  SIGNAL mux_618_nl : STD_LOGIC;
  SIGNAL or_734_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_11_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_12_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_13_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_14_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_15_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_16_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_17_nl : STD_LOGIC;
  SIGNAL mux_623_nl : STD_LOGIC;
  SIGNAL or_725_nl : STD_LOGIC;
  SIGNAL mux_622_nl : STD_LOGIC;
  SIGNAL nand_31_nl : STD_LOGIC;
  SIGNAL mux_621_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_18_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_19_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_5_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_6_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_7_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_8_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_9_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_10_nl : STD_LOGIC;
  SIGNAL mux_626_nl : STD_LOGIC;
  SIGNAL mux_625_nl : STD_LOGIC;
  SIGNAL mux_624_nl : STD_LOGIC;
  SIGNAL nand_30_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_2_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_3_nl : STD_LOGIC;
  SIGNAL mux_630_nl : STD_LOGIC;
  SIGNAL mux_629_nl : STD_LOGIC;
  SIGNAL mux_628_nl : STD_LOGIC;
  SIGNAL mux_627_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_2_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_4_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_5_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_6_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_7_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_8_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL nand_144_nl : STD_LOGIC;
  SIGNAL or_134_nl : STD_LOGIC;
  SIGNAL mux_485_nl : STD_LOGIC;
  SIGNAL nand_38_nl : STD_LOGIC;
  SIGNAL or_636_nl : STD_LOGIC;
  SIGNAL or_637_nl : STD_LOGIC;
  SIGNAL or_640_nl : STD_LOGIC;
  SIGNAL or_638_nl : STD_LOGIC;
  SIGNAL nor_197_nl : STD_LOGIC;
  SIGNAL or_650_nl : STD_LOGIC;
  SIGNAL nand_152_nl : STD_LOGIC;
  SIGNAL or_653_nl : STD_LOGIC;
  SIGNAL mux_528_nl : STD_LOGIC;
  SIGNAL mux_551_nl : STD_LOGIC;
  SIGNAL mux_550_nl : STD_LOGIC;
  SIGNAL and_152_nl : STD_LOGIC;
  SIGNAL mux_563_nl : STD_LOGIC;
  SIGNAL mux_562_nl : STD_LOGIC;
  SIGNAL mux_572_nl : STD_LOGIC;
  SIGNAL mux_571_nl : STD_LOGIC;
  SIGNAL and_157_nl : STD_LOGIC;
  SIGNAL mux_574_nl : STD_LOGIC;
  SIGNAL mux_579_nl : STD_LOGIC;
  SIGNAL mux_584_nl : STD_LOGIC;
  SIGNAL nor_504_nl : STD_LOGIC;
  SIGNAL nor_505_nl : STD_LOGIC;
  SIGNAL or_699_nl : STD_LOGIC;
  SIGNAL nor_192_nl : STD_LOGIC;
  SIGNAL mux_588_nl : STD_LOGIC;
  SIGNAL nand_27_nl : STD_LOGIC;
  SIGNAL and_214_nl : STD_LOGIC;
  SIGNAL mux_587_nl : STD_LOGIC;
  SIGNAL nand_25_nl : STD_LOGIC;
  SIGNAL mux_585_nl : STD_LOGIC;
  SIGNAL or_696_nl : STD_LOGIC;
  SIGNAL mux_207_nl : STD_LOGIC;
  SIGNAL mux_206_nl : STD_LOGIC;
  SIGNAL or_137_nl : STD_LOGIC;
  SIGNAL mux_205_nl : STD_LOGIC;
  SIGNAL nand_143_nl : STD_LOGIC;
  SIGNAL or_136_nl : STD_LOGIC;
  SIGNAL mux_204_nl : STD_LOGIC;
  SIGNAL or_135_nl : STD_LOGIC;
  SIGNAL and_54_nl : STD_LOGIC;
  SIGNAL and_59_nl : STD_LOGIC;
  SIGNAL and_62_nl : STD_LOGIC;
  SIGNAL and_65_nl : STD_LOGIC;
  SIGNAL and_72_nl : STD_LOGIC;
  SIGNAL and_75_nl : STD_LOGIC;
  SIGNAL and_80_nl : STD_LOGIC;
  SIGNAL and_83_nl : STD_LOGIC;
  SIGNAL and_84_nl : STD_LOGIC;
  SIGNAL and_85_nl : STD_LOGIC;
  SIGNAL and_86_nl : STD_LOGIC;
  SIGNAL and_87_nl : STD_LOGIC;
  SIGNAL and_88_nl : STD_LOGIC;
  SIGNAL and_89_nl : STD_LOGIC;
  SIGNAL and_90_nl : STD_LOGIC;
  SIGNAL and_92_nl : STD_LOGIC;
  SIGNAL and_93_nl : STD_LOGIC;
  SIGNAL and_95_nl : STD_LOGIC;
  SIGNAL and_97_nl : STD_LOGIC;
  SIGNAL and_98_nl : STD_LOGIC;
  SIGNAL and_99_nl : STD_LOGIC;
  SIGNAL and_100_nl : STD_LOGIC;
  SIGNAL and_101_nl : STD_LOGIC;
  SIGNAL mux_221_nl : STD_LOGIC;
  SIGNAL and_259_nl : STD_LOGIC;
  SIGNAL mux_220_nl : STD_LOGIC;
  SIGNAL nor_423_nl : STD_LOGIC;
  SIGNAL mux_219_nl : STD_LOGIC;
  SIGNAL nor_424_nl : STD_LOGIC;
  SIGNAL nor_425_nl : STD_LOGIC;
  SIGNAL mux_218_nl : STD_LOGIC;
  SIGNAL mux_217_nl : STD_LOGIC;
  SIGNAL nor_426_nl : STD_LOGIC;
  SIGNAL mux_216_nl : STD_LOGIC;
  SIGNAL nor_427_nl : STD_LOGIC;
  SIGNAL nor_428_nl : STD_LOGIC;
  SIGNAL nor_429_nl : STD_LOGIC;
  SIGNAL mux_215_nl : STD_LOGIC;
  SIGNAL mux_214_nl : STD_LOGIC;
  SIGNAL nor_430_nl : STD_LOGIC;
  SIGNAL mux_213_nl : STD_LOGIC;
  SIGNAL mux_212_nl : STD_LOGIC;
  SIGNAL nor_431_nl : STD_LOGIC;
  SIGNAL nor_432_nl : STD_LOGIC;
  SIGNAL mux_211_nl : STD_LOGIC;
  SIGNAL nor_433_nl : STD_LOGIC;
  SIGNAL nor_434_nl : STD_LOGIC;
  SIGNAL nor_435_nl : STD_LOGIC;
  SIGNAL mux_210_nl : STD_LOGIC;
  SIGNAL mux_209_nl : STD_LOGIC;
  SIGNAL or_145_nl : STD_LOGIC;
  SIGNAL or_143_nl : STD_LOGIC;
  SIGNAL mux_208_nl : STD_LOGIC;
  SIGNAL or_141_nl : STD_LOGIC;
  SIGNAL or_139_nl : STD_LOGIC;
  SIGNAL mux_236_nl : STD_LOGIC;
  SIGNAL mux_235_nl : STD_LOGIC;
  SIGNAL and_258_nl : STD_LOGIC;
  SIGNAL mux_234_nl : STD_LOGIC;
  SIGNAL nor_410_nl : STD_LOGIC;
  SIGNAL nor_411_nl : STD_LOGIC;
  SIGNAL mux_233_nl : STD_LOGIC;
  SIGNAL nor_412_nl : STD_LOGIC;
  SIGNAL nor_413_nl : STD_LOGIC;
  SIGNAL mux_232_nl : STD_LOGIC;
  SIGNAL mux_231_nl : STD_LOGIC;
  SIGNAL nor_414_nl : STD_LOGIC;
  SIGNAL nor_415_nl : STD_LOGIC;
  SIGNAL nor_416_nl : STD_LOGIC;
  SIGNAL mux_230_nl : STD_LOGIC;
  SIGNAL or_187_nl : STD_LOGIC;
  SIGNAL or_185_nl : STD_LOGIC;
  SIGNAL mux_229_nl : STD_LOGIC;
  SIGNAL mux_228_nl : STD_LOGIC;
  SIGNAL mux_227_nl : STD_LOGIC;
  SIGNAL mux_226_nl : STD_LOGIC;
  SIGNAL nor_417_nl : STD_LOGIC;
  SIGNAL nor_418_nl : STD_LOGIC;
  SIGNAL nor_419_nl : STD_LOGIC;
  SIGNAL mux_225_nl : STD_LOGIC;
  SIGNAL nor_420_nl : STD_LOGIC;
  SIGNAL nor_421_nl : STD_LOGIC;
  SIGNAL nor_422_nl : STD_LOGIC;
  SIGNAL mux_224_nl : STD_LOGIC;
  SIGNAL or_174_nl : STD_LOGIC;
  SIGNAL mux_223_nl : STD_LOGIC;
  SIGNAL or_173_nl : STD_LOGIC;
  SIGNAL or_171_nl : STD_LOGIC;
  SIGNAL mux_251_nl : STD_LOGIC;
  SIGNAL and_257_nl : STD_LOGIC;
  SIGNAL mux_250_nl : STD_LOGIC;
  SIGNAL nor_397_nl : STD_LOGIC;
  SIGNAL mux_249_nl : STD_LOGIC;
  SIGNAL nor_398_nl : STD_LOGIC;
  SIGNAL nor_399_nl : STD_LOGIC;
  SIGNAL mux_248_nl : STD_LOGIC;
  SIGNAL mux_247_nl : STD_LOGIC;
  SIGNAL nor_400_nl : STD_LOGIC;
  SIGNAL mux_246_nl : STD_LOGIC;
  SIGNAL nor_401_nl : STD_LOGIC;
  SIGNAL nor_402_nl : STD_LOGIC;
  SIGNAL nor_403_nl : STD_LOGIC;
  SIGNAL mux_245_nl : STD_LOGIC;
  SIGNAL mux_244_nl : STD_LOGIC;
  SIGNAL nor_404_nl : STD_LOGIC;
  SIGNAL mux_243_nl : STD_LOGIC;
  SIGNAL mux_242_nl : STD_LOGIC;
  SIGNAL nor_405_nl : STD_LOGIC;
  SIGNAL nor_406_nl : STD_LOGIC;
  SIGNAL mux_241_nl : STD_LOGIC;
  SIGNAL nor_407_nl : STD_LOGIC;
  SIGNAL nor_408_nl : STD_LOGIC;
  SIGNAL nor_409_nl : STD_LOGIC;
  SIGNAL mux_240_nl : STD_LOGIC;
  SIGNAL mux_239_nl : STD_LOGIC;
  SIGNAL or_204_nl : STD_LOGIC;
  SIGNAL or_202_nl : STD_LOGIC;
  SIGNAL mux_238_nl : STD_LOGIC;
  SIGNAL or_200_nl : STD_LOGIC;
  SIGNAL or_198_nl : STD_LOGIC;
  SIGNAL mux_266_nl : STD_LOGIC;
  SIGNAL mux_265_nl : STD_LOGIC;
  SIGNAL and_256_nl : STD_LOGIC;
  SIGNAL mux_264_nl : STD_LOGIC;
  SIGNAL nor_384_nl : STD_LOGIC;
  SIGNAL nor_385_nl : STD_LOGIC;
  SIGNAL mux_263_nl : STD_LOGIC;
  SIGNAL nor_386_nl : STD_LOGIC;
  SIGNAL nor_387_nl : STD_LOGIC;
  SIGNAL mux_262_nl : STD_LOGIC;
  SIGNAL mux_261_nl : STD_LOGIC;
  SIGNAL mux_260_nl : STD_LOGIC;
  SIGNAL nor_388_nl : STD_LOGIC;
  SIGNAL nor_389_nl : STD_LOGIC;
  SIGNAL nor_390_nl : STD_LOGIC;
  SIGNAL mux_259_nl : STD_LOGIC;
  SIGNAL nor_391_nl : STD_LOGIC;
  SIGNAL nor_392_nl : STD_LOGIC;
  SIGNAL mux_258_nl : STD_LOGIC;
  SIGNAL mux_257_nl : STD_LOGIC;
  SIGNAL mux_256_nl : STD_LOGIC;
  SIGNAL nor_393_nl : STD_LOGIC;
  SIGNAL nor_394_nl : STD_LOGIC;
  SIGNAL nor_395_nl : STD_LOGIC;
  SIGNAL mux_255_nl : STD_LOGIC;
  SIGNAL or_238_nl : STD_LOGIC;
  SIGNAL or_236_nl : STD_LOGIC;
  SIGNAL nor_396_nl : STD_LOGIC;
  SIGNAL mux_254_nl : STD_LOGIC;
  SIGNAL or_233_nl : STD_LOGIC;
  SIGNAL mux_253_nl : STD_LOGIC;
  SIGNAL or_232_nl : STD_LOGIC;
  SIGNAL or_230_nl : STD_LOGIC;
  SIGNAL mux_281_nl : STD_LOGIC;
  SIGNAL and_255_nl : STD_LOGIC;
  SIGNAL mux_280_nl : STD_LOGIC;
  SIGNAL nor_371_nl : STD_LOGIC;
  SIGNAL mux_279_nl : STD_LOGIC;
  SIGNAL nor_372_nl : STD_LOGIC;
  SIGNAL nor_373_nl : STD_LOGIC;
  SIGNAL mux_278_nl : STD_LOGIC;
  SIGNAL mux_277_nl : STD_LOGIC;
  SIGNAL nor_374_nl : STD_LOGIC;
  SIGNAL mux_276_nl : STD_LOGIC;
  SIGNAL nor_375_nl : STD_LOGIC;
  SIGNAL nor_376_nl : STD_LOGIC;
  SIGNAL nor_377_nl : STD_LOGIC;
  SIGNAL mux_275_nl : STD_LOGIC;
  SIGNAL mux_274_nl : STD_LOGIC;
  SIGNAL nor_378_nl : STD_LOGIC;
  SIGNAL mux_273_nl : STD_LOGIC;
  SIGNAL mux_272_nl : STD_LOGIC;
  SIGNAL nor_379_nl : STD_LOGIC;
  SIGNAL nor_380_nl : STD_LOGIC;
  SIGNAL mux_271_nl : STD_LOGIC;
  SIGNAL nor_381_nl : STD_LOGIC;
  SIGNAL nor_382_nl : STD_LOGIC;
  SIGNAL nor_383_nl : STD_LOGIC;
  SIGNAL mux_270_nl : STD_LOGIC;
  SIGNAL mux_269_nl : STD_LOGIC;
  SIGNAL or_263_nl : STD_LOGIC;
  SIGNAL or_261_nl : STD_LOGIC;
  SIGNAL mux_268_nl : STD_LOGIC;
  SIGNAL or_259_nl : STD_LOGIC;
  SIGNAL or_257_nl : STD_LOGIC;
  SIGNAL mux_296_nl : STD_LOGIC;
  SIGNAL mux_295_nl : STD_LOGIC;
  SIGNAL and_254_nl : STD_LOGIC;
  SIGNAL mux_294_nl : STD_LOGIC;
  SIGNAL nor_358_nl : STD_LOGIC;
  SIGNAL nor_359_nl : STD_LOGIC;
  SIGNAL mux_293_nl : STD_LOGIC;
  SIGNAL nor_360_nl : STD_LOGIC;
  SIGNAL nor_361_nl : STD_LOGIC;
  SIGNAL mux_292_nl : STD_LOGIC;
  SIGNAL mux_291_nl : STD_LOGIC;
  SIGNAL nor_362_nl : STD_LOGIC;
  SIGNAL nor_363_nl : STD_LOGIC;
  SIGNAL nor_364_nl : STD_LOGIC;
  SIGNAL mux_290_nl : STD_LOGIC;
  SIGNAL or_305_nl : STD_LOGIC;
  SIGNAL or_303_nl : STD_LOGIC;
  SIGNAL mux_289_nl : STD_LOGIC;
  SIGNAL mux_288_nl : STD_LOGIC;
  SIGNAL mux_287_nl : STD_LOGIC;
  SIGNAL mux_286_nl : STD_LOGIC;
  SIGNAL nor_365_nl : STD_LOGIC;
  SIGNAL nor_366_nl : STD_LOGIC;
  SIGNAL nor_367_nl : STD_LOGIC;
  SIGNAL mux_285_nl : STD_LOGIC;
  SIGNAL nor_368_nl : STD_LOGIC;
  SIGNAL nor_369_nl : STD_LOGIC;
  SIGNAL nor_370_nl : STD_LOGIC;
  SIGNAL mux_284_nl : STD_LOGIC;
  SIGNAL or_292_nl : STD_LOGIC;
  SIGNAL mux_283_nl : STD_LOGIC;
  SIGNAL or_291_nl : STD_LOGIC;
  SIGNAL or_289_nl : STD_LOGIC;
  SIGNAL mux_311_nl : STD_LOGIC;
  SIGNAL mux_310_nl : STD_LOGIC;
  SIGNAL nor_345_nl : STD_LOGIC;
  SIGNAL mux_309_nl : STD_LOGIC;
  SIGNAL nor_346_nl : STD_LOGIC;
  SIGNAL mux_308_nl : STD_LOGIC;
  SIGNAL nor_347_nl : STD_LOGIC;
  SIGNAL nor_348_nl : STD_LOGIC;
  SIGNAL and_253_nl : STD_LOGIC;
  SIGNAL mux_307_nl : STD_LOGIC;
  SIGNAL mux_306_nl : STD_LOGIC;
  SIGNAL nor_349_nl : STD_LOGIC;
  SIGNAL nor_350_nl : STD_LOGIC;
  SIGNAL mux_305_nl : STD_LOGIC;
  SIGNAL nor_351_nl : STD_LOGIC;
  SIGNAL nor_352_nl : STD_LOGIC;
  SIGNAL mux_304_nl : STD_LOGIC;
  SIGNAL mux_303_nl : STD_LOGIC;
  SIGNAL mux_302_nl : STD_LOGIC;
  SIGNAL nor_353_nl : STD_LOGIC;
  SIGNAL mux_301_nl : STD_LOGIC;
  SIGNAL nor_354_nl : STD_LOGIC;
  SIGNAL nor_355_nl : STD_LOGIC;
  SIGNAL nor_356_nl : STD_LOGIC;
  SIGNAL nor_357_nl : STD_LOGIC;
  SIGNAL mux_300_nl : STD_LOGIC;
  SIGNAL mux_299_nl : STD_LOGIC;
  SIGNAL or_321_nl : STD_LOGIC;
  SIGNAL or_320_nl : STD_LOGIC;
  SIGNAL mux_298_nl : STD_LOGIC;
  SIGNAL or_318_nl : STD_LOGIC;
  SIGNAL or_316_nl : STD_LOGIC;
  SIGNAL mux_326_nl : STD_LOGIC;
  SIGNAL mux_325_nl : STD_LOGIC;
  SIGNAL and_252_nl : STD_LOGIC;
  SIGNAL mux_324_nl : STD_LOGIC;
  SIGNAL nor_332_nl : STD_LOGIC;
  SIGNAL nor_333_nl : STD_LOGIC;
  SIGNAL mux_323_nl : STD_LOGIC;
  SIGNAL nor_334_nl : STD_LOGIC;
  SIGNAL nor_335_nl : STD_LOGIC;
  SIGNAL mux_322_nl : STD_LOGIC;
  SIGNAL mux_321_nl : STD_LOGIC;
  SIGNAL mux_320_nl : STD_LOGIC;
  SIGNAL nor_336_nl : STD_LOGIC;
  SIGNAL nor_337_nl : STD_LOGIC;
  SIGNAL nor_338_nl : STD_LOGIC;
  SIGNAL mux_319_nl : STD_LOGIC;
  SIGNAL nor_339_nl : STD_LOGIC;
  SIGNAL nor_340_nl : STD_LOGIC;
  SIGNAL mux_318_nl : STD_LOGIC;
  SIGNAL mux_317_nl : STD_LOGIC;
  SIGNAL mux_316_nl : STD_LOGIC;
  SIGNAL nor_341_nl : STD_LOGIC;
  SIGNAL nor_342_nl : STD_LOGIC;
  SIGNAL nor_343_nl : STD_LOGIC;
  SIGNAL mux_315_nl : STD_LOGIC;
  SIGNAL or_351_nl : STD_LOGIC;
  SIGNAL or_349_nl : STD_LOGIC;
  SIGNAL nor_344_nl : STD_LOGIC;
  SIGNAL mux_314_nl : STD_LOGIC;
  SIGNAL or_347_nl : STD_LOGIC;
  SIGNAL mux_313_nl : STD_LOGIC;
  SIGNAL or_346_nl : STD_LOGIC;
  SIGNAL or_344_nl : STD_LOGIC;
  SIGNAL mux_341_nl : STD_LOGIC;
  SIGNAL and_251_nl : STD_LOGIC;
  SIGNAL mux_340_nl : STD_LOGIC;
  SIGNAL nor_319_nl : STD_LOGIC;
  SIGNAL mux_339_nl : STD_LOGIC;
  SIGNAL nor_320_nl : STD_LOGIC;
  SIGNAL nor_321_nl : STD_LOGIC;
  SIGNAL mux_338_nl : STD_LOGIC;
  SIGNAL mux_337_nl : STD_LOGIC;
  SIGNAL nor_322_nl : STD_LOGIC;
  SIGNAL mux_336_nl : STD_LOGIC;
  SIGNAL nor_323_nl : STD_LOGIC;
  SIGNAL nor_324_nl : STD_LOGIC;
  SIGNAL nor_325_nl : STD_LOGIC;
  SIGNAL mux_335_nl : STD_LOGIC;
  SIGNAL mux_334_nl : STD_LOGIC;
  SIGNAL nor_326_nl : STD_LOGIC;
  SIGNAL mux_333_nl : STD_LOGIC;
  SIGNAL mux_332_nl : STD_LOGIC;
  SIGNAL nor_327_nl : STD_LOGIC;
  SIGNAL nor_328_nl : STD_LOGIC;
  SIGNAL mux_331_nl : STD_LOGIC;
  SIGNAL nor_329_nl : STD_LOGIC;
  SIGNAL nor_330_nl : STD_LOGIC;
  SIGNAL nor_331_nl : STD_LOGIC;
  SIGNAL mux_330_nl : STD_LOGIC;
  SIGNAL mux_329_nl : STD_LOGIC;
  SIGNAL or_376_nl : STD_LOGIC;
  SIGNAL or_374_nl : STD_LOGIC;
  SIGNAL mux_328_nl : STD_LOGIC;
  SIGNAL or_372_nl : STD_LOGIC;
  SIGNAL or_370_nl : STD_LOGIC;
  SIGNAL mux_356_nl : STD_LOGIC;
  SIGNAL mux_355_nl : STD_LOGIC;
  SIGNAL and_250_nl : STD_LOGIC;
  SIGNAL mux_354_nl : STD_LOGIC;
  SIGNAL nor_306_nl : STD_LOGIC;
  SIGNAL nor_307_nl : STD_LOGIC;
  SIGNAL mux_353_nl : STD_LOGIC;
  SIGNAL nor_308_nl : STD_LOGIC;
  SIGNAL nor_309_nl : STD_LOGIC;
  SIGNAL mux_352_nl : STD_LOGIC;
  SIGNAL mux_351_nl : STD_LOGIC;
  SIGNAL nor_310_nl : STD_LOGIC;
  SIGNAL nor_311_nl : STD_LOGIC;
  SIGNAL nor_312_nl : STD_LOGIC;
  SIGNAL mux_350_nl : STD_LOGIC;
  SIGNAL or_418_nl : STD_LOGIC;
  SIGNAL or_416_nl : STD_LOGIC;
  SIGNAL mux_349_nl : STD_LOGIC;
  SIGNAL mux_348_nl : STD_LOGIC;
  SIGNAL mux_347_nl : STD_LOGIC;
  SIGNAL mux_346_nl : STD_LOGIC;
  SIGNAL nor_313_nl : STD_LOGIC;
  SIGNAL nor_314_nl : STD_LOGIC;
  SIGNAL nor_315_nl : STD_LOGIC;
  SIGNAL mux_345_nl : STD_LOGIC;
  SIGNAL nor_316_nl : STD_LOGIC;
  SIGNAL nor_317_nl : STD_LOGIC;
  SIGNAL nor_318_nl : STD_LOGIC;
  SIGNAL mux_344_nl : STD_LOGIC;
  SIGNAL or_405_nl : STD_LOGIC;
  SIGNAL mux_343_nl : STD_LOGIC;
  SIGNAL or_404_nl : STD_LOGIC;
  SIGNAL or_402_nl : STD_LOGIC;
  SIGNAL mux_371_nl : STD_LOGIC;
  SIGNAL and_249_nl : STD_LOGIC;
  SIGNAL mux_370_nl : STD_LOGIC;
  SIGNAL nor_293_nl : STD_LOGIC;
  SIGNAL mux_369_nl : STD_LOGIC;
  SIGNAL nor_294_nl : STD_LOGIC;
  SIGNAL nor_295_nl : STD_LOGIC;
  SIGNAL mux_368_nl : STD_LOGIC;
  SIGNAL mux_367_nl : STD_LOGIC;
  SIGNAL nor_296_nl : STD_LOGIC;
  SIGNAL mux_366_nl : STD_LOGIC;
  SIGNAL nor_297_nl : STD_LOGIC;
  SIGNAL nor_298_nl : STD_LOGIC;
  SIGNAL nor_299_nl : STD_LOGIC;
  SIGNAL mux_365_nl : STD_LOGIC;
  SIGNAL mux_364_nl : STD_LOGIC;
  SIGNAL nor_300_nl : STD_LOGIC;
  SIGNAL mux_363_nl : STD_LOGIC;
  SIGNAL mux_362_nl : STD_LOGIC;
  SIGNAL nor_301_nl : STD_LOGIC;
  SIGNAL nor_302_nl : STD_LOGIC;
  SIGNAL mux_361_nl : STD_LOGIC;
  SIGNAL nor_303_nl : STD_LOGIC;
  SIGNAL nor_304_nl : STD_LOGIC;
  SIGNAL nor_305_nl : STD_LOGIC;
  SIGNAL mux_360_nl : STD_LOGIC;
  SIGNAL mux_359_nl : STD_LOGIC;
  SIGNAL or_434_nl : STD_LOGIC;
  SIGNAL or_433_nl : STD_LOGIC;
  SIGNAL mux_358_nl : STD_LOGIC;
  SIGNAL or_431_nl : STD_LOGIC;
  SIGNAL or_429_nl : STD_LOGIC;
  SIGNAL mux_386_nl : STD_LOGIC;
  SIGNAL mux_385_nl : STD_LOGIC;
  SIGNAL and_248_nl : STD_LOGIC;
  SIGNAL mux_384_nl : STD_LOGIC;
  SIGNAL nor_280_nl : STD_LOGIC;
  SIGNAL nor_281_nl : STD_LOGIC;
  SIGNAL mux_383_nl : STD_LOGIC;
  SIGNAL nor_282_nl : STD_LOGIC;
  SIGNAL nor_283_nl : STD_LOGIC;
  SIGNAL mux_382_nl : STD_LOGIC;
  SIGNAL mux_381_nl : STD_LOGIC;
  SIGNAL mux_380_nl : STD_LOGIC;
  SIGNAL nor_284_nl : STD_LOGIC;
  SIGNAL nor_285_nl : STD_LOGIC;
  SIGNAL nor_286_nl : STD_LOGIC;
  SIGNAL mux_379_nl : STD_LOGIC;
  SIGNAL nor_287_nl : STD_LOGIC;
  SIGNAL nor_288_nl : STD_LOGIC;
  SIGNAL mux_378_nl : STD_LOGIC;
  SIGNAL mux_377_nl : STD_LOGIC;
  SIGNAL mux_376_nl : STD_LOGIC;
  SIGNAL nor_289_nl : STD_LOGIC;
  SIGNAL nor_290_nl : STD_LOGIC;
  SIGNAL nor_291_nl : STD_LOGIC;
  SIGNAL mux_375_nl : STD_LOGIC;
  SIGNAL or_467_nl : STD_LOGIC;
  SIGNAL or_465_nl : STD_LOGIC;
  SIGNAL nor_292_nl : STD_LOGIC;
  SIGNAL mux_374_nl : STD_LOGIC;
  SIGNAL or_462_nl : STD_LOGIC;
  SIGNAL mux_373_nl : STD_LOGIC;
  SIGNAL or_461_nl : STD_LOGIC;
  SIGNAL or_459_nl : STD_LOGIC;
  SIGNAL mux_401_nl : STD_LOGIC;
  SIGNAL and_247_nl : STD_LOGIC;
  SIGNAL mux_400_nl : STD_LOGIC;
  SIGNAL nor_267_nl : STD_LOGIC;
  SIGNAL mux_399_nl : STD_LOGIC;
  SIGNAL nor_268_nl : STD_LOGIC;
  SIGNAL nor_269_nl : STD_LOGIC;
  SIGNAL mux_398_nl : STD_LOGIC;
  SIGNAL mux_397_nl : STD_LOGIC;
  SIGNAL nor_270_nl : STD_LOGIC;
  SIGNAL mux_396_nl : STD_LOGIC;
  SIGNAL nor_271_nl : STD_LOGIC;
  SIGNAL nor_272_nl : STD_LOGIC;
  SIGNAL nor_273_nl : STD_LOGIC;
  SIGNAL mux_395_nl : STD_LOGIC;
  SIGNAL mux_394_nl : STD_LOGIC;
  SIGNAL nor_274_nl : STD_LOGIC;
  SIGNAL mux_393_nl : STD_LOGIC;
  SIGNAL mux_392_nl : STD_LOGIC;
  SIGNAL nor_275_nl : STD_LOGIC;
  SIGNAL nor_276_nl : STD_LOGIC;
  SIGNAL mux_391_nl : STD_LOGIC;
  SIGNAL nor_277_nl : STD_LOGIC;
  SIGNAL nor_278_nl : STD_LOGIC;
  SIGNAL nor_279_nl : STD_LOGIC;
  SIGNAL mux_390_nl : STD_LOGIC;
  SIGNAL mux_389_nl : STD_LOGIC;
  SIGNAL or_492_nl : STD_LOGIC;
  SIGNAL or_490_nl : STD_LOGIC;
  SIGNAL mux_388_nl : STD_LOGIC;
  SIGNAL or_488_nl : STD_LOGIC;
  SIGNAL or_486_nl : STD_LOGIC;
  SIGNAL mux_416_nl : STD_LOGIC;
  SIGNAL mux_415_nl : STD_LOGIC;
  SIGNAL and_246_nl : STD_LOGIC;
  SIGNAL mux_414_nl : STD_LOGIC;
  SIGNAL nor_254_nl : STD_LOGIC;
  SIGNAL nor_255_nl : STD_LOGIC;
  SIGNAL mux_413_nl : STD_LOGIC;
  SIGNAL nor_256_nl : STD_LOGIC;
  SIGNAL nor_257_nl : STD_LOGIC;
  SIGNAL mux_412_nl : STD_LOGIC;
  SIGNAL mux_411_nl : STD_LOGIC;
  SIGNAL nor_258_nl : STD_LOGIC;
  SIGNAL nor_259_nl : STD_LOGIC;
  SIGNAL nor_260_nl : STD_LOGIC;
  SIGNAL mux_410_nl : STD_LOGIC;
  SIGNAL or_531_nl : STD_LOGIC;
  SIGNAL or_529_nl : STD_LOGIC;
  SIGNAL mux_409_nl : STD_LOGIC;
  SIGNAL mux_408_nl : STD_LOGIC;
  SIGNAL mux_407_nl : STD_LOGIC;
  SIGNAL mux_406_nl : STD_LOGIC;
  SIGNAL nor_261_nl : STD_LOGIC;
  SIGNAL nor_262_nl : STD_LOGIC;
  SIGNAL nor_263_nl : STD_LOGIC;
  SIGNAL mux_405_nl : STD_LOGIC;
  SIGNAL nor_264_nl : STD_LOGIC;
  SIGNAL nor_265_nl : STD_LOGIC;
  SIGNAL nor_266_nl : STD_LOGIC;
  SIGNAL mux_404_nl : STD_LOGIC;
  SIGNAL or_518_nl : STD_LOGIC;
  SIGNAL mux_403_nl : STD_LOGIC;
  SIGNAL or_517_nl : STD_LOGIC;
  SIGNAL or_515_nl : STD_LOGIC;
  SIGNAL mux_431_nl : STD_LOGIC;
  SIGNAL mux_430_nl : STD_LOGIC;
  SIGNAL nor_247_nl : STD_LOGIC;
  SIGNAL mux_429_nl : STD_LOGIC;
  SIGNAL and_239_nl : STD_LOGIC;
  SIGNAL mux_428_nl : STD_LOGIC;
  SIGNAL and_240_nl : STD_LOGIC;
  SIGNAL nor_248_nl : STD_LOGIC;
  SIGNAL and_241_nl : STD_LOGIC;
  SIGNAL mux_427_nl : STD_LOGIC;
  SIGNAL mux_426_nl : STD_LOGIC;
  SIGNAL and_242_nl : STD_LOGIC;
  SIGNAL nor_249_nl : STD_LOGIC;
  SIGNAL mux_425_nl : STD_LOGIC;
  SIGNAL and_243_nl : STD_LOGIC;
  SIGNAL nor_250_nl : STD_LOGIC;
  SIGNAL mux_424_nl : STD_LOGIC;
  SIGNAL mux_423_nl : STD_LOGIC;
  SIGNAL mux_422_nl : STD_LOGIC;
  SIGNAL and_244_nl : STD_LOGIC;
  SIGNAL mux_421_nl : STD_LOGIC;
  SIGNAL and_245_nl : STD_LOGIC;
  SIGNAL nor_251_nl : STD_LOGIC;
  SIGNAL nor_252_nl : STD_LOGIC;
  SIGNAL nor_253_nl : STD_LOGIC;
  SIGNAL mux_420_nl : STD_LOGIC;
  SIGNAL mux_419_nl : STD_LOGIC;
  SIGNAL nand_58_nl : STD_LOGIC;
  SIGNAL or_544_nl : STD_LOGIC;
  SIGNAL mux_418_nl : STD_LOGIC;
  SIGNAL nand_60_nl : STD_LOGIC;
  SIGNAL or_542_nl : STD_LOGIC;
  SIGNAL mux_446_nl : STD_LOGIC;
  SIGNAL mux_445_nl : STD_LOGIC;
  SIGNAL and_237_nl : STD_LOGIC;
  SIGNAL mux_444_nl : STD_LOGIC;
  SIGNAL nor_233_nl : STD_LOGIC;
  SIGNAL nor_234_nl : STD_LOGIC;
  SIGNAL mux_443_nl : STD_LOGIC;
  SIGNAL mux_442_nl : STD_LOGIC;
  SIGNAL nor_235_nl : STD_LOGIC;
  SIGNAL nor_236_nl : STD_LOGIC;
  SIGNAL nor_237_nl : STD_LOGIC;
  SIGNAL mux_441_nl : STD_LOGIC;
  SIGNAL mux_440_nl : STD_LOGIC;
  SIGNAL nor_238_nl : STD_LOGIC;
  SIGNAL nor_239_nl : STD_LOGIC;
  SIGNAL mux_439_nl : STD_LOGIC;
  SIGNAL nor_240_nl : STD_LOGIC;
  SIGNAL nor_241_nl : STD_LOGIC;
  SIGNAL mux_438_nl : STD_LOGIC;
  SIGNAL mux_437_nl : STD_LOGIC;
  SIGNAL mux_436_nl : STD_LOGIC;
  SIGNAL nor_242_nl : STD_LOGIC;
  SIGNAL nor_243_nl : STD_LOGIC;
  SIGNAL mux_435_nl : STD_LOGIC;
  SIGNAL nor_244_nl : STD_LOGIC;
  SIGNAL mux_434_nl : STD_LOGIC;
  SIGNAL nor_245_nl : STD_LOGIC;
  SIGNAL and_238_nl : STD_LOGIC;
  SIGNAL nor_246_nl : STD_LOGIC;
  SIGNAL mux_433_nl : STD_LOGIC;
  SIGNAL or_728_nl : STD_LOGIC;
  SIGNAL nand_51_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_1_tmp_mul_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL mux_454_nl : STD_LOGIC;
  SIGNAL mux_453_nl : STD_LOGIC;
  SIGNAL mux_452_nl : STD_LOGIC;
  SIGNAL or_588_nl : STD_LOGIC;
  SIGNAL or_586_nl : STD_LOGIC;
  SIGNAL mux_451_nl : STD_LOGIC;
  SIGNAL mux_450_nl : STD_LOGIC;
  SIGNAL mux_449_nl : STD_LOGIC;
  SIGNAL or_583_nl : STD_LOGIC;
  SIGNAL mux_448_nl : STD_LOGIC;
  SIGNAL or_581_nl : STD_LOGIC;
  SIGNAL or_580_nl : STD_LOGIC;
  SIGNAL mux_457_nl : STD_LOGIC;
  SIGNAL mux_456_nl : STD_LOGIC;
  SIGNAL nor_229_nl : STD_LOGIC;
  SIGNAL mux_455_nl : STD_LOGIC;
  SIGNAL nor_232_nl : STD_LOGIC;
  SIGNAL mux_462_nl : STD_LOGIC;
  SIGNAL mux_461_nl : STD_LOGIC;
  SIGNAL nor_223_nl : STD_LOGIC;
  SIGNAL nor_224_nl : STD_LOGIC;
  SIGNAL mux_460_nl : STD_LOGIC;
  SIGNAL mux_459_nl : STD_LOGIC;
  SIGNAL mux_458_nl : STD_LOGIC;
  SIGNAL mux_465_nl : STD_LOGIC;
  SIGNAL mux_464_nl : STD_LOGIC;
  SIGNAL nor_219_nl : STD_LOGIC;
  SIGNAL mux_463_nl : STD_LOGIC;
  SIGNAL nor_222_nl : STD_LOGIC;
  SIGNAL mux_471_nl : STD_LOGIC;
  SIGNAL mux_470_nl : STD_LOGIC;
  SIGNAL mux_469_nl : STD_LOGIC;
  SIGNAL nor_212_nl : STD_LOGIC;
  SIGNAL nor_213_nl : STD_LOGIC;
  SIGNAL nor_214_nl : STD_LOGIC;
  SIGNAL mux_468_nl : STD_LOGIC;
  SIGNAL mux_467_nl : STD_LOGIC;
  SIGNAL nor_215_nl : STD_LOGIC;
  SIGNAL nor_216_nl : STD_LOGIC;
  SIGNAL mux_466_nl : STD_LOGIC;
  SIGNAL nor_217_nl : STD_LOGIC;
  SIGNAL nor_218_nl : STD_LOGIC;
  SIGNAL mux_474_nl : STD_LOGIC;
  SIGNAL mux_473_nl : STD_LOGIC;
  SIGNAL nor_208_nl : STD_LOGIC;
  SIGNAL mux_472_nl : STD_LOGIC;
  SIGNAL nor_211_nl : STD_LOGIC;
  SIGNAL mux_479_nl : STD_LOGIC;
  SIGNAL mux_478_nl : STD_LOGIC;
  SIGNAL nor_202_nl : STD_LOGIC;
  SIGNAL nor_203_nl : STD_LOGIC;
  SIGNAL mux_477_nl : STD_LOGIC;
  SIGNAL mux_476_nl : STD_LOGIC;
  SIGNAL mux_475_nl : STD_LOGIC;
  SIGNAL mux_482_nl : STD_LOGIC;
  SIGNAL mux_481_nl : STD_LOGIC;
  SIGNAL and_nl : STD_LOGIC;
  SIGNAL mux_480_nl : STD_LOGIC;
  SIGNAL nor_201_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux_92_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL and_533_nl : STD_LOGIC;
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL COMP_LOOP_mux_93_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nand_1_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux_94_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_and_28_nl : STD_LOGIC_VECTOR (53 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_mux1h_52_nl : STD_LOGIC_VECTOR (53 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_and_29_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_53_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_54_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_or_40_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_and_30_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_55_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL COMP_LOOP_tmp_or_41_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux1h_56_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_mux_8_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl : STD_LOGIC;
  SIGNAL STAGE_LOOP_mux_4_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL COMP_LOOP_mux1h_178_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_179_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_210_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_211_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_212_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_213_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_214_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_215_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_216_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_180_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_217_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_218_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_219_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_220_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_221_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_222_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_223_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_181_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_182_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_224_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_225_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_226_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_227_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_228_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_229_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_and_230_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_183_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_184_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_185_nl : STD_LOGIC;
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT modulo
    PORT (
      base_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      m_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      return_rsc_z : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      ccs_ccore_start_rsc_dat : IN STD_LOGIC;
      ccs_ccore_clk : IN STD_LOGIC;
      ccs_ccore_srst : IN STD_LOGIC;
      ccs_ccore_en : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL COMP_LOOP_1_modulo_cmp_base_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_modulo_cmp_m_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_modulo_cmp_return_rsc_z_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat : STD_LOGIC;

  SIGNAL COMP_LOOP_5_tmp_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL COMP_LOOP_5_tmp_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL COMP_LOOP_5_tmp_lshift_rg_z : STD_LOGIC_VECTOR (10 DOWNTO 0);

  SIGNAL COMP_LOOP_1_tmp_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL COMP_LOOP_1_tmp_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL COMP_LOOP_1_tmp_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_core_wait_dp
    PORT(
      ensig_cgo_iro : IN STD_LOGIC;
      ensig_cgo : IN STD_LOGIC;
      COMP_LOOP_1_modulo_cmp_ccs_ccore_en : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro : STD_LOGIC;

  COMPONENT inPlaceNTT_DIF_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      COMP_LOOP_C_31_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_62_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_93_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_124_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_155_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_186_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_217_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_248_tr0 : IN STD_LOGIC;
      VEC_LOOP_C_0_tr0 : IN STD_LOGIC;
      STAGE_LOOP_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_10_2(input_9 : STD_LOGIC;
  input_8 : STD_LOGIC;
  input_7 : STD_LOGIC;
  input_6 : STD_LOGIC;
  input_5 : STD_LOGIC;
  input_4 : STD_LOGIC;
  input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(9 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
      tmp := sel(4);
      result := result or ( input_4 and tmp);
      tmp := sel(5);
      result := result or ( input_5 and tmp);
      tmp := sel(6);
      result := result or ( input_6 and tmp);
      tmp := sel(7);
      result := result or ( input_7 and tmp);
      tmp := sel(8);
      result := result or ( input_8 and tmp);
      tmp := sel(9);
      result := result or ( input_9 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_8_2(input_7 : STD_LOGIC;
  input_6 : STD_LOGIC;
  input_5 : STD_LOGIC;
  input_4 : STD_LOGIC;
  input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(7 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
      tmp := sel(4);
      result := result or ( input_4 and tmp);
      tmp := sel(5);
      result := result or ( input_5 and tmp);
      tmp := sel(6);
      result := result or ( input_6 and tmp);
      tmp := sel(7);
      result := result or ( input_7 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_54_8_2(input_7 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(7 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(53 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(53 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_12_2(input_11 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(11 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
      tmp := (OTHERS=>sel( 9));
      result := result or ( input_9 and tmp);
      tmp := (OTHERS=>sel( 10));
      result := result or ( input_10 and tmp);
      tmp := (OTHERS=>sel( 11));
      result := result or ( input_11 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_4_2(input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_8_2(input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(7 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_9_2(input_8 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(8 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_6_4_2(input_3 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_16_2(input_15 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_14 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_13 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_12 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_11 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(15 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
      tmp := (OTHERS=>sel( 9));
      result := result or ( input_9 and tmp);
      tmp := (OTHERS=>sel( 10));
      result := result or ( input_10 and tmp);
      tmp := (OTHERS=>sel( 11));
      result := result or ( input_11 and tmp);
      tmp := (OTHERS=>sel( 12));
      result := result or ( input_12 and tmp);
      tmp := (OTHERS=>sel( 13));
      result := result or ( input_13 and tmp);
      tmp := (OTHERS=>sel( 14));
      result := result or ( input_14 and tmp);
      tmp := (OTHERS=>sel( 15));
      result := result or ( input_15 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_6_2(input_5 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(5 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_7_2(input_6 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_12_2(input_11 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(11 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
      tmp := (OTHERS=>sel( 9));
      result := result or ( input_9 and tmp);
      tmp := (OTHERS=>sel( 10));
      result := result or ( input_10 and tmp);
      tmp := (OTHERS=>sel( 11));
      result := result or ( input_11 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_11_2_2(input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_54_2_2(input_0 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(53 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(53 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION minimum(arg1,arg2:INTEGER) RETURN INTEGER IS
  BEGIN
    IF(arg1<arg2)THEN
      RETURN arg1;
    ELSE
      RETURN arg2;
    END IF;
  END;

  FUNCTION maximum(arg1,arg2:INTEGER) RETURN INTEGER IS
  BEGIN
    IF(arg1>arg2)THEN
      RETURN arg1;
    ELSE
      RETURN arg2;
    END IF;
  END;

  FUNCTION READSLICE_64_65(input_val:STD_LOGIC_VECTOR(64 DOWNTO 0);index:INTEGER)
  RETURN STD_LOGIC_VECTOR IS
    CONSTANT min_sat_index:INTEGER:= maximum( index, 0 );
    CONSTANT sat_index:INTEGER:= minimum( min_sat_index, 1);
  BEGIN
    RETURN input_val(sat_index+63 DOWNTO sat_index);
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 5,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  vec_rsc_triosy_0_7_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_7_lz
    );
  vec_rsc_triosy_0_6_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_6_lz
    );
  vec_rsc_triosy_0_5_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_5_lz
    );
  vec_rsc_triosy_0_4_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_4_lz
    );
  vec_rsc_triosy_0_3_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_3_lz
    );
  vec_rsc_triosy_0_2_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_2_lz
    );
  vec_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_1_lz
    );
  vec_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => vec_rsc_triosy_0_0_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  r_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => r_rsc_triosy_lz
    );
  twiddle_rsc_triosy_0_7_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_7_lz
    );
  twiddle_rsc_triosy_0_6_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_6_lz
    );
  twiddle_rsc_triosy_0_5_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_5_lz
    );
  twiddle_rsc_triosy_0_4_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_4_lz
    );
  twiddle_rsc_triosy_0_3_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_3_lz
    );
  twiddle_rsc_triosy_0_2_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_2_lz
    );
  twiddle_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_1_lz
    );
  twiddle_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_7_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_0_lz
    );
  COMP_LOOP_1_modulo_cmp : modulo
    PORT MAP(
      base_rsc_dat => COMP_LOOP_1_modulo_cmp_base_rsc_dat,
      m_rsc_dat => COMP_LOOP_1_modulo_cmp_m_rsc_dat,
      return_rsc_z => COMP_LOOP_1_modulo_cmp_return_rsc_z_1,
      ccs_ccore_start_rsc_dat => COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat,
      ccs_ccore_clk => clk,
      ccs_ccore_srst => rst,
      ccs_ccore_en => COMP_LOOP_1_modulo_cmp_ccs_ccore_en
    );
  COMP_LOOP_1_modulo_cmp_base_rsc_dat <= MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, (READSLICE_64_65(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_mux_95_cse
      & '1') + UNSIGNED((MUX_v_64_2_2((NOT COMP_LOOP_1_acc_8_itm), (NOT z_out_8),
      COMP_LOOP_or_9_itm)) & '1'), 65)), 1)), MUX_s_1_2_2((MUX_s_1_2_2(((fsm_output(3))
      OR (MUX_s_1_2_2((NOT((fsm_output(1)) AND (fsm_output(6)) AND (NOT mux_tmp_489))),
      mux_tmp_487, fsm_output(4)))), mux_tmp_490, fsm_output(7))), (MUX_s_1_2_2(mux_tmp_490,
      (NOT((fsm_output(3)) AND (NOT (MUX_s_1_2_2(mux_tmp_487, (NOT((fsm_output(1))
      AND (NOT mux_tmp_486))), fsm_output(4)))))), fsm_output(7))), fsm_output(2)));
  COMP_LOOP_1_modulo_cmp_m_rsc_dat <= p_sva;
  COMP_LOOP_1_modulo_cmp_return_rsc_z <= COMP_LOOP_1_modulo_cmp_return_rsc_z_1;
  COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat <= NOT (MUX_s_1_2_2((MUX_s_1_2_2((MUX_s_1_2_2((MUX_s_1_2_2((MUX_s_1_2_2(((NOT
      (fsm_output(1))) OR (NOT (fsm_output(4))) OR (fsm_output(3))), mux_tmp_503,
      fsm_output(6))), or_tmp_610, fsm_output(5))), (MUX_s_1_2_2(or_tmp_610, (MUX_s_1_2_2(mux_tmp_503,
      ((fsm_output(1)) OR (fsm_output(4)) OR (fsm_output(3))), fsm_output(6))), fsm_output(5))),
      fsm_output(0))), mux_tmp_501, fsm_output(7))), (MUX_s_1_2_2(mux_tmp_501, (MUX_s_1_2_2((MUX_s_1_2_2((NOT
      (MUX_s_1_2_2((NOT((NOT (fsm_output(1))) OR (fsm_output(4)) OR (NOT (fsm_output(3))))),
      mux_tmp_495, fsm_output(6)))), ((fsm_output(6)) OR not_tmp_290), fsm_output(5))),
      (MUX_s_1_2_2((MUX_s_1_2_2(not_tmp_290, ((fsm_output(1)) OR (NOT and_532_cse)),
      fsm_output(6))), ((fsm_output(6)) OR (NOT mux_tmp_495)), fsm_output(5))), fsm_output(0))),
      fsm_output(7))), fsm_output(2)));

  COMP_LOOP_5_tmp_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 0,
      width_s => 4,
      width_z => 11
      )
    PORT MAP(
      a => COMP_LOOP_5_tmp_lshift_rg_a,
      s => COMP_LOOP_5_tmp_lshift_rg_s,
      z => COMP_LOOP_5_tmp_lshift_rg_z
    );
  COMP_LOOP_5_tmp_lshift_rg_a(0) <= '1';
  COMP_LOOP_5_tmp_lshift_rg_s <= MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, z_out_5, CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("00000010")));
  z_out <= COMP_LOOP_5_tmp_lshift_rg_z;

  COMP_LOOP_1_tmp_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => COMP_LOOP_1_tmp_lshift_rg_a,
      s => COMP_LOOP_1_tmp_lshift_rg_s,
      z => COMP_LOOP_1_tmp_lshift_rg_z
    );
  COMP_LOOP_1_tmp_lshift_rg_a(0) <= '1';
  COMP_LOOP_1_tmp_lshift_rg_s <= MUX_v_4_2_2(COMP_LOOP_1_tmp_acc_cse_sva, z_out_5,
      CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("00000010")));
  z_out_1 <= COMP_LOOP_1_tmp_lshift_rg_z;

  inPlaceNTT_DIF_core_wait_dp_inst : inPlaceNTT_DIF_core_wait_dp
    PORT MAP(
      ensig_cgo_iro => inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro,
      ensig_cgo => reg_ensig_cgo_cse,
      COMP_LOOP_1_modulo_cmp_ccs_ccore_en => COMP_LOOP_1_modulo_cmp_ccs_ccore_en
    );
  inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro <= NOT mux_496_itm;

  inPlaceNTT_DIF_core_core_fsm_inst : inPlaceNTT_DIF_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => inPlaceNTT_DIF_core_core_fsm_inst_fsm_output,
      COMP_LOOP_C_31_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0,
      COMP_LOOP_C_62_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0,
      COMP_LOOP_C_93_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0,
      COMP_LOOP_C_124_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0,
      COMP_LOOP_C_155_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0,
      COMP_LOOP_C_186_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0,
      COMP_LOOP_C_217_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0,
      COMP_LOOP_C_248_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0,
      VEC_LOOP_C_0_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0,
      STAGE_LOOP_C_1_tr0 => inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0
    );
  fsm_output <= inPlaceNTT_DIF_core_core_fsm_inst_fsm_output;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0 <= NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0 <= NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0 <= NOT COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0 <= NOT COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_155_tr0 <= NOT COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_186_tr0 <= NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_217_tr0 <= NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_248_tr0 <= NOT COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0 <= z_out_3(10);
  inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 <= NOT (z_out_2(4));

  or_731_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"));
  nand_137_cse <= NOT((fsm_output(0)) AND (fsm_output(2)) AND (fsm_output(3)) AND
      (fsm_output(4)));
  nand_138_cse <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11")));
  nand_126_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_7_sva(0)) AND CONV_SL_1_1(fsm_output(4
      DOWNTO 2)=STD_LOGIC_VECTOR'("111")));
  nand_127_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_5_sva(0)) AND CONV_SL_1_1(fsm_output(4
      DOWNTO 2)=STD_LOGIC_VECTOR'("111")));
  mux_492_nl <= MUX_s_1_2_2(and_dcpl_28, and_532_cse, or_735_cse);
  mux_493_nl <= MUX_s_1_2_2(mux_492_nl, and_283_cse, fsm_output(0));
  mux_494_nl <= MUX_s_1_2_2((NOT mux_tmp_478), mux_493_nl, fsm_output(5));
  mux_495_nl <= MUX_s_1_2_2(mux_141_cse, mux_494_nl, fsm_output(6));
  mux_487_nl <= MUX_s_1_2_2(mux_tmp_475, mux_tmp_472, fsm_output(0));
  mux_490_nl <= MUX_s_1_2_2(mux_tmp_478, mux_487_nl, fsm_output(5));
  mux_484_nl <= MUX_s_1_2_2((NOT mux_tmp_472), and_283_cse, fsm_output(5));
  mux_491_nl <= MUX_s_1_2_2((NOT mux_490_nl), mux_484_nl, fsm_output(6));
  mux_496_itm <= MUX_s_1_2_2(mux_495_nl, mux_491_nl, fsm_output(1));
  and_263_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  nor_441_cse <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("00")));
  and_532_cse <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11"));
  mux_530_nl <= MUX_s_1_2_2((NOT or_tmp_617), or_tmp_617, fsm_output(6));
  or_671_nl <= (fsm_output(6)) OR (NOT or_tmp_617);
  mux_531_nl <= MUX_s_1_2_2(mux_530_nl, or_671_nl, fsm_output(1));
  mux_532_nl <= MUX_s_1_2_2(mux_531_nl, (fsm_output(6)), fsm_output(5));
  COMP_LOOP_or_14_cse <= mux_532_nl OR (fsm_output(7));
  or_735_cse <= (fsm_output(2)) OR (fsm_output(7));
  and_283_cse <= or_735_cse AND CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11"));
  nor_459_nl <= NOT((fsm_output(7)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_141_cse <= MUX_s_1_2_2(nor_459_nl, nor_tmp_35, fsm_output(2));
  and_280_cse <= (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  COMP_LOOP_tmp_or_2_cse <= and_dcpl_42 OR and_dcpl_96 OR and_dcpl_97 OR and_dcpl_101;
  COMP_LOOP_tmp_or_7_cse <= and_dcpl_95 OR and_dcpl_98;
  nor_474_cse <= NOT((fsm_output(2)) OR (fsm_output(6)));
  and_203_m1c <= and_dcpl_100 AND and_dcpl_38;
  COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse <= NOT(CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  COMP_LOOP_1_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "000")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_1_acc_10_itm_10_1_1 <= COMP_LOOP_1_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_acc_1_cse_6_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0)
      + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "101")), 10));
  COMP_LOOP_acc_1_cse_4_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0)
      + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "011")), 10));
  COMP_LOOP_acc_11_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0(9
      DOWNTO 1)) + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "01")),
      9));
  COMP_LOOP_acc_1_cse_2_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0)
      + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "001")), 10));
  COMP_LOOP_2_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "001")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_2_acc_10_itm_10_1_1 <= COMP_LOOP_2_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_4_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "011")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_4_acc_10_itm_10_1_1 <= COMP_LOOP_4_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_5_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "100")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_5_acc_10_itm_10_1_1 <= COMP_LOOP_5_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_6_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "101")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_6_acc_10_itm_10_1_1 <= COMP_LOOP_6_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_7_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "110")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_7_acc_10_itm_10_1_1 <= COMP_LOOP_7_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_8_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "111")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  COMP_LOOP_8_acc_10_itm_10_1_1 <= COMP_LOOP_8_acc_10_nl(10 DOWNTO 1);
  COMP_LOOP_tmp_mux1h_itm_mx0w0 <= MUX1HOT_v_64_8_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_4_i_q_d, twiddle_rsc_0_5_i_q_d,
      twiddle_rsc_0_6_i_q_d, twiddle_rsc_0_7_i_q_d, STD_LOGIC_VECTOR'( COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 & COMP_LOOP_tmp_COMP_LOOP_tmp_and_37 &
      COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm & COMP_LOOP_tmp_COMP_LOOP_tmp_and_39
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm & COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt <= CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt <= CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt <= CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 <= CONV_SL_1_1(COMP_LOOP_2_tmp_mul_idiv_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_37 <= CONV_SL_1_1(COMP_LOOP_2_tmp_mul_idiv_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_39 <= CONV_SL_1_1(COMP_LOOP_2_tmp_mul_idiv_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  or_dcpl <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00"));
  or_tmp_25 <= (fsm_output(6)) OR and_532_cse;
  or_tmp_38 <= (fsm_output(6)) OR (fsm_output(4)) OR (fsm_output(3));
  nor_tmp_29 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)=STD_LOGIC_VECTOR'("11"));
  nor_tmp_35 <= (fsm_output(7)) AND (fsm_output(3)) AND (fsm_output(4));
  and_dcpl_24 <= NOT((fsm_output(7)) OR (fsm_output(5)));
  and_dcpl_25 <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_26 <= and_dcpl_25 AND and_dcpl_24;
  and_dcpl_28 <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_29 <= and_dcpl_28 AND nor_474_cse;
  and_dcpl_31 <= (fsm_output(7)) AND (fsm_output(5));
  and_dcpl_32 <= and_dcpl_25 AND and_dcpl_31;
  and_dcpl_33 <= (fsm_output(2)) AND (fsm_output(6));
  and_dcpl_35 <= and_532_cse AND and_dcpl_33;
  nor_tmp_64 <= or_731_cse AND (fsm_output(6)) AND (fsm_output(2)) AND (fsm_output(3))
      AND (fsm_output(4));
  nand_144_nl <= NOT((fsm_output(7)) AND (fsm_output(3)) AND (fsm_output(4)));
  or_134_nl <= (fsm_output(7)) OR nand_138_cse;
  mux_tmp_192 <= MUX_s_1_2_2(nand_144_nl, or_134_nl, fsm_output(2));
  nand_tmp_2 <= NOT((fsm_output(0)) AND (fsm_output(5)) AND (NOT mux_tmp_192));
  and_dcpl_37 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_38 <= and_dcpl_37 AND and_dcpl_24;
  and_dcpl_39 <= and_dcpl_29 AND and_dcpl_38;
  and_dcpl_41 <= and_263_cse AND and_dcpl_24;
  and_dcpl_42 <= and_dcpl_29 AND and_dcpl_41;
  and_dcpl_43 <= (NOT (fsm_output(7))) AND (fsm_output(5));
  and_dcpl_44 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_45 <= and_dcpl_44 AND and_dcpl_43;
  and_dcpl_47 <= and_dcpl_37 AND and_dcpl_43;
  and_dcpl_48 <= and_dcpl_29 AND and_dcpl_47;
  and_dcpl_49 <= (NOT (fsm_output(2))) AND (fsm_output(6));
  and_dcpl_50 <= and_dcpl_28 AND and_dcpl_49;
  and_dcpl_52 <= and_dcpl_44 AND and_dcpl_24;
  and_dcpl_53 <= and_dcpl_50 AND and_dcpl_52;
  and_dcpl_55 <= and_dcpl_25 AND and_dcpl_43;
  and_dcpl_56 <= and_dcpl_50 AND and_dcpl_55;
  and_dcpl_58 <= and_263_cse AND and_dcpl_43;
  and_dcpl_59 <= and_dcpl_35 AND and_dcpl_58;
  and_dcpl_60 <= (fsm_output(7)) AND (NOT (fsm_output(5)));
  and_dcpl_61 <= and_dcpl_44 AND and_dcpl_60;
  and_dcpl_62 <= (fsm_output(2)) AND (NOT (fsm_output(6)));
  and_dcpl_63 <= and_532_cse AND and_dcpl_62;
  and_dcpl_65 <= and_dcpl_37 AND and_dcpl_60;
  and_dcpl_66 <= and_dcpl_63 AND and_dcpl_65;
  and_dcpl_68 <= and_dcpl_44 AND and_dcpl_31;
  and_dcpl_69 <= and_dcpl_63 AND and_dcpl_68;
  and_dcpl_70 <= and_263_cse AND and_dcpl_60;
  and_dcpl_71 <= and_532_cse AND and_dcpl_49;
  and_dcpl_73 <= and_dcpl_25 AND and_dcpl_60;
  and_dcpl_74 <= and_dcpl_35 AND and_dcpl_73;
  and_dcpl_83 <= and_532_cse AND nor_474_cse;
  and_dcpl_86 <= and_dcpl_37 AND and_dcpl_31;
  and_dcpl_88 <= and_263_cse AND and_dcpl_31;
  not_tmp_134 <= NOT((fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4)));
  not_tmp_135 <= NOT((fsm_output(0)) AND (fsm_output(6)) AND (fsm_output(3)) AND
      (fsm_output(4)));
  not_tmp_138 <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111")));
  not_tmp_147 <= NOT((VEC_LOOP_j_10_0_sva_9_0(0)) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)));
  nand_132_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_4_sva(0)) AND (fsm_output(6)) AND
      (fsm_output(3)) AND (fsm_output(4)));
  nand_130_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_7_sva(0)) AND (fsm_output(0)) AND
      (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4)));
  nand_133_cse <= NOT((COMP_LOOP_acc_1_cse_4_sva(0)) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)));
  not_tmp_153 <= NOT((VEC_LOOP_j_10_0_sva_9_0(0)) AND CONV_SL_1_1(fsm_output(4 DOWNTO
      2)=STD_LOGIC_VECTOR'("111")));
  nand_97_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_3_sva(2)) AND (fsm_output(0)) AND
      (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4)));
  nand_98_cse <= NOT((COMP_LOOP_acc_10_cse_10_1_sva(2)) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)));
  nand_99_cse <= NOT((COMP_LOOP_acc_1_cse_sva(2)) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)));
  and_dcpl_94 <= and_dcpl_28 AND and_dcpl_62;
  and_dcpl_95 <= and_dcpl_94 AND and_dcpl_26;
  and_dcpl_96 <= and_dcpl_94 AND and_dcpl_52;
  and_dcpl_97 <= and_dcpl_94 AND and_dcpl_38;
  and_dcpl_98 <= and_dcpl_94 AND and_dcpl_41;
  and_dcpl_99 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_100 <= and_dcpl_99 AND nor_474_cse;
  and_dcpl_101 <= and_dcpl_100 AND and_dcpl_26;
  and_dcpl_102 <= and_dcpl_100 AND and_dcpl_52;
  and_dcpl_104 <= (NOT (fsm_output(4))) AND (NOT (fsm_output(6))) AND and_dcpl_24;
  and_dcpl_117 <= and_532_cse AND (fsm_output(2));
  or_tmp_588 <= (fsm_output(7)) OR (NOT and_532_cse);
  mux_tmp_472 <= MUX_s_1_2_2((NOT nor_tmp_35), or_tmp_588, fsm_output(2));
  mux_485_nl <= MUX_s_1_2_2(and_dcpl_28, and_532_cse, fsm_output(7));
  mux_tmp_475 <= MUX_s_1_2_2((NOT mux_485_nl), or_tmp_588, fsm_output(2));
  mux_tmp_478 <= MUX_s_1_2_2((NOT mux_141_cse), mux_tmp_475, fsm_output(0));
  nand_38_nl <= NOT((fsm_output(0)) AND (fsm_output(5)));
  or_636_nl <= (fsm_output(0)) OR (fsm_output(5));
  mux_tmp_486 <= MUX_s_1_2_2(nand_38_nl, or_636_nl, fsm_output(6));
  or_637_nl <= (fsm_output(6)) OR (fsm_output(0)) OR (fsm_output(5));
  mux_tmp_487 <= MUX_s_1_2_2(mux_tmp_486, or_637_nl, fsm_output(1));
  mux_tmp_489 <= MUX_s_1_2_2((NOT (fsm_output(5))), (fsm_output(5)), fsm_output(0));
  or_640_nl <= (fsm_output(4)) OR (fsm_output(1)) OR (fsm_output(6)) OR mux_tmp_489;
  or_638_nl <= (fsm_output(4)) OR (NOT((fsm_output(1)) AND (fsm_output(6)) AND (fsm_output(0))
      AND (fsm_output(5))));
  mux_tmp_490 <= MUX_s_1_2_2(or_640_nl, or_638_nl, fsm_output(3));
  and_dcpl_120 <= and_dcpl_29 AND and_dcpl_58;
  and_dcpl_121 <= and_dcpl_50 AND and_dcpl_38;
  and_dcpl_122 <= and_dcpl_50 AND and_dcpl_45;
  and_dcpl_123 <= and_dcpl_29 AND and_dcpl_73;
  and_dcpl_124 <= and_dcpl_63 AND and_dcpl_70;
  and_dcpl_125 <= and_dcpl_63 AND and_dcpl_86;
  and_dcpl_126 <= and_dcpl_35 AND and_dcpl_61;
  nor_197_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("01")));
  mux_tmp_495 <= MUX_s_1_2_2(nor_197_nl, and_532_cse, fsm_output(1));
  not_tmp_290 <= NOT((fsm_output(1)) AND (fsm_output(4)) AND (fsm_output(3)));
  and_230_cse <= (fsm_output(0)) AND (fsm_output(5));
  or_650_nl <= (fsm_output(6)) OR (fsm_output(1)) OR (fsm_output(4)) OR (fsm_output(3));
  nand_152_nl <= NOT((fsm_output(6)) AND (fsm_output(1)) AND (NOT (fsm_output(4)))
      AND (fsm_output(3)));
  mux_tmp_501 <= MUX_s_1_2_2(or_650_nl, nand_152_nl, and_230_cse);
  or_653_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("10"));
  mux_tmp_503 <= MUX_s_1_2_2(or_653_nl, or_dcpl, fsm_output(1));
  or_tmp_610 <= (NOT (fsm_output(6))) OR (NOT (fsm_output(1))) OR (fsm_output(4))
      OR (fsm_output(3));
  or_dcpl_46 <= (fsm_output(7)) OR (fsm_output(5));
  or_dcpl_51 <= or_dcpl OR (fsm_output(6)) OR (fsm_output(2));
  or_dcpl_52 <= or_dcpl_51 OR CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR or_dcpl_46;
  or_tmp_616 <= and_263_cse OR (fsm_output(6)) OR (fsm_output(2)) OR (fsm_output(3))
      OR (fsm_output(4));
  mux_528_nl <= MUX_s_1_2_2((NOT or_tmp_616), and_dcpl_35, fsm_output(7));
  mux_529_itm <= MUX_s_1_2_2(mux_528_nl, nor_tmp_29, fsm_output(5));
  or_tmp_617 <= CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000"));
  or_tmp_620 <= (fsm_output(6)) OR and_dcpl_117;
  mux_tmp_522 <= MUX_s_1_2_2(or_tmp_620, or_tmp_25, and_263_cse);
  mux_tmp_523 <= MUX_s_1_2_2((NOT or_tmp_616), (fsm_output(6)), fsm_output(7));
  mux_tmp_526 <= MUX_s_1_2_2((NOT or_tmp_617), and_dcpl_117, fsm_output(6));
  mux_tmp_527 <= MUX_s_1_2_2(mux_tmp_526, and_dcpl_35, fsm_output(0));
  or_tmp_621 <= and_263_cse OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000"));
  or_dcpl_53 <= and_263_cse OR (fsm_output(5));
  and_dcpl_138 <= (or_tmp_621 XOR (fsm_output(5))) AND nor_441_cse;
  and_152_nl <= (fsm_output(6)) AND or_tmp_617;
  mux_550_nl <= MUX_s_1_2_2(and_152_nl, (fsm_output(6)), or_731_cse);
  mux_551_nl <= MUX_s_1_2_2(or_tmp_616, (NOT mux_550_nl), fsm_output(5));
  and_dcpl_143 <= mux_551_nl AND (NOT (fsm_output(7)));
  and_dcpl_144 <= NOT((NOT(or_dcpl_51 OR or_dcpl_53)) OR (fsm_output(7)));
  mux_562_nl <= MUX_s_1_2_2((fsm_output(6)), or_tmp_620, and_263_cse);
  mux_563_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_562_nl, fsm_output(7));
  mux_564_itm <= MUX_s_1_2_2(mux_563_nl, (fsm_output(7)), fsm_output(5));
  mux_tmp_554 <= MUX_s_1_2_2(and_dcpl_35, and_280_cse, fsm_output(1));
  mux_tmp_557 <= MUX_s_1_2_2(and_dcpl_35, and_280_cse, or_731_cse);
  mux_571_nl <= MUX_s_1_2_2(and_dcpl_35, and_280_cse, and_263_cse);
  mux_572_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_571_nl, fsm_output(7));
  mux_573_itm <= MUX_s_1_2_2(mux_572_nl, nor_tmp_29, fsm_output(5));
  mux_574_nl <= MUX_s_1_2_2((fsm_output(6)), or_tmp_620, fsm_output(1));
  and_157_nl <= (fsm_output(7)) AND mux_574_nl;
  mux_575_itm <= MUX_s_1_2_2(mux_tmp_523, and_157_nl, fsm_output(5));
  not_tmp_329 <= NOT((fsm_output(7)) OR or_tmp_616);
  mux_579_nl <= MUX_s_1_2_2((NOT or_tmp_616), nor_tmp_64, fsm_output(7));
  mux_580_itm <= MUX_s_1_2_2(mux_579_nl, nor_tmp_29, fsm_output(5));
  and_dcpl_145 <= (NOT (fsm_output(6))) AND (fsm_output(0));
  nor_504_nl <= NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("10")));
  nor_505_nl <= NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("01")));
  mux_584_nl <= MUX_s_1_2_2(nor_504_nl, nor_505_nl, fsm_output(1));
  and_dcpl_148 <= mux_584_nl AND (NOT (fsm_output(4))) AND and_dcpl_145 AND and_dcpl_24;
  and_dcpl_150 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("10")) AND
      nor_474_cse;
  or_tmp_631 <= (NOT (fsm_output(7))) OR (NOT (fsm_output(3))) OR (fsm_output(4));
  or_699_nl <= (fsm_output(7)) OR (fsm_output(3)) OR (NOT (fsm_output(4)));
  mux_tmp_575 <= MUX_s_1_2_2(or_699_nl, or_tmp_631, fsm_output(2));
  or_tmp_634 <= (fsm_output(6)) OR mux_tmp_575;
  and_dcpl_153 <= and_dcpl_99 AND and_dcpl_33;
  and_dcpl_156 <= and_dcpl_99 AND and_dcpl_62;
  and_dcpl_159 <= and_dcpl_99 AND and_dcpl_49;
  and_dcpl_165 <= NOT((fsm_output(1)) OR (fsm_output(7)) OR (fsm_output(5)));
  and_dcpl_167 <= and_dcpl_28 AND (fsm_output(2));
  and_dcpl_168 <= and_dcpl_167 AND and_dcpl_145;
  or_tmp_649 <= (CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("11"))) OR
      (fsm_output(4));
  and_tmp_15 <= (fsm_output(6)) AND or_tmp_649;
  or_tmp_651 <= (fsm_output(6)) OR or_tmp_649;
  and_tmp_16 <= (fsm_output(6)) AND or_dcpl;
  STAGE_LOOP_i_3_0_sva_mx0c1 <= and_dcpl_35 AND and_dcpl_32;
  VEC_LOOP_j_10_0_sva_9_0_mx0c0 <= and_dcpl_29 AND and_dcpl_52;
  COMP_LOOP_1_acc_8_itm_mx0c3 <= and_dcpl_150 AND and_dcpl_52;
  nand_27_nl <= NOT((fsm_output(6)) AND (NOT mux_tmp_575));
  mux_588_nl <= MUX_s_1_2_2(nand_27_nl, or_tmp_634, fsm_output(1));
  nor_192_nl <= NOT((fsm_output(5)) OR mux_588_nl);
  or_696_nl <= (fsm_output(7)) OR (NOT (fsm_output(3))) OR (fsm_output(4));
  mux_585_nl <= MUX_s_1_2_2(or_tmp_631, or_696_nl, fsm_output(2));
  nand_25_nl <= NOT((fsm_output(6)) AND (NOT mux_585_nl));
  mux_587_nl <= MUX_s_1_2_2(or_tmp_634, nand_25_nl, fsm_output(1));
  and_214_nl <= (fsm_output(5)) AND (NOT mux_587_nl);
  COMP_LOOP_1_acc_8_itm_mx0c4 <= MUX_s_1_2_2(nor_192_nl, and_214_nl, fsm_output(0));
  COMP_LOOP_1_acc_8_itm_mx0c7 <= and_dcpl_150 AND and_dcpl_55;
  COMP_LOOP_1_acc_8_itm_mx0c10 <= and_dcpl_153 AND and_dcpl_41;
  COMP_LOOP_1_acc_8_itm_mx0c13 <= and_dcpl_153 AND and_dcpl_47;
  COMP_LOOP_1_acc_8_itm_mx0c16 <= and_dcpl_156 AND and_dcpl_61;
  COMP_LOOP_1_acc_8_itm_mx0c19 <= and_dcpl_156 AND and_dcpl_32;
  COMP_LOOP_1_acc_8_itm_mx0c22 <= and_dcpl_159 AND and_dcpl_70;
  COMP_LOOP_1_acc_8_itm_mx0c25 <= and_dcpl_159 AND and_dcpl_86;
  nand_143_nl <= NOT((fsm_output(2)) AND (fsm_output(7)) AND (fsm_output(3)) AND
      (fsm_output(4)));
  or_136_nl <= (fsm_output(2)) OR (fsm_output(7)) OR (fsm_output(3)) OR (fsm_output(4));
  mux_205_nl <= MUX_s_1_2_2(nand_143_nl, or_136_nl, fsm_output(5));
  or_137_nl <= (fsm_output(0)) OR mux_205_nl;
  mux_206_nl <= MUX_s_1_2_2(or_137_nl, nand_tmp_2, fsm_output(6));
  or_135_nl <= (fsm_output(0)) OR (fsm_output(5)) OR mux_tmp_192;
  mux_204_nl <= MUX_s_1_2_2(nand_tmp_2, or_135_nl, fsm_output(6));
  mux_207_nl <= MUX_s_1_2_2(mux_206_nl, mux_204_nl, fsm_output(1));
  vec_rsc_0_0_i_d_d_pff <= MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, COMP_LOOP_1_modulo_cmp_return_rsc_z,
      mux_207_nl);
  and_54_nl <= and_dcpl_29 AND and_dcpl_45;
  and_59_nl <= and_dcpl_50 AND and_dcpl_26;
  and_62_nl <= and_dcpl_35 AND and_dcpl_41;
  and_65_nl <= and_dcpl_35 AND and_dcpl_47;
  and_72_nl <= and_dcpl_63 AND and_dcpl_61;
  and_75_nl <= and_dcpl_63 AND and_dcpl_32;
  and_80_nl <= and_dcpl_71 AND and_dcpl_70;
  vec_rsc_0_0_i_radr_d_pff <= MUX1HOT_v_7_16_2((COMP_LOOP_1_acc_10_itm_10_1_1(9 DOWNTO
      3)), COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_1_cse_2_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_2_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_11_psp_sva(8 DOWNTO 2)), (COMP_LOOP_acc_10_cse_10_1_3_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_4_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_4_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_13_psp_sva(7 DOWNTO 1)), (COMP_LOOP_acc_10_cse_10_1_5_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_6_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_6_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_14_psp_sva(8 DOWNTO 2)), (COMP_LOOP_acc_10_cse_10_1_7_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_sva(9
      DOWNTO 3)), STD_LOGIC_VECTOR'( and_dcpl_39 & and_dcpl_42 & and_54_nl & and_dcpl_48
      & and_59_nl & and_dcpl_53 & and_62_nl & and_dcpl_56 & and_65_nl & and_dcpl_59
      & and_72_nl & and_dcpl_66 & and_75_nl & and_dcpl_69 & and_80_nl & and_dcpl_74));
  and_83_nl <= and_dcpl_63 AND and_dcpl_41;
  and_84_nl <= and_dcpl_29 AND and_dcpl_55;
  and_85_nl <= and_dcpl_63 AND and_dcpl_47;
  and_86_nl <= and_dcpl_63 AND and_dcpl_58;
  and_87_nl <= and_dcpl_35 AND and_dcpl_52;
  and_88_nl <= and_dcpl_35 AND and_dcpl_38;
  and_89_nl <= and_dcpl_35 AND and_dcpl_55;
  and_90_nl <= and_dcpl_35 AND and_dcpl_45;
  and_92_nl <= and_dcpl_83 AND and_dcpl_70;
  and_93_nl <= and_dcpl_63 AND and_dcpl_73;
  and_95_nl <= and_dcpl_83 AND and_dcpl_86;
  and_97_nl <= and_dcpl_83 AND and_dcpl_88;
  and_98_nl <= and_dcpl_71 AND and_dcpl_61;
  and_99_nl <= and_dcpl_71 AND and_dcpl_65;
  and_100_nl <= and_dcpl_71 AND and_dcpl_32;
  and_101_nl <= and_dcpl_71 AND and_dcpl_68;
  vec_rsc_0_0_i_wadr_d_pff <= MUX1HOT_v_7_16_2((COMP_LOOP_acc_10_cse_10_1_1_sva(9
      DOWNTO 3)), COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_10_cse_10_1_2_sva(9 DOWNTO
      3)), (COMP_LOOP_acc_1_cse_2_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_3_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_11_psp_sva(8 DOWNTO 2)), (COMP_LOOP_acc_10_cse_10_1_4_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_4_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_5_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_13_psp_sva(7 DOWNTO 1)), (COMP_LOOP_acc_10_cse_10_1_6_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_6_sva(9 DOWNTO 3)), (COMP_LOOP_acc_10_cse_10_1_7_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_14_psp_sva(8 DOWNTO 2)), (COMP_LOOP_acc_10_cse_10_1_sva(9
      DOWNTO 3)), (COMP_LOOP_acc_1_cse_sva(9 DOWNTO 3)), STD_LOGIC_VECTOR'( and_83_nl
      & and_84_nl & and_85_nl & and_86_nl & and_87_nl & and_88_nl & and_89_nl & and_90_nl
      & and_92_nl & and_93_nl & and_95_nl & and_97_nl & and_98_nl & and_99_nl & and_100_nl
      & and_101_nl));
  nor_423_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_135);
  nor_424_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_425_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_219_nl <= MUX_s_1_2_2(nor_424_nl, nor_425_nl, fsm_output(0));
  mux_220_nl <= MUX_s_1_2_2(nor_423_nl, mux_219_nl, fsm_output(1));
  and_259_nl <= (fsm_output(7)) AND mux_220_nl;
  nor_426_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_135);
  nor_427_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_428_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_216_nl <= MUX_s_1_2_2(nor_427_nl, nor_428_nl, fsm_output(0));
  mux_217_nl <= MUX_s_1_2_2(nor_426_nl, mux_216_nl, fsm_output(1));
  nor_429_nl <= NOT((COMP_LOOP_acc_13_psp_sva(0)) OR (fsm_output(1)) OR (VEC_LOOP_j_10_0_sva_9_0(1))
      OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR (fsm_output(6)) OR nand_138_cse);
  mux_218_nl <= MUX_s_1_2_2(mux_217_nl, nor_429_nl, fsm_output(7));
  mux_221_nl <= MUX_s_1_2_2(and_259_nl, mux_218_nl, fsm_output(2));
  nor_430_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_431_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_134);
  nor_432_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_134);
  mux_212_nl <= MUX_s_1_2_2(nor_431_nl, nor_432_nl, fsm_output(0));
  nor_433_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_434_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_211_nl <= MUX_s_1_2_2(nor_433_nl, nor_434_nl, fsm_output(0));
  mux_213_nl <= MUX_s_1_2_2(mux_212_nl, mux_211_nl, fsm_output(1));
  mux_214_nl <= MUX_s_1_2_2(nor_430_nl, mux_213_nl, fsm_output(7));
  or_145_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_134;
  or_143_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_134;
  mux_209_nl <= MUX_s_1_2_2(or_145_nl, or_143_nl, fsm_output(0));
  or_141_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_139_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_208_nl <= MUX_s_1_2_2(or_141_nl, or_139_nl, fsm_output(0));
  mux_210_nl <= MUX_s_1_2_2(mux_209_nl, mux_208_nl, fsm_output(1));
  nor_435_nl <= NOT((fsm_output(7)) OR mux_210_nl);
  mux_215_nl <= MUX_s_1_2_2(mux_214_nl, nor_435_nl, fsm_output(2));
  vec_rsc_0_0_i_we_d_pff <= MUX_s_1_2_2(mux_221_nl, mux_215_nl, fsm_output(5));
  nor_410_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_411_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_234_nl <= MUX_s_1_2_2(nor_410_nl, nor_411_nl, fsm_output(0));
  and_258_nl <= (fsm_output(1)) AND mux_234_nl;
  nor_412_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (NOT COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm) OR nand_137_cse);
  nor_413_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_233_nl <= MUX_s_1_2_2(nor_412_nl, nor_413_nl, fsm_output(1));
  mux_235_nl <= MUX_s_1_2_2(and_258_nl, mux_233_nl, fsm_output(7));
  nor_414_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_415_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_231_nl <= MUX_s_1_2_2(nor_414_nl, nor_415_nl, fsm_output(1));
  or_187_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR not_tmp_138;
  or_185_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_138;
  mux_230_nl <= MUX_s_1_2_2(or_187_nl, or_185_nl, fsm_output(0));
  nor_416_nl <= NOT((fsm_output(1)) OR mux_230_nl);
  mux_232_nl <= MUX_s_1_2_2(mux_231_nl, nor_416_nl, fsm_output(7));
  mux_236_nl <= MUX_s_1_2_2(mux_235_nl, mux_232_nl, fsm_output(5));
  nor_417_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_418_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_226_nl <= MUX_s_1_2_2(nor_417_nl, nor_418_nl, fsm_output(0));
  nor_419_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR (NOT COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)
      OR not_tmp_138);
  mux_227_nl <= MUX_s_1_2_2(mux_226_nl, nor_419_nl, fsm_output(1));
  nor_420_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_421_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_225_nl <= MUX_s_1_2_2(nor_420_nl, nor_421_nl, fsm_output(1));
  mux_228_nl <= MUX_s_1_2_2(mux_227_nl, mux_225_nl, fsm_output(7));
  or_174_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_173_nl <= (VEC_LOOP_j_10_0_sva_9_0(1)) OR (COMP_LOOP_acc_13_psp_sva(0)) OR (NOT
      COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_138;
  or_171_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR not_tmp_138;
  mux_223_nl <= MUX_s_1_2_2(or_173_nl, or_171_nl, fsm_output(0));
  mux_224_nl <= MUX_s_1_2_2(or_174_nl, mux_223_nl, fsm_output(1));
  nor_422_nl <= NOT((fsm_output(7)) OR mux_224_nl);
  mux_229_nl <= MUX_s_1_2_2(mux_228_nl, nor_422_nl, fsm_output(5));
  vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_236_nl, mux_229_nl,
      fsm_output(6));
  nor_397_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR nand_130_cse);
  nor_398_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR not_tmp_147);
  nor_399_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_249_nl <= MUX_s_1_2_2(nor_398_nl, nor_399_nl, fsm_output(0));
  mux_250_nl <= MUX_s_1_2_2(nor_397_nl, mux_249_nl, fsm_output(1));
  and_257_nl <= (fsm_output(7)) AND mux_250_nl;
  nor_400_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR not_tmp_135);
  nor_401_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR not_tmp_147);
  nor_402_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_246_nl <= MUX_s_1_2_2(nor_401_nl, nor_402_nl, fsm_output(0));
  mux_247_nl <= MUX_s_1_2_2(nor_400_nl, mux_246_nl, fsm_output(1));
  nor_403_nl <= NOT((COMP_LOOP_acc_13_psp_sva(0)) OR (fsm_output(1)) OR (VEC_LOOP_j_10_0_sva_9_0(1))
      OR (fsm_output(0)) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0))) OR (fsm_output(6))
      OR nand_138_cse);
  mux_248_nl <= MUX_s_1_2_2(mux_247_nl, nor_403_nl, fsm_output(7));
  mux_251_nl <= MUX_s_1_2_2(and_257_nl, mux_248_nl, fsm_output(2));
  nor_404_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(0)) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_405_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR not_tmp_134);
  nor_406_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR not_tmp_134);
  mux_242_nl <= MUX_s_1_2_2(nor_405_nl, nor_406_nl, fsm_output(0));
  nor_407_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_408_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_241_nl <= MUX_s_1_2_2(nor_407_nl, nor_408_nl, fsm_output(0));
  mux_243_nl <= MUX_s_1_2_2(mux_242_nl, mux_241_nl, fsm_output(1));
  mux_244_nl <= MUX_s_1_2_2(nor_404_nl, mux_243_nl, fsm_output(7));
  or_204_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR nand_132_cse;
  or_202_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR nand_133_cse;
  mux_239_nl <= MUX_s_1_2_2(or_204_nl, or_202_nl, fsm_output(0));
  or_200_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_198_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_238_nl <= MUX_s_1_2_2(or_200_nl, or_198_nl, fsm_output(0));
  mux_240_nl <= MUX_s_1_2_2(mux_239_nl, mux_238_nl, fsm_output(1));
  nor_409_nl <= NOT((fsm_output(7)) OR mux_240_nl);
  mux_245_nl <= MUX_s_1_2_2(mux_244_nl, nor_409_nl, fsm_output(2));
  vec_rsc_0_1_i_we_d_pff <= MUX_s_1_2_2(mux_251_nl, mux_245_nl, fsm_output(5));
  nor_384_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_385_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_264_nl <= MUX_s_1_2_2(nor_384_nl, nor_385_nl, fsm_output(0));
  and_256_nl <= (fsm_output(1)) AND mux_264_nl;
  nor_386_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (NOT COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm) OR nand_137_cse);
  nor_387_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_263_nl <= MUX_s_1_2_2(nor_386_nl, nor_387_nl, fsm_output(1));
  mux_265_nl <= MUX_s_1_2_2(and_256_nl, mux_263_nl, fsm_output(7));
  nor_388_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_389_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_260_nl <= MUX_s_1_2_2(nor_388_nl, nor_389_nl, fsm_output(0));
  nor_390_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR (NOT COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)
      OR not_tmp_138);
  mux_261_nl <= MUX_s_1_2_2(mux_260_nl, nor_390_nl, fsm_output(1));
  nor_391_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_392_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_259_nl <= MUX_s_1_2_2(nor_391_nl, nor_392_nl, fsm_output(1));
  mux_262_nl <= MUX_s_1_2_2(mux_261_nl, mux_259_nl, fsm_output(7));
  mux_266_nl <= MUX_s_1_2_2(mux_265_nl, mux_262_nl, fsm_output(6));
  nor_393_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_394_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_256_nl <= MUX_s_1_2_2(nor_393_nl, nor_394_nl, fsm_output(1));
  or_238_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_236_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR nand_126_cse;
  mux_255_nl <= MUX_s_1_2_2(or_238_nl, or_236_nl, fsm_output(0));
  nor_395_nl <= NOT((fsm_output(1)) OR mux_255_nl);
  mux_257_nl <= MUX_s_1_2_2(mux_256_nl, nor_395_nl, fsm_output(7));
  or_233_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_232_nl <= (VEC_LOOP_j_10_0_sva_9_0(1)) OR (COMP_LOOP_acc_13_psp_sva(0)) OR (NOT
      COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_230_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR nand_127_cse;
  mux_253_nl <= MUX_s_1_2_2(or_232_nl, or_230_nl, fsm_output(0));
  mux_254_nl <= MUX_s_1_2_2(or_233_nl, mux_253_nl, fsm_output(1));
  nor_396_nl <= NOT((fsm_output(7)) OR mux_254_nl);
  mux_258_nl <= MUX_s_1_2_2(mux_257_nl, nor_396_nl, fsm_output(6));
  vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_266_nl, mux_258_nl,
      fsm_output(5));
  nor_371_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_135);
  nor_372_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_373_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_279_nl <= MUX_s_1_2_2(nor_372_nl, nor_373_nl, fsm_output(0));
  mux_280_nl <= MUX_s_1_2_2(nor_371_nl, mux_279_nl, fsm_output(1));
  and_255_nl <= (fsm_output(7)) AND mux_280_nl;
  nor_374_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_135);
  nor_375_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_376_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_276_nl <= MUX_s_1_2_2(nor_375_nl, nor_376_nl, fsm_output(0));
  mux_277_nl <= MUX_s_1_2_2(nor_374_nl, mux_276_nl, fsm_output(1));
  nor_377_nl <= NOT((COMP_LOOP_acc_13_psp_sva(0)) OR (fsm_output(1)) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(1)))
      OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR (fsm_output(6)) OR nand_138_cse);
  mux_278_nl <= MUX_s_1_2_2(mux_277_nl, nor_377_nl, fsm_output(7));
  mux_281_nl <= MUX_s_1_2_2(and_255_nl, mux_278_nl, fsm_output(2));
  nor_378_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("01")) OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_379_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_134);
  nor_380_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_134);
  mux_272_nl <= MUX_s_1_2_2(nor_379_nl, nor_380_nl, fsm_output(0));
  nor_381_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_382_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_271_nl <= MUX_s_1_2_2(nor_381_nl, nor_382_nl, fsm_output(0));
  mux_273_nl <= MUX_s_1_2_2(mux_272_nl, mux_271_nl, fsm_output(1));
  mux_274_nl <= MUX_s_1_2_2(nor_378_nl, mux_273_nl, fsm_output(7));
  or_263_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_134;
  or_261_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_134;
  mux_269_nl <= MUX_s_1_2_2(or_263_nl, or_261_nl, fsm_output(0));
  or_259_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_257_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_268_nl <= MUX_s_1_2_2(or_259_nl, or_257_nl, fsm_output(0));
  mux_270_nl <= MUX_s_1_2_2(mux_269_nl, mux_268_nl, fsm_output(1));
  nor_383_nl <= NOT((fsm_output(7)) OR mux_270_nl);
  mux_275_nl <= MUX_s_1_2_2(mux_274_nl, nor_383_nl, fsm_output(2));
  vec_rsc_0_2_i_we_d_pff <= MUX_s_1_2_2(mux_281_nl, mux_275_nl, fsm_output(5));
  nor_358_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_359_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_294_nl <= MUX_s_1_2_2(nor_358_nl, nor_359_nl, fsm_output(0));
  and_254_nl <= (fsm_output(1)) AND mux_294_nl;
  nor_360_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (NOT COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm) OR nand_137_cse);
  nor_361_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_293_nl <= MUX_s_1_2_2(nor_360_nl, nor_361_nl, fsm_output(1));
  mux_295_nl <= MUX_s_1_2_2(and_254_nl, mux_293_nl, fsm_output(7));
  nor_362_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("010")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_363_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_291_nl <= MUX_s_1_2_2(nor_362_nl, nor_363_nl, fsm_output(1));
  or_305_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR not_tmp_138;
  or_303_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_138;
  mux_290_nl <= MUX_s_1_2_2(or_305_nl, or_303_nl, fsm_output(0));
  nor_364_nl <= NOT((fsm_output(1)) OR mux_290_nl);
  mux_292_nl <= MUX_s_1_2_2(mux_291_nl, nor_364_nl, fsm_output(7));
  mux_296_nl <= MUX_s_1_2_2(mux_295_nl, mux_292_nl, fsm_output(5));
  nor_365_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_366_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_286_nl <= MUX_s_1_2_2(nor_365_nl, nor_366_nl, fsm_output(0));
  nor_367_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("010")) OR (NOT COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)
      OR not_tmp_138);
  mux_287_nl <= MUX_s_1_2_2(mux_286_nl, nor_367_nl, fsm_output(1));
  nor_368_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_369_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("010")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_285_nl <= MUX_s_1_2_2(nor_368_nl, nor_369_nl, fsm_output(1));
  mux_288_nl <= MUX_s_1_2_2(mux_287_nl, mux_285_nl, fsm_output(7));
  or_292_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_291_nl <= (NOT (VEC_LOOP_j_10_0_sva_9_0(1))) OR (COMP_LOOP_acc_13_psp_sva(0))
      OR (NOT COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR not_tmp_138;
  or_289_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR not_tmp_138;
  mux_283_nl <= MUX_s_1_2_2(or_291_nl, or_289_nl, fsm_output(0));
  mux_284_nl <= MUX_s_1_2_2(or_292_nl, mux_283_nl, fsm_output(1));
  nor_370_nl <= NOT((fsm_output(7)) OR mux_284_nl);
  mux_289_nl <= MUX_s_1_2_2(mux_288_nl, nor_370_nl, fsm_output(5));
  vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_296_nl, mux_289_nl,
      fsm_output(6));
  nor_345_nl <= NOT((fsm_output(0)) OR (NOT (fsm_output(5))) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR (fsm_output(6)) OR (fsm_output(3))
      OR (fsm_output(4)));
  nor_346_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 3)/=STD_LOGIC_VECTOR'("1111")));
  nor_347_nl <= NOT((COMP_LOOP_acc_10_cse_10_1_7_sva(2)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)))));
  nor_348_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR not_tmp_134);
  mux_308_nl <= MUX_s_1_2_2(nor_347_nl, nor_348_nl, fsm_output(5));
  mux_309_nl <= MUX_s_1_2_2(nor_346_nl, mux_308_nl, fsm_output(0));
  mux_310_nl <= MUX_s_1_2_2(nor_345_nl, mux_309_nl, fsm_output(7));
  nor_349_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR not_tmp_147);
  nor_350_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_306_nl <= MUX_s_1_2_2(nor_349_nl, nor_350_nl, fsm_output(5));
  nor_351_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_352_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_305_nl <= MUX_s_1_2_2(nor_351_nl, nor_352_nl, fsm_output(5));
  mux_307_nl <= MUX_s_1_2_2(mux_306_nl, mux_305_nl, fsm_output(0));
  and_253_nl <= (fsm_output(7)) AND mux_307_nl;
  mux_311_nl <= MUX_s_1_2_2(mux_310_nl, and_253_nl, fsm_output(1));
  nor_353_nl <= NOT((NOT (fsm_output(5))) OR CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2
      DOWNTO 1)/=STD_LOGIC_VECTOR'("01")) OR nand_132_cse);
  nor_354_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR not_tmp_134);
  nor_355_nl <= NOT((COMP_LOOP_acc_1_cse_4_sva(2)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)))));
  mux_301_nl <= MUX_s_1_2_2(nor_354_nl, nor_355_nl, fsm_output(5));
  mux_302_nl <= MUX_s_1_2_2(nor_353_nl, mux_301_nl, fsm_output(0));
  nor_356_nl <= NOT((fsm_output(0)) OR (COMP_LOOP_acc_13_psp_sva(0)) OR (fsm_output(5))
      OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_303_nl <= MUX_s_1_2_2(mux_302_nl, nor_356_nl, fsm_output(7));
  or_321_nl <= (COMP_LOOP_acc_11_psp_sva(1)) OR (NOT((COMP_LOOP_acc_11_psp_sva(0))
      AND (VEC_LOOP_j_10_0_sva_9_0(0)) AND (fsm_output(6)) AND (fsm_output(3)) AND
      (fsm_output(4))));
  or_320_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_299_nl <= MUX_s_1_2_2(or_321_nl, or_320_nl, fsm_output(5));
  or_318_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_316_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_298_nl <= MUX_s_1_2_2(or_318_nl, or_316_nl, fsm_output(5));
  mux_300_nl <= MUX_s_1_2_2(mux_299_nl, mux_298_nl, fsm_output(0));
  nor_357_nl <= NOT((fsm_output(7)) OR mux_300_nl);
  mux_304_nl <= MUX_s_1_2_2(mux_303_nl, nor_357_nl, fsm_output(1));
  vec_rsc_0_3_i_we_d_pff <= MUX_s_1_2_2(mux_311_nl, mux_304_nl, fsm_output(2));
  nor_332_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_333_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_324_nl <= MUX_s_1_2_2(nor_332_nl, nor_333_nl, fsm_output(0));
  and_252_nl <= (fsm_output(1)) AND mux_324_nl;
  nor_334_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("011"))
      AND COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)) OR nand_137_cse);
  nor_335_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_323_nl <= MUX_s_1_2_2(nor_334_nl, nor_335_nl, fsm_output(1));
  mux_325_nl <= MUX_s_1_2_2(and_252_nl, mux_323_nl, fsm_output(7));
  nor_336_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_337_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_320_nl <= MUX_s_1_2_2(nor_336_nl, nor_337_nl, fsm_output(0));
  nor_338_nl <= NOT((NOT((fsm_output(0)) AND CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("011")) AND COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm))
      OR not_tmp_138);
  mux_321_nl <= MUX_s_1_2_2(mux_320_nl, nor_338_nl, fsm_output(1));
  nor_339_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_340_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_319_nl <= MUX_s_1_2_2(nor_339_nl, nor_340_nl, fsm_output(1));
  mux_322_nl <= MUX_s_1_2_2(mux_321_nl, mux_319_nl, fsm_output(7));
  mux_326_nl <= MUX_s_1_2_2(mux_325_nl, mux_322_nl, fsm_output(6));
  nor_341_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_342_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_316_nl <= MUX_s_1_2_2(nor_341_nl, nor_342_nl, fsm_output(1));
  or_351_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_349_nl <= (COMP_LOOP_acc_10_cse_10_1_7_sva(2)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111"))));
  mux_315_nl <= MUX_s_1_2_2(or_351_nl, or_349_nl, fsm_output(0));
  nor_343_nl <= NOT((fsm_output(1)) OR mux_315_nl);
  mux_317_nl <= MUX_s_1_2_2(mux_316_nl, nor_343_nl, fsm_output(7));
  or_347_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_346_nl <= (NOT (VEC_LOOP_j_10_0_sva_9_0(1))) OR (COMP_LOOP_acc_13_psp_sva(0))
      OR (NOT COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_344_nl <= (COMP_LOOP_acc_10_cse_10_1_5_sva(2)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111"))));
  mux_313_nl <= MUX_s_1_2_2(or_346_nl, or_344_nl, fsm_output(0));
  mux_314_nl <= MUX_s_1_2_2(or_347_nl, mux_313_nl, fsm_output(1));
  nor_344_nl <= NOT((fsm_output(7)) OR mux_314_nl);
  mux_318_nl <= MUX_s_1_2_2(mux_317_nl, nor_344_nl, fsm_output(6));
  vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_326_nl, mux_318_nl,
      fsm_output(5));
  nor_319_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR not_tmp_135);
  nor_320_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_321_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_339_nl <= MUX_s_1_2_2(nor_320_nl, nor_321_nl, fsm_output(0));
  mux_340_nl <= MUX_s_1_2_2(nor_319_nl, mux_339_nl, fsm_output(1));
  and_251_nl <= (fsm_output(7)) AND mux_340_nl;
  nor_322_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR nand_97_cse);
  nor_323_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_324_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_336_nl <= MUX_s_1_2_2(nor_323_nl, nor_324_nl, fsm_output(0));
  mux_337_nl <= MUX_s_1_2_2(nor_322_nl, mux_336_nl, fsm_output(1));
  nor_325_nl <= NOT((NOT (COMP_LOOP_acc_13_psp_sva(0))) OR (fsm_output(1)) OR (VEC_LOOP_j_10_0_sva_9_0(1))
      OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR (fsm_output(6)) OR nand_138_cse);
  mux_338_nl <= MUX_s_1_2_2(mux_337_nl, nor_325_nl, fsm_output(7));
  mux_341_nl <= MUX_s_1_2_2(and_251_nl, mux_338_nl, fsm_output(2));
  nor_326_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("10")) OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_327_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR nand_98_cse);
  nor_328_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR nand_99_cse);
  mux_332_nl <= MUX_s_1_2_2(nor_327_nl, nor_328_nl, fsm_output(0));
  nor_329_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_330_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_331_nl <= MUX_s_1_2_2(nor_329_nl, nor_330_nl, fsm_output(0));
  mux_333_nl <= MUX_s_1_2_2(mux_332_nl, mux_331_nl, fsm_output(1));
  mux_334_nl <= MUX_s_1_2_2(nor_326_nl, mux_333_nl, fsm_output(7));
  or_376_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR not_tmp_134;
  or_374_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR not_tmp_134;
  mux_329_nl <= MUX_s_1_2_2(or_376_nl, or_374_nl, fsm_output(0));
  or_372_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_370_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_328_nl <= MUX_s_1_2_2(or_372_nl, or_370_nl, fsm_output(0));
  mux_330_nl <= MUX_s_1_2_2(mux_329_nl, mux_328_nl, fsm_output(1));
  nor_331_nl <= NOT((fsm_output(7)) OR mux_330_nl);
  mux_335_nl <= MUX_s_1_2_2(mux_334_nl, nor_331_nl, fsm_output(2));
  vec_rsc_0_4_i_we_d_pff <= MUX_s_1_2_2(mux_341_nl, mux_335_nl, fsm_output(5));
  nor_306_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_307_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_354_nl <= MUX_s_1_2_2(nor_306_nl, nor_307_nl, fsm_output(0));
  and_250_nl <= (fsm_output(1)) AND mux_354_nl;
  nor_308_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (NOT COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm) OR nand_137_cse);
  nor_309_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_353_nl <= MUX_s_1_2_2(nor_308_nl, nor_309_nl, fsm_output(1));
  mux_355_nl <= MUX_s_1_2_2(and_250_nl, mux_353_nl, fsm_output(7));
  nor_310_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("100")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_311_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_351_nl <= MUX_s_1_2_2(nor_310_nl, nor_311_nl, fsm_output(1));
  or_418_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR not_tmp_138;
  or_416_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR not_tmp_138;
  mux_350_nl <= MUX_s_1_2_2(or_418_nl, or_416_nl, fsm_output(0));
  nor_312_nl <= NOT((fsm_output(1)) OR mux_350_nl);
  mux_352_nl <= MUX_s_1_2_2(mux_351_nl, nor_312_nl, fsm_output(7));
  mux_356_nl <= MUX_s_1_2_2(mux_355_nl, mux_352_nl, fsm_output(5));
  nor_313_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_314_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_346_nl <= MUX_s_1_2_2(nor_313_nl, nor_314_nl, fsm_output(0));
  nor_315_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("100")) OR (NOT COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm)
      OR not_tmp_138);
  mux_347_nl <= MUX_s_1_2_2(mux_346_nl, nor_315_nl, fsm_output(1));
  nor_316_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_317_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("100")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_345_nl <= MUX_s_1_2_2(nor_316_nl, nor_317_nl, fsm_output(1));
  mux_348_nl <= MUX_s_1_2_2(mux_347_nl, mux_345_nl, fsm_output(7));
  or_405_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_404_nl <= (VEC_LOOP_j_10_0_sva_9_0(1)) OR (NOT (COMP_LOOP_acc_13_psp_sva(0)))
      OR (NOT COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR not_tmp_138;
  or_402_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR not_tmp_138;
  mux_343_nl <= MUX_s_1_2_2(or_404_nl, or_402_nl, fsm_output(0));
  mux_344_nl <= MUX_s_1_2_2(or_405_nl, mux_343_nl, fsm_output(1));
  nor_318_nl <= NOT((fsm_output(7)) OR mux_344_nl);
  mux_349_nl <= MUX_s_1_2_2(mux_348_nl, nor_318_nl, fsm_output(5));
  vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_356_nl, mux_349_nl,
      fsm_output(6));
  nor_293_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("10"))
      OR nand_130_cse);
  nor_294_nl <= NOT((COMP_LOOP_acc_14_psp_sva(0)) OR (NOT((COMP_LOOP_acc_14_psp_sva(1))
      AND (VEC_LOOP_j_10_0_sva_9_0(0)) AND (fsm_output(6)) AND (fsm_output(3)) AND
      (fsm_output(4)))));
  nor_295_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_369_nl <= MUX_s_1_2_2(nor_294_nl, nor_295_nl, fsm_output(0));
  mux_370_nl <= MUX_s_1_2_2(nor_293_nl, mux_369_nl, fsm_output(1));
  and_249_nl <= (fsm_output(7)) AND mux_370_nl;
  nor_296_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR nand_97_cse);
  nor_297_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR not_tmp_147);
  nor_298_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_366_nl <= MUX_s_1_2_2(nor_297_nl, nor_298_nl, fsm_output(0));
  mux_367_nl <= MUX_s_1_2_2(nor_296_nl, mux_366_nl, fsm_output(1));
  nor_299_nl <= NOT((NOT (COMP_LOOP_acc_13_psp_sva(0))) OR (fsm_output(1)) OR (VEC_LOOP_j_10_0_sva_9_0(1))
      OR (fsm_output(0)) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0))) OR (fsm_output(6))
      OR nand_138_cse);
  mux_368_nl <= MUX_s_1_2_2(mux_367_nl, nor_299_nl, fsm_output(7));
  mux_371_nl <= MUX_s_1_2_2(and_249_nl, mux_368_nl, fsm_output(2));
  nor_300_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("10")) OR (fsm_output(0)) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_301_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR nand_98_cse);
  nor_302_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR nand_99_cse);
  mux_362_nl <= MUX_s_1_2_2(nor_301_nl, nor_302_nl, fsm_output(0));
  nor_303_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_304_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_361_nl <= MUX_s_1_2_2(nor_303_nl, nor_304_nl, fsm_output(0));
  mux_363_nl <= MUX_s_1_2_2(mux_362_nl, mux_361_nl, fsm_output(1));
  mux_364_nl <= MUX_s_1_2_2(nor_300_nl, mux_363_nl, fsm_output(7));
  or_434_nl <= (COMP_LOOP_acc_10_cse_10_1_4_sva(1)) OR (NOT((COMP_LOOP_acc_10_cse_10_1_4_sva(2))
      AND (COMP_LOOP_acc_10_cse_10_1_4_sva(0)) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4))));
  or_433_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("10"))
      OR nand_133_cse;
  mux_359_nl <= MUX_s_1_2_2(or_434_nl, or_433_nl, fsm_output(0));
  or_431_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_429_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_358_nl <= MUX_s_1_2_2(or_431_nl, or_429_nl, fsm_output(0));
  mux_360_nl <= MUX_s_1_2_2(mux_359_nl, mux_358_nl, fsm_output(1));
  nor_305_nl <= NOT((fsm_output(7)) OR mux_360_nl);
  mux_365_nl <= MUX_s_1_2_2(mux_364_nl, nor_305_nl, fsm_output(2));
  vec_rsc_0_5_i_we_d_pff <= MUX_s_1_2_2(mux_371_nl, mux_365_nl, fsm_output(5));
  nor_280_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_281_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_384_nl <= MUX_s_1_2_2(nor_280_nl, nor_281_nl, fsm_output(0));
  and_248_nl <= (fsm_output(1)) AND mux_384_nl;
  nor_282_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("101"))
      AND COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)) OR nand_137_cse);
  nor_283_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_383_nl <= MUX_s_1_2_2(nor_282_nl, nor_283_nl, fsm_output(1));
  mux_385_nl <= MUX_s_1_2_2(and_248_nl, mux_383_nl, fsm_output(7));
  nor_284_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_285_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_380_nl <= MUX_s_1_2_2(nor_284_nl, nor_285_nl, fsm_output(0));
  nor_286_nl <= NOT((NOT((fsm_output(0)) AND CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("101")) AND COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm))
      OR not_tmp_138);
  mux_381_nl <= MUX_s_1_2_2(mux_380_nl, nor_286_nl, fsm_output(1));
  nor_287_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_288_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("101")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_379_nl <= MUX_s_1_2_2(nor_287_nl, nor_288_nl, fsm_output(1));
  mux_382_nl <= MUX_s_1_2_2(mux_381_nl, mux_379_nl, fsm_output(7));
  mux_386_nl <= MUX_s_1_2_2(mux_385_nl, mux_382_nl, fsm_output(6));
  nor_289_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("101")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_290_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_376_nl <= MUX_s_1_2_2(nor_289_nl, nor_290_nl, fsm_output(1));
  or_467_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_465_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("10"))
      OR nand_126_cse;
  mux_375_nl <= MUX_s_1_2_2(or_467_nl, or_465_nl, fsm_output(0));
  nor_291_nl <= NOT((fsm_output(1)) OR mux_375_nl);
  mux_377_nl <= MUX_s_1_2_2(mux_376_nl, nor_291_nl, fsm_output(7));
  or_462_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_461_nl <= (VEC_LOOP_j_10_0_sva_9_0(1)) OR (NOT (COMP_LOOP_acc_13_psp_sva(0)))
      OR (NOT COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm) OR not_tmp_153;
  or_459_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("10"))
      OR nand_127_cse;
  mux_373_nl <= MUX_s_1_2_2(or_461_nl, or_459_nl, fsm_output(0));
  mux_374_nl <= MUX_s_1_2_2(or_462_nl, mux_373_nl, fsm_output(1));
  nor_292_nl <= NOT((fsm_output(7)) OR mux_374_nl);
  mux_378_nl <= MUX_s_1_2_2(mux_377_nl, nor_292_nl, fsm_output(6));
  vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_386_nl, mux_378_nl,
      fsm_output(5));
  nor_267_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR not_tmp_135);
  nor_268_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_269_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_399_nl <= MUX_s_1_2_2(nor_268_nl, nor_269_nl, fsm_output(0));
  mux_400_nl <= MUX_s_1_2_2(nor_267_nl, mux_399_nl, fsm_output(1));
  and_247_nl <= (fsm_output(7)) AND mux_400_nl;
  nor_270_nl <= NOT((COMP_LOOP_acc_10_cse_10_1_3_sva(0)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 1)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(0)) AND (fsm_output(6))
      AND (fsm_output(3)) AND (fsm_output(4)))));
  nor_271_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (VEC_LOOP_j_10_0_sva_9_0(0)) OR not_tmp_134);
  nor_272_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_396_nl <= MUX_s_1_2_2(nor_271_nl, nor_272_nl, fsm_output(0));
  mux_397_nl <= MUX_s_1_2_2(nor_270_nl, mux_396_nl, fsm_output(1));
  nor_273_nl <= NOT((NOT (COMP_LOOP_acc_13_psp_sva(0))) OR (fsm_output(1)) OR (NOT
      (VEC_LOOP_j_10_0_sva_9_0(1))) OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_398_nl <= MUX_s_1_2_2(mux_397_nl, nor_273_nl, fsm_output(7));
  mux_401_nl <= MUX_s_1_2_2(and_247_nl, mux_398_nl, fsm_output(2));
  nor_274_nl <= NOT((fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("11")) OR (fsm_output(0)) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_275_nl <= NOT((COMP_LOOP_acc_10_cse_10_1_sva(0)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2
      DOWNTO 1)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)))));
  nor_276_nl <= NOT((COMP_LOOP_acc_1_cse_sva(0)) OR (NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 1)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(6)) AND (fsm_output(3))
      AND (fsm_output(4)))));
  mux_392_nl <= MUX_s_1_2_2(nor_275_nl, nor_276_nl, fsm_output(0));
  nor_277_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse);
  nor_278_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_391_nl <= MUX_s_1_2_2(nor_277_nl, nor_278_nl, fsm_output(0));
  mux_393_nl <= MUX_s_1_2_2(mux_392_nl, mux_391_nl, fsm_output(1));
  mux_394_nl <= MUX_s_1_2_2(nor_274_nl, mux_393_nl, fsm_output(7));
  or_492_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR not_tmp_134;
  or_490_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR not_tmp_134;
  mux_389_nl <= MUX_s_1_2_2(or_492_nl, or_490_nl, fsm_output(0));
  or_488_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse;
  or_486_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(6)) OR nand_138_cse;
  mux_388_nl <= MUX_s_1_2_2(or_488_nl, or_486_nl, fsm_output(0));
  mux_390_nl <= MUX_s_1_2_2(mux_389_nl, mux_388_nl, fsm_output(1));
  nor_279_nl <= NOT((fsm_output(7)) OR mux_390_nl);
  mux_395_nl <= MUX_s_1_2_2(mux_394_nl, nor_279_nl, fsm_output(2));
  vec_rsc_0_6_i_we_d_pff <= MUX_s_1_2_2(mux_401_nl, mux_395_nl, fsm_output(5));
  nor_254_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_255_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_414_nl <= MUX_s_1_2_2(nor_254_nl, nor_255_nl, fsm_output(0));
  and_246_nl <= (fsm_output(1)) AND mux_414_nl;
  nor_256_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("110"))
      AND COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)) OR nand_137_cse);
  nor_257_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(0)) OR not_tmp_138);
  mux_413_nl <= MUX_s_1_2_2(nor_256_nl, nor_257_nl, fsm_output(1));
  mux_415_nl <= MUX_s_1_2_2(and_246_nl, mux_413_nl, fsm_output(7));
  nor_258_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("110")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_259_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_411_nl <= MUX_s_1_2_2(nor_258_nl, nor_259_nl, fsm_output(1));
  or_531_nl <= (NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm AND (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))))
      OR not_tmp_138;
  or_529_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR not_tmp_138;
  mux_410_nl <= MUX_s_1_2_2(or_531_nl, or_529_nl, fsm_output(0));
  nor_260_nl <= NOT((fsm_output(1)) OR mux_410_nl);
  mux_412_nl <= MUX_s_1_2_2(mux_411_nl, nor_260_nl, fsm_output(7));
  mux_416_nl <= MUX_s_1_2_2(mux_415_nl, mux_412_nl, fsm_output(5));
  nor_261_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (VEC_LOOP_j_10_0_sva_9_0(0))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_262_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_406_nl <= MUX_s_1_2_2(nor_261_nl, nor_262_nl, fsm_output(0));
  nor_263_nl <= NOT((NOT((fsm_output(0)) AND CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("110")) AND COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm))
      OR not_tmp_138);
  mux_407_nl <= MUX_s_1_2_2(mux_406_nl, nor_263_nl, fsm_output(1));
  nor_264_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(0)) OR not_tmp_138);
  nor_265_nl <= NOT((NOT COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("110")) OR (NOT (fsm_output(0))) OR (fsm_output(2))
      OR nand_138_cse);
  mux_405_nl <= MUX_s_1_2_2(nor_264_nl, nor_265_nl, fsm_output(1));
  mux_408_nl <= MUX_s_1_2_2(mux_407_nl, mux_405_nl, fsm_output(7));
  or_518_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_517_nl <= (NOT((VEC_LOOP_j_10_0_sva_9_0(1)) AND (COMP_LOOP_acc_13_psp_sva(0))
      AND COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm AND (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))))
      OR not_tmp_138;
  or_515_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR not_tmp_138;
  mux_403_nl <= MUX_s_1_2_2(or_517_nl, or_515_nl, fsm_output(0));
  mux_404_nl <= MUX_s_1_2_2(or_518_nl, mux_403_nl, fsm_output(1));
  nor_266_nl <= NOT((fsm_output(7)) OR mux_404_nl);
  mux_409_nl <= MUX_s_1_2_2(mux_408_nl, nor_266_nl, fsm_output(5));
  vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_416_nl, mux_409_nl,
      fsm_output(6));
  nor_247_nl <= NOT((NOT (fsm_output(5))) OR (fsm_output(1)) OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("111")) OR (fsm_output(6)) OR (fsm_output(3))
      OR (fsm_output(4)));
  and_239_nl <= CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (fsm_output(1)) AND (VEC_LOOP_j_10_0_sva_9_0(0)) AND (fsm_output(6)) AND
      (fsm_output(3)) AND (fsm_output(4));
  and_240_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  nor_248_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse);
  mux_428_nl <= MUX_s_1_2_2(and_240_nl, nor_248_nl, fsm_output(1));
  mux_429_nl <= MUX_s_1_2_2(and_239_nl, mux_428_nl, fsm_output(5));
  mux_430_nl <= MUX_s_1_2_2(nor_247_nl, mux_429_nl, fsm_output(7));
  and_242_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  nor_249_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse);
  mux_426_nl <= MUX_s_1_2_2(and_242_nl, nor_249_nl, fsm_output(1));
  and_243_nl <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  nor_250_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse);
  mux_425_nl <= MUX_s_1_2_2(and_243_nl, nor_250_nl, fsm_output(1));
  mux_427_nl <= MUX_s_1_2_2(mux_426_nl, mux_425_nl, fsm_output(5));
  and_241_nl <= (fsm_output(7)) AND mux_427_nl;
  mux_431_nl <= MUX_s_1_2_2(mux_430_nl, and_241_nl, fsm_output(0));
  and_244_nl <= CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (fsm_output(1)) AND (VEC_LOOP_j_10_0_sva_9_0(0)) AND (fsm_output(6)) AND
      (fsm_output(3)) AND (fsm_output(4));
  and_245_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  nor_251_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse);
  mux_421_nl <= MUX_s_1_2_2(and_245_nl, nor_251_nl, fsm_output(1));
  mux_422_nl <= MUX_s_1_2_2(and_244_nl, mux_421_nl, fsm_output(5));
  nor_252_nl <= NOT((fsm_output(5)) OR (NOT (COMP_LOOP_acc_13_psp_sva(0))) OR (fsm_output(1))
      OR CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (fsm_output(6)) OR nand_138_cse);
  mux_423_nl <= MUX_s_1_2_2(mux_422_nl, nor_252_nl, fsm_output(7));
  nand_58_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4)));
  or_544_nl <= (NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse;
  mux_419_nl <= MUX_s_1_2_2(nand_58_nl, or_544_nl, fsm_output(1));
  nand_60_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4)));
  or_542_nl <= (NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(6))))) OR nand_138_cse;
  mux_418_nl <= MUX_s_1_2_2(nand_60_nl, or_542_nl, fsm_output(1));
  mux_420_nl <= MUX_s_1_2_2(mux_419_nl, mux_418_nl, fsm_output(5));
  nor_253_nl <= NOT((fsm_output(7)) OR mux_420_nl);
  mux_424_nl <= MUX_s_1_2_2(mux_423_nl, nor_253_nl, fsm_output(0));
  vec_rsc_0_7_i_we_d_pff <= MUX_s_1_2_2(mux_431_nl, mux_424_nl, fsm_output(2));
  nor_233_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_234_nl <= NOT(CONV_SL_1_1(VEC_LOOP_j_10_0_sva_9_0(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_444_nl <= MUX_s_1_2_2(nor_233_nl, nor_234_nl, fsm_output(0));
  and_237_nl <= (fsm_output(1)) AND mux_444_nl;
  nor_235_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_11_psp_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (NOT COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) OR (NOT (VEC_LOOP_j_10_0_sva_9_0(0)))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_236_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111"))
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  mux_442_nl <= MUX_s_1_2_2(nor_235_nl, nor_236_nl, fsm_output(0));
  nor_237_nl <= NOT((NOT((fsm_output(0)) AND CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("111")) AND COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm))
      OR not_tmp_138);
  mux_443_nl <= MUX_s_1_2_2(mux_442_nl, nor_237_nl, fsm_output(1));
  mux_445_nl <= MUX_s_1_2_2(and_237_nl, mux_443_nl, fsm_output(6));
  nor_238_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm)) OR nand_137_cse);
  nor_239_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(0))))) OR not_tmp_138);
  mux_440_nl <= MUX_s_1_2_2(nor_238_nl, nor_239_nl, fsm_output(1));
  nor_240_nl <= NOT((NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND (NOT (fsm_output(0))))) OR not_tmp_138);
  nor_241_nl <= NOT((NOT(COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm AND CONV_SL_1_1(COMP_LOOP_acc_1_cse_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("111")) AND (fsm_output(0)) AND (NOT (fsm_output(2)))))
      OR nand_138_cse);
  mux_439_nl <= MUX_s_1_2_2(nor_240_nl, nor_241_nl, fsm_output(1));
  mux_441_nl <= MUX_s_1_2_2(mux_440_nl, mux_439_nl, fsm_output(6));
  mux_446_nl <= MUX_s_1_2_2(mux_445_nl, mux_441_nl, fsm_output(7));
  nor_242_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("111")) OR (NOT COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm)
      OR CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  nor_243_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  mux_436_nl <= MUX_s_1_2_2(nor_242_nl, nor_243_nl, fsm_output(1));
  nor_244_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111"))
      OR (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  nor_245_nl <= NOT((NOT((VEC_LOOP_j_10_0_sva_9_0(1)) AND (COMP_LOOP_acc_13_psp_sva(0))
      AND COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm)) OR not_tmp_153);
  and_238_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111"));
  mux_434_nl <= MUX_s_1_2_2(nor_245_nl, and_238_nl, fsm_output(0));
  mux_435_nl <= MUX_s_1_2_2(nor_244_nl, mux_434_nl, fsm_output(1));
  mux_437_nl <= MUX_s_1_2_2(mux_436_nl, mux_435_nl, fsm_output(6));
  or_728_nl <= (NOT(CONV_SL_1_1(COMP_LOOP_acc_14_psp_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm)) OR not_tmp_153;
  nand_51_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))
      AND CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111")));
  mux_433_nl <= MUX_s_1_2_2(or_728_nl, nand_51_nl, fsm_output(0));
  nor_246_nl <= NOT((fsm_output(6)) OR (fsm_output(1)) OR mux_433_nl);
  mux_438_nl <= MUX_s_1_2_2(mux_437_nl, nor_246_nl, fsm_output(7));
  vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d <= MUX_s_1_2_2(mux_446_nl, mux_438_nl,
      fsm_output(5));
  COMP_LOOP_tmp_or_16_cse <= and_dcpl_42 OR and_dcpl_96;
  COMP_LOOP_1_tmp_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(z_out_1(6
      DOWNTO 0)) * UNSIGNED(COMP_LOOP_k_10_3_sva_6_0)), 7));
  twiddle_rsc_0_0_i_radr_d <= MUX1HOT_v_7_7_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_1_tmp_mul_nl),
      7)), (z_out_4(9 DOWNTO 3)), (z_out_4(8 DOWNTO 2)), (COMP_LOOP_5_tmp_mul_idiv_sva(7
      DOWNTO 1)), (COMP_LOOP_2_tmp_mul_idiv_sva(9 DOWNTO 3)), (COMP_LOOP_3_tmp_lshift_ncse_sva(8
      DOWNTO 2)), (COMP_LOOP_2_tmp_lshift_ncse_sva(9 DOWNTO 3)), STD_LOGIC_VECTOR'(
      and_dcpl_39 & COMP_LOOP_tmp_or_16_cse & and_dcpl_95 & and_dcpl_97 & and_dcpl_98
      & and_dcpl_101 & and_dcpl_102));
  or_584_cse <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR (fsm_output(3));
  or_588_nl <= CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT (fsm_output(3)));
  or_586_nl <= CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (NOT (fsm_output(3)));
  mux_452_nl <= MUX_s_1_2_2(or_588_nl, or_586_nl, fsm_output(0));
  mux_451_nl <= MUX_s_1_2_2((fsm_output(3)), or_584_cse, fsm_output(0));
  mux_453_nl <= MUX_s_1_2_2(mux_452_nl, mux_451_nl, fsm_output(1));
  or_583_nl <= CONV_SL_1_1(z_out_4(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(3));
  mux_449_nl <= MUX_s_1_2_2(or_583_nl, or_584_cse, fsm_output(0));
  or_581_nl <= (COMP_LOOP_5_tmp_mul_idiv_sva(0)) OR (fsm_output(3));
  or_580_nl <= CONV_SL_1_1(COMP_LOOP_2_tmp_mul_idiv_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))
      OR (fsm_output(3));
  mux_448_nl <= MUX_s_1_2_2(or_581_nl, or_580_nl, fsm_output(0));
  mux_450_nl <= MUX_s_1_2_2(mux_449_nl, mux_448_nl, fsm_output(1));
  mux_454_nl <= MUX_s_1_2_2(mux_453_nl, mux_450_nl, fsm_output(2));
  twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= (NOT mux_454_nl) AND and_dcpl_104;
  twiddle_rsc_0_1_i_radr_d_pff <= z_out_4(9 DOWNTO 3);
  nor_230_cse <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("01")));
  nor_229_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("10")));
  mux_456_nl <= MUX_s_1_2_2(nor_229_nl, nor_230_cse, fsm_output(0));
  nor_232_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("001")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  mux_455_nl <= MUX_s_1_2_2(nor_230_cse, nor_232_nl, fsm_output(0));
  mux_457_nl <= MUX_s_1_2_2(mux_456_nl, mux_455_nl, fsm_output(1));
  twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_457_nl AND and_dcpl_104;
  twiddle_rsc_0_2_i_radr_d_pff <= MUX_v_7_2_2((z_out_4(9 DOWNTO 3)), (z_out_4(8 DOWNTO
      2)), COMP_LOOP_tmp_or_7_cse);
  nor_226_cse <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010")) OR
      (fsm_output(3)));
  nor_225_cse <= NOT(CONV_SL_1_1(z_out_4(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01")) OR
      (fsm_output(3)));
  nor_223_nl <= NOT((fsm_output(0)) OR CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (NOT (fsm_output(3))));
  nor_224_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("010"))
      OR (fsm_output(3)));
  mux_461_nl <= MUX_s_1_2_2(nor_223_nl, nor_224_nl, fsm_output(1));
  mux_459_nl <= MUX_s_1_2_2(nor_225_cse, nor_226_cse, fsm_output(0));
  mux_458_nl <= MUX_s_1_2_2(nor_226_cse, nor_225_cse, fsm_output(0));
  mux_460_nl <= MUX_s_1_2_2(mux_459_nl, mux_458_nl, fsm_output(1));
  mux_462_nl <= MUX_s_1_2_2(mux_461_nl, mux_460_nl, fsm_output(2));
  twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_462_nl AND and_dcpl_104;
  nor_220_cse <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("01")));
  nor_219_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("10")));
  mux_464_nl <= MUX_s_1_2_2(nor_219_nl, nor_220_cse, fsm_output(0));
  nor_222_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("011")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  mux_463_nl <= MUX_s_1_2_2(nor_220_cse, nor_222_nl, fsm_output(0));
  mux_465_nl <= MUX_s_1_2_2(mux_464_nl, mux_463_nl, fsm_output(1));
  twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_465_nl AND and_dcpl_104;
  twiddle_rsc_0_4_i_radr_d <= MUX1HOT_v_7_6_2((z_out_4(9 DOWNTO 3)), (z_out_4(8 DOWNTO
      2)), (COMP_LOOP_5_tmp_mul_idiv_sva(7 DOWNTO 1)), (COMP_LOOP_2_tmp_mul_idiv_sva(9
      DOWNTO 3)), (COMP_LOOP_3_tmp_lshift_ncse_sva(8 DOWNTO 2)), (COMP_LOOP_2_tmp_lshift_ncse_sva(9
      DOWNTO 3)), STD_LOGIC_VECTOR'( COMP_LOOP_tmp_or_16_cse & and_dcpl_95 & and_dcpl_97
      & and_dcpl_98 & and_dcpl_101 & and_dcpl_102));
  nor_212_nl <= NOT((COMP_LOOP_3_tmp_lshift_ncse_sva(0)) OR (NOT((COMP_LOOP_3_tmp_lshift_ncse_sva(1))
      AND (fsm_output(3)))));
  nor_213_nl <= NOT(CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT((COMP_LOOP_2_tmp_lshift_ncse_sva(2)) AND (fsm_output(3)))));
  mux_469_nl <= MUX_s_1_2_2(nor_212_nl, nor_213_nl, fsm_output(0));
  nor_214_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(3)));
  mux_470_nl <= MUX_s_1_2_2(mux_469_nl, nor_214_nl, fsm_output(1));
  nor_215_nl <= NOT(CONV_SL_1_1(z_out_4(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR
      (fsm_output(3)));
  nor_216_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100")) OR
      (fsm_output(3)));
  mux_467_nl <= MUX_s_1_2_2(nor_215_nl, nor_216_nl, fsm_output(0));
  nor_217_nl <= NOT((NOT (COMP_LOOP_5_tmp_mul_idiv_sva(0))) OR (fsm_output(3)));
  nor_218_nl <= NOT(CONV_SL_1_1(COMP_LOOP_2_tmp_mul_idiv_sva(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("100"))
      OR (fsm_output(3)));
  mux_466_nl <= MUX_s_1_2_2(nor_217_nl, nor_218_nl, fsm_output(0));
  mux_468_nl <= MUX_s_1_2_2(mux_467_nl, mux_466_nl, fsm_output(1));
  mux_471_nl <= MUX_s_1_2_2(mux_470_nl, mux_468_nl, fsm_output(2));
  twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_471_nl AND and_dcpl_104;
  nor_209_cse <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("01")));
  nor_208_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("10")));
  mux_473_nl <= MUX_s_1_2_2(nor_208_nl, nor_209_cse, fsm_output(0));
  nor_211_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("101")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  mux_472_nl <= MUX_s_1_2_2(nor_209_cse, nor_211_nl, fsm_output(0));
  mux_474_nl <= MUX_s_1_2_2(mux_473_nl, mux_472_nl, fsm_output(1));
  twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_474_nl AND and_dcpl_104;
  nor_205_cse <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110")) OR
      (fsm_output(3)));
  nor_204_cse <= NOT(CONV_SL_1_1(z_out_4(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11")) OR
      (fsm_output(3)));
  nor_202_nl <= NOT((fsm_output(0)) OR CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (NOT (fsm_output(3))));
  nor_203_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("110"))
      OR (fsm_output(3)));
  mux_478_nl <= MUX_s_1_2_2(nor_202_nl, nor_203_nl, fsm_output(1));
  mux_476_nl <= MUX_s_1_2_2(nor_204_cse, nor_205_cse, fsm_output(0));
  mux_475_nl <= MUX_s_1_2_2(nor_205_cse, nor_204_cse, fsm_output(0));
  mux_477_nl <= MUX_s_1_2_2(mux_476_nl, mux_475_nl, fsm_output(1));
  mux_479_nl <= MUX_s_1_2_2(mux_478_nl, mux_477_nl, fsm_output(2));
  twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_479_nl AND and_dcpl_104;
  and_235_cse <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111")) AND CONV_SL_1_1(fsm_output(3
      DOWNTO 2)=STD_LOGIC_VECTOR'("01"));
  and_nl <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111")) AND CONV_SL_1_1(fsm_output(3
      DOWNTO 2)=STD_LOGIC_VECTOR'("10"));
  mux_481_nl <= MUX_s_1_2_2(and_nl, and_235_cse, fsm_output(0));
  nor_201_nl <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("111")) OR
      CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  mux_480_nl <= MUX_s_1_2_2(and_235_cse, nor_201_nl, fsm_output(0));
  mux_482_nl <= MUX_s_1_2_2(mux_481_nl, mux_480_nl, fsm_output(1));
  twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_482_nl AND and_dcpl_104;
  and_dcpl_240 <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("11111011"));
  and_dcpl_241 <= NOT((fsm_output(0)) OR (fsm_output(5)));
  and_dcpl_242 <= (NOT (fsm_output(7))) AND (fsm_output(1));
  and_dcpl_243 <= and_dcpl_242 AND and_dcpl_241;
  and_dcpl_247 <= and_dcpl_29 AND and_dcpl_243;
  and_dcpl_248 <= (fsm_output(0)) AND (NOT (fsm_output(5)));
  and_dcpl_249 <= NOT((fsm_output(7)) OR (fsm_output(1)));
  and_dcpl_250 <= and_dcpl_249 AND and_dcpl_248;
  and_dcpl_253 <= and_dcpl_150 AND and_dcpl_250;
  and_dcpl_254 <= (NOT (fsm_output(0))) AND (fsm_output(5));
  and_dcpl_256 <= and_dcpl_150 AND and_dcpl_249 AND and_dcpl_254;
  and_dcpl_257 <= and_dcpl_242 AND and_dcpl_248;
  and_dcpl_260 <= and_dcpl_99 AND (fsm_output(2)) AND (fsm_output(6));
  and_dcpl_261 <= and_dcpl_260 AND and_dcpl_257;
  and_dcpl_263 <= and_dcpl_260 AND and_dcpl_242 AND and_dcpl_254;
  and_dcpl_264 <= (fsm_output(7)) AND (NOT (fsm_output(1)));
  and_dcpl_268 <= and_dcpl_156 AND and_dcpl_264 AND and_dcpl_248;
  and_dcpl_270 <= and_dcpl_156 AND and_dcpl_264 AND and_dcpl_254;
  and_dcpl_271 <= (fsm_output(7)) AND (fsm_output(1));
  and_dcpl_274 <= and_dcpl_99 AND (NOT (fsm_output(2))) AND (fsm_output(6));
  and_dcpl_275 <= and_dcpl_274 AND and_dcpl_271 AND and_dcpl_248;
  and_dcpl_277 <= and_dcpl_274 AND and_dcpl_271 AND and_dcpl_254;
  and_dcpl_278 <= and_dcpl_29 AND and_dcpl_257;
  and_dcpl_280 <= and_dcpl_94 AND and_dcpl_250;
  and_dcpl_281 <= and_dcpl_94 AND and_dcpl_243;
  and_dcpl_282 <= and_dcpl_249 AND and_dcpl_241;
  and_dcpl_284 <= and_dcpl_99 AND nor_474_cse AND and_dcpl_282;
  and_dcpl_285 <= and_dcpl_94 AND and_dcpl_282;
  and_dcpl_286 <= and_dcpl_94 AND and_dcpl_257;
  and_dcpl_300 <= NOT(CONV_SL_1_1(fsm_output/=STD_LOGIC_VECTOR'("00000010")));
  and_dcpl_312 <= and_dcpl_28 AND (NOT (fsm_output(2))) AND (NOT (fsm_output(6)));
  and_437_cse <= and_dcpl_312 AND and_dcpl_242 AND and_230_cse;
  and_dcpl_316 <= and_dcpl_28 AND (NOT (fsm_output(2))) AND (fsm_output(6));
  and_441_cse <= and_dcpl_316 AND and_dcpl_242 AND and_dcpl_241;
  and_443_cse <= and_dcpl_316 AND and_dcpl_249 AND and_230_cse;
  and_446_cse <= and_dcpl_312 AND and_dcpl_264 AND and_dcpl_241;
  and_452_cse <= and_dcpl_63 AND and_dcpl_271 AND and_dcpl_248;
  and_455_cse <= and_dcpl_63 AND and_dcpl_271 AND (NOT (fsm_output(0))) AND (fsm_output(5));
  and_459_cse <= and_532_cse AND (fsm_output(2)) AND (fsm_output(6)) AND and_dcpl_264
      AND and_dcpl_248;
  and_dcpl_377 <= and_dcpl_28 AND and_dcpl_62 AND and_dcpl_249 AND and_dcpl_241;
  COMP_LOOP_tmp_or_15_ssc <= and_dcpl_253 OR and_dcpl_256 OR and_dcpl_261 OR and_dcpl_263
      OR and_dcpl_268 OR and_dcpl_270 OR and_dcpl_275 OR and_dcpl_277;
  COMP_LOOP_tmp_nor_24_itm <= NOT(and_dcpl_247 OR and_dcpl_278 OR and_dcpl_280 OR
      and_dcpl_281 OR and_dcpl_284 OR and_dcpl_285 OR and_dcpl_286);
  COMP_LOOP_tmp_or_31_itm <= and_dcpl_280 OR and_dcpl_281 OR and_dcpl_284;
  COMP_LOOP_tmp_nor_25_itm <= NOT(and_dcpl_247 OR and_dcpl_285 OR and_dcpl_286);
  COMP_LOOP_tmp_or_35_itm <= and_dcpl_278 OR and_dcpl_280 OR and_dcpl_281 OR and_dcpl_284;
  COMP_LOOP_tmp_or_37_itm <= and_dcpl_285 OR and_dcpl_286;
  COMP_LOOP_or_9_itm <= and_437_cse OR and_441_cse OR and_443_cse OR and_446_cse
      OR and_452_cse OR and_455_cse OR and_459_cse;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((and_dcpl_29 AND and_dcpl_26) OR STAGE_LOOP_i_3_0_sva_mx0c1) = '1' )
          THEN
        STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "1010"), z_out_5,
            STAGE_LOOP_i_3_0_sva_mx0c1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(nor_nl, and_531_nl, fsm_output(5))) = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_vec_rsc_triosy_0_7_obj_ld_cse <= '0';
        reg_ensig_cgo_cse <= '0';
        COMP_LOOP_3_tmp_mul_idiv_sva_1_0 <= STD_LOGIC_VECTOR'( "00");
      ELSE
        reg_vec_rsc_triosy_0_7_obj_ld_cse <= and_dcpl_117 AND (fsm_output(6)) AND
            (NOT (fsm_output(0))) AND (NOT (fsm_output(1))) AND (fsm_output(7)) AND
            (fsm_output(5)) AND (NOT (z_out_2(4)));
        reg_ensig_cgo_cse <= NOT mux_496_itm;
        COMP_LOOP_3_tmp_mul_idiv_sva_1_0 <= z_out_4(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        VEC_LOOP_j_10_0_sva_9_0 <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (VEC_LOOP_j_10_0_sva_9_0_mx0c0 OR (and_dcpl_71 AND and_dcpl_88)) =
          '1' ) THEN
        VEC_LOOP_j_10_0_sva_9_0 <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"),
            (z_out_3(9 DOWNTO 0)), VEC_LOOP_j_not_1_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(nor_194_nl, and_264_nl, fsm_output(5))) = '1' ) THEN
        STAGE_LOOP_lshift_psp_sva <= z_out;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(or_743_nl, nand_155_nl, fsm_output(7))) = '1' ) THEN
        COMP_LOOP_k_10_3_sva_6_0 <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), reg_COMP_LOOP_k_10_3_ftd,
            nand_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_1_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( or_dcpl_52 = '0' ) THEN
        COMP_LOOP_acc_10_cse_10_1_1_sva <= COMP_LOOP_1_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_52 = '0' ) THEN
        COMP_LOOP_acc_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0(9
            DOWNTO 3)) + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0), 7));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_5_tmp_mul_idiv_sva <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( or_dcpl_52 = '0' ) THEN
        COMP_LOOP_5_tmp_mul_idiv_sva <= z_out_4(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_52 = '0' ) THEN
        COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm <= z_out_3(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_52 = '0' ) THEN
        COMP_LOOP_1_tmp_acc_cse_sva <= z_out_5;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_86_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_145_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_30_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_60_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_32_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_33_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_34_itm <= '0';
        COMP_LOOP_COMP_LOOP_nor_4_itm <= '0';
      ELSIF ( mux_529_itm = '1' ) THEN
        COMP_LOOP_COMP_LOOP_and_86_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_4_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_COMP_LOOP_and_145_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_6_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_COMP_LOOP_and_30_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_COMP_LOOP_and_60_itm <= (COMP_LOOP_acc_11_psp_sva_1(1)) AND (VEC_LOOP_j_10_0_sva_9_0(0))
            AND (NOT (COMP_LOOP_acc_11_psp_sva_1(0)));
        COMP_LOOP_COMP_LOOP_and_32_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
        COMP_LOOP_COMP_LOOP_and_33_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_COMP_LOOP_and_34_itm <= CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
        COMP_LOOP_COMP_LOOP_nor_4_itm <= NOT(CONV_SL_1_1(COMP_LOOP_acc_1_cse_2_sva_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_1_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_11_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_12_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_13_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_69_itm <= '0';
      ELSIF ( COMP_LOOP_or_14_cse = '1' ) THEN
        COMP_LOOP_COMP_LOOP_nor_1_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_nor_1_nl,
            COMP_LOOP_COMP_LOOP_nor_9_nl, and_dcpl_42);
        COMP_LOOP_COMP_LOOP_and_11_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_11_nl,
            COMP_LOOP_COMP_LOOP_and_65_nl, and_dcpl_42);
        COMP_LOOP_COMP_LOOP_and_12_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_12_nl,
            COMP_LOOP_COMP_LOOP_and_67_nl, and_dcpl_42);
        COMP_LOOP_COMP_LOOP_and_13_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_13_nl,
            COMP_LOOP_COMP_LOOP_and_68_nl, and_dcpl_42);
        COMP_LOOP_COMP_LOOP_and_69_itm <= MUX_s_1_2_2(COMP_LOOP_COMP_LOOP_and_9_nl,
            COMP_LOOP_COMP_LOOP_and_69_nl, and_dcpl_42);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_1_cse_6_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(mux_tmp_523, and_140_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_1_cse_6_sva <= COMP_LOOP_acc_1_cse_6_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_1_cse_4_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(mux_536_nl AND (NOT (fsm_output(7))))) = '1' ) THEN
        COMP_LOOP_acc_1_cse_4_sva <= COMP_LOOP_acc_1_cse_4_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_11_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (mux_540_nl OR (fsm_output(7))) = '1' ) THEN
        COMP_LOOP_acc_11_psp_sva <= COMP_LOOP_acc_11_psp_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_1_cse_2_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(mux_541_nl AND nor_441_cse)) = '1' ) THEN
        COMP_LOOP_acc_1_cse_2_sva <= COMP_LOOP_acc_1_cse_2_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_2_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(mux_542_nl AND nor_441_cse)) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_2_sva <= COMP_LOOP_2_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((or_tmp_617 OR or_dcpl_53) AND nor_441_cse)) = '1' ) THEN
        COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm <= COMP_LOOP_3_acc_nl(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_5_itm <= '0';
      ELSIF ( and_dcpl_138 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_nor_5_itm <= NOT(CONV_SL_1_1(COMP_LOOP_2_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_37_itm <= '0';
      ELSIF ( and_dcpl_138 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_37_itm <= CONV_SL_1_1(COMP_LOOP_2_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_39_itm <= '0';
      ELSIF ( and_dcpl_138 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_39_itm <= CONV_SL_1_1(COMP_LOOP_2_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_40_itm <= '0';
      ELSIF ( and_dcpl_138 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_40_itm <= CONV_SL_1_1(COMP_LOOP_2_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_41_itm <= '0';
      ELSIF ( and_dcpl_138 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_41_itm <= CONV_SL_1_1(COMP_LOOP_2_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_3_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (mux_545_nl OR (fsm_output(7))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_3_sva <= COMP_LOOP_3_acc_10_nl(10 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_547_nl OR (fsm_output(7))) = '1' ) THEN
        COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm <= COMP_LOOP_acc_12_nl(8);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_4_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(mux_548_nl AND (NOT (fsm_output(7))))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_4_sva <= COMP_LOOP_4_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(mux_549_nl AND (NOT (fsm_output(7))))) = '1' ) THEN
        COMP_LOOP_5_slc_COMP_LOOP_acc_10_itm <= COMP_LOOP_5_acc_nl(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_13_itm <= '0';
      ELSIF ( and_dcpl_143 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_nor_13_itm <= NOT(CONV_SL_1_1(COMP_LOOP_4_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_93_itm <= '0';
      ELSIF ( and_dcpl_143 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_93_itm <= CONV_SL_1_1(COMP_LOOP_4_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_95_itm <= '0';
      ELSIF ( and_dcpl_143 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_95_itm <= CONV_SL_1_1(COMP_LOOP_4_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_96_itm <= '0';
      ELSIF ( and_dcpl_143 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_96_itm <= CONV_SL_1_1(COMP_LOOP_4_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_97_itm <= '0';
      ELSIF ( and_dcpl_143 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_97_itm <= CONV_SL_1_1(COMP_LOOP_4_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_13_psp_sva <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( (MUX_s_1_2_2(mux_552_nl, (fsm_output(7)), fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_13_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0(9
            DOWNTO 2)) + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & '1'), 8));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_5_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(mux_554_nl, (fsm_output(7)), fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_5_sva <= COMP_LOOP_5_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_557_nl, (fsm_output(7)), fsm_output(5))) = '1' ) THEN
        COMP_LOOP_6_slc_COMP_LOOP_acc_10_itm <= COMP_LOOP_6_acc_nl(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_17_itm <= '0';
      ELSIF ( and_dcpl_144 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_nor_17_itm <= NOT(CONV_SL_1_1(COMP_LOOP_5_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_121_itm <= '0';
      ELSIF ( and_dcpl_144 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_121_itm <= CONV_SL_1_1(COMP_LOOP_5_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_123_itm <= '0';
      ELSIF ( and_dcpl_144 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_123_itm <= CONV_SL_1_1(COMP_LOOP_5_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_124_itm <= '0';
      ELSIF ( and_dcpl_144 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_124_itm <= CONV_SL_1_1(COMP_LOOP_5_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_and_125_itm <= '0';
      ELSIF ( and_dcpl_144 = '0' ) THEN
        COMP_LOOP_COMP_LOOP_and_125_itm <= CONV_SL_1_1(COMP_LOOP_5_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_6_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(mux_tmp_523, and_155_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_6_sva <= COMP_LOOP_6_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_tmp_523, and_156_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_7_slc_COMP_LOOP_acc_10_itm <= COMP_LOOP_7_acc_nl(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_21_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_149_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_151_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_152_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_153_itm <= '0';
      ELSIF ( mux_564_itm = '1' ) THEN
        COMP_LOOP_COMP_LOOP_nor_21_itm <= NOT(CONV_SL_1_1(COMP_LOOP_6_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
        COMP_LOOP_COMP_LOOP_and_149_itm <= CONV_SL_1_1(COMP_LOOP_6_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_COMP_LOOP_and_151_itm <= CONV_SL_1_1(COMP_LOOP_6_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
        COMP_LOOP_COMP_LOOP_and_152_itm <= CONV_SL_1_1(COMP_LOOP_6_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_COMP_LOOP_and_153_itm <= CONV_SL_1_1(COMP_LOOP_6_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_14_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (MUX_s_1_2_2(mux_566_nl, nor_tmp_29, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_14_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0(9
            DOWNTO 1)) + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "11")),
            9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_7_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(mux_569_nl, nor_tmp_29, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_7_sva <= COMP_LOOP_7_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( mux_573_itm = '1' ) THEN
        COMP_LOOP_slc_COMP_LOOP_acc_15_7_itm <= COMP_LOOP_acc_15_nl(7);
        reg_COMP_LOOP_k_10_3_ftd <= z_out_2(6 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_25_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_177_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_179_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_180_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_181_itm <= '0';
      ELSIF ( mux_575_itm = '1' ) THEN
        COMP_LOOP_COMP_LOOP_nor_25_itm <= NOT(CONV_SL_1_1(COMP_LOOP_7_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
        COMP_LOOP_COMP_LOOP_and_177_itm <= CONV_SL_1_1(COMP_LOOP_7_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_COMP_LOOP_and_179_itm <= CONV_SL_1_1(COMP_LOOP_7_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
        COMP_LOOP_COMP_LOOP_and_180_itm <= CONV_SL_1_1(COMP_LOOP_7_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_COMP_LOOP_and_181_itm <= CONV_SL_1_1(COMP_LOOP_7_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_1_cse_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(not_tmp_329, and_158_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_1_cse_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0)
            + UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'( "111")), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_10_1_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(not_tmp_329, and_215_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_acc_10_cse_10_1_sva <= COMP_LOOP_8_acc_10_itm_10_1_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(not_tmp_329, and_159_nl, fsm_output(5))) = '1' ) THEN
        COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm <= COMP_LOOP_1_acc_nl(10);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_COMP_LOOP_nor_29_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_205_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_207_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_208_itm <= '0';
        COMP_LOOP_COMP_LOOP_and_209_itm <= '0';
      ELSIF ( mux_580_itm = '1' ) THEN
        COMP_LOOP_COMP_LOOP_nor_29_itm <= NOT(CONV_SL_1_1(COMP_LOOP_8_acc_10_itm_10_1_1(2
            DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
        COMP_LOOP_COMP_LOOP_and_205_itm <= CONV_SL_1_1(COMP_LOOP_8_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_COMP_LOOP_and_207_itm <= CONV_SL_1_1(COMP_LOOP_8_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
        COMP_LOOP_COMP_LOOP_and_208_itm <= CONV_SL_1_1(COMP_LOOP_8_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_COMP_LOOP_and_209_itm <= CONV_SL_1_1(COMP_LOOP_8_acc_10_itm_10_1_1(2
            DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_2_tmp_mul_idiv_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (and_dcpl_42 OR and_dcpl_96 OR and_dcpl_97) = '1' ) THEN
        COMP_LOOP_2_tmp_mul_idiv_sva <= z_out_4(9 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_dcpl_51 OR CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
          OR or_dcpl_46)) = '1' ) THEN
        tmp_16_sva <= twiddle_rsc_0_0_i_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_2_tmp_lshift_ncse_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (and_dcpl_42 OR and_dcpl_101) = '1' ) THEN
        COMP_LOOP_2_tmp_lshift_ncse_sva <= MUX_v_10_2_2(z_out_1, (z_out_4(9 DOWNTO
            0)), and_dcpl_101);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (and_dcpl_42 OR and_dcpl_95 OR and_dcpl_148 OR COMP_LOOP_1_acc_8_itm_mx0c3
          OR COMP_LOOP_1_acc_8_itm_mx0c4 OR and_dcpl_48 OR and_dcpl_120 OR COMP_LOOP_1_acc_8_itm_mx0c7
          OR and_dcpl_53 OR and_dcpl_121 OR COMP_LOOP_1_acc_8_itm_mx0c10 OR and_dcpl_56
          OR and_dcpl_122 OR COMP_LOOP_1_acc_8_itm_mx0c13 OR and_dcpl_59 OR and_dcpl_123
          OR COMP_LOOP_1_acc_8_itm_mx0c16 OR and_dcpl_66 OR and_dcpl_124 OR COMP_LOOP_1_acc_8_itm_mx0c19
          OR and_dcpl_69 OR and_dcpl_125 OR COMP_LOOP_1_acc_8_itm_mx0c22 OR and_dcpl_74
          OR and_dcpl_126 OR COMP_LOOP_1_acc_8_itm_mx0c25) = '1' ) THEN
        COMP_LOOP_1_acc_8_itm <= MUX1HOT_v_64_12_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
            vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, vec_rsc_0_4_i_q_d, vec_rsc_0_5_i_q_d,
            vec_rsc_0_6_i_q_d, vec_rsc_0_7_i_q_d, STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_acc_17_nl),
            64)), twiddle_rsc_0_5_i_q_d, z_out_4, COMP_LOOP_1_modulo_cmp_return_rsc_z,
            STD_LOGIC_VECTOR'( COMP_LOOP_or_nl & COMP_LOOP_or_1_nl & COMP_LOOP_or_2_nl
            & COMP_LOOP_or_3_nl & COMP_LOOP_or_4_nl & COMP_LOOP_or_5_nl & COMP_LOOP_or_6_nl
            & COMP_LOOP_or_7_nl & COMP_LOOP_or_12_nl & and_dcpl_148 & COMP_LOOP_or_13_nl
            & COMP_LOOP_1_acc_8_itm_mx0c4));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm <= '0';
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm <= '0';
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm <= '0';
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm <= '0';
        COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm <= '0';
      ELSIF ( COMP_LOOP_tmp_or_2_cse = '1' ) THEN
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
        COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm <= CONV_SL_1_1(z_out_4(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
        COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm <= NOT(CONV_SL_1_1(z_out_4(2 DOWNTO
            0)/=STD_LOGIC_VECTOR'("000")));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_3_tmp_lshift_ncse_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( COMP_LOOP_tmp_or_7_cse = '1' ) THEN
        COMP_LOOP_3_tmp_lshift_ncse_sva <= MUX_v_9_2_2((z_out_1(8 DOWNTO 0)), (z_out_4(8
            DOWNTO 0)), and_dcpl_98);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT mux_608_nl) AND nor_441_cse)) = '1' ) THEN
        COMP_LOOP_tmp_mux1h_itm <= COMP_LOOP_tmp_mux1h_itm_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_614_nl OR (fsm_output(7))) = '1' ) THEN
        COMP_LOOP_tmp_mux1h_1_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_2_i_q_d,
            twiddle_rsc_0_4_i_q_d, twiddle_rsc_0_6_i_q_d, STD_LOGIC_VECTOR'( and_184_nl
            & and_187_nl & and_190_nl & and_193_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(mux_617_nl AND (NOT (fsm_output(7))))) = '1' ) THEN
        COMP_LOOP_tmp_mux1h_2_itm <= COMP_LOOP_tmp_mux1h_itm_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_619_nl, (fsm_output(7)), fsm_output(5))) = '1' ) THEN
        COMP_LOOP_tmp_mux_itm <= MUX_v_64_2_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_4_i_q_d,
            and_202_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT((NOT COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm) OR COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm
          OR and_dcpl_148 OR and_dcpl_101)) OR mux_623_nl)) = '1' ) THEN
        tmp_21_sva_3 <= MUX1HOT_v_64_9_2(twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_6_i_q_d,
            twiddle_rsc_0_0_i_q_d, tmp_23_sva_1, tmp_23_sva_2, twiddle_rsc_0_4_i_q_d,
            COMP_LOOP_1_acc_8_itm, tmp_21_sva_6, tmp_21_sva_7, STD_LOGIC_VECTOR'(
            and_dcpl_148 & and_dcpl_101 & COMP_LOOP_tmp_and_11_nl & COMP_LOOP_tmp_and_12_nl
            & COMP_LOOP_tmp_and_13_nl & COMP_LOOP_tmp_and_14_nl & COMP_LOOP_tmp_and_15_nl
            & COMP_LOOP_tmp_and_16_nl & COMP_LOOP_tmp_and_17_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm = '1' ) THEN
        tmp_21_sva_6 <= twiddle_rsc_0_6_i_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm = '1' ) THEN
        tmp_21_sva_7 <= twiddle_rsc_0_7_i_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT((NOT(COMP_LOOP_tmp_COMP_LOOP_tmp_and_35 OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_37))
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm
          OR COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm OR and_dcpl_98)) OR mux_626_nl))
          = '1' ) THEN
        COMP_LOOP_tmp_mux1h_3_itm <= MUX1HOT_v_64_8_2(twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_2_i_q_d,
            twiddle_rsc_0_0_i_q_d, tmp_21_sva_3, twiddle_rsc_0_4_i_q_d, COMP_LOOP_1_acc_8_itm,
            tmp_21_sva_6, tmp_21_sva_7, STD_LOGIC_VECTOR'( COMP_LOOP_tmp_and_18_nl
            & COMP_LOOP_tmp_and_19_nl & COMP_LOOP_tmp_and_5_nl & COMP_LOOP_tmp_and_6_nl
            & COMP_LOOP_tmp_and_7_nl & COMP_LOOP_tmp_and_8_nl & COMP_LOOP_tmp_and_9_nl
            & COMP_LOOP_tmp_and_10_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse OR (CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1
          DOWNTO 0)=STD_LOGIC_VECTOR'("10"))) OR (CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1
          DOWNTO 0)=STD_LOGIC_VECTOR'("11"))) OR and_dcpl_101) AND mux_630_nl) =
          '1' ) THEN
        COMP_LOOP_tmp_mux1h_4_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_0_i_q_d,
            twiddle_rsc_0_4_i_q_d, tmp_21_sva_3, STD_LOGIC_VECTOR'( and_dcpl_101
            & COMP_LOOP_tmp_and_nl & COMP_LOOP_tmp_and_2_nl & COMP_LOOP_tmp_and_3_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("001")))
          = '1' ) THEN
        tmp_23_sva_1 <= twiddle_rsc_0_1_i_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (CONV_SL_1_1(COMP_LOOP_2_tmp_lshift_ncse_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("010")))
          = '1' ) THEN
        tmp_23_sva_2 <= twiddle_rsc_0_2_i_q_d;
      END IF;
    END IF;
  END PROCESS;
  nor_nl <= NOT((fsm_output(7)) OR (fsm_output(1)) OR (fsm_output(0)) OR (fsm_output(6))
      OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4)));
  and_531_nl <= (fsm_output(7)) AND nor_tmp_64;
  VEC_LOOP_j_not_1_nl <= NOT VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  nor_194_nl <= NOT((fsm_output(7)) OR (fsm_output(1)) OR (fsm_output(6)) OR (fsm_output(2))
      OR (fsm_output(3)) OR (fsm_output(4)));
  and_264_nl <= (fsm_output(7)) AND (fsm_output(6)) AND (fsm_output(2)) AND (fsm_output(4))
      AND (fsm_output(3));
  nor_438_nl <= NOT((fsm_output(7)) OR (fsm_output(1)) OR (fsm_output(6)) OR (fsm_output(4))
      OR (fsm_output(3)));
  and_262_nl <= (fsm_output(7)) AND (fsm_output(1)) AND (fsm_output(6)) AND (fsm_output(4))
      AND (fsm_output(3));
  mux_196_nl <= MUX_s_1_2_2(nor_438_nl, and_262_nl, fsm_output(5));
  nand_nl <= NOT(mux_196_nl AND (NOT (fsm_output(2))) AND (fsm_output(0)));
  or_742_nl <= (fsm_output(5)) OR (NOT (fsm_output(1)));
  mux_632_nl <= MUX_s_1_2_2(or_742_nl, (fsm_output(5)), fsm_output(2));
  or_743_nl <= (fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(4)) OR mux_632_nl;
  nand_154_nl <= NOT((fsm_output(5)) AND (NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11")))));
  mux_nl <= MUX_s_1_2_2(nand_154_nl, (fsm_output(5)), fsm_output(2));
  mux_631_nl <= MUX_s_1_2_2((fsm_output(5)), (NOT mux_nl), and_532_cse);
  nand_155_nl <= NOT((fsm_output(6)) AND mux_631_nl);
  COMP_LOOP_COMP_LOOP_nor_1_nl <= NOT(CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
  COMP_LOOP_COMP_LOOP_nor_9_nl <= NOT(CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")));
  COMP_LOOP_COMP_LOOP_and_11_nl <= CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("101"));
  COMP_LOOP_COMP_LOOP_and_65_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("011"));
  COMP_LOOP_COMP_LOOP_and_12_nl <= CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("110"));
  COMP_LOOP_COMP_LOOP_and_67_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("101"));
  COMP_LOOP_COMP_LOOP_and_13_nl <= CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("111"));
  COMP_LOOP_COMP_LOOP_and_68_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("110"));
  COMP_LOOP_COMP_LOOP_and_9_nl <= CONV_SL_1_1(COMP_LOOP_1_acc_10_itm_10_1_1(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("011"));
  COMP_LOOP_COMP_LOOP_and_69_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
  and_140_nl <= (fsm_output(7)) AND mux_tmp_522;
  mux_536_nl <= MUX_s_1_2_2(or_tmp_616, (NOT nor_tmp_64), fsm_output(5));
  mux_539_nl <= MUX_s_1_2_2(and_dcpl_29, mux_tmp_527, fsm_output(1));
  mux_540_nl <= MUX_s_1_2_2(mux_539_nl, (fsm_output(6)), fsm_output(5));
  nand_151_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 0)=STD_LOGIC_VECTOR'("11111")));
  mux_541_nl <= MUX_s_1_2_2(or_tmp_621, nand_151_nl, fsm_output(5));
  nand_35_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 1)=STD_LOGIC_VECTOR'("1111")));
  mux_542_nl <= MUX_s_1_2_2(or_tmp_621, nand_35_nl, fsm_output(5));
  COMP_LOOP_3_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 1)))) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0
      & STD_LOGIC_VECTOR'( "010")), 10), 11) + SIGNED'( "00000000001"), 11));
  COMP_LOOP_3_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_10_0_sva_9_0),
      10), 11) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0 &
      STD_LOGIC_VECTOR'( "010")), 10), 11) + UNSIGNED(STAGE_LOOP_lshift_psp_sva),
      11));
  mux_543_nl <= MUX_s_1_2_2(and_dcpl_29, mux_tmp_526, fsm_output(0));
  mux_544_nl <= MUX_s_1_2_2(mux_543_nl, mux_tmp_527, fsm_output(1));
  mux_545_nl <= MUX_s_1_2_2(mux_544_nl, (fsm_output(6)), fsm_output(5));
  COMP_LOOP_acc_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 3)))) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0
      & '0'), 8), 9) + UNSIGNED'( "000000001"), 9));
  mux_546_nl <= MUX_s_1_2_2(and_dcpl_29, and_dcpl_35, and_263_cse);
  mux_547_nl <= MUX_s_1_2_2(mux_546_nl, (fsm_output(6)), fsm_output(5));
  mux_548_nl <= MUX_s_1_2_2(or_tmp_616, (NOT and_dcpl_35), fsm_output(5));
  COMP_LOOP_5_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 1)))) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0
      & STD_LOGIC_VECTOR'( "100")), 10), 11) + SIGNED'( "00000000001"), 11));
  nand_34_nl <= NOT((fsm_output(1)) AND (fsm_output(6)) AND (fsm_output(2)) AND (fsm_output(3))
      AND (fsm_output(4)));
  mux_549_nl <= MUX_s_1_2_2(or_tmp_616, nand_34_nl, fsm_output(5));
  mux_552_nl <= MUX_s_1_2_2((NOT or_tmp_616), or_tmp_620, fsm_output(7));
  mux_554_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_tmp_522, fsm_output(7));
  COMP_LOOP_6_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 1)))) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0
      & STD_LOGIC_VECTOR'( "101")), 10), 11) + SIGNED'( "00000000001"), 11));
  mux_556_nl <= MUX_s_1_2_2((fsm_output(6)), or_tmp_620, or_731_cse);
  mux_557_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_556_nl, fsm_output(7));
  mux_559_nl <= MUX_s_1_2_2(or_tmp_620, or_tmp_25, fsm_output(1));
  and_155_nl <= (fsm_output(7)) AND mux_559_nl;
  COMP_LOOP_7_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 1)))) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0
      & STD_LOGIC_VECTOR'( "110")), 10), 11) + SIGNED'( "00000000001"), 11));
  and_156_nl <= (fsm_output(7)) AND or_tmp_620;
  mux_566_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_tmp_554, fsm_output(7));
  mux_569_nl <= MUX_s_1_2_2((NOT or_tmp_616), mux_tmp_557, fsm_output(7));
  COMP_LOOP_acc_15_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10
      DOWNTO 4)))) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_10_3_sva_6_0),
      7), 8) + UNSIGNED'( "00000001"), 8));
  and_158_nl <= (fsm_output(7)) AND mux_tmp_557;
  and_215_nl <= (fsm_output(7)) AND (fsm_output(6)) AND (fsm_output(3)) AND (fsm_output(4));
  COMP_LOOP_1_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out_2 & STD_LOGIC_VECTOR'(
      "000")) + SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10 DOWNTO 1)))) + SIGNED'(
      "00000000001"), 11));
  and_159_nl <= (fsm_output(7)) AND mux_tmp_554;
  COMP_LOOP_COMP_LOOP_mux_8_nl <= MUX_v_64_2_2(COMP_LOOP_1_acc_8_itm, z_out_8, COMP_LOOP_or_9_itm);
  COMP_LOOP_acc_17_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_mux_95_cse)
      + UNSIGNED(COMP_LOOP_COMP_LOOP_mux_8_nl), 64));
  COMP_LOOP_or_nl <= (COMP_LOOP_COMP_LOOP_nor_1_itm AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_nor_4_itm
      AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_34_itm AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_33_itm
      AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_32_itm AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_60_itm
      AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_30_itm AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_145_itm
      AND and_dcpl_74);
  COMP_LOOP_or_1_nl <= (CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("001"))
      AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_86_itm AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_nor_4_itm
      AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_34_itm AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_33_itm
      AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_32_itm AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_60_itm
      AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_30_itm AND and_dcpl_74);
  COMP_LOOP_or_2_nl <= (CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("010"))
      AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_145_itm AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_86_itm
      AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_nor_4_itm AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_34_itm
      AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_33_itm AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_32_itm
      AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_60_itm AND and_dcpl_74);
  COMP_LOOP_or_3_nl <= (COMP_LOOP_COMP_LOOP_and_69_itm AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_30_itm
      AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_145_itm AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_86_itm
      AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_nor_4_itm AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_34_itm
      AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_33_itm AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_32_itm
      AND and_dcpl_74);
  COMP_LOOP_or_4_nl <= (CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_1_sva(2 DOWNTO 0)=STD_LOGIC_VECTOR'("100"))
      AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_60_itm AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_30_itm
      AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_145_itm AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_86_itm
      AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_nor_4_itm AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_34_itm
      AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_33_itm AND and_dcpl_74);
  COMP_LOOP_or_5_nl <= (COMP_LOOP_COMP_LOOP_and_11_itm AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_32_itm
      AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_60_itm AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_30_itm
      AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_145_itm AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_86_itm
      AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_nor_4_itm AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_34_itm
      AND and_dcpl_74);
  COMP_LOOP_or_6_nl <= (COMP_LOOP_COMP_LOOP_and_12_itm AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_33_itm
      AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_32_itm AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_60_itm
      AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_30_itm AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_145_itm
      AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_86_itm AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_nor_4_itm
      AND and_dcpl_74);
  COMP_LOOP_or_7_nl <= (COMP_LOOP_COMP_LOOP_and_13_itm AND and_dcpl_42) OR (COMP_LOOP_COMP_LOOP_and_34_itm
      AND and_dcpl_48) OR (COMP_LOOP_COMP_LOOP_and_33_itm AND and_dcpl_53) OR (COMP_LOOP_COMP_LOOP_and_32_itm
      AND and_dcpl_56) OR (COMP_LOOP_COMP_LOOP_and_60_itm AND and_dcpl_59) OR (COMP_LOOP_COMP_LOOP_and_30_itm
      AND and_dcpl_66) OR (COMP_LOOP_COMP_LOOP_and_145_itm AND and_dcpl_69) OR (COMP_LOOP_COMP_LOOP_and_86_itm
      AND and_dcpl_74);
  COMP_LOOP_or_12_nl <= and_dcpl_95 OR and_dcpl_120 OR and_dcpl_121 OR and_dcpl_122
      OR and_dcpl_123 OR and_dcpl_124 OR and_dcpl_125 OR and_dcpl_126;
  COMP_LOOP_or_13_nl <= COMP_LOOP_1_acc_8_itm_mx0c3 OR COMP_LOOP_1_acc_8_itm_mx0c7
      OR COMP_LOOP_1_acc_8_itm_mx0c10 OR COMP_LOOP_1_acc_8_itm_mx0c13 OR COMP_LOOP_1_acc_8_itm_mx0c16
      OR COMP_LOOP_1_acc_8_itm_mx0c19 OR COMP_LOOP_1_acc_8_itm_mx0c22 OR COMP_LOOP_1_acc_8_itm_mx0c25;
  nor_477_nl <= NOT((or_731_cse AND (fsm_output(2))) OR CONV_SL_1_1(fsm_output(4
      DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  mux_608_nl <= MUX_s_1_2_2(nor_477_nl, (fsm_output(4)), fsm_output(5));
  and_184_nl <= and_dcpl_168 AND and_dcpl_165 AND CONV_SL_1_1(COMP_LOOP_3_tmp_mul_idiv_sva_1_0=STD_LOGIC_VECTOR'("00"));
  and_187_nl <= and_dcpl_168 AND and_dcpl_165 AND CONV_SL_1_1(COMP_LOOP_3_tmp_mul_idiv_sva_1_0=STD_LOGIC_VECTOR'("01"));
  and_190_nl <= and_dcpl_168 AND and_dcpl_165 AND CONV_SL_1_1(COMP_LOOP_3_tmp_mul_idiv_sva_1_0=STD_LOGIC_VECTOR'("10"));
  and_193_nl <= and_dcpl_168 AND and_dcpl_165 AND CONV_SL_1_1(COMP_LOOP_3_tmp_mul_idiv_sva_1_0=STD_LOGIC_VECTOR'("11"));
  mux_612_nl <= MUX_s_1_2_2(and_dcpl_28, (fsm_output(4)), fsm_output(6));
  mux_610_nl <= MUX_s_1_2_2((NOT or_tmp_617), (fsm_output(4)), fsm_output(6));
  mux_609_nl <= MUX_s_1_2_2((NOT or_tmp_617), or_tmp_649, fsm_output(6));
  mux_611_nl <= MUX_s_1_2_2(mux_610_nl, mux_609_nl, fsm_output(0));
  mux_613_nl <= MUX_s_1_2_2(mux_612_nl, mux_611_nl, fsm_output(1));
  mux_614_nl <= MUX_s_1_2_2(mux_613_nl, (fsm_output(6)), fsm_output(5));
  mux_616_nl <= MUX_s_1_2_2(or_tmp_38, or_dcpl_51, and_263_cse);
  and_210_nl <= (fsm_output(6)) AND (fsm_output(4));
  mux_615_nl <= MUX_s_1_2_2(and_210_nl, and_tmp_15, fsm_output(1));
  mux_617_nl <= MUX_s_1_2_2(mux_616_nl, (NOT mux_615_nl), fsm_output(5));
  and_202_nl <= and_dcpl_167 AND (NOT (fsm_output(6))) AND (COMP_LOOP_5_tmp_mul_idiv_sva(0))
      AND and_dcpl_41;
  or_734_nl <= (fsm_output(6)) OR (fsm_output(4));
  mux_618_nl <= MUX_s_1_2_2(or_734_nl, or_tmp_651, or_731_cse);
  mux_619_nl <= MUX_s_1_2_2((NOT or_tmp_38), mux_618_nl, fsm_output(7));
  COMP_LOOP_tmp_and_11_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm AND and_203_m1c;
  COMP_LOOP_tmp_and_12_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_27_rgt AND and_203_m1c;
  COMP_LOOP_tmp_and_13_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_28_rgt AND and_203_m1c;
  COMP_LOOP_tmp_and_14_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_30_rgt AND and_203_m1c;
  COMP_LOOP_tmp_and_15_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm AND and_203_m1c;
  COMP_LOOP_tmp_and_16_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm AND and_203_m1c;
  COMP_LOOP_tmp_and_17_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm AND and_203_m1c;
  mux_622_nl <= MUX_s_1_2_2(or_tmp_651, or_tmp_38, and_263_cse);
  or_725_nl <= (fsm_output(7)) OR mux_622_nl;
  mux_621_nl <= MUX_s_1_2_2(and_tmp_15, and_tmp_16, fsm_output(1));
  nand_31_nl <= NOT((fsm_output(7)) AND mux_621_nl);
  mux_623_nl <= MUX_s_1_2_2(or_725_nl, nand_31_nl, fsm_output(5));
  COMP_LOOP_tmp_and_18_nl <= (NOT (COMP_LOOP_2_tmp_mul_idiv_sva(1))) AND and_dcpl_98;
  COMP_LOOP_tmp_and_19_nl <= (COMP_LOOP_2_tmp_mul_idiv_sva(1)) AND and_dcpl_98;
  COMP_LOOP_tmp_and_5_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_nor_2_itm AND and_dcpl_101;
  COMP_LOOP_tmp_and_6_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_12_itm AND and_dcpl_101;
  COMP_LOOP_tmp_and_7_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_39 AND and_dcpl_101;
  COMP_LOOP_tmp_and_8_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_14_itm AND and_dcpl_101;
  COMP_LOOP_tmp_and_9_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_15_itm AND and_dcpl_101;
  COMP_LOOP_tmp_and_10_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_and_16_itm AND and_dcpl_101;
  mux_624_nl <= MUX_s_1_2_2(or_tmp_651, or_tmp_38, or_731_cse);
  mux_625_nl <= MUX_s_1_2_2(mux_624_nl, (NOT (fsm_output(6))), fsm_output(7));
  nand_30_nl <= NOT((fsm_output(7)) AND or_tmp_651);
  mux_626_nl <= MUX_s_1_2_2(mux_625_nl, nand_30_nl, fsm_output(5));
  COMP_LOOP_tmp_and_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_nor_6_cse AND and_dcpl_102;
  COMP_LOOP_tmp_and_2_nl <= CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1 DOWNTO
      0)=STD_LOGIC_VECTOR'("10")) AND and_dcpl_102;
  COMP_LOOP_tmp_and_3_nl <= CONV_SL_1_1(COMP_LOOP_3_tmp_lshift_ncse_sva(1 DOWNTO
      0)=STD_LOGIC_VECTOR'("11")) AND and_dcpl_102;
  mux_628_nl <= MUX_s_1_2_2(or_tmp_651, or_tmp_38, fsm_output(1));
  mux_627_nl <= MUX_s_1_2_2(and_tmp_15, and_tmp_16, and_263_cse);
  mux_629_nl <= MUX_s_1_2_2((NOT mux_628_nl), mux_627_nl, fsm_output(7));
  mux_630_nl <= MUX_s_1_2_2(mux_629_nl, nor_tmp_29, fsm_output(5));
  and_533_nl <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("11111100"));
  COMP_LOOP_mux_92_nl <= MUX_v_7_2_2(COMP_LOOP_k_10_3_sva_6_0, (STD_LOGIC_VECTOR'(
      "001") & (NOT z_out_5)), and_533_nl);
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_mux_92_nl),
      8) + UNSIGNED'( "00000001"), 8));
  COMP_LOOP_mux_93_nl <= MUX_v_11_2_2(('1' & (NOT (STAGE_LOOP_lshift_psp_sva(10 DOWNTO
      1)))), STAGE_LOOP_lshift_psp_sva, and_dcpl_240);
  COMP_LOOP_COMP_LOOP_nand_1_nl <= NOT(and_dcpl_240 AND (NOT(and_dcpl_28 AND nor_474_cse
      AND (NOT (fsm_output(7))) AND (fsm_output(1)) AND and_dcpl_241)));
  COMP_LOOP_mux_94_nl <= MUX_v_10_2_2((COMP_LOOP_k_10_3_sva_6_0 & STD_LOGIC_VECTOR'(
      "001")), VEC_LOOP_j_10_0_sva_9_0, and_dcpl_240);
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_mux_93_nl & COMP_LOOP_COMP_LOOP_nand_1_nl)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_mux_94_nl & '1'), 11), 12),
      12));
  z_out_3 <= acc_1_nl(11 DOWNTO 1);
  COMP_LOOP_tmp_mux1h_52_nl <= MUX1HOT_v_54_8_2((tmp_16_sva(63 DOWNTO 10)), (COMP_LOOP_tmp_mux1h_itm(63
      DOWNTO 10)), (COMP_LOOP_tmp_mux1h_1_itm(63 DOWNTO 10)), (COMP_LOOP_tmp_mux1h_2_itm(63
      DOWNTO 10)), (COMP_LOOP_tmp_mux_itm(63 DOWNTO 10)), (COMP_LOOP_tmp_mux1h_3_itm(63
      DOWNTO 10)), (COMP_LOOP_tmp_mux1h_4_itm(63 DOWNTO 10)), (tmp_21_sva_3(63 DOWNTO
      10)), STD_LOGIC_VECTOR'( and_dcpl_253 & and_dcpl_256 & and_dcpl_261 & and_dcpl_263
      & and_dcpl_268 & and_dcpl_270 & and_dcpl_275 & and_dcpl_277));
  COMP_LOOP_tmp_and_28_nl <= MUX_v_54_2_2(STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000"),
      COMP_LOOP_tmp_mux1h_52_nl, COMP_LOOP_tmp_nor_24_itm);
  COMP_LOOP_tmp_mux1h_53_nl <= MUX1HOT_s_1_10_2((tmp_16_sva(9)), (COMP_LOOP_tmp_mux1h_itm(9)),
      (COMP_LOOP_tmp_mux1h_1_itm(9)), (COMP_LOOP_tmp_mux1h_2_itm(9)), (COMP_LOOP_tmp_mux_itm(9)),
      (COMP_LOOP_tmp_mux1h_3_itm(9)), (COMP_LOOP_tmp_mux1h_4_itm(9)), (tmp_21_sva_3(9)),
      (z_out_1(9)), (COMP_LOOP_2_tmp_lshift_ncse_sva(9)), STD_LOGIC_VECTOR'( and_dcpl_253
      & and_dcpl_256 & and_dcpl_261 & and_dcpl_263 & and_dcpl_268 & and_dcpl_270
      & and_dcpl_275 & and_dcpl_277 & and_dcpl_278 & COMP_LOOP_tmp_or_31_itm));
  COMP_LOOP_tmp_and_29_nl <= COMP_LOOP_tmp_mux1h_53_nl AND COMP_LOOP_tmp_nor_25_itm;
  COMP_LOOP_tmp_or_40_nl <= and_dcpl_278 OR and_dcpl_285;
  COMP_LOOP_tmp_mux1h_54_nl <= MUX1HOT_v_9_12_2(('0' & (z_out(7 DOWNTO 0))), (tmp_16_sva(8
      DOWNTO 0)), (COMP_LOOP_tmp_mux1h_itm(8 DOWNTO 0)), (COMP_LOOP_tmp_mux1h_1_itm(8
      DOWNTO 0)), (COMP_LOOP_tmp_mux1h_2_itm(8 DOWNTO 0)), (COMP_LOOP_tmp_mux_itm(8
      DOWNTO 0)), (COMP_LOOP_tmp_mux1h_3_itm(8 DOWNTO 0)), (COMP_LOOP_tmp_mux1h_4_itm(8
      DOWNTO 0)), (tmp_21_sva_3(8 DOWNTO 0)), (z_out_1(8 DOWNTO 0)), (COMP_LOOP_2_tmp_lshift_ncse_sva(8
      DOWNTO 0)), COMP_LOOP_3_tmp_lshift_ncse_sva, STD_LOGIC_VECTOR'( and_dcpl_247
      & and_dcpl_253 & and_dcpl_256 & and_dcpl_261 & and_dcpl_263 & and_dcpl_268
      & and_dcpl_270 & and_dcpl_275 & and_dcpl_277 & COMP_LOOP_tmp_or_40_nl & COMP_LOOP_tmp_or_31_itm
      & and_dcpl_286));
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(63))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(62))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(61))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(60))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(59))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(58))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(57))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(56))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(55))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(54))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(53))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(52))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(51))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(50))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(49))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(48))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(47))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(46))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(45))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(44))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(43))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(42))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(41))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(40))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(39))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(38))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(37))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(36))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(35))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(34))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(33))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(32))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(31))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(30))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(29))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(28))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(27))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(26))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(25))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(24))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(23))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(22))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(21))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(20))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(19))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(18))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(17))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(16))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(15))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(14))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(13))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(12))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(11))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(10))
      AND COMP_LOOP_tmp_nor_24_itm;
  COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl <= MUX_s_1_2_2((COMP_LOOP_1_modulo_cmp_return_rsc_z(9)),
      (COMP_LOOP_k_10_3_sva_6_0(6)), COMP_LOOP_tmp_or_35_itm);
  COMP_LOOP_tmp_and_30_nl <= COMP_LOOP_tmp_COMP_LOOP_tmp_mux_12_nl AND COMP_LOOP_tmp_nor_25_itm;
  COMP_LOOP_tmp_mux1h_55_nl <= MUX1HOT_v_6_4_2(('0' & (COMP_LOOP_k_10_3_sva_6_0(6
      DOWNTO 2))), (COMP_LOOP_1_modulo_cmp_return_rsc_z(8 DOWNTO 3)), (COMP_LOOP_k_10_3_sva_6_0(5
      DOWNTO 0)), (COMP_LOOP_k_10_3_sva_6_0(6 DOWNTO 1)), STD_LOGIC_VECTOR'( and_dcpl_247
      & COMP_LOOP_tmp_or_15_ssc & COMP_LOOP_tmp_or_35_itm & COMP_LOOP_tmp_or_37_itm));
  COMP_LOOP_tmp_mux1h_56_nl <= MUX1HOT_s_1_3_2((COMP_LOOP_k_10_3_sva_6_0(1)), (COMP_LOOP_1_modulo_cmp_return_rsc_z(2)),
      (COMP_LOOP_k_10_3_sva_6_0(0)), STD_LOGIC_VECTOR'( and_dcpl_247 & COMP_LOOP_tmp_or_15_ssc
      & COMP_LOOP_tmp_or_37_itm));
  COMP_LOOP_tmp_or_41_nl <= (COMP_LOOP_tmp_mux1h_56_nl AND (NOT(and_dcpl_278 OR and_dcpl_280)))
      OR and_dcpl_281 OR and_dcpl_284;
  COMP_LOOP_tmp_mux_8_nl <= MUX_s_1_2_2((COMP_LOOP_k_10_3_sva_6_0(0)), (COMP_LOOP_1_modulo_cmp_return_rsc_z(1)),
      COMP_LOOP_tmp_or_15_ssc);
  COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl <= (COMP_LOOP_tmp_mux_8_nl AND (NOT(and_dcpl_278
      OR and_dcpl_281 OR and_dcpl_285))) OR and_dcpl_280 OR and_dcpl_284 OR and_dcpl_286;
  COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl <= (COMP_LOOP_1_modulo_cmp_return_rsc_z(0))
      OR and_dcpl_247 OR and_dcpl_278 OR and_dcpl_280 OR and_dcpl_281 OR and_dcpl_284
      OR and_dcpl_285 OR and_dcpl_286;
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(COMP_LOOP_tmp_and_28_nl
      & COMP_LOOP_tmp_and_29_nl & COMP_LOOP_tmp_mux1h_54_nl) * UNSIGNED(COMP_LOOP_tmp_COMP_LOOP_tmp_and_93_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_94_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_95_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_96_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_97_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_98_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_99_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_100_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_101_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_102_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_103_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_104_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_105_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_106_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_107_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_108_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_109_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_110_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_111_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_112_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_113_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_114_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_115_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_116_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_117_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_118_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_119_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_120_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_121_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_122_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_123_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_124_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_125_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_126_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_127_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_128_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_129_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_130_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_131_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_132_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_133_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_134_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_135_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_136_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_137_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_138_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_139_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_140_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_141_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_142_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_143_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_144_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_and_145_nl
      & COMP_LOOP_tmp_COMP_LOOP_tmp_and_146_nl & COMP_LOOP_tmp_and_30_nl & COMP_LOOP_tmp_mux1h_55_nl
      & COMP_LOOP_tmp_or_41_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl & COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl)),
      64));
  STAGE_LOOP_mux_4_nl <= MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, (NOT STAGE_LOOP_i_3_0_sva),
      and_dcpl_300);
  z_out_5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STAGE_LOOP_mux_4_nl) + UNSIGNED('1'
      & (NOT and_dcpl_300) & STD_LOGIC_VECTOR'( "11")), 4));
  COMP_LOOP_mux_95_cse <= MUX_v_64_2_2(z_out_8, COMP_LOOP_1_acc_8_itm, COMP_LOOP_or_9_itm);
  COMP_LOOP_mux1h_178_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_86_itm, COMP_LOOP_COMP_LOOP_nor_5_itm,
      COMP_LOOP_COMP_LOOP_nor_1_itm, COMP_LOOP_COMP_LOOP_nor_13_itm, COMP_LOOP_COMP_LOOP_nor_17_itm,
      COMP_LOOP_COMP_LOOP_nor_21_itm, COMP_LOOP_COMP_LOOP_nor_25_itm, COMP_LOOP_COMP_LOOP_nor_29_itm,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_COMP_LOOP_and_210_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_211_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_212_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_213_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_214_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_215_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_COMP_LOOP_and_216_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("001"));
  COMP_LOOP_mux1h_179_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_145_itm, COMP_LOOP_COMP_LOOP_and_210_nl,
      COMP_LOOP_COMP_LOOP_and_211_nl, COMP_LOOP_COMP_LOOP_and_212_nl, COMP_LOOP_COMP_LOOP_and_213_nl,
      COMP_LOOP_COMP_LOOP_and_214_nl, COMP_LOOP_COMP_LOOP_and_215_nl, COMP_LOOP_COMP_LOOP_and_216_nl,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_COMP_LOOP_and_217_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_218_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_219_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_220_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_221_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_222_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_COMP_LOOP_and_223_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("010"));
  COMP_LOOP_mux1h_180_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_30_itm, COMP_LOOP_COMP_LOOP_and_217_nl,
      COMP_LOOP_COMP_LOOP_and_218_nl, COMP_LOOP_COMP_LOOP_and_219_nl, COMP_LOOP_COMP_LOOP_and_220_nl,
      COMP_LOOP_COMP_LOOP_and_221_nl, COMP_LOOP_COMP_LOOP_and_222_nl, COMP_LOOP_COMP_LOOP_and_223_nl,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_mux1h_181_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_60_itm, COMP_LOOP_COMP_LOOP_and_37_itm,
      COMP_LOOP_COMP_LOOP_and_11_itm, COMP_LOOP_COMP_LOOP_and_93_itm, COMP_LOOP_COMP_LOOP_and_121_itm,
      COMP_LOOP_COMP_LOOP_and_149_itm, COMP_LOOP_COMP_LOOP_and_177_itm, COMP_LOOP_COMP_LOOP_and_205_itm,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_COMP_LOOP_and_224_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_2_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_225_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_3_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_226_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_4_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_227_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_5_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_228_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_6_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_229_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_7_sva(2
      DOWNTO 0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_COMP_LOOP_and_230_nl <= CONV_SL_1_1(COMP_LOOP_acc_10_cse_10_1_sva(2 DOWNTO
      0)=STD_LOGIC_VECTOR'("100"));
  COMP_LOOP_mux1h_182_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_32_itm, COMP_LOOP_COMP_LOOP_and_224_nl,
      COMP_LOOP_COMP_LOOP_and_225_nl, COMP_LOOP_COMP_LOOP_and_226_nl, COMP_LOOP_COMP_LOOP_and_227_nl,
      COMP_LOOP_COMP_LOOP_and_228_nl, COMP_LOOP_COMP_LOOP_and_229_nl, COMP_LOOP_COMP_LOOP_and_230_nl,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_mux1h_183_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_33_itm, COMP_LOOP_COMP_LOOP_and_39_itm,
      COMP_LOOP_COMP_LOOP_and_12_itm, COMP_LOOP_COMP_LOOP_and_95_itm, COMP_LOOP_COMP_LOOP_and_123_itm,
      COMP_LOOP_COMP_LOOP_and_151_itm, COMP_LOOP_COMP_LOOP_and_179_itm, COMP_LOOP_COMP_LOOP_and_207_itm,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_mux1h_184_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_and_34_itm, COMP_LOOP_COMP_LOOP_and_40_itm,
      COMP_LOOP_COMP_LOOP_and_13_itm, COMP_LOOP_COMP_LOOP_and_96_itm, COMP_LOOP_COMP_LOOP_and_124_itm,
      COMP_LOOP_COMP_LOOP_and_152_itm, COMP_LOOP_COMP_LOOP_and_180_itm, COMP_LOOP_COMP_LOOP_and_208_itm,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  COMP_LOOP_mux1h_185_nl <= MUX1HOT_s_1_8_2(COMP_LOOP_COMP_LOOP_nor_4_itm, COMP_LOOP_COMP_LOOP_and_41_itm,
      COMP_LOOP_COMP_LOOP_and_69_itm, COMP_LOOP_COMP_LOOP_and_97_itm, COMP_LOOP_COMP_LOOP_and_125_itm,
      COMP_LOOP_COMP_LOOP_and_153_itm, COMP_LOOP_COMP_LOOP_and_181_itm, COMP_LOOP_COMP_LOOP_and_209_itm,
      STD_LOGIC_VECTOR'( and_dcpl_377 & and_437_cse & and_441_cse & and_443_cse &
      and_446_cse & and_452_cse & and_455_cse & and_459_cse));
  z_out_8 <= MUX1HOT_v_64_8_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d,
      vec_rsc_0_3_i_q_d, vec_rsc_0_4_i_q_d, vec_rsc_0_5_i_q_d, vec_rsc_0_6_i_q_d,
      vec_rsc_0_7_i_q_d, STD_LOGIC_VECTOR'( COMP_LOOP_mux1h_178_nl & COMP_LOOP_mux1h_179_nl
      & COMP_LOOP_mux1h_180_nl & COMP_LOOP_mux1h_181_nl & COMP_LOOP_mux1h_182_nl
      & COMP_LOOP_mux1h_183_nl & COMP_LOOP_mux1h_184_nl & COMP_LOOP_mux1h_185_nl));
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIF
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIF IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_0_0_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_0_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_we : OUT STD_LOGIC;
    vec_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    vec_rsc_0_1_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_1_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_1_we : OUT STD_LOGIC;
    vec_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    vec_rsc_0_2_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_2_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_2_we : OUT STD_LOGIC;
    vec_rsc_0_2_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_2_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    vec_rsc_0_3_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_3_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_3_we : OUT STD_LOGIC;
    vec_rsc_0_3_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_3_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    vec_rsc_0_4_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_4_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_4_we : OUT STD_LOGIC;
    vec_rsc_0_4_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_4_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_4_lz : OUT STD_LOGIC;
    vec_rsc_0_5_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_5_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_5_we : OUT STD_LOGIC;
    vec_rsc_0_5_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_5_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_5_lz : OUT STD_LOGIC;
    vec_rsc_0_6_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_6_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_6_we : OUT STD_LOGIC;
    vec_rsc_0_6_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_6_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_6_lz : OUT STD_LOGIC;
    vec_rsc_0_7_wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_7_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_7_we : OUT STD_LOGIC;
    vec_rsc_0_7_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    vec_rsc_0_7_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_7_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    r_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    twiddle_rsc_0_2_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_2_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    twiddle_rsc_0_3_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_3_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    twiddle_rsc_0_4_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_4_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_4_lz : OUT STD_LOGIC;
    twiddle_rsc_0_5_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_5_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_5_lz : OUT STD_LOGIC;
    twiddle_rsc_0_6_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_6_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_6_lz : OUT STD_LOGIC;
    twiddle_rsc_0_7_radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    twiddle_rsc_0_7_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_7_lz : OUT STD_LOGIC
  );
END inPlaceNTT_DIF;

ARCHITECTURE v6 OF inPlaceNTT_DIF IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL vec_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_4_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_5_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_6_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_7_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_4_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_4_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_5_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_6_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_7_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_0_i_d_d_iff : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_radr_d_iff : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_wadr_d_iff : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_1_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_2_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_3_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_4_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_5_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_6_i_we_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_7_i_we_d_iff : STD_LOGIC;
  SIGNAL twiddle_rsc_0_1_i_radr_d_iff : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_radr_d_iff : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_2_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_2_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_3_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_3_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_4_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_4_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_5_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_5_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_6_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_6_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_7_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_wadr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL vec_rsc_0_7_i_wadr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr_d_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_2_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_3_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_4_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_4_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_4_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_4_i_radr_d_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_5_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_5_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_5_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_5_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_6_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_6_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_6_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_6_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_7_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_7_i_radr : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL twiddle_rsc_0_7_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_7_i_radr_d : STD_LOGIC_VECTOR (6 DOWNTO 0);

  COMPONENT inPlaceNTT_DIF_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_2_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_3_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_4_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_5_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_6_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_7_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      r_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_4_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_5_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_6_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_7_lz : OUT STD_LOGIC;
      vec_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_4_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_5_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_6_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_7_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_0_i_radr_d : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_4_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_4_i_radr_d : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_5_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_6_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_7_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      vec_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      vec_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_4_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_5_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_6_i_we_d_pff : OUT STD_LOGIC;
      vec_rsc_0_7_i_we_d_pff : OUT STD_LOGIC;
      twiddle_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      twiddle_rsc_0_2_i_radr_d_pff : OUT STD_LOGIC_VECTOR (6 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL inPlaceNTT_DIF_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_4_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_5_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_6_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_7_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (6
      DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_radr_d : STD_LOGIC_VECTOR (6
      DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_5_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_6_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_7_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_d_d_pff : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_radr_d_pff : STD_LOGIC_VECTOR (6
      DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_wadr_d_pff : STD_LOGIC_VECTOR (6
      DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_radr_d_pff : STD_LOGIC_VECTOR
      (6 DOWNTO 0);
  SIGNAL inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_radr_d_pff : STD_LOGIC_VECTOR
      (6 DOWNTO 0);

BEGIN
  vec_rsc_0_0_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_0_i_q,
      radr => vec_rsc_0_0_i_radr,
      we => vec_rsc_0_0_we,
      d => vec_rsc_0_0_i_d,
      wadr => vec_rsc_0_0_i_wadr,
      d_d => vec_rsc_0_0_i_d_d,
      q_d => vec_rsc_0_0_i_q_d_1,
      radr_d => vec_rsc_0_0_i_radr_d,
      wadr_d => vec_rsc_0_0_i_wadr_d,
      we_d => vec_rsc_0_0_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_0_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_0_i_q <= vec_rsc_0_0_q;
  vec_rsc_0_0_radr <= vec_rsc_0_0_i_radr;
  vec_rsc_0_0_d <= vec_rsc_0_0_i_d;
  vec_rsc_0_0_wadr <= vec_rsc_0_0_i_wadr;
  vec_rsc_0_0_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_0_i_q_d <= vec_rsc_0_0_i_q_d_1;
  vec_rsc_0_0_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_0_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_1_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_1_i_q,
      radr => vec_rsc_0_1_i_radr,
      we => vec_rsc_0_1_we,
      d => vec_rsc_0_1_i_d,
      wadr => vec_rsc_0_1_i_wadr,
      d_d => vec_rsc_0_1_i_d_d,
      q_d => vec_rsc_0_1_i_q_d_1,
      radr_d => vec_rsc_0_1_i_radr_d,
      wadr_d => vec_rsc_0_1_i_wadr_d,
      we_d => vec_rsc_0_1_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_1_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_1_i_q <= vec_rsc_0_1_q;
  vec_rsc_0_1_radr <= vec_rsc_0_1_i_radr;
  vec_rsc_0_1_d <= vec_rsc_0_1_i_d;
  vec_rsc_0_1_wadr <= vec_rsc_0_1_i_wadr;
  vec_rsc_0_1_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_1_i_q_d <= vec_rsc_0_1_i_q_d_1;
  vec_rsc_0_1_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_1_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_2_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_2_i_q,
      radr => vec_rsc_0_2_i_radr,
      we => vec_rsc_0_2_we,
      d => vec_rsc_0_2_i_d,
      wadr => vec_rsc_0_2_i_wadr,
      d_d => vec_rsc_0_2_i_d_d,
      q_d => vec_rsc_0_2_i_q_d_1,
      radr_d => vec_rsc_0_2_i_radr_d,
      wadr_d => vec_rsc_0_2_i_wadr_d,
      we_d => vec_rsc_0_2_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_2_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_2_i_q <= vec_rsc_0_2_q;
  vec_rsc_0_2_radr <= vec_rsc_0_2_i_radr;
  vec_rsc_0_2_d <= vec_rsc_0_2_i_d;
  vec_rsc_0_2_wadr <= vec_rsc_0_2_i_wadr;
  vec_rsc_0_2_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_2_i_q_d <= vec_rsc_0_2_i_q_d_1;
  vec_rsc_0_2_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_2_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_3_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_3_i_q,
      radr => vec_rsc_0_3_i_radr,
      we => vec_rsc_0_3_we,
      d => vec_rsc_0_3_i_d,
      wadr => vec_rsc_0_3_i_wadr,
      d_d => vec_rsc_0_3_i_d_d,
      q_d => vec_rsc_0_3_i_q_d_1,
      radr_d => vec_rsc_0_3_i_radr_d,
      wadr_d => vec_rsc_0_3_i_wadr_d,
      we_d => vec_rsc_0_3_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_3_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_3_i_q <= vec_rsc_0_3_q;
  vec_rsc_0_3_radr <= vec_rsc_0_3_i_radr;
  vec_rsc_0_3_d <= vec_rsc_0_3_i_d;
  vec_rsc_0_3_wadr <= vec_rsc_0_3_i_wadr;
  vec_rsc_0_3_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_3_i_q_d <= vec_rsc_0_3_i_q_d_1;
  vec_rsc_0_3_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_3_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_4_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_4_i_q,
      radr => vec_rsc_0_4_i_radr,
      we => vec_rsc_0_4_we,
      d => vec_rsc_0_4_i_d,
      wadr => vec_rsc_0_4_i_wadr,
      d_d => vec_rsc_0_4_i_d_d,
      q_d => vec_rsc_0_4_i_q_d_1,
      radr_d => vec_rsc_0_4_i_radr_d,
      wadr_d => vec_rsc_0_4_i_wadr_d,
      we_d => vec_rsc_0_4_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_4_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_4_i_q <= vec_rsc_0_4_q;
  vec_rsc_0_4_radr <= vec_rsc_0_4_i_radr;
  vec_rsc_0_4_d <= vec_rsc_0_4_i_d;
  vec_rsc_0_4_wadr <= vec_rsc_0_4_i_wadr;
  vec_rsc_0_4_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_4_i_q_d <= vec_rsc_0_4_i_q_d_1;
  vec_rsc_0_4_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_4_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_5_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_5_i_q,
      radr => vec_rsc_0_5_i_radr,
      we => vec_rsc_0_5_we,
      d => vec_rsc_0_5_i_d,
      wadr => vec_rsc_0_5_i_wadr,
      d_d => vec_rsc_0_5_i_d_d,
      q_d => vec_rsc_0_5_i_q_d_1,
      radr_d => vec_rsc_0_5_i_radr_d,
      wadr_d => vec_rsc_0_5_i_wadr_d,
      we_d => vec_rsc_0_5_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_5_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_5_i_q <= vec_rsc_0_5_q;
  vec_rsc_0_5_radr <= vec_rsc_0_5_i_radr;
  vec_rsc_0_5_d <= vec_rsc_0_5_i_d;
  vec_rsc_0_5_wadr <= vec_rsc_0_5_i_wadr;
  vec_rsc_0_5_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_5_i_q_d <= vec_rsc_0_5_i_q_d_1;
  vec_rsc_0_5_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_5_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_6_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_6_i_q,
      radr => vec_rsc_0_6_i_radr,
      we => vec_rsc_0_6_we,
      d => vec_rsc_0_6_i_d,
      wadr => vec_rsc_0_6_i_wadr,
      d_d => vec_rsc_0_6_i_d_d,
      q_d => vec_rsc_0_6_i_q_d_1,
      radr_d => vec_rsc_0_6_i_radr_d,
      wadr_d => vec_rsc_0_6_i_wadr_d,
      we_d => vec_rsc_0_6_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_6_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_6_i_q <= vec_rsc_0_6_q;
  vec_rsc_0_6_radr <= vec_rsc_0_6_i_radr;
  vec_rsc_0_6_d <= vec_rsc_0_6_i_d;
  vec_rsc_0_6_wadr <= vec_rsc_0_6_i_wadr;
  vec_rsc_0_6_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_6_i_q_d <= vec_rsc_0_6_i_q_d_1;
  vec_rsc_0_6_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_6_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  vec_rsc_0_7_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_7_64_128_128_64_1_gen
    PORT MAP(
      q => vec_rsc_0_7_i_q,
      radr => vec_rsc_0_7_i_radr,
      we => vec_rsc_0_7_we,
      d => vec_rsc_0_7_i_d,
      wadr => vec_rsc_0_7_i_wadr,
      d_d => vec_rsc_0_7_i_d_d,
      q_d => vec_rsc_0_7_i_q_d_1,
      radr_d => vec_rsc_0_7_i_radr_d,
      wadr_d => vec_rsc_0_7_i_wadr_d,
      we_d => vec_rsc_0_7_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => vec_rsc_0_7_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsc_0_7_i_q <= vec_rsc_0_7_q;
  vec_rsc_0_7_radr <= vec_rsc_0_7_i_radr;
  vec_rsc_0_7_d <= vec_rsc_0_7_i_d;
  vec_rsc_0_7_wadr <= vec_rsc_0_7_i_wadr;
  vec_rsc_0_7_i_d_d <= vec_rsc_0_0_i_d_d_iff;
  vec_rsc_0_7_i_q_d <= vec_rsc_0_7_i_q_d_1;
  vec_rsc_0_7_i_radr_d <= vec_rsc_0_0_i_radr_d_iff;
  vec_rsc_0_7_i_wadr_d <= vec_rsc_0_0_i_wadr_d_iff;

  twiddle_rsc_0_0_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_17_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_0_i_q,
      radr => twiddle_rsc_0_0_i_radr,
      q_d => twiddle_rsc_0_0_i_q_d_1,
      radr_d => twiddle_rsc_0_0_i_radr_d_1,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_0_i_q <= twiddle_rsc_0_0_q;
  twiddle_rsc_0_0_radr <= twiddle_rsc_0_0_i_radr;
  twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d_1;
  twiddle_rsc_0_0_i_radr_d_1 <= twiddle_rsc_0_0_i_radr_d;

  twiddle_rsc_0_1_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_1_i_q,
      radr => twiddle_rsc_0_1_i_radr,
      q_d => twiddle_rsc_0_1_i_q_d_1,
      radr_d => twiddle_rsc_0_1_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_1_i_q <= twiddle_rsc_0_1_q;
  twiddle_rsc_0_1_radr <= twiddle_rsc_0_1_i_radr;
  twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d_1;
  twiddle_rsc_0_1_i_radr_d <= twiddle_rsc_0_1_i_radr_d_iff;

  twiddle_rsc_0_2_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_2_i_q,
      radr => twiddle_rsc_0_2_i_radr,
      q_d => twiddle_rsc_0_2_i_q_d_1,
      radr_d => twiddle_rsc_0_2_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_2_i_q <= twiddle_rsc_0_2_q;
  twiddle_rsc_0_2_radr <= twiddle_rsc_0_2_i_radr;
  twiddle_rsc_0_2_i_q_d <= twiddle_rsc_0_2_i_q_d_1;
  twiddle_rsc_0_2_i_radr_d <= twiddle_rsc_0_2_i_radr_d_iff;

  twiddle_rsc_0_3_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_3_i_q,
      radr => twiddle_rsc_0_3_i_radr,
      q_d => twiddle_rsc_0_3_i_q_d_1,
      radr_d => twiddle_rsc_0_3_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_3_i_q <= twiddle_rsc_0_3_q;
  twiddle_rsc_0_3_radr <= twiddle_rsc_0_3_i_radr;
  twiddle_rsc_0_3_i_q_d <= twiddle_rsc_0_3_i_q_d_1;
  twiddle_rsc_0_3_i_radr_d <= twiddle_rsc_0_1_i_radr_d_iff;

  twiddle_rsc_0_4_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_4_i_q,
      radr => twiddle_rsc_0_4_i_radr,
      q_d => twiddle_rsc_0_4_i_q_d_1,
      radr_d => twiddle_rsc_0_4_i_radr_d_1,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_4_i_q <= twiddle_rsc_0_4_q;
  twiddle_rsc_0_4_radr <= twiddle_rsc_0_4_i_radr;
  twiddle_rsc_0_4_i_q_d <= twiddle_rsc_0_4_i_q_d_1;
  twiddle_rsc_0_4_i_radr_d_1 <= twiddle_rsc_0_4_i_radr_d;

  twiddle_rsc_0_5_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_22_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_5_i_q,
      radr => twiddle_rsc_0_5_i_radr,
      q_d => twiddle_rsc_0_5_i_q_d_1,
      radr_d => twiddle_rsc_0_5_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_5_i_q <= twiddle_rsc_0_5_q;
  twiddle_rsc_0_5_radr <= twiddle_rsc_0_5_i_radr;
  twiddle_rsc_0_5_i_q_d <= twiddle_rsc_0_5_i_q_d_1;
  twiddle_rsc_0_5_i_radr_d <= twiddle_rsc_0_1_i_radr_d_iff;

  twiddle_rsc_0_6_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_23_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_6_i_q,
      radr => twiddle_rsc_0_6_i_radr,
      q_d => twiddle_rsc_0_6_i_q_d_1,
      radr_d => twiddle_rsc_0_6_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_6_i_q <= twiddle_rsc_0_6_q;
  twiddle_rsc_0_6_radr <= twiddle_rsc_0_6_i_radr;
  twiddle_rsc_0_6_i_q_d <= twiddle_rsc_0_6_i_q_d_1;
  twiddle_rsc_0_6_i_radr_d <= twiddle_rsc_0_2_i_radr_d_iff;

  twiddle_rsc_0_7_i : inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_24_7_64_128_128_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_7_i_q,
      radr => twiddle_rsc_0_7_i_radr,
      q_d => twiddle_rsc_0_7_i_q_d_1,
      radr_d => twiddle_rsc_0_7_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_7_i_q <= twiddle_rsc_0_7_q;
  twiddle_rsc_0_7_radr <= twiddle_rsc_0_7_i_radr;
  twiddle_rsc_0_7_i_q_d <= twiddle_rsc_0_7_i_q_d_1;
  twiddle_rsc_0_7_i_radr_d <= twiddle_rsc_0_1_i_radr_d_iff;

  inPlaceNTT_DIF_core_inst : inPlaceNTT_DIF_core
    PORT MAP(
      clk => clk,
      rst => rst,
      vec_rsc_triosy_0_0_lz => vec_rsc_triosy_0_0_lz,
      vec_rsc_triosy_0_1_lz => vec_rsc_triosy_0_1_lz,
      vec_rsc_triosy_0_2_lz => vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz => vec_rsc_triosy_0_3_lz,
      vec_rsc_triosy_0_4_lz => vec_rsc_triosy_0_4_lz,
      vec_rsc_triosy_0_5_lz => vec_rsc_triosy_0_5_lz,
      vec_rsc_triosy_0_6_lz => vec_rsc_triosy_0_6_lz,
      vec_rsc_triosy_0_7_lz => vec_rsc_triosy_0_7_lz,
      p_rsc_dat => inPlaceNTT_DIF_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      r_rsc_triosy_lz => r_rsc_triosy_lz,
      twiddle_rsc_triosy_0_0_lz => twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_triosy_0_1_lz => twiddle_rsc_triosy_0_1_lz,
      twiddle_rsc_triosy_0_2_lz => twiddle_rsc_triosy_0_2_lz,
      twiddle_rsc_triosy_0_3_lz => twiddle_rsc_triosy_0_3_lz,
      twiddle_rsc_triosy_0_4_lz => twiddle_rsc_triosy_0_4_lz,
      twiddle_rsc_triosy_0_5_lz => twiddle_rsc_triosy_0_5_lz,
      twiddle_rsc_triosy_0_6_lz => twiddle_rsc_triosy_0_6_lz,
      twiddle_rsc_triosy_0_7_lz => twiddle_rsc_triosy_0_7_lz,
      vec_rsc_0_0_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_q_d,
      vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_1_i_q_d,
      vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_2_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_2_i_q_d,
      vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_3_i_q_d,
      vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_4_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_4_i_q_d,
      vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_5_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_5_i_q_d,
      vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_6_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_6_i_q_d,
      vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_7_i_q_d => inPlaceNTT_DIF_core_inst_vec_rsc_0_7_i_q_d,
      vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d => vec_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_0_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_0_i_radr_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_radr_d,
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_2_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_q_d,
      twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_3_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_3_i_q_d,
      twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_4_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_q_d,
      twiddle_rsc_0_4_i_radr_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_radr_d,
      twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_4_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_5_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_5_i_q_d,
      twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_5_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_6_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_6_i_q_d,
      twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_6_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_7_i_q_d => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_7_i_q_d,
      twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_7_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_0_i_d_d_pff => inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_d_d_pff,
      vec_rsc_0_0_i_radr_d_pff => inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_radr_d_pff,
      vec_rsc_0_0_i_wadr_d_pff => inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_wadr_d_pff,
      vec_rsc_0_0_i_we_d_pff => vec_rsc_0_0_i_we_d_iff,
      vec_rsc_0_1_i_we_d_pff => vec_rsc_0_1_i_we_d_iff,
      vec_rsc_0_2_i_we_d_pff => vec_rsc_0_2_i_we_d_iff,
      vec_rsc_0_3_i_we_d_pff => vec_rsc_0_3_i_we_d_iff,
      vec_rsc_0_4_i_we_d_pff => vec_rsc_0_4_i_we_d_iff,
      vec_rsc_0_5_i_we_d_pff => vec_rsc_0_5_i_we_d_iff,
      vec_rsc_0_6_i_we_d_pff => vec_rsc_0_6_i_we_d_iff,
      vec_rsc_0_7_i_we_d_pff => vec_rsc_0_7_i_we_d_iff,
      twiddle_rsc_0_1_i_radr_d_pff => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_radr_d_pff,
      twiddle_rsc_0_2_i_radr_d_pff => inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_radr_d_pff
    );
  inPlaceNTT_DIF_core_inst_p_rsc_dat <= p_rsc_dat;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_q_d <= vec_rsc_0_0_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_1_i_q_d <= vec_rsc_0_1_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_2_i_q_d <= vec_rsc_0_2_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_3_i_q_d <= vec_rsc_0_3_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_4_i_q_d <= vec_rsc_0_4_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_5_i_q_d <= vec_rsc_0_5_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_6_i_q_d <= vec_rsc_0_6_i_q_d;
  inPlaceNTT_DIF_core_inst_vec_rsc_0_7_i_q_d <= vec_rsc_0_7_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d;
  twiddle_rsc_0_0_i_radr_d <= inPlaceNTT_DIF_core_inst_twiddle_rsc_0_0_i_radr_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_q_d <= twiddle_rsc_0_2_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_3_i_q_d <= twiddle_rsc_0_3_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_q_d <= twiddle_rsc_0_4_i_q_d;
  twiddle_rsc_0_4_i_radr_d <= inPlaceNTT_DIF_core_inst_twiddle_rsc_0_4_i_radr_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_5_i_q_d <= twiddle_rsc_0_5_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_6_i_q_d <= twiddle_rsc_0_6_i_q_d;
  inPlaceNTT_DIF_core_inst_twiddle_rsc_0_7_i_q_d <= twiddle_rsc_0_7_i_q_d;
  vec_rsc_0_0_i_d_d_iff <= inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_d_d_pff;
  vec_rsc_0_0_i_radr_d_iff <= inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_radr_d_pff;
  vec_rsc_0_0_i_wadr_d_iff <= inPlaceNTT_DIF_core_inst_vec_rsc_0_0_i_wadr_d_pff;
  twiddle_rsc_0_1_i_radr_d_iff <= inPlaceNTT_DIF_core_inst_twiddle_rsc_0_1_i_radr_d_pff;
  twiddle_rsc_0_2_i_radr_d_iff <= inPlaceNTT_DIF_core_inst_twiddle_rsc_0_2_i_radr_d_pff;

END v6;



