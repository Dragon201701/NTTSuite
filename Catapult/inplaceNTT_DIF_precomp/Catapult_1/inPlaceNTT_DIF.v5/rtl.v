// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Mon Aug  2 17:02:58 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_16_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_16_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_13_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_13_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, COMP_LOOP_C_31_tr0, COMP_LOOP_C_62_tr0, COMP_LOOP_C_93_tr0,
      COMP_LOOP_C_124_tr0, VEC_LOOP_C_0_tr0, STAGE_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input COMP_LOOP_C_31_tr0;
  input COMP_LOOP_C_62_tr0;
  input COMP_LOOP_C_93_tr0;
  input COMP_LOOP_C_124_tr0;
  input VEC_LOOP_C_0_tr0;
  input STAGE_LOOP_C_1_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_LOOP_C_0 = 8'd1,
    COMP_LOOP_C_0 = 8'd2,
    COMP_LOOP_C_1 = 8'd3,
    COMP_LOOP_C_2 = 8'd4,
    COMP_LOOP_C_3 = 8'd5,
    COMP_LOOP_C_4 = 8'd6,
    COMP_LOOP_C_5 = 8'd7,
    COMP_LOOP_C_6 = 8'd8,
    COMP_LOOP_C_7 = 8'd9,
    COMP_LOOP_C_8 = 8'd10,
    COMP_LOOP_C_9 = 8'd11,
    COMP_LOOP_C_10 = 8'd12,
    COMP_LOOP_C_11 = 8'd13,
    COMP_LOOP_C_12 = 8'd14,
    COMP_LOOP_C_13 = 8'd15,
    COMP_LOOP_C_14 = 8'd16,
    COMP_LOOP_C_15 = 8'd17,
    COMP_LOOP_C_16 = 8'd18,
    COMP_LOOP_C_17 = 8'd19,
    COMP_LOOP_C_18 = 8'd20,
    COMP_LOOP_C_19 = 8'd21,
    COMP_LOOP_C_20 = 8'd22,
    COMP_LOOP_C_21 = 8'd23,
    COMP_LOOP_C_22 = 8'd24,
    COMP_LOOP_C_23 = 8'd25,
    COMP_LOOP_C_24 = 8'd26,
    COMP_LOOP_C_25 = 8'd27,
    COMP_LOOP_C_26 = 8'd28,
    COMP_LOOP_C_27 = 8'd29,
    COMP_LOOP_C_28 = 8'd30,
    COMP_LOOP_C_29 = 8'd31,
    COMP_LOOP_C_30 = 8'd32,
    COMP_LOOP_C_31 = 8'd33,
    COMP_LOOP_C_32 = 8'd34,
    COMP_LOOP_C_33 = 8'd35,
    COMP_LOOP_C_34 = 8'd36,
    COMP_LOOP_C_35 = 8'd37,
    COMP_LOOP_C_36 = 8'd38,
    COMP_LOOP_C_37 = 8'd39,
    COMP_LOOP_C_38 = 8'd40,
    COMP_LOOP_C_39 = 8'd41,
    COMP_LOOP_C_40 = 8'd42,
    COMP_LOOP_C_41 = 8'd43,
    COMP_LOOP_C_42 = 8'd44,
    COMP_LOOP_C_43 = 8'd45,
    COMP_LOOP_C_44 = 8'd46,
    COMP_LOOP_C_45 = 8'd47,
    COMP_LOOP_C_46 = 8'd48,
    COMP_LOOP_C_47 = 8'd49,
    COMP_LOOP_C_48 = 8'd50,
    COMP_LOOP_C_49 = 8'd51,
    COMP_LOOP_C_50 = 8'd52,
    COMP_LOOP_C_51 = 8'd53,
    COMP_LOOP_C_52 = 8'd54,
    COMP_LOOP_C_53 = 8'd55,
    COMP_LOOP_C_54 = 8'd56,
    COMP_LOOP_C_55 = 8'd57,
    COMP_LOOP_C_56 = 8'd58,
    COMP_LOOP_C_57 = 8'd59,
    COMP_LOOP_C_58 = 8'd60,
    COMP_LOOP_C_59 = 8'd61,
    COMP_LOOP_C_60 = 8'd62,
    COMP_LOOP_C_61 = 8'd63,
    COMP_LOOP_C_62 = 8'd64,
    COMP_LOOP_C_63 = 8'd65,
    COMP_LOOP_C_64 = 8'd66,
    COMP_LOOP_C_65 = 8'd67,
    COMP_LOOP_C_66 = 8'd68,
    COMP_LOOP_C_67 = 8'd69,
    COMP_LOOP_C_68 = 8'd70,
    COMP_LOOP_C_69 = 8'd71,
    COMP_LOOP_C_70 = 8'd72,
    COMP_LOOP_C_71 = 8'd73,
    COMP_LOOP_C_72 = 8'd74,
    COMP_LOOP_C_73 = 8'd75,
    COMP_LOOP_C_74 = 8'd76,
    COMP_LOOP_C_75 = 8'd77,
    COMP_LOOP_C_76 = 8'd78,
    COMP_LOOP_C_77 = 8'd79,
    COMP_LOOP_C_78 = 8'd80,
    COMP_LOOP_C_79 = 8'd81,
    COMP_LOOP_C_80 = 8'd82,
    COMP_LOOP_C_81 = 8'd83,
    COMP_LOOP_C_82 = 8'd84,
    COMP_LOOP_C_83 = 8'd85,
    COMP_LOOP_C_84 = 8'd86,
    COMP_LOOP_C_85 = 8'd87,
    COMP_LOOP_C_86 = 8'd88,
    COMP_LOOP_C_87 = 8'd89,
    COMP_LOOP_C_88 = 8'd90,
    COMP_LOOP_C_89 = 8'd91,
    COMP_LOOP_C_90 = 8'd92,
    COMP_LOOP_C_91 = 8'd93,
    COMP_LOOP_C_92 = 8'd94,
    COMP_LOOP_C_93 = 8'd95,
    COMP_LOOP_C_94 = 8'd96,
    COMP_LOOP_C_95 = 8'd97,
    COMP_LOOP_C_96 = 8'd98,
    COMP_LOOP_C_97 = 8'd99,
    COMP_LOOP_C_98 = 8'd100,
    COMP_LOOP_C_99 = 8'd101,
    COMP_LOOP_C_100 = 8'd102,
    COMP_LOOP_C_101 = 8'd103,
    COMP_LOOP_C_102 = 8'd104,
    COMP_LOOP_C_103 = 8'd105,
    COMP_LOOP_C_104 = 8'd106,
    COMP_LOOP_C_105 = 8'd107,
    COMP_LOOP_C_106 = 8'd108,
    COMP_LOOP_C_107 = 8'd109,
    COMP_LOOP_C_108 = 8'd110,
    COMP_LOOP_C_109 = 8'd111,
    COMP_LOOP_C_110 = 8'd112,
    COMP_LOOP_C_111 = 8'd113,
    COMP_LOOP_C_112 = 8'd114,
    COMP_LOOP_C_113 = 8'd115,
    COMP_LOOP_C_114 = 8'd116,
    COMP_LOOP_C_115 = 8'd117,
    COMP_LOOP_C_116 = 8'd118,
    COMP_LOOP_C_117 = 8'd119,
    COMP_LOOP_C_118 = 8'd120,
    COMP_LOOP_C_119 = 8'd121,
    COMP_LOOP_C_120 = 8'd122,
    COMP_LOOP_C_121 = 8'd123,
    COMP_LOOP_C_122 = 8'd124,
    COMP_LOOP_C_123 = 8'd125,
    COMP_LOOP_C_124 = 8'd126,
    VEC_LOOP_C_0 = 8'd127,
    STAGE_LOOP_C_1 = 8'd128,
    main_C_1 = 8'd129;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = COMP_LOOP_C_0;
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00000010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00000011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00000100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00000101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00000110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00000111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00001000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00001001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00001010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00001011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00001100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00001101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00001110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00001111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00010000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00010001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00010010;
        state_var_NS = COMP_LOOP_C_17;
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00100001;
        if ( COMP_LOOP_C_31_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_32;
        end
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00100010;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b00101110;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01000000;
        if ( COMP_LOOP_C_62_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_63;
        end
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01001011;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_C_91;
      end
      COMP_LOOP_C_91 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_C_92;
      end
      COMP_LOOP_C_92 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_C_93;
      end
      COMP_LOOP_C_93 : begin
        fsm_output = 8'b01011111;
        if ( COMP_LOOP_C_93_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_94;
        end
      end
      COMP_LOOP_C_94 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_C_95;
      end
      COMP_LOOP_C_95 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_C_96;
      end
      COMP_LOOP_C_96 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_C_97;
      end
      COMP_LOOP_C_97 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_C_98;
      end
      COMP_LOOP_C_98 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_C_99;
      end
      COMP_LOOP_C_99 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_C_100;
      end
      COMP_LOOP_C_100 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_C_101;
      end
      COMP_LOOP_C_101 : begin
        fsm_output = 8'b01100111;
        state_var_NS = COMP_LOOP_C_102;
      end
      COMP_LOOP_C_102 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_103;
      end
      COMP_LOOP_C_103 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_104;
      end
      COMP_LOOP_C_104 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_105;
      end
      COMP_LOOP_C_105 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_106;
      end
      COMP_LOOP_C_106 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_107;
      end
      COMP_LOOP_C_107 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_108;
      end
      COMP_LOOP_C_108 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_109;
      end
      COMP_LOOP_C_109 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_110;
      end
      COMP_LOOP_C_110 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_111;
      end
      COMP_LOOP_C_111 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_112;
      end
      COMP_LOOP_C_112 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_113;
      end
      COMP_LOOP_C_113 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_114;
      end
      COMP_LOOP_C_114 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_115;
      end
      COMP_LOOP_C_115 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_116;
      end
      COMP_LOOP_C_116 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_117;
      end
      COMP_LOOP_C_117 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_118;
      end
      COMP_LOOP_C_118 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_119;
      end
      COMP_LOOP_C_119 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_120;
      end
      COMP_LOOP_C_120 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_121;
      end
      COMP_LOOP_C_121 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_122;
      end
      COMP_LOOP_C_122 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_123;
      end
      COMP_LOOP_C_123 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_124;
      end
      COMP_LOOP_C_124 : begin
        fsm_output = 8'b01111110;
        if ( COMP_LOOP_C_124_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      VEC_LOOP_C_0 : begin
        fsm_output = 8'b01111111;
        if ( VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 8'b10000000;
        if ( STAGE_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000001;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_triosy_lz, twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_triosy_0_1_lz, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_triosy_0_3_lz,
      vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_q_d, vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_q_d, vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d, twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_0_i_radr_d, twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_2_i_radr_d, twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_0_i_d_d_pff, vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff,
      vec_rsc_0_0_i_we_d_pff, vec_rsc_0_1_i_we_d_pff, vec_rsc_0_2_i_we_d_pff, vec_rsc_0_3_i_we_d_pff,
      twiddle_rsc_0_1_i_radr_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  output twiddle_rsc_triosy_0_0_lz;
  output twiddle_rsc_triosy_0_1_lz;
  output twiddle_rsc_triosy_0_2_lz;
  output twiddle_rsc_triosy_0_3_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_q_d;
  output vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_q_d;
  output vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_0_i_q_d;
  output [7:0] twiddle_rsc_0_0_i_radr_d;
  output twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_1_i_q_d;
  output twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_2_i_q_d;
  output [7:0] twiddle_rsc_0_2_i_radr_d;
  output twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_3_i_q_d;
  output twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [7:0] vec_rsc_0_0_i_radr_d_pff;
  output [7:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;
  output vec_rsc_0_2_i_we_d_pff;
  output vec_rsc_0_3_i_we_d_pff;
  output [7:0] twiddle_rsc_0_1_i_radr_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_cmp_ccs_ccore_en;
  wire [7:0] fsm_output;
  wire and_dcpl;
  wire not_tmp_4;
  wire nor_tmp_2;
  wire nor_tmp_7;
  wire or_tmp_10;
  wire and_dcpl_17;
  wire and_dcpl_18;
  wire and_dcpl_19;
  wire and_dcpl_20;
  wire and_dcpl_22;
  wire or_dcpl_16;
  wire and_dcpl_28;
  wire and_dcpl_29;
  wire and_dcpl_30;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_34;
  wire and_dcpl_35;
  wire and_dcpl_36;
  wire and_dcpl_38;
  wire and_dcpl_40;
  wire and_dcpl_41;
  wire and_dcpl_43;
  wire and_dcpl_44;
  wire and_dcpl_46;
  wire and_dcpl_48;
  wire and_dcpl_50;
  wire and_dcpl_54;
  wire or_tmp_32;
  wire or_tmp_34;
  wire mux_tmp_53;
  wire or_tmp_55;
  wire or_tmp_73;
  wire mux_tmp_84;
  wire mux_tmp_100;
  wire or_tmp_92;
  wire and_dcpl_68;
  wire and_dcpl_69;
  wire and_dcpl_70;
  wire and_dcpl_71;
  wire and_dcpl_72;
  wire and_dcpl_74;
  wire mux_tmp_114;
  wire or_tmp_110;
  wire mux_tmp_120;
  wire mux_tmp_123;
  wire and_dcpl_80;
  wire and_dcpl_82;
  wire mux_tmp_128;
  wire or_tmp_124;
  wire or_tmp_125;
  wire and_dcpl_87;
  wire and_dcpl_88;
  wire and_dcpl_89;
  wire nor_tmp_33;
  wire or_tmp_131;
  wire or_tmp_134;
  wire or_dcpl_23;
  wire or_dcpl_26;
  wire mux_tmp_155;
  wire and_dcpl_103;
  wire not_tmp_94;
  wire and_dcpl_108;
  wire and_dcpl_113;
  wire and_dcpl_117;
  wire and_dcpl_125;
  wire and_dcpl_127;
  wire and_dcpl_128;
  reg COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  reg COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm;
  reg [9:0] VEC_LOOP_j_10_0_sva_9_0;
  reg COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm;
  reg COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  reg [9:0] COMP_LOOP_acc_1_cse_2_sva;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_2_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_2_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_1_sva;
  reg [8:0] COMP_LOOP_acc_11_psp_sva;
  wire [9:0] nl_COMP_LOOP_acc_11_psp_sva;
  reg [9:0] COMP_LOOP_acc_10_cse_10_1_3_sva;
  reg [9:0] COMP_LOOP_2_tmp_lshift_ncse_sva;
  reg [8:0] COMP_LOOP_3_tmp_mul_idiv_sva;
  reg [1:0] COMP_LOOP_2_tmp_mul_idiv_sva_1_0;
  reg [10:0] STAGE_LOOP_lshift_psp_sva;
  reg [7:0] COMP_LOOP_k_10_2_sva_7_0;
  wire and_149_m1c;
  reg [7:0] reg_COMP_LOOP_k_10_2_ftd;
  reg reg_vec_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  wire and_188_cse;
  wire or_205_cse;
  wire COMP_LOOP_tmp_COMP_LOOP_tmp_nor_cse;
  wire nor_82_cse;
  wire and_191_cse;
  wire and_186_cse;
  wire nor_101_rmff;
  reg [63:0] COMP_LOOP_1_acc_8_itm;
  wire [63:0] tmp_3_lpi_4_dfm_mx0;
  wire [63:0] tmp_5_lpi_4_dfm_mx0;
  wire [63:0] tmp_7_lpi_4_dfm_mx0;
  reg [63:0] p_sva;
  reg [7:0] COMP_LOOP_acc_psp_sva;
  wire [8:0] nl_COMP_LOOP_acc_psp_sva;
  wire mux_61_itm;
  wire mux_76_itm;
  wire [8:0] z_out;
  wire [9:0] nl_z_out;
  wire and_dcpl_175;
  wire and_dcpl_181;
  wire and_dcpl_186;
  wire and_dcpl_218;
  wire and_dcpl_220;
  wire and_dcpl_222;
  wire and_dcpl_226;
  wire and_dcpl_229;
  wire and_dcpl_232;
  wire and_dcpl_233;
  wire and_dcpl_234;
  wire and_dcpl_237;
  wire and_dcpl_238;
  wire [63:0] z_out_3;
  wire [127:0] nl_z_out_3;
  wire and_dcpl_256;
  wire [10:0] z_out_4;
  wire and_dcpl_267;
  wire [3:0] z_out_5;
  wire [4:0] nl_z_out_5;
  wire [9:0] z_out_6;
  wire [10:0] z_out_7;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [3:0] COMP_LOOP_1_tmp_acc_cse_sva;
  reg [63:0] tmp_8_sva;
  reg [63:0] COMP_LOOP_tmp_mux1h_itm;
  reg [63:0] COMP_LOOP_tmp_mux_itm;
  reg [63:0] COMP_LOOP_tmp_mux1h_1_itm;
  wire STAGE_LOOP_i_3_0_sva_mx0c1;
  wire VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  wire COMP_LOOP_1_acc_8_itm_mx0c0;
  wire COMP_LOOP_1_acc_8_itm_mx0c1;
  wire COMP_LOOP_1_acc_8_itm_mx0c2;
  wire COMP_LOOP_1_acc_8_itm_mx0c3;
  wire COMP_LOOP_1_acc_8_itm_mx0c6;
  wire COMP_LOOP_1_acc_8_itm_mx0c7;
  wire COMP_LOOP_1_acc_8_itm_mx0c9;
  wire COMP_LOOP_1_acc_8_itm_mx0c12;
  wire COMP_LOOP_1_acc_8_itm_mx0c14;
  wire COMP_LOOP_tmp_or_2_ssc;
  wire and_222_cse;
  wire and_227_cse;
  wire and_230_cse;
  wire COMP_LOOP_tmp_nor_itm;
  wire [9:0] COMP_LOOP_1_acc_10_itm_10_1_1;
  wire [63:0] COMP_LOOP_mux_36_cse;
  wire COMP_LOOP_or_7_tmp;
  wire and_328_cse;

  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] and_192_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] or_139_nl;
  wire[0:0] VEC_LOOP_j_not_1_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] mux_nl;
  wire[0:0] or_211_nl;
  wire[0:0] nand_18_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] and_170_nl;
  wire[10:0] COMP_LOOP_2_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_2_acc_10_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] and_169_nl;
  wire[10:0] COMP_LOOP_3_acc_nl;
  wire[11:0] nl_COMP_LOOP_3_acc_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[10:0] COMP_LOOP_3_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_3_acc_10_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] mux_165_nl;
  wire[8:0] COMP_LOOP_acc_12_nl;
  wire[9:0] nl_COMP_LOOP_acc_12_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] and_166_nl;
  wire[10:0] COMP_LOOP_4_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_4_acc_10_nl;
  wire[0:0] mux_171_nl;
  wire[10:0] COMP_LOOP_1_acc_nl;
  wire[11:0] nl_COMP_LOOP_1_acc_nl;
  wire[0:0] mux_172_nl;
  wire[63:0] COMP_LOOP_acc_14_nl;
  wire[64:0] nl_COMP_LOOP_acc_14_nl;
  wire[63:0] COMP_LOOP_mux1h_33_nl;
  wire[0:0] COMP_LOOP_or_nl;
  wire[0:0] COMP_LOOP_or_1_nl;
  wire[0:0] COMP_LOOP_or_2_nl;
  wire[0:0] COMP_LOOP_or_3_nl;
  wire[0:0] COMP_LOOP_or_8_nl;
  wire[0:0] COMP_LOOP_or_9_nl;
  wire[0:0] and_131_nl;
  wire[0:0] and_134_nl;
  wire[0:0] and_137_nl;
  wire[0:0] and_140_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] mux_194_nl;
  wire[0:0] or_202_nl;
  wire[0:0] and_147_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] mux_200_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] mux_198_nl;
  wire[0:0] mux_197_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] COMP_LOOP_tmp_and_nl;
  wire[0:0] COMP_LOOP_tmp_and_2_nl;
  wire[0:0] COMP_LOOP_tmp_and_3_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] or_25_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] nand_2_nl;
  wire[0:0] nand_3_nl;
  wire[10:0] COMP_LOOP_1_acc_10_nl;
  wire[12:0] nl_COMP_LOOP_1_acc_10_nl;
  wire[0:0] or_51_nl;
  wire[0:0] nor_20_nl;
  wire[0:0] or_92_nl;
  wire[0:0] and_183_nl;
  wire[0:0] or_124_nl;
  wire[0:0] or_123_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] or_129_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] or_135_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] or_151_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] nor_59_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] nor_60_nl;
  wire[0:0] nor_61_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] nor_56_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] nor_57_nl;
  wire[0:0] nor_58_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] nor_53_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] nor_54_nl;
  wire[0:0] nor_55_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] and_165_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] nor_51_nl;
  wire[0:0] nor_52_nl;
  wire[0:0] mux_183_nl;
  wire[0:0] mux_182_nl;
  wire[0:0] or_nl;
  wire[0:0] or_208_nl;
  wire[0:0] mux_181_nl;
  wire[0:0] or_209_nl;
  wire[0:0] nand_16_nl;
  wire[0:0] and_29_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] nor_77_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] nor_78_nl;
  wire[0:0] and_39_nl;
  wire[0:0] and_41_nl;
  wire[0:0] and_44_nl;
  wire[0:0] and_47_nl;
  wire[0:0] and_49_nl;
  wire[0:0] and_53_nl;
  wire[0:0] and_54_nl;
  wire[0:0] and_55_nl;
  wire[0:0] and_57_nl;
  wire[0:0] and_58_nl;
  wire[0:0] and_59_nl;
  wire[0:0] and_60_nl;
  wire[0:0] and_61_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] or_58_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] or_56_nl;
  wire[0:0] or_54_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] or_49_nl;
  wire[0:0] or_48_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] or_46_nl;
  wire[0:0] or_44_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_65_nl;
  wire[0:0] or_64_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] or_63_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] or_62_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] or_61_nl;
  wire[0:0] or_60_nl;
  wire[0:0] or_59_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] nand_14_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] or_76_nl;
  wire[0:0] or_75_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] or_72_nl;
  wire[0:0] or_71_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] or_69_nl;
  wire[0:0] or_67_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] or_85_nl;
  wire[0:0] or_84_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] or_83_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] or_82_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] or_81_nl;
  wire[0:0] or_80_nl;
  wire[0:0] or_79_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] or_98_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] or_96_nl;
  wire[0:0] or_94_nl;
  wire[0:0] mux_95_nl;
  wire[0:0] mux_94_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] or_90_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] or_89_nl;
  wire[0:0] or_87_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] nor_71_nl;
  wire[0:0] nor_72_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] nor_73_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] or_102_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] nor_74_nl;
  wire[0:0] nor_75_nl;
  wire[0:0] nor_76_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] and_176_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] and_177_nl;
  wire[0:0] and_178_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] and_179_nl;
  wire[0:0] and_180_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] and_181_nl;
  wire[0:0] and_182_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] nor_65_nl;
  wire[0:0] nor_66_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] nor_67_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] nand_11_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] nor_69_nl;
  wire[0:0] nor_70_nl;
  wire[7:0] COMP_LOOP_1_tmp_mul_nl;
  wire[15:0] nl_COMP_LOOP_1_tmp_mul_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] or_121_nl;
  wire[0:0] or_120_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] or_136_nl;
  wire[0:0] or_133_nl;
  wire[7:0] COMP_LOOP_mux_35_nl;
  wire[0:0] and_327_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nor_nl;
  wire[0:0] COMP_LOOP_and_5_nl;
  wire[0:0] COMP_LOOP_and_6_nl;
  wire[0:0] COMP_LOOP_and_7_nl;
  wire[53:0] COMP_LOOP_tmp_and_8_nl;
  wire[53:0] COMP_LOOP_tmp_mux1h_15_nl;
  wire[9:0] COMP_LOOP_tmp_mux1h_16_nl;
  wire[53:0] COMP_LOOP_tmp_COMP_LOOP_tmp_and_1_nl;
  wire[7:0] COMP_LOOP_tmp_mux1h_17_nl;
  wire[0:0] COMP_LOOP_tmp_or_7_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl;
  wire[0:0] COMP_LOOP_tmp_mux_5_nl;
  wire[0:0] COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl;
  wire[11:0] acc_3_nl;
  wire[12:0] nl_acc_3_nl;
  wire[10:0] COMP_LOOP_mux_38_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nand_1_nl;
  wire[9:0] COMP_LOOP_mux_39_nl;
  wire[3:0] STAGE_LOOP_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] COMP_LOOP_mux1h_34_nl;
  wire[0:0] and_329_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] or_145_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] or_140_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat;
  assign and_329_nl = and_dcpl_80 & and_dcpl_175 & (fsm_output[3:2]==2'b01) & and_dcpl_20;
  assign COMP_LOOP_mux1h_34_nl = MUX1HOT_v_64_4_2((~ COMP_LOOP_1_acc_8_itm), (~ tmp_3_lpi_4_dfm_mx0),
      (~ tmp_5_lpi_4_dfm_mx0), (~ tmp_7_lpi_4_dfm_mx0), {and_329_nl , and_222_cse
      , and_227_cse , and_230_cse});
  assign nl_acc_2_nl = ({COMP_LOOP_mux_36_cse , 1'b1}) + ({COMP_LOOP_mux1h_34_nl
      , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign or_145_nl = (~ (fsm_output[4])) | (fsm_output[3]) | (~((fsm_output[0]) &
      (fsm_output[5])));
  assign mux_148_nl = MUX_s_1_2_2(or_145_nl, or_tmp_124, fsm_output[2]);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, or_tmp_125, fsm_output[6]);
  assign or_140_nl = (fsm_output[4]) | (~((fsm_output[3]) & (fsm_output[0]) & (fsm_output[5])));
  assign mux_146_nl = MUX_s_1_2_2(or_tmp_124, or_140_nl, fsm_output[2]);
  assign mux_147_nl = MUX_s_1_2_2(or_tmp_125, mux_146_nl, fsm_output[6]);
  assign mux_150_nl = MUX_s_1_2_2(mux_149_nl, mux_147_nl, fsm_output[1]);
  assign nor_100_nl = ~(mux_150_nl | (fsm_output[7]));
  assign nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat = MUX_v_64_2_2((readslicef_65_64_1(acc_2_nl)),
      COMP_LOOP_1_acc_8_itm, nor_100_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_156_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] or_153_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] or_147_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat;
  assign or_153_nl = (fsm_output[3]) | (~((fsm_output[4]) & (fsm_output[0]) & (fsm_output[5])));
  assign mux_154_nl = MUX_s_1_2_2(or_153_nl, or_tmp_131, fsm_output[2]);
  assign mux_155_nl = MUX_s_1_2_2(mux_154_nl, or_tmp_134, fsm_output[6]);
  assign or_147_nl = (fsm_output[4:3]!=2'b01) | (~ nor_tmp_33);
  assign mux_151_nl = MUX_s_1_2_2(or_tmp_131, or_147_nl, fsm_output[2]);
  assign mux_153_nl = MUX_s_1_2_2(or_tmp_134, mux_151_nl, fsm_output[6]);
  assign mux_156_nl = MUX_s_1_2_2(mux_155_nl, mux_153_nl, fsm_output[1]);
  assign nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat = ~(mux_156_nl | (fsm_output[7]));
  wire[0:0] and_315_nl;
  wire [3:0] nl_COMP_LOOP_1_tmp_lshift_rg_s;
  assign and_315_nl = (fsm_output==8'b00000010);
  assign nl_COMP_LOOP_1_tmp_lshift_rg_s = MUX_v_4_2_2(COMP_LOOP_1_tmp_acc_cse_sva,
      z_out_5, and_315_nl);
  wire[0:0] and_326_nl;
  wire [3:0] nl_COMP_LOOP_3_tmp_lshift_rg_s;
  assign and_326_nl = (fsm_output==8'b00000010);
  assign nl_COMP_LOOP_3_tmp_lshift_rg_s = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, z_out_5,
      and_326_nl);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0 = ~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0 = ~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0 = ~ COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0 = z_out_4[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 = ~ (z_out[4]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  modulo  COMP_LOOP_1_modulo_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) COMP_LOOP_1_tmp_lshift_rg (
      .a(1'b1),
      .s(nl_COMP_LOOP_1_tmp_lshift_rg_s[3:0]),
      .z(z_out_6)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd11)) COMP_LOOP_3_tmp_lshift_rg (
      .a(1'b1),
      .s(nl_COMP_LOOP_3_tmp_lshift_rg_s[3:0]),
      .z(z_out_7)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(nor_101_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .COMP_LOOP_C_31_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_31_tr0[0:0]),
      .COMP_LOOP_C_62_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_62_tr0[0:0]),
      .COMP_LOOP_C_93_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_93_tr0[0:0]),
      .COMP_LOOP_C_124_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_124_tr0[0:0]),
      .VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_VEC_LOOP_C_0_tr0[0:0]),
      .STAGE_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_LOOP_C_1_tr0[0:0])
    );
  assign and_192_nl = (fsm_output[0]) & (fsm_output[6]);
  assign mux_142_nl = MUX_s_1_2_2((~ or_tmp_34), mux_tmp_128, and_192_nl);
  assign mux_140_nl = MUX_s_1_2_2(mux_tmp_128, nor_tmp_2, fsm_output[6]);
  assign mux_141_nl = MUX_s_1_2_2(mux_tmp_53, mux_140_nl, fsm_output[0]);
  assign mux_143_nl = MUX_s_1_2_2(mux_142_nl, mux_141_nl, fsm_output[1]);
  assign mux_137_nl = MUX_s_1_2_2((~ or_tmp_34), mux_tmp_128, fsm_output[6]);
  assign mux_138_nl = MUX_s_1_2_2(mux_137_nl, mux_tmp_53, fsm_output[0]);
  assign or_139_nl = (fsm_output[0]) | (fsm_output[6]);
  assign mux_136_nl = MUX_s_1_2_2(mux_tmp_128, nor_tmp_2, or_139_nl);
  assign mux_139_nl = MUX_s_1_2_2(mux_138_nl, mux_136_nl, fsm_output[1]);
  assign mux_144_nl = MUX_s_1_2_2(mux_143_nl, mux_139_nl, fsm_output[5]);
  assign nor_101_rmff = ~(mux_144_nl | (fsm_output[7]));
  assign and_188_cse = (fsm_output[1:0]==2'b11);
  assign and_186_cse = (fsm_output[1]) & (fsm_output[6]) & (fsm_output[2]) & (fsm_output[3])
      & (fsm_output[4]);
  assign or_205_cse = (fsm_output[1:0]!=2'b00);
  assign and_328_cse = and_dcpl_80 & and_dcpl_175 & (fsm_output[3:2]==2'b01) & and_dcpl_20;
  assign nor_82_cse = ~((fsm_output[3:2]!=2'b00));
  assign and_149_m1c = and_dcpl_69 & and_dcpl_29;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_nor_cse = ~((COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]!=2'b00));
  assign nl_COMP_LOOP_1_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_2_sva_7_0
      , 2'b00}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_1_acc_10_nl = nl_COMP_LOOP_1_acc_10_nl[10:0];
  assign COMP_LOOP_1_acc_10_itm_10_1_1 = readslicef_11_10_1(COMP_LOOP_1_acc_10_nl);
  assign tmp_3_lpi_4_dfm_mx0 = MUX_v_64_4_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]);
  assign tmp_5_lpi_4_dfm_mx0 = MUX_v_64_4_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]);
  assign tmp_7_lpi_4_dfm_mx0 = MUX_v_64_4_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, COMP_LOOP_acc_10_cse_10_1_sva[1:0]);
  assign and_dcpl = ~((fsm_output[7:6]!=2'b00));
  assign not_tmp_4 = ~(and_188_cse | (fsm_output[4:2]!=3'b000));
  assign nor_tmp_2 = (fsm_output[4:2]==3'b111);
  assign nor_tmp_7 = (fsm_output[6]) & (fsm_output[2]) & (fsm_output[3]) & (fsm_output[4]);
  assign and_191_cse = (fsm_output[3:2]==2'b11);
  assign or_tmp_10 = and_191_cse | (fsm_output[4]);
  assign and_dcpl_17 = ~((fsm_output[5]) | (fsm_output[7]));
  assign and_dcpl_18 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_19 = and_dcpl_18 & and_dcpl_17;
  assign and_dcpl_20 = ~((fsm_output[4]) | (fsm_output[6]));
  assign and_dcpl_22 = nor_82_cse & and_dcpl_20;
  assign or_dcpl_16 = (fsm_output[3]) | (fsm_output[2]) | (fsm_output[4]) | (fsm_output[6]);
  assign and_dcpl_28 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_29 = and_dcpl_28 & and_dcpl_17;
  assign and_dcpl_30 = and_dcpl_22 & and_dcpl_29;
  assign and_dcpl_32 = and_188_cse & and_dcpl_17;
  assign and_dcpl_33 = and_dcpl_22 & and_dcpl_32;
  assign and_dcpl_34 = (fsm_output[5]) & (~ (fsm_output[7]));
  assign and_dcpl_35 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_36 = and_dcpl_35 & and_dcpl_34;
  assign and_dcpl_38 = and_dcpl_28 & and_dcpl_34;
  assign and_dcpl_40 = (~ (fsm_output[4])) & (fsm_output[6]);
  assign and_dcpl_41 = nor_82_cse & and_dcpl_40;
  assign and_dcpl_43 = and_dcpl_35 & and_dcpl_17;
  assign and_dcpl_44 = and_dcpl_41 & and_dcpl_43;
  assign and_dcpl_46 = and_dcpl_18 & and_dcpl_34;
  assign and_dcpl_48 = (fsm_output[4]) & (~ (fsm_output[6]));
  assign and_dcpl_50 = and_191_cse & and_dcpl_48;
  assign and_dcpl_54 = and_188_cse & and_dcpl_34;
  assign or_tmp_32 = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b00) | (fsm_output[6]) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign or_tmp_34 = (fsm_output[4:2]!=3'b000);
  assign mux_tmp_53 = MUX_s_1_2_2((~ or_tmp_34), nor_tmp_2, fsm_output[6]);
  assign or_51_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b00);
  assign mux_61_itm = MUX_s_1_2_2(mux_tmp_53, nor_tmp_7, or_51_nl);
  assign or_tmp_55 = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b01) | (fsm_output[6]) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign nor_20_nl = ~((VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b01));
  assign mux_76_itm = MUX_s_1_2_2(nor_tmp_7, mux_tmp_53, nor_20_nl);
  assign or_tmp_73 = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b10) | (fsm_output[6]) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign or_92_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b10);
  assign mux_tmp_84 = MUX_s_1_2_2(mux_tmp_53, nor_tmp_7, or_92_nl);
  assign and_183_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]==2'b11);
  assign mux_tmp_100 = MUX_s_1_2_2(nor_tmp_7, mux_tmp_53, and_183_nl);
  assign or_tmp_92 = (VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b11) | (fsm_output[6]) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign and_dcpl_68 = (fsm_output[3:2]==2'b01);
  assign and_dcpl_69 = and_dcpl_68 & and_dcpl_20;
  assign and_dcpl_70 = and_dcpl_69 & and_dcpl_19;
  assign and_dcpl_71 = and_dcpl_69 & and_dcpl_43;
  assign and_dcpl_72 = ~((fsm_output[4:3]!=2'b00));
  assign and_dcpl_74 = and_dcpl_72 & (~ (fsm_output[6])) & and_dcpl_17;
  assign or_124_nl = (COMP_LOOP_3_tmp_mul_idiv_sva[0]) | (~ (fsm_output[2]));
  assign or_123_nl = (COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]!=2'b00) | (~ (fsm_output[2]));
  assign mux_tmp_114 = MUX_s_1_2_2(or_124_nl, or_123_nl, fsm_output[0]);
  assign or_tmp_110 = (~ (fsm_output[0])) | (fsm_output[2]);
  assign or_129_nl = (fsm_output[0]) | (~ (fsm_output[2]));
  assign mux_125_nl = MUX_s_1_2_2(or_129_nl, or_tmp_110, fsm_output[1]);
  assign mux_tmp_120 = mux_125_nl | (~ (z_out_3[0]));
  assign nand_9_nl = ~((COMP_LOOP_3_tmp_mul_idiv_sva[0]) & (fsm_output[2]));
  assign or_135_nl = (COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]!=2'b10) | (~ (fsm_output[2]));
  assign mux_tmp_123 = MUX_s_1_2_2(nand_9_nl, or_135_nl, fsm_output[0]);
  assign and_dcpl_80 = ~((fsm_output[1]) | (fsm_output[5]));
  assign and_dcpl_82 = ~((fsm_output[6]) | (fsm_output[0]));
  assign mux_tmp_128 = MUX_s_1_2_2(nor_82_cse, and_191_cse, fsm_output[4]);
  assign mux_145_nl = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[0]);
  assign or_tmp_124 = (fsm_output[4:3]!=2'b00) | mux_145_nl;
  assign or_tmp_125 = (fsm_output[2]) | (~ (fsm_output[4])) | (fsm_output[3]) | (fsm_output[0])
      | (fsm_output[5]);
  assign and_dcpl_87 = and_dcpl_22 & and_dcpl_54;
  assign and_dcpl_88 = and_dcpl_41 & and_dcpl_29;
  assign and_dcpl_89 = and_dcpl_41 & and_dcpl_36;
  assign nor_tmp_33 = (fsm_output[0]) & (fsm_output[5]);
  assign or_tmp_131 = (fsm_output[4:3]!=2'b00) | nor_tmp_33;
  assign or_151_nl = (fsm_output[0]) | (fsm_output[5]);
  assign mux_152_nl = MUX_s_1_2_2((~ nor_tmp_33), or_151_nl, fsm_output[4]);
  assign or_tmp_134 = (fsm_output[3:2]!=2'b00) | mux_152_nl;
  assign or_dcpl_23 = (fsm_output[5]) | (fsm_output[7]);
  assign or_dcpl_26 = or_dcpl_16 | (fsm_output[1:0]!=2'b10) | or_dcpl_23;
  assign mux_tmp_155 = MUX_s_1_2_2(mux_tmp_53, nor_tmp_7, fsm_output[0]);
  assign mux_168_nl = MUX_s_1_2_2(and_dcpl_22, nor_tmp_7, and_188_cse);
  assign mux_169_nl = MUX_s_1_2_2(mux_168_nl, (fsm_output[6]), fsm_output[5]);
  assign and_dcpl_103 = ~(mux_169_nl | (fsm_output[7]));
  assign not_tmp_94 = ~(and_188_cse | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2])
      | (fsm_output[3]));
  assign and_dcpl_108 = nor_82_cse & (~ (fsm_output[4])) & (~ (fsm_output[7]));
  assign and_dcpl_113 = nor_82_cse & and_dcpl_48;
  assign and_dcpl_117 = and_191_cse & and_dcpl_40;
  assign and_dcpl_125 = and_dcpl_80 & (~ (fsm_output[7]));
  assign and_dcpl_127 = and_dcpl_68 & (~ (fsm_output[4]));
  assign and_dcpl_128 = and_dcpl_127 & and_dcpl_82;
  assign STAGE_LOOP_i_3_0_sva_mx0c1 = and_dcpl_22 & and_dcpl_18 & (~ (fsm_output[5]))
      & (fsm_output[7]);
  assign VEC_LOOP_j_10_0_sva_9_0_mx0c0 = and_dcpl_22 & and_dcpl_43;
  assign nor_59_nl = ~((fsm_output[1:0]!=2'b11) | (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b00)
      | (fsm_output[6]));
  assign nor_60_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) |
      (~ (fsm_output[6])));
  assign nor_61_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00)
      | (fsm_output[6]));
  assign mux_173_nl = MUX_s_1_2_2(nor_60_nl, nor_61_nl, fsm_output[1]);
  assign mux_174_nl = MUX_s_1_2_2(nor_59_nl, mux_173_nl, fsm_output[5]);
  assign COMP_LOOP_1_acc_8_itm_mx0c0 = mux_174_nl & and_dcpl_108;
  assign nor_56_nl = ~((fsm_output[1:0]!=2'b11) | (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b01)
      | (fsm_output[6]));
  assign nor_57_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) |
      (~ (fsm_output[6])));
  assign nor_58_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01)
      | (fsm_output[6]));
  assign mux_175_nl = MUX_s_1_2_2(nor_57_nl, nor_58_nl, fsm_output[1]);
  assign mux_176_nl = MUX_s_1_2_2(nor_56_nl, mux_175_nl, fsm_output[5]);
  assign COMP_LOOP_1_acc_8_itm_mx0c1 = mux_176_nl & and_dcpl_108;
  assign nor_53_nl = ~((fsm_output[1:0]!=2'b11) | (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b10)
      | (fsm_output[6]));
  assign nor_54_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_sva[0]) | (~((COMP_LOOP_acc_1_cse_sva[1])
      & (fsm_output[6]))));
  assign nor_55_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b10)
      | (fsm_output[6]));
  assign mux_177_nl = MUX_s_1_2_2(nor_54_nl, nor_55_nl, fsm_output[1]);
  assign mux_178_nl = MUX_s_1_2_2(nor_53_nl, mux_177_nl, fsm_output[5]);
  assign COMP_LOOP_1_acc_8_itm_mx0c2 = mux_178_nl & and_dcpl_108;
  assign and_165_nl = (fsm_output[1:0]==2'b11) & (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]==2'b11)
      & (~ (fsm_output[6]));
  assign nor_51_nl = ~((fsm_output[0]) | (~((COMP_LOOP_acc_1_cse_sva[1:0]==2'b11)
      & (fsm_output[6]))));
  assign nor_52_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b11)
      | (fsm_output[6]));
  assign mux_179_nl = MUX_s_1_2_2(nor_51_nl, nor_52_nl, fsm_output[1]);
  assign mux_180_nl = MUX_s_1_2_2(and_165_nl, mux_179_nl, fsm_output[5]);
  assign COMP_LOOP_1_acc_8_itm_mx0c3 = mux_180_nl & and_dcpl_108;
  assign COMP_LOOP_1_acc_8_itm_mx0c6 = and_dcpl_113 & and_dcpl_43;
  assign or_nl = (fsm_output[0]) | (~ (fsm_output[6])) | (~ (fsm_output[4])) | (fsm_output[2])
      | (fsm_output[3]);
  assign or_208_nl = (fsm_output[0]) | (fsm_output[6]) | (~ (fsm_output[4])) | (fsm_output[2])
      | (fsm_output[3]);
  assign mux_182_nl = MUX_s_1_2_2(or_nl, or_208_nl, fsm_output[1]);
  assign or_209_nl = (~ (fsm_output[0])) | (fsm_output[6]) | (~ (fsm_output[4]))
      | (fsm_output[2]) | (fsm_output[3]);
  assign nand_16_nl = ~((fsm_output[0]) & (fsm_output[6]) & (~ (fsm_output[4])) &
      and_191_cse);
  assign mux_181_nl = MUX_s_1_2_2(or_209_nl, nand_16_nl, fsm_output[1]);
  assign mux_183_nl = MUX_s_1_2_2(mux_182_nl, mux_181_nl, fsm_output[5]);
  assign COMP_LOOP_1_acc_8_itm_mx0c7 = ~(mux_183_nl | (fsm_output[7]));
  assign COMP_LOOP_1_acc_8_itm_mx0c9 = and_dcpl_113 & and_dcpl_46;
  assign COMP_LOOP_1_acc_8_itm_mx0c12 = and_dcpl_117 & and_dcpl_32;
  assign COMP_LOOP_1_acc_8_itm_mx0c14 = and_dcpl_117 & and_dcpl_38;
  assign nor_77_nl = ~((fsm_output[1:0]!=2'b10) | (~ nor_tmp_7));
  assign mux_56_nl = MUX_s_1_2_2(and_dcpl_22, nor_tmp_7, fsm_output[0]);
  assign nor_78_nl = ~((~ (fsm_output[0])) | (fsm_output[6]) | (~ nor_tmp_2));
  assign mux_57_nl = MUX_s_1_2_2(mux_56_nl, nor_78_nl, fsm_output[1]);
  assign mux_58_nl = MUX_s_1_2_2(nor_77_nl, mux_57_nl, fsm_output[5]);
  assign and_29_nl = mux_58_nl & (~ (fsm_output[7]));
  assign vec_rsc_0_0_i_d_d_pff = MUX_v_64_2_2(COMP_LOOP_1_modulo_cmp_return_rsc_z,
      COMP_LOOP_1_acc_8_itm, and_29_nl);
  assign and_39_nl = and_dcpl_22 & and_dcpl_36;
  assign and_41_nl = and_dcpl_22 & and_dcpl_38;
  assign and_44_nl = and_dcpl_41 & and_dcpl_19;
  assign and_47_nl = nor_tmp_7 & and_dcpl_32;
  assign and_49_nl = and_dcpl_41 & and_dcpl_46;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_8_8_2((COMP_LOOP_1_acc_10_itm_10_1_1[9:2]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_1_cse_2_sva[9:2]), (COMP_LOOP_acc_10_cse_10_1_2_sva[9:2]),
      (COMP_LOOP_acc_11_psp_sva[8:1]), (COMP_LOOP_acc_10_cse_10_1_3_sva[9:2]), (COMP_LOOP_acc_1_cse_sva[9:2]),
      (COMP_LOOP_acc_10_cse_10_1_sva[9:2]), {and_dcpl_30 , and_dcpl_33 , and_39_nl
      , and_41_nl , and_44_nl , and_dcpl_44 , and_47_nl , and_49_nl});
  assign and_53_nl = and_dcpl_50 & and_dcpl_32;
  assign and_54_nl = and_dcpl_22 & and_dcpl_46;
  assign and_55_nl = and_dcpl_50 & and_dcpl_38;
  assign and_57_nl = and_dcpl_50 & and_dcpl_54;
  assign and_58_nl = nor_tmp_7 & and_dcpl_43;
  assign and_59_nl = nor_tmp_7 & and_dcpl_29;
  assign and_60_nl = nor_tmp_7 & and_dcpl_46;
  assign and_61_nl = nor_tmp_7 & and_dcpl_36;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_8_8_2((COMP_LOOP_acc_10_cse_10_1_1_sva[9:2]),
      COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_10_cse_10_1_2_sva[9:2]), (COMP_LOOP_acc_1_cse_2_sva[9:2]),
      (COMP_LOOP_acc_10_cse_10_1_3_sva[9:2]), (COMP_LOOP_acc_11_psp_sva[8:1]), (COMP_LOOP_acc_10_cse_10_1_sva[9:2]),
      (COMP_LOOP_acc_1_cse_sva[9:2]), {and_53_nl , and_54_nl , and_55_nl , and_57_nl
      , and_58_nl , and_59_nl , and_60_nl , and_61_nl});
  assign or_58_nl = (~ (fsm_output[0])) | (COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b00)
      | (~ nor_tmp_7);
  assign or_56_nl = (COMP_LOOP_acc_11_psp_sva[0]) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | (~ nor_tmp_7);
  assign or_54_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b00) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign mux_65_nl = MUX_s_1_2_2(or_56_nl, or_54_nl, fsm_output[0]);
  assign mux_66_nl = MUX_s_1_2_2(or_58_nl, mux_65_nl, fsm_output[1]);
  assign or_49_nl = (COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b00);
  assign mux_62_nl = MUX_s_1_2_2((~ mux_61_itm), or_tmp_32, or_49_nl);
  assign or_48_nl = (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) | (~ nor_tmp_7);
  assign mux_63_nl = MUX_s_1_2_2(mux_62_nl, or_48_nl, fsm_output[0]);
  assign or_46_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b00) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign or_44_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00) | (fsm_output[6]) | (~
      nor_tmp_2);
  assign mux_59_nl = MUX_s_1_2_2(or_46_nl, or_44_nl, fsm_output[0]);
  assign mux_64_nl = MUX_s_1_2_2(mux_63_nl, mux_59_nl, fsm_output[1]);
  assign mux_67_nl = MUX_s_1_2_2(mux_66_nl, mux_64_nl, fsm_output[5]);
  assign vec_rsc_0_0_i_we_d_pff = ~(mux_67_nl | (fsm_output[7]));
  assign or_65_nl = (COMP_LOOP_acc_11_psp_sva[0]) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) | (~ (fsm_output[6])) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign or_64_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b00) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_72_nl = MUX_s_1_2_2(or_65_nl, or_64_nl, fsm_output[0]);
  assign or_63_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[1:0]!=2'b00) | (fsm_output[6])
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign or_62_nl = (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm);
  assign mux_70_nl = MUX_s_1_2_2((~ mux_61_itm), or_tmp_32, or_62_nl);
  assign mux_71_nl = MUX_s_1_2_2(or_63_nl, mux_70_nl, fsm_output[0]);
  assign mux_73_nl = MUX_s_1_2_2(mux_72_nl, mux_71_nl, fsm_output[1]);
  assign or_61_nl = (COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b00) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign or_60_nl = (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_68_nl = MUX_s_1_2_2(or_61_nl, or_60_nl, fsm_output[0]);
  assign or_59_nl = (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b00)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_69_nl = MUX_s_1_2_2(mux_68_nl, or_59_nl, fsm_output[1]);
  assign mux_74_nl = MUX_s_1_2_2(mux_73_nl, mux_69_nl, fsm_output[5]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_74_nl | (fsm_output[7]));
  assign nand_14_nl = ~((fsm_output[0]) & (COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]==2'b01)
      & nor_tmp_7);
  assign or_76_nl = (COMP_LOOP_acc_11_psp_sva[0]) | (~((VEC_LOOP_j_10_0_sva_9_0[0])
      & (fsm_output[6]) & (fsm_output[4]) & (fsm_output[2]) & (fsm_output[3])));
  assign or_75_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b01) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign mux_80_nl = MUX_s_1_2_2(or_76_nl, or_75_nl, fsm_output[0]);
  assign mux_81_nl = MUX_s_1_2_2(nand_14_nl, mux_80_nl, fsm_output[1]);
  assign or_72_nl = (COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b01);
  assign mux_77_nl = MUX_s_1_2_2((~ mux_76_itm), or_tmp_55, or_72_nl);
  assign or_71_nl = (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) | (~ nor_tmp_7);
  assign mux_78_nl = MUX_s_1_2_2(mux_77_nl, or_71_nl, fsm_output[0]);
  assign or_69_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b01) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign or_67_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01) | (fsm_output[6]) | (~
      nor_tmp_2);
  assign mux_75_nl = MUX_s_1_2_2(or_69_nl, or_67_nl, fsm_output[0]);
  assign mux_79_nl = MUX_s_1_2_2(mux_78_nl, mux_75_nl, fsm_output[1]);
  assign mux_82_nl = MUX_s_1_2_2(mux_81_nl, mux_79_nl, fsm_output[5]);
  assign vec_rsc_0_1_i_we_d_pff = ~(mux_82_nl | (fsm_output[7]));
  assign or_85_nl = (COMP_LOOP_acc_11_psp_sva[0]) | (~ (VEC_LOOP_j_10_0_sva_9_0[0]))
      | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) | (~ (fsm_output[6])) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]);
  assign or_84_nl = (COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b01) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_87_nl = MUX_s_1_2_2(or_85_nl, or_84_nl, fsm_output[0]);
  assign or_83_nl = (COMP_LOOP_1_acc_10_itm_10_1_1[1:0]!=2'b01) | (fsm_output[6])
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign or_82_nl = (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm);
  assign mux_85_nl = MUX_s_1_2_2((~ mux_76_itm), or_tmp_55, or_82_nl);
  assign mux_86_nl = MUX_s_1_2_2(or_83_nl, mux_85_nl, fsm_output[0]);
  assign mux_88_nl = MUX_s_1_2_2(mux_87_nl, mux_86_nl, fsm_output[1]);
  assign or_81_nl = (COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b01) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign or_80_nl = (~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_83_nl = MUX_s_1_2_2(or_81_nl, or_80_nl, fsm_output[0]);
  assign or_79_nl = (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b01)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_84_nl = MUX_s_1_2_2(mux_83_nl, or_79_nl, fsm_output[1]);
  assign mux_89_nl = MUX_s_1_2_2(mux_88_nl, mux_84_nl, fsm_output[5]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_89_nl | (fsm_output[7]));
  assign or_98_nl = (~ (fsm_output[0])) | (COMP_LOOP_acc_10_cse_10_1_3_sva[0]) |
      (~((COMP_LOOP_acc_10_cse_10_1_3_sva[1]) & (fsm_output[6]) & (fsm_output[4])
      & (fsm_output[2]) & (fsm_output[3])));
  assign or_96_nl = (~ (COMP_LOOP_acc_11_psp_sva[0])) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | (~ nor_tmp_7);
  assign or_94_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]!=2'b10) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign mux_96_nl = MUX_s_1_2_2(or_96_nl, or_94_nl, fsm_output[0]);
  assign mux_97_nl = MUX_s_1_2_2(or_98_nl, mux_96_nl, fsm_output[1]);
  assign mux_92_nl = MUX_s_1_2_2(or_tmp_73, (~ mux_tmp_84), COMP_LOOP_acc_10_cse_10_1_sva[1]);
  assign mux_93_nl = MUX_s_1_2_2(mux_92_nl, or_tmp_73, COMP_LOOP_acc_10_cse_10_1_sva[0]);
  assign or_90_nl = (COMP_LOOP_acc_1_cse_sva[0]) | (~((COMP_LOOP_acc_1_cse_sva[1])
      & (fsm_output[6]) & (fsm_output[4]) & (fsm_output[2]) & (fsm_output[3])));
  assign mux_94_nl = MUX_s_1_2_2(mux_93_nl, or_90_nl, fsm_output[0]);
  assign or_89_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b10) | (fsm_output[6])
      | (~ nor_tmp_2);
  assign or_87_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b10) | (fsm_output[6]) | (~
      nor_tmp_2);
  assign mux_90_nl = MUX_s_1_2_2(or_89_nl, or_87_nl, fsm_output[0]);
  assign mux_95_nl = MUX_s_1_2_2(mux_94_nl, mux_90_nl, fsm_output[1]);
  assign mux_98_nl = MUX_s_1_2_2(mux_97_nl, mux_95_nl, fsm_output[5]);
  assign vec_rsc_0_2_i_we_d_pff = ~(mux_98_nl | (fsm_output[7]));
  assign nor_71_nl = ~((~ (COMP_LOOP_acc_11_psp_sva[0])) | (VEC_LOOP_j_10_0_sva_9_0[0])
      | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) | (~ (fsm_output[6])) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]));
  assign nor_72_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b10) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_103_nl = MUX_s_1_2_2(nor_71_nl, nor_72_nl, fsm_output[0]);
  assign nor_73_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[1:0]!=2'b10) | (fsm_output[6])
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign or_102_nl = (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b10) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm);
  assign mux_101_nl = MUX_s_1_2_2(mux_tmp_84, (~ or_tmp_73), or_102_nl);
  assign mux_102_nl = MUX_s_1_2_2(nor_73_nl, mux_101_nl, fsm_output[0]);
  assign mux_104_nl = MUX_s_1_2_2(mux_103_nl, mux_102_nl, fsm_output[1]);
  assign nor_74_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b10) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign nor_75_nl = ~((~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b10)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_99_nl = MUX_s_1_2_2(nor_74_nl, nor_75_nl, fsm_output[0]);
  assign nor_76_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b10)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_100_nl = MUX_s_1_2_2(mux_99_nl, nor_76_nl, fsm_output[1]);
  assign mux_105_nl = MUX_s_1_2_2(mux_104_nl, mux_100_nl, fsm_output[5]);
  assign vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = mux_105_nl & (~ (fsm_output[7]));
  assign and_176_nl = (fsm_output[0]) & (COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]==2'b11)
      & (fsm_output[6]) & (fsm_output[4]) & (fsm_output[2]) & (fsm_output[3]);
  assign and_177_nl = (COMP_LOOP_acc_11_psp_sva[0]) & (VEC_LOOP_j_10_0_sva_9_0[0])
      & (fsm_output[6]) & (fsm_output[4]) & (fsm_output[2]) & (fsm_output[3]);
  assign and_178_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva[1:0]==2'b11) & (~ (fsm_output[6]))
      & nor_tmp_2;
  assign mux_111_nl = MUX_s_1_2_2(and_177_nl, and_178_nl, fsm_output[0]);
  assign mux_112_nl = MUX_s_1_2_2(and_176_nl, mux_111_nl, fsm_output[1]);
  assign and_179_nl = (COMP_LOOP_acc_10_cse_10_1_sva[1:0]==2'b11);
  assign mux_108_nl = MUX_s_1_2_2((~ or_tmp_92), mux_tmp_100, and_179_nl);
  assign and_180_nl = (COMP_LOOP_acc_1_cse_sva[1:0]==2'b11) & (fsm_output[6]) & (fsm_output[4])
      & (fsm_output[2]) & (fsm_output[3]);
  assign mux_109_nl = MUX_s_1_2_2(mux_108_nl, and_180_nl, fsm_output[0]);
  assign and_181_nl = (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]==2'b11) & (~ (fsm_output[6]))
      & nor_tmp_2;
  assign and_182_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]==2'b11) & (~ (fsm_output[6]))
      & nor_tmp_2;
  assign mux_106_nl = MUX_s_1_2_2(and_181_nl, and_182_nl, fsm_output[0]);
  assign mux_110_nl = MUX_s_1_2_2(mux_109_nl, mux_106_nl, fsm_output[1]);
  assign mux_113_nl = MUX_s_1_2_2(mux_112_nl, mux_110_nl, fsm_output[5]);
  assign vec_rsc_0_3_i_we_d_pff = mux_113_nl & (~ (fsm_output[7]));
  assign nor_65_nl = ~((~ (COMP_LOOP_acc_11_psp_sva[0])) | (~ (VEC_LOOP_j_10_0_sva_9_0[0]))
      | (~ COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm) | (~ (fsm_output[6])) | (fsm_output[4])
      | (fsm_output[2]) | (fsm_output[3]));
  assign nor_66_nl = ~((COMP_LOOP_acc_10_cse_10_1_3_sva[1:0]!=2'b11) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_118_nl = MUX_s_1_2_2(nor_65_nl, nor_66_nl, fsm_output[0]);
  assign nor_67_nl = ~((COMP_LOOP_1_acc_10_itm_10_1_1[1:0]!=2'b11) | (fsm_output[6])
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign nand_11_nl = ~((COMP_LOOP_acc_1_cse_sva[1:0]==2'b11) & COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm);
  assign mux_116_nl = MUX_s_1_2_2(mux_tmp_100, (~ or_tmp_92), nand_11_nl);
  assign mux_117_nl = MUX_s_1_2_2(nor_67_nl, mux_116_nl, fsm_output[0]);
  assign mux_119_nl = MUX_s_1_2_2(mux_118_nl, mux_117_nl, fsm_output[1]);
  assign nor_68_nl = ~((COMP_LOOP_acc_10_cse_10_1_sva[1:0]!=2'b11) | (~ (fsm_output[6]))
      | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign nor_69_nl = ~((~ COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b11)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_114_nl = MUX_s_1_2_2(nor_68_nl, nor_69_nl, fsm_output[0]);
  assign nor_70_nl = ~((fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_2_sva[1:0]!=2'b11)
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_115_nl = MUX_s_1_2_2(mux_114_nl, nor_70_nl, fsm_output[1]);
  assign mux_120_nl = MUX_s_1_2_2(mux_119_nl, mux_115_nl, fsm_output[5]);
  assign vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = mux_120_nl & (~ (fsm_output[7]));
  assign nl_COMP_LOOP_1_tmp_mul_nl = (z_out_6[7:0]) * COMP_LOOP_k_10_2_sva_7_0;
  assign COMP_LOOP_1_tmp_mul_nl = nl_COMP_LOOP_1_tmp_mul_nl[7:0];
  assign twiddle_rsc_0_0_i_radr_d = MUX1HOT_v_8_4_2(COMP_LOOP_1_tmp_mul_nl, (z_out_3[9:2]),
      (COMP_LOOP_3_tmp_mul_idiv_sva[8:1]), (COMP_LOOP_2_tmp_lshift_ncse_sva[9:2]),
      {and_dcpl_30 , and_dcpl_33 , and_dcpl_70 , and_dcpl_71});
  assign mux_123_nl = MUX_s_1_2_2(mux_tmp_114, (fsm_output[2]), fsm_output[1]);
  assign or_121_nl = (fsm_output[0]) | (fsm_output[2]);
  assign mux_122_nl = MUX_s_1_2_2(mux_tmp_114, or_121_nl, fsm_output[1]);
  assign or_120_nl = (z_out_3[1:0]!=2'b00);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, mux_122_nl, or_120_nl);
  assign twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_124_nl) & and_dcpl_74;
  assign twiddle_rsc_0_1_i_radr_d_pff = z_out_3[9:2];
  assign twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = (~(mux_tmp_120 | (z_out_3[1])))
      & and_dcpl_74;
  assign twiddle_rsc_0_2_i_radr_d = MUX1HOT_v_8_3_2((z_out_3[9:2]), (COMP_LOOP_3_tmp_mul_idiv_sva[8:1]),
      (COMP_LOOP_2_tmp_lshift_ncse_sva[9:2]), {and_dcpl_33 , and_dcpl_70 , and_dcpl_71});
  assign mux_131_nl = MUX_s_1_2_2(mux_tmp_123, or_tmp_110, fsm_output[1]);
  assign or_136_nl = (fsm_output[1]) | mux_tmp_123;
  assign or_133_nl = (z_out_3[1:0]!=2'b10);
  assign mux_132_nl = MUX_s_1_2_2(mux_131_nl, or_136_nl, or_133_nl);
  assign twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_132_nl) & and_dcpl_74;
  assign twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = (~(mux_tmp_120 | (~
      (z_out_3[1])))) & and_dcpl_74;
  assign and_dcpl_175 = ~((fsm_output[7]) | (fsm_output[0]));
  assign and_dcpl_181 = (~ (fsm_output[7])) & (fsm_output[0]);
  assign and_222_cse = (fsm_output[1]) & (fsm_output[5]) & and_dcpl_181 & nor_82_cse
      & and_dcpl_20;
  assign and_dcpl_186 = nor_82_cse & (fsm_output[6]) & (~ (fsm_output[4]));
  assign and_227_cse = (fsm_output[1]) & (~ (fsm_output[5])) & and_dcpl_175 & and_dcpl_186;
  assign and_230_cse = (~ (fsm_output[1])) & (fsm_output[5]) & and_dcpl_181 & and_dcpl_186;
  assign and_dcpl_218 = (fsm_output[1]) & (~ (fsm_output[5]));
  assign and_dcpl_220 = and_dcpl_218 & and_dcpl_175 & and_dcpl_22;
  assign and_dcpl_222 = nor_82_cse & (~ (fsm_output[6])) & (fsm_output[4]);
  assign and_dcpl_226 = and_dcpl_80 & and_dcpl_181 & and_dcpl_222;
  assign and_dcpl_229 = (~ (fsm_output[1])) & (fsm_output[5]) & and_dcpl_175 & and_dcpl_222;
  assign and_dcpl_232 = (fsm_output[3]) & (fsm_output[2]) & (fsm_output[6]) & (~
      (fsm_output[4]));
  assign and_dcpl_233 = and_dcpl_218 & and_dcpl_181;
  assign and_dcpl_234 = and_dcpl_233 & and_dcpl_232;
  assign and_dcpl_237 = (fsm_output[1]) & (fsm_output[5]) & and_dcpl_175 & and_dcpl_232;
  assign and_dcpl_238 = and_dcpl_233 & and_dcpl_22;
  assign and_dcpl_256 = (fsm_output==8'b01111111);
  assign and_dcpl_267 = ~((fsm_output!=8'b00000010));
  assign COMP_LOOP_tmp_or_2_ssc = and_dcpl_226 | and_dcpl_229 | and_dcpl_234 | and_dcpl_237;
  assign COMP_LOOP_tmp_nor_itm = ~(and_dcpl_220 | and_dcpl_238 | and_328_cse);
  always @(posedge clk) begin
    if ( (and_dcpl_22 & and_dcpl_19) | STAGE_LOOP_i_3_0_sva_mx0c1 ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b1010, z_out_5, STAGE_LOOP_i_3_0_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( ~((or_dcpl_16 | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5])) ^ (fsm_output[7]))
        ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      COMP_LOOP_2_tmp_mul_idiv_sva_1_0 <= 2'b00;
    end
    else begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= (~ or_tmp_34) & and_dcpl_82 & and_dcpl_80
          & (fsm_output[7]) & (~ (z_out[4]));
      reg_ensig_cgo_cse <= nor_101_rmff;
      COMP_LOOP_2_tmp_mul_idiv_sva_1_0 <= z_out_3[1:0];
    end
  end
  always @(posedge clk) begin
    COMP_LOOP_1_tmp_acc_cse_sva <= z_out_5;
  end
  always @(posedge clk) begin
    if ( rst ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= 10'b0000000000;
    end
    else if ( VEC_LOOP_j_10_0_sva_9_0_mx0c0 | (nor_tmp_7 & and_dcpl_54) ) begin
      VEC_LOOP_j_10_0_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_4[9:0]), VEC_LOOP_j_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( (~(or_tmp_34 | (fsm_output[6]) | (fsm_output[1]) | (fsm_output[5]))) | (fsm_output[7])
        ) begin
      STAGE_LOOP_lshift_psp_sva <= z_out_7;
    end
  end
  always @(posedge clk) begin
    if ( mux_nl | (fsm_output[7]) ) begin
      COMP_LOOP_k_10_2_sva_7_0 <= MUX_v_8_2_2(8'b00000000, reg_COMP_LOOP_k_10_2_ftd,
          nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_26 ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva <= COMP_LOOP_1_acc_10_itm_10_1_1;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_26 ) begin
      COMP_LOOP_acc_psp_sva <= nl_COMP_LOOP_acc_psp_sva[7:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_3_tmp_mul_idiv_sva <= 9'b000000000;
    end
    else if ( ~ or_dcpl_26 ) begin
      COMP_LOOP_3_tmp_mul_idiv_sva <= z_out_3[8:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_26 ) begin
      COMP_LOOP_2_slc_COMP_LOOP_acc_10_itm <= z_out_4[10];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_2_sva <= 10'b0000000000;
    end
    else if ( ~((~ mux_160_nl) & and_dcpl) ) begin
      COMP_LOOP_acc_1_cse_2_sva <= nl_COMP_LOOP_acc_1_cse_2_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_2_sva <= 10'b0000000000;
    end
    else if ( ~((~ mux_161_nl) & and_dcpl) ) begin
      COMP_LOOP_acc_10_cse_10_1_2_sva <= readslicef_11_10_1(COMP_LOOP_2_acc_10_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~((or_tmp_34 | and_188_cse | (fsm_output[5])) & and_dcpl) ) begin
      COMP_LOOP_3_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_3_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_11_psp_sva <= 9'b000000000;
    end
    else if ( mux_164_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_11_psp_sva <= nl_COMP_LOOP_acc_11_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_3_sva <= 10'b0000000000;
    end
    else if ( mux_167_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_10_cse_10_1_3_sva <= readslicef_11_10_1(COMP_LOOP_3_acc_10_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_103 ) begin
      COMP_LOOP_slc_COMP_LOOP_acc_12_8_itm <= readslicef_9_1_8(COMP_LOOP_acc_12_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_sva <= 10'b0000000000;
    end
    else if ( mux_170_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_1_cse_sva <= nl_COMP_LOOP_acc_1_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= 10'b0000000000;
    end
    else if ( mux_171_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_10_cse_10_1_sva <= readslicef_11_10_1(COMP_LOOP_4_acc_10_nl);
    end
  end
  always @(posedge clk) begin
    if ( mux_172_nl | (fsm_output[7]) ) begin
      COMP_LOOP_1_slc_COMP_LOOP_acc_10_itm <= readslicef_11_1_10(COMP_LOOP_1_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_103 ) begin
      reg_COMP_LOOP_k_10_2_ftd <= z_out[7:0];
    end
  end
  always @(posedge clk) begin
    if ( ~(or_dcpl_16 | (fsm_output[1:0]!=2'b11) | or_dcpl_23) ) begin
      tmp_8_sva <= twiddle_rsc_0_0_i_q_d;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_tmp_lshift_ncse_sva <= 10'b0000000000;
    end
    else if ( and_dcpl_33 | and_dcpl_70 ) begin
      COMP_LOOP_2_tmp_lshift_ncse_sva <= MUX_v_10_2_2(z_out_6, (z_out_3[9:0]), and_dcpl_70);
    end
  end
  always @(posedge clk) begin
    if ( COMP_LOOP_1_acc_8_itm_mx0c0 | COMP_LOOP_1_acc_8_itm_mx0c1 | COMP_LOOP_1_acc_8_itm_mx0c2
        | COMP_LOOP_1_acc_8_itm_mx0c3 | and_dcpl_70 | and_dcpl_71 | COMP_LOOP_1_acc_8_itm_mx0c6
        | COMP_LOOP_1_acc_8_itm_mx0c7 | and_dcpl_87 | COMP_LOOP_1_acc_8_itm_mx0c9
        | and_dcpl_44 | and_dcpl_88 | COMP_LOOP_1_acc_8_itm_mx0c12 | and_dcpl_89
        | COMP_LOOP_1_acc_8_itm_mx0c14 ) begin
      COMP_LOOP_1_acc_8_itm <= MUX1HOT_v_64_8_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d,
          vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, COMP_LOOP_acc_14_nl, twiddle_rsc_0_3_i_q_d,
          z_out_3, COMP_LOOP_1_modulo_cmp_return_rsc_z, {COMP_LOOP_or_nl , COMP_LOOP_or_1_nl
          , COMP_LOOP_or_2_nl , COMP_LOOP_or_3_nl , COMP_LOOP_or_8_nl , and_dcpl_71
          , COMP_LOOP_or_9_nl , COMP_LOOP_1_acc_8_itm_mx0c7});
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_195_nl & and_dcpl) ) begin
      COMP_LOOP_tmp_mux1h_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
          twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, {and_131_nl , and_134_nl
          , and_137_nl , and_140_nl});
    end
  end
  always @(posedge clk) begin
    if ( mux_201_nl | (fsm_output[7]) ) begin
      COMP_LOOP_tmp_mux_itm <= MUX_v_64_2_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_2_i_q_d,
          and_147_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~((~(COMP_LOOP_tmp_COMP_LOOP_tmp_nor_cse | ((COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]==2'b10))
        | ((COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]==2'b11)) | and_dcpl_71)) | (mux_204_nl
        & (~ (fsm_output[7])))) ) begin
      COMP_LOOP_tmp_mux1h_1_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_0_i_q_d,
          twiddle_rsc_0_2_i_q_d, COMP_LOOP_1_acc_8_itm, {and_dcpl_71 , COMP_LOOP_tmp_and_nl
          , COMP_LOOP_tmp_and_2_nl , COMP_LOOP_tmp_and_3_nl});
    end
  end
  assign VEC_LOOP_j_not_1_nl = ~ VEC_LOOP_j_10_0_sva_9_0_mx0c0;
  assign nor_80_nl = ~((fsm_output[1]) | (fsm_output[6]) | (fsm_output[2]) | (fsm_output[3])
      | (fsm_output[4]));
  assign mux_52_nl = MUX_s_1_2_2(nor_80_nl, and_186_cse, fsm_output[5]);
  assign nand_nl = ~(mux_52_nl & (fsm_output[0]) & (~ (fsm_output[7])));
  assign or_211_nl = (fsm_output[5:1]!=5'b00001);
  assign nand_18_nl = ~((fsm_output[5]) & (~((fsm_output[4:0]==5'b11111))));
  assign mux_nl = MUX_s_1_2_2(or_211_nl, nand_18_nl, fsm_output[6]);
  assign nl_COMP_LOOP_acc_psp_sva  = (VEC_LOOP_j_10_0_sva_9_0[9:2]) + COMP_LOOP_k_10_2_sva_7_0;
  assign nl_COMP_LOOP_acc_1_cse_2_sva  = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_2_sva_7_0
      , 2'b01});
  assign and_170_nl = (fsm_output[4:0]==5'b11111);
  assign mux_160_nl = MUX_s_1_2_2(not_tmp_4, and_170_nl, fsm_output[5]);
  assign nl_COMP_LOOP_2_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_2_sva_7_0
      , 2'b01}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_2_acc_10_nl = nl_COMP_LOOP_2_acc_10_nl[10:0];
  assign and_169_nl = (fsm_output[4:1]==4'b1111);
  assign mux_161_nl = MUX_s_1_2_2(not_tmp_4, and_169_nl, fsm_output[5]);
  assign nl_COMP_LOOP_3_acc_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + conv_u2s_10_11({COMP_LOOP_k_10_2_sva_7_0 , 2'b10}) + 11'b00000000001;
  assign COMP_LOOP_3_acc_nl = nl_COMP_LOOP_3_acc_nl[10:0];
  assign nl_COMP_LOOP_acc_11_psp_sva  = (VEC_LOOP_j_10_0_sva_9_0[9:1]) + ({COMP_LOOP_k_10_2_sva_7_0
      , 1'b1});
  assign mux_163_nl = MUX_s_1_2_2(and_dcpl_22, mux_tmp_155, fsm_output[1]);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, (fsm_output[6]), fsm_output[5]);
  assign nl_COMP_LOOP_3_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_2_sva_7_0
      , 2'b10}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_3_acc_10_nl = nl_COMP_LOOP_3_acc_10_nl[10:0];
  assign mux_165_nl = MUX_s_1_2_2(and_dcpl_22, mux_tmp_53, fsm_output[0]);
  assign mux_166_nl = MUX_s_1_2_2(mux_165_nl, mux_tmp_155, fsm_output[1]);
  assign mux_167_nl = MUX_s_1_2_2(mux_166_nl, (fsm_output[6]), fsm_output[5]);
  assign nl_COMP_LOOP_acc_12_nl = ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:3]))})
      + conv_u2u_8_9(COMP_LOOP_k_10_2_sva_7_0) + 9'b000000001;
  assign COMP_LOOP_acc_12_nl = nl_COMP_LOOP_acc_12_nl[8:0];
  assign nl_COMP_LOOP_acc_1_cse_sva  = VEC_LOOP_j_10_0_sva_9_0 + ({COMP_LOOP_k_10_2_sva_7_0
      , 2'b11});
  assign and_166_nl = or_205_cse & (fsm_output[6]) & (fsm_output[4]) & (fsm_output[2])
      & (fsm_output[3]);
  assign mux_170_nl = MUX_s_1_2_2(not_tmp_94, and_166_nl, fsm_output[5]);
  assign nl_COMP_LOOP_4_acc_10_nl = conv_u2u_10_11(VEC_LOOP_j_10_0_sva_9_0) + conv_u2u_10_11({COMP_LOOP_k_10_2_sva_7_0
      , 2'b11}) + STAGE_LOOP_lshift_psp_sva;
  assign COMP_LOOP_4_acc_10_nl = nl_COMP_LOOP_4_acc_10_nl[10:0];
  assign mux_171_nl = MUX_s_1_2_2(not_tmp_94, nor_tmp_7, fsm_output[5]);
  assign nl_COMP_LOOP_1_acc_nl = ({z_out , 2'b00}) + ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))})
      + 11'b00000000001;
  assign COMP_LOOP_1_acc_nl = nl_COMP_LOOP_1_acc_nl[10:0];
  assign mux_172_nl = MUX_s_1_2_2(not_tmp_94, and_186_cse, fsm_output[5]);
  assign COMP_LOOP_mux1h_33_nl = MUX1HOT_v_64_4_2(COMP_LOOP_1_acc_8_itm, tmp_3_lpi_4_dfm_mx0,
      tmp_5_lpi_4_dfm_mx0, tmp_7_lpi_4_dfm_mx0, {and_328_cse , and_222_cse , and_227_cse
      , and_230_cse});
  assign nl_COMP_LOOP_acc_14_nl = COMP_LOOP_mux_36_cse + COMP_LOOP_mux1h_33_nl;
  assign COMP_LOOP_acc_14_nl = nl_COMP_LOOP_acc_14_nl[63:0];
  assign COMP_LOOP_or_nl = COMP_LOOP_1_acc_8_itm_mx0c0 | ((~((VEC_LOOP_j_10_0_sva_9_0[0])
      | (COMP_LOOP_acc_11_psp_sva[0]))) & and_dcpl_44);
  assign COMP_LOOP_or_1_nl = COMP_LOOP_1_acc_8_itm_mx0c1 | ((VEC_LOOP_j_10_0_sva_9_0[0])
      & (~ (COMP_LOOP_acc_11_psp_sva[0])) & and_dcpl_44);
  assign COMP_LOOP_or_2_nl = COMP_LOOP_1_acc_8_itm_mx0c2 | ((COMP_LOOP_acc_11_psp_sva[0])
      & (~ (VEC_LOOP_j_10_0_sva_9_0[0])) & and_dcpl_44);
  assign COMP_LOOP_or_3_nl = COMP_LOOP_1_acc_8_itm_mx0c3 | ((VEC_LOOP_j_10_0_sva_9_0[0])
      & (COMP_LOOP_acc_11_psp_sva[0]) & and_dcpl_44);
  assign COMP_LOOP_or_8_nl = and_dcpl_70 | and_dcpl_87 | and_dcpl_88 | and_dcpl_89;
  assign COMP_LOOP_or_9_nl = COMP_LOOP_1_acc_8_itm_mx0c6 | COMP_LOOP_1_acc_8_itm_mx0c9
      | COMP_LOOP_1_acc_8_itm_mx0c12 | COMP_LOOP_1_acc_8_itm_mx0c14;
  assign and_131_nl = and_dcpl_128 & and_dcpl_125 & (COMP_LOOP_2_tmp_mul_idiv_sva_1_0==2'b00);
  assign and_134_nl = and_dcpl_128 & and_dcpl_125 & (COMP_LOOP_2_tmp_mul_idiv_sva_1_0==2'b01);
  assign and_137_nl = and_dcpl_128 & and_dcpl_125 & (COMP_LOOP_2_tmp_mul_idiv_sva_1_0==2'b10);
  assign and_140_nl = and_dcpl_128 & and_dcpl_125 & (COMP_LOOP_2_tmp_mul_idiv_sva_1_0==2'b11);
  assign or_202_nl = (fsm_output[4:3]!=2'b00);
  assign mux_194_nl = MUX_s_1_2_2(or_202_nl, or_tmp_34, or_205_cse);
  assign mux_195_nl = MUX_s_1_2_2(mux_194_nl, (~ (fsm_output[4])), fsm_output[5]);
  assign and_147_nl = and_dcpl_127 & (~ (fsm_output[6])) & (COMP_LOOP_3_tmp_mul_idiv_sva[0])
      & and_dcpl_43;
  assign mux_199_nl = MUX_s_1_2_2(and_dcpl_72, (fsm_output[4]), fsm_output[6]);
  assign mux_197_nl = MUX_s_1_2_2((~ or_tmp_34), (fsm_output[4]), fsm_output[6]);
  assign mux_196_nl = MUX_s_1_2_2((~ or_tmp_34), or_tmp_10, fsm_output[6]);
  assign mux_198_nl = MUX_s_1_2_2(mux_197_nl, mux_196_nl, fsm_output[0]);
  assign mux_200_nl = MUX_s_1_2_2(mux_199_nl, mux_198_nl, fsm_output[1]);
  assign mux_201_nl = MUX_s_1_2_2(mux_200_nl, (fsm_output[6]), fsm_output[5]);
  assign COMP_LOOP_tmp_and_nl = COMP_LOOP_tmp_COMP_LOOP_tmp_nor_cse & and_149_m1c;
  assign COMP_LOOP_tmp_and_2_nl = (COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]==2'b10) &
      and_149_m1c;
  assign COMP_LOOP_tmp_and_3_nl = (COMP_LOOP_2_tmp_lshift_ncse_sva[1:0]==2'b11) &
      and_149_m1c;
  assign or_25_nl = (fsm_output[6]) | (fsm_output[3]) | (fsm_output[4]);
  assign mux_203_nl = MUX_s_1_2_2(or_25_nl, or_dcpl_16, and_188_cse);
  assign nand_2_nl = ~((fsm_output[6]) & (fsm_output[4]));
  assign nand_3_nl = ~((fsm_output[6]) & or_tmp_10);
  assign mux_202_nl = MUX_s_1_2_2(nand_2_nl, nand_3_nl, fsm_output[1]);
  assign mux_204_nl = MUX_s_1_2_2(mux_203_nl, mux_202_nl, fsm_output[5]);
  assign and_327_nl = and_dcpl_80 & (fsm_output[7]) & (~ (fsm_output[0])) & nor_82_cse
      & and_dcpl_20;
  assign COMP_LOOP_mux_35_nl = MUX_v_8_2_2(COMP_LOOP_k_10_2_sva_7_0, ({4'b0001 ,
      (~ z_out_5)}), and_327_nl);
  assign nl_z_out = conv_u2u_8_9(COMP_LOOP_mux_35_nl) + 9'b000000001;
  assign z_out = nl_z_out[8:0];
  assign COMP_LOOP_or_7_tmp = and_222_cse | and_227_cse | and_230_cse;
  assign COMP_LOOP_COMP_LOOP_nor_nl = ~((VEC_LOOP_j_10_0_sva_9_0[1:0]!=2'b00) | COMP_LOOP_or_7_tmp);
  assign COMP_LOOP_and_5_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]==2'b10) & (~ COMP_LOOP_or_7_tmp);
  assign COMP_LOOP_and_6_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]==2'b01) & (~ COMP_LOOP_or_7_tmp);
  assign COMP_LOOP_and_7_nl = (VEC_LOOP_j_10_0_sva_9_0[1:0]==2'b11) & (~ COMP_LOOP_or_7_tmp);
  assign COMP_LOOP_mux_36_cse = MUX1HOT_v_64_5_2(vec_rsc_0_0_i_q_d, vec_rsc_0_2_i_q_d,
      vec_rsc_0_1_i_q_d, vec_rsc_0_3_i_q_d, COMP_LOOP_1_acc_8_itm, {COMP_LOOP_COMP_LOOP_nor_nl
      , COMP_LOOP_and_5_nl , COMP_LOOP_and_6_nl , COMP_LOOP_and_7_nl , COMP_LOOP_or_7_tmp});
  assign COMP_LOOP_tmp_mux1h_15_nl = MUX1HOT_v_54_4_2((tmp_8_sva[63:10]), (COMP_LOOP_tmp_mux1h_itm[63:10]),
      (COMP_LOOP_tmp_mux_itm[63:10]), (COMP_LOOP_tmp_mux1h_1_itm[63:10]), {and_dcpl_226
      , and_dcpl_229 , and_dcpl_234 , and_dcpl_237});
  assign COMP_LOOP_tmp_and_8_nl = MUX_v_54_2_2(54'b000000000000000000000000000000000000000000000000000000,
      COMP_LOOP_tmp_mux1h_15_nl, COMP_LOOP_tmp_nor_itm);
  assign COMP_LOOP_tmp_mux1h_16_nl = MUX1HOT_v_10_7_2(({1'b0 , (z_out_7[8:0])}),
      (tmp_8_sva[9:0]), (COMP_LOOP_tmp_mux1h_itm[9:0]), (COMP_LOOP_tmp_mux_itm[9:0]),
      (COMP_LOOP_tmp_mux1h_1_itm[9:0]), z_out_6, COMP_LOOP_2_tmp_lshift_ncse_sva,
      {and_dcpl_220 , and_dcpl_226 , and_dcpl_229 , and_dcpl_234 , and_dcpl_237 ,
      and_dcpl_238 , and_328_cse});
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_and_1_nl = MUX_v_54_2_2(54'b000000000000000000000000000000000000000000000000000000,
      (COMP_LOOP_1_modulo_cmp_return_rsc_z[63:10]), COMP_LOOP_tmp_nor_itm);
  assign COMP_LOOP_tmp_or_7_nl = and_dcpl_238 | and_328_cse;
  assign COMP_LOOP_tmp_mux1h_17_nl = MUX1HOT_v_8_3_2(({1'b0 , (COMP_LOOP_k_10_2_sva_7_0[7:1])}),
      (COMP_LOOP_1_modulo_cmp_return_rsc_z[9:2]), COMP_LOOP_k_10_2_sva_7_0, {and_dcpl_220
      , COMP_LOOP_tmp_or_2_ssc , COMP_LOOP_tmp_or_7_nl});
  assign COMP_LOOP_tmp_mux_5_nl = MUX_s_1_2_2((COMP_LOOP_k_10_2_sva_7_0[0]), (COMP_LOOP_1_modulo_cmp_return_rsc_z[1]),
      COMP_LOOP_tmp_or_2_ssc);
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl = (COMP_LOOP_tmp_mux_5_nl & (~ and_dcpl_238))
      | and_328_cse;
  assign COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl = (COMP_LOOP_1_modulo_cmp_return_rsc_z[0])
      | and_dcpl_220 | and_dcpl_238 | and_328_cse;
  assign nl_z_out_3 = ({COMP_LOOP_tmp_and_8_nl , COMP_LOOP_tmp_mux1h_16_nl}) * ({COMP_LOOP_tmp_COMP_LOOP_tmp_and_1_nl
      , COMP_LOOP_tmp_mux1h_17_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_or_3_nl , COMP_LOOP_tmp_COMP_LOOP_tmp_or_4_nl});
  assign z_out_3 = nl_z_out_3[63:0];
  assign COMP_LOOP_mux_38_nl = MUX_v_11_2_2(({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[10:1]))}),
      STAGE_LOOP_lshift_psp_sva, and_dcpl_256);
  assign COMP_LOOP_COMP_LOOP_nand_1_nl = ~(and_dcpl_256 & (~((~ (fsm_output[5]))
      & (fsm_output[1]) & and_dcpl_175 & nor_82_cse & and_dcpl_20)));
  assign COMP_LOOP_mux_39_nl = MUX_v_10_2_2(({COMP_LOOP_k_10_2_sva_7_0 , 2'b01}),
      VEC_LOOP_j_10_0_sva_9_0, and_dcpl_256);
  assign nl_acc_3_nl = ({COMP_LOOP_mux_38_nl , COMP_LOOP_COMP_LOOP_nand_1_nl}) +
      conv_u2u_11_12({COMP_LOOP_mux_39_nl , 1'b1});
  assign acc_3_nl = nl_acc_3_nl[11:0];
  assign z_out_4 = readslicef_12_11_1(acc_3_nl);
  assign STAGE_LOOP_mux_4_nl = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, (~ STAGE_LOOP_i_3_0_sva),
      and_dcpl_267);
  assign nl_z_out_5 = STAGE_LOOP_mux_4_nl + ({1'b1 , (~ and_dcpl_267) , 2'b11});
  assign z_out_5 = nl_z_out_5[3:0];

  function automatic [9:0] MUX1HOT_v_10_7_2;
    input [9:0] input_6;
    input [9:0] input_5;
    input [9:0] input_4;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [6:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    result = result | ( input_3 & {10{sel[3]}});
    result = result | ( input_4 & {10{sel[4]}});
    result = result | ( input_5 & {10{sel[5]}});
    result = result | ( input_6 & {10{sel[6]}});
    MUX1HOT_v_10_7_2 = result;
  end
  endfunction


  function automatic [53:0] MUX1HOT_v_54_4_2;
    input [53:0] input_3;
    input [53:0] input_2;
    input [53:0] input_1;
    input [53:0] input_0;
    input [3:0] sel;
    reg [53:0] result;
  begin
    result = input_0 & {54{sel[0]}};
    result = result | ( input_1 & {54{sel[1]}});
    result = result | ( input_2 & {54{sel[2]}});
    result = result | ( input_3 & {54{sel[3]}});
    MUX1HOT_v_54_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_8_2;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [7:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    MUX1HOT_v_64_8_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_3_2;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [2:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    MUX1HOT_v_8_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_4_2;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [3:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    MUX1HOT_v_8_4_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_8_2;
    input [7:0] input_7;
    input [7:0] input_6;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [7:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    result = result | ( input_5 & {8{sel[5]}});
    result = result | ( input_6 & {8{sel[6]}});
    result = result | ( input_7 & {8{sel[7]}});
    MUX1HOT_v_8_8_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [53:0] MUX_v_54_2_2;
    input [53:0] input_0;
    input [53:0] input_1;
    input [0:0] sel;
    reg [53:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_54_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_4_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [63:0] input_2;
    input [63:0] input_3;
    input [1:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_64_4_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, vec_rsc_0_2_wadr, vec_rsc_0_2_d, vec_rsc_0_2_we,
      vec_rsc_0_2_radr, vec_rsc_0_2_q, vec_rsc_triosy_0_2_lz, vec_rsc_0_3_wadr, vec_rsc_0_3_d,
      vec_rsc_0_3_we, vec_rsc_0_3_radr, vec_rsc_0_3_q, vec_rsc_triosy_0_3_lz, p_rsc_dat,
      p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz, twiddle_rsc_0_0_radr, twiddle_rsc_0_0_q,
      twiddle_rsc_triosy_0_0_lz, twiddle_rsc_0_1_radr, twiddle_rsc_0_1_q, twiddle_rsc_triosy_0_1_lz,
      twiddle_rsc_0_2_radr, twiddle_rsc_0_2_q, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_0_3_radr,
      twiddle_rsc_0_3_q, twiddle_rsc_triosy_0_3_lz
);
  input clk;
  input rst;
  output [7:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [7:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [7:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [7:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  output [7:0] vec_rsc_0_2_wadr;
  output [63:0] vec_rsc_0_2_d;
  output vec_rsc_0_2_we;
  output [7:0] vec_rsc_0_2_radr;
  input [63:0] vec_rsc_0_2_q;
  output vec_rsc_triosy_0_2_lz;
  output [7:0] vec_rsc_0_3_wadr;
  output [63:0] vec_rsc_0_3_d;
  output vec_rsc_0_3_we;
  output [7:0] vec_rsc_0_3_radr;
  input [63:0] vec_rsc_0_3_q;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  output [7:0] twiddle_rsc_0_0_radr;
  input [63:0] twiddle_rsc_0_0_q;
  output twiddle_rsc_triosy_0_0_lz;
  output [7:0] twiddle_rsc_0_1_radr;
  input [63:0] twiddle_rsc_0_1_q;
  output twiddle_rsc_triosy_0_1_lz;
  output [7:0] twiddle_rsc_0_2_radr;
  input [63:0] twiddle_rsc_0_2_q;
  output twiddle_rsc_triosy_0_2_lz;
  output [7:0] twiddle_rsc_0_3_radr;
  input [63:0] twiddle_rsc_0_3_q;
  output twiddle_rsc_triosy_0_3_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_q_d;
  wire vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_q_d;
  wire vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_0_i_q_d;
  wire [7:0] twiddle_rsc_0_0_i_radr_d;
  wire twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_1_i_q_d;
  wire twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_2_i_q_d;
  wire [7:0] twiddle_rsc_0_2_i_radr_d;
  wire twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_3_i_q_d;
  wire twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [7:0] vec_rsc_0_0_i_radr_d_iff;
  wire [7:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;
  wire vec_rsc_0_2_i_we_d_iff;
  wire vec_rsc_0_3_i_we_d_iff;
  wire [7:0] twiddle_rsc_0_1_i_radr_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen vec_rsc_0_2_i
      (
      .q(vec_rsc_0_2_q),
      .radr(vec_rsc_0_2_radr),
      .we(vec_rsc_0_2_we),
      .d(vec_rsc_0_2_d),
      .wadr(vec_rsc_0_2_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_2_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_8_64_256_256_64_1_gen vec_rsc_0_3_i
      (
      .q(vec_rsc_0_3_q),
      .radr(vec_rsc_0_3_radr),
      .we(vec_rsc_0_3_we),
      .d(vec_rsc_0_3_d),
      .wadr(vec_rsc_0_3_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_3_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_13_8_64_256_256_64_1_gen twiddle_rsc_0_0_i
      (
      .q(twiddle_rsc_0_0_q),
      .radr(twiddle_rsc_0_0_radr),
      .q_d(twiddle_rsc_0_0_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_8_64_256_256_64_1_gen twiddle_rsc_0_1_i
      (
      .q(twiddle_rsc_0_1_q),
      .radr(twiddle_rsc_0_1_radr),
      .q_d(twiddle_rsc_0_1_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_8_64_256_256_64_1_gen twiddle_rsc_0_2_i
      (
      .q(twiddle_rsc_0_2_q),
      .radr(twiddle_rsc_0_2_radr),
      .q_d(twiddle_rsc_0_2_i_q_d),
      .radr_d(twiddle_rsc_0_2_i_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_16_8_64_256_256_64_1_gen twiddle_rsc_0_3_i
      (
      .q(twiddle_rsc_0_3_q),
      .radr(twiddle_rsc_0_3_radr),
      .q_d(twiddle_rsc_0_3_i_q_d),
      .radr_d(twiddle_rsc_0_1_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .twiddle_rsc_triosy_0_2_lz(twiddle_rsc_triosy_0_2_lz),
      .twiddle_rsc_triosy_0_3_lz(twiddle_rsc_triosy_0_3_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_q_d(vec_rsc_0_2_i_q_d),
      .vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_q_d(vec_rsc_0_3_i_q_d),
      .vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_0_i_q_d(twiddle_rsc_0_0_i_q_d),
      .twiddle_rsc_0_0_i_radr_d(twiddle_rsc_0_0_i_radr_d),
      .twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_1_i_q_d(twiddle_rsc_0_1_i_q_d),
      .twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_2_i_q_d(twiddle_rsc_0_2_i_q_d),
      .twiddle_rsc_0_2_i_radr_d(twiddle_rsc_0_2_i_radr_d),
      .twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_3_i_q_d(twiddle_rsc_0_3_i_q_d),
      .twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff),
      .vec_rsc_0_2_i_we_d_pff(vec_rsc_0_2_i_we_d_iff),
      .vec_rsc_0_3_i_we_d_pff(vec_rsc_0_3_i_we_d_iff),
      .twiddle_rsc_0_1_i_radr_d_pff(twiddle_rsc_0_1_i_radr_d_iff)
    );
endmodule



