-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   yl7897@newnano.poly.edu
--  Generated date: Thu Jun 10 12:10:18 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen;

ARCHITECTURE v6 OF peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen;

ARCHITECTURE v6 OF peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen;

ARCHITECTURE v6 OF peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen
    IS
  PORT(
    qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    adrb_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    qb_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    readB_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen;

ARCHITECTURE v6 OF peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  qb_d <= qb;
  adrb <= (adrb_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    main_C_7_tr0 : IN STD_LOGIC;
    MODEXP_WHILE_C_24_tr0 : IN STD_LOGIC;
    TWIDDLE_LOOP_C_24_tr0 : IN STD_LOGIC;
    COPY_LOOP_C_2_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_76_tr0 : IN STD_LOGIC;
    COPY_LOOP_1_C_2_tr0 : IN STD_LOGIC;
    STAGE_LOOP_C_0_tr0 : IN STD_LOGIC
  );
END peaceNTT_core_core_fsm;

ARCHITECTURE v6 OF peaceNTT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for peaceNTT_core_core_fsm_1
  TYPE peaceNTT_core_core_fsm_1_ST IS (main_C_0, main_C_1, main_C_2, main_C_3, main_C_4,
      main_C_5, main_C_6, main_C_7, MODEXP_WHILE_C_0, MODEXP_WHILE_C_1, MODEXP_WHILE_C_2,
      MODEXP_WHILE_C_3, MODEXP_WHILE_C_4, MODEXP_WHILE_C_5, MODEXP_WHILE_C_6, MODEXP_WHILE_C_7,
      MODEXP_WHILE_C_8, MODEXP_WHILE_C_9, MODEXP_WHILE_C_10, MODEXP_WHILE_C_11, MODEXP_WHILE_C_12,
      MODEXP_WHILE_C_13, MODEXP_WHILE_C_14, MODEXP_WHILE_C_15, MODEXP_WHILE_C_16,
      MODEXP_WHILE_C_17, MODEXP_WHILE_C_18, MODEXP_WHILE_C_19, MODEXP_WHILE_C_20,
      MODEXP_WHILE_C_21, MODEXP_WHILE_C_22, MODEXP_WHILE_C_23, MODEXP_WHILE_C_24,
      TWIDDLE_LOOP_C_0, TWIDDLE_LOOP_C_1, TWIDDLE_LOOP_C_2, TWIDDLE_LOOP_C_3, TWIDDLE_LOOP_C_4,
      TWIDDLE_LOOP_C_5, TWIDDLE_LOOP_C_6, TWIDDLE_LOOP_C_7, TWIDDLE_LOOP_C_8, TWIDDLE_LOOP_C_9,
      TWIDDLE_LOOP_C_10, TWIDDLE_LOOP_C_11, TWIDDLE_LOOP_C_12, TWIDDLE_LOOP_C_13,
      TWIDDLE_LOOP_C_14, TWIDDLE_LOOP_C_15, TWIDDLE_LOOP_C_16, TWIDDLE_LOOP_C_17,
      TWIDDLE_LOOP_C_18, TWIDDLE_LOOP_C_19, TWIDDLE_LOOP_C_20, TWIDDLE_LOOP_C_21,
      TWIDDLE_LOOP_C_22, TWIDDLE_LOOP_C_23, TWIDDLE_LOOP_C_24, COPY_LOOP_C_0, COPY_LOOP_C_1,
      COPY_LOOP_C_2, COMP_LOOP_C_0, COMP_LOOP_C_1, COMP_LOOP_C_2, COMP_LOOP_C_3,
      COMP_LOOP_C_4, COMP_LOOP_C_5, COMP_LOOP_C_6, COMP_LOOP_C_7, COMP_LOOP_C_8,
      COMP_LOOP_C_9, COMP_LOOP_C_10, COMP_LOOP_C_11, COMP_LOOP_C_12, COMP_LOOP_C_13,
      COMP_LOOP_C_14, COMP_LOOP_C_15, COMP_LOOP_C_16, COMP_LOOP_C_17, COMP_LOOP_C_18,
      COMP_LOOP_C_19, COMP_LOOP_C_20, COMP_LOOP_C_21, COMP_LOOP_C_22, COMP_LOOP_C_23,
      COMP_LOOP_C_24, COMP_LOOP_C_25, COMP_LOOP_C_26, COMP_LOOP_C_27, COMP_LOOP_C_28,
      COMP_LOOP_C_29, COMP_LOOP_C_30, COMP_LOOP_C_31, COMP_LOOP_C_32, COMP_LOOP_C_33,
      COMP_LOOP_C_34, COMP_LOOP_C_35, COMP_LOOP_C_36, COMP_LOOP_C_37, COMP_LOOP_C_38,
      COMP_LOOP_C_39, COMP_LOOP_C_40, COMP_LOOP_C_41, COMP_LOOP_C_42, COMP_LOOP_C_43,
      COMP_LOOP_C_44, COMP_LOOP_C_45, COMP_LOOP_C_46, COMP_LOOP_C_47, COMP_LOOP_C_48,
      COMP_LOOP_C_49, COMP_LOOP_C_50, COMP_LOOP_C_51, COMP_LOOP_C_52, COMP_LOOP_C_53,
      COMP_LOOP_C_54, COMP_LOOP_C_55, COMP_LOOP_C_56, COMP_LOOP_C_57, COMP_LOOP_C_58,
      COMP_LOOP_C_59, COMP_LOOP_C_60, COMP_LOOP_C_61, COMP_LOOP_C_62, COMP_LOOP_C_63,
      COMP_LOOP_C_64, COMP_LOOP_C_65, COMP_LOOP_C_66, COMP_LOOP_C_67, COMP_LOOP_C_68,
      COMP_LOOP_C_69, COMP_LOOP_C_70, COMP_LOOP_C_71, COMP_LOOP_C_72, COMP_LOOP_C_73,
      COMP_LOOP_C_74, COMP_LOOP_C_75, COMP_LOOP_C_76, COPY_LOOP_1_C_0, COPY_LOOP_1_C_1,
      COPY_LOOP_1_C_2, STAGE_LOOP_C_0, main_C_8);

  SIGNAL state_var : peaceNTT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : peaceNTT_core_core_fsm_1_ST;

BEGIN
  peaceNTT_core_core_fsm_1 : PROCESS (main_C_7_tr0, MODEXP_WHILE_C_24_tr0, TWIDDLE_LOOP_C_24_tr0,
      COPY_LOOP_C_2_tr0, COMP_LOOP_C_76_tr0, COPY_LOOP_1_C_2_tr0, STAGE_LOOP_C_0_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001");
        state_var_NS <= main_C_2;
      WHEN main_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010");
        state_var_NS <= main_C_3;
      WHEN main_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000011");
        state_var_NS <= main_C_4;
      WHEN main_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100");
        state_var_NS <= main_C_5;
      WHEN main_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000101");
        state_var_NS <= main_C_6;
      WHEN main_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000110");
        state_var_NS <= main_C_7;
      WHEN main_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000111");
        IF ( main_C_7_tr0 = '1' ) THEN
          state_var_NS <= TWIDDLE_LOOP_C_0;
        ELSE
          state_var_NS <= MODEXP_WHILE_C_0;
        END IF;
      WHEN MODEXP_WHILE_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000");
        state_var_NS <= MODEXP_WHILE_C_1;
      WHEN MODEXP_WHILE_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001001");
        state_var_NS <= MODEXP_WHILE_C_2;
      WHEN MODEXP_WHILE_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001010");
        state_var_NS <= MODEXP_WHILE_C_3;
      WHEN MODEXP_WHILE_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001011");
        state_var_NS <= MODEXP_WHILE_C_4;
      WHEN MODEXP_WHILE_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001100");
        state_var_NS <= MODEXP_WHILE_C_5;
      WHEN MODEXP_WHILE_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001101");
        state_var_NS <= MODEXP_WHILE_C_6;
      WHEN MODEXP_WHILE_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001110");
        state_var_NS <= MODEXP_WHILE_C_7;
      WHEN MODEXP_WHILE_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001111");
        state_var_NS <= MODEXP_WHILE_C_8;
      WHEN MODEXP_WHILE_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000");
        state_var_NS <= MODEXP_WHILE_C_9;
      WHEN MODEXP_WHILE_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010001");
        state_var_NS <= MODEXP_WHILE_C_10;
      WHEN MODEXP_WHILE_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010010");
        state_var_NS <= MODEXP_WHILE_C_11;
      WHEN MODEXP_WHILE_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010011");
        state_var_NS <= MODEXP_WHILE_C_12;
      WHEN MODEXP_WHILE_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010100");
        state_var_NS <= MODEXP_WHILE_C_13;
      WHEN MODEXP_WHILE_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010101");
        state_var_NS <= MODEXP_WHILE_C_14;
      WHEN MODEXP_WHILE_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010110");
        state_var_NS <= MODEXP_WHILE_C_15;
      WHEN MODEXP_WHILE_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010111");
        state_var_NS <= MODEXP_WHILE_C_16;
      WHEN MODEXP_WHILE_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011000");
        state_var_NS <= MODEXP_WHILE_C_17;
      WHEN MODEXP_WHILE_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011001");
        state_var_NS <= MODEXP_WHILE_C_18;
      WHEN MODEXP_WHILE_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011010");
        state_var_NS <= MODEXP_WHILE_C_19;
      WHEN MODEXP_WHILE_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011011");
        state_var_NS <= MODEXP_WHILE_C_20;
      WHEN MODEXP_WHILE_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011100");
        state_var_NS <= MODEXP_WHILE_C_21;
      WHEN MODEXP_WHILE_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011101");
        state_var_NS <= MODEXP_WHILE_C_22;
      WHEN MODEXP_WHILE_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011110");
        state_var_NS <= MODEXP_WHILE_C_23;
      WHEN MODEXP_WHILE_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011111");
        state_var_NS <= MODEXP_WHILE_C_24;
      WHEN MODEXP_WHILE_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000");
        IF ( MODEXP_WHILE_C_24_tr0 = '1' ) THEN
          state_var_NS <= TWIDDLE_LOOP_C_0;
        ELSE
          state_var_NS <= MODEXP_WHILE_C_0;
        END IF;
      WHEN TWIDDLE_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100001");
        state_var_NS <= TWIDDLE_LOOP_C_1;
      WHEN TWIDDLE_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100010");
        state_var_NS <= TWIDDLE_LOOP_C_2;
      WHEN TWIDDLE_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100011");
        state_var_NS <= TWIDDLE_LOOP_C_3;
      WHEN TWIDDLE_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100100");
        state_var_NS <= TWIDDLE_LOOP_C_4;
      WHEN TWIDDLE_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100101");
        state_var_NS <= TWIDDLE_LOOP_C_5;
      WHEN TWIDDLE_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100110");
        state_var_NS <= TWIDDLE_LOOP_C_6;
      WHEN TWIDDLE_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100111");
        state_var_NS <= TWIDDLE_LOOP_C_7;
      WHEN TWIDDLE_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101000");
        state_var_NS <= TWIDDLE_LOOP_C_8;
      WHEN TWIDDLE_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101001");
        state_var_NS <= TWIDDLE_LOOP_C_9;
      WHEN TWIDDLE_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101010");
        state_var_NS <= TWIDDLE_LOOP_C_10;
      WHEN TWIDDLE_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101011");
        state_var_NS <= TWIDDLE_LOOP_C_11;
      WHEN TWIDDLE_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101100");
        state_var_NS <= TWIDDLE_LOOP_C_12;
      WHEN TWIDDLE_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101101");
        state_var_NS <= TWIDDLE_LOOP_C_13;
      WHEN TWIDDLE_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101110");
        state_var_NS <= TWIDDLE_LOOP_C_14;
      WHEN TWIDDLE_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101111");
        state_var_NS <= TWIDDLE_LOOP_C_15;
      WHEN TWIDDLE_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110000");
        state_var_NS <= TWIDDLE_LOOP_C_16;
      WHEN TWIDDLE_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110001");
        state_var_NS <= TWIDDLE_LOOP_C_17;
      WHEN TWIDDLE_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110010");
        state_var_NS <= TWIDDLE_LOOP_C_18;
      WHEN TWIDDLE_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110011");
        state_var_NS <= TWIDDLE_LOOP_C_19;
      WHEN TWIDDLE_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110100");
        state_var_NS <= TWIDDLE_LOOP_C_20;
      WHEN TWIDDLE_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110101");
        state_var_NS <= TWIDDLE_LOOP_C_21;
      WHEN TWIDDLE_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110110");
        state_var_NS <= TWIDDLE_LOOP_C_22;
      WHEN TWIDDLE_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110111");
        state_var_NS <= TWIDDLE_LOOP_C_23;
      WHEN TWIDDLE_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111000");
        state_var_NS <= TWIDDLE_LOOP_C_24;
      WHEN TWIDDLE_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111001");
        IF ( TWIDDLE_LOOP_C_24_tr0 = '1' ) THEN
          state_var_NS <= COPY_LOOP_C_0;
        ELSE
          state_var_NS <= TWIDDLE_LOOP_C_0;
        END IF;
      WHEN COPY_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111010");
        state_var_NS <= COPY_LOOP_C_1;
      WHEN COPY_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111011");
        state_var_NS <= COPY_LOOP_C_2;
      WHEN COPY_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111100");
        IF ( COPY_LOOP_C_2_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_0;
        ELSE
          state_var_NS <= COPY_LOOP_C_0;
        END IF;
      WHEN COMP_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111101");
        state_var_NS <= COMP_LOOP_C_1;
      WHEN COMP_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111110");
        state_var_NS <= COMP_LOOP_C_2;
      WHEN COMP_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111111");
        state_var_NS <= COMP_LOOP_C_3;
      WHEN COMP_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000");
        state_var_NS <= COMP_LOOP_C_4;
      WHEN COMP_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000001");
        state_var_NS <= COMP_LOOP_C_5;
      WHEN COMP_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000010");
        state_var_NS <= COMP_LOOP_C_6;
      WHEN COMP_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000011");
        state_var_NS <= COMP_LOOP_C_7;
      WHEN COMP_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000100");
        state_var_NS <= COMP_LOOP_C_8;
      WHEN COMP_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000101");
        state_var_NS <= COMP_LOOP_C_9;
      WHEN COMP_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000110");
        state_var_NS <= COMP_LOOP_C_10;
      WHEN COMP_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000111");
        state_var_NS <= COMP_LOOP_C_11;
      WHEN COMP_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001000");
        state_var_NS <= COMP_LOOP_C_12;
      WHEN COMP_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001001");
        state_var_NS <= COMP_LOOP_C_13;
      WHEN COMP_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001010");
        state_var_NS <= COMP_LOOP_C_14;
      WHEN COMP_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001011");
        state_var_NS <= COMP_LOOP_C_15;
      WHEN COMP_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001100");
        state_var_NS <= COMP_LOOP_C_16;
      WHEN COMP_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001101");
        state_var_NS <= COMP_LOOP_C_17;
      WHEN COMP_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001110");
        state_var_NS <= COMP_LOOP_C_18;
      WHEN COMP_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001111");
        state_var_NS <= COMP_LOOP_C_19;
      WHEN COMP_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010000");
        state_var_NS <= COMP_LOOP_C_20;
      WHEN COMP_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010001");
        state_var_NS <= COMP_LOOP_C_21;
      WHEN COMP_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010010");
        state_var_NS <= COMP_LOOP_C_22;
      WHEN COMP_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010011");
        state_var_NS <= COMP_LOOP_C_23;
      WHEN COMP_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010100");
        state_var_NS <= COMP_LOOP_C_24;
      WHEN COMP_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010101");
        state_var_NS <= COMP_LOOP_C_25;
      WHEN COMP_LOOP_C_25 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010110");
        state_var_NS <= COMP_LOOP_C_26;
      WHEN COMP_LOOP_C_26 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010111");
        state_var_NS <= COMP_LOOP_C_27;
      WHEN COMP_LOOP_C_27 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011000");
        state_var_NS <= COMP_LOOP_C_28;
      WHEN COMP_LOOP_C_28 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011001");
        state_var_NS <= COMP_LOOP_C_29;
      WHEN COMP_LOOP_C_29 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011010");
        state_var_NS <= COMP_LOOP_C_30;
      WHEN COMP_LOOP_C_30 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011011");
        state_var_NS <= COMP_LOOP_C_31;
      WHEN COMP_LOOP_C_31 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011100");
        state_var_NS <= COMP_LOOP_C_32;
      WHEN COMP_LOOP_C_32 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011101");
        state_var_NS <= COMP_LOOP_C_33;
      WHEN COMP_LOOP_C_33 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011110");
        state_var_NS <= COMP_LOOP_C_34;
      WHEN COMP_LOOP_C_34 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011111");
        state_var_NS <= COMP_LOOP_C_35;
      WHEN COMP_LOOP_C_35 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100000");
        state_var_NS <= COMP_LOOP_C_36;
      WHEN COMP_LOOP_C_36 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100001");
        state_var_NS <= COMP_LOOP_C_37;
      WHEN COMP_LOOP_C_37 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100010");
        state_var_NS <= COMP_LOOP_C_38;
      WHEN COMP_LOOP_C_38 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100011");
        state_var_NS <= COMP_LOOP_C_39;
      WHEN COMP_LOOP_C_39 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100100");
        state_var_NS <= COMP_LOOP_C_40;
      WHEN COMP_LOOP_C_40 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100101");
        state_var_NS <= COMP_LOOP_C_41;
      WHEN COMP_LOOP_C_41 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100110");
        state_var_NS <= COMP_LOOP_C_42;
      WHEN COMP_LOOP_C_42 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100111");
        state_var_NS <= COMP_LOOP_C_43;
      WHEN COMP_LOOP_C_43 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101000");
        state_var_NS <= COMP_LOOP_C_44;
      WHEN COMP_LOOP_C_44 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101001");
        state_var_NS <= COMP_LOOP_C_45;
      WHEN COMP_LOOP_C_45 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101010");
        state_var_NS <= COMP_LOOP_C_46;
      WHEN COMP_LOOP_C_46 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101011");
        state_var_NS <= COMP_LOOP_C_47;
      WHEN COMP_LOOP_C_47 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101100");
        state_var_NS <= COMP_LOOP_C_48;
      WHEN COMP_LOOP_C_48 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101101");
        state_var_NS <= COMP_LOOP_C_49;
      WHEN COMP_LOOP_C_49 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101110");
        state_var_NS <= COMP_LOOP_C_50;
      WHEN COMP_LOOP_C_50 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101111");
        state_var_NS <= COMP_LOOP_C_51;
      WHEN COMP_LOOP_C_51 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110000");
        state_var_NS <= COMP_LOOP_C_52;
      WHEN COMP_LOOP_C_52 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110001");
        state_var_NS <= COMP_LOOP_C_53;
      WHEN COMP_LOOP_C_53 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110010");
        state_var_NS <= COMP_LOOP_C_54;
      WHEN COMP_LOOP_C_54 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110011");
        state_var_NS <= COMP_LOOP_C_55;
      WHEN COMP_LOOP_C_55 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110100");
        state_var_NS <= COMP_LOOP_C_56;
      WHEN COMP_LOOP_C_56 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110101");
        state_var_NS <= COMP_LOOP_C_57;
      WHEN COMP_LOOP_C_57 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110110");
        state_var_NS <= COMP_LOOP_C_58;
      WHEN COMP_LOOP_C_58 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110111");
        state_var_NS <= COMP_LOOP_C_59;
      WHEN COMP_LOOP_C_59 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111000");
        state_var_NS <= COMP_LOOP_C_60;
      WHEN COMP_LOOP_C_60 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111001");
        state_var_NS <= COMP_LOOP_C_61;
      WHEN COMP_LOOP_C_61 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111010");
        state_var_NS <= COMP_LOOP_C_62;
      WHEN COMP_LOOP_C_62 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111011");
        state_var_NS <= COMP_LOOP_C_63;
      WHEN COMP_LOOP_C_63 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111100");
        state_var_NS <= COMP_LOOP_C_64;
      WHEN COMP_LOOP_C_64 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111101");
        state_var_NS <= COMP_LOOP_C_65;
      WHEN COMP_LOOP_C_65 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111110");
        state_var_NS <= COMP_LOOP_C_66;
      WHEN COMP_LOOP_C_66 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111111");
        state_var_NS <= COMP_LOOP_C_67;
      WHEN COMP_LOOP_C_67 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000");
        state_var_NS <= COMP_LOOP_C_68;
      WHEN COMP_LOOP_C_68 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000001");
        state_var_NS <= COMP_LOOP_C_69;
      WHEN COMP_LOOP_C_69 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000010");
        state_var_NS <= COMP_LOOP_C_70;
      WHEN COMP_LOOP_C_70 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000011");
        state_var_NS <= COMP_LOOP_C_71;
      WHEN COMP_LOOP_C_71 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000100");
        state_var_NS <= COMP_LOOP_C_72;
      WHEN COMP_LOOP_C_72 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000101");
        state_var_NS <= COMP_LOOP_C_73;
      WHEN COMP_LOOP_C_73 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000110");
        state_var_NS <= COMP_LOOP_C_74;
      WHEN COMP_LOOP_C_74 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000111");
        state_var_NS <= COMP_LOOP_C_75;
      WHEN COMP_LOOP_C_75 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001000");
        state_var_NS <= COMP_LOOP_C_76;
      WHEN COMP_LOOP_C_76 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001001");
        IF ( COMP_LOOP_C_76_tr0 = '1' ) THEN
          state_var_NS <= COPY_LOOP_1_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN COPY_LOOP_1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001010");
        state_var_NS <= COPY_LOOP_1_C_1;
      WHEN COPY_LOOP_1_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001011");
        state_var_NS <= COPY_LOOP_1_C_2;
      WHEN COPY_LOOP_1_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001100");
        IF ( COPY_LOOP_1_C_2_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP_C_0;
        ELSE
          state_var_NS <= COPY_LOOP_1_C_0;
        END IF;
      WHEN STAGE_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001101");
        IF ( STAGE_LOOP_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_8;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN main_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001110");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000");
        state_var_NS <= main_C_1;
    END CASE;
  END PROCESS peaceNTT_core_core_fsm_1;

  peaceNTT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS peaceNTT_core_core_fsm_1_REG;

END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_core_wait_dp IS
  PORT(
    twiddle_rsc_cgo_iro : IN STD_LOGIC;
    twiddle_rsci_clken_d : OUT STD_LOGIC;
    xt_rsc_cgo_iro : IN STD_LOGIC;
    xt_rsci_clken_d : OUT STD_LOGIC;
    twiddle_rsc_cgo : IN STD_LOGIC;
    xt_rsc_cgo : IN STD_LOGIC
  );
END peaceNTT_core_wait_dp;

ARCHITECTURE v6 OF peaceNTT_core_wait_dp IS
  -- Default Constants

BEGIN
  twiddle_rsci_clken_d <= twiddle_rsc_cgo OR twiddle_rsc_cgo_iro;
  xt_rsci_clken_d <= xt_rsc_cgo OR xt_rsc_cgo_iro;
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    g_rsc_triosy_lz : OUT STD_LOGIC;
    result_rsc_triosy_lz : OUT STD_LOGIC;
    vec_rsci_qb_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsci_readB_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    result_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    result_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    result_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    result_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsci_clken_d : OUT STD_LOGIC;
    twiddle_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsci_clken_d : OUT STD_LOGIC;
    xt_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsci_adrb_d_pff : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    result_rsci_we_d_pff : OUT STD_LOGIC;
    twiddle_rsci_we_d_pff : OUT STD_LOGIC;
    xt_rsci_we_d_pff : OUT STD_LOGIC
  );
END peaceNTT_core;

ARCHITECTURE v6 OF peaceNTT_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL g_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_dev_result_rem_cmp_z : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL modulo_dev_result_rem_cmp_a_63_0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_dev_result_rem_cmp_b_63_0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL not_tmp_8 : STD_LOGIC;
  SIGNAL or_tmp_12 : STD_LOGIC;
  SIGNAL mux_tmp_17 : STD_LOGIC;
  SIGNAL or_dcpl_7 : STD_LOGIC;
  SIGNAL or_dcpl_9 : STD_LOGIC;
  SIGNAL or_dcpl_10 : STD_LOGIC;
  SIGNAL or_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_3 : STD_LOGIC;
  SIGNAL and_dcpl_4 : STD_LOGIC;
  SIGNAL and_dcpl_5 : STD_LOGIC;
  SIGNAL and_dcpl_6 : STD_LOGIC;
  SIGNAL and_dcpl_8 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_12 : STD_LOGIC;
  SIGNAL and_dcpl_13 : STD_LOGIC;
  SIGNAL and_dcpl_15 : STD_LOGIC;
  SIGNAL and_dcpl_17 : STD_LOGIC;
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL and_dcpl_19 : STD_LOGIC;
  SIGNAL or_tmp_34 : STD_LOGIC;
  SIGNAL and_dcpl_25 : STD_LOGIC;
  SIGNAL and_dcpl_27 : STD_LOGIC;
  SIGNAL and_dcpl_31 : STD_LOGIC;
  SIGNAL and_dcpl_34 : STD_LOGIC;
  SIGNAL or_tmp_40 : STD_LOGIC;
  SIGNAL and_dcpl_38 : STD_LOGIC;
  SIGNAL and_dcpl_40 : STD_LOGIC;
  SIGNAL and_dcpl_51 : STD_LOGIC;
  SIGNAL mux_tmp_48 : STD_LOGIC;
  SIGNAL and_dcpl_56 : STD_LOGIC;
  SIGNAL mux_tmp_53 : STD_LOGIC;
  SIGNAL or_tmp_45 : STD_LOGIC;
  SIGNAL mux_tmp_61 : STD_LOGIC;
  SIGNAL or_dcpl_17 : STD_LOGIC;
  SIGNAL or_dcpl_18 : STD_LOGIC;
  SIGNAL and_dcpl_70 : STD_LOGIC;
  SIGNAL and_dcpl_72 : STD_LOGIC;
  SIGNAL and_dcpl_77 : STD_LOGIC;
  SIGNAL or_dcpl_22 : STD_LOGIC;
  SIGNAL or_dcpl_23 : STD_LOGIC;
  SIGNAL or_tmp_72 : STD_LOGIC;
  SIGNAL or_tmp_73 : STD_LOGIC;
  SIGNAL or_dcpl_25 : STD_LOGIC;
  SIGNAL or_dcpl_29 : STD_LOGIC;
  SIGNAL or_dcpl_32 : STD_LOGIC;
  SIGNAL or_dcpl_41 : STD_LOGIC;
  SIGNAL exit_MODEXP_WHILE_sva : STD_LOGIC;
  SIGNAL TWIDDLE_LOOP_slc_TWIDDLE_LOOP_acc_3_itm : STD_LOGIC;
  SIGNAL COMP_LOOP_r_9_0_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COPY_LOOP_1_i_10_0_sva_9_0 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL or_29_cse : STD_LOGIC;
  SIGNAL reg_twiddle_rsc_cgo_cse : STD_LOGIC;
  SIGNAL reg_xt_rsc_cgo_cse : STD_LOGIC;
  SIGNAL reg_vec_rsc_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL or_41_cse : STD_LOGIC;
  SIGNAL or_59_cse : STD_LOGIC;
  SIGNAL and_108_cse : STD_LOGIC;
  SIGNAL modulo_dev_1_mux_cse : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL or_27_cse : STD_LOGIC;
  SIGNAL or_19_cse : STD_LOGIC;
  SIGNAL or_15_cse : STD_LOGIC;
  SIGNAL nor_34_cse : STD_LOGIC;
  SIGNAL or_14_cse : STD_LOGIC;
  SIGNAL mux_21_cse : STD_LOGIC;
  SIGNAL mux_31_cse : STD_LOGIC;
  SIGNAL mux_33_cse : STD_LOGIC;
  SIGNAL mux_32_cse : STD_LOGIC;
  SIGNAL and_27_rmff : STD_LOGIC;
  SIGNAL and_37_rmff : STD_LOGIC;
  SIGNAL TWIDDLE_LOOP_i_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL witer_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_lshift_itm : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL and_dcpl_101 : STD_LOGIC;
  SIGNAL and_dcpl_123 : STD_LOGIC;
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_dcpl_144 : STD_LOGIC;
  SIGNAL and_dcpl_154 : STD_LOGIC;
  SIGNAL and_dcpl_164 : STD_LOGIC;
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL and_dcpl_175 : STD_LOGIC;
  SIGNAL z_out_6 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_dcpl_188 : STD_LOGIC;
  SIGNAL z_out_7 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_dcpl_202 : STD_LOGIC;
  SIGNAL z_out_8 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_dcpl_226 : STD_LOGIC;
  SIGNAL z_out_10 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL z_out_11 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_acc_psp_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL modExp_dev_base_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_dev_exp_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_dev_result_1_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_asn_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_asn_1_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_mul_28_itm : STD_LOGIC_VECTOR (61 DOWNTO 0);
  SIGNAL operator_66_true_mul_27_itm : STD_LOGIC_VECTOR (59 DOWNTO 0);
  SIGNAL operator_66_true_mul_26_itm : STD_LOGIC_VECTOR (57 DOWNTO 0);
  SIGNAL operator_66_true_mul_25_itm : STD_LOGIC_VECTOR (55 DOWNTO 0);
  SIGNAL operator_66_true_mul_24_itm : STD_LOGIC_VECTOR (53 DOWNTO 0);
  SIGNAL operator_66_true_mul_23_itm : STD_LOGIC_VECTOR (51 DOWNTO 0);
  SIGNAL operator_66_true_mul_22_itm : STD_LOGIC_VECTOR (49 DOWNTO 0);
  SIGNAL operator_66_true_mul_21_itm : STD_LOGIC_VECTOR (47 DOWNTO 0);
  SIGNAL operator_66_true_mul_20_itm : STD_LOGIC_VECTOR (45 DOWNTO 0);
  SIGNAL operator_66_true_mul_19_itm : STD_LOGIC_VECTOR (43 DOWNTO 0);
  SIGNAL operator_66_true_mul_18_itm : STD_LOGIC_VECTOR (41 DOWNTO 0);
  SIGNAL operator_66_true_mul_17_itm : STD_LOGIC_VECTOR (39 DOWNTO 0);
  SIGNAL operator_66_true_mul_16_itm : STD_LOGIC_VECTOR (37 DOWNTO 0);
  SIGNAL operator_66_true_mul_15_itm : STD_LOGIC_VECTOR (35 DOWNTO 0);
  SIGNAL operator_66_true_mul_14_itm : STD_LOGIC_VECTOR (33 DOWNTO 0);
  SIGNAL operator_66_true_mul_13_itm : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL operator_66_true_mul_12_itm : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL operator_66_true_mul_11_itm : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL operator_66_true_mul_10_itm : STD_LOGIC_VECTOR (25 DOWNTO 0);
  SIGNAL operator_66_true_mul_9_itm : STD_LOGIC_VECTOR (23 DOWNTO 0);
  SIGNAL operator_66_true_mul_8_itm : STD_LOGIC_VECTOR (21 DOWNTO 0);
  SIGNAL operator_66_true_mul_7_itm : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL operator_66_true_mul_6_itm : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL operator_66_true_mul_5_itm : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL operator_66_true_mul_4_itm : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL operator_66_true_mul_3_itm : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL operator_66_true_mul_2_itm : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL operator_66_true_acc_45_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL operator_66_true_acc_52_itm : STD_LOGIC_VECTOR (22 DOWNTO 0);
  SIGNAL operator_66_true_acc_58_itm : STD_LOGIC_VECTOR (34 DOWNTO 0);
  SIGNAL operator_66_true_acc_63_itm : STD_LOGIC_VECTOR (44 DOWNTO 0);
  SIGNAL operator_66_true_acc_67_itm : STD_LOGIC_VECTOR (52 DOWNTO 0);
  SIGNAL operator_66_true_acc_71_itm : STD_LOGIC_VECTOR (60 DOWNTO 0);
  SIGNAL MODEXP_WHILE_mul_psp : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL TWIDDLE_LOOP_mul_psp : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_mul_1_psp : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_2_psp : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_64_false_acc_psp_sva_mx0w0 : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_mul_1_psp_mx0w4 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_2_psp_mx0w6 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_acc_4_psp_sva_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_acc_2_psp_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL modExp_dev_result_1_sva_mx0w2 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_dev_exp_sva_4 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_operator_66_true_acc_psp_1 : STD_LOGIC_VECTOR (62 DOWNTO
      0);
  SIGNAL COPY_LOOP_1_i_10_0_sva_9_0_mx0c0 : STD_LOGIC;
  SIGNAL COPY_LOOP_1_i_10_0_sva_9_0_mx0c2 : STD_LOGIC;
  SIGNAL or_90_rgt : STD_LOGIC;
  SIGNAL and_79_rgt : STD_LOGIC;
  SIGNAL and_82_rgt : STD_LOGIC;
  SIGNAL nor_71_cse : STD_LOGIC;
  SIGNAL and_137_cse : STD_LOGIC;
  SIGNAL and_169_cse : STD_LOGIC;
  SIGNAL operator_64_false_operator_64_false_mux_rgt : STD_LOGIC_VECTOR (64 DOWNTO
      0);
  SIGNAL not_tmp_145 : STD_LOGIC;
  SIGNAL COPY_LOOP_1_i_mux1h_1_rgt : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL or_tmp_96 : STD_LOGIC;
  SIGNAL COPY_LOOP_1_i_10_0_sva_1_10_9 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL COPY_LOOP_1_i_10_0_sva_1_8_0 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL operator_64_false_acc_psp_sva_64 : STD_LOGIC;
  SIGNAL operator_64_false_acc_psp_sva_63_0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL or_137_cse : STD_LOGIC;
  SIGNAL and_272_cse : STD_LOGIC;
  SIGNAL nor_91_cse : STD_LOGIC;
  SIGNAL or_134_cse : STD_LOGIC;
  SIGNAL mux_118_cse : STD_LOGIC;
  SIGNAL mux_112_cse : STD_LOGIC;
  SIGNAL or_tmp_99 : STD_LOGIC;
  SIGNAL nand_11_seb : STD_LOGIC;
  SIGNAL z_out_27_0 : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL z_out_1_45_0 : STD_LOGIC_VECTOR (45 DOWNTO 0);
  SIGNAL z_out_9_64 : STD_LOGIC;

  SIGNAL mux_43_nl : STD_LOGIC;
  SIGNAL mux_42_nl : STD_LOGIC;
  SIGNAL mux_41_nl : STD_LOGIC;
  SIGNAL and_nl : STD_LOGIC;
  SIGNAL and_264_nl : STD_LOGIC;
  SIGNAL and_265_nl : STD_LOGIC;
  SIGNAL nor_42_nl : STD_LOGIC;
  SIGNAL mux_46_nl : STD_LOGIC;
  SIGNAL or_40_nl : STD_LOGIC;
  SIGNAL mux_45_nl : STD_LOGIC;
  SIGNAL or_38_nl : STD_LOGIC;
  SIGNAL or_37_nl : STD_LOGIC;
  SIGNAL and_103_nl : STD_LOGIC;
  SIGNAL mux_108_nl : STD_LOGIC;
  SIGNAL mux_nl : STD_LOGIC;
  SIGNAL or_nl : STD_LOGIC;
  SIGNAL or_152_nl : STD_LOGIC;
  SIGNAL mux_109_nl : STD_LOGIC;
  SIGNAL nor_90_nl : STD_LOGIC;
  SIGNAL and_271_nl : STD_LOGIC;
  SIGNAL mux_55_nl : STD_LOGIC;
  SIGNAL and_26_nl : STD_LOGIC;
  SIGNAL mux_54_nl : STD_LOGIC;
  SIGNAL mux_53_nl : STD_LOGIC;
  SIGNAL nor_38_nl : STD_LOGIC;
  SIGNAL and_100_nl : STD_LOGIC;
  SIGNAL mux_60_nl : STD_LOGIC;
  SIGNAL mux_59_nl : STD_LOGIC;
  SIGNAL nand_nl : STD_LOGIC;
  SIGNAL mux_58_nl : STD_LOGIC;
  SIGNAL mux_57_nl : STD_LOGIC;
  SIGNAL or_50_nl : STD_LOGIC;
  SIGNAL and_55_nl : STD_LOGIC;
  SIGNAL and_56_nl : STD_LOGIC;
  SIGNAL mux_64_nl : STD_LOGIC;
  SIGNAL mux_27_nl : STD_LOGIC;
  SIGNAL mux_62_nl : STD_LOGIC;
  SIGNAL and_59_nl : STD_LOGIC;
  SIGNAL and_61_nl : STD_LOGIC;
  SIGNAL mux_65_nl : STD_LOGIC;
  SIGNAL and_64_nl : STD_LOGIC;
  SIGNAL and_65_nl : STD_LOGIC;
  SIGNAL mux_67_nl : STD_LOGIC;
  SIGNAL and_99_nl : STD_LOGIC;
  SIGNAL mux_69_nl : STD_LOGIC;
  SIGNAL mux_68_nl : STD_LOGIC;
  SIGNAL or_64_nl : STD_LOGIC;
  SIGNAL or_62_nl : STD_LOGIC;
  SIGNAL or_17_nl : STD_LOGIC;
  SIGNAL operator_66_true_mul_1_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL r_strt_r_strt_and_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COMP_LOOP_r_not_nl : STD_LOGIC;
  SIGNAL mux_106_nl : STD_LOGIC;
  SIGNAL mux_105_nl : STD_LOGIC;
  SIGNAL and_102_nl : STD_LOGIC;
  SIGNAL mux_104_nl : STD_LOGIC;
  SIGNAL mux_103_nl : STD_LOGIC;
  SIGNAL and_9_nl : STD_LOGIC;
  SIGNAL and_66_nl : STD_LOGIC;
  SIGNAL mux_78_nl : STD_LOGIC;
  SIGNAL mux_77_nl : STD_LOGIC;
  SIGNAL mux_76_nl : STD_LOGIC;
  SIGNAL mux_75_nl : STD_LOGIC;
  SIGNAL or_72_nl : STD_LOGIC;
  SIGNAL nand_16_nl : STD_LOGIC;
  SIGNAL mux_116_nl : STD_LOGIC;
  SIGNAL mux_115_nl : STD_LOGIC;
  SIGNAL or_140_nl : STD_LOGIC;
  SIGNAL mux_114_nl : STD_LOGIC;
  SIGNAL mux_113_nl : STD_LOGIC;
  SIGNAL mux_111_nl : STD_LOGIC;
  SIGNAL or_135_nl : STD_LOGIC;
  SIGNAL mux_121_nl : STD_LOGIC;
  SIGNAL or_145_nl : STD_LOGIC;
  SIGNAL mux_120_nl : STD_LOGIC;
  SIGNAL mux_117_nl : STD_LOGIC;
  SIGNAL or_143_nl : STD_LOGIC;
  SIGNAL operator_66_true_acc_51_nl : STD_LOGIC_VECTOR (20 DOWNTO 0);
  SIGNAL operator_66_true_acc_50_nl : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL operator_66_true_acc_49_nl : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL operator_66_true_acc_48_nl : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL operator_66_true_acc_47_nl : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL operator_66_true_acc_57_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL operator_66_true_acc_56_nl : STD_LOGIC_VECTOR (30 DOWNTO 0);
  SIGNAL operator_66_true_acc_55_nl : STD_LOGIC_VECTOR (28 DOWNTO 0);
  SIGNAL operator_66_true_acc_54_nl : STD_LOGIC_VECTOR (26 DOWNTO 0);
  SIGNAL operator_66_true_acc_53_nl : STD_LOGIC_VECTOR (24 DOWNTO 0);
  SIGNAL operator_66_true_acc_62_nl : STD_LOGIC_VECTOR (42 DOWNTO 0);
  SIGNAL operator_66_true_acc_61_nl : STD_LOGIC_VECTOR (40 DOWNTO 0);
  SIGNAL operator_66_true_acc_60_nl : STD_LOGIC_VECTOR (38 DOWNTO 0);
  SIGNAL operator_66_true_acc_59_nl : STD_LOGIC_VECTOR (36 DOWNTO 0);
  SIGNAL operator_66_true_acc_66_nl : STD_LOGIC_VECTOR (50 DOWNTO 0);
  SIGNAL operator_66_true_acc_65_nl : STD_LOGIC_VECTOR (48 DOWNTO 0);
  SIGNAL operator_66_true_acc_64_nl : STD_LOGIC_VECTOR (46 DOWNTO 0);
  SIGNAL or_5_nl : STD_LOGIC;
  SIGNAL or_2_nl : STD_LOGIC;
  SIGNAL mux_128_nl : STD_LOGIC;
  SIGNAL mux_127_nl : STD_LOGIC;
  SIGNAL mux_126_nl : STD_LOGIC;
  SIGNAL nor_95_nl : STD_LOGIC;
  SIGNAL and_274_nl : STD_LOGIC;
  SIGNAL mux_125_nl : STD_LOGIC;
  SIGNAL mux_124_nl : STD_LOGIC;
  SIGNAL or_151_nl : STD_LOGIC;
  SIGNAL mux_123_nl : STD_LOGIC;
  SIGNAL mux_122_nl : STD_LOGIC;
  SIGNAL or_147_nl : STD_LOGIC;
  SIGNAL and_74_nl : STD_LOGIC;
  SIGNAL mux_99_nl : STD_LOGIC;
  SIGNAL mux_98_nl : STD_LOGIC;
  SIGNAL mux_101_nl : STD_LOGIC;
  SIGNAL mux_100_nl : STD_LOGIC;
  SIGNAL or_99_nl : STD_LOGIC;
  SIGNAL COPY_LOOP_1_i_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COPY_LOOP_1_i_not_nl : STD_LOGIC;
  SIGNAL operator_66_true_acc_37_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_acc_36_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_66_true_acc_72_nl : STD_LOGIC_VECTOR (62 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_nand_nl : STD_LOGIC;
  SIGNAL mux_52_nl : STD_LOGIC;
  SIGNAL or_46_nl : STD_LOGIC;
  SIGNAL and_40_nl : STD_LOGIC;
  SIGNAL COPY_LOOP_mux_1_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COPY_LOOP_COPY_LOOP_and_nl : STD_LOGIC;
  SIGNAL mux_84_nl : STD_LOGIC;
  SIGNAL nor_29_nl : STD_LOGIC;
  SIGNAL nor_30_nl : STD_LOGIC;
  SIGNAL operator_66_true_mux_43_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_66_true_mux_44_nl : STD_LOGIC_VECTOR (23 DOWNTO 0);
  SIGNAL operator_66_true_mux_45_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_66_true_mux_46_nl : STD_LOGIC_VECTOR (41 DOWNTO 0);
  SIGNAL operator_66_true_mux_47_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_mux_48_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_acc_73_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_mux_49_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_66_true_mux_50_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL acc_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL operator_66_true_mux_51_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL operator_66_true_acc_76_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL operator_66_true_mul_29_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL operator_66_true_acc_84_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_66_true_and_4_nl : STD_LOGIC;
  SIGNAL operator_66_true_mux_52_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL operator_66_true_acc_85_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL operator_66_true_acc_99_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL operator_66_true_acc_100_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL operator_66_true_operator_66_true_nand_1_nl : STD_LOGIC;
  SIGNAL COPY_LOOP_1_mux1h_2_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL and_276_nl : STD_LOGIC;
  SIGNAL COPY_LOOP_1_or_2_nl : STD_LOGIC;
  SIGNAL COPY_LOOP_1_COPY_LOOP_1_or_1_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL COPY_LOOP_1_mux_1_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL operator_66_true_mux_53_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_mux_54_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL TWIDDLE_LOOP_TWIDDLE_LOOP_and_1_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL not_356_nl : STD_LOGIC;
  SIGNAL TWIDDLE_LOOP_mux_3_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_mux_55_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_mux_56_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_66_true_acc_101_nl : STD_LOGIC_VECTOR (58 DOWNTO 0);
  SIGNAL operator_66_true_acc_102_nl : STD_LOGIC_VECTOR (56 DOWNTO 0);
  SIGNAL operator_66_true_acc_103_nl : STD_LOGIC_VECTOR (54 DOWNTO 0);
  SIGNAL operator_64_false_acc_nl : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL operator_64_false_mux_3_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_278_nl : STD_LOGIC;
  SIGNAL operator_66_true_mux_57_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_66_true_or_3_nl : STD_LOGIC;
  SIGNAL acc_7_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL operator_66_true_mux_58_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_66_true_acc_104_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_66_true_operator_66_true_nor_1_nl : STD_LOGIC;
  SIGNAL operator_66_true_mux_59_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_66_true_acc_105_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL g_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL g_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL modulo_dev_result_rem_cmp_a : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL modulo_dev_result_rem_cmp_b : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL modulo_dev_result_rem_cmp_z_1 : STD_LOGIC_VECTOR (64 DOWNTO 0);

  SIGNAL COMP_LOOP_f2_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL COMP_LOOP_f2_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaceNTT_core_wait_dp
    PORT(
      twiddle_rsc_cgo_iro : IN STD_LOGIC;
      twiddle_rsci_clken_d : OUT STD_LOGIC;
      xt_rsc_cgo_iro : IN STD_LOGIC;
      xt_rsci_clken_d : OUT STD_LOGIC;
      twiddle_rsc_cgo : IN STD_LOGIC;
      xt_rsc_cgo : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaceNTT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      main_C_7_tr0 : IN STD_LOGIC;
      MODEXP_WHILE_C_24_tr0 : IN STD_LOGIC;
      TWIDDLE_LOOP_C_24_tr0 : IN STD_LOGIC;
      COPY_LOOP_C_2_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_76_tr0 : IN STD_LOGIC;
      COPY_LOOP_1_C_2_tr0 : IN STD_LOGIC;
      STAGE_LOOP_C_0_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL peaceNTT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaceNTT_core_core_fsm_inst_main_C_7_tr0 : STD_LOGIC;
  SIGNAL peaceNTT_core_core_fsm_inst_TWIDDLE_LOOP_C_24_tr0 : STD_LOGIC;
  SIGNAL peaceNTT_core_core_fsm_inst_COPY_LOOP_C_2_tr0 : STD_LOGIC;
  SIGNAL peaceNTT_core_core_fsm_inst_COMP_LOOP_C_76_tr0 : STD_LOGIC;
  SIGNAL peaceNTT_core_core_fsm_inst_COPY_LOOP_1_C_2_tr0 : STD_LOGIC;
  SIGNAL peaceNTT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_v_10_3_2(input_2 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_11_3_2(input_2 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_3_2(input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_9_2(input_8 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(8 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_24_2_2(input_0 : STD_LOGIC_VECTOR(23 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(23 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(23 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_42_2_2(input_0 : STD_LOGIC_VECTOR(41 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(41 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(41 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_65_2_2(input_0 : STD_LOGIC_VECTOR(64 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(64 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(64 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 2,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  g_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 3,
      width => 64
      )
    PORT MAP(
      dat => g_rsci_dat,
      idat => g_rsci_idat_1
    );
  g_rsci_dat <= g_rsc_dat;
  g_rsci_idat <= g_rsci_idat_1;

  vec_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_obj_ld_cse,
      lz => vec_rsc_triosy_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  g_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_obj_ld_cse,
      lz => g_rsc_triosy_lz
    );
  result_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_obj_ld_cse,
      lz => result_rsc_triosy_lz
    );
  modulo_dev_result_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 65,
      width_b => 65,
      signd => 1
      )
    PORT MAP(
      a => modulo_dev_result_rem_cmp_a,
      b => modulo_dev_result_rem_cmp_b,
      z => modulo_dev_result_rem_cmp_z_1
    );
  modulo_dev_result_rem_cmp_a <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(modulo_dev_result_rem_cmp_a_63_0),65));
  modulo_dev_result_rem_cmp_b <= STD_LOGIC_VECTOR(UNSIGNED'( "0") & UNSIGNED(modulo_dev_result_rem_cmp_b_63_0));
  modulo_dev_result_rem_cmp_z <= modulo_dev_result_rem_cmp_z_1;

  COMP_LOOP_f2_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => COMP_LOOP_f2_lshift_rg_a,
      s => COMP_LOOP_f2_lshift_rg_s,
      z => COMP_LOOP_f2_lshift_rg_z
    );
  COMP_LOOP_f2_lshift_rg_a(0) <= '1';
  COMP_LOOP_f2_lshift_rg_s <= z_out_5(3 DOWNTO 0);
  COMP_LOOP_f2_lshift_itm <= COMP_LOOP_f2_lshift_rg_z;

  peaceNTT_core_wait_dp_inst : peaceNTT_core_wait_dp
    PORT MAP(
      twiddle_rsc_cgo_iro => and_27_rmff,
      twiddle_rsci_clken_d => twiddle_rsci_clken_d,
      xt_rsc_cgo_iro => and_37_rmff,
      xt_rsci_clken_d => xt_rsci_clken_d,
      twiddle_rsc_cgo => reg_twiddle_rsc_cgo_cse,
      xt_rsc_cgo => reg_xt_rsc_cgo_cse
    );
  peaceNTT_core_core_fsm_inst : peaceNTT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => peaceNTT_core_core_fsm_inst_fsm_output,
      main_C_7_tr0 => peaceNTT_core_core_fsm_inst_main_C_7_tr0,
      MODEXP_WHILE_C_24_tr0 => exit_MODEXP_WHILE_sva,
      TWIDDLE_LOOP_C_24_tr0 => peaceNTT_core_core_fsm_inst_TWIDDLE_LOOP_C_24_tr0,
      COPY_LOOP_C_2_tr0 => peaceNTT_core_core_fsm_inst_COPY_LOOP_C_2_tr0,
      COMP_LOOP_C_76_tr0 => peaceNTT_core_core_fsm_inst_COMP_LOOP_C_76_tr0,
      COPY_LOOP_1_C_2_tr0 => peaceNTT_core_core_fsm_inst_COPY_LOOP_1_C_2_tr0,
      STAGE_LOOP_C_0_tr0 => peaceNTT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0
    );
  fsm_output <= peaceNTT_core_core_fsm_inst_fsm_output;
  peaceNTT_core_core_fsm_inst_main_C_7_tr0 <= NOT z_out_9_64;
  peaceNTT_core_core_fsm_inst_TWIDDLE_LOOP_C_24_tr0 <= NOT TWIDDLE_LOOP_slc_TWIDDLE_LOOP_acc_3_itm;
  peaceNTT_core_core_fsm_inst_COPY_LOOP_C_2_tr0 <= COPY_LOOP_1_i_10_0_sva_1_10_9(1);
  peaceNTT_core_core_fsm_inst_COMP_LOOP_C_76_tr0 <= COMP_LOOP_r_9_0_sva_1(9);
  peaceNTT_core_core_fsm_inst_COPY_LOOP_1_C_2_tr0 <= COPY_LOOP_1_i_10_0_sva_1_10_9(1);
  peaceNTT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0 <= z_out_10(4);

  or_29_cse <= CONV_SL_1_1(fsm_output(6 DOWNTO 4)/=STD_LOGIC_VECTOR'("000"));
  and_108_cse <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("11"));
  or_27_cse <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00"));
  or_19_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"));
  or_41_cse <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"));
  or_40_nl <= and_272_cse OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10"));
  or_38_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10"));
  or_37_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01"));
  mux_45_nl <= MUX_s_1_2_2(or_38_nl, or_37_nl, and_272_cse);
  and_103_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"));
  mux_46_nl <= MUX_s_1_2_2(or_40_nl, mux_45_nl, and_103_nl);
  nor_42_nl <= NOT(mux_46_nl OR (fsm_output(7)));
  operator_64_false_operator_64_false_mux_rgt <= MUX_v_65_2_2(operator_64_false_acc_psp_sva_mx0w0,
      ('0' & xt_rsci_q_d), nor_42_nl);
  and_272_cse <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11"));
  nor_91_cse <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("00")));
  modulo_dev_1_mux_cse <= MUX_v_64_2_2((modulo_dev_result_rem_cmp_z(63 DOWNTO 0)),
      modExp_dev_result_1_sva_mx0w2, modulo_dev_result_rem_cmp_z(63));
  mux_54_nl <= MUX_s_1_2_2(not_tmp_8, and_272_cse, fsm_output(2));
  and_26_nl <= (fsm_output(1)) AND mux_54_nl;
  nor_38_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 2)/=STD_LOGIC_VECTOR'("000")));
  and_100_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111"));
  mux_53_nl <= MUX_s_1_2_2(nor_38_nl, and_100_nl, fsm_output(1));
  mux_55_nl <= MUX_s_1_2_2(and_26_nl, mux_53_nl, fsm_output(0));
  and_27_rmff <= mux_55_nl AND and_dcpl_25;
  nand_nl <= NOT((fsm_output(2)) AND (NOT mux_21_cse));
  mux_59_nl <= MUX_s_1_2_2(nand_nl, or_tmp_40, fsm_output(1));
  or_50_nl <= (NOT (fsm_output(4))) OR (NOT (fsm_output(5))) OR (fsm_output(7));
  mux_57_nl <= MUX_s_1_2_2(mux_21_cse, or_50_nl, fsm_output(2));
  mux_58_nl <= MUX_s_1_2_2(or_tmp_40, mux_57_nl, fsm_output(1));
  mux_60_nl <= MUX_s_1_2_2(mux_59_nl, mux_58_nl, fsm_output(0));
  and_37_rmff <= (NOT mux_60_nl) AND (NOT (fsm_output(6))) AND (fsm_output(3));
  or_59_cse <= CONV_SL_1_1(fsm_output(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"));
  or_15_cse <= CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("00"));
  nor_34_cse <= NOT(CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00")));
  or_14_cse <= (NOT((CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("11")))
      OR (fsm_output(6)))) OR (fsm_output(7));
  mux_31_cse <= MUX_s_1_2_2(mux_tmp_17, or_tmp_12, or_15_cse);
  or_17_nl <= CONV_SL_1_1(fsm_output(5 DOWNTO 3)/=STD_LOGIC_VECTOR'("000"));
  mux_33_cse <= MUX_s_1_2_2(mux_tmp_17, or_tmp_12, or_17_nl);
  mux_32_cse <= MUX_s_1_2_2(mux_31_cse, or_14_cse, fsm_output(3));
  operator_66_true_mul_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(10
      DOWNTO 9)) * UNSIGNED'( "110011")), 8));
  and_102_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)=STD_LOGIC_VECTOR'("11"));
  mux_105_nl <= MUX_s_1_2_2(mux_33_cse, mux_32_cse, and_102_nl);
  mux_103_nl <= MUX_s_1_2_2(mux_31_cse, or_14_cse, and_108_cse);
  mux_104_nl <= MUX_s_1_2_2(mux_103_nl, mux_tmp_61, fsm_output(1));
  mux_106_nl <= MUX_s_1_2_2(mux_105_nl, mux_104_nl, fsm_output(0));
  COMP_LOOP_r_not_nl <= NOT mux_106_nl;
  r_strt_r_strt_and_nl <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"), (COMP_LOOP_r_9_0_sva_1(8
      DOWNTO 0)), COMP_LOOP_r_not_nl);
  and_9_nl <= and_dcpl_8 AND and_dcpl_5;
  and_66_nl <= and_dcpl_40 AND and_dcpl_13;
  mux_75_nl <= MUX_s_1_2_2(mux_tmp_17, or_tmp_12, fsm_output(5));
  or_72_nl <= (NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00"))))
      OR (fsm_output(7));
  mux_76_nl <= MUX_s_1_2_2(mux_75_nl, or_72_nl, fsm_output(4));
  mux_77_nl <= MUX_s_1_2_2(mux_31_cse, mux_76_nl, and_108_cse);
  mux_78_nl <= MUX_s_1_2_2(mux_77_nl, mux_tmp_61, or_134_cse);
  COPY_LOOP_1_i_mux1h_1_rgt <= MUX1HOT_v_11_3_2((STD_LOGIC_VECTOR'( "000") & STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(operator_66_true_mul_1_nl),
      8))), z_out_5, (STD_LOGIC_VECTOR'( "00") & r_strt_r_strt_and_nl), STD_LOGIC_VECTOR'(
      and_9_nl & and_66_nl & (NOT mux_78_nl)));
  or_137_cse <= (fsm_output(1)) OR (NOT (fsm_output(7))) OR (fsm_output(5)) OR (fsm_output(4));
  or_134_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"));
  nand_16_nl <= NOT((fsm_output(1)) AND (NOT mux_118_cse));
  mux_112_cse <= MUX_s_1_2_2(nand_16_nl, or_137_cse, fsm_output(0));
  mux_118_cse <= MUX_s_1_2_2(not_tmp_145, or_15_cse, fsm_output(7));
  or_5_nl <= (fsm_output(5)) OR (NOT (fsm_output(7)));
  or_2_nl <= (NOT (fsm_output(5))) OR (fsm_output(7));
  mux_21_cse <= MUX_s_1_2_2(or_5_nl, or_2_nl, fsm_output(4));
  or_90_rgt <= (and_272_cse AND or_41_cse) OR or_dcpl_9 OR (NOT (fsm_output(5)));
  and_79_rgt <= and_dcpl_77 AND nor_34_cse AND (NOT (fsm_output(0))) AND (NOT (modulo_dev_result_rem_cmp_z(63)));
  and_82_rgt <= and_dcpl_77 AND nor_34_cse AND (NOT (fsm_output(0))) AND (modulo_dev_result_rem_cmp_z(63));
  operator_64_false_acc_psp_sva_mx0w0 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(p_rsci_idat),
      64), 65) + SIGNED'( "11111111111111111111111111111111111111111111111111111111111111111"),
      65));
  COMP_LOOP_f2_mul_1_psp_mx0w4 <= STD_LOGIC_VECTOR(CONV_SIGNED(UNSIGNED'( UNSIGNED(COMP_LOOP_f2_asn_itm)
      * UNSIGNED(COMP_LOOP_f2_asn_1_itm)), 64));
  COMP_LOOP_acc_2_psp_mx0w6 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(operator_64_false_acc_psp_sva_63_0)
      - SIGNED(modulo_dev_1_mux_cse), 64));
  operator_66_true_acc_36_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(operator_66_true_acc_psp_sva(4),
      1), 1), 2) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(operator_66_true_acc_psp_sva(5),
      1), 1), 2) + UNSIGNED'( "01"), 2));
  operator_66_true_acc_37_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED((NOT
      (operator_66_true_acc_psp_sva(5))) & (NOT (operator_66_true_acc_psp_sva(3 DOWNTO
      2)))), 3), 4) + CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_36_nl), 4) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(operator_66_true_acc_psp_sva(6),
      1), 1), 4), 4));
  operator_66_true_acc_4_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_37_nl),
      4) + UNSIGNED(STD_LOGIC_VECTOR'( "10") & (operator_66_true_acc_psp_sva(1 DOWNTO
      0))), 4));
  operator_66_true_acc_2_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED(z_out_10(1
      DOWNTO 0)), 2), 3) + UNSIGNED((operator_66_true_acc_4_psp_sva_1(3)) & (operator_66_true_acc_4_psp_sva_1(1
      DOWNTO 0))), 3));
  modExp_dev_result_1_sva_mx0w2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modulo_dev_result_rem_cmp_z(63
      DOWNTO 0)) + UNSIGNED(p_sva), 64));
  modExp_dev_exp_sva_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modExp_dev_exp_sva)
      + UNSIGNED'( "1111111111111111111111111111111111111111111111111111111111111111"),
      64));
  operator_66_true_acc_72_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_28_itm),
      62), 63) + CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_71_itm), 61),
      63), 63));
  operator_66_true_operator_66_true_acc_psp_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_72_nl),
      63) + SIGNED(operator_64_false_acc_psp_sva_64 & STD_LOGIC_VECTOR'( "00") &
      STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(operator_64_false_acc_psp_sva_64,
      1),2)) & '0' & operator_64_false_acc_psp_sva_64), 63));
  not_tmp_8 <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  or_tmp_12 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("01"));
  mux_tmp_17 <= MUX_s_1_2_2((NOT (fsm_output(7))), (fsm_output(7)), fsm_output(6));
  or_dcpl_7 <= or_27_cse OR or_19_cse;
  or_dcpl_9 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_10 <= or_dcpl_9 OR or_15_cse;
  or_dcpl_11 <= or_dcpl_10 OR or_dcpl_7;
  and_dcpl_3 <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_4 <= NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_5 <= and_dcpl_4 AND and_dcpl_3;
  and_dcpl_6 <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_8 <= nor_91_cse AND and_dcpl_6;
  and_dcpl_11 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_12 <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_13 <= and_dcpl_12 AND and_dcpl_11;
  and_dcpl_15 <= nor_91_cse AND CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("11"));
  and_dcpl_17 <= and_dcpl_12 AND and_dcpl_3;
  and_dcpl_18 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_19 <= and_dcpl_18 AND and_dcpl_6;
  or_tmp_34 <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 4)=STD_LOGIC_VECTOR'("0111")));
  and_dcpl_25 <= nor_91_cse AND (fsm_output(5));
  and_dcpl_27 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_31 <= nor_91_cse AND CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("10"))
      AND and_dcpl_4 AND and_dcpl_27;
  and_dcpl_34 <= and_dcpl_15 AND and_108_cse AND and_dcpl_11;
  or_tmp_40 <= NOT((fsm_output(2)) AND (fsm_output(4)) AND (fsm_output(5)) AND (NOT
      (fsm_output(7))));
  and_dcpl_38 <= and_dcpl_12 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  and_dcpl_40 <= NOT(mux_21_cse OR (fsm_output(6)));
  and_dcpl_51 <= and_dcpl_8 AND and_dcpl_17;
  mux_tmp_48 <= MUX_s_1_2_2((NOT (fsm_output(4))), (fsm_output(4)), fsm_output(3));
  and_dcpl_56 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)=STD_LOGIC_VECTOR'("01"));
  mux_tmp_53 <= MUX_s_1_2_2((NOT (fsm_output(5))), (fsm_output(5)), fsm_output(4));
  or_tmp_45 <= CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("10"));
  mux_tmp_61 <= MUX_s_1_2_2(mux_33_cse, mux_32_cse, fsm_output(2));
  or_dcpl_17 <= or_27_cse OR or_134_cse;
  or_dcpl_18 <= or_dcpl_10 OR or_dcpl_17;
  and_dcpl_70 <= and_108_cse AND and_dcpl_27;
  and_dcpl_72 <= and_dcpl_12 AND and_dcpl_27;
  and_dcpl_77 <= and_dcpl_25 AND not_tmp_8;
  or_dcpl_22 <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("10")) OR or_19_cse;
  or_dcpl_23 <= or_dcpl_10 OR or_dcpl_22;
  or_tmp_72 <= not_tmp_8 OR (fsm_output(5));
  or_tmp_73 <= CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("01"));
  or_dcpl_25 <= or_dcpl_9 OR or_tmp_45 OR or_dcpl_17;
  or_dcpl_29 <= NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("11")));
  or_dcpl_32 <= or_dcpl_9 OR CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("11"));
  or_dcpl_41 <= or_tmp_12 OR or_tmp_73 OR or_dcpl_22;
  COPY_LOOP_1_i_10_0_sva_9_0_mx0c0 <= and_dcpl_40 AND and_dcpl_72;
  COPY_LOOP_1_i_10_0_sva_9_0_mx0c2 <= and_dcpl_15 AND and_dcpl_70;
  vec_rsci_adrb_d_pff <= COPY_LOOP_1_i_10_0_sva_9_0;
  vec_rsci_readB_r_ram_ir_internal_RMASK_B_d <= and_dcpl_15 AND and_dcpl_13;
  result_rsci_d_d <= modulo_dev_1_mux_cse;
  COMP_LOOP_COMP_LOOP_nand_nl <= NOT(and_dcpl_19 AND and_dcpl_17);
  result_rsci_wadr_d <= COMP_LOOP_COMP_LOOP_nand_nl & COPY_LOOP_1_i_10_0_sva_1_8_0;
  or_46_nl <= CONV_SL_1_1(fsm_output(7 DOWNTO 4)/=STD_LOGIC_VECTOR'("1000"));
  mux_52_nl <= MUX_s_1_2_2(or_tmp_34, or_46_nl, fsm_output(3));
  result_rsci_we_d_pff <= (NOT mux_52_nl) AND nor_34_cse AND (NOT (fsm_output(0)));
  result_rsci_readA_r_ram_ir_internal_RMASK_B_d <= and_dcpl_19 AND and_dcpl_13;
  twiddle_rsci_d_d <= witer_sva;
  twiddle_rsci_wadr_d <= STD_LOGIC_VECTOR'( "000000") & TWIDDLE_LOOP_i_3_0_sva;
  twiddle_rsci_we_d_pff <= and_dcpl_31;
  twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d <= and_dcpl_34;
  and_40_nl <= and_dcpl_19 AND and_dcpl_38;
  xt_rsci_d_d <= MUX_v_64_2_2(vec_rsci_qb_d, result_rsci_q_d, and_40_nl);
  COPY_LOOP_mux_1_nl <= MUX_v_8_2_2((COPY_LOOP_1_i_10_0_sva_1_8_0(7 DOWNTO 0)), (COPY_LOOP_1_i_10_0_sva_1_8_0(8
      DOWNTO 1)), and_dcpl_34);
  COPY_LOOP_COPY_LOOP_and_nl <= (COPY_LOOP_1_i_10_0_sva_1_8_0(0)) AND and_dcpl_34;
  xt_rsci_radr_d <= COPY_LOOP_mux_1_nl & COPY_LOOP_COPY_LOOP_and_nl & '0';
  xt_rsci_we_d_pff <= and_dcpl_40 AND and_dcpl_38;
  xt_rsci_readA_r_ram_ir_internal_RMASK_B_d <= and_dcpl_15 AND and_108_cse AND ((fsm_output(1))
      XOR (fsm_output(0)));
  and_dcpl_101 <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("00000001"));
  nor_71_cse <= NOT((fsm_output(3)) OR (fsm_output(1)));
  and_137_cse <= nor_91_cse AND and_dcpl_6 AND nor_71_cse AND (fsm_output(0)) AND
      (NOT (fsm_output(2)));
  and_dcpl_123 <= nor_91_cse AND CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("10"))
      AND nor_71_cse AND (fsm_output(0)) AND (NOT (fsm_output(2)));
  and_169_cse <= and_dcpl_8 AND nor_71_cse AND (fsm_output(0)) AND (NOT (fsm_output(2)));
  and_dcpl_144 <= NOT((fsm_output(0)) OR (fsm_output(2)));
  and_dcpl_154 <= nor_91_cse AND (NOT (fsm_output(5))) AND (NOT (fsm_output(4)))
      AND (NOT (fsm_output(3))) AND (fsm_output(1)) AND and_dcpl_144;
  and_dcpl_164 <= and_dcpl_40 AND CONV_SL_1_1(fsm_output(3 DOWNTO 0)=STD_LOGIC_VECTOR'("1101"));
  and_dcpl_175 <= NOT(CONV_SL_1_1(fsm_output/=STD_LOGIC_VECTOR'("00001000")));
  and_dcpl_188 <= nor_91_cse AND CONV_SL_1_1(fsm_output(5 DOWNTO 0)=STD_LOGIC_VECTOR'("111110"));
  twiddle_rsci_radr_d <= z_out_7(9 DOWNTO 0);
  and_dcpl_202 <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("01011000"));
  and_dcpl_226 <= CONV_SL_1_1(fsm_output(7 DOWNTO 6)=STD_LOGIC_VECTOR'("10")) AND
      and_dcpl_6 AND CONV_SL_1_1(fsm_output(3 DOWNTO 0)=STD_LOGIC_VECTOR'("1101"));
  not_tmp_145 <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("11")));
  or_tmp_96 <= (fsm_output(3)) OR (fsm_output(4)) OR (fsm_output(7)) OR (fsm_output(1))
      OR (NOT (fsm_output(5)));
  or_tmp_99 <= and_dcpl_31 OR (and_dcpl_19 AND and_dcpl_70);
  nor_29_nl <= NOT((fsm_output(1)) OR (fsm_output(2)) OR (NOT (fsm_output(5))));
  nor_30_nl <= NOT((NOT (fsm_output(1))) OR (NOT (fsm_output(2))) OR (fsm_output(5)));
  mux_84_nl <= MUX_s_1_2_2(nor_29_nl, nor_30_nl, fsm_output(0));
  nand_11_seb <= NOT(mux_84_nl AND nor_91_cse AND not_tmp_8);
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_43_nl, and_265_nl, fsm_output(0))) = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_28_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(64 DOWNTO 63)) * UNSIGNED'(
            "110011001100110011001100110011001100110011001100110011001101")), 62));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(mux_108_nl OR (fsm_output(7)))) = '1' ) THEN
        operator_64_false_acc_psp_sva_64 <= operator_64_false_operator_64_false_mux_rgt(64);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_109_nl AND nor_91_cse) = '1' ) THEN
        operator_64_false_acc_psp_sva_63_0 <= operator_64_false_operator_64_false_mux_rgt(63
            DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_26_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(60 DOWNTO 59)) * UNSIGNED'(
            "11001100110011001100110011001100110011001100110011001101")), 58));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_25_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(58 DOWNTO 57)) * UNSIGNED'(
            "110011001100110011001100110011001100110011001100110011")), 56));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_24_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(56 DOWNTO 55)) * UNSIGNED'(
            "1100110011001100110011001100110011001100110011001101")), 54));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_23_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(54 DOWNTO 53)) * UNSIGNED'(
            "11001100110011001100110011001100110011001100110011")), 52));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_22_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(52 DOWNTO 51)) * UNSIGNED'(
            "110011001100110011001100110011001100110011001101")), 50));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_21_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(50 DOWNTO 49)) * UNSIGNED'(
            "1100110011001100110011001100110011001100110011")), 48));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_19_itm <= z_out_1_45_0(43 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_18_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(44 DOWNTO 43)) * UNSIGNED'(
            "1100110011001100110011001100110011001101")), 42));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_17_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(42 DOWNTO 41)) * UNSIGNED'(
            "11001100110011001100110011001100110011")), 40));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_16_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(40 DOWNTO 39)) * UNSIGNED'(
            "110011001100110011001100110011001101")), 38));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_15_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(38 DOWNTO 37)) * UNSIGNED'(
            "1100110011001100110011001100110011")), 36));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_14_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(36 DOWNTO 35)) * UNSIGNED'(
            "11001100110011001100110011001101")), 34));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_13_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(34 DOWNTO 33)) * UNSIGNED'(
            "110011001100110011001100110011")), 32));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_12_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
            UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(32 DOWNTO 31)) * UNSIGNED'(
            "1100110011001100110011001101")), 30));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_10_itm <= z_out_27_0(25 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_9_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(26
            DOWNTO 25)) * UNSIGNED'( "1100110011001100110011")), 24));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_8_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(24
            DOWNTO 23)) * UNSIGNED'( "11001100110011001101")), 22));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_7_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(22
            DOWNTO 21)) * UNSIGNED'( "110011001100110011")), 20));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_6_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(20
            DOWNTO 19)) * UNSIGNED'( "1100110011001101")), 18));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_5_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(18
            DOWNTO 17)) * UNSIGNED'( "11001100110011")), 16));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_4_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(16
            DOWNTO 15)) * UNSIGNED'( "110011001101")), 14));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_3_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(14
            DOWNTO 13)) * UNSIGNED'( "1100110011")), 12));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_11 = '0' ) THEN
        operator_66_true_mul_2_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(12
            DOWNTO 11)) * UNSIGNED'( "11001101")), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_twiddle_rsc_cgo_cse <= '0';
        reg_xt_rsc_cgo_cse <= '0';
        reg_vec_rsc_triosy_obj_ld_cse <= '0';
      ELSE
        reg_twiddle_rsc_cgo_cse <= and_27_rmff;
        reg_xt_rsc_cgo_cse <= and_37_rmff;
        reg_vec_rsc_triosy_obj_ld_cse <= and_dcpl_18 AND CONV_SL_1_1(fsm_output(5
            DOWNTO 0)=STD_LOGIC_VECTOR'("001101")) AND (z_out_10(4));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      operator_66_true_acc_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_4(6
          DOWNTO 0)) + UNSIGNED(STD_LOGIC_VECTOR'( "100111") & (NOT (operator_64_false_acc_psp_sva_mx0w0(64)))),
          7));
      modulo_dev_result_rem_cmp_a_63_0 <= MUX1HOT_v_64_9_2(z_out_6, MODEXP_WHILE_mul_psp,
          z_out_7, TWIDDLE_LOOP_mul_psp, COMP_LOOP_f2_mul_1_psp_mx0w4, COMP_LOOP_f2_mul_1_psp,
          COMP_LOOP_acc_2_psp_mx0w6, COMP_LOOP_acc_2_psp, COMP_LOOP_acc_itm, STD_LOGIC_VECTOR'(
          and_dcpl_51 & and_55_nl & and_dcpl_31 & and_56_nl & and_59_nl & and_61_nl
          & and_64_nl & and_65_nl & (NOT mux_69_nl)));
      modulo_dev_result_rem_cmp_b_63_0 <= p_sva;
      operator_66_true_acc_45_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_4),
          8), 9) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(COPY_LOOP_1_i_10_0_sva_1_8_0(7
          DOWNTO 0)), 8), 9), 9));
      operator_66_true_acc_52_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_8_itm),
          22), 23) + CONV_SIGNED(SIGNED(operator_66_true_acc_51_nl), 23), 23));
      operator_66_true_acc_58_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_14_itm),
          34), 35) + CONV_SIGNED(SIGNED(operator_66_true_acc_57_nl), 35), 35));
      operator_66_true_acc_63_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_19_itm),
          44), 45) + CONV_SIGNED(SIGNED(operator_66_true_acc_62_nl), 45), 45));
      operator_66_true_acc_67_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_23_itm),
          52), 53) + CONV_SIGNED(SIGNED(operator_66_true_acc_66_nl), 53), 53));
      operator_66_true_acc_71_itm <= z_out_8(60 DOWNTO 0);
      witer_sva <= MUX_v_64_2_2(STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000001"),
          modulo_dev_1_mux_cse, and_74_nl);
      COMP_LOOP_f2_asn_itm <= twiddle_rsci_q_d;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COPY_LOOP_1_i_10_0_sva_1_10_9 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( mux_116_nl = '0' ) THEN
        COPY_LOOP_1_i_10_0_sva_1_10_9 <= COPY_LOOP_1_i_mux1h_1_rgt(10 DOWNTO 9);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COPY_LOOP_1_i_10_0_sva_1_8_0 <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (NOT(mux_121_nl OR (fsm_output(6)))) = '1' ) THEN
        COPY_LOOP_1_i_10_0_sva_1_8_0 <= COPY_LOOP_1_i_mux1h_1_rgt(8 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_18 = '0' ) THEN
        operator_66_true_mul_27_itm <= z_out_6(59 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_18 = '0' ) THEN
        operator_66_true_mul_20_itm <= z_out_1_45_0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_18 = '0' ) THEN
        operator_66_true_mul_11_itm <= z_out_27_0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(mux_125_nl OR (fsm_output(6)))) = '1' ) THEN
        TWIDDLE_LOOP_i_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( nand_11_seb & '0'
            & nand_11_seb & '0'), (z_out_5(3 DOWNTO 0)), mux_128_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (or_90_rgt OR and_79_rgt OR and_82_rgt) = '1' ) THEN
        modExp_dev_result_1_sva <= MUX1HOT_v_64_3_2(STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000001"),
            (modulo_dev_result_rem_cmp_z(63 DOWNTO 0)), modExp_dev_result_1_sva_mx0w2,
            STD_LOGIC_VECTOR'( or_90_rgt & and_79_rgt & and_82_rgt));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_MODEXP_WHILE_sva <= '0';
      ELSIF ( or_dcpl_23 = '0' ) THEN
        exit_MODEXP_WHILE_sva <= NOT z_out_9_64;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT mux_99_nl) AND nor_91_cse)) = '1' ) THEN
        modExp_dev_exp_sva <= MUX_v_64_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(operator_66_true_operator_66_true_acc_psp_1),64)),
            modExp_dev_exp_sva_4, and_dcpl_51);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT mux_101_nl) AND nor_91_cse)) = '1' ) THEN
        modExp_dev_base_sva <= g_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_23 = '0' ) THEN
        MODEXP_WHILE_mul_psp <= z_out_6;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_25 = '0' ) THEN
        TWIDDLE_LOOP_slc_TWIDDLE_LOOP_acc_3_itm <= z_out_2(3);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_25 = '0' ) THEN
        TWIDDLE_LOOP_mul_psp <= z_out_7;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (COPY_LOOP_1_i_10_0_sva_9_0_mx0c0 OR (and_dcpl_40 AND and_108_cse AND
          and_dcpl_3) OR COPY_LOOP_1_i_10_0_sva_9_0_mx0c2) = '1' ) THEN
        COPY_LOOP_1_i_10_0_sva_9_0 <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"),
            COPY_LOOP_1_i_mux_nl, COPY_LOOP_1_i_not_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_r_9_0_sva_1 <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(or_dcpl_32 OR or_dcpl_29 OR or_134_cse)) = '1' ) THEN
        COMP_LOOP_r_9_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COPY_LOOP_1_i_10_0_sva_1_8_0),
            9), 10) + UNSIGNED'( "0000000001"), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_dcpl_32 OR or_dcpl_29 OR CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))))
          = '1' ) THEN
        COMP_LOOP_f2_asn_1_itm <= xt_rsci_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_tmp_12 OR or_15_cse OR or_dcpl_7)) = '1' ) THEN
        COMP_LOOP_f2_mul_1_psp <= COMP_LOOP_f2_mul_1_psp_mx0w4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_41 = '0' ) THEN
        COMP_LOOP_acc_itm <= z_out_8;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_41 = '0' ) THEN
        COMP_LOOP_acc_2_psp <= COMP_LOOP_acc_2_psp_mx0w6;
      END IF;
    END IF;
  END PROCESS;
  mux_41_nl <= MUX_s_1_2_2((NOT (fsm_output(7))), (fsm_output(7)), or_29_cse);
  and_nl <= or_29_cse AND (fsm_output(7));
  mux_42_nl <= MUX_s_1_2_2(mux_41_nl, and_nl, or_27_cse);
  and_264_nl <= (and_108_cse OR CONV_SL_1_1(fsm_output(6 DOWNTO 4)/=STD_LOGIC_VECTOR'("000")))
      AND (fsm_output(7));
  mux_43_nl <= MUX_s_1_2_2(mux_42_nl, and_264_nl, fsm_output(1));
  and_265_nl <= ((CONV_SL_1_1(fsm_output(3 DOWNTO 1)=STD_LOGIC_VECTOR'("111"))) OR
      CONV_SL_1_1(fsm_output(6 DOWNTO 4)/=STD_LOGIC_VECTOR'("000"))) AND (fsm_output(7));
  or_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 0)/=STD_LOGIC_VECTOR'("00000"));
  mux_nl <= MUX_s_1_2_2(or_nl, and_272_cse, fsm_output(6));
  or_152_nl <= (fsm_output(6)) OR (NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 0)=STD_LOGIC_VECTOR'("11111"))));
  mux_108_nl <= MUX_s_1_2_2(mux_nl, or_152_nl, fsm_output(5));
  nor_90_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 0)/=STD_LOGIC_VECTOR'("00000")));
  and_271_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 0)=STD_LOGIC_VECTOR'("11111"));
  mux_109_nl <= MUX_s_1_2_2(nor_90_nl, and_271_nl, fsm_output(5));
  and_55_nl <= (((or_41_cse OR (fsm_output(0))) AND (fsm_output(3))) OR (fsm_output(4)))
      AND nor_91_cse AND (NOT (fsm_output(5)));
  mux_27_nl <= MUX_s_1_2_2(not_tmp_8, and_272_cse, or_41_cse);
  mux_62_nl <= MUX_s_1_2_2(mux_tmp_48, and_272_cse, or_41_cse);
  mux_64_nl <= MUX_s_1_2_2(mux_27_nl, mux_62_nl, fsm_output(0));
  and_56_nl <= (NOT mux_64_nl) AND and_dcpl_25;
  and_59_nl <= and_dcpl_56 AND and_dcpl_6 AND and_dcpl_5;
  mux_65_nl <= MUX_s_1_2_2(mux_tmp_48, and_272_cse, or_59_cse);
  and_61_nl <= (NOT mux_65_nl) AND and_dcpl_56 AND (NOT (fsm_output(5)));
  and_64_nl <= and_dcpl_56 AND CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("01"))
      AND and_dcpl_17;
  and_99_nl <= or_59_cse AND (fsm_output(3));
  mux_67_nl <= MUX_s_1_2_2(or_tmp_45, mux_tmp_53, and_99_nl);
  and_65_nl <= (NOT mux_67_nl) AND and_dcpl_56;
  or_64_nl <= CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("100"));
  or_62_nl <= CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("011"));
  mux_68_nl <= MUX_s_1_2_2(or_64_nl, or_62_nl, fsm_output(4));
  mux_69_nl <= MUX_s_1_2_2(mux_68_nl, or_tmp_34, fsm_output(3));
  operator_66_true_acc_47_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_3_itm),
      12), 13) + CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_5), 11), 13), 13));
  operator_66_true_acc_48_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_4_itm),
      14), 15) + CONV_SIGNED(SIGNED(operator_66_true_acc_47_nl), 15), 15));
  operator_66_true_acc_49_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_5_itm),
      16), 17) + CONV_SIGNED(SIGNED(operator_66_true_acc_48_nl), 17), 17));
  operator_66_true_acc_50_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_6_itm),
      18), 19) + CONV_SIGNED(SIGNED(operator_66_true_acc_49_nl), 19), 19));
  operator_66_true_acc_51_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_7_itm),
      20), 21) + CONV_SIGNED(SIGNED(operator_66_true_acc_50_nl), 21), 21));
  operator_66_true_acc_53_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_9_itm),
      24), 25) + CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_52_itm), 23),
      25), 25));
  operator_66_true_acc_54_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_10_itm),
      26), 27) + CONV_SIGNED(SIGNED(operator_66_true_acc_53_nl), 27), 27));
  operator_66_true_acc_55_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_11_itm),
      28), 29) + CONV_SIGNED(SIGNED(operator_66_true_acc_54_nl), 29), 29));
  operator_66_true_acc_56_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_12_itm),
      30), 31) + CONV_SIGNED(SIGNED(operator_66_true_acc_55_nl), 31), 31));
  operator_66_true_acc_57_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_13_itm),
      32), 33) + CONV_SIGNED(SIGNED(operator_66_true_acc_56_nl), 33), 33));
  operator_66_true_acc_59_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_15_itm),
      36), 37) + CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_58_itm), 35),
      37), 37));
  operator_66_true_acc_60_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_16_itm),
      38), 39) + CONV_SIGNED(SIGNED(operator_66_true_acc_59_nl), 39), 39));
  operator_66_true_acc_61_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_17_itm),
      40), 41) + CONV_SIGNED(SIGNED(operator_66_true_acc_60_nl), 41), 41));
  operator_66_true_acc_62_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_18_itm),
      42), 43) + CONV_SIGNED(SIGNED(operator_66_true_acc_61_nl), 43), 43));
  operator_66_true_acc_64_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_20_itm),
      46), 47) + CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_63_itm), 45),
      47), 47));
  operator_66_true_acc_65_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_21_itm),
      48), 49) + CONV_SIGNED(SIGNED(operator_66_true_acc_64_nl), 49), 49));
  operator_66_true_acc_66_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_22_itm),
      50), 51) + CONV_SIGNED(SIGNED(operator_66_true_acc_65_nl), 51), 51));
  and_74_nl <= and_dcpl_15 AND and_dcpl_72;
  or_140_nl <= (NOT((NOT(CONV_SL_1_1(fsm_output(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"))))
      OR (fsm_output(7)))) OR CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("00"));
  mux_115_nl <= MUX_s_1_2_2(or_140_nl, (fsm_output(7)), fsm_output(6));
  or_135_nl <= (fsm_output(7)) OR not_tmp_145;
  mux_111_nl <= MUX_s_1_2_2(mux_118_cse, or_135_nl, or_134_cse);
  mux_113_nl <= MUX_s_1_2_2(mux_112_cse, mux_111_nl, fsm_output(2));
  mux_114_nl <= MUX_s_1_2_2(mux_113_nl, (fsm_output(7)), fsm_output(6));
  mux_116_nl <= MUX_s_1_2_2(mux_115_nl, mux_114_nl, fsm_output(3));
  or_145_nl <= (fsm_output(2)) OR (fsm_output(0)) OR (fsm_output(1)) OR (fsm_output(7))
      OR (fsm_output(5)) OR (fsm_output(4));
  or_143_nl <= (fsm_output(1)) OR (fsm_output(7)) OR not_tmp_145;
  mux_117_nl <= MUX_s_1_2_2(or_143_nl, or_137_cse, fsm_output(0));
  mux_120_nl <= MUX_s_1_2_2(mux_112_cse, mux_117_nl, fsm_output(2));
  mux_121_nl <= MUX_s_1_2_2(or_145_nl, mux_120_nl, fsm_output(3));
  nor_95_nl <= NOT((fsm_output(5)) OR (NOT or_tmp_99));
  mux_126_nl <= MUX_s_1_2_2(nor_95_nl, or_tmp_99, or_41_cse);
  mux_127_nl <= MUX_s_1_2_2(mux_126_nl, or_tmp_99, fsm_output(0));
  and_274_nl <= nor_91_cse AND not_tmp_8;
  mux_128_nl <= MUX_s_1_2_2(or_tmp_99, mux_127_nl, and_274_nl);
  or_151_nl <= (NOT (fsm_output(3))) OR (NOT (fsm_output(4))) OR (fsm_output(7))
      OR (fsm_output(1)) OR (NOT (fsm_output(5)));
  mux_124_nl <= MUX_s_1_2_2(or_tmp_96, or_151_nl, fsm_output(2));
  or_147_nl <= (fsm_output(4)) OR (fsm_output(7)) OR (NOT (fsm_output(1))) OR (fsm_output(5));
  mux_122_nl <= MUX_s_1_2_2(or_147_nl, or_137_cse, fsm_output(3));
  mux_123_nl <= MUX_s_1_2_2(or_tmp_96, mux_122_nl, fsm_output(2));
  mux_125_nl <= MUX_s_1_2_2(mux_124_nl, mux_123_nl, fsm_output(0));
  mux_98_nl <= MUX_s_1_2_2(mux_tmp_53, or_tmp_73, fsm_output(3));
  mux_99_nl <= MUX_s_1_2_2(mux_98_nl, or_tmp_72, or_59_cse);
  or_99_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00"));
  mux_100_nl <= MUX_s_1_2_2((NOT (fsm_output(5))), (fsm_output(5)), or_99_nl);
  mux_101_nl <= MUX_s_1_2_2(mux_100_nl, or_tmp_72, or_59_cse);
  COPY_LOOP_1_i_mux_nl <= MUX_v_10_2_2(((COPY_LOOP_1_i_10_0_sva_1_10_9(0)) & COPY_LOOP_1_i_10_0_sva_1_8_0),
      COMP_LOOP_f2_lshift_itm, COPY_LOOP_1_i_10_0_sva_9_0_mx0c2);
  COPY_LOOP_1_i_not_nl <= NOT COPY_LOOP_1_i_10_0_sva_9_0_mx0c0;
  operator_66_true_mux_43_nl <= MUX_v_2_2_2((operator_64_false_acc_psp_sva_mx0w0(28
      DOWNTO 27)), (operator_64_false_acc_psp_sva_63_0(30 DOWNTO 29)), and_dcpl_101);
  operator_66_true_mux_44_nl <= MUX_v_24_2_2(STD_LOGIC_VECTOR'( "011001100110011001100110"),
      STD_LOGIC_VECTOR'( "100110011001100110011001"), and_dcpl_101);
  z_out_27_0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_66_true_mux_43_nl)
      * UNSIGNED(CONV_SIGNED(SIGNED(operator_66_true_mux_44_nl & '1'),26))), 28));
  operator_66_true_mux_45_nl <= MUX_v_2_2_2((operator_64_false_acc_psp_sva_mx0w0(46
      DOWNTO 45)), (operator_64_false_acc_psp_sva_63_0(48 DOWNTO 47)), and_137_cse);
  operator_66_true_mux_46_nl <= MUX_v_42_2_2(STD_LOGIC_VECTOR'( "011001100110011001100110011001100110011001"),
      STD_LOGIC_VECTOR'( "100110011001100110011001100110011001100110"), and_137_cse);
  z_out_1_45_0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_66_true_mux_45_nl)
      * UNSIGNED(CONV_SIGNED(SIGNED(operator_66_true_mux_46_nl & '1'),44))), 46));
  operator_66_true_mux_47_nl <= MUX_v_4_2_2(z_out_11, ('0' & (z_out_5(3 DOWNTO 1))),
      and_dcpl_123);
  operator_66_true_acc_73_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(10
      DOWNTO 9)), 2), 4) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(12
      DOWNTO 11))), 2), 4) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(14
      DOWNTO 13)), 2), 4) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(16
      DOWNTO 15))), 2), 4), 4));
  operator_66_true_mux_48_nl <= MUX_v_4_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_73_nl),
      4)), STD_LOGIC_VECTOR'( "1011"), and_dcpl_123);
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_47_nl),
      5) + CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_48_nl), 5), 5));
  operator_66_true_mux_49_nl <= MUX_v_2_2_2((operator_64_false_acc_psp_sva_mx0w0(62
      DOWNTO 61)), (operator_66_true_acc_psp_sva(3 DOWNTO 2)), and_137_cse);
  operator_66_true_mux_50_nl <= MUX_v_2_2_2((NOT (operator_64_false_acc_psp_sva_mx0w0(64
      DOWNTO 63))), STD_LOGIC_VECTOR'( (operator_66_true_acc_psp_sva(4)) & (operator_66_true_acc_psp_sva(4))),
      and_137_cse);
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_49_nl
      & '1'), 3), 4) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_50_nl
      & '1'), 3), 4), 4));
  z_out_3 <= acc_1_nl(3 DOWNTO 1);
  operator_66_true_acc_76_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_2),
      5), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(18
      DOWNTO 17)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(20
      DOWNTO 19))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(26
      DOWNTO 25)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(28
      DOWNTO 27))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(30
      DOWNTO 29)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(32
      DOWNTO 31))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(22
      DOWNTO 21)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(24
      DOWNTO 23))), 2), 6), 6));
  operator_66_true_acc_84_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (operator_64_false_acc_psp_sva_63_0(8
      DOWNTO 7)))) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(operator_66_true_acc_psp_sva(6),
      1), 1), 3) + SIGNED'( "001"), 3));
  operator_66_true_mul_29_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( CONV_SIGNED(SIGNED(operator_66_true_acc_84_nl),
      3) * SIGNED'( "10011")), 7));
  operator_66_true_mux_51_nl <= MUX_v_7_2_2(('0' & STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_76_nl),
      6))), STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(operator_66_true_mul_29_nl), 7)),
      and_169_cse);
  operator_66_true_and_4_nl <= operator_64_false_acc_psp_sva_64 AND (NOT (operator_66_true_acc_2_psp_sva_1(2)))
      AND (CONV_SL_1_1(operator_66_true_acc_2_psp_sva_1(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (operator_64_false_acc_psp_sva_63_0(0))) AND (NOT(and_dcpl_8 AND nor_71_cse
      AND and_dcpl_144));
  operator_66_true_acc_85_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(34
      DOWNTO 33)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(36
      DOWNTO 35))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(38
      DOWNTO 37)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(40
      DOWNTO 39))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(42
      DOWNTO 41)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(44
      DOWNTO 43))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(46
      DOWNTO 45)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(48
      DOWNTO 47))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_3), 3), 6)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(58
      DOWNTO 57)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(60
      DOWNTO 59))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(50
      DOWNTO 49)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(52
      DOWNTO 51))), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(54
      DOWNTO 53)), 2), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(56
      DOWNTO 55))), 2), 6), 6));
  operator_66_true_acc_100_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_11(2
      DOWNTO 0)), 3), 5) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(z_out_3), 3), 5) +
      CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT (operator_66_true_acc_4_psp_sva_1(3)),
      1), 1), 5), 5));
  operator_66_true_operator_66_true_nand_1_nl <= NOT((operator_66_true_acc_2_psp_sva_1(2))
      AND (NOT operator_64_false_acc_psp_sva_64));
  operator_66_true_acc_99_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_100_nl),
      6) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED((operator_66_true_acc_psp_sva(5)) &
      (operator_64_false_acc_psp_sva_63_0(6 DOWNTO 5)) & (operator_66_true_acc_4_psp_sva_1(2))),
      4), 6) + CONV_SIGNED(CONV_UNSIGNED(operator_66_true_operator_66_true_nand_1_nl,
      1), 6), 6));
  operator_66_true_mux_52_nl <= MUX_v_7_2_2(('0' & STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_85_nl),
      6))), STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_99_nl),
      6),7)), and_169_cse);
  acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED(operator_66_true_mux_51_nl
      & operator_66_true_and_4_nl), 8), 9) + CONV_UNSIGNED(CONV_SIGNED(SIGNED(operator_66_true_mux_52_nl
      & '1'), 8), 9), 9));
  z_out_4 <= acc_2_nl(8 DOWNTO 1);
  and_276_nl <= and_dcpl_40 AND (fsm_output(3)) AND (fsm_output(1)) AND and_dcpl_144;
  COPY_LOOP_1_or_2_nl <= (nor_91_cse AND CONV_SL_1_1(fsm_output(5 DOWNTO 0)=STD_LOGIC_VECTOR'("100001")))
      OR and_dcpl_164;
  COPY_LOOP_1_mux1h_2_nl <= MUX1HOT_v_10_3_2(COPY_LOOP_1_i_10_0_sva_9_0, operator_66_true_mul_2_itm,
      STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TWIDDLE_LOOP_i_3_0_sva),10)), STD_LOGIC_VECTOR'(
      and_276_nl & and_dcpl_154 & COPY_LOOP_1_or_2_nl));
  COPY_LOOP_1_mux_1_nl <= MUX_v_9_2_2(STD_LOGIC_VECTOR'( "000000001"), operator_66_true_acc_45_itm,
      and_dcpl_154);
  COPY_LOOP_1_COPY_LOOP_1_or_1_nl <= MUX_v_9_2_2(COPY_LOOP_1_mux_1_nl, STD_LOGIC_VECTOR'("111111111"),
      and_dcpl_164);
  z_out_5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COPY_LOOP_1_mux1h_2_nl),
      11) + CONV_UNSIGNED(SIGNED(COPY_LOOP_1_COPY_LOOP_1_or_1_nl), 11), 11));
  operator_66_true_mux_53_nl <= MUX_v_64_2_2((STD_LOGIC_VECTOR'( "00000000000000000000000000000000000000000000000000000000000000")
      & (operator_64_false_acc_psp_sva_63_0(62 DOWNTO 61))), modExp_dev_result_1_sva,
      and_dcpl_175);
  operator_66_true_mux_54_nl <= MUX_v_64_2_2(STD_LOGIC_VECTOR'( "0000001100110011001100110011001100110011001100110011001100110011"),
      modExp_dev_base_sva, and_dcpl_175);
  z_out_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(operator_66_true_mux_53_nl)
      * UNSIGNED(operator_66_true_mux_54_nl)), 64));
  not_356_nl <= NOT and_dcpl_188;
  TWIDDLE_LOOP_TWIDDLE_LOOP_and_1_nl <= MUX_v_64_2_2(STD_LOGIC_VECTOR'("0000000000000000000000000000000000000000000000000000000000000000"),
      witer_sva, not_356_nl);
  TWIDDLE_LOOP_mux_3_nl <= MUX_v_64_2_2(modExp_dev_result_1_sva, STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(COPY_LOOP_1_i_10_0_sva_9_0),64)),
      and_dcpl_188);
  z_out_7 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(TWIDDLE_LOOP_TWIDDLE_LOOP_and_1_nl)
      * UNSIGNED(TWIDDLE_LOOP_mux_3_nl)), 64));
  operator_66_true_mux_55_nl <= MUX_v_64_2_2((STD_LOGIC_VECTOR'( "0000") & operator_66_true_mul_27_itm),
      operator_64_false_acc_psp_sva_63_0, and_dcpl_202);
  operator_66_true_acc_103_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_24_itm),
      54), 55) + CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_67_itm), 53),
      55), 55));
  operator_66_true_acc_102_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_25_itm),
      56), 57) + CONV_SIGNED(SIGNED(operator_66_true_acc_103_nl), 57), 57));
  operator_66_true_acc_101_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mul_26_itm),
      58), 59) + CONV_SIGNED(SIGNED(operator_66_true_acc_102_nl), 59), 59));
  operator_66_true_mux_56_nl <= MUX_v_64_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(SIGNED(operator_66_true_acc_101_nl),
      59),64)), modulo_dev_1_mux_cse, and_dcpl_202);
  z_out_8 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_55_nl)
      + UNSIGNED(operator_66_true_mux_56_nl), 64));
  and_278_nl <= nor_91_cse AND and_dcpl_6 AND (fsm_output(3)) AND (NOT (fsm_output(1)))
      AND and_dcpl_144;
  operator_64_false_mux_3_nl <= MUX_v_64_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(NOT
      operator_66_true_operator_66_true_acc_psp_1),64)), (NOT modExp_dev_exp_sva_4),
      and_278_nl);
  operator_64_false_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & operator_64_false_mux_3_nl)
      + UNSIGNED'( "00000000000000000000000000000000000000000000000000000000000000001"),
      65));
  z_out_9_64 <= operator_64_false_acc_nl(64);
  operator_66_true_mux_57_nl <= MUX_v_4_2_2((STD_LOGIC_VECTOR'( "000") & (NOT (operator_66_true_acc_4_psp_sva_1(2)))),
      (z_out_5(3 DOWNTO 0)), and_dcpl_226);
  operator_66_true_or_3_nl <= (NOT (operator_66_true_acc_4_psp_sva_1(3))) OR and_dcpl_226;
  z_out_10 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_57_nl),
      5) + CONV_UNSIGNED(CONV_SIGNED(operator_66_true_or_3_nl, 1), 5), 5));
  operator_66_true_acc_104_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(2
      DOWNTO 1)), 2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(4
      DOWNTO 3))), 2), 3), 3));
  operator_66_true_mux_58_nl <= MUX_v_3_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_104_nl),
      3)), ('1' & (operator_64_false_acc_psp_sva_63_0(4 DOWNTO 3))), and_169_cse);
  operator_66_true_operator_66_true_nor_1_nl <= NOT((operator_66_true_acc_psp_sva(5))
      OR (and_dcpl_8 AND nor_71_cse AND and_dcpl_144));
  operator_66_true_acc_105_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_acc_psp_sva_mx0w0(6
      DOWNTO 5)), 2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (operator_64_false_acc_psp_sva_mx0w0(8
      DOWNTO 7))), 2), 3), 3));
  operator_66_true_mux_59_nl <= MUX_v_3_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(operator_66_true_acc_105_nl),
      3)), ('0' & (operator_64_false_acc_psp_sva_63_0(6 DOWNTO 5))), and_169_cse);
  acc_7_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_58_nl
      & operator_66_true_operator_66_true_nor_1_nl), 4), 5) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_66_true_mux_59_nl
      & '1'), 4), 5), 5));
  z_out_11 <= acc_7_nl(4 DOWNTO 1);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    peaceNTT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaceNTT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    vec_rsc_qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    g_rsc_triosy_lz : OUT STD_LOGIC;
    result_rsc_wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    result_rsc_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    result_rsc_we : OUT STD_LOGIC;
    result_rsc_radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    result_rsc_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    result_rsc_triosy_lz : OUT STD_LOGIC
  );
END peaceNTT;

ARCHITECTURE v6 OF peaceNTT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL vec_rsci_qb_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsci_readB_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL result_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL result_rsci_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsci_clken_d : STD_LOGIC;
  SIGNAL twiddle_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsci_clken_d : STD_LOGIC;
  SIGNAL xt_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_clken : STD_LOGIC;
  SIGNAL twiddle_rsc_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsc_we : STD_LOGIC;
  SIGNAL twiddle_rsc_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsc_clken : STD_LOGIC;
  SIGNAL xt_rsc_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsc_we : STD_LOGIC;
  SIGNAL xt_rsc_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL vec_rsci_adrb_d_iff : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL result_rsci_we_d_iff : STD_LOGIC;
  SIGNAL twiddle_rsci_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsci_we_d_iff : STD_LOGIC;

  SIGNAL twiddle_rsc_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_comp_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsc_comp_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);

  SIGNAL xt_rsc_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_comp_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsc_comp_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen
    PORT(
      qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      adrb_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      qb_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      readB_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsci_qb : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsci_adrb : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL vec_rsci_adrb_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL vec_rsci_qb_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL result_rsci_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL result_rsci_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL result_rsci_d_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL result_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL result_rsci_wadr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsci_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_d_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_radr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_wadr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsci_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_d_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_radr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaceNTT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      vec_rsc_triosy_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      g_rsc_triosy_lz : OUT STD_LOGIC;
      result_rsc_triosy_lz : OUT STD_LOGIC;
      vec_rsci_qb_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsci_readB_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      result_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      result_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      result_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      result_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsci_clken_d : OUT STD_LOGIC;
      twiddle_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsci_clken_d : OUT STD_LOGIC;
      xt_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsci_adrb_d_pff : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      result_rsci_we_d_pff : OUT STD_LOGIC;
      twiddle_rsci_we_d_pff : OUT STD_LOGIC;
      xt_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL peaceNTT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_g_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_vec_rsci_qb_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_result_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_result_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_result_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_twiddle_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_twiddle_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_twiddle_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_twiddle_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_xt_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_xt_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_xt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaceNTT_core_inst_vec_rsci_adrb_d_pff : STD_LOGIC_VECTOR (9 DOWNTO 0);

BEGIN
  twiddle_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 10,
      data_width => 64,
      depth => 1024,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => twiddle_rsc_clken,
      d => twiddle_rsc_comp_d,
      q => twiddle_rsc_comp_q,
      radr => twiddle_rsc_comp_radr,
      wadr => twiddle_rsc_comp_wadr,
      we => twiddle_rsc_we
    );
  twiddle_rsc_comp_d <= twiddle_rsc_d;
  twiddle_rsc_q <= twiddle_rsc_comp_q;
  twiddle_rsc_comp_radr <= twiddle_rsc_radr;
  twiddle_rsc_comp_wadr <= twiddle_rsc_wadr;

  xt_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 10,
      data_width => 64,
      depth => 1024,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => xt_rsc_clken,
      d => xt_rsc_comp_d,
      q => xt_rsc_comp_q,
      radr => xt_rsc_comp_radr,
      wadr => xt_rsc_comp_wadr,
      we => xt_rsc_we
    );
  xt_rsc_comp_d <= xt_rsc_d;
  xt_rsc_q <= xt_rsc_comp_q;
  xt_rsc_comp_radr <= xt_rsc_radr;
  xt_rsc_comp_wadr <= xt_rsc_wadr;

  vec_rsci : peaceNTT_Xilinx_RAMS_BLOCK_2R1W_WBR_DUAL_rport_1_10_64_1024_1024_64_1_gen
    PORT MAP(
      qb => vec_rsci_qb,
      adrb => vec_rsci_adrb,
      adrb_d => vec_rsci_adrb_d,
      qb_d => vec_rsci_qb_d_1,
      readB_r_ram_ir_internal_RMASK_B_d => vec_rsci_readB_r_ram_ir_internal_RMASK_B_d
    );
  vec_rsci_qb <= vec_rsc_qb;
  vec_rsc_adrb <= vec_rsci_adrb;
  vec_rsci_adrb_d <= vec_rsci_adrb_d_iff;
  vec_rsci_qb_d <= vec_rsci_qb_d_1;

  result_rsci : peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    PORT MAP(
      q => result_rsci_q,
      radr => result_rsci_radr,
      we => result_rsc_we,
      d => result_rsci_d,
      wadr => result_rsci_wadr,
      d_d => result_rsci_d_d_1,
      q_d => result_rsci_q_d_1,
      radr_d => result_rsci_radr_d,
      wadr_d => result_rsci_wadr_d_1,
      we_d => result_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => result_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => result_rsci_readA_r_ram_ir_internal_RMASK_B_d
    );
  result_rsci_q <= result_rsc_q;
  result_rsc_radr <= result_rsci_radr;
  result_rsc_d <= result_rsci_d;
  result_rsc_wadr <= result_rsci_wadr;
  result_rsci_d_d_1 <= result_rsci_d_d;
  result_rsci_q_d <= result_rsci_q_d_1;
  result_rsci_radr_d <= vec_rsci_adrb_d_iff;
  result_rsci_wadr_d_1 <= result_rsci_wadr_d;

  twiddle_rsci : peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    PORT MAP(
      clken => twiddle_rsc_clken,
      q => twiddle_rsci_q,
      radr => twiddle_rsci_radr,
      we => twiddle_rsc_we,
      d => twiddle_rsci_d,
      wadr => twiddle_rsci_wadr,
      clken_d => twiddle_rsci_clken_d,
      d_d => twiddle_rsci_d_d_1,
      q_d => twiddle_rsci_q_d_1,
      radr_d => twiddle_rsci_radr_d_1,
      wadr_d => twiddle_rsci_wadr_d_1,
      we_d => twiddle_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => twiddle_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsci_q <= twiddle_rsc_q;
  twiddle_rsc_radr <= twiddle_rsci_radr;
  twiddle_rsc_d <= twiddle_rsci_d;
  twiddle_rsc_wadr <= twiddle_rsci_wadr;
  twiddle_rsci_d_d_1 <= twiddle_rsci_d_d;
  twiddle_rsci_q_d <= twiddle_rsci_q_d_1;
  twiddle_rsci_radr_d_1 <= twiddle_rsci_radr_d;
  twiddle_rsci_wadr_d_1 <= twiddle_rsci_wadr_d;

  xt_rsci : peaceNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_64_1024_1024_64_1_gen
    PORT MAP(
      clken => xt_rsc_clken,
      q => xt_rsci_q,
      radr => xt_rsci_radr,
      we => xt_rsc_we,
      d => xt_rsci_d,
      wadr => xt_rsci_wadr,
      clken_d => xt_rsci_clken_d,
      d_d => xt_rsci_d_d_1,
      q_d => xt_rsci_q_d_1,
      radr_d => xt_rsci_radr_d_1,
      wadr_d => xt_rsci_wadr_d,
      we_d => xt_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsci_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsci_q <= xt_rsc_q;
  xt_rsc_radr <= xt_rsci_radr;
  xt_rsc_d <= xt_rsci_d;
  xt_rsc_wadr <= xt_rsci_wadr;
  xt_rsci_d_d_1 <= xt_rsci_d_d;
  xt_rsci_q_d <= xt_rsci_q_d_1;
  xt_rsci_radr_d_1 <= xt_rsci_radr_d;
  xt_rsci_wadr_d <= vec_rsci_adrb_d_iff;

  peaceNTT_core_inst : peaceNTT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      vec_rsc_triosy_lz => vec_rsc_triosy_lz,
      p_rsc_dat => peaceNTT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      g_rsc_dat => peaceNTT_core_inst_g_rsc_dat,
      g_rsc_triosy_lz => g_rsc_triosy_lz,
      result_rsc_triosy_lz => result_rsc_triosy_lz,
      vec_rsci_qb_d => peaceNTT_core_inst_vec_rsci_qb_d,
      vec_rsci_readB_r_ram_ir_internal_RMASK_B_d => vec_rsci_readB_r_ram_ir_internal_RMASK_B_d,
      result_rsci_d_d => peaceNTT_core_inst_result_rsci_d_d,
      result_rsci_q_d => peaceNTT_core_inst_result_rsci_q_d,
      result_rsci_wadr_d => peaceNTT_core_inst_result_rsci_wadr_d,
      result_rsci_readA_r_ram_ir_internal_RMASK_B_d => result_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsci_clken_d => twiddle_rsci_clken_d,
      twiddle_rsci_d_d => peaceNTT_core_inst_twiddle_rsci_d_d,
      twiddle_rsci_q_d => peaceNTT_core_inst_twiddle_rsci_q_d,
      twiddle_rsci_radr_d => peaceNTT_core_inst_twiddle_rsci_radr_d,
      twiddle_rsci_wadr_d => peaceNTT_core_inst_twiddle_rsci_wadr_d,
      twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsci_clken_d => xt_rsci_clken_d,
      xt_rsci_d_d => peaceNTT_core_inst_xt_rsci_d_d,
      xt_rsci_q_d => peaceNTT_core_inst_xt_rsci_q_d,
      xt_rsci_radr_d => peaceNTT_core_inst_xt_rsci_radr_d,
      xt_rsci_readA_r_ram_ir_internal_RMASK_B_d => xt_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsci_adrb_d_pff => peaceNTT_core_inst_vec_rsci_adrb_d_pff,
      result_rsci_we_d_pff => result_rsci_we_d_iff,
      twiddle_rsci_we_d_pff => twiddle_rsci_we_d_iff,
      xt_rsci_we_d_pff => xt_rsci_we_d_iff
    );
  peaceNTT_core_inst_p_rsc_dat <= p_rsc_dat;
  peaceNTT_core_inst_g_rsc_dat <= g_rsc_dat;
  peaceNTT_core_inst_vec_rsci_qb_d <= vec_rsci_qb_d;
  result_rsci_d_d <= peaceNTT_core_inst_result_rsci_d_d;
  peaceNTT_core_inst_result_rsci_q_d <= result_rsci_q_d;
  result_rsci_wadr_d <= peaceNTT_core_inst_result_rsci_wadr_d;
  twiddle_rsci_d_d <= peaceNTT_core_inst_twiddle_rsci_d_d;
  peaceNTT_core_inst_twiddle_rsci_q_d <= twiddle_rsci_q_d;
  twiddle_rsci_radr_d <= peaceNTT_core_inst_twiddle_rsci_radr_d;
  twiddle_rsci_wadr_d <= peaceNTT_core_inst_twiddle_rsci_wadr_d;
  xt_rsci_d_d <= peaceNTT_core_inst_xt_rsci_d_d;
  peaceNTT_core_inst_xt_rsci_q_d <= xt_rsci_q_d;
  xt_rsci_radr_d <= peaceNTT_core_inst_xt_rsci_radr_d;
  vec_rsci_adrb_d_iff <= peaceNTT_core_inst_vec_rsci_adrb_d_pff;

END v6;



