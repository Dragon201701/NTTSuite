// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 20 15:35:48 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_3_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, COMP_LOOP_1_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_45_tr0,
      COMP_LOOP_2_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_90_tr0, COMP_LOOP_3_modExp_dev_1_while_C_11_tr0,
      COMP_LOOP_C_135_tr0, COMP_LOOP_4_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_180_tr0,
      STAGE_VEC_LOOP_C_1_tr0, STAGE_MAIN_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_MAIN_LOOP_C_3_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_45_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_90_tr0;
  input COMP_LOOP_3_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_135_tr0;
  input COMP_LOOP_4_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_180_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_MAIN_LOOP_C_0 = 8'd1,
    STAGE_MAIN_LOOP_C_1 = 8'd2,
    STAGE_MAIN_LOOP_C_2 = 8'd3,
    STAGE_MAIN_LOOP_C_3 = 8'd4,
    modExp_dev_while_C_0 = 8'd5,
    modExp_dev_while_C_1 = 8'd6,
    modExp_dev_while_C_2 = 8'd7,
    modExp_dev_while_C_3 = 8'd8,
    modExp_dev_while_C_4 = 8'd9,
    modExp_dev_while_C_5 = 8'd10,
    modExp_dev_while_C_6 = 8'd11,
    modExp_dev_while_C_7 = 8'd12,
    modExp_dev_while_C_8 = 8'd13,
    modExp_dev_while_C_9 = 8'd14,
    modExp_dev_while_C_10 = 8'd15,
    modExp_dev_while_C_11 = 8'd16,
    STAGE_VEC_LOOP_C_0 = 8'd17,
    COMP_LOOP_C_0 = 8'd18,
    COMP_LOOP_C_1 = 8'd19,
    COMP_LOOP_C_2 = 8'd20,
    COMP_LOOP_C_3 = 8'd21,
    COMP_LOOP_C_4 = 8'd22,
    COMP_LOOP_C_5 = 8'd23,
    COMP_LOOP_C_6 = 8'd24,
    COMP_LOOP_C_7 = 8'd25,
    COMP_LOOP_C_8 = 8'd26,
    COMP_LOOP_C_9 = 8'd27,
    COMP_LOOP_C_10 = 8'd28,
    COMP_LOOP_C_11 = 8'd29,
    COMP_LOOP_C_12 = 8'd30,
    COMP_LOOP_C_13 = 8'd31,
    COMP_LOOP_C_14 = 8'd32,
    COMP_LOOP_C_15 = 8'd33,
    COMP_LOOP_C_16 = 8'd34,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd36,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd37,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd38,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd39,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd40,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd41,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd42,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd43,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd44,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd45,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd46,
    COMP_LOOP_C_17 = 8'd47,
    COMP_LOOP_C_18 = 8'd48,
    COMP_LOOP_C_19 = 8'd49,
    COMP_LOOP_C_20 = 8'd50,
    COMP_LOOP_C_21 = 8'd51,
    COMP_LOOP_C_22 = 8'd52,
    COMP_LOOP_C_23 = 8'd53,
    COMP_LOOP_C_24 = 8'd54,
    COMP_LOOP_C_25 = 8'd55,
    COMP_LOOP_C_26 = 8'd56,
    COMP_LOOP_C_27 = 8'd57,
    COMP_LOOP_C_28 = 8'd58,
    COMP_LOOP_C_29 = 8'd59,
    COMP_LOOP_C_30 = 8'd60,
    COMP_LOOP_C_31 = 8'd61,
    COMP_LOOP_C_32 = 8'd62,
    COMP_LOOP_C_33 = 8'd63,
    COMP_LOOP_C_34 = 8'd64,
    COMP_LOOP_C_35 = 8'd65,
    COMP_LOOP_C_36 = 8'd66,
    COMP_LOOP_C_37 = 8'd67,
    COMP_LOOP_C_38 = 8'd68,
    COMP_LOOP_C_39 = 8'd69,
    COMP_LOOP_C_40 = 8'd70,
    COMP_LOOP_C_41 = 8'd71,
    COMP_LOOP_C_42 = 8'd72,
    COMP_LOOP_C_43 = 8'd73,
    COMP_LOOP_C_44 = 8'd74,
    COMP_LOOP_C_45 = 8'd75,
    COMP_LOOP_C_46 = 8'd76,
    COMP_LOOP_C_47 = 8'd77,
    COMP_LOOP_C_48 = 8'd78,
    COMP_LOOP_C_49 = 8'd79,
    COMP_LOOP_C_50 = 8'd80,
    COMP_LOOP_C_51 = 8'd81,
    COMP_LOOP_C_52 = 8'd82,
    COMP_LOOP_C_53 = 8'd83,
    COMP_LOOP_C_54 = 8'd84,
    COMP_LOOP_C_55 = 8'd85,
    COMP_LOOP_C_56 = 8'd86,
    COMP_LOOP_C_57 = 8'd87,
    COMP_LOOP_C_58 = 8'd88,
    COMP_LOOP_C_59 = 8'd89,
    COMP_LOOP_C_60 = 8'd90,
    COMP_LOOP_C_61 = 8'd91,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd92,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd93,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd94,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd95,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd96,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd97,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd98,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd99,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd100,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd101,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd102,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd103,
    COMP_LOOP_C_62 = 8'd104,
    COMP_LOOP_C_63 = 8'd105,
    COMP_LOOP_C_64 = 8'd106,
    COMP_LOOP_C_65 = 8'd107,
    COMP_LOOP_C_66 = 8'd108,
    COMP_LOOP_C_67 = 8'd109,
    COMP_LOOP_C_68 = 8'd110,
    COMP_LOOP_C_69 = 8'd111,
    COMP_LOOP_C_70 = 8'd112,
    COMP_LOOP_C_71 = 8'd113,
    COMP_LOOP_C_72 = 8'd114,
    COMP_LOOP_C_73 = 8'd115,
    COMP_LOOP_C_74 = 8'd116,
    COMP_LOOP_C_75 = 8'd117,
    COMP_LOOP_C_76 = 8'd118,
    COMP_LOOP_C_77 = 8'd119,
    COMP_LOOP_C_78 = 8'd120,
    COMP_LOOP_C_79 = 8'd121,
    COMP_LOOP_C_80 = 8'd122,
    COMP_LOOP_C_81 = 8'd123,
    COMP_LOOP_C_82 = 8'd124,
    COMP_LOOP_C_83 = 8'd125,
    COMP_LOOP_C_84 = 8'd126,
    COMP_LOOP_C_85 = 8'd127,
    COMP_LOOP_C_86 = 8'd128,
    COMP_LOOP_C_87 = 8'd129,
    COMP_LOOP_C_88 = 8'd130,
    COMP_LOOP_C_89 = 8'd131,
    COMP_LOOP_C_90 = 8'd132,
    COMP_LOOP_C_91 = 8'd133,
    COMP_LOOP_C_92 = 8'd134,
    COMP_LOOP_C_93 = 8'd135,
    COMP_LOOP_C_94 = 8'd136,
    COMP_LOOP_C_95 = 8'd137,
    COMP_LOOP_C_96 = 8'd138,
    COMP_LOOP_C_97 = 8'd139,
    COMP_LOOP_C_98 = 8'd140,
    COMP_LOOP_C_99 = 8'd141,
    COMP_LOOP_C_100 = 8'd142,
    COMP_LOOP_C_101 = 8'd143,
    COMP_LOOP_C_102 = 8'd144,
    COMP_LOOP_C_103 = 8'd145,
    COMP_LOOP_C_104 = 8'd146,
    COMP_LOOP_C_105 = 8'd147,
    COMP_LOOP_C_106 = 8'd148,
    COMP_LOOP_3_modExp_dev_1_while_C_0 = 8'd149,
    COMP_LOOP_3_modExp_dev_1_while_C_1 = 8'd150,
    COMP_LOOP_3_modExp_dev_1_while_C_2 = 8'd151,
    COMP_LOOP_3_modExp_dev_1_while_C_3 = 8'd152,
    COMP_LOOP_3_modExp_dev_1_while_C_4 = 8'd153,
    COMP_LOOP_3_modExp_dev_1_while_C_5 = 8'd154,
    COMP_LOOP_3_modExp_dev_1_while_C_6 = 8'd155,
    COMP_LOOP_3_modExp_dev_1_while_C_7 = 8'd156,
    COMP_LOOP_3_modExp_dev_1_while_C_8 = 8'd157,
    COMP_LOOP_3_modExp_dev_1_while_C_9 = 8'd158,
    COMP_LOOP_3_modExp_dev_1_while_C_10 = 8'd159,
    COMP_LOOP_3_modExp_dev_1_while_C_11 = 8'd160,
    COMP_LOOP_C_107 = 8'd161,
    COMP_LOOP_C_108 = 8'd162,
    COMP_LOOP_C_109 = 8'd163,
    COMP_LOOP_C_110 = 8'd164,
    COMP_LOOP_C_111 = 8'd165,
    COMP_LOOP_C_112 = 8'd166,
    COMP_LOOP_C_113 = 8'd167,
    COMP_LOOP_C_114 = 8'd168,
    COMP_LOOP_C_115 = 8'd169,
    COMP_LOOP_C_116 = 8'd170,
    COMP_LOOP_C_117 = 8'd171,
    COMP_LOOP_C_118 = 8'd172,
    COMP_LOOP_C_119 = 8'd173,
    COMP_LOOP_C_120 = 8'd174,
    COMP_LOOP_C_121 = 8'd175,
    COMP_LOOP_C_122 = 8'd176,
    COMP_LOOP_C_123 = 8'd177,
    COMP_LOOP_C_124 = 8'd178,
    COMP_LOOP_C_125 = 8'd179,
    COMP_LOOP_C_126 = 8'd180,
    COMP_LOOP_C_127 = 8'd181,
    COMP_LOOP_C_128 = 8'd182,
    COMP_LOOP_C_129 = 8'd183,
    COMP_LOOP_C_130 = 8'd184,
    COMP_LOOP_C_131 = 8'd185,
    COMP_LOOP_C_132 = 8'd186,
    COMP_LOOP_C_133 = 8'd187,
    COMP_LOOP_C_134 = 8'd188,
    COMP_LOOP_C_135 = 8'd189,
    COMP_LOOP_C_136 = 8'd190,
    COMP_LOOP_C_137 = 8'd191,
    COMP_LOOP_C_138 = 8'd192,
    COMP_LOOP_C_139 = 8'd193,
    COMP_LOOP_C_140 = 8'd194,
    COMP_LOOP_C_141 = 8'd195,
    COMP_LOOP_C_142 = 8'd196,
    COMP_LOOP_C_143 = 8'd197,
    COMP_LOOP_C_144 = 8'd198,
    COMP_LOOP_C_145 = 8'd199,
    COMP_LOOP_C_146 = 8'd200,
    COMP_LOOP_C_147 = 8'd201,
    COMP_LOOP_C_148 = 8'd202,
    COMP_LOOP_C_149 = 8'd203,
    COMP_LOOP_C_150 = 8'd204,
    COMP_LOOP_C_151 = 8'd205,
    COMP_LOOP_4_modExp_dev_1_while_C_0 = 8'd206,
    COMP_LOOP_4_modExp_dev_1_while_C_1 = 8'd207,
    COMP_LOOP_4_modExp_dev_1_while_C_2 = 8'd208,
    COMP_LOOP_4_modExp_dev_1_while_C_3 = 8'd209,
    COMP_LOOP_4_modExp_dev_1_while_C_4 = 8'd210,
    COMP_LOOP_4_modExp_dev_1_while_C_5 = 8'd211,
    COMP_LOOP_4_modExp_dev_1_while_C_6 = 8'd212,
    COMP_LOOP_4_modExp_dev_1_while_C_7 = 8'd213,
    COMP_LOOP_4_modExp_dev_1_while_C_8 = 8'd214,
    COMP_LOOP_4_modExp_dev_1_while_C_9 = 8'd215,
    COMP_LOOP_4_modExp_dev_1_while_C_10 = 8'd216,
    COMP_LOOP_4_modExp_dev_1_while_C_11 = 8'd217,
    COMP_LOOP_C_152 = 8'd218,
    COMP_LOOP_C_153 = 8'd219,
    COMP_LOOP_C_154 = 8'd220,
    COMP_LOOP_C_155 = 8'd221,
    COMP_LOOP_C_156 = 8'd222,
    COMP_LOOP_C_157 = 8'd223,
    COMP_LOOP_C_158 = 8'd224,
    COMP_LOOP_C_159 = 8'd225,
    COMP_LOOP_C_160 = 8'd226,
    COMP_LOOP_C_161 = 8'd227,
    COMP_LOOP_C_162 = 8'd228,
    COMP_LOOP_C_163 = 8'd229,
    COMP_LOOP_C_164 = 8'd230,
    COMP_LOOP_C_165 = 8'd231,
    COMP_LOOP_C_166 = 8'd232,
    COMP_LOOP_C_167 = 8'd233,
    COMP_LOOP_C_168 = 8'd234,
    COMP_LOOP_C_169 = 8'd235,
    COMP_LOOP_C_170 = 8'd236,
    COMP_LOOP_C_171 = 8'd237,
    COMP_LOOP_C_172 = 8'd238,
    COMP_LOOP_C_173 = 8'd239,
    COMP_LOOP_C_174 = 8'd240,
    COMP_LOOP_C_175 = 8'd241,
    COMP_LOOP_C_176 = 8'd242,
    COMP_LOOP_C_177 = 8'd243,
    COMP_LOOP_C_178 = 8'd244,
    COMP_LOOP_C_179 = 8'd245,
    COMP_LOOP_C_180 = 8'd246,
    STAGE_VEC_LOOP_C_1 = 8'd247,
    STAGE_MAIN_LOOP_C_4 = 8'd248,
    main_C_1 = 8'd249;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        if ( STAGE_MAIN_LOOP_C_3_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010000;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 8'b00010001;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00100010;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00101110;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01001011;
        if ( COMP_LOOP_C_45_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_46;
        end
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01100111;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_62;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b10000011;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b10000100;
        if ( COMP_LOOP_C_90_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_91;
        end
      end
      COMP_LOOP_C_91 : begin
        fsm_output = 8'b10000101;
        state_var_NS = COMP_LOOP_C_92;
      end
      COMP_LOOP_C_92 : begin
        fsm_output = 8'b10000110;
        state_var_NS = COMP_LOOP_C_93;
      end
      COMP_LOOP_C_93 : begin
        fsm_output = 8'b10000111;
        state_var_NS = COMP_LOOP_C_94;
      end
      COMP_LOOP_C_94 : begin
        fsm_output = 8'b10001000;
        state_var_NS = COMP_LOOP_C_95;
      end
      COMP_LOOP_C_95 : begin
        fsm_output = 8'b10001001;
        state_var_NS = COMP_LOOP_C_96;
      end
      COMP_LOOP_C_96 : begin
        fsm_output = 8'b10001010;
        state_var_NS = COMP_LOOP_C_97;
      end
      COMP_LOOP_C_97 : begin
        fsm_output = 8'b10001011;
        state_var_NS = COMP_LOOP_C_98;
      end
      COMP_LOOP_C_98 : begin
        fsm_output = 8'b10001100;
        state_var_NS = COMP_LOOP_C_99;
      end
      COMP_LOOP_C_99 : begin
        fsm_output = 8'b10001101;
        state_var_NS = COMP_LOOP_C_100;
      end
      COMP_LOOP_C_100 : begin
        fsm_output = 8'b10001110;
        state_var_NS = COMP_LOOP_C_101;
      end
      COMP_LOOP_C_101 : begin
        fsm_output = 8'b10001111;
        state_var_NS = COMP_LOOP_C_102;
      end
      COMP_LOOP_C_102 : begin
        fsm_output = 8'b10010000;
        state_var_NS = COMP_LOOP_C_103;
      end
      COMP_LOOP_C_103 : begin
        fsm_output = 8'b10010001;
        state_var_NS = COMP_LOOP_C_104;
      end
      COMP_LOOP_C_104 : begin
        fsm_output = 8'b10010010;
        state_var_NS = COMP_LOOP_C_105;
      end
      COMP_LOOP_C_105 : begin
        fsm_output = 8'b10010011;
        state_var_NS = COMP_LOOP_C_106;
      end
      COMP_LOOP_C_106 : begin
        fsm_output = 8'b10010100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b10010101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b10010110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b10010111;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b10011000;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b10011001;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b10011010;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b10011011;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b10011100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b10011101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b10011110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b10011111;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b10100000;
        if ( COMP_LOOP_3_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_107;
        end
        else begin
          state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_107 : begin
        fsm_output = 8'b10100001;
        state_var_NS = COMP_LOOP_C_108;
      end
      COMP_LOOP_C_108 : begin
        fsm_output = 8'b10100010;
        state_var_NS = COMP_LOOP_C_109;
      end
      COMP_LOOP_C_109 : begin
        fsm_output = 8'b10100011;
        state_var_NS = COMP_LOOP_C_110;
      end
      COMP_LOOP_C_110 : begin
        fsm_output = 8'b10100100;
        state_var_NS = COMP_LOOP_C_111;
      end
      COMP_LOOP_C_111 : begin
        fsm_output = 8'b10100101;
        state_var_NS = COMP_LOOP_C_112;
      end
      COMP_LOOP_C_112 : begin
        fsm_output = 8'b10100110;
        state_var_NS = COMP_LOOP_C_113;
      end
      COMP_LOOP_C_113 : begin
        fsm_output = 8'b10100111;
        state_var_NS = COMP_LOOP_C_114;
      end
      COMP_LOOP_C_114 : begin
        fsm_output = 8'b10101000;
        state_var_NS = COMP_LOOP_C_115;
      end
      COMP_LOOP_C_115 : begin
        fsm_output = 8'b10101001;
        state_var_NS = COMP_LOOP_C_116;
      end
      COMP_LOOP_C_116 : begin
        fsm_output = 8'b10101010;
        state_var_NS = COMP_LOOP_C_117;
      end
      COMP_LOOP_C_117 : begin
        fsm_output = 8'b10101011;
        state_var_NS = COMP_LOOP_C_118;
      end
      COMP_LOOP_C_118 : begin
        fsm_output = 8'b10101100;
        state_var_NS = COMP_LOOP_C_119;
      end
      COMP_LOOP_C_119 : begin
        fsm_output = 8'b10101101;
        state_var_NS = COMP_LOOP_C_120;
      end
      COMP_LOOP_C_120 : begin
        fsm_output = 8'b10101110;
        state_var_NS = COMP_LOOP_C_121;
      end
      COMP_LOOP_C_121 : begin
        fsm_output = 8'b10101111;
        state_var_NS = COMP_LOOP_C_122;
      end
      COMP_LOOP_C_122 : begin
        fsm_output = 8'b10110000;
        state_var_NS = COMP_LOOP_C_123;
      end
      COMP_LOOP_C_123 : begin
        fsm_output = 8'b10110001;
        state_var_NS = COMP_LOOP_C_124;
      end
      COMP_LOOP_C_124 : begin
        fsm_output = 8'b10110010;
        state_var_NS = COMP_LOOP_C_125;
      end
      COMP_LOOP_C_125 : begin
        fsm_output = 8'b10110011;
        state_var_NS = COMP_LOOP_C_126;
      end
      COMP_LOOP_C_126 : begin
        fsm_output = 8'b10110100;
        state_var_NS = COMP_LOOP_C_127;
      end
      COMP_LOOP_C_127 : begin
        fsm_output = 8'b10110101;
        state_var_NS = COMP_LOOP_C_128;
      end
      COMP_LOOP_C_128 : begin
        fsm_output = 8'b10110110;
        state_var_NS = COMP_LOOP_C_129;
      end
      COMP_LOOP_C_129 : begin
        fsm_output = 8'b10110111;
        state_var_NS = COMP_LOOP_C_130;
      end
      COMP_LOOP_C_130 : begin
        fsm_output = 8'b10111000;
        state_var_NS = COMP_LOOP_C_131;
      end
      COMP_LOOP_C_131 : begin
        fsm_output = 8'b10111001;
        state_var_NS = COMP_LOOP_C_132;
      end
      COMP_LOOP_C_132 : begin
        fsm_output = 8'b10111010;
        state_var_NS = COMP_LOOP_C_133;
      end
      COMP_LOOP_C_133 : begin
        fsm_output = 8'b10111011;
        state_var_NS = COMP_LOOP_C_134;
      end
      COMP_LOOP_C_134 : begin
        fsm_output = 8'b10111100;
        state_var_NS = COMP_LOOP_C_135;
      end
      COMP_LOOP_C_135 : begin
        fsm_output = 8'b10111101;
        if ( COMP_LOOP_C_135_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_136;
        end
      end
      COMP_LOOP_C_136 : begin
        fsm_output = 8'b10111110;
        state_var_NS = COMP_LOOP_C_137;
      end
      COMP_LOOP_C_137 : begin
        fsm_output = 8'b10111111;
        state_var_NS = COMP_LOOP_C_138;
      end
      COMP_LOOP_C_138 : begin
        fsm_output = 8'b11000000;
        state_var_NS = COMP_LOOP_C_139;
      end
      COMP_LOOP_C_139 : begin
        fsm_output = 8'b11000001;
        state_var_NS = COMP_LOOP_C_140;
      end
      COMP_LOOP_C_140 : begin
        fsm_output = 8'b11000010;
        state_var_NS = COMP_LOOP_C_141;
      end
      COMP_LOOP_C_141 : begin
        fsm_output = 8'b11000011;
        state_var_NS = COMP_LOOP_C_142;
      end
      COMP_LOOP_C_142 : begin
        fsm_output = 8'b11000100;
        state_var_NS = COMP_LOOP_C_143;
      end
      COMP_LOOP_C_143 : begin
        fsm_output = 8'b11000101;
        state_var_NS = COMP_LOOP_C_144;
      end
      COMP_LOOP_C_144 : begin
        fsm_output = 8'b11000110;
        state_var_NS = COMP_LOOP_C_145;
      end
      COMP_LOOP_C_145 : begin
        fsm_output = 8'b11000111;
        state_var_NS = COMP_LOOP_C_146;
      end
      COMP_LOOP_C_146 : begin
        fsm_output = 8'b11001000;
        state_var_NS = COMP_LOOP_C_147;
      end
      COMP_LOOP_C_147 : begin
        fsm_output = 8'b11001001;
        state_var_NS = COMP_LOOP_C_148;
      end
      COMP_LOOP_C_148 : begin
        fsm_output = 8'b11001010;
        state_var_NS = COMP_LOOP_C_149;
      end
      COMP_LOOP_C_149 : begin
        fsm_output = 8'b11001011;
        state_var_NS = COMP_LOOP_C_150;
      end
      COMP_LOOP_C_150 : begin
        fsm_output = 8'b11001100;
        state_var_NS = COMP_LOOP_C_151;
      end
      COMP_LOOP_C_151 : begin
        fsm_output = 8'b11001101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b11001110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b11001111;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b11010000;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b11010001;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b11010010;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b11010011;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b11010100;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b11010101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b11010110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b11010111;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b11011000;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b11011001;
        if ( COMP_LOOP_4_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_152;
        end
        else begin
          state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_152 : begin
        fsm_output = 8'b11011010;
        state_var_NS = COMP_LOOP_C_153;
      end
      COMP_LOOP_C_153 : begin
        fsm_output = 8'b11011011;
        state_var_NS = COMP_LOOP_C_154;
      end
      COMP_LOOP_C_154 : begin
        fsm_output = 8'b11011100;
        state_var_NS = COMP_LOOP_C_155;
      end
      COMP_LOOP_C_155 : begin
        fsm_output = 8'b11011101;
        state_var_NS = COMP_LOOP_C_156;
      end
      COMP_LOOP_C_156 : begin
        fsm_output = 8'b11011110;
        state_var_NS = COMP_LOOP_C_157;
      end
      COMP_LOOP_C_157 : begin
        fsm_output = 8'b11011111;
        state_var_NS = COMP_LOOP_C_158;
      end
      COMP_LOOP_C_158 : begin
        fsm_output = 8'b11100000;
        state_var_NS = COMP_LOOP_C_159;
      end
      COMP_LOOP_C_159 : begin
        fsm_output = 8'b11100001;
        state_var_NS = COMP_LOOP_C_160;
      end
      COMP_LOOP_C_160 : begin
        fsm_output = 8'b11100010;
        state_var_NS = COMP_LOOP_C_161;
      end
      COMP_LOOP_C_161 : begin
        fsm_output = 8'b11100011;
        state_var_NS = COMP_LOOP_C_162;
      end
      COMP_LOOP_C_162 : begin
        fsm_output = 8'b11100100;
        state_var_NS = COMP_LOOP_C_163;
      end
      COMP_LOOP_C_163 : begin
        fsm_output = 8'b11100101;
        state_var_NS = COMP_LOOP_C_164;
      end
      COMP_LOOP_C_164 : begin
        fsm_output = 8'b11100110;
        state_var_NS = COMP_LOOP_C_165;
      end
      COMP_LOOP_C_165 : begin
        fsm_output = 8'b11100111;
        state_var_NS = COMP_LOOP_C_166;
      end
      COMP_LOOP_C_166 : begin
        fsm_output = 8'b11101000;
        state_var_NS = COMP_LOOP_C_167;
      end
      COMP_LOOP_C_167 : begin
        fsm_output = 8'b11101001;
        state_var_NS = COMP_LOOP_C_168;
      end
      COMP_LOOP_C_168 : begin
        fsm_output = 8'b11101010;
        state_var_NS = COMP_LOOP_C_169;
      end
      COMP_LOOP_C_169 : begin
        fsm_output = 8'b11101011;
        state_var_NS = COMP_LOOP_C_170;
      end
      COMP_LOOP_C_170 : begin
        fsm_output = 8'b11101100;
        state_var_NS = COMP_LOOP_C_171;
      end
      COMP_LOOP_C_171 : begin
        fsm_output = 8'b11101101;
        state_var_NS = COMP_LOOP_C_172;
      end
      COMP_LOOP_C_172 : begin
        fsm_output = 8'b11101110;
        state_var_NS = COMP_LOOP_C_173;
      end
      COMP_LOOP_C_173 : begin
        fsm_output = 8'b11101111;
        state_var_NS = COMP_LOOP_C_174;
      end
      COMP_LOOP_C_174 : begin
        fsm_output = 8'b11110000;
        state_var_NS = COMP_LOOP_C_175;
      end
      COMP_LOOP_C_175 : begin
        fsm_output = 8'b11110001;
        state_var_NS = COMP_LOOP_C_176;
      end
      COMP_LOOP_C_176 : begin
        fsm_output = 8'b11110010;
        state_var_NS = COMP_LOOP_C_177;
      end
      COMP_LOOP_C_177 : begin
        fsm_output = 8'b11110011;
        state_var_NS = COMP_LOOP_C_178;
      end
      COMP_LOOP_C_178 : begin
        fsm_output = 8'b11110100;
        state_var_NS = COMP_LOOP_C_179;
      end
      COMP_LOOP_C_179 : begin
        fsm_output = 8'b11110101;
        state_var_NS = COMP_LOOP_C_180;
      end
      COMP_LOOP_C_180 : begin
        fsm_output = 8'b11110110;
        if ( COMP_LOOP_C_180_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 8'b11110111;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_4;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 8'b11111000;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b11111001;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsc_0_0_i_qa_d, vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_qa_d,
      vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_qa_d, vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_0_i_adra_d_pff,
      vec_rsc_0_0_i_da_d_pff, vec_rsc_0_0_i_wea_d_pff, vec_rsc_0_1_i_wea_d_pff, vec_rsc_0_2_i_wea_d_pff,
      vec_rsc_0_3_i_wea_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_qa_d;
  output vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_qa_d;
  output vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_qa_d;
  output vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_qa_d;
  output vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  output [7:0] vec_rsc_0_0_i_adra_d_pff;
  output [63:0] vec_rsc_0_0_i_da_d_pff;
  output vec_rsc_0_0_i_wea_d_pff;
  output vec_rsc_0_1_i_wea_d_pff;
  output vec_rsc_0_2_i_wea_d_pff;
  output vec_rsc_0_3_i_wea_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [7:0] fsm_output;
  wire [9:0] COMP_LOOP_1_operator_64_false_acc_tmp;
  wire [11:0] nl_COMP_LOOP_1_operator_64_false_acc_tmp;
  wire or_tmp_3;
  wire and_dcpl_1;
  wire and_dcpl_4;
  wire mux_tmp_22;
  wire mux_tmp_23;
  wire nor_tmp_6;
  wire mux_tmp_35;
  wire nor_tmp_25;
  wire nor_tmp_29;
  wire mux_tmp_84;
  wire and_dcpl_21;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_26;
  wire and_dcpl_27;
  wire and_dcpl_28;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_36;
  wire and_dcpl_38;
  wire and_dcpl_43;
  wire and_dcpl_51;
  wire and_dcpl_55;
  wire nor_tmp_37;
  wire mux_tmp_148;
  wire and_dcpl_65;
  wire and_dcpl_66;
  wire and_dcpl_67;
  wire and_dcpl_70;
  wire and_dcpl_79;
  wire and_dcpl_80;
  wire and_dcpl_81;
  wire or_tmp_210;
  wire nor_tmp_44;
  wire or_tmp_212;
  wire or_tmp_216;
  wire not_tmp_136;
  wire and_dcpl_85;
  wire and_dcpl_86;
  wire and_dcpl_87;
  wire not_tmp_142;
  wire or_tmp_263;
  wire not_tmp_162;
  wire and_dcpl_105;
  wire and_dcpl_106;
  wire and_dcpl_112;
  wire or_tmp_313;
  wire or_tmp_323;
  wire or_tmp_366;
  wire or_tmp_376;
  wire mux_tmp_312;
  reg COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  reg operator_64_false_slc_operator_64_false_acc_61_itm;
  reg [6:0] COMP_LOOP_k_9_2_sva_6_0;
  reg [9:0] operator_64_false_acc_cse_sva;
  wire [11:0] nl_operator_64_false_acc_cse_sva;
  reg [8:0] COMP_LOOP_acc_7_psp_sva;
  reg [9:0] operator_64_false_acc_cse_2_sva;
  wire [11:0] nl_operator_64_false_acc_cse_2_sva;
  reg [9:0] operator_64_false_acc_cse_3_sva;
  wire [11:0] nl_operator_64_false_acc_cse_3_sva;
  reg [9:0] COMP_LOOP_acc_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_cse_sva;
  reg [9:0] COMP_LOOP_acc_cse_2_sva;
  reg [9:0] operator_64_false_acc_cse_1_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  wire and_108_m1c;
  reg reg_vec_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_6_cse;
  wire or_413_cse;
  wire or_282_cse;
  wire and_146_cse;
  wire or_39_cse;
  wire or_217_cse;
  wire and_151_cse;
  wire and_153_cse;
  wire or_22_cse;
  wire or_304_cse;
  wire nand_50_cse;
  wire and_205_cse;
  wire or_18_cse;
  reg [63:0] tmp_1_lpi_4_dfm;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] COMP_LOOP_1_modExp_dev_1_while_mul_mut;
  reg [63:0] p_sva;
  wire mux_184_itm;
  wire and_dcpl_145;
  wire [63:0] z_out;
  wire [127:0] nl_z_out;
  wire and_dcpl_158;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  wire and_dcpl_159;
  wire and_dcpl_162;
  wire and_dcpl_163;
  wire and_dcpl_165;
  wire and_dcpl_166;
  wire and_dcpl_167;
  wire and_dcpl_168;
  wire and_dcpl_169;
  wire and_dcpl_171;
  wire and_dcpl_172;
  wire and_dcpl_174;
  wire and_dcpl_175;
  wire and_dcpl_177;
  wire and_dcpl_182;
  wire and_dcpl_183;
  wire and_dcpl_184;
  wire and_dcpl_186;
  wire and_dcpl_191;
  wire [64:0] z_out_2;
  wire and_dcpl_194;
  wire and_dcpl_196;
  wire and_dcpl_198;
  wire and_dcpl_200;
  wire and_dcpl_201;
  wire and_dcpl_205;
  wire not_tmp_255;
  wire and_dcpl_209;
  wire and_dcpl_213;
  wire and_dcpl_219;
  wire [63:0] z_out_3;
  wire and_dcpl_225;
  wire and_dcpl_226;
  wire and_dcpl_230;
  wire and_dcpl_232;
  wire and_dcpl_237;
  wire and_dcpl_239;
  wire [7:0] z_out_5;
  wire [8:0] nl_z_out_5;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [1:0] modExp_dev_exp_1_sva_1_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2;
  wire COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3;
  wire operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1;
  wire tmp_1_lpi_4_dfm_mx0c0;
  wire tmp_1_lpi_4_dfm_mx0c1;
  wire tmp_1_lpi_4_dfm_mx0c2;
  wire tmp_1_lpi_4_dfm_mx0c3;
  wire and_102_rgt;
  wire and_324_ssc;
  wire mux_344_cse;
  wire mux_tmp_337;
  wire or_tmp_423;
  wire [7:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  wire or_tmp_430;
  wire mux_tmp_356;
  wire or_tmp_432;
  reg COMP_LOOP_acc_psp_sva_7;
  reg [6:0] COMP_LOOP_acc_psp_sva_6_0;
  wire nand_75_cse;
  wire or_461_cse;
  wire nand_76_cse;
  wire operator_64_false_or_5_itm;
  wire COMP_LOOP_or_9_itm;
  wire [10:0] COMP_LOOP_acc_9_sdt;
  wire [11:0] nl_COMP_LOOP_acc_9_sdt;

  wire[0:0] mux_183_nl;
  wire[0:0] mux_182_nl;
  wire[0:0] mux_181_nl;
  wire[0:0] nand_55_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] or_196_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] nor_134_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] or_228_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] nand_11_nl;
  wire[0:0] mux_200_nl;
  wire[0:0] or_225_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] or_222_nl;
  wire[0:0] or_221_nl;
  wire[0:0] nor_189_nl;
  wire[0:0] operator_64_false_or_2_nl;
  wire[0:0] mux_236_nl;
  wire[0:0] nor_111_nl;
  wire[0:0] and_103_nl;
  wire[0:0] COMP_LOOP_or_3_nl;
  wire[0:0] mux_251_nl;
  wire[0:0] mux_250_nl;
  wire[0:0] nor_103_nl;
  wire[0:0] nor_104_nl;
  wire[0:0] nor_105_nl;
  wire[0:0] COMP_LOOP_or_4_nl;
  wire[0:0] mux_253_nl;
  wire[0:0] mux_252_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] nor_101_nl;
  wire[0:0] nor_102_nl;
  wire[0:0] COMP_LOOP_or_5_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] mux_254_nl;
  wire[0:0] nor_97_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] COMP_LOOP_or_6_nl;
  wire[0:0] mux_257_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] nor_94_nl;
  wire[0:0] nor_95_nl;
  wire[0:0] nor_96_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] mux_244_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] nor_106_nl;
  wire[0:0] mux_242_nl;
  wire[0:0] nor_107_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] mux_240_nl;
  wire[0:0] nor_242_nl;
  wire[0:0] mux_239_nl;
  wire[0:0] or_nl;
  wire[0:0] nand_68_nl;
  wire[0:0] or_454_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] modExp_dev_while_or_1_nl;
  wire[0:0] nand_66_nl;
  wire[0:0] mux_351_nl;
  wire[0:0] nor_255_nl;
  wire[0:0] nor_256_nl;
  wire[6:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] mux_276_nl;
  wire[0:0] mux_275_nl;
  wire[0:0] nand_17_nl;
  wire[0:0] mux_274_nl;
  wire[0:0] mux_273_nl;
  wire[0:0] mux_272_nl;
  wire[0:0] or_251_nl;
  wire[0:0] or_329_nl;
  wire[0:0] mux_271_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] or_328_nl;
  wire[0:0] or_327_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] mux_364_nl;
  wire[0:0] mux_363_nl;
  wire[0:0] mux_362_nl;
  wire[0:0] mux_361_nl;
  wire[0:0] mux_360_nl;
  wire[0:0] mux_359_nl;
  wire[0:0] or_463_nl;
  wire[0:0] or_462_nl;
  wire[0:0] or_460_nl;
  wire[0:0] mux_358_nl;
  wire[0:0] mux_357_nl;
  wire[0:0] mux_356_nl;
  wire[0:0] and_334_nl;
  wire[0:0] or_459_nl;
  wire[0:0] mux_355_nl;
  wire[0:0] mux_354_nl;
  wire[0:0] mux_353_nl;
  wire[0:0] or_458_nl;
  wire[0:0] nor_253_nl;
  wire[0:0] mux_369_nl;
  wire[0:0] mux_368_nl;
  wire[0:0] nand_73_nl;
  wire[0:0] or_472_nl;
  wire[0:0] or_471_nl;
  wire[0:0] nor_254_nl;
  wire[0:0] mux_367_nl;
  wire[0:0] mux_366_nl;
  wire[0:0] or_469_nl;
  wire[0:0] mux_365_nl;
  wire[0:0] or_466_nl;
  wire[0:0] mux_294_nl;
  wire[0:0] mux_291_nl;
  wire[0:0] mux_295_nl;
  wire[0:0] nor_200_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] nor_88_nl;
  wire[0:0] mux_297_nl;
  wire[0:0] nand_28_nl;
  wire[0:0] mux_299_nl;
  wire[0:0] nand_27_nl;
  wire[0:0] mux_298_nl;
  wire[1:0] COMP_LOOP_and_4_nl;
  wire[1:0] COMP_LOOP_mux1h_22_nl;
  wire[0:0] mux_326_nl;
  wire[0:0] mux_325_nl;
  wire[0:0] mux_324_nl;
  wire[0:0] or_397_nl;
  wire[0:0] mux_323_nl;
  wire[0:0] or_395_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] nand_19_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] mux_318_nl;
  wire[0:0] or_341_nl;
  wire[0:0] mux_317_nl;
  wire[0:0] mux_316_nl;
  wire[0:0] or_338_nl;
  wire[0:0] or_387_nl;
  wire[0:0] mux_336_nl;
  wire[0:0] mux_335_nl;
  wire[0:0] mux_334_nl;
  wire[0:0] nand_21_nl;
  wire[0:0] mux_333_nl;
  wire[0:0] mux_332_nl;
  wire[0:0] or_401_nl;
  wire[0:0] mux_331_nl;
  wire[0:0] mux_330_nl;
  wire[0:0] mux_329_nl;
  wire[0:0] mux_328_nl;
  wire[0:0] or_399_nl;
  wire[0:0] and_131_nl;
  wire[0:0] nand_65_nl;
  wire[0:0] and_133_nl;
  wire[0:0] not_953_nl;
  wire[0:0] mux_380_nl;
  wire[0:0] mux_379_nl;
  wire[0:0] nand_70_nl;
  wire[0:0] nand_69_nl;
  wire[0:0] mux_378_nl;
  wire[0:0] mux_377_nl;
  wire[0:0] mux_376_nl;
  wire[0:0] or_478_nl;
  wire[0:0] mux_375_nl;
  wire[0:0] mux_374_nl;
  wire[0:0] or_477_nl;
  wire[0:0] or_475_nl;
  wire[0:0] mux_373_nl;
  wire[0:0] mux_372_nl;
  wire[0:0] and_332_nl;
  wire[0:0] or_24_nl;
  wire[0:0] nor_187_nl;
  wire[0:0] and_23_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] and_163_nl;
  wire[0:0] and_160_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] or_233_nl;
  wire[0:0] nor_122_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] or_231_nl;
  wire[0:0] nor_202_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] or_12_nl;
  wire[0:0] nor_120_nl;
  wire[0:0] mux_212_nl;
  wire[0:0] nand_51_nl;
  wire[0:0] or_236_nl;
  wire[0:0] and_156_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] nor_116_nl;
  wire[0:0] nor_117_nl;
  wire[0:0] and_157_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] and_158_nl;
  wire[0:0] nor_118_nl;
  wire[0:0] mux_220_nl;
  wire[0:0] mux_219_nl;
  wire[0:0] nor_112_nl;
  wire[0:0] nor_113_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] nor_114_nl;
  wire[0:0] nor_115_nl;
  wire[0:0] nor_86_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] mux_302_nl;
  wire[0:0] or_358_nl;
  wire[0:0] mux_301_nl;
  wire[0:0] or_356_nl;
  wire[0:0] or_355_nl;
  wire[0:0] nor_84_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] mux_305_nl;
  wire[0:0] or_365_nl;
  wire[0:0] mux_304_nl;
  wire[0:0] or_363_nl;
  wire[0:0] nand_52_nl;
  wire[0:0] nor_82_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] or_372_nl;
  wire[0:0] mux_307_nl;
  wire[0:0] or_370_nl;
  wire[0:0] or_369_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] mux_311_nl;
  wire[0:0] or_407_nl;
  wire[0:0] mux_310_nl;
  wire[0:0] or_408_nl;
  wire[0:0] nand_23_nl;
  wire[0:0] and_34_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] nor_184_nl;
  wire[0:0] nor_185_nl;
  wire[0:0] and_40_nl;
  wire[0:0] and_44_nl;
  wire[0:0] and_45_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] nor_182_nl;
  wire[0:0] nor_183_nl;
  wire[0:0] and_49_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] nor_180_nl;
  wire[0:0] nor_181_nl;
  wire[0:0] and_52_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] nor_178_nl;
  wire[0:0] nor_179_nl;
  wire[0:0] and_56_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] and_185_nl;
  wire[0:0] nor_177_nl;
  wire[0:0] and_60_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] nor_175_nl;
  wire[0:0] nor_176_nl;
  wire[0:0] and_184_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] nor_172_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] or_97_nl;
  wire[0:0] or_96_nl;
  wire[0:0] nor_173_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] or_93_nl;
  wire[0:0] or_91_nl;
  wire[0:0] nor_174_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] or_88_nl;
  wire[0:0] or_87_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] or_86_nl;
  wire[0:0] or_84_nl;
  wire[0:0] or_82_nl;
  wire[0:0] and_183_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] nor_164_nl;
  wire[0:0] nor_165_nl;
  wire[0:0] nor_166_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] nor_167_nl;
  wire[0:0] nor_168_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] nor_169_nl;
  wire[0:0] nor_170_nl;
  wire[0:0] nor_171_nl;
  wire[0:0] and_182_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] nor_161_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] or_125_nl;
  wire[0:0] or_124_nl;
  wire[0:0] nor_162_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] or_121_nl;
  wire[0:0] or_119_nl;
  wire[0:0] nor_163_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] or_116_nl;
  wire[0:0] or_115_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] or_114_nl;
  wire[0:0] or_112_nl;
  wire[0:0] or_110_nl;
  wire[0:0] and_180_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] nor_154_nl;
  wire[0:0] nor_155_nl;
  wire[0:0] nor_156_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] nor_157_nl;
  wire[0:0] nor_158_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] nor_159_nl;
  wire[0:0] and_181_nl;
  wire[0:0] nor_160_nl;
  wire[0:0] and_179_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] nor_151_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] or_153_nl;
  wire[0:0] or_152_nl;
  wire[0:0] nor_152_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] or_149_nl;
  wire[0:0] or_147_nl;
  wire[0:0] nor_153_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] or_144_nl;
  wire[0:0] or_143_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] or_142_nl;
  wire[0:0] or_140_nl;
  wire[0:0] or_138_nl;
  wire[0:0] and_177_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] nor_144_nl;
  wire[0:0] nor_145_nl;
  wire[0:0] nor_146_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] nor_147_nl;
  wire[0:0] nor_148_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] nor_149_nl;
  wire[0:0] and_178_nl;
  wire[0:0] nor_150_nl;
  wire[0:0] and_176_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] nor_141_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] nand_41_nl;
  wire[0:0] nand_42_nl;
  wire[0:0] nor_142_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] or_175_nl;
  wire[0:0] nand_58_nl;
  wire[0:0] nor_143_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] or_171_nl;
  wire[0:0] or_170_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] nand_59_nl;
  wire[0:0] nand_57_nl;
  wire[0:0] or_165_nl;
  wire[0:0] and_173_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] nor_135_nl;
  wire[0:0] nor_136_nl;
  wire[0:0] nor_137_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] nor_138_nl;
  wire[0:0] nor_139_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] nor_140_nl;
  wire[0:0] and_174_nl;
  wire[0:0] and_175_nl;
  wire[0:0] nor_222_nl;
  wire[0:0] nor_223_nl;
  wire[0:0] mux_343_nl;
  wire[0:0] nand_60_nl;
  wire[0:0] mux_342_nl;
  wire[0:0] nor_224_nl;
  wire[0:0] nor_225_nl;
  wire[0:0] or_435_nl;
  wire[0:0] and_nl;
  wire[0:0] nor_217_nl;
  wire[0:0] mux_349_nl;
  wire[0:0] or_450_nl;
  wire[0:0] or_449_nl;
  wire[0:0] mux_348_nl;
  wire[0:0] nand_64_nl;
  wire[63:0] COMP_LOOP_mux_18_nl;
  wire[63:0] COMP_LOOP_mux1h_51_nl;
  wire[0:0] and_335_nl;
  wire[0:0] mux_382_nl;
  wire[0:0] mux_383_nl;
  wire[0:0] nor_257_nl;
  wire[0:0] nor_258_nl;
  wire[0:0] mux_384_nl;
  wire[0:0] nor_259_nl;
  wire[0:0] nor_260_nl;
  wire[9:0] COMP_LOOP_mux_19_nl;
  wire[9:0] COMP_LOOP_mux_20_nl;
  wire[65:0] acc_1_nl;
  wire[66:0] nl_acc_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_3_nl;
  wire[54:0] operator_64_false_operator_64_false_nand_1_nl;
  wire[54:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_nor_8_nl;
  wire[8:0] operator_64_false_mux1h_4_nl;
  wire[0:0] operator_64_false_or_9_nl;
  wire[0:0] operator_64_false_or_10_nl;
  wire[0:0] operator_64_false_operator_64_false_and_1_nl;
  wire[6:0] operator_64_false_and_3_nl;
  wire[6:0] operator_64_false_mux1h_5_nl;
  wire[0:0] operator_64_false_or_11_nl;
  wire[0:0] operator_64_false_nor_11_nl;
  wire[0:0] operator_64_false_operator_64_false_or_4_nl;
  wire[0:0] operator_64_false_operator_64_false_or_5_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl_1;
  wire[0:0] operator_64_false_or_9_nl_1;
  wire[0:0] operator_64_false_and_16_nl;
  wire[0:0] operator_64_false_and_17_nl;
  wire[0:0] operator_64_false_and_18_nl;
  wire[0:0] operator_64_false_and_19_nl;
  wire[0:0] operator_64_false_or_10_nl_1;
  wire[63:0] operator_64_false_or_11_nl_1;
  wire[63:0] operator_64_false_mux1h_4_nl_1;
  wire[0:0] operator_64_false_or_12_nl;
  wire[0:0] operator_64_false_or_13_nl;
  wire[0:0] operator_64_false_or_14_nl;
  wire[0:0] operator_64_false_or_15_nl;
  wire[0:0] operator_64_false_or_16_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_or_2_nl;
  wire[8:0] COMP_LOOP_COMP_LOOP_or_3_nl;
  wire[8:0] COMP_LOOP_mux_21_nl;
  wire[3:0] COMP_LOOP_COMP_LOOP_and_2_nl;
  wire[0:0] COMP_LOOP_nor_2_nl;
  wire[3:0] COMP_LOOP_mux1h_52_nl;
  wire[6:0] operator_64_false_1_mux_1_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_72_nl;
  wire[0:0] mux_190_nl;
  wire[0:0] mux_189_nl;
  wire[0:0] and_208_nl;
  wire[0:0] nor_128_nl;
  wire[0:0] mux_188_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] nor_130_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign and_208_nl = (fsm_output[4:0]==5'b11101);
  assign nor_128_nl = ~((fsm_output[4:0]!=5'b10110));
  assign mux_189_nl = MUX_s_1_2_2(and_208_nl, nor_128_nl, fsm_output[6]);
  assign nor_129_nl = ~((fsm_output[4]) | (~ and_151_cse));
  assign nor_130_nl = ~((fsm_output[4:0]!=5'b01000));
  assign mux_188_nl = MUX_s_1_2_2(nor_129_nl, nor_130_nl, fsm_output[6]);
  assign mux_190_nl = MUX_s_1_2_2(mux_189_nl, mux_188_nl, fsm_output[7]);
  assign and_72_nl = mux_190_nl & (fsm_output[5]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      and_72_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_197_nl;
  wire[0:0] and_165_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] and_166_nl;
  wire[0:0] nor_123_nl;
  wire[0:0] nor_124_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] or_218_nl;
  wire[0:0] mux_194_nl;
  wire[0:0] nand_54_nl;
  wire[0:0] mux_193_nl;
  wire[0:0] nor_125_nl;
  wire[0:0] and_167_nl;
  wire[0:0] mux_192_nl;
  wire[0:0] and_168_nl;
  wire[0:0] mux_191_nl;
  wire[0:0] nor_126_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign and_166_nl = (fsm_output[1]) & (fsm_output[7]) & (fsm_output[4]);
  assign nor_123_nl = ~((fsm_output[1]) | (fsm_output[4]));
  assign mux_196_nl = MUX_s_1_2_2(and_166_nl, nor_123_nl, fsm_output[5]);
  assign and_165_nl = (fsm_output[3]) & (fsm_output[6]) & mux_196_nl;
  assign mux_194_nl = MUX_s_1_2_2(or_39_cse, or_217_cse, fsm_output[1]);
  assign or_218_nl = (fsm_output[5]) | mux_194_nl;
  assign nand_54_nl = ~((fsm_output[5]) & (fsm_output[1]) & (~ (fsm_output[7])) &
      (fsm_output[4]));
  assign mux_195_nl = MUX_s_1_2_2(or_218_nl, nand_54_nl, fsm_output[6]);
  assign nor_124_nl = ~((fsm_output[3]) | mux_195_nl);
  assign mux_197_nl = MUX_s_1_2_2(and_165_nl, nor_124_nl, fsm_output[2]);
  assign nor_125_nl = ~((fsm_output[3]) | (fsm_output[6]) | (~ (fsm_output[5])) |
      (fsm_output[1]) | (~ (fsm_output[7])) | (fsm_output[4]));
  assign mux_191_nl = MUX_s_1_2_2((~ or_39_cse), or_39_cse, fsm_output[1]);
  assign and_168_nl = (fsm_output[5]) & mux_191_nl;
  assign nor_126_nl = ~((fsm_output[5]) | (fsm_output[1]) | (fsm_output[7]) | (fsm_output[4]));
  assign mux_192_nl = MUX_s_1_2_2(and_168_nl, nor_126_nl, fsm_output[6]);
  assign and_167_nl = (fsm_output[3]) & mux_192_nl;
  assign mux_193_nl = MUX_s_1_2_2(nor_125_nl, and_167_nl, fsm_output[2]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = MUX_s_1_2_2(mux_197_nl,
      mux_193_nl, fsm_output[0]);
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = COMP_LOOP_acc_9_sdt[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro = ~ mux_184_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0 = ~ (z_out_2[64]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (COMP_LOOP_acc_9_sdt[10]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_slc_operator_64_false_acc_61_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0 = ~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_90_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_90_tr0 = ~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_135_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_135_tr0 = ~ operator_64_false_slc_operator_64_false_acc_61_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out_1[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = COMP_LOOP_acc_9_sdt[4];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  COMP_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse),
      .z(modExp_dev_while_rem_cmp_z)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_3_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_45_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_90_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_90_tr0[0:0]),
      .COMP_LOOP_3_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_135_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_135_tr0[0:0]),
      .COMP_LOOP_4_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_180_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0])
    );
  assign nand_55_nl = ~((~((fsm_output[1:0]==2'b11))) & (fsm_output[7]));
  assign mux_181_nl = MUX_s_1_2_2(nand_55_nl, nor_tmp_37, fsm_output[6]);
  assign mux_179_nl = MUX_s_1_2_2(nor_tmp_37, (~ (fsm_output[7])), fsm_output[1]);
  assign mux_180_nl = MUX_s_1_2_2(mux_tmp_35, mux_179_nl, fsm_output[6]);
  assign mux_182_nl = MUX_s_1_2_2(mux_181_nl, mux_180_nl, fsm_output[3]);
  assign or_196_nl = (fsm_output[6]) | (fsm_output[0]) | (fsm_output[1]);
  assign mux_177_nl = MUX_s_1_2_2(or_217_cse, or_tmp_3, or_196_nl);
  assign mux_176_nl = MUX_s_1_2_2((~ or_tmp_3), nor_tmp_37, fsm_output[6]);
  assign mux_178_nl = MUX_s_1_2_2((~ mux_177_nl), mux_176_nl, fsm_output[3]);
  assign mux_183_nl = MUX_s_1_2_2(mux_182_nl, mux_178_nl, fsm_output[5]);
  assign mux_172_nl = MUX_s_1_2_2(or_39_cse, mux_tmp_35, fsm_output[1]);
  assign mux_173_nl = MUX_s_1_2_2(mux_172_nl, nor_tmp_37, fsm_output[6]);
  assign mux_170_nl = MUX_s_1_2_2(nor_tmp_37, mux_tmp_35, or_6_cse);
  assign mux_171_nl = MUX_s_1_2_2(mux_tmp_35, (~ mux_170_nl), fsm_output[6]);
  assign mux_174_nl = MUX_s_1_2_2(mux_173_nl, mux_171_nl, fsm_output[3]);
  assign mux_166_nl = MUX_s_1_2_2((~ or_tmp_3), mux_tmp_35, fsm_output[1]);
  assign mux_167_nl = MUX_s_1_2_2(mux_166_nl, mux_tmp_148, fsm_output[0]);
  assign mux_168_nl = MUX_s_1_2_2((~ or_tmp_3), mux_167_nl, fsm_output[6]);
  assign nor_134_nl = ~((fsm_output[1]) | (~ mux_tmp_35));
  assign mux_164_nl = MUX_s_1_2_2(mux_tmp_148, nor_134_nl, fsm_output[0]);
  assign mux_165_nl = MUX_s_1_2_2(mux_164_nl, nor_tmp_37, fsm_output[6]);
  assign mux_169_nl = MUX_s_1_2_2(mux_168_nl, mux_165_nl, fsm_output[3]);
  assign mux_175_nl = MUX_s_1_2_2(mux_174_nl, mux_169_nl, fsm_output[5]);
  assign mux_184_itm = MUX_s_1_2_2(mux_183_nl, mux_175_nl, fsm_output[2]);
  assign or_217_cse = (~ (fsm_output[7])) | (fsm_output[4]);
  assign and_102_rgt = and_dcpl_66 & and_dcpl_24 & and_dcpl_23;
  assign or_6_cse = (fsm_output[1:0]!=2'b00);
  assign or_413_cse = (fsm_output[2:1]!=2'b00);
  assign or_282_cse = (fsm_output[3:2]!=2'b00);
  assign and_151_cse = (fsm_output[3:0]==4'b1111);
  assign and_153_cse = (fsm_output[2:1]==2'b11);
  assign or_304_cse = (fsm_output[5:4]!=2'b01);
  assign nand_76_cse = ~((fsm_output[7:6]==2'b11));
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_7_2_2(COMP_LOOP_k_9_2_sva_6_0, (z_out_3[8:2]),
      not_tmp_136);
  assign mux_273_nl = MUX_s_1_2_2(and_dcpl_66, and_dcpl_4, fsm_output[2]);
  assign mux_274_nl = MUX_s_1_2_2(or_22_cse, (~ mux_273_nl), fsm_output[0]);
  assign nand_17_nl = ~((~((fsm_output[5:4]!=2'b10))) & mux_274_nl);
  assign or_251_nl = (~ (fsm_output[5])) | (fsm_output[3]);
  assign mux_271_nl = MUX_s_1_2_2(nor_tmp_44, and_205_cse, fsm_output[0]);
  assign or_329_nl = (fsm_output[5]) | (~ mux_271_nl);
  assign mux_272_nl = MUX_s_1_2_2(or_251_nl, or_329_nl, fsm_output[4]);
  assign mux_275_nl = MUX_s_1_2_2(nand_17_nl, mux_272_nl, fsm_output[6]);
  assign or_328_nl = (~ (fsm_output[5])) | (fsm_output[0]) | (fsm_output[2]) | (fsm_output[1])
      | (fsm_output[3]);
  assign or_327_nl = (fsm_output[5]) | (~ or_282_cse);
  assign mux_269_nl = MUX_s_1_2_2(or_328_nl, or_327_nl, fsm_output[4]);
  assign mux_268_nl = MUX_s_1_2_2(or_tmp_212, or_18_cse, fsm_output[4]);
  assign mux_270_nl = MUX_s_1_2_2(mux_269_nl, mux_268_nl, fsm_output[6]);
  assign mux_276_nl = MUX_s_1_2_2(mux_275_nl, mux_270_nl, fsm_output[7]);
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_8_2_2(({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      (z_out_1[7:0]), mux_276_nl);
  assign nand_75_cse = ~((fsm_output[6]) & (fsm_output[2]) & or_6_cse & (fsm_output[3])
      & (fsm_output[7]));
  assign or_461_cse = (fsm_output[3]) | (fsm_output[7]);
  assign and_205_cse = or_413_cse & (fsm_output[3]);
  assign or_18_cse = (fsm_output[5]) | and_205_cse;
  assign or_39_cse = (~ (fsm_output[4])) | (fsm_output[7]);
  assign and_146_cse = (fsm_output[2:0]==3'b111);
  assign nl_COMP_LOOP_1_operator_64_false_acc_tmp = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b00}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign COMP_LOOP_1_operator_64_false_acc_tmp = nl_COMP_LOOP_1_operator_64_false_acc_tmp[9:0];
  assign or_tmp_3 = (fsm_output[4]) | (fsm_output[7]);
  assign nand_50_cse = ~((fsm_output[0]) & (fsm_output[3]) & (fsm_output[6]));
  assign and_dcpl_1 = (fsm_output[5:4]==2'b01);
  assign and_dcpl_4 = (fsm_output[3]) & (fsm_output[1]);
  assign or_22_cse = (fsm_output[3:1]!=3'b000);
  assign mux_tmp_22 = MUX_s_1_2_2(or_282_cse, or_22_cse, fsm_output[0]);
  assign or_24_nl = (fsm_output[5]) | mux_tmp_22;
  assign mux_tmp_23 = MUX_s_1_2_2((fsm_output[5]), or_24_nl, fsm_output[4]);
  assign nor_tmp_6 = (fsm_output[7:6]==2'b11);
  assign mux_tmp_35 = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[4]);
  assign nor_tmp_25 = (fsm_output[6:3]==4'b1111);
  assign nor_tmp_29 = ((fsm_output[2:0]!=3'b000)) & (fsm_output[3]);
  assign nor_187_nl = ~((fsm_output[6:0]!=7'b0000000));
  assign and_23_nl = (fsm_output[6:4]==3'b111) & nor_tmp_29;
  assign mux_tmp_84 = MUX_s_1_2_2(nor_187_nl, and_23_nl, fsm_output[7]);
  assign and_dcpl_21 = ~((fsm_output[7:6]!=2'b00));
  assign and_dcpl_23 = and_dcpl_1 & and_dcpl_21;
  assign and_dcpl_24 = ~((fsm_output[2]) | (fsm_output[0]));
  assign and_dcpl_25 = (~ (fsm_output[3])) & (fsm_output[1]);
  assign and_dcpl_26 = and_dcpl_25 & and_dcpl_24;
  assign and_dcpl_27 = and_dcpl_26 & and_dcpl_23;
  assign and_dcpl_28 = (~ (fsm_output[2])) & (fsm_output[0]);
  assign and_dcpl_32 = (fsm_output[7:6]==2'b01);
  assign and_dcpl_33 = ~((fsm_output[5:4]!=2'b00));
  assign and_dcpl_36 = and_dcpl_4 & and_dcpl_24;
  assign and_dcpl_38 = ~((fsm_output[2]) | (fsm_output[5]));
  assign and_dcpl_43 = (fsm_output[7:6]==2'b10);
  assign and_dcpl_51 = (fsm_output[3]) & (~ (fsm_output[1]));
  assign and_dcpl_55 = (fsm_output[2]) & (fsm_output[5]);
  assign nor_tmp_37 = (fsm_output[4]) & (fsm_output[7]);
  assign mux_tmp_148 = MUX_s_1_2_2(or_217_cse, or_39_cse, fsm_output[1]);
  assign and_dcpl_65 = (fsm_output[2]) & (~ (fsm_output[0]));
  assign and_dcpl_66 = ~((fsm_output[3]) | (fsm_output[1]));
  assign and_dcpl_67 = and_dcpl_66 & and_dcpl_65;
  assign and_dcpl_70 = (fsm_output[2]) & (fsm_output[0]);
  assign and_dcpl_79 = and_dcpl_33 & and_dcpl_21;
  assign and_dcpl_80 = and_dcpl_66 & and_dcpl_70;
  assign and_dcpl_81 = and_dcpl_80 & and_dcpl_79;
  assign or_tmp_210 = and_153_cse | (fsm_output[3]);
  assign nor_tmp_44 = (fsm_output[3:2]==2'b11);
  assign and_163_nl = (fsm_output[3:1]==3'b111);
  assign mux_201_nl = MUX_s_1_2_2(and_163_nl, nor_tmp_44, fsm_output[0]);
  assign or_tmp_212 = (fsm_output[5]) | (~ mux_201_nl);
  assign or_tmp_216 = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[0]) | (~((fsm_output[3])
      & (fsm_output[6])));
  assign or_233_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (~ (fsm_output[0]))
      | (fsm_output[3]) | (fsm_output[6]);
  assign mux_208_nl = MUX_s_1_2_2(or_tmp_216, or_233_nl, fsm_output[7]);
  assign and_160_nl = (fsm_output[4]) & (~ mux_208_nl);
  assign or_231_nl = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[0]))
      | (fsm_output[3]) | (fsm_output[6]);
  assign mux_207_nl = MUX_s_1_2_2(or_231_nl, or_tmp_216, fsm_output[7]);
  assign nor_122_nl = ~((fsm_output[4]) | mux_207_nl);
  assign not_tmp_136 = MUX_s_1_2_2(and_160_nl, nor_122_nl, fsm_output[1]);
  assign and_dcpl_85 = and_dcpl_25 & and_dcpl_38 & (~ (fsm_output[4])) & (~ (fsm_output[6]))
      & (~ (fsm_output[7]));
  assign and_dcpl_86 = and_dcpl_66 & and_dcpl_28;
  assign and_dcpl_87 = and_dcpl_86 & and_dcpl_79;
  assign or_12_nl = (fsm_output[0]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_33_nl = MUX_s_1_2_2(nand_50_cse, or_12_nl, fsm_output[4]);
  assign nor_202_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[7])) | (fsm_output[5])
      | mux_33_nl);
  assign nand_51_nl = ~((fsm_output[4]) & (fsm_output[0]) & (fsm_output[3]) & (fsm_output[6]));
  assign or_236_nl = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_212_nl = MUX_s_1_2_2(nand_51_nl, or_236_nl, fsm_output[5]);
  assign nor_120_nl = ~((fsm_output[2]) | (fsm_output[7]) | mux_212_nl);
  assign not_tmp_142 = MUX_s_1_2_2(nor_202_nl, nor_120_nl, fsm_output[1]);
  assign or_tmp_263 = (fsm_output[4:3]!=2'b00);
  assign not_tmp_162 = ~((fsm_output[5]) & (fsm_output[1]) & (fsm_output[3]));
  assign and_dcpl_105 = (fsm_output[5:4]==2'b10);
  assign and_dcpl_106 = and_dcpl_105 & and_dcpl_21;
  assign and_dcpl_112 = and_dcpl_36 & and_dcpl_1 & nor_tmp_6;
  assign or_tmp_313 = (fsm_output[5:4]!=2'b10);
  assign or_tmp_323 = (fsm_output[6]) | mux_tmp_23;
  assign or_tmp_366 = (~ (fsm_output[4])) | (~ (fsm_output[1])) | (fsm_output[5]);
  assign or_tmp_376 = (~ (fsm_output[2])) | (fsm_output[7]);
  assign mux_tmp_312 = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[2]);
  assign nor_116_nl = ~((~ (fsm_output[5])) | (fsm_output[3]) | (fsm_output[0]) |
      (fsm_output[6]));
  assign nor_117_nl = ~((fsm_output[5]) | nand_50_cse);
  assign mux_216_nl = MUX_s_1_2_2(nor_116_nl, nor_117_nl, fsm_output[4]);
  assign and_156_nl = (~((fsm_output[2]) | (~ (fsm_output[7])))) & mux_216_nl;
  assign and_158_nl = (fsm_output[0]) & (fsm_output[6]);
  assign nor_118_nl = ~((fsm_output[0]) | (fsm_output[6]));
  assign mux_215_nl = MUX_s_1_2_2(and_158_nl, nor_118_nl, fsm_output[3]);
  assign and_157_nl = (~((~ (fsm_output[2])) | (fsm_output[7]) | (fsm_output[4])
      | (~ (fsm_output[5])))) & mux_215_nl;
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4 = MUX_s_1_2_2(and_156_nl, and_157_nl,
      fsm_output[1]);
  assign nor_112_nl = ~((~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[1]) |
      (~ (fsm_output[3])));
  assign nor_113_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[0])) | (fsm_output[1])
      | (fsm_output[3]));
  assign mux_219_nl = MUX_s_1_2_2(nor_112_nl, nor_113_nl, fsm_output[6]);
  assign nor_114_nl = ~((fsm_output[4]) | (fsm_output[0]) | (~ and_dcpl_4));
  assign nor_115_nl = ~((fsm_output[4]) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (fsm_output[3]));
  assign mux_218_nl = MUX_s_1_2_2(nor_114_nl, nor_115_nl, fsm_output[6]);
  assign mux_220_nl = MUX_s_1_2_2(mux_219_nl, mux_218_nl, fsm_output[7]);
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 = mux_220_nl & and_dcpl_55;
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_25 & and_dcpl_70 & (fsm_output[5:4]==2'b11)
      & nor_tmp_6;
  assign COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2 = and_151_cse
      & and_dcpl_106;
  assign COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3 = and_dcpl_51
      & and_dcpl_24 & and_dcpl_105 & and_dcpl_32;
  assign operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1 = and_dcpl_86 &
      and_dcpl_105 & and_dcpl_43;
  assign nor_86_nl = ~((~ (fsm_output[6])) | (fsm_output[4]) | (~ (fsm_output[3]))
      | (~ (fsm_output[2])) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b00)
      | (fsm_output[5]) | (fsm_output[7]));
  assign or_358_nl = (fsm_output[3]) | (~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b00)
      | (fsm_output[5]) | (~ (fsm_output[7]));
  assign or_356_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_1_sva[1:0]!=2'b00)
      | (fsm_output[5]) | (fsm_output[7]);
  assign or_355_nl = (~ (fsm_output[2])) | (~ (fsm_output[0])) | (~ (fsm_output[5]))
      | (operator_64_false_acc_cse_sva[1:0]!=2'b00) | (~ (fsm_output[7]));
  assign mux_301_nl = MUX_s_1_2_2(or_356_nl, or_355_nl, fsm_output[3]);
  assign mux_302_nl = MUX_s_1_2_2(or_358_nl, mux_301_nl, fsm_output[4]);
  assign nor_87_nl = ~((fsm_output[6]) | mux_302_nl);
  assign tmp_1_lpi_4_dfm_mx0c0 = MUX_s_1_2_2(nor_86_nl, nor_87_nl, fsm_output[1]);
  assign nor_84_nl = ~((~ (fsm_output[6])) | (fsm_output[4]) | (~ (fsm_output[3]))
      | (~ (fsm_output[2])) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (fsm_output[7]));
  assign or_365_nl = (fsm_output[3]) | (~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (~ (fsm_output[7]));
  assign or_363_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_1_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (fsm_output[7]);
  assign nand_52_nl = ~((fsm_output[2]) & (fsm_output[0]) & (fsm_output[5]) & (operator_64_false_acc_cse_sva[1:0]==2'b01)
      & (fsm_output[7]));
  assign mux_304_nl = MUX_s_1_2_2(or_363_nl, nand_52_nl, fsm_output[3]);
  assign mux_305_nl = MUX_s_1_2_2(or_365_nl, mux_304_nl, fsm_output[4]);
  assign nor_85_nl = ~((fsm_output[6]) | mux_305_nl);
  assign tmp_1_lpi_4_dfm_mx0c1 = MUX_s_1_2_2(nor_84_nl, nor_85_nl, fsm_output[1]);
  assign nor_82_nl = ~((~ (fsm_output[6])) | (fsm_output[4]) | (~ (fsm_output[3]))
      | (~ (fsm_output[2])) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b10)
      | (fsm_output[5]) | (fsm_output[7]));
  assign or_372_nl = (fsm_output[3]) | (~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b10)
      | (fsm_output[5]) | (~ (fsm_output[7]));
  assign or_370_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_1_sva[1:0]!=2'b10)
      | (fsm_output[5]) | (fsm_output[7]);
  assign or_369_nl = (~((fsm_output[2]) & (fsm_output[0]) & (fsm_output[5]) & (~
      (operator_64_false_acc_cse_sva[0])))) | (~((operator_64_false_acc_cse_sva[1])
      & (fsm_output[7])));
  assign mux_307_nl = MUX_s_1_2_2(or_370_nl, or_369_nl, fsm_output[3]);
  assign mux_308_nl = MUX_s_1_2_2(or_372_nl, mux_307_nl, fsm_output[4]);
  assign nor_83_nl = ~((fsm_output[6]) | mux_308_nl);
  assign tmp_1_lpi_4_dfm_mx0c2 = MUX_s_1_2_2(nor_82_nl, nor_83_nl, fsm_output[1]);
  assign nor_80_nl = ~((~ (fsm_output[6])) | (fsm_output[4]) | (~ (fsm_output[3]))
      | (~ (fsm_output[2])) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (fsm_output[7]));
  assign or_407_nl = (fsm_output[3]) | (~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (~ (fsm_output[7]));
  assign or_408_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (operator_64_false_acc_cse_1_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (fsm_output[7]);
  assign nand_23_nl = ~((fsm_output[2]) & (fsm_output[0]) & (fsm_output[5]) & (operator_64_false_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7]));
  assign mux_310_nl = MUX_s_1_2_2(or_408_nl, nand_23_nl, fsm_output[3]);
  assign mux_311_nl = MUX_s_1_2_2(or_407_nl, mux_310_nl, fsm_output[4]);
  assign nor_81_nl = ~((fsm_output[6]) | mux_311_nl);
  assign tmp_1_lpi_4_dfm_mx0c3 = MUX_s_1_2_2(nor_80_nl, nor_81_nl, fsm_output[1]);
  assign and_108_m1c = and_dcpl_80 & and_dcpl_33 & and_dcpl_43;
  assign nor_184_nl = ~((~ (fsm_output[5])) | (fsm_output[1]));
  assign nor_185_nl = ~((fsm_output[5]) | (~ (fsm_output[1])));
  assign mux_100_nl = MUX_s_1_2_2(nor_184_nl, nor_185_nl, fsm_output[4]);
  assign and_34_nl = mux_100_nl & (~ (fsm_output[3])) & and_dcpl_28 & and_dcpl_21;
  assign and_40_nl = and_dcpl_36 & and_dcpl_33 & and_dcpl_32;
  assign and_44_nl = and_dcpl_4 & ((fsm_output[0]) ^ (fsm_output[4])) & and_dcpl_38
      & and_dcpl_32;
  assign nor_182_nl = ~((~ (fsm_output[6])) | (fsm_output[0]) | (~ (fsm_output[2]))
      | (fsm_output[1]) | (~ (fsm_output[3])));
  assign nor_183_nl = ~((fsm_output[6]) | (~ (fsm_output[0])) | (fsm_output[2]) |
      (~ (fsm_output[1])) | (fsm_output[3]));
  assign mux_101_nl = MUX_s_1_2_2(nor_182_nl, nor_183_nl, fsm_output[7]);
  assign and_45_nl = mux_101_nl & and_dcpl_33;
  assign nor_180_nl = ~((fsm_output[2:0]!=3'b100));
  assign nor_181_nl = ~((fsm_output[2:0]!=3'b011));
  assign mux_102_nl = MUX_s_1_2_2(nor_180_nl, nor_181_nl, fsm_output[4]);
  assign and_49_nl = mux_102_nl & (~ (fsm_output[3])) & (~ (fsm_output[5])) & and_dcpl_43;
  assign nor_178_nl = ~((fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[3]));
  assign nor_179_nl = ~((~ (fsm_output[5])) | (fsm_output[0]) | (~ (fsm_output[3])));
  assign mux_103_nl = MUX_s_1_2_2(nor_178_nl, nor_179_nl, fsm_output[4]);
  assign and_52_nl = mux_103_nl & (fsm_output[2:1]==2'b10) & and_dcpl_43;
  assign and_185_nl = (fsm_output[4]) & (fsm_output[5]) & (fsm_output[0]);
  assign nor_177_nl = ~((fsm_output[4]) | (fsm_output[5]) | (fsm_output[0]));
  assign mux_104_nl = MUX_s_1_2_2(and_185_nl, nor_177_nl, fsm_output[6]);
  assign and_56_nl = mux_104_nl & and_dcpl_51 & (fsm_output[2]) & (fsm_output[7]);
  assign nor_175_nl = ~((fsm_output[0]) | (~ and_dcpl_4));
  assign nor_176_nl = ~((~ (fsm_output[0])) | (fsm_output[1]) | (fsm_output[3]));
  assign mux_105_nl = MUX_s_1_2_2(nor_175_nl, nor_176_nl, fsm_output[6]);
  assign and_60_nl = mux_105_nl & and_dcpl_55 & (fsm_output[4]) & (fsm_output[7]);
  assign vec_rsc_0_0_i_adra_d_pff = MUX1HOT_v_8_9_2((COMP_LOOP_1_operator_64_false_acc_tmp[9:2]),
      ({COMP_LOOP_acc_psp_sva_7 , COMP_LOOP_acc_psp_sva_6_0}), (operator_64_false_acc_cse_1_sva[9:2]),
      (COMP_LOOP_acc_cse_2_sva[9:2]), (operator_64_false_acc_cse_2_sva[9:2]), (COMP_LOOP_acc_7_psp_sva[8:1]),
      (operator_64_false_acc_cse_3_sva[9:2]), (COMP_LOOP_acc_cse_sva[9:2]), (operator_64_false_acc_cse_sva[9:2]),
      {and_dcpl_27 , and_34_nl , and_40_nl , and_44_nl , and_45_nl , and_49_nl ,
      and_52_nl , and_56_nl , and_60_nl});
  assign vec_rsc_0_0_i_da_d_pff = COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign or_97_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b00) | (fsm_output[7:6]!=2'b01);
  assign or_96_nl = (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[7:6]!=2'b01);
  assign mux_110_nl = MUX_s_1_2_2(or_97_nl, or_96_nl, fsm_output[4]);
  assign nor_172_nl = ~((~ (fsm_output[1])) | (fsm_output[5]) | mux_110_nl);
  assign or_93_nl = (fsm_output[4]) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b00) | nand_76_cse;
  assign or_91_nl = (~ (fsm_output[4])) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b00)
      | (fsm_output[7:6]!=2'b10);
  assign mux_109_nl = MUX_s_1_2_2(or_93_nl, or_91_nl, fsm_output[5]);
  assign nor_173_nl = ~((fsm_output[1]) | mux_109_nl);
  assign mux_111_nl = MUX_s_1_2_2(nor_172_nl, nor_173_nl, fsm_output[2]);
  assign and_184_nl = (fsm_output[3]) & mux_111_nl;
  assign or_88_nl = (fsm_output[5:4]!=2'b10) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6])
      | (STAGE_VEC_LOOP_j_sva_9_0[1]) | (fsm_output[7]);
  assign or_86_nl = (operator_64_false_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[7:6]!=2'b10);
  assign or_84_nl = (COMP_LOOP_acc_7_psp_sva[0]) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[7:6]!=2'b10);
  assign mux_106_nl = MUX_s_1_2_2(or_86_nl, or_84_nl, fsm_output[4]);
  assign or_87_nl = (fsm_output[5]) | mux_106_nl;
  assign mux_107_nl = MUX_s_1_2_2(or_88_nl, or_87_nl, fsm_output[1]);
  assign or_82_nl = (fsm_output[1]) | (~ (fsm_output[5])) | (~ (fsm_output[4])) |
      (operator_64_false_acc_cse_sva[1:0]!=2'b00) | nand_76_cse;
  assign mux_108_nl = MUX_s_1_2_2(mux_107_nl, or_82_nl, fsm_output[2]);
  assign nor_174_nl = ~((fsm_output[3]) | mux_108_nl);
  assign vec_rsc_0_0_i_wea_d_pff = MUX_s_1_2_2(and_184_nl, nor_174_nl, fsm_output[0]);
  assign nor_164_nl = ~((COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b00) | (fsm_output[7:4]!=4'b0001));
  assign nor_165_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[7:4]!=4'b0001));
  assign mux_117_nl = MUX_s_1_2_2(nor_164_nl, nor_165_nl, fsm_output[0]);
  assign nor_166_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00)
      | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm) | (fsm_output[7:4]!=4'b0100));
  assign mux_118_nl = MUX_s_1_2_2(mux_117_nl, nor_166_nl, fsm_output[3]);
  assign and_183_nl = (fsm_output[1]) & mux_118_nl;
  assign nor_167_nl = ~((COMP_LOOP_acc_7_psp_sva[0]) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7:4]!=4'b1000));
  assign nor_168_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b00) | (fsm_output[7:4]!=4'b1000));
  assign mux_114_nl = MUX_s_1_2_2(nor_167_nl, nor_168_nl, fsm_output[0]);
  assign nor_169_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[7:4]!=4'b0100));
  assign nor_170_nl = ~((~ operator_64_false_slc_operator_64_false_acc_61_itm) |
      (COMP_LOOP_acc_cse_sva[1:0]!=2'b00) | (fsm_output[7:4]!=4'b1011));
  assign mux_113_nl = MUX_s_1_2_2(nor_169_nl, nor_170_nl, fsm_output[0]);
  assign mux_115_nl = MUX_s_1_2_2(mux_114_nl, mux_113_nl, fsm_output[3]);
  assign nor_171_nl = ~((~ (fsm_output[3])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b00)
      | (fsm_output[7:4]!=4'b1011));
  assign mux_116_nl = MUX_s_1_2_2(mux_115_nl, nor_171_nl, fsm_output[1]);
  assign vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_183_nl,
      mux_116_nl, fsm_output[2]);
  assign or_125_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b01) | (fsm_output[7:6]!=2'b01);
  assign or_124_nl = (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[7:6]!=2'b01);
  assign mux_124_nl = MUX_s_1_2_2(or_125_nl, or_124_nl, fsm_output[4]);
  assign nor_161_nl = ~((~ (fsm_output[1])) | (fsm_output[5]) | mux_124_nl);
  assign or_121_nl = (fsm_output[4]) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b01) | nand_76_cse;
  assign or_119_nl = (~ (fsm_output[4])) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b01)
      | (fsm_output[7:6]!=2'b10);
  assign mux_123_nl = MUX_s_1_2_2(or_121_nl, or_119_nl, fsm_output[5]);
  assign nor_162_nl = ~((fsm_output[1]) | mux_123_nl);
  assign mux_125_nl = MUX_s_1_2_2(nor_161_nl, nor_162_nl, fsm_output[2]);
  assign and_182_nl = (fsm_output[3]) & mux_125_nl;
  assign or_116_nl = (fsm_output[5:4]!=2'b10) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]) | (STAGE_VEC_LOOP_j_sva_9_0[1]) | (fsm_output[7]);
  assign or_114_nl = (operator_64_false_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[7:6]!=2'b10);
  assign or_112_nl = (COMP_LOOP_acc_7_psp_sva[0]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[7:6]!=2'b10);
  assign mux_120_nl = MUX_s_1_2_2(or_114_nl, or_112_nl, fsm_output[4]);
  assign or_115_nl = (fsm_output[5]) | mux_120_nl;
  assign mux_121_nl = MUX_s_1_2_2(or_116_nl, or_115_nl, fsm_output[1]);
  assign or_110_nl = (fsm_output[1]) | (~ (fsm_output[5])) | (~ (fsm_output[4]))
      | (operator_64_false_acc_cse_sva[1:0]!=2'b01) | nand_76_cse;
  assign mux_122_nl = MUX_s_1_2_2(mux_121_nl, or_110_nl, fsm_output[2]);
  assign nor_163_nl = ~((fsm_output[3]) | mux_122_nl);
  assign vec_rsc_0_1_i_wea_d_pff = MUX_s_1_2_2(and_182_nl, nor_163_nl, fsm_output[0]);
  assign nor_154_nl = ~((COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b01) | (fsm_output[7:4]!=4'b0001));
  assign nor_155_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[7:4]!=4'b0001));
  assign mux_131_nl = MUX_s_1_2_2(nor_154_nl, nor_155_nl, fsm_output[0]);
  assign nor_156_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b01)
      | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm) | (fsm_output[7:4]!=4'b0100));
  assign mux_132_nl = MUX_s_1_2_2(mux_131_nl, nor_156_nl, fsm_output[3]);
  assign and_180_nl = (fsm_output[1]) & mux_132_nl;
  assign nor_157_nl = ~((COMP_LOOP_acc_7_psp_sva[0]) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[7:4]!=4'b1000));
  assign nor_158_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b01) | (fsm_output[7:4]!=4'b1000));
  assign mux_128_nl = MUX_s_1_2_2(nor_157_nl, nor_158_nl, fsm_output[0]);
  assign nor_159_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[7:4]!=4'b0100));
  assign and_181_nl = operator_64_false_slc_operator_64_false_acc_61_itm & (COMP_LOOP_acc_cse_sva[1:0]==2'b01)
      & (fsm_output[7:4]==4'b1011);
  assign mux_127_nl = MUX_s_1_2_2(nor_159_nl, and_181_nl, fsm_output[0]);
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, mux_127_nl, fsm_output[3]);
  assign nor_160_nl = ~((~ (fsm_output[3])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b01)
      | (fsm_output[7:4]!=4'b1011));
  assign mux_130_nl = MUX_s_1_2_2(mux_129_nl, nor_160_nl, fsm_output[1]);
  assign vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_180_nl,
      mux_130_nl, fsm_output[2]);
  assign or_153_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b10) | (fsm_output[7:6]!=2'b01);
  assign or_152_nl = (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[7:6]!=2'b01);
  assign mux_138_nl = MUX_s_1_2_2(or_153_nl, or_152_nl, fsm_output[4]);
  assign nor_151_nl = ~((~ (fsm_output[1])) | (fsm_output[5]) | mux_138_nl);
  assign or_149_nl = (fsm_output[4]) | (COMP_LOOP_acc_cse_sva[0]) | (~((COMP_LOOP_acc_cse_sva[1])
      & (fsm_output[7:6]==2'b11)));
  assign or_147_nl = (~ (fsm_output[4])) | (operator_64_false_acc_cse_3_sva[1:0]!=2'b10)
      | (fsm_output[7:6]!=2'b10);
  assign mux_137_nl = MUX_s_1_2_2(or_149_nl, or_147_nl, fsm_output[5]);
  assign nor_152_nl = ~((fsm_output[1]) | mux_137_nl);
  assign mux_139_nl = MUX_s_1_2_2(nor_151_nl, nor_152_nl, fsm_output[2]);
  assign and_179_nl = (fsm_output[3]) & mux_139_nl;
  assign or_144_nl = (fsm_output[5:4]!=2'b10) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6])
      | (~ (STAGE_VEC_LOOP_j_sva_9_0[1])) | (fsm_output[7]);
  assign or_142_nl = (operator_64_false_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[7:6]!=2'b10);
  assign or_140_nl = (~ (COMP_LOOP_acc_7_psp_sva[0])) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[7:6]!=2'b10);
  assign mux_134_nl = MUX_s_1_2_2(or_142_nl, or_140_nl, fsm_output[4]);
  assign or_143_nl = (fsm_output[5]) | mux_134_nl;
  assign mux_135_nl = MUX_s_1_2_2(or_144_nl, or_143_nl, fsm_output[1]);
  assign or_138_nl = (fsm_output[1]) | (~ (fsm_output[5])) | (~ (fsm_output[4]))
      | (operator_64_false_acc_cse_sva[0]) | (~((operator_64_false_acc_cse_sva[1])
      & (fsm_output[7:6]==2'b11)));
  assign mux_136_nl = MUX_s_1_2_2(mux_135_nl, or_138_nl, fsm_output[2]);
  assign nor_153_nl = ~((fsm_output[3]) | mux_136_nl);
  assign vec_rsc_0_2_i_wea_d_pff = MUX_s_1_2_2(and_179_nl, nor_153_nl, fsm_output[0]);
  assign nor_144_nl = ~((COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b10) | (fsm_output[7:4]!=4'b0001));
  assign nor_145_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[7:4]!=4'b0001));
  assign mux_145_nl = MUX_s_1_2_2(nor_144_nl, nor_145_nl, fsm_output[0]);
  assign nor_146_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b10)
      | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm) | (fsm_output[7:4]!=4'b0100));
  assign mux_146_nl = MUX_s_1_2_2(mux_145_nl, nor_146_nl, fsm_output[3]);
  assign and_177_nl = (fsm_output[1]) & mux_146_nl;
  assign nor_147_nl = ~((~ (COMP_LOOP_acc_7_psp_sva[0])) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7:4]!=4'b1000));
  assign nor_148_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b10) | (fsm_output[7:4]!=4'b1000));
  assign mux_142_nl = MUX_s_1_2_2(nor_147_nl, nor_148_nl, fsm_output[0]);
  assign nor_149_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[7:4]!=4'b0100));
  assign and_178_nl = operator_64_false_slc_operator_64_false_acc_61_itm & (COMP_LOOP_acc_cse_sva[1:0]==2'b10)
      & (fsm_output[7:4]==4'b1011);
  assign mux_141_nl = MUX_s_1_2_2(nor_149_nl, and_178_nl, fsm_output[0]);
  assign mux_143_nl = MUX_s_1_2_2(mux_142_nl, mux_141_nl, fsm_output[3]);
  assign nor_150_nl = ~((~ (fsm_output[3])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b10)
      | (fsm_output[7:4]!=4'b1011));
  assign mux_144_nl = MUX_s_1_2_2(mux_143_nl, nor_150_nl, fsm_output[1]);
  assign vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_177_nl,
      mux_144_nl, fsm_output[2]);
  assign nand_41_nl = ~((operator_64_false_acc_cse_1_sva[1:0]==2'b11) & (fsm_output[7:6]==2'b01));
  assign nand_42_nl = ~((COMP_LOOP_acc_cse_2_sva[1:0]==2'b11) & (fsm_output[7:6]==2'b01));
  assign mux_152_nl = MUX_s_1_2_2(nand_41_nl, nand_42_nl, fsm_output[4]);
  assign nor_141_nl = ~((~ (fsm_output[1])) | (fsm_output[5]) | mux_152_nl);
  assign or_175_nl = (fsm_output[4]) | (~((COMP_LOOP_acc_cse_sva[1:0]==2'b11) & (fsm_output[7:6]==2'b11)));
  assign nand_58_nl = ~((fsm_output[4]) & (operator_64_false_acc_cse_3_sva[1:0]==2'b11)
      & (fsm_output[7:6]==2'b10));
  assign mux_151_nl = MUX_s_1_2_2(or_175_nl, nand_58_nl, fsm_output[5]);
  assign nor_142_nl = ~((fsm_output[1]) | mux_151_nl);
  assign mux_153_nl = MUX_s_1_2_2(nor_141_nl, nor_142_nl, fsm_output[2]);
  assign and_176_nl = (fsm_output[3]) & mux_153_nl;
  assign or_171_nl = (fsm_output[5:4]!=2'b10) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[1])) | (fsm_output[7]);
  assign nand_59_nl = ~((operator_64_false_acc_cse_2_sva[1:0]==2'b11) & (fsm_output[7:6]==2'b10));
  assign nand_57_nl = ~((COMP_LOOP_acc_7_psp_sva[0]) & (STAGE_VEC_LOOP_j_sva_9_0[0])
      & (fsm_output[7:6]==2'b10));
  assign mux_148_nl = MUX_s_1_2_2(nand_59_nl, nand_57_nl, fsm_output[4]);
  assign or_170_nl = (fsm_output[5]) | mux_148_nl;
  assign mux_149_nl = MUX_s_1_2_2(or_171_nl, or_170_nl, fsm_output[1]);
  assign or_165_nl = (fsm_output[1]) | (~((fsm_output[5:4]==2'b11) & (operator_64_false_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7:6]==2'b11)));
  assign mux_150_nl = MUX_s_1_2_2(mux_149_nl, or_165_nl, fsm_output[2]);
  assign nor_143_nl = ~((fsm_output[3]) | mux_150_nl);
  assign vec_rsc_0_3_i_wea_d_pff = MUX_s_1_2_2(and_176_nl, nor_143_nl, fsm_output[0]);
  assign nor_135_nl = ~((COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b11) | (fsm_output[7:4]!=4'b0001));
  assign nor_136_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b11) | (fsm_output[7:4]!=4'b0001));
  assign mux_159_nl = MUX_s_1_2_2(nor_135_nl, nor_136_nl, fsm_output[0]);
  assign nor_137_nl = ~((~ (fsm_output[0])) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b11)
      | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm) | (fsm_output[7:4]!=4'b0100));
  assign mux_160_nl = MUX_s_1_2_2(mux_159_nl, nor_137_nl, fsm_output[3]);
  assign and_173_nl = (fsm_output[1]) & mux_160_nl;
  assign nor_138_nl = ~((~ (COMP_LOOP_acc_7_psp_sva[0])) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[7:4]!=4'b1000));
  assign nor_139_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b11) | (fsm_output[7:4]!=4'b1000));
  assign mux_156_nl = MUX_s_1_2_2(nor_138_nl, nor_139_nl, fsm_output[0]);
  assign nor_140_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b11) | (fsm_output[7:4]!=4'b0100));
  assign and_174_nl = operator_64_false_slc_operator_64_false_acc_61_itm & (COMP_LOOP_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7:4]==4'b1011);
  assign mux_155_nl = MUX_s_1_2_2(nor_140_nl, and_174_nl, fsm_output[0]);
  assign mux_157_nl = MUX_s_1_2_2(mux_156_nl, mux_155_nl, fsm_output[3]);
  assign and_175_nl = (fsm_output[3]) & (~ (fsm_output[0])) & (operator_64_false_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7:4]==4'b1011);
  assign mux_158_nl = MUX_s_1_2_2(mux_157_nl, and_175_nl, fsm_output[1]);
  assign vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_173_nl,
      mux_158_nl, fsm_output[2]);
  assign and_dcpl_145 = (fsm_output==8'b00000101);
  assign and_dcpl_158 = (fsm_output==8'b11110111);
  assign and_dcpl_159 = (~ (fsm_output[7])) & (fsm_output[0]);
  assign and_dcpl_162 = (~ (fsm_output[6])) & (fsm_output[2]);
  assign and_dcpl_163 = (fsm_output[3]) & (fsm_output[5]);
  assign and_dcpl_165 = and_dcpl_163 & and_dcpl_162 & (~ (fsm_output[4])) & (fsm_output[1])
      & and_dcpl_159;
  assign and_dcpl_166 = ~((fsm_output[7]) | (fsm_output[0]));
  assign and_dcpl_167 = ~((fsm_output[4]) | (fsm_output[1]));
  assign and_dcpl_168 = and_dcpl_167 & and_dcpl_166;
  assign and_dcpl_169 = (fsm_output[6]) & (~ (fsm_output[2]));
  assign and_dcpl_171 = and_dcpl_163 & and_dcpl_169 & and_dcpl_168;
  assign and_dcpl_172 = (fsm_output[4]) & (fsm_output[1]);
  assign and_dcpl_174 = ~((fsm_output[6]) | (fsm_output[2]));
  assign and_dcpl_175 = ~((fsm_output[3]) | (fsm_output[5]));
  assign and_dcpl_177 = and_dcpl_175 & and_dcpl_174 & and_dcpl_172 & and_dcpl_166;
  assign and_dcpl_182 = (~ (fsm_output[3])) & (fsm_output[5]) & and_dcpl_174 & and_dcpl_167
      & (fsm_output[7]) & (fsm_output[0]);
  assign nor_222_nl = ~((~ (fsm_output[5])) | (~ (fsm_output[1])) | (fsm_output[4])
      | (fsm_output[7]) | (fsm_output[3]) | (~ (fsm_output[0])) | (fsm_output[6]));
  assign nor_224_nl = ~((~ (fsm_output[3])) | (fsm_output[0]) | (~ (fsm_output[6])));
  assign nor_225_nl = ~((fsm_output[3]) | (~ (fsm_output[0])) | (fsm_output[6]));
  assign mux_342_nl = MUX_s_1_2_2(nor_224_nl, nor_225_nl, fsm_output[7]);
  assign nand_60_nl = ~((fsm_output[4]) & mux_342_nl);
  assign or_435_nl = (fsm_output[4]) | (~ (fsm_output[7])) | (~ (fsm_output[3]))
      | (fsm_output[0]) | (~ (fsm_output[6]));
  assign mux_343_nl = MUX_s_1_2_2(nand_60_nl, or_435_nl, fsm_output[1]);
  assign nor_223_nl = ~((fsm_output[5]) | mux_343_nl);
  assign mux_344_cse = MUX_s_1_2_2(nor_222_nl, nor_223_nl, fsm_output[2]);
  assign and_dcpl_183 = and_dcpl_175 & and_dcpl_162;
  assign and_dcpl_184 = and_dcpl_183 & and_dcpl_168;
  assign and_dcpl_186 = and_dcpl_183 & and_dcpl_167 & and_dcpl_159;
  assign and_dcpl_191 = (fsm_output[3]) & (~ (fsm_output[5])) & and_dcpl_169 & and_dcpl_172
      & (fsm_output[7]) & (~ (fsm_output[0]));
  assign and_dcpl_194 = ~((fsm_output[4]) | (fsm_output[1]) | (fsm_output[7]) | (~
      (fsm_output[0])));
  assign and_dcpl_196 = ~((fsm_output[6:5]!=2'b00));
  assign and_dcpl_198 = and_dcpl_196 & (fsm_output[3:2]==2'b00) & and_dcpl_194;
  assign and_dcpl_200 = and_dcpl_196 & (fsm_output[3:2]==2'b01);
  assign and_dcpl_201 = and_dcpl_200 & and_dcpl_194;
  assign and_dcpl_205 = and_dcpl_200 & (fsm_output[4]) & (~ (fsm_output[1])) & (~
      (fsm_output[7])) & (~ (fsm_output[0]));
  assign and_nl = (fsm_output[4]) & (~ (fsm_output[0])) & (fsm_output[6]) & (fsm_output[7])
      & (fsm_output[3]) & (fsm_output[1]) & (~ (fsm_output[2]));
  assign or_450_nl = (~ (fsm_output[6])) | (fsm_output[7]) | (~ (fsm_output[3]))
      | (fsm_output[1]) | (fsm_output[2]);
  assign nand_64_nl = ~((fsm_output[3:1]==3'b111));
  assign mux_348_nl = MUX_s_1_2_2(nand_64_nl, or_22_cse, fsm_output[7]);
  assign or_449_nl = (fsm_output[6]) | mux_348_nl;
  assign mux_349_nl = MUX_s_1_2_2(or_450_nl, or_449_nl, fsm_output[0]);
  assign nor_217_nl = ~((fsm_output[4]) | mux_349_nl);
  assign not_tmp_255 = MUX_s_1_2_2(and_nl, nor_217_nl, fsm_output[5]);
  assign and_dcpl_209 = (fsm_output[6:5]==2'b10) & nor_tmp_44 & and_dcpl_194;
  assign and_dcpl_213 = and_dcpl_200 & (~ (fsm_output[4])) & (fsm_output[1]) & (fsm_output[7])
      & (~ (fsm_output[0]));
  assign and_dcpl_219 = (fsm_output[6:5]==2'b01) & nor_tmp_44 & (fsm_output[4]) &
      (fsm_output[1]) & (fsm_output[7]) & (fsm_output[0]);
  assign and_dcpl_225 = ~((fsm_output[3]) | (fsm_output[5]) | (fsm_output[6]) | (fsm_output[2]));
  assign and_dcpl_226 = and_dcpl_225 & (fsm_output[4]) & (fsm_output[1]) & (~ (fsm_output[7]))
      & (~ (fsm_output[0]));
  assign and_dcpl_230 = and_dcpl_225 & (~ (fsm_output[4])) & (~ (fsm_output[1]))
      & and_dcpl_159;
  assign and_dcpl_232 = (fsm_output[4]) & (~ (fsm_output[1]));
  assign and_dcpl_237 = (fsm_output[3]) & (fsm_output[5]) & (fsm_output[6]) & (~
      (fsm_output[2])) & and_dcpl_232 & (fsm_output[7]) & (~ (fsm_output[0]));
  assign and_dcpl_239 = and_dcpl_225 & and_dcpl_232 & and_dcpl_159;
  assign and_324_ssc = (fsm_output==8'b11011010);
  assign mux_tmp_337 = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[3]);
  assign or_tmp_423 = (fsm_output[4]) | (~((fsm_output[7]) & (fsm_output[2])));
  assign or_tmp_430 = (fsm_output[2]) | (fsm_output[6]);
  assign mux_tmp_356 = MUX_s_1_2_2((~ or_tmp_430), (fsm_output[6]), fsm_output[3]);
  assign or_tmp_432 = (fsm_output[5]) | (~((fsm_output[1]) & (fsm_output[3]) & (fsm_output[2])
      & (fsm_output[6])));
  assign operator_64_false_or_5_itm = mux_344_cse | and_dcpl_186;
  assign COMP_LOOP_or_9_itm = and_dcpl_230 | and_dcpl_237;
  always @(posedge clk) begin
    if ( mux_tmp_84 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= and_dcpl_51 & (~ (fsm_output[2])) & (~
          (fsm_output[0])) & (fsm_output[5]) & (fsm_output[4]) & (fsm_output[6])
          & (fsm_output[7]) & (COMP_LOOP_acc_9_sdt[4]);
      reg_ensig_cgo_cse <= ~ mux_184_itm;
    end
  end
  always @(posedge clk) begin
    reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        z_out, mux_206_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        and_dcpl_85);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_85);
    modExp_dev_exp_1_sva_1_0 <= MUX_v_2_2_2(COMP_LOOP_and_4_nl, 2'b11, and_133_nl);
  end
  always @(posedge clk) begin
    if ( mux_tmp_84 | and_dcpl_87 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (COMP_LOOP_acc_9_sdt[3:0]),
          and_dcpl_87);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_189_nl, nor_tmp_25, fsm_output[7]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_87 | and_dcpl_81 | not_tmp_142 | not_tmp_136 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4
        | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 ) begin
      COMP_LOOP_1_modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_4_2(z_out_3, z_out,
          64'b0000000000000000000000000000000000000000000000000000000000000001, modExp_dev_while_rem_cmp_z,
          {and_dcpl_87 , operator_64_false_or_2_nl , not_tmp_142 , COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (and_dcpl_66 & ((fsm_output[2]) ^ (fsm_output[4])) & (~ (fsm_output[0]))
        & (~ (fsm_output[5])) & and_dcpl_21) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1 ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_1[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_236_nl | and_102_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z, and_102_rgt);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_248_nl, mux_241_nl, fsm_output[7]) ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_6_2(STAGE_MAIN_LOOP_div_cmp_z, z_out_3, vec_rsc_0_0_i_qa_d,
          vec_rsc_0_1_i_qa_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_3_i_qa_d, {and_103_nl
          , and_dcpl_81 , COMP_LOOP_or_3_nl , COMP_LOOP_or_4_nl , COMP_LOOP_or_5_nl
          , COMP_LOOP_or_6_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm <= 1'b0;
    end
    else if ( and_dcpl_81 | not_tmp_136 | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2
        | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3 |
        and_dcpl_112 ) begin
      COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm <= MUX1HOT_s_1_3_2((~
          (z_out_2[64])), (z_out_2[63]), (~ (z_out_2[63])), {modExp_dev_while_or_nl
          , modExp_dev_while_or_1_nl , and_dcpl_112});
    end
  end
  always @(posedge clk) begin
    if ( mux_351_nl & (~ (fsm_output[5])) & (fsm_output[4]) & (~ (fsm_output[2]))
        ) begin
      COMP_LOOP_k_9_2_sva_6_0 <= MUX_v_7_2_2(7'b0000000, (z_out_5[6:0]), nand_66_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_1_sva <= 10'b0000000000;
    end
    else if ( ~((fsm_output!=8'b00010010)) ) begin
      operator_64_false_acc_cse_1_sva <= COMP_LOOP_1_operator_64_false_acc_tmp;
    end
  end
  always @(posedge clk) begin
    if ( ~ mux_364_nl ) begin
      COMP_LOOP_acc_psp_sva_7 <= COMP_LOOP_COMP_LOOP_mux_rgt[7];
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_253_nl, nor_254_nl, fsm_output[3]) ) begin
      COMP_LOOP_acc_psp_sva_6_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[6:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_2_sva <= 10'b0000000000;
    end
    else if ( ~(mux_294_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_acc_cse_2_sva <= z_out_2[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_2_sva <= 10'b0000000000;
    end
    else if ( ~ mux_295_nl ) begin
      operator_64_false_acc_cse_2_sva <= nl_operator_64_false_acc_cse_2_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_7_psp_sva <= 9'b000000000;
    end
    else if ( ~(or_tmp_323 ^ (fsm_output[7])) ) begin
      COMP_LOOP_acc_7_psp_sva <= COMP_LOOP_acc_9_sdt[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_3_sva <= 10'b0000000000;
    end
    else if ( ~ mux_296_nl ) begin
      operator_64_false_acc_cse_3_sva <= nl_operator_64_false_acc_cse_3_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_sva <= 10'b0000000000;
    end
    else if ( ~ mux_297_nl ) begin
      COMP_LOOP_acc_cse_sva <= nl_COMP_LOOP_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_sva <= 10'b0000000000;
    end
    else if ( ~ mux_299_nl ) begin
      operator_64_false_acc_cse_sva <= nl_operator_64_false_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_27 | operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1 )
        begin
      operator_64_false_slc_operator_64_false_acc_61_itm <= MUX_s_1_2_2((z_out_5[7]),
          (z_out_2[61]), operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( tmp_1_lpi_4_dfm_mx0c0 | tmp_1_lpi_4_dfm_mx0c1 | tmp_1_lpi_4_dfm_mx0c2 |
        tmp_1_lpi_4_dfm_mx0c3 ) begin
      tmp_1_lpi_4_dfm <= MUX1HOT_v_64_4_2(vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d,
          vec_rsc_0_2_i_qa_d, vec_rsc_0_3_i_qa_d, {tmp_1_lpi_4_dfm_mx0c0 , tmp_1_lpi_4_dfm_mx0c1
          , tmp_1_lpi_4_dfm_mx0c2 , tmp_1_lpi_4_dfm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_380_nl, mux_375_nl, fsm_output[7]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), not_953_nl);
    end
  end
  assign mux_203_nl = MUX_s_1_2_2((~ (fsm_output[3])), and_dcpl_4, fsm_output[2]);
  assign mux_204_nl = MUX_s_1_2_2((~ or_tmp_210), mux_203_nl, fsm_output[5]);
  assign or_228_nl = (fsm_output[4]) | mux_204_nl;
  assign nand_11_nl = ~((fsm_output[5]) & (~(and_146_cse | (fsm_output[3]))));
  assign mux_202_nl = MUX_s_1_2_2(nand_11_nl, or_tmp_212, fsm_output[4]);
  assign mux_205_nl = MUX_s_1_2_2(or_228_nl, mux_202_nl, fsm_output[6]);
  assign or_225_nl = (fsm_output[5:4]!=2'b01) | (~ or_tmp_210);
  assign or_222_nl = (fsm_output[5]) | (~ and_151_cse);
  assign or_221_nl = (fsm_output[5]) | nor_tmp_29;
  assign mux_199_nl = MUX_s_1_2_2(or_222_nl, or_221_nl, fsm_output[4]);
  assign mux_200_nl = MUX_s_1_2_2(or_225_nl, mux_199_nl, fsm_output[6]);
  assign mux_206_nl = MUX_s_1_2_2(mux_205_nl, mux_200_nl, fsm_output[7]);
  assign or_397_nl = (~ (fsm_output[2])) | (fsm_output[4]) | (~ (fsm_output[5]));
  assign or_395_nl = (fsm_output[4]) | (fsm_output[1]) | (~ (fsm_output[5]));
  assign mux_323_nl = MUX_s_1_2_2(or_tmp_313, or_395_nl, and_dcpl_70);
  assign mux_324_nl = MUX_s_1_2_2(or_397_nl, mux_323_nl, fsm_output[3]);
  assign mux_321_nl = MUX_s_1_2_2(or_tmp_366, or_304_cse, fsm_output[0]);
  assign nand_19_nl = ~((fsm_output[2]) & (~ mux_321_nl));
  assign mux_322_nl = MUX_s_1_2_2(or_tmp_313, nand_19_nl, fsm_output[3]);
  assign mux_325_nl = MUX_s_1_2_2(mux_324_nl, mux_322_nl, fsm_output[6]);
  assign or_341_nl = (fsm_output[1]) | (fsm_output[0]) | (fsm_output[4]) | (~ (fsm_output[5]));
  assign mux_318_nl = MUX_s_1_2_2(or_341_nl, or_tmp_366, fsm_output[2]);
  assign mux_319_nl = MUX_s_1_2_2(mux_318_nl, or_304_cse, fsm_output[3]);
  assign or_338_nl = (fsm_output[1]) | (~ (fsm_output[4])) | (fsm_output[5]);
  assign or_387_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (~ (fsm_output[1]))
      | (fsm_output[5]);
  assign mux_316_nl = MUX_s_1_2_2(or_338_nl, or_387_nl, fsm_output[2]);
  assign mux_317_nl = MUX_s_1_2_2(or_304_cse, mux_316_nl, fsm_output[3]);
  assign mux_320_nl = MUX_s_1_2_2(mux_319_nl, mux_317_nl, fsm_output[6]);
  assign mux_326_nl = MUX_s_1_2_2(mux_325_nl, mux_320_nl, fsm_output[7]);
  assign nand_21_nl = ~(or_282_cse & (fsm_output[7]));
  assign mux_332_nl = MUX_s_1_2_2(mux_tmp_312, or_tmp_376, fsm_output[1]);
  assign mux_333_nl = MUX_s_1_2_2((~ (fsm_output[7])), mux_332_nl, fsm_output[3]);
  assign mux_334_nl = MUX_s_1_2_2(nand_21_nl, mux_333_nl, fsm_output[6]);
  assign mux_335_nl = MUX_s_1_2_2(nand_75_cse, mux_334_nl, fsm_output[4]);
  assign mux_328_nl = MUX_s_1_2_2(mux_tmp_312, or_tmp_376, fsm_output[0]);
  assign mux_329_nl = MUX_s_1_2_2(mux_328_nl, (fsm_output[7]), fsm_output[1]);
  assign or_399_nl = and_146_cse | (fsm_output[7]);
  assign mux_330_nl = MUX_s_1_2_2(mux_329_nl, or_399_nl, fsm_output[3]);
  assign mux_331_nl = MUX_s_1_2_2(mux_330_nl, or_461_cse, fsm_output[6]);
  assign or_401_nl = (fsm_output[4]) | mux_331_nl;
  assign mux_336_nl = MUX_s_1_2_2(mux_335_nl, or_401_nl, fsm_output[5]);
  assign and_131_nl = and_dcpl_67 & and_dcpl_1 & and_dcpl_43;
  assign COMP_LOOP_mux1h_22_nl = MUX1HOT_v_2_4_2((z_out_3[1:0]), modExp_dev_exp_1_sva_1_0,
      2'b01, 2'b10, {not_tmp_136 , (~ mux_326_nl) , mux_336_nl , and_131_nl});
  assign nand_65_nl = ~(and_dcpl_26 & and_dcpl_106);
  assign COMP_LOOP_and_4_nl = MUX_v_2_2_2(2'b00, COMP_LOOP_mux1h_22_nl, nand_65_nl);
  assign and_133_nl = and_dcpl_51 & and_dcpl_70 & and_dcpl_33 & nor_tmp_6;
  assign nor_189_nl = ~((fsm_output[6:1]!=6'b000000));
  assign operator_64_false_or_2_nl = and_dcpl_81 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5
      | not_tmp_136;
  assign nor_111_nl = ~((fsm_output[6:4]!=3'b000));
  assign mux_236_nl = MUX_s_1_2_2(nor_111_nl, nor_tmp_25, fsm_output[7]);
  assign and_103_nl = and_dcpl_67 & and_dcpl_79;
  assign nor_103_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1]) | (~ (fsm_output[4])) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[5]) | (fsm_output[1]) | (fsm_output[3]));
  assign nor_104_nl = ~((fsm_output[4]) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00) |
      (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_250_nl = MUX_s_1_2_2(nor_103_nl, nor_104_nl, fsm_output[6]);
  assign nor_105_nl = ~((fsm_output[6]) | (~ (fsm_output[4])) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b00)
      | not_tmp_162);
  assign mux_251_nl = MUX_s_1_2_2(mux_250_nl, nor_105_nl, fsm_output[7]);
  assign COMP_LOOP_or_3_nl = (mux_251_nl & and_dcpl_65) | ((~((STAGE_VEC_LOOP_j_sva_9_0[0])
      | (COMP_LOOP_acc_7_psp_sva[0]))) & and_108_m1c);
  assign nor_100_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1]) | (~ (fsm_output[4])) | (~
      (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[5]) | (fsm_output[1]) | (fsm_output[3]));
  assign nor_101_nl = ~((fsm_output[4]) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b01) |
      (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_252_nl = MUX_s_1_2_2(nor_100_nl, nor_101_nl, fsm_output[6]);
  assign nor_102_nl = ~((fsm_output[6]) | (~ (fsm_output[4])) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b01)
      | not_tmp_162);
  assign mux_253_nl = MUX_s_1_2_2(mux_252_nl, nor_102_nl, fsm_output[7]);
  assign COMP_LOOP_or_4_nl = (mux_253_nl & and_dcpl_65) | ((STAGE_VEC_LOOP_j_sva_9_0[0])
      & (~ (COMP_LOOP_acc_7_psp_sva[0])) & and_108_m1c);
  assign nor_97_nl = ~((~ (STAGE_VEC_LOOP_j_sva_9_0[1])) | (~ (fsm_output[4])) |
      (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[5]) | (fsm_output[1]) | (fsm_output[3]));
  assign nor_98_nl = ~((fsm_output[4]) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b10) |
      (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_254_nl = MUX_s_1_2_2(nor_97_nl, nor_98_nl, fsm_output[6]);
  assign nor_99_nl = ~((fsm_output[6]) | (~ (fsm_output[4])) | (COMP_LOOP_acc_cse_sva[0])
      | (~((COMP_LOOP_acc_cse_sva[1]) & (fsm_output[5]) & (fsm_output[1]) & (fsm_output[3]))));
  assign mux_255_nl = MUX_s_1_2_2(mux_254_nl, nor_99_nl, fsm_output[7]);
  assign COMP_LOOP_or_5_nl = (mux_255_nl & and_dcpl_65) | ((COMP_LOOP_acc_7_psp_sva[0])
      & (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) & and_108_m1c);
  assign nor_94_nl = ~((~ (STAGE_VEC_LOOP_j_sva_9_0[1])) | (~ (fsm_output[4])) |
      (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[5]) | (fsm_output[1]) | (fsm_output[3]));
  assign nor_95_nl = ~((fsm_output[4]) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b11) |
      (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_256_nl = MUX_s_1_2_2(nor_94_nl, nor_95_nl, fsm_output[6]);
  assign nor_96_nl = ~((fsm_output[6]) | (~((fsm_output[4]) & (COMP_LOOP_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[5]) & (fsm_output[1]) & (fsm_output[3]))));
  assign mux_257_nl = MUX_s_1_2_2(mux_256_nl, nor_96_nl, fsm_output[7]);
  assign COMP_LOOP_or_6_nl = (mux_257_nl & and_dcpl_65) | ((STAGE_VEC_LOOP_j_sva_9_0[0])
      & (COMP_LOOP_acc_7_psp_sva[0]) & and_108_m1c);
  assign mux_244_nl = MUX_s_1_2_2(or_tmp_263, (fsm_output[3]), fsm_output[2]);
  assign mux_243_nl = MUX_s_1_2_2((fsm_output[3]), or_tmp_263, fsm_output[2]);
  assign mux_245_nl = MUX_s_1_2_2(mux_244_nl, mux_243_nl, fsm_output[0]);
  assign mux_246_nl = MUX_s_1_2_2(mux_245_nl, or_282_cse, fsm_output[1]);
  assign nor_106_nl = ~(and_151_cse | (fsm_output[4]));
  assign mux_247_nl = MUX_s_1_2_2(mux_246_nl, nor_106_nl, fsm_output[5]);
  assign nor_107_nl = ~((or_6_cse & (fsm_output[3:2]==2'b11)) | (fsm_output[4]));
  assign mux_242_nl = MUX_s_1_2_2(nor_107_nl, or_tmp_263, fsm_output[5]);
  assign mux_248_nl = MUX_s_1_2_2((~ mux_247_nl), mux_242_nl, fsm_output[6]);
  assign nor_242_nl = ~(and_153_cse | (fsm_output[4:3]!=2'b00));
  assign or_nl = (fsm_output[0]) | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]);
  assign nand_68_nl = ~((fsm_output[0]) & (fsm_output[2]) & (fsm_output[3]) & (fsm_output[4]));
  assign mux_239_nl = MUX_s_1_2_2(or_nl, nand_68_nl, fsm_output[1]);
  assign mux_240_nl = MUX_s_1_2_2(nor_242_nl, mux_239_nl, fsm_output[5]);
  assign or_454_nl = (fsm_output[5]) | (or_413_cse & (fsm_output[4:3]==2'b11));
  assign mux_241_nl = MUX_s_1_2_2(mux_240_nl, or_454_nl, fsm_output[6]);
  assign modExp_dev_while_or_nl = and_dcpl_81 | not_tmp_136;
  assign modExp_dev_while_or_1_nl = COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2
      | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3;
  assign nand_66_nl = ~(and_dcpl_86 & and_dcpl_23);
  assign nor_255_nl = ~((fsm_output[1]) | (~ (fsm_output[0])) | (fsm_output[7]) |
      (fsm_output[6]));
  assign nor_256_nl = ~((fsm_output[1:0]!=2'b10) | nand_76_cse);
  assign mux_351_nl = MUX_s_1_2_2(nor_255_nl, nor_256_nl, fsm_output[3]);
  assign or_463_nl = (~ (fsm_output[3])) | (fsm_output[7]);
  assign mux_359_nl = MUX_s_1_2_2(mux_tmp_337, or_463_nl, fsm_output[0]);
  assign mux_360_nl = MUX_s_1_2_2(mux_359_nl, (fsm_output[7]), fsm_output[1]);
  assign or_462_nl = ((fsm_output[1]) & (fsm_output[0]) & (fsm_output[3])) | (fsm_output[7]);
  assign mux_361_nl = MUX_s_1_2_2(mux_360_nl, or_462_nl, fsm_output[2]);
  assign mux_362_nl = MUX_s_1_2_2(mux_361_nl, or_461_cse, fsm_output[6]);
  assign mux_363_nl = MUX_s_1_2_2(nand_75_cse, mux_362_nl, fsm_output[5]);
  assign and_334_nl = (fsm_output[3]) & (fsm_output[7]);
  assign or_459_nl = (fsm_output[1:0]!=2'b10);
  assign mux_356_nl = MUX_s_1_2_2(mux_tmp_337, and_334_nl, or_459_nl);
  assign mux_357_nl = MUX_s_1_2_2(mux_356_nl, (fsm_output[7]), fsm_output[2]);
  assign or_458_nl = (fsm_output[3]) | (~ (fsm_output[7]));
  assign mux_353_nl = MUX_s_1_2_2(or_458_nl, mux_tmp_337, fsm_output[0]);
  assign mux_354_nl = MUX_s_1_2_2((~ (fsm_output[7])), mux_353_nl, fsm_output[1]);
  assign mux_355_nl = MUX_s_1_2_2(mux_354_nl, mux_tmp_337, fsm_output[2]);
  assign mux_358_nl = MUX_s_1_2_2((~ mux_357_nl), mux_355_nl, fsm_output[6]);
  assign or_460_nl = (fsm_output[5]) | mux_358_nl;
  assign mux_364_nl = MUX_s_1_2_2(mux_363_nl, or_460_nl, fsm_output[4]);
  assign nand_73_nl = ~((fsm_output[4]) & (fsm_output[7]) & (fsm_output[2]));
  assign or_472_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[7]) | (fsm_output[2]);
  assign mux_368_nl = MUX_s_1_2_2(nand_73_nl, or_472_nl, fsm_output[1]);
  assign or_471_nl = (~ (fsm_output[1])) | (fsm_output[4]) | (fsm_output[7]) | (fsm_output[2]);
  assign mux_369_nl = MUX_s_1_2_2(mux_368_nl, or_471_nl, fsm_output[5]);
  assign nor_253_nl = ~((fsm_output[6]) | mux_369_nl);
  assign or_469_nl = (~ (fsm_output[4])) | (fsm_output[7]) | (~ (fsm_output[2]));
  assign mux_366_nl = MUX_s_1_2_2(or_469_nl, or_tmp_423, fsm_output[0]);
  assign or_466_nl = (~ (fsm_output[4])) | (fsm_output[7]) | (fsm_output[2]);
  assign mux_365_nl = MUX_s_1_2_2(or_tmp_423, or_466_nl, fsm_output[0]);
  assign mux_367_nl = MUX_s_1_2_2(mux_366_nl, mux_365_nl, fsm_output[1]);
  assign nor_254_nl = ~((fsm_output[6:5]!=2'b10) | mux_367_nl);
  assign mux_291_nl = MUX_s_1_2_2((fsm_output[5]), or_18_cse, fsm_output[4]);
  assign mux_294_nl = MUX_s_1_2_2(mux_tmp_23, (~ mux_291_nl), fsm_output[6]);
  assign nl_operator_64_false_acc_cse_2_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b01}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign nor_200_nl = ~((fsm_output[6:4]!=3'b000) | mux_tmp_22);
  assign mux_295_nl = MUX_s_1_2_2(or_tmp_323, nor_200_nl, fsm_output[7]);
  assign nl_operator_64_false_acc_cse_3_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b10}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign nor_88_nl = ~((fsm_output[6]) | ((fsm_output[5:2]==4'b1111)));
  assign mux_296_nl = MUX_s_1_2_2(or_tmp_323, nor_88_nl, fsm_output[7]);
  assign nl_COMP_LOOP_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b11});
  assign nand_28_nl = ~((fsm_output[6]) & ((fsm_output[5:4]!=2'b00) | nor_tmp_44));
  assign mux_297_nl = MUX_s_1_2_2(or_tmp_323, nand_28_nl, fsm_output[7]);
  assign nl_operator_64_false_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b11}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign mux_298_nl = MUX_s_1_2_2(or_tmp_210, or_282_cse, fsm_output[0]);
  assign nand_27_nl = ~((fsm_output[6:4]==3'b111) & mux_298_nl);
  assign mux_299_nl = MUX_s_1_2_2(or_tmp_323, nand_27_nl, fsm_output[7]);
  assign not_953_nl = ~ not_tmp_142;
  assign nand_70_nl = ~((fsm_output[5]) & (~ mux_tmp_356));
  assign mux_377_nl = MUX_s_1_2_2((~ or_tmp_430), or_tmp_430, fsm_output[3]);
  assign mux_378_nl = MUX_s_1_2_2(mux_tmp_356, mux_377_nl, fsm_output[1]);
  assign nand_69_nl = ~((fsm_output[5]) & (~ mux_378_nl));
  assign mux_379_nl = MUX_s_1_2_2(nand_70_nl, nand_69_nl, fsm_output[0]);
  assign or_478_nl = (fsm_output[5]) | (~((fsm_output[3]) & (fsm_output[2]) & (fsm_output[6])));
  assign mux_376_nl = MUX_s_1_2_2(or_tmp_432, or_478_nl, fsm_output[0]);
  assign mux_380_nl = MUX_s_1_2_2(mux_379_nl, mux_376_nl, fsm_output[4]);
  assign or_477_nl = (~ (fsm_output[5])) | (fsm_output[1]) | (fsm_output[3]) | (fsm_output[2])
      | (fsm_output[6]);
  assign mux_374_nl = MUX_s_1_2_2(or_477_nl, or_tmp_432, fsm_output[0]);
  assign and_332_nl = (fsm_output[2]) & (fsm_output[6]);
  assign mux_372_nl = MUX_s_1_2_2((~ (fsm_output[6])), and_332_nl, fsm_output[3]);
  assign mux_373_nl = MUX_s_1_2_2(mux_372_nl, mux_tmp_356, fsm_output[1]);
  assign or_475_nl = (fsm_output[5]) | mux_373_nl;
  assign mux_375_nl = MUX_s_1_2_2(mux_374_nl, or_475_nl, fsm_output[4]);
  assign COMP_LOOP_mux_18_nl = MUX_v_64_2_2(COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      modExp_dev_result_sva, and_dcpl_145);
  assign nor_257_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (fsm_output[6]) |
      (~ (fsm_output[4])));
  assign nor_258_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[3])) | (fsm_output[6])
      | (fsm_output[4]));
  assign mux_383_nl = MUX_s_1_2_2(nor_257_nl, nor_258_nl, fsm_output[7]);
  assign nor_259_nl = ~((fsm_output[1]) | (fsm_output[3]) | (~((fsm_output[6]) &
      (fsm_output[4]))));
  assign nor_260_nl = ~((~ (fsm_output[1])) | (fsm_output[3]) | (~ (fsm_output[6]))
      | (fsm_output[4]));
  assign mux_384_nl = MUX_s_1_2_2(nor_259_nl, nor_260_nl, fsm_output[7]);
  assign mux_382_nl = MUX_s_1_2_2(mux_383_nl, mux_384_nl, fsm_output[0]);
  assign and_335_nl = mux_382_nl & (fsm_output[5]) & (fsm_output[2]);
  assign COMP_LOOP_mux1h_51_nl = MUX1HOT_v_64_3_2(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z,
      r_sva, modExp_dev_result_sva, {and_335_nl , and_dcpl_145 , mux_344_cse});
  assign nl_z_out = COMP_LOOP_mux_18_nl * COMP_LOOP_mux1h_51_nl;
  assign z_out = nl_z_out[63:0];
  assign COMP_LOOP_mux_19_nl = MUX_v_10_2_2(({2'b00 , (STAGE_VEC_LOOP_j_sva_9_0[9:2])}),
      STAGE_VEC_LOOP_j_sva_9_0, and_dcpl_158);
  assign COMP_LOOP_mux_20_nl = MUX_v_10_2_2(({3'b000 , COMP_LOOP_k_9_2_sva_6_0}),
      STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_158);
  assign nl_z_out_1 = conv_u2u_10_11(COMP_LOOP_mux_19_nl) + conv_u2u_10_11(COMP_LOOP_mux_20_nl);
  assign z_out_1 = nl_z_out_1[10:0];
  assign operator_64_false_operator_64_false_or_3_nl = (~(and_dcpl_165 | and_dcpl_171
      | and_dcpl_177 | and_dcpl_182 | and_dcpl_191)) | mux_344_cse | and_dcpl_184
      | and_dcpl_186;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_55_4_2(({54'b111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_VEC_LOOP_j_sva_9_0[9]))}), 55'b1100000000000000000000000000000000000000000000000000000,
      (z_out_3[63:9]), (STAGE_MAIN_LOOP_div_cmp_z[63:9]), {and_dcpl_177 , and_dcpl_182
      , operator_64_false_or_5_itm , and_dcpl_184});
  assign operator_64_false_nor_8_nl = ~(and_dcpl_165 | and_dcpl_171 | and_dcpl_191);
  assign operator_64_false_operator_64_false_nand_1_nl = ~(MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
      operator_64_false_mux1h_3_nl, operator_64_false_nor_8_nl));
  assign operator_64_false_or_9_nl = and_dcpl_165 | and_dcpl_171 | and_dcpl_191;
  assign operator_64_false_mux1h_4_nl = MUX1HOT_v_9_5_2((~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      (STAGE_VEC_LOOP_j_sva_9_0[8:0]), ({2'b11 , (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:3]))}),
      (~ (z_out_3[8:0])), (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])), {operator_64_false_or_9_nl
      , and_dcpl_177 , and_dcpl_182 , operator_64_false_or_5_itm , and_dcpl_184});
  assign operator_64_false_or_10_nl = (~(and_dcpl_177 | mux_344_cse | and_dcpl_184
      | and_dcpl_186)) | and_dcpl_165 | and_dcpl_171 | and_dcpl_182 | and_dcpl_191;
  assign operator_64_false_operator_64_false_and_1_nl = (z_out_5[7]) & (~(and_dcpl_165
      | and_dcpl_171 | and_dcpl_177 | and_dcpl_182 | mux_344_cse | and_dcpl_184 |
      and_dcpl_186));
  assign operator_64_false_or_11_nl = and_dcpl_165 | and_dcpl_171 | and_dcpl_177;
  assign operator_64_false_mux1h_5_nl = MUX1HOT_v_7_3_2(COMP_LOOP_k_9_2_sva_6_0,
      ({2'b00 , (COMP_LOOP_k_9_2_sva_6_0[6:2])}), (z_out_5[6:0]), {operator_64_false_or_11_nl
      , and_dcpl_182 , and_dcpl_191});
  assign operator_64_false_nor_11_nl = ~(mux_344_cse | and_dcpl_184 | and_dcpl_186);
  assign operator_64_false_and_3_nl = MUX_v_7_2_2(7'b0000000, operator_64_false_mux1h_5_nl,
      operator_64_false_nor_11_nl);
  assign operator_64_false_operator_64_false_or_4_nl = ((COMP_LOOP_k_9_2_sva_6_0[1])
      & (~(and_dcpl_165 | and_dcpl_177 | mux_344_cse | and_dcpl_184 | and_dcpl_186
      | and_dcpl_191))) | and_dcpl_171;
  assign operator_64_false_operator_64_false_or_5_nl = ((COMP_LOOP_k_9_2_sva_6_0[0])
      & (~(and_dcpl_171 | and_dcpl_191))) | and_dcpl_165 | and_dcpl_177 | mux_344_cse
      | and_dcpl_184 | and_dcpl_186;
  assign nl_acc_1_nl = ({operator_64_false_operator_64_false_or_3_nl , operator_64_false_operator_64_false_nand_1_nl
      , operator_64_false_mux1h_4_nl , operator_64_false_or_10_nl}) + conv_u2u_11_66({operator_64_false_operator_64_false_and_1_nl
      , operator_64_false_and_3_nl , operator_64_false_operator_64_false_or_4_nl
      , operator_64_false_operator_64_false_or_5_nl , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[65:0];
  assign z_out_2 = readslicef_66_65_1(acc_1_nl);
  assign operator_64_false_or_9_nl_1 = and_dcpl_201 | not_tmp_255 | and_dcpl_209
      | and_dcpl_213 | and_dcpl_219;
  assign operator_64_false_and_16_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b00) & and_dcpl_205;
  assign operator_64_false_and_17_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b10) & and_dcpl_205;
  assign operator_64_false_and_18_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b01) & and_dcpl_205;
  assign operator_64_false_and_19_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b11) & and_dcpl_205;
  assign operator_64_false_mux1h_3_nl_1 = MUX1HOT_v_64_7_2(p_sva, tmp_2_lpi_4_dfm,
      ({modExp_dev_exp_1_sva_63_9 , COMP_LOOP_acc_psp_sva_6_0 , modExp_dev_exp_1_sva_1_0}),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_1_i_qa_d, vec_rsc_0_3_i_qa_d,
      {and_dcpl_198 , operator_64_false_or_9_nl_1 , mux_344_cse , operator_64_false_and_16_nl
      , operator_64_false_and_17_nl , operator_64_false_and_18_nl , operator_64_false_and_19_nl});
  assign operator_64_false_or_10_nl_1 = (~(and_dcpl_198 | and_dcpl_201 | mux_344_cse
      | and_dcpl_205 | and_dcpl_209 | and_dcpl_213 | and_dcpl_219)) | not_tmp_255;
  assign operator_64_false_or_12_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b00)
      & and_dcpl_209) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b00) & and_dcpl_213)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b00) & and_dcpl_219);
  assign operator_64_false_or_13_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b10)
      & and_dcpl_209) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b10) & and_dcpl_213)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b10) & and_dcpl_219);
  assign operator_64_false_or_14_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b01)
      & and_dcpl_209) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b01) & and_dcpl_213)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b01) & and_dcpl_219);
  assign operator_64_false_or_15_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b11)
      & and_dcpl_209) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b11) & and_dcpl_213)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b11) & and_dcpl_219);
  assign operator_64_false_mux1h_4_nl_1 = MUX1HOT_v_64_6_2(tmp_1_lpi_4_dfm, (~ tmp_1_lpi_4_dfm),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_1_i_qa_d, vec_rsc_0_3_i_qa_d,
      {and_dcpl_205 , not_tmp_255 , operator_64_false_or_12_nl , operator_64_false_or_13_nl
      , operator_64_false_or_14_nl , operator_64_false_or_15_nl});
  assign operator_64_false_or_16_nl = and_dcpl_198 | and_dcpl_201 | mux_344_cse;
  assign operator_64_false_or_11_nl_1 = MUX_v_64_2_2(operator_64_false_mux1h_4_nl_1,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_16_nl);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl_1 , operator_64_false_or_10_nl_1})
      + ({operator_64_false_or_11_nl_1 , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_3 = readslicef_65_64_1(acc_2_nl);
  assign COMP_LOOP_COMP_LOOP_or_2_nl = (~ and_dcpl_226) | and_dcpl_230 | and_dcpl_237
      | and_dcpl_239;
  assign COMP_LOOP_mux_21_nl = MUX_v_9_2_2((STAGE_VEC_LOOP_j_sva_9_0[9:1]), (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      and_dcpl_239);
  assign COMP_LOOP_COMP_LOOP_or_3_nl = MUX_v_9_2_2(COMP_LOOP_mux_21_nl, 9'b111111111,
      COMP_LOOP_or_9_itm);
  assign COMP_LOOP_nor_2_nl = ~(and_dcpl_230 | and_dcpl_237 | and_dcpl_239);
  assign COMP_LOOP_COMP_LOOP_and_2_nl = MUX_v_4_2_2(4'b0000, (COMP_LOOP_k_9_2_sva_6_0[6:3]),
      COMP_LOOP_nor_2_nl);
  assign COMP_LOOP_mux1h_52_nl = MUX1HOT_v_4_3_2(({(COMP_LOOP_k_9_2_sva_6_0[2:0])
      , 1'b1}), STAGE_MAIN_LOOP_acc_1_psp_sva, 4'b0001, {and_dcpl_226 , COMP_LOOP_or_9_itm
      , and_dcpl_239});
  assign nl_COMP_LOOP_acc_9_sdt = conv_s2u_10_11({COMP_LOOP_COMP_LOOP_or_2_nl , COMP_LOOP_COMP_LOOP_or_3_nl})
      + conv_u2u_8_11({COMP_LOOP_COMP_LOOP_and_2_nl , COMP_LOOP_mux1h_52_nl});
  assign COMP_LOOP_acc_9_sdt = nl_COMP_LOOP_acc_9_sdt[10:0];
  assign operator_64_false_1_mux_1_nl = MUX_v_7_2_2((~ COMP_LOOP_k_9_2_sva_6_0),
      COMP_LOOP_k_9_2_sva_6_0, and_324_ssc);
  assign nl_z_out_5 = ({(~ and_324_ssc) , operator_64_false_1_mux_1_nl}) + 8'b00000001;
  assign z_out_5 = nl_z_out_5[7:0];

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [54:0] MUX1HOT_v_55_4_2;
    input [54:0] input_3;
    input [54:0] input_2;
    input [54:0] input_1;
    input [54:0] input_0;
    input [3:0] sel;
    reg [54:0] result;
  begin
    result = input_0 & {55{sel[0]}};
    result = result | ( input_1 & {55{sel[1]}});
    result = result | ( input_2 & {55{sel[2]}});
    result = result | ( input_3 & {55{sel[3]}});
    MUX1HOT_v_55_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_6_2;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [5:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    MUX1HOT_v_64_6_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_7_2;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [6:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    MUX1HOT_v_64_7_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_9_2;
    input [7:0] input_8;
    input [7:0] input_7;
    input [7:0] input_6;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [8:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    result = result | ( input_5 & {8{sel[5]}});
    result = result | ( input_6 & {8{sel[6]}});
    result = result | ( input_7 & {8{sel[7]}});
    result = result | ( input_8 & {8{sel[8]}});
    MUX1HOT_v_8_9_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [64:0] readslicef_66_65_1;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_66_65_1 = tmp[64:0];
  end
  endfunction


  function automatic [10:0] conv_s2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_s2u_10_11 = {vector[9], vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_8_11 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_11 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [65:0] conv_u2u_11_66 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_66 = {{55{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_adra, vec_rsc_0_0_da, vec_rsc_0_0_wea, vec_rsc_0_0_qa, vec_rsc_triosy_0_0_lz,
      vec_rsc_0_1_adra, vec_rsc_0_1_da, vec_rsc_0_1_wea, vec_rsc_0_1_qa, vec_rsc_triosy_0_1_lz,
      vec_rsc_0_2_adra, vec_rsc_0_2_da, vec_rsc_0_2_wea, vec_rsc_0_2_qa, vec_rsc_triosy_0_2_lz,
      vec_rsc_0_3_adra, vec_rsc_0_3_da, vec_rsc_0_3_wea, vec_rsc_0_3_qa, vec_rsc_triosy_0_3_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [7:0] vec_rsc_0_0_adra;
  output [63:0] vec_rsc_0_0_da;
  output vec_rsc_0_0_wea;
  input [63:0] vec_rsc_0_0_qa;
  output vec_rsc_triosy_0_0_lz;
  output [7:0] vec_rsc_0_1_adra;
  output [63:0] vec_rsc_0_1_da;
  output vec_rsc_0_1_wea;
  input [63:0] vec_rsc_0_1_qa;
  output vec_rsc_triosy_0_1_lz;
  output [7:0] vec_rsc_0_2_adra;
  output [63:0] vec_rsc_0_2_da;
  output vec_rsc_0_2_wea;
  input [63:0] vec_rsc_0_2_qa;
  output vec_rsc_triosy_0_2_lz;
  output [7:0] vec_rsc_0_3_adra;
  output [63:0] vec_rsc_0_3_da;
  output vec_rsc_0_3_wea;
  input [63:0] vec_rsc_0_3_qa;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_qa_d;
  wire vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_qa_d;
  wire vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_qa_d;
  wire vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_qa_d;
  wire vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [7:0] vec_rsc_0_0_i_adra_d_iff;
  wire [63:0] vec_rsc_0_0_i_da_d_iff;
  wire vec_rsc_0_0_i_wea_d_iff;
  wire vec_rsc_0_1_i_wea_d_iff;
  wire vec_rsc_0_2_i_wea_d_iff;
  wire vec_rsc_0_3_i_wea_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen vec_rsc_0_0_i
      (
      .qa(vec_rsc_0_0_qa),
      .wea(vec_rsc_0_0_wea),
      .da(vec_rsc_0_0_da),
      .adra(vec_rsc_0_0_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_0_i_qa_d),
      .wea_d(vec_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen vec_rsc_0_1_i
      (
      .qa(vec_rsc_0_1_qa),
      .wea(vec_rsc_0_1_wea),
      .da(vec_rsc_0_1_da),
      .adra(vec_rsc_0_1_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_1_i_qa_d),
      .wea_d(vec_rsc_0_1_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
      vec_rsc_0_2_i (
      .qa(vec_rsc_0_2_qa),
      .wea(vec_rsc_0_2_wea),
      .da(vec_rsc_0_2_da),
      .adra(vec_rsc_0_2_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_2_i_qa_d),
      .wea_d(vec_rsc_0_2_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
      vec_rsc_0_3_i (
      .qa(vec_rsc_0_3_qa),
      .wea(vec_rsc_0_3_wea),
      .da(vec_rsc_0_3_da),
      .adra(vec_rsc_0_3_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_3_i_qa_d),
      .wea_d(vec_rsc_0_3_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_wea_d_iff)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_qa_d(vec_rsc_0_0_i_qa_d),
      .vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_qa_d(vec_rsc_0_1_i_qa_d),
      .vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_qa_d(vec_rsc_0_2_i_qa_d),
      .vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_qa_d(vec_rsc_0_3_i_qa_d),
      .vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_adra_d_pff(vec_rsc_0_0_i_adra_d_iff),
      .vec_rsc_0_0_i_da_d_pff(vec_rsc_0_0_i_da_d_iff),
      .vec_rsc_0_0_i_wea_d_pff(vec_rsc_0_0_i_wea_d_iff),
      .vec_rsc_0_1_i_wea_d_pff(vec_rsc_0_1_i_wea_d_iff),
      .vec_rsc_0_2_i_wea_d_pff(vec_rsc_0_2_i_wea_d_iff),
      .vec_rsc_0_3_i_wea_d_pff(vec_rsc_0_3_i_wea_d_iff)
    );
endmodule



