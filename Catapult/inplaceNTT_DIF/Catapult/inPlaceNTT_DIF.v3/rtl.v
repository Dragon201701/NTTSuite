// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 20 15:24:49 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [7:0] adra;
  input [7:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_3_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, COMP_LOOP_1_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_45_tr0,
      COMP_LOOP_2_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_90_tr0, STAGE_VEC_LOOP_C_1_tr0,
      STAGE_MAIN_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_MAIN_LOOP_C_3_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_45_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_90_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_MAIN_LOOP_C_0 = 8'd1,
    STAGE_MAIN_LOOP_C_1 = 8'd2,
    STAGE_MAIN_LOOP_C_2 = 8'd3,
    STAGE_MAIN_LOOP_C_3 = 8'd4,
    modExp_dev_while_C_0 = 8'd5,
    modExp_dev_while_C_1 = 8'd6,
    modExp_dev_while_C_2 = 8'd7,
    modExp_dev_while_C_3 = 8'd8,
    modExp_dev_while_C_4 = 8'd9,
    modExp_dev_while_C_5 = 8'd10,
    modExp_dev_while_C_6 = 8'd11,
    modExp_dev_while_C_7 = 8'd12,
    modExp_dev_while_C_8 = 8'd13,
    modExp_dev_while_C_9 = 8'd14,
    modExp_dev_while_C_10 = 8'd15,
    modExp_dev_while_C_11 = 8'd16,
    STAGE_VEC_LOOP_C_0 = 8'd17,
    COMP_LOOP_C_0 = 8'd18,
    COMP_LOOP_C_1 = 8'd19,
    COMP_LOOP_C_2 = 8'd20,
    COMP_LOOP_C_3 = 8'd21,
    COMP_LOOP_C_4 = 8'd22,
    COMP_LOOP_C_5 = 8'd23,
    COMP_LOOP_C_6 = 8'd24,
    COMP_LOOP_C_7 = 8'd25,
    COMP_LOOP_C_8 = 8'd26,
    COMP_LOOP_C_9 = 8'd27,
    COMP_LOOP_C_10 = 8'd28,
    COMP_LOOP_C_11 = 8'd29,
    COMP_LOOP_C_12 = 8'd30,
    COMP_LOOP_C_13 = 8'd31,
    COMP_LOOP_C_14 = 8'd32,
    COMP_LOOP_C_15 = 8'd33,
    COMP_LOOP_C_16 = 8'd34,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd36,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd37,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd38,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd39,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd40,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd41,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd42,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd43,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd44,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd45,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd46,
    COMP_LOOP_C_17 = 8'd47,
    COMP_LOOP_C_18 = 8'd48,
    COMP_LOOP_C_19 = 8'd49,
    COMP_LOOP_C_20 = 8'd50,
    COMP_LOOP_C_21 = 8'd51,
    COMP_LOOP_C_22 = 8'd52,
    COMP_LOOP_C_23 = 8'd53,
    COMP_LOOP_C_24 = 8'd54,
    COMP_LOOP_C_25 = 8'd55,
    COMP_LOOP_C_26 = 8'd56,
    COMP_LOOP_C_27 = 8'd57,
    COMP_LOOP_C_28 = 8'd58,
    COMP_LOOP_C_29 = 8'd59,
    COMP_LOOP_C_30 = 8'd60,
    COMP_LOOP_C_31 = 8'd61,
    COMP_LOOP_C_32 = 8'd62,
    COMP_LOOP_C_33 = 8'd63,
    COMP_LOOP_C_34 = 8'd64,
    COMP_LOOP_C_35 = 8'd65,
    COMP_LOOP_C_36 = 8'd66,
    COMP_LOOP_C_37 = 8'd67,
    COMP_LOOP_C_38 = 8'd68,
    COMP_LOOP_C_39 = 8'd69,
    COMP_LOOP_C_40 = 8'd70,
    COMP_LOOP_C_41 = 8'd71,
    COMP_LOOP_C_42 = 8'd72,
    COMP_LOOP_C_43 = 8'd73,
    COMP_LOOP_C_44 = 8'd74,
    COMP_LOOP_C_45 = 8'd75,
    COMP_LOOP_C_46 = 8'd76,
    COMP_LOOP_C_47 = 8'd77,
    COMP_LOOP_C_48 = 8'd78,
    COMP_LOOP_C_49 = 8'd79,
    COMP_LOOP_C_50 = 8'd80,
    COMP_LOOP_C_51 = 8'd81,
    COMP_LOOP_C_52 = 8'd82,
    COMP_LOOP_C_53 = 8'd83,
    COMP_LOOP_C_54 = 8'd84,
    COMP_LOOP_C_55 = 8'd85,
    COMP_LOOP_C_56 = 8'd86,
    COMP_LOOP_C_57 = 8'd87,
    COMP_LOOP_C_58 = 8'd88,
    COMP_LOOP_C_59 = 8'd89,
    COMP_LOOP_C_60 = 8'd90,
    COMP_LOOP_C_61 = 8'd91,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd92,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd93,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd94,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd95,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd96,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd97,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd98,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd99,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd100,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd101,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd102,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd103,
    COMP_LOOP_C_62 = 8'd104,
    COMP_LOOP_C_63 = 8'd105,
    COMP_LOOP_C_64 = 8'd106,
    COMP_LOOP_C_65 = 8'd107,
    COMP_LOOP_C_66 = 8'd108,
    COMP_LOOP_C_67 = 8'd109,
    COMP_LOOP_C_68 = 8'd110,
    COMP_LOOP_C_69 = 8'd111,
    COMP_LOOP_C_70 = 8'd112,
    COMP_LOOP_C_71 = 8'd113,
    COMP_LOOP_C_72 = 8'd114,
    COMP_LOOP_C_73 = 8'd115,
    COMP_LOOP_C_74 = 8'd116,
    COMP_LOOP_C_75 = 8'd117,
    COMP_LOOP_C_76 = 8'd118,
    COMP_LOOP_C_77 = 8'd119,
    COMP_LOOP_C_78 = 8'd120,
    COMP_LOOP_C_79 = 8'd121,
    COMP_LOOP_C_80 = 8'd122,
    COMP_LOOP_C_81 = 8'd123,
    COMP_LOOP_C_82 = 8'd124,
    COMP_LOOP_C_83 = 8'd125,
    COMP_LOOP_C_84 = 8'd126,
    COMP_LOOP_C_85 = 8'd127,
    COMP_LOOP_C_86 = 8'd128,
    COMP_LOOP_C_87 = 8'd129,
    COMP_LOOP_C_88 = 8'd130,
    COMP_LOOP_C_89 = 8'd131,
    COMP_LOOP_C_90 = 8'd132,
    STAGE_VEC_LOOP_C_1 = 8'd133,
    STAGE_MAIN_LOOP_C_4 = 8'd134,
    main_C_1 = 8'd135;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        if ( STAGE_MAIN_LOOP_C_3_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010000;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 8'b00010001;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00100010;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00101110;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01001011;
        if ( COMP_LOOP_C_45_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_46;
        end
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01100111;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_62;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b10000011;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b10000100;
        if ( COMP_LOOP_C_90_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 8'b10000101;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_4;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 8'b10000110;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000111;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsc_0_0_i_qa_d, vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_qa_d,
      vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_qa_d, vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_0_i_adra_d_pff,
      vec_rsc_0_0_i_da_d_pff, vec_rsc_0_0_i_wea_d_pff, vec_rsc_0_1_i_wea_d_pff, vec_rsc_0_2_i_wea_d_pff,
      vec_rsc_0_3_i_wea_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_qa_d;
  output vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_qa_d;
  output vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_qa_d;
  output vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_qa_d;
  output vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  output [7:0] vec_rsc_0_0_i_adra_d_pff;
  output [63:0] vec_rsc_0_0_i_da_d_pff;
  output vec_rsc_0_0_i_wea_d_pff;
  output vec_rsc_0_1_i_wea_d_pff;
  output vec_rsc_0_2_i_wea_d_pff;
  output vec_rsc_0_3_i_wea_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [7:0] fsm_output;
  wire [9:0] COMP_LOOP_1_operator_64_false_acc_tmp;
  wire [11:0] nl_COMP_LOOP_1_operator_64_false_acc_tmp;
  wire or_tmp_2;
  wire and_dcpl_1;
  wire not_tmp_17;
  wire mux_tmp_20;
  wire mux_tmp_37;
  wire and_dcpl_11;
  wire and_dcpl_13;
  wire and_dcpl_16;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_28;
  wire and_dcpl_32;
  wire nor_tmp_10;
  wire and_dcpl_50;
  wire and_dcpl_51;
  wire and_dcpl_58;
  wire and_dcpl_59;
  wire or_tmp_130;
  wire nor_tmp_23;
  wire and_dcpl_63;
  wire and_dcpl_65;
  wire and_dcpl_67;
  wire and_dcpl_68;
  wire and_dcpl_69;
  wire and_dcpl_70;
  wire or_tmp_145;
  wire and_dcpl_72;
  wire and_dcpl_75;
  wire and_dcpl_81;
  wire or_tmp_164;
  wire and_dcpl_91;
  wire and_dcpl_94;
  wire and_dcpl_96;
  wire and_dcpl_107;
  wire and_dcpl_116;
  wire or_dcpl_15;
  wire and_dcpl_120;
  wire or_tmp_190;
  wire and_dcpl_125;
  reg exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  reg operator_64_false_1_slc_operator_64_false_1_acc_8_itm;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  reg [7:0] COMP_LOOP_k_9_1_sva_7_0;
  reg [9:0] operator_64_false_acc_cse_sva;
  wire [11:0] nl_operator_64_false_acc_cse_sva;
  reg [8:0] COMP_LOOP_acc_psp_sva;
  reg [9:0] COMP_LOOP_acc_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_cse_sva;
  reg [9:0] operator_64_false_acc_cse_1_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  wire mux_58_cse;
  wire or_52_cse;
  reg reg_vec_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire and_cse;
  wire or_10_cse;
  wire nor_90_cse;
  wire nand_19_cse;
  wire nor_61_cse;
  wire or_215_cse;
  wire mux_95_rmff;
  reg [63:0] tmp_1_lpi_4_dfm;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] COMP_LOOP_1_modExp_dev_1_while_mul_mut;
  reg [63:0] p_sva;
  wire and_dcpl_141;
  wire [63:0] z_out;
  wire [127:0] nl_z_out;
  wire and_dcpl_155;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  wire and_dcpl_159;
  wire and_dcpl_160;
  wire and_dcpl_162;
  wire and_dcpl_165;
  wire and_dcpl_166;
  wire and_dcpl_168;
  wire and_dcpl_169;
  wire and_dcpl_174;
  wire and_dcpl_177;
  wire and_dcpl_178;
  wire and_dcpl_180;
  wire and_dcpl_181;
  wire and_dcpl_182;
  wire and_dcpl_186;
  wire and_dcpl_188;
  wire and_dcpl_189;
  wire and_dcpl_193;
  wire and_dcpl_196;
  wire and_dcpl_202;
  wire and_dcpl_206;
  wire and_dcpl_209;
  wire [63:0] z_out_3;
  wire and_dcpl_222;
  wire [8:0] z_out_4;
  wire [9:0] nl_z_out_4;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [7:0] modExp_dev_exp_1_sva_8_1;
  reg modExp_dev_exp_1_sva_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c1;
  wire exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c3;
  wire tmp_1_lpi_4_dfm_mx0c0;
  wire tmp_1_lpi_4_dfm_mx0c1;
  wire tmp_1_lpi_4_dfm_mx0c2;
  wire tmp_1_lpi_4_dfm_mx0c3;
  wire and_90_rgt;
  wire nor_126_cse;
  wire or_217_cse;
  wire and_147_cse;
  wire and_255_cse;
  wire mux_172_cse;
  wire mux_171_cse;
  wire mux_173_cse;
  wire operator_64_false_operator_64_false_or_1_cse;
  wire [60:0] z_out_2_64_4;
  wire COMP_LOOP_nor_1_cse;

  wire[0:0] or_54_nl;
  wire[0:0] or_53_nl;
  wire[0:0] mux_94_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] and_143_nl;
  wire[0:0] or_125_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] and_144_nl;
  wire[0:0] or_123_nl;
  wire[0:0] and_145_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] nand_nl;
  wire[0:0] or_122_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] nand_13_nl;
  wire[0:0] or_119_nl;
  wire[0:0] nor_62_nl;
  wire[0:0] nor_102_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] or_227_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] or_142_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] and_138_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] or_228_nl;
  wire[0:0] or_229_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] operator_64_false_or_2_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] nor_45_nl;
  wire[0:0] and_91_nl;
  wire[0:0] COMP_LOOP_or_2_nl;
  wire[0:0] COMP_LOOP_or_3_nl;
  wire[0:0] COMP_LOOP_or_4_nl;
  wire[0:0] COMP_LOOP_or_5_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] nor_43_nl;
  wire[0:0] and_136_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] or_174_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] nand_4_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] nand_26_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] nor_141_nl;
  wire[0:0] nor_142_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_26_nl;
  wire[0:0] mux_23_nl;
  wire[0:0] mux_22_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] or_18_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] COMP_LOOP_mux_19_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] nand_8_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] and_133_nl;
  wire[0:0] not_467_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] nand_27_nl;
  wire[0:0] or_258_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] or_15_nl;
  wire[0:0] or_14_nl;
  wire[0:0] nor_84_nl;
  wire[0:0] or_32_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] or_26_nl;
  wire[0:0] or_21_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] or_146_nl;
  wire[0:0] or_145_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] nor_47_nl;
  wire[0:0] nor_92_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] nor_114_nl;
  wire[0:0] nor_115_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] nand_6_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] or_210_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] nor_39_nl;
  wire[0:0] nor_40_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] nor_37_nl;
  wire[0:0] nor_38_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] nor_35_nl;
  wire[0:0] nor_36_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] and_134_nl;
  wire[0:0] nor_34_nl;
  wire[0:0] and_17_nl;
  wire[0:0] nor_113_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] or_234_nl;
  wire[0:0] or_235_nl;
  wire[0:0] and_27_nl;
  wire[0:0] and_31_nl;
  wire[0:0] and_33_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] nor_79_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] or_225_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] or_46_nl;
  wire[0:0] or_45_nl;
  wire[0:0] or_226_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] or_42_nl;
  wire[0:0] or_41_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] nor_75_nl;
  wire[0:0] nor_76_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] or_55_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] or_50_nl;
  wire[0:0] or_49_nl;
  wire[0:0] or_48_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] or_223_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] or_66_nl;
  wire[0:0] or_65_nl;
  wire[0:0] or_224_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] or_62_nl;
  wire[0:0] or_61_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] nor_71_nl;
  wire[0:0] nor_72_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] or_75_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] or_70_nl;
  wire[0:0] or_69_nl;
  wire[0:0] or_68_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] or_221_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_86_nl;
  wire[0:0] or_85_nl;
  wire[0:0] or_222_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] or_82_nl;
  wire[0:0] or_81_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] nor_67_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] or_93_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] or_92_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] nor_13_nl;
  wire[0:0] nor_12_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] or_219_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] or_104_nl;
  wire[0:0] or_103_nl;
  wire[0:0] or_220_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] or_100_nl;
  wire[0:0] or_99_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] and_155_nl;
  wire[0:0] nor_64_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] or_111_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] or_110_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] and_148_nl;
  wire[0:0] and_149_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] or_249_nl;
  wire[0:0] or_250_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] and_250_nl;
  wire[0:0] nor_117_nl;
  wire[63:0] COMP_LOOP_mux_20_nl;
  wire[63:0] COMP_LOOP_mux1h_35_nl;
  wire[0:0] and_257_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] or_262_nl;
  wire[0:0] or_263_nl;
  wire[9:0] COMP_LOOP_mux_21_nl;
  wire[9:0] COMP_LOOP_mux_22_nl;
  wire[65:0] acc_1_nl;
  wire[66:0] nl_acc_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_58_nl;
  wire[54:0] operator_64_false_or_6_nl;
  wire[54:0] operator_64_false_operator_64_false_nor_1_nl;
  wire[54:0] operator_64_false_operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_or_7_nl;
  wire[8:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_or_8_nl;
  wire[0:0] operator_64_false_or_9_nl;
  wire[0:0] operator_64_false_or_10_nl;
  wire[0:0] operator_64_false_operator_64_false_or_59_nl;
  wire[7:0] operator_64_false_operator_64_false_or_60_nl;
  wire[7:0] operator_64_false_and_4_nl;
  wire[7:0] operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_nor_61_nl;
  wire[0:0] operator_64_false_operator_64_false_or_61_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl_1;
  wire[0:0] operator_64_false_or_5_nl;
  wire[0:0] operator_64_false_and_8_nl;
  wire[0:0] operator_64_false_and_9_nl;
  wire[0:0] operator_64_false_and_10_nl;
  wire[0:0] operator_64_false_and_11_nl;
  wire[0:0] operator_64_false_or_6_nl_1;
  wire[63:0] operator_64_false_or_7_nl_1;
  wire[63:0] operator_64_false_mux1h_4_nl;
  wire[0:0] operator_64_false_and_12_nl;
  wire[0:0] operator_64_false_and_13_nl;
  wire[0:0] operator_64_false_and_14_nl;
  wire[0:0] operator_64_false_and_15_nl;
  wire[0:0] operator_64_false_or_8_nl_1;
  wire[7:0] STAGE_MAIN_LOOP_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_58_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] nor_56_nl;
  wire[0:0] nor_57_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign nor_56_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[6])) | (fsm_output[3]));
  assign nor_57_nl = ~((fsm_output[1]) | (fsm_output[6]) | (~ (fsm_output[3])));
  assign mux_97_nl = MUX_s_1_2_2(nor_56_nl, nor_57_nl, fsm_output[0]);
  assign and_58_nl = mux_97_nl & (fsm_output[2]) & (fsm_output[5]) & and_dcpl_11;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      and_58_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_102_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] or_230_nl;
  wire[0:0] or_231_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] nand_24_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] and_141_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] nor_55_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign or_230_nl = (fsm_output[4]) | (~ (fsm_output[3])) | (~ (fsm_output[6]))
      | (fsm_output[1]) | (~ (fsm_output[5]));
  assign mux_100_nl = MUX_s_1_2_2(or_tmp_130, (~ nor_tmp_23), fsm_output[6]);
  assign or_231_nl = (fsm_output[4:3]!=2'b10) | mux_100_nl;
  assign mux_101_nl = MUX_s_1_2_2(or_230_nl, or_231_nl, fsm_output[2]);
  assign mux_98_nl = MUX_s_1_2_2(nor_tmp_23, (~ or_tmp_130), fsm_output[6]);
  assign and_141_nl = (fsm_output[3]) & mux_98_nl;
  assign nor_55_nl = ~((~ (fsm_output[3])) | (fsm_output[6]) | (fsm_output[1]) |
      (~ (fsm_output[5])));
  assign mux_99_nl = MUX_s_1_2_2(and_141_nl, nor_55_nl, fsm_output[4]);
  assign nand_24_nl = ~((fsm_output[2]) & mux_99_nl);
  assign mux_102_nl = MUX_s_1_2_2(mux_101_nl, nand_24_nl, fsm_output[0]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = ~(mux_102_nl | (fsm_output[7]));
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_4[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0 = ~ (z_out_2_64_4[60]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (z_out_2_64_4[59]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0 = ~ exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out_1[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = z_out_2_64_4[0];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  COMP_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse),
      .z(modExp_dev_while_rem_cmp_z)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(mux_95_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_3_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_1_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_45_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_90_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0])
    );
  assign or_54_nl = (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_53_nl = (fsm_output[4]) | (~ (fsm_output[6]));
  assign mux_58_cse = MUX_s_1_2_2(or_54_nl, or_53_nl, fsm_output[3]);
  assign or_52_cse = (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6]));
  assign and_147_cse = (fsm_output[1:0]==2'b11);
  assign and_143_nl = (fsm_output[4:3]==2'b11);
  assign or_125_nl = (~((fsm_output[3]) | (fsm_output[0]) | (fsm_output[1]))) | (fsm_output[4]);
  assign mux_92_nl = MUX_s_1_2_2(and_143_nl, or_125_nl, fsm_output[5]);
  assign and_144_nl = (fsm_output[1]) & (fsm_output[4]);
  assign or_123_nl = (fsm_output[1]) | (fsm_output[4]);
  assign mux_90_nl = MUX_s_1_2_2(and_144_nl, or_123_nl, fsm_output[0]);
  assign and_145_nl = (fsm_output[5]) & (fsm_output[3]);
  assign mux_91_nl = MUX_s_1_2_2((fsm_output[4]), mux_90_nl, and_145_nl);
  assign mux_93_nl = MUX_s_1_2_2(mux_92_nl, mux_91_nl, fsm_output[2]);
  assign nand_nl = ~((fsm_output[3]) & (fsm_output[1]));
  assign or_122_nl = (fsm_output[4:3]!=2'b00);
  assign mux_88_nl = MUX_s_1_2_2(nand_nl, or_122_nl, fsm_output[5]);
  assign nand_13_nl = ~((fsm_output[3]) & (nor_61_cse | (fsm_output[4])));
  assign or_119_nl = (fsm_output[3]) | (((fsm_output[1:0]!=2'b01)) & (fsm_output[4]));
  assign mux_87_nl = MUX_s_1_2_2(nand_13_nl, or_119_nl, fsm_output[5]);
  assign mux_89_nl = MUX_s_1_2_2(mux_88_nl, mux_87_nl, fsm_output[2]);
  assign mux_94_nl = MUX_s_1_2_2(mux_93_nl, mux_89_nl, fsm_output[6]);
  assign nor_62_nl = ~((fsm_output[6]) | (fsm_output[2]) | (fsm_output[5]) | (fsm_output[3])
      | and_147_cse | (fsm_output[4]));
  assign mux_95_rmff = MUX_s_1_2_2(mux_94_nl, nor_62_nl, fsm_output[7]);
  assign or_217_cse = (fsm_output[1:0]!=2'b00);
  assign and_90_rgt = and_dcpl_69 & and_dcpl_13;
  assign and_cse = (fsm_output[2:1]==2'b11);
  assign COMP_LOOP_nor_1_cse = ~((STAGE_VEC_LOOP_j_sva_9_0[0]) | (COMP_LOOP_acc_psp_sva[0]));
  assign or_10_cse = (fsm_output[2:1]!=2'b00);
  assign or_215_cse = (fsm_output[2]) | (fsm_output[6]);
  assign and_255_cse = (fsm_output[6]) & (fsm_output[3]);
  assign mux_172_cse = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[6]);
  assign mux_171_cse = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), or_215_cse);
  assign mux_173_cse = MUX_s_1_2_2(mux_172_cse, and_255_cse, fsm_output[2]);
  assign nor_90_cse = ~((fsm_output[5]) | (fsm_output[0]));
  assign nor_61_cse = ~((fsm_output[1:0]!=2'b00));
  assign nl_COMP_LOOP_1_operator_64_false_acc_tmp = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b0}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign COMP_LOOP_1_operator_64_false_acc_tmp = nl_COMP_LOOP_1_operator_64_false_acc_tmp[9:0];
  assign or_tmp_2 = and_cse | (fsm_output[3]) | (fsm_output[6]);
  assign and_dcpl_1 = (fsm_output[2:1]==2'b01);
  assign not_tmp_17 = ~((fsm_output[3]) | (fsm_output[6]));
  assign or_15_nl = (fsm_output[5]) | (fsm_output[2]) | (fsm_output[3]) | (fsm_output[6]);
  assign or_14_nl = (fsm_output[5]) | (fsm_output[1]) | (fsm_output[2]) | (fsm_output[3])
      | (fsm_output[6]);
  assign mux_tmp_20 = MUX_s_1_2_2(or_15_nl, or_14_nl, fsm_output[0]);
  assign nor_84_nl = ~((fsm_output[6:0]!=7'b0000000));
  assign or_26_nl = (fsm_output[5]) | (fsm_output[3]) | (fsm_output[6]);
  assign or_21_nl = (fsm_output[5]) | or_tmp_2;
  assign mux_51_nl = MUX_s_1_2_2(or_26_nl, or_21_nl, fsm_output[0]);
  assign or_32_nl = (fsm_output[4]) | mux_51_nl;
  assign mux_tmp_37 = MUX_s_1_2_2(nor_84_nl, or_32_nl, fsm_output[7]);
  assign and_dcpl_11 = (fsm_output[4]) & (~ (fsm_output[7]));
  assign and_dcpl_13 = nor_90_cse & and_dcpl_11;
  assign and_dcpl_16 = not_tmp_17 & and_dcpl_1;
  assign and_dcpl_23 = ~((fsm_output[4]) | (fsm_output[7]));
  assign and_dcpl_24 = nor_90_cse & and_dcpl_23;
  assign and_dcpl_28 = ~((fsm_output[5]) | (fsm_output[7]));
  assign and_dcpl_32 = ~((fsm_output[5:4]!=2'b00));
  assign nor_tmp_10 = (fsm_output[2]) & (fsm_output[6]) & (fsm_output[3]);
  assign nand_19_cse = ~((fsm_output[3]) & (fsm_output[6]) & (fsm_output[1]) & (~
      (fsm_output[5])));
  assign and_dcpl_50 = not_tmp_17 & (fsm_output[2:1]==2'b10);
  assign and_dcpl_51 = and_dcpl_50 & and_dcpl_13;
  assign and_dcpl_58 = (~ (fsm_output[5])) & (fsm_output[0]);
  assign and_dcpl_59 = and_dcpl_58 & and_dcpl_23;
  assign or_tmp_130 = (fsm_output[1]) | (fsm_output[5]);
  assign nor_tmp_23 = (fsm_output[1]) & (fsm_output[5]);
  assign and_dcpl_63 = and_dcpl_50 & and_dcpl_59;
  assign or_146_nl = (~ (fsm_output[0])) | (~ (fsm_output[5])) | (~ (fsm_output[1]))
      | (fsm_output[2]) | (fsm_output[6]) | (fsm_output[3]);
  assign or_145_nl = (fsm_output[0]) | (fsm_output[5]) | (fsm_output[1]) | (~ nor_tmp_10);
  assign mux_107_nl = MUX_s_1_2_2(or_146_nl, or_145_nl, fsm_output[4]);
  assign and_dcpl_65 = ~(mux_107_nl | (fsm_output[7]));
  assign and_dcpl_67 = and_dcpl_16 & and_dcpl_32 & (~ (fsm_output[7]));
  assign and_dcpl_68 = ~((fsm_output[2:1]!=2'b00));
  assign and_dcpl_69 = not_tmp_17 & and_dcpl_68;
  assign and_dcpl_70 = and_dcpl_69 & and_dcpl_59;
  assign or_tmp_145 = (fsm_output[5:4]!=2'b00) | or_tmp_2;
  assign nor_47_nl = ~((fsm_output[0]) | (~ (fsm_output[5])) | (fsm_output[6]) |
      (fsm_output[3]));
  assign nor_92_nl = ~((~ (fsm_output[0])) | (fsm_output[5]) | (~ and_255_cse));
  assign mux_110_nl = MUX_s_1_2_2(nor_47_nl, nor_92_nl, fsm_output[4]);
  assign and_dcpl_72 = mux_110_nl & and_dcpl_1 & (~ (fsm_output[7]));
  assign nor_114_nl = ~((fsm_output[6]) | (~ (fsm_output[3])));
  assign nor_115_nl = ~((~ (fsm_output[6])) | (fsm_output[3]));
  assign mux_111_nl = MUX_s_1_2_2(nor_114_nl, nor_115_nl, fsm_output[0]);
  assign and_dcpl_75 = mux_111_nl & (fsm_output[2]);
  assign and_dcpl_81 = ~((fsm_output[1]) | (fsm_output[5]));
  assign or_tmp_164 = nor_61_cse | (fsm_output[5]);
  assign and_dcpl_91 = ~((fsm_output[0]) | (COMP_LOOP_acc_cse_sva[0]));
  assign and_dcpl_94 = nor_tmp_10 & and_dcpl_81;
  assign and_dcpl_96 = (~ (fsm_output[0])) & (COMP_LOOP_acc_cse_sva[0]);
  assign and_dcpl_107 = (fsm_output[5]) & (~ (fsm_output[0])) & and_dcpl_23;
  assign and_dcpl_116 = and_255_cse & and_dcpl_68 & and_dcpl_107;
  assign or_dcpl_15 = (fsm_output!=8'b00010010);
  assign and_dcpl_120 = and_dcpl_58 & (~ (fsm_output[7]));
  assign or_tmp_190 = (fsm_output[5]) | (~ nor_tmp_10);
  assign nand_7_nl = ~((fsm_output[5]) & (~ mux_173_cse));
  assign mux_159_nl = MUX_s_1_2_2(mux_173_cse, mux_171_cse, fsm_output[1]);
  assign nand_6_nl = ~((fsm_output[5]) & (~ mux_159_nl));
  assign mux_160_nl = MUX_s_1_2_2(nand_7_nl, nand_6_nl, fsm_output[0]);
  assign or_210_nl = (fsm_output[5]) | (~((fsm_output[1]) & (fsm_output[2]) & (fsm_output[3])
      & (fsm_output[6])));
  assign mux_157_nl = MUX_s_1_2_2(or_210_nl, or_tmp_190, fsm_output[0]);
  assign mux_161_nl = MUX_s_1_2_2(mux_160_nl, mux_157_nl, fsm_output[4]);
  assign and_dcpl_125 = ~(mux_161_nl | (fsm_output[7]));
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4 = and_dcpl_75 & (fsm_output[1])
      & (fsm_output[5]) & and_dcpl_23;
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 = and_dcpl_75 & (~ (fsm_output[1]))
      & (fsm_output[5]) & and_dcpl_11;
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_50 & and_dcpl_58 & (~ (fsm_output[4]))
      & (fsm_output[7]);
  assign exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c1 = and_dcpl_69 & and_dcpl_107;
  assign exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c3 = (fsm_output[3]) & (~ (fsm_output[6]))
      & (fsm_output[2]) & (fsm_output[1]) & (fsm_output[5]) & (fsm_output[0]) & and_dcpl_23;
  assign nor_39_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b00) | (fsm_output[1])
      | (~ nor_tmp_10));
  assign nor_40_nl = ~((operator_64_false_acc_cse_1_sva[1:0]!=2'b00) | (~ (fsm_output[1]))
      | (fsm_output[2]) | (fsm_output[6]) | (fsm_output[3]));
  assign mux_152_nl = MUX_s_1_2_2(nor_39_nl, nor_40_nl, fsm_output[4]);
  assign tmp_1_lpi_4_dfm_mx0c0 = mux_152_nl & and_dcpl_120;
  assign nor_37_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b01) | (fsm_output[1])
      | (~ nor_tmp_10));
  assign nor_38_nl = ~((operator_64_false_acc_cse_1_sva[1:0]!=2'b01) | (~ (fsm_output[1]))
      | (fsm_output[2]) | (fsm_output[6]) | (fsm_output[3]));
  assign mux_153_nl = MUX_s_1_2_2(nor_37_nl, nor_38_nl, fsm_output[4]);
  assign tmp_1_lpi_4_dfm_mx0c1 = mux_153_nl & and_dcpl_120;
  assign nor_35_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b10) | (fsm_output[1])
      | (~ nor_tmp_10));
  assign nor_36_nl = ~((operator_64_false_acc_cse_1_sva[1:0]!=2'b10) | (~ (fsm_output[1]))
      | (fsm_output[2]) | (fsm_output[6]) | (fsm_output[3]));
  assign mux_154_nl = MUX_s_1_2_2(nor_35_nl, nor_36_nl, fsm_output[4]);
  assign tmp_1_lpi_4_dfm_mx0c2 = mux_154_nl & and_dcpl_120;
  assign and_134_nl = (operator_64_false_acc_cse_sva[1:0]==2'b11) & (~ (fsm_output[1]))
      & nor_tmp_10;
  assign nor_34_nl = ~((operator_64_false_acc_cse_1_sva[1:0]!=2'b11) | (~ (fsm_output[1]))
      | (fsm_output[2]) | (fsm_output[6]) | (fsm_output[3]));
  assign mux_155_nl = MUX_s_1_2_2(and_134_nl, nor_34_nl, fsm_output[4]);
  assign tmp_1_lpi_4_dfm_mx0c3 = mux_155_nl & and_dcpl_120;
  assign and_17_nl = and_dcpl_16 & and_dcpl_13;
  assign or_234_nl = (~ (fsm_output[5])) | (fsm_output[1]);
  assign or_235_nl = (fsm_output[5]) | (~ (fsm_output[1]));
  assign mux_53_nl = MUX_s_1_2_2(or_234_nl, or_235_nl, fsm_output[4]);
  assign nor_113_nl = ~(mux_53_nl | (fsm_output[3]) | (fsm_output[6]) | (fsm_output[2])
      | (~ (fsm_output[0])) | (fsm_output[7]));
  assign and_27_nl = and_255_cse & and_dcpl_1 & and_dcpl_24;
  assign and_31_nl = and_255_cse & ((fsm_output[0]) ^ (fsm_output[4])) & and_dcpl_1
      & and_dcpl_28;
  assign nor_79_nl = ~((fsm_output[1:0]!=2'b00) | (~ nor_tmp_10));
  assign nor_80_nl = ~((~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[2])
      | (fsm_output[6]) | (fsm_output[3]));
  assign mux_54_nl = MUX_s_1_2_2(nor_79_nl, nor_80_nl, fsm_output[7]);
  assign and_33_nl = mux_54_nl & and_dcpl_32;
  assign vec_rsc_0_0_i_adra_d_pff = MUX1HOT_v_8_5_2((COMP_LOOP_1_operator_64_false_acc_tmp[9:2]),
      (COMP_LOOP_acc_psp_sva[8:1]), (operator_64_false_acc_cse_1_sva[9:2]), (COMP_LOOP_acc_cse_sva[9:2]),
      (operator_64_false_acc_cse_sva[9:2]), {and_17_nl , nor_113_nl , and_27_nl ,
      and_31_nl , and_33_nl});
  assign vec_rsc_0_0_i_da_d_pff = COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign or_46_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b00) | (fsm_output[7]);
  assign or_45_nl = (COMP_LOOP_acc_cse_sva[1:0]!=2'b00) | (fsm_output[7]);
  assign mux_56_nl = MUX_s_1_2_2(or_46_nl, or_45_nl, fsm_output[4]);
  assign or_225_nl = nand_19_cse | mux_56_nl;
  assign or_42_nl = (fsm_output[5:4]!=2'b10) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (COMP_LOOP_acc_psp_sva[0])
      | (fsm_output[7]);
  assign or_41_nl = (fsm_output[5:4]!=2'b00) | (operator_64_false_acc_cse_sva[1:0]!=2'b00)
      | (~ (fsm_output[7]));
  assign mux_55_nl = MUX_s_1_2_2(or_42_nl, or_41_nl, fsm_output[1]);
  assign or_226_nl = (fsm_output[3]) | (fsm_output[6]) | mux_55_nl;
  assign mux_57_nl = MUX_s_1_2_2(or_225_nl, or_226_nl, fsm_output[0]);
  assign vec_rsc_0_0_i_wea_d_pff = ~(mux_57_nl | (fsm_output[2]));
  assign nor_75_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b00)
      | (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6])));
  assign or_55_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b00) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_50_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (COMP_LOOP_acc_psp_sva[0]);
  assign mux_59_nl = MUX_s_1_2_2(mux_58_cse, or_52_cse, or_50_nl);
  assign or_49_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (COMP_LOOP_acc_psp_sva[0]) |
      (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_48_nl = (~ exit_COMP_LOOP_1_modExp_dev_1_while_sva) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b00);
  assign mux_60_nl = MUX_s_1_2_2(mux_59_nl, or_49_nl, or_48_nl);
  assign mux_61_nl = MUX_s_1_2_2(or_55_nl, mux_60_nl, fsm_output[0]);
  assign nor_76_nl = ~((fsm_output[2]) | mux_61_nl);
  assign mux_62_nl = MUX_s_1_2_2(nor_75_nl, nor_76_nl, fsm_output[1]);
  assign vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_62_nl & and_dcpl_28;
  assign or_66_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b01) | (fsm_output[7]);
  assign or_65_nl = (COMP_LOOP_acc_cse_sva[1:0]!=2'b01) | (fsm_output[7]);
  assign mux_64_nl = MUX_s_1_2_2(or_66_nl, or_65_nl, fsm_output[4]);
  assign or_223_nl = nand_19_cse | mux_64_nl;
  assign or_62_nl = (fsm_output[5:4]!=2'b10) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (COMP_LOOP_acc_psp_sva[0]) | (fsm_output[7]);
  assign or_61_nl = (fsm_output[5:4]!=2'b00) | (operator_64_false_acc_cse_sva[1:0]!=2'b01)
      | (~ (fsm_output[7]));
  assign mux_63_nl = MUX_s_1_2_2(or_62_nl, or_61_nl, fsm_output[1]);
  assign or_224_nl = (fsm_output[3]) | (fsm_output[6]) | mux_63_nl;
  assign mux_65_nl = MUX_s_1_2_2(or_223_nl, or_224_nl, fsm_output[0]);
  assign vec_rsc_0_1_i_wea_d_pff = ~(mux_65_nl | (fsm_output[2]));
  assign nor_71_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b01)
      | (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6])));
  assign or_75_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b01) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_70_nl = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (COMP_LOOP_acc_psp_sva[0]);
  assign mux_67_nl = MUX_s_1_2_2(mux_58_cse, or_52_cse, or_70_nl);
  assign or_69_nl = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (COMP_LOOP_acc_psp_sva[0])
      | (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_68_nl = (~ exit_COMP_LOOP_1_modExp_dev_1_while_sva) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b01);
  assign mux_68_nl = MUX_s_1_2_2(mux_67_nl, or_69_nl, or_68_nl);
  assign mux_69_nl = MUX_s_1_2_2(or_75_nl, mux_68_nl, fsm_output[0]);
  assign nor_72_nl = ~((fsm_output[2]) | mux_69_nl);
  assign mux_70_nl = MUX_s_1_2_2(nor_71_nl, nor_72_nl, fsm_output[1]);
  assign vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_70_nl & and_dcpl_28;
  assign or_86_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b10) | (fsm_output[7]);
  assign or_85_nl = (COMP_LOOP_acc_cse_sva[1:0]!=2'b10) | (fsm_output[7]);
  assign mux_72_nl = MUX_s_1_2_2(or_86_nl, or_85_nl, fsm_output[4]);
  assign or_221_nl = nand_19_cse | mux_72_nl;
  assign or_82_nl = (fsm_output[5:4]!=2'b10) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (~
      (COMP_LOOP_acc_psp_sva[0])) | (fsm_output[7]);
  assign or_81_nl = (fsm_output[5:4]!=2'b00) | (operator_64_false_acc_cse_sva[0])
      | (~((operator_64_false_acc_cse_sva[1]) & (fsm_output[7])));
  assign mux_71_nl = MUX_s_1_2_2(or_82_nl, or_81_nl, fsm_output[1]);
  assign or_222_nl = (fsm_output[3]) | (fsm_output[6]) | mux_71_nl;
  assign mux_73_nl = MUX_s_1_2_2(or_221_nl, or_222_nl, fsm_output[0]);
  assign vec_rsc_0_2_i_wea_d_pff = ~(mux_73_nl | (fsm_output[2]));
  assign nor_67_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[1:0]!=2'b10)
      | (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6])));
  assign or_93_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b10) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_92_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (~ (COMP_LOOP_acc_psp_sva[0]))
      | (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign nor_13_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[0]) | (~ (COMP_LOOP_acc_psp_sva[0])));
  assign mux_75_nl = MUX_s_1_2_2(or_52_cse, mux_58_cse, nor_13_nl);
  assign nor_12_nl = ~((~ exit_COMP_LOOP_1_modExp_dev_1_while_sva) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b10));
  assign mux_76_nl = MUX_s_1_2_2(or_92_nl, mux_75_nl, nor_12_nl);
  assign mux_77_nl = MUX_s_1_2_2(or_93_nl, mux_76_nl, fsm_output[0]);
  assign nor_68_nl = ~((fsm_output[2]) | mux_77_nl);
  assign mux_78_nl = MUX_s_1_2_2(nor_67_nl, nor_68_nl, fsm_output[1]);
  assign vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_78_nl & and_dcpl_28;
  assign or_104_nl = (operator_64_false_acc_cse_1_sva[1:0]!=2'b11) | (fsm_output[7]);
  assign or_103_nl = (COMP_LOOP_acc_cse_sva[1:0]!=2'b11) | (fsm_output[7]);
  assign mux_80_nl = MUX_s_1_2_2(or_104_nl, or_103_nl, fsm_output[4]);
  assign or_219_nl = nand_19_cse | mux_80_nl;
  assign or_100_nl = (fsm_output[5:4]!=2'b10) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (~ (COMP_LOOP_acc_psp_sva[0])) | (fsm_output[7]);
  assign or_99_nl = (fsm_output[5:4]!=2'b00) | (~((operator_64_false_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7])));
  assign mux_79_nl = MUX_s_1_2_2(or_100_nl, or_99_nl, fsm_output[1]);
  assign or_220_nl = (fsm_output[3]) | (fsm_output[6]) | mux_79_nl;
  assign mux_81_nl = MUX_s_1_2_2(or_219_nl, or_220_nl, fsm_output[0]);
  assign vec_rsc_0_3_i_wea_d_pff = ~(mux_81_nl | (fsm_output[2]));
  assign and_155_nl = (fsm_output[2]) & (~ (fsm_output[0])) & (operator_64_false_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[3]) & (~ (fsm_output[4])) & (fsm_output[6]);
  assign or_111_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b11) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_110_nl = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (~ (COMP_LOOP_acc_psp_sva[0]))
      | (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign and_148_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) & (COMP_LOOP_acc_psp_sva[0]);
  assign mux_83_nl = MUX_s_1_2_2(or_52_cse, mux_58_cse, and_148_nl);
  assign and_149_nl = exit_COMP_LOOP_1_modExp_dev_1_while_sva & (COMP_LOOP_acc_cse_sva[1:0]==2'b11);
  assign mux_84_nl = MUX_s_1_2_2(or_110_nl, mux_83_nl, and_149_nl);
  assign mux_85_nl = MUX_s_1_2_2(or_111_nl, mux_84_nl, fsm_output[0]);
  assign nor_64_nl = ~((fsm_output[2]) | mux_85_nl);
  assign mux_86_nl = MUX_s_1_2_2(and_155_nl, nor_64_nl, fsm_output[1]);
  assign vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_86_nl & and_dcpl_28;
  assign and_dcpl_141 = (~ (fsm_output[7])) & (~ (fsm_output[4])) & (~ (fsm_output[5]))
      & (~ (fsm_output[1])) & (fsm_output[2]) & (fsm_output[0]) & not_tmp_17;
  assign and_dcpl_155 = (~ (fsm_output[4])) & (~ (fsm_output[5])) & (fsm_output[7])
      & (fsm_output[2]) & (~ (fsm_output[1])) & (fsm_output[0]) & not_tmp_17;
  assign and_dcpl_159 = (~ (fsm_output[7])) & (fsm_output[2]);
  assign and_dcpl_160 = (fsm_output[5:4]==2'b10);
  assign and_dcpl_162 = and_dcpl_160 & and_dcpl_159 & (fsm_output[1]) & (fsm_output[0])
      & (fsm_output[3]) & (~ (fsm_output[6]));
  assign and_dcpl_165 = (fsm_output[1:0]==2'b10) & not_tmp_17;
  assign and_dcpl_166 = ~((fsm_output[7]) | (fsm_output[2]));
  assign and_dcpl_168 = (fsm_output[5:4]==2'b01) & and_dcpl_166;
  assign and_dcpl_169 = and_dcpl_168 & and_dcpl_165;
  assign or_249_nl = (fsm_output[5:0]!=6'b100011);
  assign or_250_nl = (fsm_output[5:0]!=6'b011100);
  assign mux_167_nl = MUX_s_1_2_2(or_249_nl, or_250_nl, fsm_output[6]);
  assign nor_126_cse = ~(mux_167_nl | (fsm_output[7]));
  assign and_dcpl_174 = and_dcpl_32 & (fsm_output[7]) & (fsm_output[2]) & and_dcpl_165;
  assign and_dcpl_177 = and_dcpl_32 & and_dcpl_159;
  assign and_dcpl_178 = and_dcpl_177 & nor_61_cse & not_tmp_17;
  assign and_dcpl_180 = (fsm_output[1:0]==2'b01) & not_tmp_17;
  assign and_dcpl_181 = and_dcpl_177 & and_dcpl_180;
  assign and_dcpl_182 = and_dcpl_168 & and_dcpl_180;
  assign and_dcpl_186 = and_dcpl_160 & and_dcpl_166 & nor_61_cse & (fsm_output[3])
      & (fsm_output[6]);
  assign and_dcpl_188 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_189 = and_dcpl_188 & not_tmp_17;
  assign and_dcpl_193 = and_dcpl_32 & (~ (fsm_output[7])) & (~ (fsm_output[2])) &
      and_dcpl_189;
  assign and_dcpl_196 = and_dcpl_177 & and_dcpl_189;
  assign and_dcpl_202 = (fsm_output[5:4]==2'b01) & and_dcpl_159 & (fsm_output[1:0]==2'b00)
      & not_tmp_17;
  assign and_250_nl = (fsm_output[2:0]==3'b111);
  assign nor_117_nl = ~((fsm_output[2:0]!=3'b000));
  assign mux_169_nl = MUX_s_1_2_2(and_250_nl, nor_117_nl, fsm_output[6]);
  assign and_dcpl_206 = mux_169_nl & (~ (fsm_output[4])) & (fsm_output[5]) & (~ (fsm_output[7]))
      & (fsm_output[3]);
  assign and_dcpl_209 = and_dcpl_177 & and_dcpl_188 & (fsm_output[3]) & (fsm_output[6]);
  assign and_dcpl_222 = (fsm_output[5:4]==2'b10) & and_dcpl_166 & (~ (fsm_output[1]))
      & (~ (fsm_output[0])) & (fsm_output[3]) & (fsm_output[6]);
  assign operator_64_false_operator_64_false_or_1_cse = (~(and_dcpl_162 | and_dcpl_169
      | nor_126_cse | and_dcpl_178 | and_dcpl_181 | and_dcpl_182 | and_dcpl_186))
      | and_dcpl_174;
  always @(posedge clk) begin
    if ( mux_tmp_37 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= not_tmp_17 & (fsm_output[2]) & (fsm_output[1])
          & (~ (fsm_output[5])) & (~ (fsm_output[0])) & (~ (fsm_output[4])) & (fsm_output[7])
          & (z_out_2_64_4[0]);
      reg_ensig_cgo_cse <= mux_95_rmff;
    end
  end
  always @(posedge clk) begin
    reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(z_out, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        nor_102_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        and_dcpl_67);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_67);
    modExp_dev_exp_1_sva_0 <= (COMP_LOOP_mux_19_nl & (~(and_dcpl_16 & and_dcpl_107)))
        | mux_165_nl | (fsm_output[7]);
  end
  always @(posedge clk) begin
    if ( mux_tmp_37 | and_dcpl_70 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_4[3:0]), and_dcpl_70);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_85_nl, or_tmp_145, fsm_output[7]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_70 | and_dcpl_63 | and_dcpl_72 | and_dcpl_65 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4
        | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 ) begin
      COMP_LOOP_1_modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_4_2(z_out_3, z_out,
          64'b0000000000000000000000000000000000000000000000000000000000000001, modExp_dev_while_rem_cmp_z,
          {and_dcpl_70 , operator_64_false_or_2_nl , and_dcpl_72 , COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (not_tmp_17 & ((fsm_output[2]) ^ (fsm_output[4])) & and_dcpl_81 & (~
        (fsm_output[0])) & (~ (fsm_output[7]))) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1
        ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_1[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_120_nl | and_90_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z, and_90_rgt);
    end
  end
  always @(posedge clk) begin
    if ( mux_129_nl | (fsm_output[7]) ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_6_2(STAGE_MAIN_LOOP_div_cmp_z, z_out_3, vec_rsc_0_0_i_qa_d,
          vec_rsc_0_2_i_qa_d, vec_rsc_0_1_i_qa_d, vec_rsc_0_3_i_qa_d, {and_91_nl
          , and_dcpl_63 , COMP_LOOP_or_2_nl , COMP_LOOP_or_3_nl , COMP_LOOP_or_4_nl
          , COMP_LOOP_or_5_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_63 | exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c1 | and_dcpl_65
        | exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c3 | and_dcpl_116 ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= MUX1HOT_s_1_4_2((~ (z_out_2_64_4[60])),
          (~ operator_64_false_1_slc_operator_64_false_1_acc_8_itm), (z_out_2_64_4[59]),
          (~ (z_out_2_64_4[59])), {modExp_dev_while_or_nl , exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c1
          , exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c3 , and_dcpl_116});
    end
  end
  always @(posedge clk) begin
    if ( mux_170_nl & (~((fsm_output[7]) | (fsm_output[1]) | (fsm_output[2]))) )
        begin
      COMP_LOOP_k_9_1_sva_7_0 <= MUX_v_8_2_2(8'b00000000, (z_out_4[7:0]), nand_26_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_15 ) begin
      operator_64_false_acc_cse_1_sva <= COMP_LOOP_1_operator_64_false_acc_tmp;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_psp_sva <= 9'b000000000;
    end
    else if ( ~ or_dcpl_15 ) begin
      COMP_LOOP_acc_psp_sva <= z_out_1[8:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_15 ) begin
      operator_64_false_1_slc_operator_64_false_1_acc_8_itm <= z_out_2_64_4[4];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_sva <= 10'b0000000000;
    end
    else if ( mux_148_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_cse_sva <= nl_COMP_LOOP_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_sva <= 10'b0000000000;
    end
    else if ( ~ mux_151_nl ) begin
      operator_64_false_acc_cse_sva <= nl_operator_64_false_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( tmp_1_lpi_4_dfm_mx0c0 | tmp_1_lpi_4_dfm_mx0c1 | tmp_1_lpi_4_dfm_mx0c2 |
        tmp_1_lpi_4_dfm_mx0c3 ) begin
      tmp_1_lpi_4_dfm <= MUX1HOT_v_64_4_2(vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d,
          vec_rsc_0_2_i_qa_d, vec_rsc_0_3_i_qa_d, {tmp_1_lpi_4_dfm_mx0c0 , tmp_1_lpi_4_dfm_mx0c1
          , tmp_1_lpi_4_dfm_mx0c2 , tmp_1_lpi_4_dfm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_125 ) begin
      modExp_dev_exp_1_sva_8_1 <= MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_3[8:1]),
          and_dcpl_65);
    end
  end
  always @(posedge clk) begin
    if ( mux_175_nl | (fsm_output[7]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), not_467_nl);
    end
  end
  assign or_142_nl = (~ (fsm_output[2])) | (~ (fsm_output[1])) | (fsm_output[6]);
  assign and_138_nl = (fsm_output[0]) & (fsm_output[1]) & (fsm_output[6]);
  assign mux_104_nl = MUX_s_1_2_2((~ (fsm_output[6])), and_138_nl, fsm_output[2]);
  assign mux_105_nl = MUX_s_1_2_2(or_142_nl, mux_104_nl, fsm_output[5]);
  assign or_227_nl = (fsm_output[4]) | mux_105_nl;
  assign or_228_nl = ((fsm_output[5]) & (fsm_output[2]) & (fsm_output[1])) | (fsm_output[6]);
  assign or_229_nl = (fsm_output[5]) | (~((fsm_output[2]) & or_217_cse & (fsm_output[6])));
  assign mux_103_nl = MUX_s_1_2_2(or_228_nl, or_229_nl, fsm_output[4]);
  assign mux_106_nl = MUX_s_1_2_2(or_227_nl, mux_103_nl, fsm_output[3]);
  assign nor_102_nl = ~(mux_106_nl | (fsm_output[7]));
  assign COMP_LOOP_mux_19_nl = MUX_s_1_2_2((z_out_3[0]), modExp_dev_exp_1_sva_0,
      and_dcpl_125);
  assign mux_163_nl = MUX_s_1_2_2(mux_172_cse, and_255_cse, or_10_cse);
  assign nand_9_nl = ~((fsm_output[5]) & (~ mux_163_nl));
  assign and_133_nl = or_215_cse & (fsm_output[3]);
  assign mux_162_nl = MUX_s_1_2_2(mux_173_cse, and_133_nl, fsm_output[1]);
  assign nand_8_nl = ~((fsm_output[5]) & (~ mux_162_nl));
  assign mux_164_nl = MUX_s_1_2_2(nand_9_nl, nand_8_nl, fsm_output[0]);
  assign mux_165_nl = MUX_s_1_2_2(mux_164_nl, or_tmp_190, fsm_output[4]);
  assign nor_85_nl = ~((fsm_output[6:1]!=6'b000000));
  assign operator_64_false_or_2_nl = and_dcpl_63 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5
      | and_dcpl_65;
  assign nor_45_nl = ~((fsm_output[6:4]!=3'b000));
  assign mux_120_nl = MUX_s_1_2_2(nor_45_nl, or_tmp_145, fsm_output[7]);
  assign and_91_nl = and_dcpl_50 & and_dcpl_24;
  assign COMP_LOOP_or_2_nl = (COMP_LOOP_nor_1_cse & and_dcpl_51) | (and_dcpl_94 &
      and_dcpl_91 & (~ (COMP_LOOP_acc_cse_sva[1])) & and_dcpl_23);
  assign COMP_LOOP_or_3_nl = ((COMP_LOOP_acc_psp_sva[0]) & (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      & and_dcpl_51) | (and_dcpl_94 & and_dcpl_91 & (COMP_LOOP_acc_cse_sva[1]) &
      and_dcpl_23);
  assign COMP_LOOP_or_4_nl = ((STAGE_VEC_LOOP_j_sva_9_0[0]) & (~ (COMP_LOOP_acc_psp_sva[0]))
      & and_dcpl_51) | (and_dcpl_94 & and_dcpl_96 & (~ (COMP_LOOP_acc_cse_sva[1]))
      & and_dcpl_23);
  assign COMP_LOOP_or_5_nl = ((STAGE_VEC_LOOP_j_sva_9_0[0]) & (COMP_LOOP_acc_psp_sva[0])
      & and_dcpl_51) | (and_dcpl_94 & and_dcpl_96 & (COMP_LOOP_acc_cse_sva[1]) &
      and_dcpl_23);
  assign nor_43_nl = ~(and_cse | (fsm_output[5]));
  assign and_136_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[1]) & (fsm_output[5]);
  assign mux_127_nl = MUX_s_1_2_2(nor_43_nl, and_136_nl, fsm_output[3]);
  assign or_174_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5]);
  assign mux_125_nl = MUX_s_1_2_2(or_174_nl, or_tmp_164, fsm_output[2]);
  assign mux_126_nl = MUX_s_1_2_2(mux_125_nl, (fsm_output[5]), fsm_output[3]);
  assign mux_128_nl = MUX_s_1_2_2(mux_127_nl, mux_126_nl, fsm_output[4]);
  assign nand_4_nl = ~((fsm_output[2]) & (~ or_tmp_164));
  assign mux_123_nl = MUX_s_1_2_2((~ (fsm_output[5])), nand_4_nl, fsm_output[3]);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, (fsm_output[5]), fsm_output[4]);
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, mux_124_nl, fsm_output[6]);
  assign modExp_dev_while_or_nl = and_dcpl_63 | and_dcpl_65;
  assign nand_26_nl = ~(and_dcpl_69 & and_dcpl_58 & and_dcpl_11);
  assign nor_141_nl = ~((fsm_output[6]) | (~ (fsm_output[0])) | (fsm_output[5]) |
      (~ (fsm_output[4])));
  assign nor_142_nl = ~((~ (fsm_output[6])) | (fsm_output[0]) | (~ (fsm_output[5]))
      | (fsm_output[4]));
  assign mux_170_nl = MUX_s_1_2_2(nor_141_nl, nor_142_nl, fsm_output[3]);
  assign nl_COMP_LOOP_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b1});
  assign mux_32_nl = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[5]);
  assign mux_26_nl = MUX_s_1_2_2(not_tmp_17, and_255_cse, fsm_output[2]);
  assign mux_144_nl = MUX_s_1_2_2(mux_26_nl, mux_173_cse, fsm_output[1]);
  assign mux_145_nl = MUX_s_1_2_2(mux_144_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_22_nl = MUX_s_1_2_2(not_tmp_17, and_255_cse, or_10_cse);
  assign mux_23_nl = MUX_s_1_2_2(mux_22_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_146_nl = MUX_s_1_2_2(mux_145_nl, mux_23_nl, fsm_output[0]);
  assign mux_148_nl = MUX_s_1_2_2(mux_32_nl, mux_146_nl, fsm_output[4]);
  assign nl_operator_64_false_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b1}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign or_18_nl = (fsm_output[6:5]!=2'b00);
  assign mux_150_nl = MUX_s_1_2_2(or_18_nl, mux_tmp_20, fsm_output[4]);
  assign nor_87_nl = ~((fsm_output[4]) | mux_tmp_20);
  assign mux_151_nl = MUX_s_1_2_2(mux_150_nl, nor_87_nl, fsm_output[7]);
  assign not_467_nl = ~ and_dcpl_72;
  assign nand_27_nl = ~((fsm_output[4]) & or_217_cse & (fsm_output[2]) & (fsm_output[6])
      & (fsm_output[3]));
  assign mux_174_nl = MUX_s_1_2_2(mux_173_cse, mux_171_cse, and_147_cse);
  assign or_258_nl = (fsm_output[4]) | mux_174_nl;
  assign mux_175_nl = MUX_s_1_2_2(nand_27_nl, or_258_nl, fsm_output[5]);
  assign COMP_LOOP_mux_20_nl = MUX_v_64_2_2(COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      modExp_dev_result_sva, and_dcpl_141);
  assign or_262_nl = (~ (fsm_output[3])) | (fsm_output[0]);
  assign or_263_nl = (fsm_output[3]) | (~ (fsm_output[0]));
  assign mux_176_nl = MUX_s_1_2_2(or_262_nl, or_263_nl, fsm_output[6]);
  assign and_257_nl = (~(mux_176_nl | (fsm_output[7]))) & (fsm_output[4]) & (fsm_output[5])
      & (~ (fsm_output[1])) & (fsm_output[2]);
  assign COMP_LOOP_mux1h_35_nl = MUX1HOT_v_64_3_2(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z,
      r_sva, modExp_dev_result_sva, {and_257_nl , and_dcpl_141 , nor_126_cse});
  assign nl_z_out = COMP_LOOP_mux_20_nl * COMP_LOOP_mux1h_35_nl;
  assign z_out = nl_z_out[63:0];
  assign COMP_LOOP_mux_21_nl = MUX_v_10_2_2(({1'b0 , (STAGE_VEC_LOOP_j_sva_9_0[9:1])}),
      STAGE_VEC_LOOP_j_sva_9_0, and_dcpl_155);
  assign COMP_LOOP_mux_22_nl = MUX_v_10_2_2(({2'b00 , COMP_LOOP_k_9_1_sva_7_0}),
      STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_155);
  assign nl_z_out_1 = conv_u2u_10_11(COMP_LOOP_mux_21_nl) + conv_u2u_10_11(COMP_LOOP_mux_22_nl);
  assign z_out_1 = nl_z_out_1[10:0];
  assign operator_64_false_operator_64_false_or_58_nl = (~(and_dcpl_162 | and_dcpl_174
      | and_dcpl_182 | and_dcpl_186)) | and_dcpl_169 | nor_126_cse | and_dcpl_178
      | and_dcpl_181;
  assign operator_64_false_operator_64_false_mux_1_nl = MUX_v_55_2_2((z_out_3[63:9]),
      (STAGE_MAIN_LOOP_div_cmp_z[63:9]), and_dcpl_178);
  assign operator_64_false_operator_64_false_nor_1_nl = ~(MUX_v_55_2_2(operator_64_false_operator_64_false_mux_1_nl,
      55'b1111111111111111111111111111111111111111111111111111111, and_dcpl_174));
  assign operator_64_false_or_7_nl = and_dcpl_162 | and_dcpl_169 | and_dcpl_182 |
      and_dcpl_186;
  assign operator_64_false_or_6_nl = MUX_v_55_2_2(operator_64_false_operator_64_false_nor_1_nl,
      55'b1111111111111111111111111111111111111111111111111111111, operator_64_false_or_7_nl);
  assign operator_64_false_or_8_nl = and_dcpl_162 | and_dcpl_182 | and_dcpl_186;
  assign operator_64_false_or_9_nl = nor_126_cse | and_dcpl_181;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_9_5_2((~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      ({1'b1 , (~ COMP_LOOP_k_9_1_sva_7_0)}), (~ (z_out_3[8:0])), ({5'b00000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])), {operator_64_false_or_8_nl , and_dcpl_169
      , operator_64_false_or_9_nl , and_dcpl_174 , and_dcpl_178});
  assign operator_64_false_or_10_nl = (~(and_dcpl_169 | nor_126_cse | and_dcpl_174
      | and_dcpl_178 | and_dcpl_181 | and_dcpl_182)) | and_dcpl_162 | and_dcpl_186;
  assign operator_64_false_operator_64_false_or_59_nl = ((z_out_4[8]) & (~(and_dcpl_162
      | and_dcpl_169 | nor_126_cse | and_dcpl_178 | and_dcpl_181 | and_dcpl_182)))
      | and_dcpl_174;
  assign operator_64_false_mux_1_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_4[7:0]),
      and_dcpl_186);
  assign operator_64_false_nor_61_nl = ~(and_dcpl_169 | nor_126_cse | and_dcpl_178
      | and_dcpl_181 | and_dcpl_182);
  assign operator_64_false_and_4_nl = MUX_v_8_2_2(8'b00000000, operator_64_false_mux_1_nl,
      operator_64_false_nor_61_nl);
  assign operator_64_false_operator_64_false_or_60_nl = MUX_v_8_2_2(operator_64_false_and_4_nl,
      8'b11111111, and_dcpl_174);
  assign operator_64_false_operator_64_false_or_61_nl = (~ and_dcpl_186) | and_dcpl_162
      | and_dcpl_169 | nor_126_cse | and_dcpl_174 | and_dcpl_178 | and_dcpl_181 |
      and_dcpl_182;
  assign nl_acc_1_nl = ({operator_64_false_operator_64_false_or_58_nl , operator_64_false_or_6_nl
      , operator_64_false_mux1h_3_nl , operator_64_false_or_10_nl}) + conv_s2u_65_66({operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_59_nl
      , operator_64_false_operator_64_false_or_60_nl , operator_64_false_operator_64_false_or_61_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[65:0];
  assign z_out_2_64_4 = readslicef_66_61_5(acc_1_nl);
  assign operator_64_false_or_5_nl = and_dcpl_196 | and_dcpl_206 | and_dcpl_209;
  assign operator_64_false_and_8_nl = COMP_LOOP_nor_1_cse & and_dcpl_202;
  assign operator_64_false_and_9_nl = (COMP_LOOP_acc_psp_sva[0]) & (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      & and_dcpl_202;
  assign operator_64_false_and_10_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) & (~ (COMP_LOOP_acc_psp_sva[0]))
      & and_dcpl_202;
  assign operator_64_false_and_11_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) & (COMP_LOOP_acc_psp_sva[0])
      & and_dcpl_202;
  assign operator_64_false_mux1h_3_nl_1 = MUX1HOT_v_64_7_2(p_sva, tmp_2_lpi_4_dfm,
      ({modExp_dev_exp_1_sva_63_9 , modExp_dev_exp_1_sva_8_1 , modExp_dev_exp_1_sva_0}),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_1_i_qa_d, vec_rsc_0_3_i_qa_d,
      {and_dcpl_193 , operator_64_false_or_5_nl , nor_126_cse , operator_64_false_and_8_nl
      , operator_64_false_and_9_nl , operator_64_false_and_10_nl , operator_64_false_and_11_nl});
  assign operator_64_false_or_6_nl_1 = (~(and_dcpl_193 | and_dcpl_196 | nor_126_cse
      | and_dcpl_202 | and_dcpl_209)) | and_dcpl_206;
  assign operator_64_false_and_12_nl = (operator_64_false_acc_cse_sva[1:0]==2'b00)
      & and_dcpl_209;
  assign operator_64_false_and_13_nl = (operator_64_false_acc_cse_sva[1:0]==2'b01)
      & and_dcpl_209;
  assign operator_64_false_and_14_nl = (operator_64_false_acc_cse_sva[1:0]==2'b10)
      & and_dcpl_209;
  assign operator_64_false_and_15_nl = (operator_64_false_acc_cse_sva[1:0]==2'b11)
      & and_dcpl_209;
  assign operator_64_false_mux1h_4_nl = MUX1HOT_v_64_6_2(tmp_1_lpi_4_dfm, (~ tmp_1_lpi_4_dfm),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, vec_rsc_0_2_i_qa_d, vec_rsc_0_3_i_qa_d,
      {and_dcpl_202 , and_dcpl_206 , operator_64_false_and_12_nl , operator_64_false_and_13_nl
      , operator_64_false_and_14_nl , operator_64_false_and_15_nl});
  assign operator_64_false_or_8_nl_1 = and_dcpl_193 | and_dcpl_196 | nor_126_cse;
  assign operator_64_false_or_7_nl_1 = MUX_v_64_2_2(operator_64_false_mux1h_4_nl,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_8_nl_1);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl_1 , operator_64_false_or_6_nl_1})
      + ({operator_64_false_or_7_nl_1 , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_3 = readslicef_65_64_1(acc_2_nl);
  assign STAGE_MAIN_LOOP_mux_4_nl = MUX_v_8_2_2(({4'b0000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      COMP_LOOP_k_9_1_sva_7_0, and_dcpl_222);
  assign nl_z_out_4 = conv_u2u_8_9(STAGE_MAIN_LOOP_mux_4_nl) + conv_s2u_2_9({(~ and_dcpl_222)
      , 1'b1});
  assign z_out_4 = nl_z_out_4[8:0];

  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_6_2;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [5:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    MUX1HOT_v_64_6_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_7_2;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [6:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    MUX1HOT_v_64_7_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_5_2;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [4:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    MUX1HOT_v_8_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [60:0] readslicef_66_61_5;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_66_61_5 = tmp[60:0];
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [65:0] conv_s2u_65_66 ;
    input [64:0]  vector ;
  begin
    conv_s2u_65_66 = {vector[64], vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_adra, vec_rsc_0_0_da, vec_rsc_0_0_wea, vec_rsc_0_0_qa, vec_rsc_triosy_0_0_lz,
      vec_rsc_0_1_adra, vec_rsc_0_1_da, vec_rsc_0_1_wea, vec_rsc_0_1_qa, vec_rsc_triosy_0_1_lz,
      vec_rsc_0_2_adra, vec_rsc_0_2_da, vec_rsc_0_2_wea, vec_rsc_0_2_qa, vec_rsc_triosy_0_2_lz,
      vec_rsc_0_3_adra, vec_rsc_0_3_da, vec_rsc_0_3_wea, vec_rsc_0_3_qa, vec_rsc_triosy_0_3_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [7:0] vec_rsc_0_0_adra;
  output [63:0] vec_rsc_0_0_da;
  output vec_rsc_0_0_wea;
  input [63:0] vec_rsc_0_0_qa;
  output vec_rsc_triosy_0_0_lz;
  output [7:0] vec_rsc_0_1_adra;
  output [63:0] vec_rsc_0_1_da;
  output vec_rsc_0_1_wea;
  input [63:0] vec_rsc_0_1_qa;
  output vec_rsc_triosy_0_1_lz;
  output [7:0] vec_rsc_0_2_adra;
  output [63:0] vec_rsc_0_2_da;
  output vec_rsc_0_2_wea;
  input [63:0] vec_rsc_0_2_qa;
  output vec_rsc_triosy_0_2_lz;
  output [7:0] vec_rsc_0_3_adra;
  output [63:0] vec_rsc_0_3_da;
  output vec_rsc_0_3_wea;
  input [63:0] vec_rsc_0_3_qa;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_qa_d;
  wire vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_qa_d;
  wire vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_qa_d;
  wire vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_qa_d;
  wire vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [7:0] vec_rsc_0_0_i_adra_d_iff;
  wire [63:0] vec_rsc_0_0_i_da_d_iff;
  wire vec_rsc_0_0_i_wea_d_iff;
  wire vec_rsc_0_1_i_wea_d_iff;
  wire vec_rsc_0_2_i_wea_d_iff;
  wire vec_rsc_0_3_i_wea_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_8_64_256_256_64_1_gen vec_rsc_0_0_i
      (
      .qa(vec_rsc_0_0_qa),
      .wea(vec_rsc_0_0_wea),
      .da(vec_rsc_0_0_da),
      .adra(vec_rsc_0_0_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_0_i_qa_d),
      .wea_d(vec_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_8_64_256_256_64_1_gen vec_rsc_0_1_i
      (
      .qa(vec_rsc_0_1_qa),
      .wea(vec_rsc_0_1_wea),
      .da(vec_rsc_0_1_da),
      .adra(vec_rsc_0_1_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_1_i_qa_d),
      .wea_d(vec_rsc_0_1_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_10_8_64_256_256_64_1_gen
      vec_rsc_0_2_i (
      .qa(vec_rsc_0_2_qa),
      .wea(vec_rsc_0_2_wea),
      .da(vec_rsc_0_2_da),
      .adra(vec_rsc_0_2_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_2_i_qa_d),
      .wea_d(vec_rsc_0_2_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_11_8_64_256_256_64_1_gen
      vec_rsc_0_3_i (
      .qa(vec_rsc_0_3_qa),
      .wea(vec_rsc_0_3_wea),
      .da(vec_rsc_0_3_da),
      .adra(vec_rsc_0_3_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_3_i_qa_d),
      .wea_d(vec_rsc_0_3_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_wea_d_iff)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_qa_d(vec_rsc_0_0_i_qa_d),
      .vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_qa_d(vec_rsc_0_1_i_qa_d),
      .vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_qa_d(vec_rsc_0_2_i_qa_d),
      .vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_qa_d(vec_rsc_0_3_i_qa_d),
      .vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_adra_d_pff(vec_rsc_0_0_i_adra_d_iff),
      .vec_rsc_0_0_i_da_d_pff(vec_rsc_0_0_i_da_d_iff),
      .vec_rsc_0_0_i_wea_d_pff(vec_rsc_0_0_i_wea_d_iff),
      .vec_rsc_0_1_i_wea_d_pff(vec_rsc_0_1_i_wea_d_iff),
      .vec_rsc_0_2_i_wea_d_pff(vec_rsc_0_2_i_wea_d_iff),
      .vec_rsc_0_3_i_wea_d_pff(vec_rsc_0_3_i_wea_d_iff)
    );
endmodule



