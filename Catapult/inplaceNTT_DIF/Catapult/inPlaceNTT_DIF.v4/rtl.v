// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 20 15:30:31 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_9_64_512_512_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [8:0] adra;
  input [8:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_9_64_512_512_64_1_gen
    (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [63:0] qa;
  output wea;
  output [63:0] da;
  output [8:0] adra;
  input [8:0] adra_d;
  input [63:0] da_d;
  output [63:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_3_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, COMP_LOOP_1_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_45_tr0,
      COMP_LOOP_2_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_90_tr0, STAGE_VEC_LOOP_C_1_tr0,
      STAGE_MAIN_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_MAIN_LOOP_C_3_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_45_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_90_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_MAIN_LOOP_C_0 = 8'd1,
    STAGE_MAIN_LOOP_C_1 = 8'd2,
    STAGE_MAIN_LOOP_C_2 = 8'd3,
    STAGE_MAIN_LOOP_C_3 = 8'd4,
    modExp_dev_while_C_0 = 8'd5,
    modExp_dev_while_C_1 = 8'd6,
    modExp_dev_while_C_2 = 8'd7,
    modExp_dev_while_C_3 = 8'd8,
    modExp_dev_while_C_4 = 8'd9,
    modExp_dev_while_C_5 = 8'd10,
    modExp_dev_while_C_6 = 8'd11,
    modExp_dev_while_C_7 = 8'd12,
    modExp_dev_while_C_8 = 8'd13,
    modExp_dev_while_C_9 = 8'd14,
    modExp_dev_while_C_10 = 8'd15,
    modExp_dev_while_C_11 = 8'd16,
    STAGE_VEC_LOOP_C_0 = 8'd17,
    COMP_LOOP_C_0 = 8'd18,
    COMP_LOOP_C_1 = 8'd19,
    COMP_LOOP_C_2 = 8'd20,
    COMP_LOOP_C_3 = 8'd21,
    COMP_LOOP_C_4 = 8'd22,
    COMP_LOOP_C_5 = 8'd23,
    COMP_LOOP_C_6 = 8'd24,
    COMP_LOOP_C_7 = 8'd25,
    COMP_LOOP_C_8 = 8'd26,
    COMP_LOOP_C_9 = 8'd27,
    COMP_LOOP_C_10 = 8'd28,
    COMP_LOOP_C_11 = 8'd29,
    COMP_LOOP_C_12 = 8'd30,
    COMP_LOOP_C_13 = 8'd31,
    COMP_LOOP_C_14 = 8'd32,
    COMP_LOOP_C_15 = 8'd33,
    COMP_LOOP_C_16 = 8'd34,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd36,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd37,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd38,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd39,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd40,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd41,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd42,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd43,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd44,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd45,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd46,
    COMP_LOOP_C_17 = 8'd47,
    COMP_LOOP_C_18 = 8'd48,
    COMP_LOOP_C_19 = 8'd49,
    COMP_LOOP_C_20 = 8'd50,
    COMP_LOOP_C_21 = 8'd51,
    COMP_LOOP_C_22 = 8'd52,
    COMP_LOOP_C_23 = 8'd53,
    COMP_LOOP_C_24 = 8'd54,
    COMP_LOOP_C_25 = 8'd55,
    COMP_LOOP_C_26 = 8'd56,
    COMP_LOOP_C_27 = 8'd57,
    COMP_LOOP_C_28 = 8'd58,
    COMP_LOOP_C_29 = 8'd59,
    COMP_LOOP_C_30 = 8'd60,
    COMP_LOOP_C_31 = 8'd61,
    COMP_LOOP_C_32 = 8'd62,
    COMP_LOOP_C_33 = 8'd63,
    COMP_LOOP_C_34 = 8'd64,
    COMP_LOOP_C_35 = 8'd65,
    COMP_LOOP_C_36 = 8'd66,
    COMP_LOOP_C_37 = 8'd67,
    COMP_LOOP_C_38 = 8'd68,
    COMP_LOOP_C_39 = 8'd69,
    COMP_LOOP_C_40 = 8'd70,
    COMP_LOOP_C_41 = 8'd71,
    COMP_LOOP_C_42 = 8'd72,
    COMP_LOOP_C_43 = 8'd73,
    COMP_LOOP_C_44 = 8'd74,
    COMP_LOOP_C_45 = 8'd75,
    COMP_LOOP_C_46 = 8'd76,
    COMP_LOOP_C_47 = 8'd77,
    COMP_LOOP_C_48 = 8'd78,
    COMP_LOOP_C_49 = 8'd79,
    COMP_LOOP_C_50 = 8'd80,
    COMP_LOOP_C_51 = 8'd81,
    COMP_LOOP_C_52 = 8'd82,
    COMP_LOOP_C_53 = 8'd83,
    COMP_LOOP_C_54 = 8'd84,
    COMP_LOOP_C_55 = 8'd85,
    COMP_LOOP_C_56 = 8'd86,
    COMP_LOOP_C_57 = 8'd87,
    COMP_LOOP_C_58 = 8'd88,
    COMP_LOOP_C_59 = 8'd89,
    COMP_LOOP_C_60 = 8'd90,
    COMP_LOOP_C_61 = 8'd91,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd92,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd93,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd94,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd95,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd96,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd97,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd98,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd99,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd100,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd101,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd102,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd103,
    COMP_LOOP_C_62 = 8'd104,
    COMP_LOOP_C_63 = 8'd105,
    COMP_LOOP_C_64 = 8'd106,
    COMP_LOOP_C_65 = 8'd107,
    COMP_LOOP_C_66 = 8'd108,
    COMP_LOOP_C_67 = 8'd109,
    COMP_LOOP_C_68 = 8'd110,
    COMP_LOOP_C_69 = 8'd111,
    COMP_LOOP_C_70 = 8'd112,
    COMP_LOOP_C_71 = 8'd113,
    COMP_LOOP_C_72 = 8'd114,
    COMP_LOOP_C_73 = 8'd115,
    COMP_LOOP_C_74 = 8'd116,
    COMP_LOOP_C_75 = 8'd117,
    COMP_LOOP_C_76 = 8'd118,
    COMP_LOOP_C_77 = 8'd119,
    COMP_LOOP_C_78 = 8'd120,
    COMP_LOOP_C_79 = 8'd121,
    COMP_LOOP_C_80 = 8'd122,
    COMP_LOOP_C_81 = 8'd123,
    COMP_LOOP_C_82 = 8'd124,
    COMP_LOOP_C_83 = 8'd125,
    COMP_LOOP_C_84 = 8'd126,
    COMP_LOOP_C_85 = 8'd127,
    COMP_LOOP_C_86 = 8'd128,
    COMP_LOOP_C_87 = 8'd129,
    COMP_LOOP_C_88 = 8'd130,
    COMP_LOOP_C_89 = 8'd131,
    COMP_LOOP_C_90 = 8'd132,
    STAGE_VEC_LOOP_C_1 = 8'd133,
    STAGE_MAIN_LOOP_C_4 = 8'd134,
    main_C_1 = 8'd135;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        if ( STAGE_MAIN_LOOP_C_3_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010000;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 8'b00010001;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00100010;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00101110;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01001011;
        if ( COMP_LOOP_C_45_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_46;
        end
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01100111;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_62;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b10000011;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b10000100;
        if ( COMP_LOOP_C_90_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 8'b10000101;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_4;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 8'b10000110;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000111;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_dat, r_rsc_triosy_lz, vec_rsc_0_0_i_qa_d, vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_qa_d, vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, vec_rsc_0_0_i_adra_d_pff,
      vec_rsc_0_0_i_da_d_pff, vec_rsc_0_0_i_wea_d_pff, vec_rsc_0_1_i_wea_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_qa_d;
  output vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_qa_d;
  output vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  output [8:0] vec_rsc_0_0_i_adra_d_pff;
  output [63:0] vec_rsc_0_0_i_da_d_pff;
  output vec_rsc_0_0_i_wea_d_pff;
  output vec_rsc_0_1_i_wea_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [7:0] fsm_output;
  wire [9:0] COMP_LOOP_1_operator_64_false_acc_tmp;
  wire [11:0] nl_COMP_LOOP_1_operator_64_false_acc_tmp;
  wire mux_tmp_1;
  wire or_tmp_8;
  wire or_tmp_9;
  wire or_tmp_11;
  wire or_tmp_13;
  wire mux_tmp_52;
  wire and_dcpl_13;
  wire and_dcpl_15;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire and_dcpl_18;
  wire or_tmp_24;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_32;
  wire and_dcpl_35;
  wire and_dcpl_45;
  wire and_dcpl_47;
  wire and_dcpl_48;
  wire and_dcpl_55;
  wire and_dcpl_57;
  wire and_dcpl_58;
  wire or_tmp_85;
  wire nor_tmp_16;
  wire and_dcpl_62;
  wire and_dcpl_64;
  wire and_dcpl_67;
  wire and_dcpl_69;
  wire mux_tmp_93;
  wire and_dcpl_72;
  wire not_tmp_70;
  wire or_dcpl_8;
  wire or_tmp_117;
  wire and_dcpl_91;
  wire or_tmp_121;
  wire mux_tmp_116;
  wire and_dcpl_100;
  wire or_dcpl_15;
  wire or_tmp_139;
  wire mux_tmp_128;
  wire nand_tmp_6;
  wire mux_tmp_130;
  wire or_tmp_141;
  wire nand_tmp_8;
  wire and_dcpl_107;
  reg exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  reg operator_64_false_1_slc_operator_64_false_1_acc_8_itm;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  reg [9:0] operator_64_false_acc_cse_sva;
  wire [11:0] nl_operator_64_false_acc_cse_sva;
  reg [9:0] COMP_LOOP_acc_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_cse_sva;
  reg [9:0] operator_64_false_acc_cse_1_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  wire or_47_cse;
  wire mux_67_cse;
  reg reg_vec_rsc_triosy_0_1_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_45_cse;
  wire or_67_cse;
  wire nand_19_cse;
  wire nor_62_cse;
  reg [7:0] COMP_LOOP_k_9_1_sva_7_0;
  wire mux_88_rmff;
  reg [63:0] tmp_1_lpi_4_dfm;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] COMP_LOOP_1_modExp_dev_1_while_mul_mut;
  reg [63:0] p_sva;
  wire mux_141_itm;
  wire and_dcpl_123;
  wire [63:0] z_out;
  wire [127:0] nl_z_out;
  wire and_dcpl_137;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  wire and_dcpl_141;
  wire and_dcpl_142;
  wire and_dcpl_144;
  wire and_dcpl_147;
  wire and_dcpl_150;
  wire and_dcpl_151;
  wire and_dcpl_152;
  wire and_dcpl_155;
  wire and_dcpl_158;
  wire and_dcpl_159;
  wire and_dcpl_161;
  wire and_dcpl_162;
  wire and_dcpl_163;
  wire and_dcpl_168;
  wire and_dcpl_170;
  wire and_dcpl_171;
  wire and_dcpl_175;
  wire and_dcpl_177;
  wire and_dcpl_178;
  wire and_dcpl_183;
  wire and_dcpl_187;
  wire and_dcpl_190;
  wire [63:0] z_out_3;
  wire and_dcpl_203;
  wire [8:0] z_out_4;
  wire [9:0] nl_z_out_4;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg modExp_dev_exp_1_sva_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2;
  wire tmp_1_lpi_4_dfm_mx0c1;
  wire and_88_rgt;
  wire and_139_cse;
  wire or_210_cse;
  wire not_tmp_153;
  wire nand_tmp;
  wire [8:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  reg COMP_LOOP_acc_psp_sva_8;
  reg [7:0] COMP_LOOP_acc_psp_sva_7_0;
  wire and_117_cse;
  wire and_244_cse;
  wire or_234_cse;
  wire mux_189_cse;
  wire mux_178_cse;
  wire operator_64_false_operator_64_false_or_1_cse;
  wire [60:0] z_out_2_64_4;
  wire nor_108_cse;

  wire[0:0] or_49_nl;
  wire[0:0] or_48_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] and_134_nl;
  wire[0:0] or_82_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] and_127_nl;
  wire[0:0] or_80_nl;
  wire[0:0] and_128_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] nand_nl;
  wire[0:0] or_79_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] nand_16_nl;
  wire[0:0] or_76_nl;
  wire[0:0] nor_63_nl;
  wire[0:0] nor_86_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] or_190_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] or_99_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] and_121_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] or_191_nl;
  wire[0:0] or_192_nl;
  wire[0:0] nor_76_nl;
  wire[0:0] operator_64_false_or_2_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] and_90_nl;
  wire[0:0] and_94_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] and_95_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] nor_41_nl;
  wire[0:0] and_119_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] or_129_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] nand_4_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] nand_25_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] nor_130_nl;
  wire[7:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] or_221_nl;
  wire[0:0] or_220_nl;
  wire[0:0] mux_184_nl;
  wire[0:0] mux_183_nl;
  wire[0:0] mux_182_nl;
  wire[0:0] nand_29_nl;
  wire[0:0] mux_181_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] or_222_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] or_218_nl;
  wire[0:0] mux_187_nl;
  wire[0:0] or_235_nl;
  wire[0:0] mux_186_nl;
  wire[0:0] or_238_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] or_163_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] or_119_nl;
  wire[0:0] nor_77_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] nor_34_nl;
  wire[0:0] nor_35_nl;
  wire[0:0] COMP_LOOP_mux_8_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] or_177_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] not_406_nl;
  wire[0:0] mux_192_nl;
  wire[0:0] nand_30_nl;
  wire[0:0] mux_191_nl;
  wire[0:0] and_242_nl;
  wire[0:0] and_243_nl;
  wire[0:0] mux_190_nl;
  wire[0:0] or_232_nl;
  wire[0:0] mux_188_nl;
  wire[0:0] or_231_nl;
  wire[0:0] or_230_nl;
  wire[0:0] nor_75_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] and_132_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] or_188_nl;
  wire[0:0] or_189_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] nor_46_nl;
  wire[0:0] nor_47_nl;
  wire[0:0] nor_44_nl;
  wire[0:0] nor_45_nl;
  wire[0:0] nand_5_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] nor_32_nl;
  wire[0:0] nor_33_nl;
  wire[0:0] and_19_nl;
  wire[0:0] and_23_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] or_31_nl;
  wire[0:0] and_28_nl;
  wire[0:0] and_31_nl;
  wire[0:0] and_33_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] nor_72_nl;
  wire[0:0] nor_73_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] or_186_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] or_42_nl;
  wire[0:0] or_41_nl;
  wire[0:0] or_187_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] or_38_nl;
  wire[0:0] or_37_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] nor_69_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] or_50_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] or_44_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] or_184_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] or_61_nl;
  wire[0:0] or_60_nl;
  wire[0:0] or_185_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_57_nl;
  wire[0:0] or_56_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] nor_64_nl;
  wire[0:0] nor_65_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] or_68_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] and_131_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] or_211_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] or_209_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] and_nl;
  wire[0:0] nor_99_nl;
  wire[63:0] COMP_LOOP_mux_9_nl;
  wire[63:0] COMP_LOOP_mux1h_33_nl;
  wire[0:0] and_247_nl;
  wire[0:0] mux_193_nl;
  wire[0:0] nand_34_nl;
  wire[0:0] or_239_nl;
  wire[9:0] COMP_LOOP_mux_10_nl;
  wire[9:0] COMP_LOOP_mux_11_nl;
  wire[65:0] acc_1_nl;
  wire[66:0] nl_acc_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_58_nl;
  wire[54:0] operator_64_false_or_6_nl;
  wire[54:0] operator_64_false_operator_64_false_nor_1_nl;
  wire[54:0] operator_64_false_operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_or_7_nl;
  wire[8:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_or_8_nl;
  wire[0:0] operator_64_false_or_9_nl;
  wire[0:0] operator_64_false_or_10_nl;
  wire[0:0] operator_64_false_operator_64_false_or_59_nl;
  wire[7:0] operator_64_false_operator_64_false_or_60_nl;
  wire[7:0] operator_64_false_and_4_nl;
  wire[7:0] operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_nor_61_nl;
  wire[0:0] operator_64_false_operator_64_false_or_61_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl_1;
  wire[0:0] operator_64_false_or_5_nl;
  wire[0:0] operator_64_false_and_4_nl_1;
  wire[0:0] operator_64_false_and_5_nl;
  wire[0:0] operator_64_false_or_6_nl_1;
  wire[63:0] operator_64_false_or_7_nl_1;
  wire[63:0] operator_64_false_mux1h_4_nl;
  wire[0:0] operator_64_false_and_6_nl;
  wire[0:0] operator_64_false_and_7_nl;
  wire[0:0] operator_64_false_or_8_nl_1;
  wire[7:0] STAGE_MAIN_LOOP_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_57_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] nor_57_nl;
  wire[0:0] nor_58_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign nor_57_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[6])) | (fsm_output[3]));
  assign nor_58_nl = ~((fsm_output[1]) | (fsm_output[6]) | (~ (fsm_output[3])));
  assign mux_90_nl = MUX_s_1_2_2(nor_57_nl, nor_58_nl, fsm_output[0]);
  assign and_57_nl = mux_90_nl & and_dcpl_55;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      and_57_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_95_nl;
  wire[0:0] mux_94_nl;
  wire[0:0] or_193_nl;
  wire[0:0] or_194_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] nand_22_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] and_124_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] nor_56_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign or_193_nl = (fsm_output[4]) | (~ (fsm_output[3])) | (~ (fsm_output[6]))
      | (fsm_output[1]) | (~ (fsm_output[5]));
  assign mux_93_nl = MUX_s_1_2_2(or_tmp_85, (~ nor_tmp_16), fsm_output[6]);
  assign or_194_nl = (fsm_output[4:3]!=2'b10) | mux_93_nl;
  assign mux_94_nl = MUX_s_1_2_2(or_193_nl, or_194_nl, fsm_output[2]);
  assign mux_91_nl = MUX_s_1_2_2(nor_tmp_16, (~ or_tmp_85), fsm_output[6]);
  assign and_124_nl = (fsm_output[3]) & mux_91_nl;
  assign nor_56_nl = ~((~ (fsm_output[3])) | (fsm_output[6]) | (fsm_output[1]) |
      (~ (fsm_output[5])));
  assign mux_92_nl = MUX_s_1_2_2(and_124_nl, nor_56_nl, fsm_output[4]);
  assign nand_22_nl = ~((fsm_output[2]) & mux_92_nl);
  assign mux_95_nl = MUX_s_1_2_2(mux_94_nl, nand_22_nl, fsm_output[0]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = ~(mux_95_nl | (fsm_output[7]));
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_4[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0 = ~ (z_out_2_64_4[60]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (z_out_2_64_4[59]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_1_slc_operator_64_false_1_acc_8_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0 = ~ exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out_1[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = z_out_2_64_4[0];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  COMP_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse),
      .z(modExp_dev_while_rem_cmp_z)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(mux_88_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_3_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_45_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_45_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_90_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0])
    );
  assign or_47_cse = (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6]));
  assign or_49_nl = (~ (fsm_output[4])) | (fsm_output[6]);
  assign or_48_nl = (fsm_output[4]) | (~ (fsm_output[6]));
  assign mux_67_cse = MUX_s_1_2_2(or_49_nl, or_48_nl, fsm_output[3]);
  assign or_45_cse = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[3]) | (~ (fsm_output[4]))
      | (fsm_output[6]);
  assign or_67_cse = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[3]) | (~ (fsm_output[4]))
      | (fsm_output[6]);
  assign and_117_cse = (fsm_output[1:0]==2'b11);
  assign and_134_nl = (fsm_output[4:3]==2'b11);
  assign or_82_nl = (~((fsm_output[3]) | (fsm_output[0]) | (fsm_output[1]))) | (fsm_output[4]);
  assign mux_85_nl = MUX_s_1_2_2(and_134_nl, or_82_nl, fsm_output[5]);
  assign and_127_nl = (fsm_output[1]) & (fsm_output[4]);
  assign or_80_nl = (fsm_output[1]) | (fsm_output[4]);
  assign mux_83_nl = MUX_s_1_2_2(and_127_nl, or_80_nl, fsm_output[0]);
  assign and_128_nl = (fsm_output[5]) & (fsm_output[3]);
  assign mux_84_nl = MUX_s_1_2_2((fsm_output[4]), mux_83_nl, and_128_nl);
  assign mux_86_nl = MUX_s_1_2_2(mux_85_nl, mux_84_nl, fsm_output[2]);
  assign nand_nl = ~((fsm_output[3]) & (fsm_output[1]));
  assign or_79_nl = (fsm_output[4:3]!=2'b00);
  assign mux_81_nl = MUX_s_1_2_2(nand_nl, or_79_nl, fsm_output[5]);
  assign nand_16_nl = ~((fsm_output[3]) & (nor_62_cse | (fsm_output[4])));
  assign or_76_nl = (fsm_output[3]) | (((fsm_output[1:0]!=2'b01)) & (fsm_output[4]));
  assign mux_80_nl = MUX_s_1_2_2(nand_16_nl, or_76_nl, fsm_output[5]);
  assign mux_82_nl = MUX_s_1_2_2(mux_81_nl, mux_80_nl, fsm_output[2]);
  assign mux_87_nl = MUX_s_1_2_2(mux_86_nl, mux_82_nl, fsm_output[6]);
  assign nor_63_nl = ~((fsm_output[6]) | (fsm_output[2]) | (fsm_output[5]) | (fsm_output[3])
      | and_117_cse | (fsm_output[4]));
  assign mux_88_rmff = MUX_s_1_2_2(mux_87_nl, nor_63_nl, fsm_output[7]);
  assign and_88_rgt = and_dcpl_48 & and_dcpl_15;
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_3[8:1]),
      and_dcpl_64);
  assign nand_7_nl = ~((fsm_output[5]) & (~ mux_141_itm));
  assign mux_142_nl = MUX_s_1_2_2(nand_7_nl, or_tmp_141, fsm_output[4]);
  assign mux_143_nl = MUX_s_1_2_2(nand_tmp_8, mux_142_nl, fsm_output[0]);
  assign mux_144_nl = MUX_s_1_2_2(mux_143_nl, mux_tmp_130, fsm_output[2]);
  assign nor_83_nl = ~(mux_144_nl | (fsm_output[7]));
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_9_2_2((z_out_1[8:0]), ({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      nor_83_nl);
  assign or_221_nl = (~ (fsm_output[1])) | (fsm_output[5]) | (fsm_output[6]) | (fsm_output[3]);
  assign or_220_nl = (~ (fsm_output[1])) | (fsm_output[5]) | not_tmp_153;
  assign mux_178_cse = MUX_s_1_2_2(or_221_nl, or_220_nl, fsm_output[0]);
  assign and_244_cse = (fsm_output[6]) & (fsm_output[3]);
  assign or_234_cse = (fsm_output[1]) | (fsm_output[6]);
  assign mux_189_cse = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[6]);
  assign nor_62_cse = ~((fsm_output[1:0]!=2'b00));
  assign nl_COMP_LOOP_1_operator_64_false_acc_tmp = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b0}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign COMP_LOOP_1_operator_64_false_acc_tmp = nl_COMP_LOOP_1_operator_64_false_acc_tmp[9:0];
  assign mux_tmp_1 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[5]);
  assign or_tmp_8 = (fsm_output[4]) | (fsm_output[1]) | (fsm_output[3]) | (fsm_output[5])
      | (fsm_output[6]);
  assign or_tmp_9 = (fsm_output[6:3]!=4'b0000);
  assign or_tmp_11 = (fsm_output[6:4]!=3'b000);
  assign or_tmp_13 = (fsm_output[6:5]!=2'b00);
  assign nor_75_nl = ~((fsm_output[6:0]!=7'b0000000));
  assign and_132_nl = (fsm_output[2]) & (fsm_output[0]);
  assign mux_60_nl = MUX_s_1_2_2(or_tmp_9, or_tmp_8, and_132_nl);
  assign mux_tmp_52 = MUX_s_1_2_2(nor_75_nl, mux_60_nl, fsm_output[7]);
  assign and_dcpl_13 = ~((fsm_output[2]) | (fsm_output[7]));
  assign and_dcpl_15 = (fsm_output[4]) & (~ (fsm_output[0])) & and_dcpl_13;
  assign and_dcpl_16 = (fsm_output[1]) & (~ (fsm_output[5]));
  assign and_dcpl_17 = ~((fsm_output[3]) | (fsm_output[6]));
  assign and_dcpl_18 = and_dcpl_17 & and_dcpl_16;
  assign or_tmp_24 = (fsm_output[5]) | (~ (fsm_output[1]));
  assign and_dcpl_24 = ~((fsm_output[4]) | (fsm_output[0]));
  assign and_dcpl_25 = and_dcpl_24 & and_dcpl_13;
  assign and_dcpl_32 = ~((fsm_output[5:4]!=2'b00));
  assign nand_19_cse = ~((fsm_output[3]) & (fsm_output[6]) & (fsm_output[1]) & (~
      (fsm_output[5])));
  assign and_dcpl_35 = ~((fsm_output[5]) | (fsm_output[7]));
  assign and_dcpl_45 = (fsm_output[2]) & (~ (fsm_output[7]));
  assign and_dcpl_47 = ~((fsm_output[1]) | (fsm_output[5]));
  assign and_dcpl_48 = and_dcpl_17 & and_dcpl_47;
  assign and_dcpl_55 = (fsm_output[5:4]==2'b11) & and_dcpl_45;
  assign and_dcpl_57 = (~ (fsm_output[4])) & (fsm_output[0]);
  assign and_dcpl_58 = and_dcpl_57 & and_dcpl_45;
  assign or_tmp_85 = (fsm_output[1]) | (fsm_output[5]);
  assign nor_tmp_16 = (fsm_output[1]) & (fsm_output[5]);
  assign and_dcpl_62 = and_dcpl_48 & and_dcpl_58;
  assign or_188_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (~ (fsm_output[5]))
      | (~ (fsm_output[1])) | (fsm_output[6]) | (fsm_output[3]);
  assign or_189_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[5]) | (fsm_output[1])
      | (~ and_244_cse);
  assign mux_100_nl = MUX_s_1_2_2(or_188_nl, or_189_nl, fsm_output[2]);
  assign and_dcpl_64 = ~(mux_100_nl | (fsm_output[7]));
  assign and_dcpl_67 = ~((~ and_dcpl_18) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[7]));
  assign and_dcpl_69 = and_dcpl_48 & and_dcpl_57 & and_dcpl_13;
  assign mux_tmp_93 = MUX_s_1_2_2(or_tmp_9, or_tmp_8, fsm_output[2]);
  assign nor_46_nl = ~((fsm_output[6:3]!=4'b0100));
  assign nor_47_nl = ~((fsm_output[5:4]!=2'b01) | (~ and_244_cse));
  assign mux_104_nl = MUX_s_1_2_2(nor_46_nl, nor_47_nl, fsm_output[0]);
  assign and_dcpl_72 = mux_104_nl & (fsm_output[1]) & (~ (fsm_output[2])) & (~ (fsm_output[7]));
  assign nor_44_nl = ~((fsm_output[6]) | (~ (fsm_output[3])));
  assign nor_45_nl = ~((~ (fsm_output[6])) | (fsm_output[3]));
  assign not_tmp_70 = MUX_s_1_2_2(nor_44_nl, nor_45_nl, fsm_output[0]);
  assign or_dcpl_8 = (fsm_output[3]) | (fsm_output[6]);
  assign or_tmp_117 = nor_62_cse | (fsm_output[5]);
  assign and_dcpl_91 = and_dcpl_47 & (~ (fsm_output[0])) & and_dcpl_45;
  assign or_tmp_121 = (fsm_output[4]) | (~ and_244_cse);
  assign mux_tmp_116 = MUX_s_1_2_2((~ and_244_cse), or_dcpl_8, fsm_output[4]);
  assign and_dcpl_100 = and_244_cse & (~ (fsm_output[1])) & (fsm_output[5]) & and_dcpl_25;
  assign or_dcpl_15 = or_dcpl_8 | or_tmp_24 | (fsm_output[0]) | (~ (fsm_output[4]))
      | (fsm_output[2]) | (fsm_output[7]);
  assign or_tmp_139 = (fsm_output[5]) | (~ and_244_cse);
  assign nand_5_nl = ~((fsm_output[5]) & (~(or_234_cse & (fsm_output[3]))));
  assign mux_tmp_128 = MUX_s_1_2_2(nand_5_nl, or_tmp_139, fsm_output[4]);
  assign nand_tmp_6 = ~((fsm_output[5]) & (~ and_244_cse));
  assign mux_138_nl = MUX_s_1_2_2(nand_tmp_6, or_tmp_139, fsm_output[4]);
  assign mux_tmp_130 = MUX_s_1_2_2(mux_138_nl, mux_tmp_128, fsm_output[0]);
  assign or_tmp_141 = (fsm_output[5]) | (~((fsm_output[1]) & (fsm_output[6]) & (fsm_output[3])));
  assign mux_141_itm = MUX_s_1_2_2(mux_189_cse, and_244_cse, fsm_output[1]);
  assign nand_tmp_8 = (fsm_output[5:4]!=2'b10) | mux_141_itm;
  assign and_dcpl_107 = (~ (fsm_output[5])) & (fsm_output[0]) & (~ (fsm_output[7]));
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4 = not_tmp_70 & (fsm_output[1])
      & (fsm_output[5]) & (~ (fsm_output[4])) & and_dcpl_45;
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 = not_tmp_70 & (~ (fsm_output[1]))
      & and_dcpl_55;
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_48 & and_dcpl_57 & (fsm_output[2])
      & (fsm_output[7]);
  assign exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2 = (fsm_output[3]) & (~ (fsm_output[6]))
      & nor_tmp_16 & and_dcpl_58;
  assign nor_32_nl = ~((~ (operator_64_false_acc_cse_1_sva[0])) | (~ (fsm_output[4]))
      | (~ (fsm_output[1])) | (fsm_output[6]) | (fsm_output[3]));
  assign nor_33_nl = ~((~ (operator_64_false_acc_cse_sva[0])) | (fsm_output[4]) |
      (fsm_output[1]) | (~ and_244_cse));
  assign mux_167_nl = MUX_s_1_2_2(nor_32_nl, nor_33_nl, fsm_output[2]);
  assign tmp_1_lpi_4_dfm_mx0c1 = mux_167_nl & and_dcpl_107;
  assign and_19_nl = and_dcpl_18 & and_dcpl_15;
  assign or_31_nl = (~ (fsm_output[5])) | (fsm_output[1]);
  assign mux_62_nl = MUX_s_1_2_2(or_31_nl, or_tmp_24, fsm_output[4]);
  assign and_23_nl = (~ mux_62_nl) & (~ (fsm_output[3])) & (~ (fsm_output[6])) &
      (fsm_output[0]) & and_dcpl_13;
  assign and_28_nl = and_244_cse & and_dcpl_16 & and_dcpl_25;
  assign and_31_nl = and_244_cse & ((fsm_output[4]) ^ (fsm_output[0])) & and_dcpl_16
      & and_dcpl_13;
  assign nor_72_nl = ~((fsm_output[2:0]!=3'b100) | (~ and_244_cse));
  assign nor_73_nl = ~((fsm_output[2]) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (fsm_output[6]) | (fsm_output[3]));
  assign mux_63_nl = MUX_s_1_2_2(nor_72_nl, nor_73_nl, fsm_output[7]);
  assign and_33_nl = mux_63_nl & and_dcpl_32;
  assign vec_rsc_0_0_i_adra_d_pff = MUX1HOT_v_9_5_2((COMP_LOOP_1_operator_64_false_acc_tmp[9:1]),
      ({COMP_LOOP_acc_psp_sva_8 , COMP_LOOP_acc_psp_sva_7_0}), (operator_64_false_acc_cse_1_sva[9:1]),
      (COMP_LOOP_acc_cse_sva[9:1]), (operator_64_false_acc_cse_sva[9:1]), {and_19_nl
      , and_23_nl , and_28_nl , and_31_nl , and_33_nl});
  assign vec_rsc_0_0_i_da_d_pff = COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign or_42_nl = (operator_64_false_acc_cse_1_sva[0]) | (fsm_output[7]);
  assign or_41_nl = (COMP_LOOP_acc_cse_sva[0]) | (fsm_output[7]);
  assign mux_65_nl = MUX_s_1_2_2(or_42_nl, or_41_nl, fsm_output[4]);
  assign or_186_nl = nand_19_cse | mux_65_nl;
  assign or_38_nl = (~ (fsm_output[5])) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[4])
      | (fsm_output[7]);
  assign or_37_nl = (fsm_output[5:4]!=2'b00) | (operator_64_false_acc_cse_sva[0])
      | (~ (fsm_output[7]));
  assign mux_64_nl = MUX_s_1_2_2(or_38_nl, or_37_nl, fsm_output[1]);
  assign or_187_nl = (fsm_output[3]) | (fsm_output[6]) | mux_64_nl;
  assign mux_66_nl = MUX_s_1_2_2(or_186_nl, or_187_nl, fsm_output[0]);
  assign vec_rsc_0_0_i_wea_d_pff = ~(mux_66_nl | (fsm_output[2]));
  assign nor_68_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (operator_64_false_acc_cse_sva[0])
      | (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6])));
  assign or_50_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[0]) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign mux_68_nl = MUX_s_1_2_2(mux_67_cse, or_47_cse, STAGE_VEC_LOOP_j_sva_9_0[0]);
  assign or_44_nl = (~ exit_COMP_LOOP_1_modExp_dev_1_while_sva) | (COMP_LOOP_acc_cse_sva[0]);
  assign mux_69_nl = MUX_s_1_2_2(mux_68_nl, or_45_cse, or_44_nl);
  assign mux_70_nl = MUX_s_1_2_2(or_50_nl, mux_69_nl, fsm_output[0]);
  assign nor_69_nl = ~((fsm_output[2]) | mux_70_nl);
  assign mux_71_nl = MUX_s_1_2_2(nor_68_nl, nor_69_nl, fsm_output[1]);
  assign vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_71_nl & and_dcpl_35;
  assign or_61_nl = (~ (operator_64_false_acc_cse_1_sva[0])) | (fsm_output[7]);
  assign or_60_nl = (~ (COMP_LOOP_acc_cse_sva[0])) | (fsm_output[7]);
  assign mux_73_nl = MUX_s_1_2_2(or_61_nl, or_60_nl, fsm_output[4]);
  assign or_184_nl = nand_19_cse | mux_73_nl;
  assign or_57_nl = (~ (fsm_output[5])) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[4])
      | (fsm_output[7]);
  assign or_56_nl = (fsm_output[5:4]!=2'b00) | (~((operator_64_false_acc_cse_sva[0])
      & (fsm_output[7])));
  assign mux_72_nl = MUX_s_1_2_2(or_57_nl, or_56_nl, fsm_output[1]);
  assign or_185_nl = (fsm_output[3]) | (fsm_output[6]) | mux_72_nl;
  assign mux_74_nl = MUX_s_1_2_2(or_184_nl, or_185_nl, fsm_output[0]);
  assign vec_rsc_0_1_i_wea_d_pff = ~(mux_74_nl | (fsm_output[2]));
  assign nor_64_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (~ (operator_64_false_acc_cse_sva[0]))
      | (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[6])));
  assign or_68_nl = (~ (COMP_LOOP_1_operator_64_false_acc_tmp[0])) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]);
  assign mux_76_nl = MUX_s_1_2_2(or_47_cse, mux_67_cse, STAGE_VEC_LOOP_j_sva_9_0[0]);
  assign and_131_nl = exit_COMP_LOOP_1_modExp_dev_1_while_sva & (COMP_LOOP_acc_cse_sva[0]);
  assign mux_77_nl = MUX_s_1_2_2(or_67_cse, mux_76_nl, and_131_nl);
  assign mux_78_nl = MUX_s_1_2_2(or_68_nl, mux_77_nl, fsm_output[0]);
  assign nor_65_nl = ~((fsm_output[2]) | mux_78_nl);
  assign mux_79_nl = MUX_s_1_2_2(nor_64_nl, nor_65_nl, fsm_output[1]);
  assign vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = mux_79_nl & and_dcpl_35;
  assign and_139_cse = (fsm_output[2]) & (fsm_output[4]);
  assign and_dcpl_123 = (~ (fsm_output[7])) & (fsm_output[2]) & and_dcpl_32 & (fsm_output[1:0]==2'b01)
      & and_dcpl_17;
  assign and_dcpl_137 = (fsm_output[2]) & (~ (fsm_output[4])) & (~ (fsm_output[5]))
      & (fsm_output[7]) & (~ (fsm_output[1])) & (fsm_output[0]) & and_dcpl_17;
  assign and_dcpl_141 = (fsm_output[5]) & (~ (fsm_output[7]));
  assign and_dcpl_142 = (~ (fsm_output[4])) & (fsm_output[2]);
  assign and_dcpl_144 = and_dcpl_142 & and_dcpl_141 & (fsm_output[1]) & (fsm_output[0])
      & (~ (fsm_output[6])) & (fsm_output[3]);
  assign and_dcpl_147 = (fsm_output[1:0]==2'b10) & and_dcpl_17;
  assign and_dcpl_150 = (fsm_output[4]) & (~ (fsm_output[2])) & and_dcpl_35;
  assign and_dcpl_151 = and_dcpl_150 & and_dcpl_147;
  assign or_210_cse = (fsm_output[6]) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (~ (fsm_output[5])) | (fsm_output[2]) | (fsm_output[4]);
  assign or_211_nl = (~ (fsm_output[6])) | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5])
      | (~((fsm_output[2]) & (fsm_output[4])));
  assign mux_174_nl = MUX_s_1_2_2(or_210_cse, or_211_nl, fsm_output[3]);
  assign and_dcpl_152 = ~(mux_174_nl | (fsm_output[7]));
  assign and_dcpl_155 = and_dcpl_142 & (~ (fsm_output[5])) & (fsm_output[7]) & and_dcpl_147;
  assign and_dcpl_158 = and_dcpl_142 & and_dcpl_35;
  assign and_dcpl_159 = and_dcpl_158 & nor_62_cse & and_dcpl_17;
  assign and_dcpl_161 = (fsm_output[1:0]==2'b01) & and_dcpl_17;
  assign and_dcpl_162 = and_dcpl_158 & and_dcpl_161;
  assign and_dcpl_163 = and_dcpl_150 & and_dcpl_161;
  assign and_dcpl_168 = (~ (fsm_output[4])) & (~ (fsm_output[2])) & and_dcpl_141
      & nor_62_cse & (fsm_output[6]) & (fsm_output[3]);
  assign and_dcpl_170 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_171 = and_dcpl_170 & and_dcpl_17;
  assign and_dcpl_175 = (~ (fsm_output[2])) & (~ (fsm_output[4])) & and_dcpl_35 &
      and_dcpl_171;
  assign and_dcpl_177 = (fsm_output[2]) & (~ (fsm_output[4])) & and_dcpl_35;
  assign and_dcpl_178 = and_dcpl_177 & and_dcpl_171;
  assign or_209_nl = (~ (fsm_output[6])) | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5])
      | (~ and_139_cse);
  assign mux_175_nl = MUX_s_1_2_2(or_210_cse, or_209_nl, fsm_output[3]);
  assign nor_108_cse = ~(mux_175_nl | (fsm_output[7]));
  assign and_dcpl_183 = and_139_cse & and_dcpl_35 & (fsm_output[1:0]==2'b00) & and_dcpl_17;
  assign and_nl = (fsm_output[2:0]==3'b111);
  assign nor_99_nl = ~((fsm_output[2:0]!=3'b000));
  assign mux_176_nl = MUX_s_1_2_2(and_nl, nor_99_nl, fsm_output[6]);
  assign and_dcpl_187 = mux_176_nl & (~ (fsm_output[4])) & (fsm_output[5]) & (~ (fsm_output[7]))
      & (fsm_output[3]);
  assign and_dcpl_190 = and_dcpl_177 & and_dcpl_170 & (fsm_output[6]) & (fsm_output[3]);
  assign and_dcpl_203 = (fsm_output==8'b01101000);
  assign not_tmp_153 = ~((fsm_output[6]) & (fsm_output[3]));
  assign nand_tmp = ~((fsm_output[5]) & not_tmp_153);
  assign operator_64_false_operator_64_false_or_1_cse = (~(and_dcpl_144 | and_dcpl_151
      | and_dcpl_152 | and_dcpl_159 | and_dcpl_162 | and_dcpl_163 | and_dcpl_168))
      | and_dcpl_155;
  always @(posedge clk) begin
    if ( mux_tmp_52 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_17 & (fsm_output[1]) & and_dcpl_32
          & (~ (fsm_output[0])) & (fsm_output[2]) & (fsm_output[7]) & (z_out_2_64_4[0]);
      reg_ensig_cgo_cse <= mux_88_rmff;
    end
  end
  always @(posedge clk) begin
    reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(z_out, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        nor_86_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        and_dcpl_67);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_67);
    modExp_dev_exp_1_sva_0 <= (COMP_LOOP_mux_8_nl & (~(and_dcpl_17 & nor_tmp_16 &
        and_dcpl_25))) | mux_172_nl | (fsm_output[7]);
  end
  always @(posedge clk) begin
    if ( mux_tmp_52 | and_dcpl_69 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_4[3:0]), and_dcpl_69);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_76_nl, mux_tmp_93, fsm_output[7]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_69 | and_dcpl_62 | and_dcpl_72 | and_dcpl_64 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4
        | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5 ) begin
      COMP_LOOP_1_modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_4_2(z_out_3, z_out,
          64'b0000000000000000000000000000000000000000000000000000000000000001, modExp_dev_while_rem_cmp_z,
          {and_dcpl_69 , operator_64_false_or_2_nl , and_dcpl_72 , COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (and_dcpl_17 & ((fsm_output[4]) ^ (fsm_output[2])) & and_dcpl_47 &
        (~ (fsm_output[0])) & (~ (fsm_output[7]))) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1
        ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_1[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_114_nl | and_88_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z, and_88_rgt);
    end
  end
  always @(posedge clk) begin
    if ( mux_124_nl | (fsm_output[7]) ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_4_2(STAGE_MAIN_LOOP_div_cmp_z, z_out_3, vec_rsc_0_0_i_qa_d,
          vec_rsc_0_1_i_qa_d, {and_90_nl , and_dcpl_62 , and_94_nl , and_95_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_62 | and_dcpl_64 | exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2
        | and_dcpl_100 ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= MUX1HOT_s_1_3_2((~ (z_out_2_64_4[60])),
          (z_out_2_64_4[59]), (~ (z_out_2_64_4[59])), {modExp_dev_while_or_nl , exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2
          , and_dcpl_100});
    end
  end
  always @(posedge clk) begin
    if ( mux_177_nl & (~((fsm_output[2]) | (fsm_output[7]) | (fsm_output[1]))) )
        begin
      COMP_LOOP_k_9_1_sva_7_0 <= MUX_v_8_2_2(8'b00000000, (z_out_4[7:0]), nand_25_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_15 ) begin
      operator_64_false_acc_cse_1_sva <= COMP_LOOP_1_operator_64_false_acc_tmp;
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_184_nl | (fsm_output[7])) ) begin
      COMP_LOOP_acc_psp_sva_8 <= COMP_LOOP_COMP_LOOP_mux_rgt[8];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_187_nl | (fsm_output[7])) ) begin
      COMP_LOOP_acc_psp_sva_7_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[7:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_15 ) begin
      operator_64_false_1_slc_operator_64_false_1_acc_8_itm <= z_out_2_64_4[4];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_sva <= 10'b0000000000;
    end
    else if ( mux_160_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_cse_sva <= nl_COMP_LOOP_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_sva <= 10'b0000000000;
    end
    else if ( ~ mux_165_nl ) begin
      operator_64_false_acc_cse_sva <= nl_operator_64_false_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( (mux_166_nl & and_dcpl_107) | tmp_1_lpi_4_dfm_mx0c1 ) begin
      tmp_1_lpi_4_dfm <= MUX_v_64_2_2(vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, tmp_1_lpi_4_dfm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_192_nl | (fsm_output[7]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), not_406_nl);
    end
  end
  assign or_99_nl = (~ (fsm_output[2])) | (~ (fsm_output[1])) | (fsm_output[6]);
  assign and_121_nl = (fsm_output[0]) & (fsm_output[1]) & (fsm_output[6]);
  assign mux_97_nl = MUX_s_1_2_2((~ (fsm_output[6])), and_121_nl, fsm_output[2]);
  assign mux_98_nl = MUX_s_1_2_2(or_99_nl, mux_97_nl, fsm_output[5]);
  assign or_190_nl = (fsm_output[4]) | mux_98_nl;
  assign or_191_nl = ((fsm_output[5]) & (fsm_output[2]) & (fsm_output[1])) | (fsm_output[6]);
  assign or_192_nl = (fsm_output[5]) | (~((fsm_output[2]) & ((fsm_output[1:0]!=2'b00))
      & (fsm_output[6])));
  assign mux_96_nl = MUX_s_1_2_2(or_191_nl, or_192_nl, fsm_output[4]);
  assign mux_99_nl = MUX_s_1_2_2(or_190_nl, mux_96_nl, fsm_output[3]);
  assign nor_86_nl = ~(mux_99_nl | (fsm_output[7]));
  assign or_177_nl = (fsm_output[5:4]!=2'b10) | mux_189_cse;
  assign mux_169_nl = MUX_s_1_2_2(nand_tmp_6, or_tmp_141, fsm_output[4]);
  assign mux_170_nl = MUX_s_1_2_2(mux_169_nl, mux_tmp_128, fsm_output[0]);
  assign mux_171_nl = MUX_s_1_2_2(or_177_nl, mux_170_nl, fsm_output[2]);
  assign COMP_LOOP_mux_8_nl = MUX_s_1_2_2(modExp_dev_exp_1_sva_0, (z_out_3[0]), mux_171_nl);
  assign mux_172_nl = MUX_s_1_2_2(nand_tmp_8, mux_tmp_130, fsm_output[2]);
  assign nor_76_nl = ~((fsm_output[6:1]!=6'b000000));
  assign operator_64_false_or_2_nl = and_dcpl_62 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c5
      | and_dcpl_64;
  assign mux_114_nl = MUX_s_1_2_2((~ or_tmp_11), mux_tmp_93, fsm_output[7]);
  assign and_90_nl = and_dcpl_48 & and_dcpl_24 & and_dcpl_45;
  assign mux_126_nl = MUX_s_1_2_2(mux_tmp_116, or_tmp_121, STAGE_VEC_LOOP_j_sva_9_0[0]);
  assign mux_127_nl = MUX_s_1_2_2(mux_126_nl, or_45_cse, COMP_LOOP_acc_cse_sva[0]);
  assign and_94_nl = (~ mux_127_nl) & and_dcpl_91;
  assign mux_128_nl = MUX_s_1_2_2(or_tmp_121, mux_tmp_116, STAGE_VEC_LOOP_j_sva_9_0[0]);
  assign mux_129_nl = MUX_s_1_2_2(or_67_cse, mux_128_nl, COMP_LOOP_acc_cse_sva[0]);
  assign and_95_nl = (~ mux_129_nl) & and_dcpl_91;
  assign nor_41_nl = ~(((fsm_output[2:1]==2'b11)) | (fsm_output[5]));
  assign and_119_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[1]) & (fsm_output[5]);
  assign mux_122_nl = MUX_s_1_2_2(nor_41_nl, and_119_nl, fsm_output[3]);
  assign or_129_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5]);
  assign mux_120_nl = MUX_s_1_2_2(or_129_nl, or_tmp_117, fsm_output[2]);
  assign mux_121_nl = MUX_s_1_2_2(mux_120_nl, (fsm_output[5]), fsm_output[3]);
  assign mux_123_nl = MUX_s_1_2_2(mux_122_nl, mux_121_nl, fsm_output[4]);
  assign nand_4_nl = ~((fsm_output[2]) & (~ or_tmp_117));
  assign mux_118_nl = MUX_s_1_2_2((~ (fsm_output[5])), nand_4_nl, fsm_output[3]);
  assign mux_119_nl = MUX_s_1_2_2(mux_118_nl, (fsm_output[5]), fsm_output[4]);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, mux_119_nl, fsm_output[6]);
  assign modExp_dev_while_or_nl = and_dcpl_62 | and_dcpl_64;
  assign nand_25_nl = ~(and_dcpl_48 & (fsm_output[4]) & (fsm_output[0]) & and_dcpl_13);
  assign nor_129_nl = ~((fsm_output[6]) | (fsm_output[5]) | (~((fsm_output[0]) &
      (fsm_output[4]))));
  assign nor_130_nl = ~((~ (fsm_output[6])) | (~ (fsm_output[5])) | (fsm_output[0])
      | (fsm_output[4]));
  assign mux_177_nl = MUX_s_1_2_2(nor_129_nl, nor_130_nl, fsm_output[3]);
  assign mux_181_nl = MUX_s_1_2_2((fsm_output[3]), (~ (fsm_output[3])), fsm_output[6]);
  assign nand_29_nl = ~((fsm_output[5]) & mux_181_nl);
  assign mux_182_nl = MUX_s_1_2_2(nand_29_nl, nand_tmp, fsm_output[1]);
  assign or_222_nl = (~ (fsm_output[5])) | (fsm_output[3]);
  assign mux_180_nl = MUX_s_1_2_2(nand_tmp, or_222_nl, and_117_cse);
  assign mux_183_nl = MUX_s_1_2_2(mux_182_nl, mux_180_nl, fsm_output[2]);
  assign or_218_nl = (fsm_output[5]) | not_tmp_153;
  assign mux_179_nl = MUX_s_1_2_2(mux_178_cse, or_218_nl, fsm_output[2]);
  assign mux_184_nl = MUX_s_1_2_2(mux_183_nl, mux_179_nl, fsm_output[4]);
  assign or_235_nl = (fsm_output[2]) | (~ (fsm_output[1])) | (~ (fsm_output[5]))
      | (fsm_output[6]) | (fsm_output[3]);
  assign or_238_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5]) | not_tmp_153;
  assign mux_186_nl = MUX_s_1_2_2(mux_178_cse, or_238_nl, fsm_output[2]);
  assign mux_187_nl = MUX_s_1_2_2(or_235_nl, mux_186_nl, fsm_output[4]);
  assign nl_COMP_LOOP_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b1});
  assign mux_156_nl = MUX_s_1_2_2(and_dcpl_17, mux_189_cse, fsm_output[1]);
  assign mux_157_nl = MUX_s_1_2_2(mux_156_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_158_nl = MUX_s_1_2_2(mux_tmp_1, mux_157_nl, fsm_output[4]);
  assign mux_153_nl = MUX_s_1_2_2(and_dcpl_17, and_244_cse, fsm_output[1]);
  assign mux_154_nl = MUX_s_1_2_2(mux_153_nl, (fsm_output[6]), fsm_output[5]);
  assign mux_155_nl = MUX_s_1_2_2(mux_tmp_1, mux_154_nl, fsm_output[4]);
  assign mux_159_nl = MUX_s_1_2_2(mux_158_nl, mux_155_nl, fsm_output[0]);
  assign mux_150_nl = MUX_s_1_2_2(and_244_cse, (fsm_output[6]), fsm_output[5]);
  assign mux_152_nl = MUX_s_1_2_2(mux_tmp_1, mux_150_nl, fsm_output[4]);
  assign mux_160_nl = MUX_s_1_2_2(mux_159_nl, mux_152_nl, fsm_output[2]);
  assign nl_operator_64_false_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b1}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign or_163_nl = (fsm_output[5]) | (fsm_output[6]) | (fsm_output[3]);
  assign mux_162_nl = MUX_s_1_2_2(or_tmp_13, or_163_nl, fsm_output[4]);
  assign or_119_nl = or_dcpl_8 | (fsm_output[1]) | (fsm_output[5]);
  assign mux_115_nl = MUX_s_1_2_2(or_tmp_13, or_119_nl, fsm_output[4]);
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, mux_115_nl, fsm_output[0]);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, or_tmp_11, fsm_output[2]);
  assign mux_35_nl = MUX_s_1_2_2(or_tmp_9, or_tmp_8, fsm_output[0]);
  assign nor_77_nl = ~((fsm_output[2]) | mux_35_nl);
  assign mux_165_nl = MUX_s_1_2_2(mux_164_nl, nor_77_nl, fsm_output[7]);
  assign nor_34_nl = ~((operator_64_false_acc_cse_1_sva[0]) | (~ (fsm_output[4]))
      | (~ (fsm_output[1])) | (fsm_output[6]) | (fsm_output[3]));
  assign nor_35_nl = ~((operator_64_false_acc_cse_sva[0]) | (fsm_output[4]) | (fsm_output[1])
      | (~ and_244_cse));
  assign mux_166_nl = MUX_s_1_2_2(nor_34_nl, nor_35_nl, fsm_output[2]);
  assign not_406_nl = ~ and_dcpl_72;
  assign and_242_nl = (fsm_output[4]) & (fsm_output[1]) & (fsm_output[6]) & (fsm_output[3]);
  assign and_243_nl = (fsm_output[4]) & (fsm_output[6]) & (fsm_output[3]);
  assign mux_191_nl = MUX_s_1_2_2(and_242_nl, and_243_nl, fsm_output[0]);
  assign nand_30_nl = ~((fsm_output[2]) & mux_191_nl);
  assign or_232_nl = (fsm_output[4]) | mux_189_cse;
  assign or_231_nl = (fsm_output[4]) | and_244_cse;
  assign or_230_nl = (fsm_output[4]) | (or_234_cse & (fsm_output[3]));
  assign mux_188_nl = MUX_s_1_2_2(or_231_nl, or_230_nl, fsm_output[0]);
  assign mux_190_nl = MUX_s_1_2_2(or_232_nl, mux_188_nl, fsm_output[2]);
  assign mux_192_nl = MUX_s_1_2_2(nand_30_nl, mux_190_nl, fsm_output[5]);
  assign COMP_LOOP_mux_9_nl = MUX_v_64_2_2(COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      modExp_dev_result_sva, and_dcpl_123);
  assign nand_34_nl = ~((fsm_output[6]) & (fsm_output[0]));
  assign or_239_nl = (fsm_output[6]) | (fsm_output[0]);
  assign mux_193_nl = MUX_s_1_2_2(nand_34_nl, or_239_nl, fsm_output[3]);
  assign and_247_nl = (~(mux_193_nl | (fsm_output[7]))) & and_139_cse & (fsm_output[5])
      & (~ (fsm_output[1]));
  assign COMP_LOOP_mux1h_33_nl = MUX1HOT_v_64_3_2(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z,
      r_sva, modExp_dev_result_sva, {and_247_nl , and_dcpl_123 , nor_108_cse});
  assign nl_z_out = COMP_LOOP_mux_9_nl * COMP_LOOP_mux1h_33_nl;
  assign z_out = nl_z_out[63:0];
  assign COMP_LOOP_mux_10_nl = MUX_v_10_2_2(({1'b0 , (STAGE_VEC_LOOP_j_sva_9_0[9:1])}),
      STAGE_VEC_LOOP_j_sva_9_0, and_dcpl_137);
  assign COMP_LOOP_mux_11_nl = MUX_v_10_2_2(({2'b00 , COMP_LOOP_k_9_1_sva_7_0}),
      STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_137);
  assign nl_z_out_1 = conv_u2u_10_11(COMP_LOOP_mux_10_nl) + conv_u2u_10_11(COMP_LOOP_mux_11_nl);
  assign z_out_1 = nl_z_out_1[10:0];
  assign operator_64_false_operator_64_false_or_58_nl = (~(and_dcpl_144 | and_dcpl_155
      | and_dcpl_163 | and_dcpl_168)) | and_dcpl_151 | and_dcpl_152 | and_dcpl_159
      | and_dcpl_162;
  assign operator_64_false_operator_64_false_mux_1_nl = MUX_v_55_2_2((z_out_3[63:9]),
      (STAGE_MAIN_LOOP_div_cmp_z[63:9]), and_dcpl_159);
  assign operator_64_false_operator_64_false_nor_1_nl = ~(MUX_v_55_2_2(operator_64_false_operator_64_false_mux_1_nl,
      55'b1111111111111111111111111111111111111111111111111111111, and_dcpl_155));
  assign operator_64_false_or_7_nl = and_dcpl_144 | and_dcpl_151 | and_dcpl_163 |
      and_dcpl_168;
  assign operator_64_false_or_6_nl = MUX_v_55_2_2(operator_64_false_operator_64_false_nor_1_nl,
      55'b1111111111111111111111111111111111111111111111111111111, operator_64_false_or_7_nl);
  assign operator_64_false_or_8_nl = and_dcpl_144 | and_dcpl_163 | and_dcpl_168;
  assign operator_64_false_or_9_nl = and_dcpl_152 | and_dcpl_162;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_9_5_2((~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      ({1'b1 , (~ COMP_LOOP_k_9_1_sva_7_0)}), (~ (z_out_3[8:0])), ({5'b00000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])), {operator_64_false_or_8_nl , and_dcpl_151
      , operator_64_false_or_9_nl , and_dcpl_155 , and_dcpl_159});
  assign operator_64_false_or_10_nl = (~(and_dcpl_151 | and_dcpl_152 | and_dcpl_155
      | and_dcpl_159 | and_dcpl_162 | and_dcpl_163)) | and_dcpl_144 | and_dcpl_168;
  assign operator_64_false_operator_64_false_or_59_nl = ((z_out_4[8]) & (~(and_dcpl_144
      | and_dcpl_151 | and_dcpl_152 | and_dcpl_159 | and_dcpl_162 | and_dcpl_163)))
      | and_dcpl_155;
  assign operator_64_false_mux_1_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_4[7:0]),
      and_dcpl_168);
  assign operator_64_false_nor_61_nl = ~(and_dcpl_151 | and_dcpl_152 | and_dcpl_159
      | and_dcpl_162 | and_dcpl_163);
  assign operator_64_false_and_4_nl = MUX_v_8_2_2(8'b00000000, operator_64_false_mux_1_nl,
      operator_64_false_nor_61_nl);
  assign operator_64_false_operator_64_false_or_60_nl = MUX_v_8_2_2(operator_64_false_and_4_nl,
      8'b11111111, and_dcpl_155);
  assign operator_64_false_operator_64_false_or_61_nl = (~ and_dcpl_168) | and_dcpl_144
      | and_dcpl_151 | and_dcpl_152 | and_dcpl_155 | and_dcpl_159 | and_dcpl_162
      | and_dcpl_163;
  assign nl_acc_1_nl = ({operator_64_false_operator_64_false_or_58_nl , operator_64_false_or_6_nl
      , operator_64_false_mux1h_3_nl , operator_64_false_or_10_nl}) + conv_s2u_65_66({operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_1_cse
      , operator_64_false_operator_64_false_or_1_cse , operator_64_false_operator_64_false_or_59_nl
      , operator_64_false_operator_64_false_or_60_nl , operator_64_false_operator_64_false_or_61_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[65:0];
  assign z_out_2_64_4 = readslicef_66_61_5(acc_1_nl);
  assign operator_64_false_or_5_nl = and_dcpl_178 | and_dcpl_187 | and_dcpl_190;
  assign operator_64_false_and_4_nl_1 = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) & and_dcpl_183;
  assign operator_64_false_and_5_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) & and_dcpl_183;
  assign operator_64_false_mux1h_3_nl_1 = MUX1HOT_v_64_5_2(p_sva, tmp_2_lpi_4_dfm,
      ({modExp_dev_exp_1_sva_63_9 , COMP_LOOP_acc_psp_sva_7_0 , modExp_dev_exp_1_sva_0}),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, {and_dcpl_175 , operator_64_false_or_5_nl
      , nor_108_cse , operator_64_false_and_4_nl_1 , operator_64_false_and_5_nl});
  assign operator_64_false_or_6_nl_1 = (~(and_dcpl_175 | and_dcpl_178 | nor_108_cse
      | and_dcpl_183 | and_dcpl_190)) | and_dcpl_187;
  assign operator_64_false_and_6_nl = (~ (operator_64_false_acc_cse_sva[0])) & and_dcpl_190;
  assign operator_64_false_and_7_nl = (operator_64_false_acc_cse_sva[0]) & and_dcpl_190;
  assign operator_64_false_mux1h_4_nl = MUX1HOT_v_64_4_2(tmp_1_lpi_4_dfm, (~ tmp_1_lpi_4_dfm),
      vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, {and_dcpl_183 , and_dcpl_187 , operator_64_false_and_6_nl
      , operator_64_false_and_7_nl});
  assign operator_64_false_or_8_nl_1 = and_dcpl_175 | and_dcpl_178 | nor_108_cse;
  assign operator_64_false_or_7_nl_1 = MUX_v_64_2_2(operator_64_false_mux1h_4_nl,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_8_nl_1);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl_1 , operator_64_false_or_6_nl_1})
      + ({operator_64_false_or_7_nl_1 , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_3 = readslicef_65_64_1(acc_2_nl);
  assign STAGE_MAIN_LOOP_mux_4_nl = MUX_v_8_2_2(({4'b0000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      COMP_LOOP_k_9_1_sva_7_0, and_dcpl_203);
  assign nl_z_out_4 = conv_u2u_8_9(STAGE_MAIN_LOOP_mux_4_nl) + conv_s2u_2_9({(~ and_dcpl_203)
      , 1'b1});
  assign z_out_4 = nl_z_out_4[8:0];

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [60:0] readslicef_66_61_5;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_66_61_5 = tmp[60:0];
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [65:0] conv_s2u_65_66 ;
    input [64:0]  vector ;
  begin
    conv_s2u_65_66 = {vector[64], vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_adra, vec_rsc_0_0_da, vec_rsc_0_0_wea, vec_rsc_0_0_qa, vec_rsc_triosy_0_0_lz,
      vec_rsc_0_1_adra, vec_rsc_0_1_da, vec_rsc_0_1_wea, vec_rsc_0_1_qa, vec_rsc_triosy_0_1_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [8:0] vec_rsc_0_0_adra;
  output [63:0] vec_rsc_0_0_da;
  output vec_rsc_0_0_wea;
  input [63:0] vec_rsc_0_0_qa;
  output vec_rsc_triosy_0_0_lz;
  output [8:0] vec_rsc_0_1_adra;
  output [63:0] vec_rsc_0_1_da;
  output vec_rsc_0_1_wea;
  input [63:0] vec_rsc_0_1_qa;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_qa_d;
  wire vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_qa_d;
  wire vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [8:0] vec_rsc_0_0_i_adra_d_iff;
  wire [63:0] vec_rsc_0_0_i_da_d_iff;
  wire vec_rsc_0_0_i_wea_d_iff;
  wire vec_rsc_0_1_i_wea_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_8_9_64_512_512_64_1_gen vec_rsc_0_0_i
      (
      .qa(vec_rsc_0_0_qa),
      .wea(vec_rsc_0_0_wea),
      .da(vec_rsc_0_0_da),
      .adra(vec_rsc_0_0_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_0_i_qa_d),
      .wea_d(vec_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_wea_d_iff)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_9_9_64_512_512_64_1_gen vec_rsc_0_1_i
      (
      .qa(vec_rsc_0_1_qa),
      .wea(vec_rsc_0_1_wea),
      .da(vec_rsc_0_1_da),
      .adra(vec_rsc_0_1_adra),
      .adra_d(vec_rsc_0_0_i_adra_d_iff),
      .da_d(vec_rsc_0_0_i_da_d_iff),
      .qa_d(vec_rsc_0_1_i_qa_d),
      .wea_d(vec_rsc_0_1_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_wea_d_iff)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_qa_d(vec_rsc_0_0_i_qa_d),
      .vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_qa_d(vec_rsc_0_1_i_qa_d),
      .vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_adra_d_pff(vec_rsc_0_0_i_adra_d_iff),
      .vec_rsc_0_0_i_da_d_pff(vec_rsc_0_0_i_da_d_iff),
      .vec_rsc_0_0_i_wea_d_pff(vec_rsc_0_0_i_wea_d_iff),
      .vec_rsc_0_1_i_wea_d_pff(vec_rsc_0_1_i_wea_d_iff)
    );
endmodule



