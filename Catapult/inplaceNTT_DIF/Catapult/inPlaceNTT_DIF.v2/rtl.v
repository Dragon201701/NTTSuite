// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 20 15:15:08 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [9:0] radr;
  output we;
  output [63:0] d;
  output [9:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [9:0] radr_d;
  input [9:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_3_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_45_tr0, STAGE_VEC_LOOP_C_1_tr0,
      STAGE_MAIN_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input STAGE_MAIN_LOOP_C_3_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_45_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 7'd0,
    STAGE_MAIN_LOOP_C_0 = 7'd1,
    STAGE_MAIN_LOOP_C_1 = 7'd2,
    STAGE_MAIN_LOOP_C_2 = 7'd3,
    STAGE_MAIN_LOOP_C_3 = 7'd4,
    modExp_dev_while_C_0 = 7'd5,
    modExp_dev_while_C_1 = 7'd6,
    modExp_dev_while_C_2 = 7'd7,
    modExp_dev_while_C_3 = 7'd8,
    modExp_dev_while_C_4 = 7'd9,
    modExp_dev_while_C_5 = 7'd10,
    modExp_dev_while_C_6 = 7'd11,
    modExp_dev_while_C_7 = 7'd12,
    modExp_dev_while_C_8 = 7'd13,
    modExp_dev_while_C_9 = 7'd14,
    modExp_dev_while_C_10 = 7'd15,
    modExp_dev_while_C_11 = 7'd16,
    STAGE_VEC_LOOP_C_0 = 7'd17,
    COMP_LOOP_C_0 = 7'd18,
    COMP_LOOP_C_1 = 7'd19,
    COMP_LOOP_C_2 = 7'd20,
    COMP_LOOP_C_3 = 7'd21,
    COMP_LOOP_C_4 = 7'd22,
    COMP_LOOP_C_5 = 7'd23,
    COMP_LOOP_C_6 = 7'd24,
    COMP_LOOP_C_7 = 7'd25,
    COMP_LOOP_C_8 = 7'd26,
    COMP_LOOP_C_9 = 7'd27,
    COMP_LOOP_C_10 = 7'd28,
    COMP_LOOP_C_11 = 7'd29,
    COMP_LOOP_C_12 = 7'd30,
    COMP_LOOP_C_13 = 7'd31,
    COMP_LOOP_C_14 = 7'd32,
    COMP_LOOP_C_15 = 7'd33,
    COMP_LOOP_C_16 = 7'd34,
    modExp_dev_1_while_C_0 = 7'd35,
    modExp_dev_1_while_C_1 = 7'd36,
    modExp_dev_1_while_C_2 = 7'd37,
    modExp_dev_1_while_C_3 = 7'd38,
    modExp_dev_1_while_C_4 = 7'd39,
    modExp_dev_1_while_C_5 = 7'd40,
    modExp_dev_1_while_C_6 = 7'd41,
    modExp_dev_1_while_C_7 = 7'd42,
    modExp_dev_1_while_C_8 = 7'd43,
    modExp_dev_1_while_C_9 = 7'd44,
    modExp_dev_1_while_C_10 = 7'd45,
    modExp_dev_1_while_C_11 = 7'd46,
    COMP_LOOP_C_17 = 7'd47,
    COMP_LOOP_C_18 = 7'd48,
    COMP_LOOP_C_19 = 7'd49,
    COMP_LOOP_C_20 = 7'd50,
    COMP_LOOP_C_21 = 7'd51,
    COMP_LOOP_C_22 = 7'd52,
    COMP_LOOP_C_23 = 7'd53,
    COMP_LOOP_C_24 = 7'd54,
    COMP_LOOP_C_25 = 7'd55,
    COMP_LOOP_C_26 = 7'd56,
    COMP_LOOP_C_27 = 7'd57,
    COMP_LOOP_C_28 = 7'd58,
    COMP_LOOP_C_29 = 7'd59,
    COMP_LOOP_C_30 = 7'd60,
    COMP_LOOP_C_31 = 7'd61,
    COMP_LOOP_C_32 = 7'd62,
    COMP_LOOP_C_33 = 7'd63,
    COMP_LOOP_C_34 = 7'd64,
    COMP_LOOP_C_35 = 7'd65,
    COMP_LOOP_C_36 = 7'd66,
    COMP_LOOP_C_37 = 7'd67,
    COMP_LOOP_C_38 = 7'd68,
    COMP_LOOP_C_39 = 7'd69,
    COMP_LOOP_C_40 = 7'd70,
    COMP_LOOP_C_41 = 7'd71,
    COMP_LOOP_C_42 = 7'd72,
    COMP_LOOP_C_43 = 7'd73,
    COMP_LOOP_C_44 = 7'd74,
    COMP_LOOP_C_45 = 7'd75,
    STAGE_VEC_LOOP_C_1 = 7'd76,
    STAGE_MAIN_LOOP_C_4 = 7'd77,
    main_C_1 = 7'd78;

  reg [6:0] state_var;
  reg [6:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 7'b0000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 7'b0000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 7'b0000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 7'b0000100;
        if ( STAGE_MAIN_LOOP_C_3_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 7'b0000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 7'b0000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 7'b0000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 7'b0001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 7'b0001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 7'b0001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 7'b0001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 7'b0001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 7'b0001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 7'b0001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 7'b0001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 7'b0010000;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 7'b0010001;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 7'b0010010;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 7'b0010011;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 7'b0010100;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 7'b0010101;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 7'b0010110;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 7'b0010111;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 7'b0011000;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 7'b0011001;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 7'b0011010;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 7'b0011011;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 7'b0011100;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 7'b0011101;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 7'b0011110;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 7'b0011111;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 7'b0100000;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 7'b0100001;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 7'b0100010;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = modExp_dev_1_while_C_0;
        end
      end
      modExp_dev_1_while_C_0 : begin
        fsm_output = 7'b0100011;
        state_var_NS = modExp_dev_1_while_C_1;
      end
      modExp_dev_1_while_C_1 : begin
        fsm_output = 7'b0100100;
        state_var_NS = modExp_dev_1_while_C_2;
      end
      modExp_dev_1_while_C_2 : begin
        fsm_output = 7'b0100101;
        state_var_NS = modExp_dev_1_while_C_3;
      end
      modExp_dev_1_while_C_3 : begin
        fsm_output = 7'b0100110;
        state_var_NS = modExp_dev_1_while_C_4;
      end
      modExp_dev_1_while_C_4 : begin
        fsm_output = 7'b0100111;
        state_var_NS = modExp_dev_1_while_C_5;
      end
      modExp_dev_1_while_C_5 : begin
        fsm_output = 7'b0101000;
        state_var_NS = modExp_dev_1_while_C_6;
      end
      modExp_dev_1_while_C_6 : begin
        fsm_output = 7'b0101001;
        state_var_NS = modExp_dev_1_while_C_7;
      end
      modExp_dev_1_while_C_7 : begin
        fsm_output = 7'b0101010;
        state_var_NS = modExp_dev_1_while_C_8;
      end
      modExp_dev_1_while_C_8 : begin
        fsm_output = 7'b0101011;
        state_var_NS = modExp_dev_1_while_C_9;
      end
      modExp_dev_1_while_C_9 : begin
        fsm_output = 7'b0101100;
        state_var_NS = modExp_dev_1_while_C_10;
      end
      modExp_dev_1_while_C_10 : begin
        fsm_output = 7'b0101101;
        state_var_NS = modExp_dev_1_while_C_11;
      end
      modExp_dev_1_while_C_11 : begin
        fsm_output = 7'b0101110;
        if ( modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 7'b0101111;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 7'b0110000;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 7'b0110001;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 7'b0110010;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 7'b0110011;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 7'b0110100;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 7'b0110101;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 7'b0110110;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 7'b0110111;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 7'b0111000;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 7'b0111001;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 7'b0111010;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 7'b0111011;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 7'b0111100;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 7'b0111101;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 7'b0111110;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 7'b0111111;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 7'b1000000;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 7'b1000001;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 7'b1000010;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 7'b1000011;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 7'b1000100;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 7'b1000101;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 7'b1000110;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 7'b1000111;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 7'b1001000;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 7'b1001001;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 7'b1001010;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 7'b1001011;
        if ( COMP_LOOP_C_45_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 7'b1001100;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_4;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 7'b1001101;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 7'b1001110;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsci_d_d, vec_rsci_q_d, vec_rsci_radr_d, vec_rsci_wadr_d, vec_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsci_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  output [63:0] vec_rsci_d_d;
  input [63:0] vec_rsci_q_d;
  output [9:0] vec_rsci_radr_d;
  output [9:0] vec_rsci_wadr_d;
  output vec_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output vec_rsci_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] modulo_dev_cmp_return_rsc_z;
  wire modulo_dev_cmp_ccs_ccore_en;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [6:0] fsm_output;
  wire mux_tmp_11;
  wire and_dcpl_3;
  wire and_dcpl_4;
  wire and_dcpl_5;
  wire and_dcpl_6;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_16;
  wire and_dcpl_20;
  wire and_dcpl_22;
  wire or_tmp_26;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_26;
  wire and_dcpl_29;
  wire and_dcpl_30;
  wire and_dcpl_31;
  wire and_dcpl_33;
  wire and_dcpl_37;
  wire and_dcpl_39;
  wire or_tmp_31;
  wire and_dcpl_42;
  wire and_dcpl_43;
  wire and_dcpl_44;
  wire and_dcpl_45;
  wire and_dcpl_48;
  wire and_dcpl_59;
  wire or_dcpl_14;
  wire or_dcpl_17;
  reg exit_modExp_dev_1_while_sva;
  reg operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm;
  reg reg_vec_rsc_triosy_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_41_cse;
  wire and_76_cse;
  wire and_77_cse;
  wire nor_25_cse;
  wire or_16_cse;
  wire mux_22_rmff;
  reg [63:0] factor2_sva;
  reg [63:0] COMP_LOOP_mul_itm;
  wire [9:0] operator_64_false_acc_cse_sva_mx0w0;
  wire [11:0] nl_operator_64_false_acc_cse_sva_mx0w0;
  reg [9:0] operator_64_false_acc_cse_sva;
  reg [63:0] p_sva;
  wire and_dcpl;
  wire and_dcpl_72;
  wire and_dcpl_75;
  wire [63:0] z_out;
  wire [127:0] nl_z_out;
  wire and_dcpl_92;
  wire [9:0] z_out_1;
  wire [10:0] nl_z_out_1;
  wire and_dcpl_93;
  wire and_dcpl_97;
  wire and_dcpl_98;
  wire and_dcpl_100;
  wire and_dcpl_102;
  wire and_dcpl_103;
  wire and_dcpl_106;
  wire and_dcpl_108;
  wire and_dcpl_111;
  wire and_dcpl_113;
  wire [63:0] z_out_2;
  wire and_dcpl_124;
  wire and_dcpl_126;
  wire and_dcpl_129;
  wire and_dcpl_130;
  wire and_dcpl_131;
  wire and_dcpl_132;
  wire and_dcpl_133;
  wire and_dcpl_134;
  wire and_dcpl_135;
  wire [64:0] z_out_3;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [63:0] modExp_dev_1_while_mul_mut;
  reg [8:0] COMP_LOOP_k_9_0_sva_8_0;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire modExp_dev_1_while_mul_mut_mx0c3;
  wire and_59_rgt;
  wire and_123_cse;
  wire and_131_cse;
  wire or_tmp;
  wire mux_tmp_42;
  wire [9:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  reg COMP_LOOP_acc_cse_sva_9;
  reg [8:0] COMP_LOOP_acc_cse_sva_8_0;
  wire or_73_cse;
  wire or_92_cse;
  wire and_cse;
  wire operator_64_false_1_or_3_ssc;

  wire[0:0] mux_21_nl;
  wire[0:0] and_25_nl;
  wire[0:0] mux_20_nl;
  wire[0:0] mux_19_nl;
  wire[0:0] or_30_nl;
  wire[0:0] nor_17_nl;
  wire[0:0] nor_26_nl;
  wire[0:0] mux_27_nl;
  wire[0:0] mux_26_nl;
  wire[0:0] mux_25_nl;
  wire[0:0] nor_23_nl;
  wire[0:0] operator_64_false_or_nl;
  wire[0:0] and_48_nl;
  wire[0:0] and_29_nl;
  wire[0:0] and_51_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] or_44_nl;
  wire[0:0] nor_13_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] or_42_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] or_81_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_nl;
  wire[0:0] and_164_nl;
  wire[8:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] and_67_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] or_91_nl;
  wire[0:0] or_93_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] not_160_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] nor_22_nl;
  wire[0:0] or_18_nl;
  wire[0:0] and_8_nl;
  wire[0:0] and_14_nl;
  wire[0:0] mux_18_nl;
  wire[0:0] or_78_nl;
  wire[0:0] or_79_nl;
  wire[63:0] COMP_LOOP_mux_6_nl;
  wire[63:0] COMP_LOOP_mux1h_20_nl;
  wire[0:0] and_165_nl;
  wire[0:0] and_166_nl;
  wire[8:0] STAGE_MAIN_LOOP_mux_4_nl;
  wire[64:0] acc_1_nl;
  wire[65:0] nl_acc_1_nl;
  wire[63:0] COMP_LOOP_mux1h_21_nl;
  wire[0:0] COMP_LOOP_or_7_nl;
  wire[0:0] COMP_LOOP_or_8_nl;
  wire[63:0] COMP_LOOP_or_9_nl;
  wire[63:0] COMP_LOOP_mux1h_22_nl;
  wire[0:0] COMP_LOOP_or_10_nl;
  wire[65:0] acc_2_nl;
  wire[66:0] nl_acc_2_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_3_nl;
  wire[53:0] operator_64_false_1_operator_64_false_1_or_4_nl;
  wire[53:0] operator_64_false_1_operator_64_false_1_nor_2_nl;
  wire[53:0] operator_64_false_1_mux_1_nl;
  wire[0:0] operator_64_false_1_or_7_nl;
  wire[0:0] operator_64_false_1_or_8_nl;
  wire[0:0] operator_64_false_1_or_9_nl;
  wire[0:0] operator_64_false_1_mux1h_3_nl;
  wire[8:0] operator_64_false_1_mux1h_4_nl;
  wire[0:0] operator_64_false_1_or_10_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_5_nl;
  wire[9:0] operator_64_false_1_or_11_nl;
  wire[9:0] operator_64_false_1_mux1h_5_nl;
  wire[0:0] operator_64_false_1_or_12_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_36_nl;
  wire [63:0] nl_modulo_dev_cmp_base_rsc_dat;
  assign and_36_nl = and_dcpl_22 & and_dcpl_33;
  assign nl_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_2, COMP_LOOP_mul_itm,
      and_36_nl);
  wire [63:0] nl_modulo_dev_cmp_m_rsc_dat;
  assign nl_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_24_nl;
  wire[0:0] and_73_nl;
  wire[0:0] mux_23_nl;
  wire[0:0] nor_15_nl;
  wire[0:0] nor_16_nl;
  wire [0:0] nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign and_73_nl = (fsm_output[5]) & (fsm_output[0]) & (fsm_output[1]) & (fsm_output[3]);
  assign nor_15_nl = ~((fsm_output[0]) | (fsm_output[1]) | (fsm_output[3]));
  assign nor_16_nl = ~((~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_23_nl = MUX_s_1_2_2(nor_15_nl, nor_16_nl, fsm_output[5]);
  assign mux_24_nl = MUX_s_1_2_2(and_73_nl, mux_23_nl, fsm_output[4]);
  assign nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat = mux_24_nl & (fsm_output[2])
      & (~ (fsm_output[6]));
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_1[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0 = ~ (z_out_3[64]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (z_out_2[63]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out_3[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = z_out_3[4];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(vec_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  modulo_dev_cmp (
      .base_rsc_dat(nl_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(reg_modulo_dev_cmp_m_rsc_dat_cse),
      .z(modExp_dev_while_rem_cmp_z)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .ensig_cgo_iro(mux_22_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_dev_cmp_ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_3_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(exit_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .modExp_dev_1_while_C_11_tr0(exit_modExp_dev_1_while_sva),
      .COMP_LOOP_C_45_tr0(exit_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0])
    );
  assign or_73_cse = (fsm_output[2:1]!=2'b00);
  assign mux_20_nl = MUX_s_1_2_2(nor_25_cse, and_76_cse, fsm_output[0]);
  assign and_25_nl = (fsm_output[5]) & mux_20_nl;
  assign or_30_nl = (fsm_output[1:0]!=2'b00) | (~ and_77_cse);
  assign mux_19_nl = MUX_s_1_2_2(or_tmp_26, or_30_nl, fsm_output[5]);
  assign mux_21_nl = MUX_s_1_2_2(and_25_nl, mux_19_nl, fsm_output[4]);
  assign nor_17_nl = ~((fsm_output[5:4]!=2'b00) | (or_73_cse & (fsm_output[3])));
  assign mux_22_rmff = MUX_s_1_2_2(mux_21_nl, nor_17_nl, fsm_output[6]);
  assign or_41_cse = (fsm_output[1:0]!=2'b00);
  assign and_59_rgt = and_dcpl_5 & and_dcpl_24 & and_dcpl_3;
  assign nor_25_cse = ~((fsm_output[3:1]!=3'b000));
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_9_2_2(COMP_LOOP_k_9_0_sva_8_0, (z_out_2[8:0]),
      and_dcpl_42);
  assign mux_44_nl = MUX_s_1_2_2(and_dcpl_5, and_77_cse, fsm_output[1]);
  assign mux_45_nl = MUX_s_1_2_2(nor_25_cse, mux_44_nl, fsm_output[0]);
  assign and_67_nl = (~ mux_45_nl) & and_dcpl_29;
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_10_2_2((z_out_2[9:0]), ({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      and_67_nl);
  assign or_92_cse = (fsm_output[5:4]!=2'b10);
  assign and_cse = (fsm_output[2:0]==3'b111);
  assign nl_operator_64_false_acc_cse_sva_mx0w0 = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10(COMP_LOOP_k_9_0_sva_8_0)
      + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign operator_64_false_acc_cse_sva_mx0w0 = nl_operator_64_false_acc_cse_sva_mx0w0[9:0];
  assign and_77_cse = (fsm_output[3:2]==2'b11);
  assign and_76_cse = (fsm_output[3:1]==3'b111);
  assign or_16_cse = (fsm_output[5:4]!=2'b00) | ((fsm_output[2]) & or_41_cse & (fsm_output[3]));
  assign nor_22_nl = ~((fsm_output[5:0]!=6'b000000));
  assign or_18_nl = (fsm_output[5:4]!=2'b00) | and_76_cse;
  assign mux_tmp_11 = MUX_s_1_2_2(nor_22_nl, or_18_nl, fsm_output[6]);
  assign and_dcpl_3 = (fsm_output[6:4]==3'b001);
  assign and_dcpl_4 = (fsm_output[1:0]==2'b11);
  assign and_dcpl_5 = ~((fsm_output[3:2]!=2'b00));
  assign and_dcpl_6 = and_dcpl_5 & and_dcpl_4;
  assign and_dcpl_8 = ~((fsm_output[5:4]!=2'b00));
  assign and_dcpl_9 = and_dcpl_8 & (fsm_output[6]);
  assign and_dcpl_10 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_16 = and_dcpl_5 & (fsm_output[1]);
  assign and_dcpl_20 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_22 = and_77_cse & and_dcpl_20;
  assign or_tmp_26 = (fsm_output[3:2]!=2'b00);
  assign and_dcpl_24 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_25 = (fsm_output[3:2]==2'b01);
  assign and_dcpl_26 = and_dcpl_25 & and_dcpl_24;
  assign and_dcpl_29 = (fsm_output[6:4]==3'b010);
  assign and_dcpl_30 = and_77_cse & and_dcpl_4;
  assign and_dcpl_31 = and_dcpl_30 & and_dcpl_29;
  assign and_dcpl_33 = (fsm_output[6:4]==3'b011);
  assign and_dcpl_37 = and_dcpl_8 & (~ (fsm_output[6]));
  assign and_dcpl_39 = and_dcpl_25 & and_dcpl_20 & and_dcpl_37;
  assign or_tmp_31 = ((fsm_output[2:1]==2'b11)) | (fsm_output[3]);
  assign and_dcpl_42 = and_dcpl_6 & and_dcpl_29;
  assign and_dcpl_43 = and_dcpl_16 & and_dcpl_37;
  assign and_dcpl_44 = and_dcpl_5 & and_dcpl_20;
  assign and_dcpl_45 = and_dcpl_44 & and_dcpl_37;
  assign and_dcpl_48 = and_77_cse & and_dcpl_24;
  assign and_dcpl_59 = and_dcpl_5 & and_dcpl_10 & and_dcpl_29;
  assign or_dcpl_14 = (fsm_output[6:4]!=3'b001);
  assign or_dcpl_17 = or_tmp_26 | (fsm_output[1:0]!=2'b10) | or_dcpl_14;
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_48 & and_dcpl_9;
  assign modExp_dev_1_while_mul_mut_mx0c3 = and_77_cse & and_dcpl_10 & and_dcpl_29;
  assign vec_rsci_d_d = modulo_dev_cmp_return_rsc_z;
  assign and_8_nl = and_dcpl_6 & and_dcpl_3;
  assign vec_rsci_radr_d = MUX_v_10_2_2(operator_64_false_acc_cse_sva_mx0w0, ({COMP_LOOP_acc_cse_sva_9
      , COMP_LOOP_acc_cse_sva_8_0}), and_8_nl);
  assign and_14_nl = (fsm_output[3:2]==2'b10) & and_dcpl_10 & and_dcpl_9;
  assign vec_rsci_wadr_d = MUX_v_10_2_2(({COMP_LOOP_acc_cse_sva_9 , COMP_LOOP_acc_cse_sva_8_0}),
      operator_64_false_acc_cse_sva, and_14_nl);
  assign or_78_nl = (~ (fsm_output[5])) | (~ (fsm_output[0])) | (fsm_output[1]) |
      (fsm_output[3]);
  assign or_79_nl = (fsm_output[5]) | (fsm_output[0]) | (~((fsm_output[1]) & (fsm_output[3])));
  assign mux_18_nl = MUX_s_1_2_2(or_78_nl, or_79_nl, fsm_output[6]);
  assign vec_rsci_we_d_pff = ~(mux_18_nl | (fsm_output[2]) | (fsm_output[4]));
  assign vec_rsci_readA_r_ram_ir_internal_RMASK_B_d = and_dcpl_16 & and_dcpl_3;
  assign and_dcpl = (fsm_output[2:1]==2'b10);
  assign and_dcpl_72 = ~((fsm_output[6]) | (fsm_output[3]));
  assign and_dcpl_75 = (fsm_output[5:4]==2'b00) & and_dcpl_72 & and_dcpl & (fsm_output[0]);
  assign and_dcpl_92 = (fsm_output==7'b0101111);
  assign and_dcpl_93 = (fsm_output[2:1]==2'b01);
  assign and_dcpl_97 = (fsm_output[5:4]==2'b01) & and_dcpl_72;
  assign and_dcpl_98 = and_dcpl_97 & and_dcpl_93 & (~ (fsm_output[0]));
  assign and_dcpl_100 = (fsm_output[2:0]==3'b001);
  assign and_dcpl_102 = (fsm_output[5:4]==2'b00) & and_dcpl_72;
  assign and_dcpl_103 = and_dcpl_102 & and_dcpl_100;
  assign and_dcpl_106 = and_dcpl_102 & and_dcpl & (fsm_output[0]);
  assign and_dcpl_108 = (fsm_output[5:4]==2'b10);
  assign and_123_cse = and_dcpl_108 & and_dcpl_72 & and_dcpl_93 & (fsm_output[0]);
  assign and_dcpl_111 = and_dcpl_97 & and_dcpl_100;
  assign and_dcpl_113 = and_dcpl_97 & and_dcpl & (~ (fsm_output[0]));
  assign and_131_cse = and_dcpl_108 & (~ (fsm_output[6])) & (fsm_output[3]) & (fsm_output[2])
      & (fsm_output[1]) & (fsm_output[0]);
  assign and_dcpl_124 = (fsm_output[5:4]==2'b01) & and_dcpl_72 & and_dcpl_93 & (~
      (fsm_output[0]));
  assign and_dcpl_126 = and_dcpl & (~ (fsm_output[0]));
  assign and_dcpl_129 = and_dcpl_8 & (fsm_output[6]) & (fsm_output[3]);
  assign and_dcpl_130 = and_dcpl_129 & and_dcpl_126;
  assign and_dcpl_131 = and_dcpl & (fsm_output[0]);
  assign and_dcpl_132 = and_dcpl_129 & and_dcpl_131;
  assign and_dcpl_133 = and_dcpl_8 & and_dcpl_72;
  assign and_dcpl_134 = and_dcpl_133 & and_dcpl_126;
  assign and_dcpl_135 = and_dcpl_133 & and_dcpl_131;
  assign or_tmp = (fsm_output[6]) | (~ (fsm_output[4]));
  assign mux_tmp_42 = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[6]);
  assign operator_64_false_1_or_3_ssc = and_dcpl_135 | and_123_cse;
  always @(posedge clk) begin
    if ( mux_tmp_11 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_obj_ld_cse <= and_dcpl_22 & and_dcpl_8 & (fsm_output[6])
          & (z_out_3[4]);
      reg_ensig_cgo_cse <= mux_22_rmff;
    end
  end
  always @(posedge clk) begin
    reg_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(z_out, modExp_dev_1_while_mul_mut,
        nor_26_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_2, COMP_LOOP_mul_itm, and_dcpl_43);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_43);
  end
  always @(posedge clk) begin
    if ( mux_tmp_11 | and_dcpl_45 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_1[3:0]), and_dcpl_45);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_23_nl, or_16_cse, fsm_output[6]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_33_nl & (~ (fsm_output[6]))) ) begin
      COMP_LOOP_mul_itm <= MUX1HOT_v_64_4_2(z_out_2, STAGE_MAIN_LOOP_div_cmp_z, vec_rsci_q_d,
          z_out, {operator_64_false_or_nl , and_48_nl , and_29_nl , and_51_nl});
    end
  end
  always @(posedge clk) begin
    if ( (~((fsm_output[3]) | (fsm_output[1]) | (~((fsm_output[2]) ^ (fsm_output[4])))
        | (fsm_output[0]) | (fsm_output[5]) | (fsm_output[6]))) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1
        ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_3[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_36_nl | and_59_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z, and_59_rgt);
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_39 | and_dcpl_59 | and_dcpl_42 | modExp_dev_1_while_mul_mut_mx0c3
        ) begin
      modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_3_2(z_out, 64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z, {modExp_dev_while_or_nl , and_dcpl_59 , modExp_dev_1_while_mul_mut_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_39 | and_dcpl_42 | and_dcpl_31 ) begin
      exit_modExp_dev_1_while_sva <= MUX_s_1_2_2((~ (z_out_3[64])), (~ (z_out_3[63])),
          and_dcpl_31);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_51_nl, mux_nl, fsm_output[5]) ) begin
      COMP_LOOP_k_9_0_sva_8_0 <= MUX_v_9_2_2(9'b000000000, (z_out_1[8:0]), nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_17 ) begin
      operator_64_false_acc_cse_sva <= operator_64_false_acc_cse_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_17 ) begin
      operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm <= z_out_3[9];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_56_nl | (fsm_output[6])) ) begin
      COMP_LOOP_acc_cse_sva_9 <= COMP_LOOP_COMP_LOOP_mux_rgt[9];
    end
  end
  always @(posedge clk) begin
    if ( (~(mux_58_nl | (fsm_output[6]))) & (fsm_output[3:1]==3'b001) ) begin
      COMP_LOOP_acc_cse_sva_8_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[8:0];
    end
  end
  always @(posedge clk) begin
    if ( ~(or_tmp_26 | (fsm_output[1:0]!=2'b11) | or_dcpl_14) ) begin
      factor2_sva <= vec_rsci_q_d;
    end
  end
  always @(posedge clk) begin
    if ( mux_59_nl | (fsm_output[6:4]!=3'b010) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_2[63:9]), not_160_nl);
    end
  end
  assign mux_25_nl = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[2]);
  assign mux_26_nl = MUX_s_1_2_2(and_dcpl_5, mux_25_nl, fsm_output[1]);
  assign mux_27_nl = MUX_s_1_2_2((~ or_tmp_31), mux_26_nl, fsm_output[5]);
  assign nor_26_nl = ~(mux_27_nl | (fsm_output[4]) | (fsm_output[6]));
  assign nor_23_nl = ~((fsm_output[5:1]!=5'b00000));
  assign operator_64_false_or_nl = and_dcpl_45 | and_dcpl_39;
  assign and_48_nl = and_dcpl_26 & and_dcpl_37;
  assign and_29_nl = and_dcpl_26 & and_dcpl_3;
  assign and_51_nl = and_dcpl_48 & and_dcpl_33;
  assign or_44_nl = (fsm_output[1]) | (fsm_output[3]);
  assign mux_31_nl = MUX_s_1_2_2(or_44_nl, or_tmp_31, fsm_output[0]);
  assign mux_32_nl = MUX_s_1_2_2(mux_31_nl, (~ and_dcpl_30), fsm_output[5]);
  assign or_42_nl = (fsm_output[3:2]!=2'b01);
  assign mux_30_nl = MUX_s_1_2_2(or_42_nl, or_tmp_26, or_41_cse);
  assign nor_13_nl = ~((fsm_output[5]) | (~ mux_30_nl));
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, nor_13_nl, fsm_output[4]);
  assign mux_36_nl = MUX_s_1_2_2(and_dcpl_8, or_16_cse, fsm_output[6]);
  assign modExp_dev_while_or_nl = and_dcpl_39 | and_dcpl_42;
  assign nand_nl = ~(and_dcpl_44 & and_dcpl_3);
  assign or_81_nl = (~ (fsm_output[6])) | (fsm_output[4]);
  assign mux_50_nl = MUX_s_1_2_2(or_81_nl, mux_tmp_42, or_73_cse);
  assign mux_49_nl = MUX_s_1_2_2(mux_tmp_42, or_tmp, fsm_output[2]);
  assign mux_51_nl = MUX_s_1_2_2(mux_50_nl, mux_49_nl, fsm_output[3]);
  assign and_164_nl = (fsm_output[3:0]==4'b1111);
  assign mux_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp, and_164_nl);
  assign mux_53_nl = MUX_s_1_2_2((fsm_output[5]), (~ (fsm_output[5])), fsm_output[4]);
  assign nand_7_nl = ~((fsm_output[1]) & mux_53_nl);
  assign or_91_nl = (~ (fsm_output[1])) | (fsm_output[4]) | (~ (fsm_output[5]));
  assign mux_54_nl = MUX_s_1_2_2(nand_7_nl, or_91_nl, fsm_output[0]);
  assign mux_55_nl = MUX_s_1_2_2(mux_54_nl, or_92_cse, fsm_output[2]);
  assign or_93_nl = and_cse | (fsm_output[5:4]!=2'b10);
  assign mux_56_nl = MUX_s_1_2_2(mux_55_nl, or_93_nl, fsm_output[3]);
  assign mux_57_nl = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[4]);
  assign mux_58_nl = MUX_s_1_2_2(mux_57_nl, or_92_cse, fsm_output[0]);
  assign not_160_nl = ~ and_dcpl_59;
  assign mux_59_nl = MUX_s_1_2_2((~ (fsm_output[2])), and_cse, fsm_output[3]);
  assign COMP_LOOP_mux_6_nl = MUX_v_64_2_2(modExp_dev_1_while_mul_mut, modExp_dev_result_sva,
      and_dcpl_75);
  assign and_165_nl = (fsm_output[6:3]==4'b0111) & and_dcpl & (~ (fsm_output[0]));
  assign and_166_nl = (fsm_output[5:4]==2'b10) & and_dcpl_72 & (fsm_output[2:0]==3'b011);
  assign COMP_LOOP_mux1h_20_nl = MUX1HOT_v_64_3_2(modulo_dev_cmp_return_rsc_z, r_sva,
      modExp_dev_result_sva, {and_165_nl , and_dcpl_75 , and_166_nl});
  assign nl_z_out = COMP_LOOP_mux_6_nl * COMP_LOOP_mux1h_20_nl;
  assign z_out = nl_z_out[63:0];
  assign STAGE_MAIN_LOOP_mux_4_nl = MUX_v_9_2_2(({5'b00000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      COMP_LOOP_k_9_0_sva_8_0, and_dcpl_92);
  assign nl_z_out_1 = conv_u2u_9_10(STAGE_MAIN_LOOP_mux_4_nl) + conv_s2u_2_10({(~
      and_dcpl_92) , 1'b1});
  assign z_out_1 = nl_z_out_1[9:0];
  assign COMP_LOOP_or_7_nl = and_dcpl_106 | and_131_cse;
  assign COMP_LOOP_mux1h_21_nl = MUX1HOT_v_64_6_2(({54'b000000000000000000000000000000000000000000000000000000
      , STAGE_VEC_LOOP_j_sva_9_0}), p_sva, COMP_LOOP_mul_itm, ({modExp_dev_exp_1_sva_63_9
      , COMP_LOOP_acc_cse_sva_8_0}), ({55'b1111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]))}), vec_rsci_q_d, {and_dcpl_98
      , and_dcpl_103 , COMP_LOOP_or_7_nl , and_123_cse , and_dcpl_111 , and_dcpl_113});
  assign COMP_LOOP_or_8_nl = (~(and_dcpl_98 | and_dcpl_103 | and_dcpl_106 | and_123_cse
      | and_dcpl_111 | and_dcpl_113)) | and_131_cse;
  assign COMP_LOOP_mux1h_22_nl = MUX1HOT_v_64_4_2(({55'b0000000000000000000000000000000000000000000000000000000
      , COMP_LOOP_k_9_0_sva_8_0}), 64'b0000000000000000000000000000000000000000000000000000000000000001,
      factor2_sva, (~ factor2_sva), {and_dcpl_98 , and_dcpl_111 , and_dcpl_113 ,
      and_131_cse});
  assign COMP_LOOP_or_10_nl = and_dcpl_103 | and_dcpl_106 | and_123_cse;
  assign COMP_LOOP_or_9_nl = MUX_v_64_2_2(COMP_LOOP_mux1h_22_nl, 64'b1111111111111111111111111111111111111111111111111111111111111111,
      COMP_LOOP_or_10_nl);
  assign nl_acc_1_nl = ({COMP_LOOP_mux1h_21_nl , COMP_LOOP_or_8_nl}) + ({COMP_LOOP_or_9_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[64:0];
  assign z_out_2 = readslicef_65_64_1(acc_1_nl);
  assign operator_64_false_1_operator_64_false_1_or_3_nl = (~(and_dcpl_130 | and_dcpl_132
      | and_131_cse)) | and_dcpl_124 | and_dcpl_134 | and_dcpl_135 | and_123_cse;
  assign operator_64_false_1_mux_1_nl = MUX_v_54_2_2((STAGE_MAIN_LOOP_div_cmp_z[63:10]),
      (z_out_2[63:10]), operator_64_false_1_or_3_ssc);
  assign operator_64_false_1_or_7_nl = and_dcpl_130 | and_dcpl_132;
  assign operator_64_false_1_operator_64_false_1_nor_2_nl = ~(MUX_v_54_2_2(operator_64_false_1_mux_1_nl,
      54'b111111111111111111111111111111111111111111111111111111, operator_64_false_1_or_7_nl));
  assign operator_64_false_1_or_8_nl = and_dcpl_124 | and_131_cse;
  assign operator_64_false_1_operator_64_false_1_or_4_nl = MUX_v_54_2_2(operator_64_false_1_operator_64_false_1_nor_2_nl,
      54'b111111111111111111111111111111111111111111111111111111, operator_64_false_1_or_8_nl);
  assign operator_64_false_1_mux1h_3_nl = MUX1HOT_s_1_3_2((~ (STAGE_VEC_LOOP_j_sva_9_0[9])),
      (STAGE_MAIN_LOOP_div_cmp_z[9]), (z_out_2[9]), {and_dcpl_130 , and_dcpl_134
      , operator_64_false_1_or_3_ssc});
  assign operator_64_false_1_or_9_nl = (~(operator_64_false_1_mux1h_3_nl | and_dcpl_132))
      | and_dcpl_124 | and_131_cse;
  assign operator_64_false_1_mux1h_4_nl = MUX1HOT_v_9_6_2((~ COMP_LOOP_k_9_0_sva_8_0),
      (STAGE_VEC_LOOP_j_sva_9_0[8:0]), ({5'b00000 , STAGE_MAIN_LOOP_acc_1_psp_sva}),
      (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])), (~ (z_out_2[8:0])), (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      {and_dcpl_124 , and_dcpl_130 , and_dcpl_132 , and_dcpl_134 , operator_64_false_1_or_3_ssc
      , and_131_cse});
  assign operator_64_false_1_or_10_nl = (~(and_dcpl_124 | and_dcpl_130 | and_dcpl_132
      | and_dcpl_134 | and_dcpl_135 | and_123_cse)) | and_131_cse;
  assign operator_64_false_1_operator_64_false_1_or_5_nl = (~(and_dcpl_124 | and_dcpl_130
      | and_dcpl_134 | and_dcpl_135 | and_123_cse | and_131_cse)) | and_dcpl_132;
  assign operator_64_false_1_or_12_nl = and_dcpl_124 | and_dcpl_134 | and_dcpl_135
      | and_123_cse;
  assign operator_64_false_1_mux1h_5_nl = MUX1HOT_v_10_3_2(10'b0000000001, STAGE_MAIN_LOOP_lshift_psp_1_sva,
      z_out_1, {operator_64_false_1_or_12_nl , and_dcpl_130 , and_131_cse});
  assign operator_64_false_1_or_11_nl = MUX_v_10_2_2(operator_64_false_1_mux1h_5_nl,
      10'b1111111111, and_dcpl_132);
  assign nl_acc_2_nl = ({operator_64_false_1_operator_64_false_1_or_3_nl , operator_64_false_1_operator_64_false_1_or_4_nl
      , operator_64_false_1_or_9_nl , operator_64_false_1_mux1h_4_nl , operator_64_false_1_or_10_nl})
      + conv_s2u_12_66({operator_64_false_1_operator_64_false_1_or_5_nl , operator_64_false_1_or_11_nl
      , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[65:0];
  assign z_out_3 = readslicef_66_65_1(acc_2_nl);

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_6_2;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [5:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    MUX1HOT_v_64_6_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_6_2;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [5:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    result = result | ( input_5 & {9{sel[5]}});
    MUX1HOT_v_9_6_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [53:0] MUX_v_54_2_2;
    input [53:0] input_0;
    input [53:0] input_1;
    input [0:0] sel;
    reg [53:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_54_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [64:0] readslicef_66_65_1;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_66_65_1 = tmp[64:0];
  end
  endfunction


  function automatic [9:0] conv_s2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_10 = {{8{vector[1]}}, vector};
  end
  endfunction


  function automatic [65:0] conv_s2u_12_66 ;
    input [11:0]  vector ;
  begin
    conv_s2u_12_66 = {{54{vector[11]}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_wadr, vec_rsc_d, vec_rsc_we, vec_rsc_radr, vec_rsc_q, vec_rsc_triosy_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [9:0] vec_rsc_wadr;
  output [63:0] vec_rsc_d;
  output vec_rsc_we;
  output [9:0] vec_rsc_radr;
  input [63:0] vec_rsc_q;
  output vec_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsci_d_d;
  wire [63:0] vec_rsci_q_d;
  wire [9:0] vec_rsci_radr_d;
  wire [9:0] vec_rsci_wadr_d;
  wire vec_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire vec_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen vec_rsci
      (
      .q(vec_rsc_q),
      .radr(vec_rsc_radr),
      .we(vec_rsc_we),
      .d(vec_rsc_d),
      .wadr(vec_rsc_wadr),
      .d_d(vec_rsci_d_d),
      .q_d(vec_rsci_q_d),
      .radr_d(vec_rsci_radr_d),
      .wadr_d(vec_rsci_wadr_d),
      .we_d(vec_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_lz(vec_rsc_triosy_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsci_d_d(vec_rsci_d_d),
      .vec_rsci_q_d(vec_rsci_q_d),
      .vec_rsci_radr_d(vec_rsci_radr_d),
      .vec_rsci_wadr_d(vec_rsci_wadr_d),
      .vec_rsci_readA_r_ram_ir_internal_RMASK_B_d(vec_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsci_we_d_pff(vec_rsci_we_d_iff)
    );
endmodule



