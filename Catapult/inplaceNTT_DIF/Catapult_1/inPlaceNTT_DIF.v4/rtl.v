// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 27 15:47:21 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [9:0] radr;
  output we;
  output [63:0] d;
  output [9:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [9:0] radr_d;
  input [9:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_4_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_44_tr0, STAGE_VEC_LOOP_C_1_tr0,
      STAGE_MAIN_LOOP_C_5_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input STAGE_MAIN_LOOP_C_4_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_44_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_5_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 7'd0,
    STAGE_MAIN_LOOP_C_0 = 7'd1,
    STAGE_MAIN_LOOP_C_1 = 7'd2,
    STAGE_MAIN_LOOP_C_2 = 7'd3,
    STAGE_MAIN_LOOP_C_3 = 7'd4,
    STAGE_MAIN_LOOP_C_4 = 7'd5,
    modExp_dev_while_C_0 = 7'd6,
    modExp_dev_while_C_1 = 7'd7,
    modExp_dev_while_C_2 = 7'd8,
    modExp_dev_while_C_3 = 7'd9,
    modExp_dev_while_C_4 = 7'd10,
    modExp_dev_while_C_5 = 7'd11,
    modExp_dev_while_C_6 = 7'd12,
    modExp_dev_while_C_7 = 7'd13,
    modExp_dev_while_C_8 = 7'd14,
    modExp_dev_while_C_9 = 7'd15,
    modExp_dev_while_C_10 = 7'd16,
    modExp_dev_while_C_11 = 7'd17,
    STAGE_VEC_LOOP_C_0 = 7'd18,
    COMP_LOOP_C_0 = 7'd19,
    COMP_LOOP_C_1 = 7'd20,
    COMP_LOOP_C_2 = 7'd21,
    COMP_LOOP_C_3 = 7'd22,
    COMP_LOOP_C_4 = 7'd23,
    COMP_LOOP_C_5 = 7'd24,
    COMP_LOOP_C_6 = 7'd25,
    COMP_LOOP_C_7 = 7'd26,
    COMP_LOOP_C_8 = 7'd27,
    COMP_LOOP_C_9 = 7'd28,
    COMP_LOOP_C_10 = 7'd29,
    COMP_LOOP_C_11 = 7'd30,
    COMP_LOOP_C_12 = 7'd31,
    COMP_LOOP_C_13 = 7'd32,
    COMP_LOOP_C_14 = 7'd33,
    COMP_LOOP_C_15 = 7'd34,
    COMP_LOOP_C_16 = 7'd35,
    modExp_dev_1_while_C_0 = 7'd36,
    modExp_dev_1_while_C_1 = 7'd37,
    modExp_dev_1_while_C_2 = 7'd38,
    modExp_dev_1_while_C_3 = 7'd39,
    modExp_dev_1_while_C_4 = 7'd40,
    modExp_dev_1_while_C_5 = 7'd41,
    modExp_dev_1_while_C_6 = 7'd42,
    modExp_dev_1_while_C_7 = 7'd43,
    modExp_dev_1_while_C_8 = 7'd44,
    modExp_dev_1_while_C_9 = 7'd45,
    modExp_dev_1_while_C_10 = 7'd46,
    modExp_dev_1_while_C_11 = 7'd47,
    COMP_LOOP_C_17 = 7'd48,
    COMP_LOOP_C_18 = 7'd49,
    COMP_LOOP_C_19 = 7'd50,
    COMP_LOOP_C_20 = 7'd51,
    COMP_LOOP_C_21 = 7'd52,
    COMP_LOOP_C_22 = 7'd53,
    COMP_LOOP_C_23 = 7'd54,
    COMP_LOOP_C_24 = 7'd55,
    COMP_LOOP_C_25 = 7'd56,
    COMP_LOOP_C_26 = 7'd57,
    COMP_LOOP_C_27 = 7'd58,
    COMP_LOOP_C_28 = 7'd59,
    COMP_LOOP_C_29 = 7'd60,
    COMP_LOOP_C_30 = 7'd61,
    COMP_LOOP_C_31 = 7'd62,
    COMP_LOOP_C_32 = 7'd63,
    COMP_LOOP_C_33 = 7'd64,
    COMP_LOOP_C_34 = 7'd65,
    COMP_LOOP_C_35 = 7'd66,
    COMP_LOOP_C_36 = 7'd67,
    COMP_LOOP_C_37 = 7'd68,
    COMP_LOOP_C_38 = 7'd69,
    COMP_LOOP_C_39 = 7'd70,
    COMP_LOOP_C_40 = 7'd71,
    COMP_LOOP_C_41 = 7'd72,
    COMP_LOOP_C_42 = 7'd73,
    COMP_LOOP_C_43 = 7'd74,
    COMP_LOOP_C_44 = 7'd75,
    STAGE_VEC_LOOP_C_1 = 7'd76,
    STAGE_MAIN_LOOP_C_5 = 7'd77,
    main_C_1 = 7'd78;

  reg [6:0] state_var;
  reg [6:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 7'b0000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 7'b0000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 7'b0000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 7'b0000100;
        state_var_NS = STAGE_MAIN_LOOP_C_4;
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 7'b0000101;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 7'b0000110;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 7'b0000111;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 7'b0001000;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 7'b0001001;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 7'b0001010;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 7'b0001011;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 7'b0001100;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 7'b0001101;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 7'b0001110;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 7'b0001111;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 7'b0010000;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 7'b0010001;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 7'b0010010;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 7'b0010011;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 7'b0010100;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 7'b0010101;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 7'b0010110;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 7'b0010111;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 7'b0011000;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 7'b0011001;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 7'b0011010;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 7'b0011011;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 7'b0011100;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 7'b0011101;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 7'b0011110;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 7'b0011111;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 7'b0100000;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 7'b0100001;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 7'b0100010;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 7'b0100011;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = modExp_dev_1_while_C_0;
        end
      end
      modExp_dev_1_while_C_0 : begin
        fsm_output = 7'b0100100;
        state_var_NS = modExp_dev_1_while_C_1;
      end
      modExp_dev_1_while_C_1 : begin
        fsm_output = 7'b0100101;
        state_var_NS = modExp_dev_1_while_C_2;
      end
      modExp_dev_1_while_C_2 : begin
        fsm_output = 7'b0100110;
        state_var_NS = modExp_dev_1_while_C_3;
      end
      modExp_dev_1_while_C_3 : begin
        fsm_output = 7'b0100111;
        state_var_NS = modExp_dev_1_while_C_4;
      end
      modExp_dev_1_while_C_4 : begin
        fsm_output = 7'b0101000;
        state_var_NS = modExp_dev_1_while_C_5;
      end
      modExp_dev_1_while_C_5 : begin
        fsm_output = 7'b0101001;
        state_var_NS = modExp_dev_1_while_C_6;
      end
      modExp_dev_1_while_C_6 : begin
        fsm_output = 7'b0101010;
        state_var_NS = modExp_dev_1_while_C_7;
      end
      modExp_dev_1_while_C_7 : begin
        fsm_output = 7'b0101011;
        state_var_NS = modExp_dev_1_while_C_8;
      end
      modExp_dev_1_while_C_8 : begin
        fsm_output = 7'b0101100;
        state_var_NS = modExp_dev_1_while_C_9;
      end
      modExp_dev_1_while_C_9 : begin
        fsm_output = 7'b0101101;
        state_var_NS = modExp_dev_1_while_C_10;
      end
      modExp_dev_1_while_C_10 : begin
        fsm_output = 7'b0101110;
        state_var_NS = modExp_dev_1_while_C_11;
      end
      modExp_dev_1_while_C_11 : begin
        fsm_output = 7'b0101111;
        if ( modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 7'b0110000;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 7'b0110001;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 7'b0110010;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 7'b0110011;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 7'b0110100;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 7'b0110101;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 7'b0110110;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 7'b0110111;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 7'b0111000;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 7'b0111001;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 7'b0111010;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 7'b0111011;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 7'b0111100;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 7'b0111101;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 7'b0111110;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 7'b0111111;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 7'b1000000;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 7'b1000001;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 7'b1000010;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 7'b1000011;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 7'b1000100;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 7'b1000101;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 7'b1000110;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 7'b1000111;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 7'b1001000;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 7'b1001001;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 7'b1001010;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 7'b1001011;
        if ( COMP_LOOP_C_44_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 7'b1001100;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_5;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_5 : begin
        fsm_output = 7'b1001101;
        if ( STAGE_MAIN_LOOP_C_5_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 7'b1001110;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  clk, ensig_cgo_iro, modExp_dev_while_rem_cmp_z, ensig_cgo, modulo_dev_cmp_ccs_ccore_en,
      modExp_dev_while_rem_cmp_z_oreg
);
  input clk;
  input ensig_cgo_iro;
  input [63:0] modExp_dev_while_rem_cmp_z;
  input ensig_cgo;
  output modulo_dev_cmp_ccs_ccore_en;
  output [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] modExp_dev_while_rem_cmp_z_oreg;



  // Interconnect Declarations for Component Instantiations 
  assign modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
  always @(posedge clk) begin
    modExp_dev_while_rem_cmp_z_oreg <= modExp_dev_while_rem_cmp_z;
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsci_d_d, vec_rsci_q_d, vec_rsci_radr_d, vec_rsci_wadr_d, vec_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      modExp_dev_while_rem_cmp_a, modExp_dev_while_rem_cmp_b, modExp_dev_while_rem_cmp_z,
      vec_rsci_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  output [63:0] vec_rsci_d_d;
  input [63:0] vec_rsci_q_d;
  output [9:0] vec_rsci_radr_d;
  output [9:0] vec_rsci_wadr_d;
  output vec_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] modExp_dev_while_rem_cmp_a;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  output [63:0] modExp_dev_while_rem_cmp_b;
  input [63:0] modExp_dev_while_rem_cmp_z;
  output vec_rsci_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] modulo_dev_cmp_return_rsc_z;
  wire modulo_dev_cmp_ccs_ccore_en;
  wire [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [6:0] fsm_output;
  wire or_tmp;
  wire nor_tmp_5;
  wire mux_tmp_28;
  wire mux_tmp_30;
  wire and_dcpl_2;
  wire and_dcpl_3;
  wire and_dcpl_5;
  wire and_dcpl_6;
  wire and_dcpl_8;
  wire and_dcpl_10;
  wire and_dcpl_11;
  wire and_dcpl_23;
  wire and_dcpl_25;
  wire mux_tmp_33;
  wire mux_tmp_36;
  wire and_dcpl_27;
  wire and_dcpl_29;
  wire and_dcpl_30;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_37;
  wire and_dcpl_39;
  wire nor_tmp_9;
  wire and_dcpl_42;
  wire and_dcpl_46;
  wire and_dcpl_48;
  wire and_dcpl_49;
  wire and_dcpl_50;
  wire nor_tmp_11;
  wire and_dcpl_61;
  wire and_dcpl_62;
  wire or_dcpl_15;
  reg exit_modExp_dev_1_while_sva;
  reg operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm;
  reg reg_vec_rsc_triosy_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_13_cse;
  wire or_44_cse;
  wire or_48_cse;
  wire nor_cse;
  wire or_12_cse;
  wire or_15_cse;
  wire or_35_cse;
  wire mux_26_cse;
  reg [63:0] factor2_sva;
  reg [63:0] factor1_sva;
  reg [63:0] modExp_dev_1_while_mul_mut;
  wire [9:0] operator_64_false_acc_cse_sva_mx0w0;
  wire [10:0] nl_operator_64_false_acc_cse_sva_mx0w0;
  reg [9:0] operator_64_false_acc_cse_sva;
  reg [63:0] p_sva;
  wire mux_47_itm;
  wire and_dcpl_73;
  wire and_dcpl_80;
  wire and_dcpl_86;
  wire [63:0] z_out;
  wire [127:0] nl_z_out;
  wire and_dcpl_90;
  wire and_dcpl_92;
  wire and_dcpl_94;
  wire and_dcpl_95;
  wire and_dcpl_97;
  wire and_dcpl_98;
  wire and_dcpl_99;
  wire and_dcpl_100;
  wire and_dcpl_102;
  wire and_dcpl_104;
  wire and_dcpl_107;
  wire and_dcpl_110;
  wire [64:0] z_out_1;
  wire [9:0] z_out_2;
  wire [10:0] nl_z_out_2;
  wire and_dcpl_131;
  wire and_dcpl_135;
  wire and_dcpl_148;
  wire [63:0] z_out_3;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [8:0] COMP_LOOP_k_9_0_sva_8_0;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire modExp_dev_1_while_mul_mut_mx0c3;
  wire and_61_rgt;
  wire nor_15_cse;
  wire operator_64_false_1_or_5_ssc;
  wire and_127_cse;
  wire and_131_cse;
  wire [9:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  reg COMP_LOOP_acc_cse_sva_9;
  reg [8:0] COMP_LOOP_acc_cse_sva_8_0;
  wire and_83_cse_1;
  wire operator_64_false_1_or_6_itm;
  wire and_152_cse;

  wire[0:0] mux_46_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] or_25_nl;
  wire[0:0] and_41_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] and_74_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] nand_3_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] or_14_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] and_73_nl;
  wire[0:0] operator_64_false_or_2_nl;
  wire[0:0] and_52_nl;
  wire[0:0] and_28_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] mux_7_nl;
  wire[0:0] mux_6_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] or_43_nl;
  wire[0:0] modExp_dev_while_or_1_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] or_78_nl;
  wire[0:0] mux_nl;
  wire[0:0] or_nl;
  wire[9:0] COMP_LOOP_acc_nl;
  wire[10:0] nl_COMP_LOOP_acc_nl;
  wire[8:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] and_69_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] or_91_nl;
  wire[0:0] or_92_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] and_171_nl;
  wire[0:0] nor_40_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] or_83_nl;
  wire[0:0] or_82_nl;
  wire[0:0] not_165_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] and_79_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] and_7_nl;
  wire[0:0] and_13_nl;
  wire[0:0] mux_37_nl;
  wire[0:0] or_74_nl;
  wire[0:0] or_75_nl;
  wire[0:0] mux_38_nl;
  wire[63:0] modExp_dev_while_mux_1_nl;
  wire[0:0] modExp_dev_while_or_2_nl;
  wire[63:0] modExp_dev_while_mux1h_4_nl;
  wire[65:0] acc_nl;
  wire[66:0] nl_acc_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_2_nl;
  wire[54:0] operator_64_false_1_operator_64_false_1_nor_2_nl;
  wire[54:0] operator_64_false_1_and_1_nl;
  wire[54:0] operator_64_false_1_mux1h_4_nl;
  wire[0:0] operator_64_false_1_nor_6_nl;
  wire[4:0] operator_64_false_1_operator_64_false_1_nor_3_nl;
  wire[4:0] operator_64_false_1_mux1h_5_nl;
  wire[3:0] operator_64_false_1_mux1h_6_nl;
  wire[0:0] operator_64_false_1_or_8_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_3_nl;
  wire[9:0] operator_64_false_1_or_9_nl;
  wire[9:0] operator_64_false_1_mux1h_7_nl;
  wire[0:0] operator_64_false_1_or_10_nl;
  wire[8:0] COMP_LOOP_mux_6_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_or_4_nl;
  wire[0:0] operator_64_false_or_5_nl;
  wire[63:0] operator_64_false_operator_64_false_or_1_nl;
  wire[63:0] operator_64_false_mux_2_nl;
  wire[0:0] operator_64_false_or_6_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_34_nl;
  wire [63:0] nl_modulo_dev_cmp_base_rsc_dat;
  assign and_34_nl = and_dcpl_31 & and_dcpl_33;
  assign nl_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_3, z_out, and_34_nl);
  wire [63:0] nl_modulo_dev_cmp_m_rsc_dat;
  assign nl_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] nor_16_nl;
  wire[0:0] nor_17_nl;
  wire[0:0] and_76_nl;
  wire [0:0] nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nor_16_nl = ~((fsm_output[0]) | (~ (fsm_output[5])));
  assign nor_17_nl = ~((~ (fsm_output[0])) | (fsm_output[5]));
  assign mux_48_nl = MUX_s_1_2_2(nor_16_nl, nor_17_nl, fsm_output[2]);
  assign and_76_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[5]);
  assign mux_49_nl = MUX_s_1_2_2(mux_48_nl, and_76_nl, fsm_output[3]);
  assign nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat = mux_49_nl & and_dcpl_5 & (~
      (fsm_output[1]));
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_1[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro = ~ mux_47_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = ~ (z_out_1[64]);
  wire[63:0] operator_64_false_acc_1_nl;
  wire[64:0] nl_operator_64_false_acc_1_nl;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_operator_64_false_acc_1_nl = ({55'b1111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]))}) + 64'b0000000000000000000000000000000000000000000000000000000000000001;
  assign operator_64_false_acc_1_nl = nl_operator_64_false_acc_1_nl[63:0];
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (readslicef_64_1_63(operator_64_false_acc_1_nl));
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out_1[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0 = z_out_1[4];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(vec_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  modulo_dev_cmp (
      .base_rsc_dat(nl_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .clk(clk),
      .ensig_cgo_iro(nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_dev_cmp_ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en),
      .modExp_dev_while_rem_cmp_z_oreg(modExp_dev_while_rem_cmp_z_oreg)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(exit_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .modExp_dev_1_while_C_11_tr0(exit_modExp_dev_1_while_sva),
      .COMP_LOOP_C_44_tr0(exit_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_5_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0[0:0])
    );
  assign mux_45_nl = MUX_s_1_2_2(mux_26_cse, mux_tmp_36, fsm_output[1]);
  assign mux_41_nl = MUX_s_1_2_2(mux_tmp_33, or_12_cse, fsm_output[5]);
  assign mux_43_nl = MUX_s_1_2_2(mux_tmp_36, mux_41_nl, or_13_cse);
  assign mux_46_nl = MUX_s_1_2_2(mux_45_nl, mux_43_nl, fsm_output[2]);
  assign or_25_nl = (fsm_output[2]) | (fsm_output[1]) | (fsm_output[5]);
  assign mux_40_nl = MUX_s_1_2_2(mux_tmp_33, or_12_cse, or_25_nl);
  assign mux_47_itm = MUX_s_1_2_2(mux_46_nl, mux_40_nl, fsm_output[3]);
  assign modExp_dev_while_rem_cmp_b = reg_modulo_dev_cmp_m_rsc_dat_cse;
  assign nor_cse = ~((fsm_output[1]) | (fsm_output[5]));
  assign or_35_cse = (fsm_output[1]) | (fsm_output[5]);
  assign or_13_cse = (fsm_output[1:0]!=2'b00);
  assign or_44_cse = (fsm_output[2:0]!=3'b000);
  assign or_15_cse = (~ (fsm_output[6])) | (fsm_output[4]);
  assign mux_26_cse = MUX_s_1_2_2(or_15_cse, (fsm_output[6]), fsm_output[5]);
  assign and_61_rgt = and_dcpl_6 & and_dcpl_48;
  assign or_48_cse = (fsm_output[5:4]!=2'b00);
  assign and_83_cse_1 = (fsm_output[1:0]==2'b11);
  assign nl_COMP_LOOP_acc_nl = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10(COMP_LOOP_k_9_0_sva_8_0);
  assign COMP_LOOP_acc_nl = nl_COMP_LOOP_acc_nl[9:0];
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_9_2_2(COMP_LOOP_k_9_0_sva_8_0, (z_out_3[8:0]),
      and_dcpl_42);
  assign and_69_nl = (and_83_cse_1 | (fsm_output[3:2]!=2'b00)) & and_dcpl_37 & (fsm_output[5]);
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_10_2_2(COMP_LOOP_acc_nl, ({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      and_69_nl);
  assign nl_operator_64_false_acc_cse_sva_mx0w0 = z_out_2 + STAGE_VEC_LOOP_j_sva_9_0;
  assign operator_64_false_acc_cse_sva_mx0w0 = nl_operator_64_false_acc_cse_sva_mx0w0[9:0];
  assign or_tmp = (fsm_output[5:4]!=2'b10);
  assign or_12_cse = (fsm_output[6]) | (~ (fsm_output[4]));
  assign nor_tmp_5 = or_48_cse & (fsm_output[6]);
  assign mux_tmp_28 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), or_48_cse);
  assign mux_35_nl = MUX_s_1_2_2(mux_tmp_28, nor_tmp_5, or_44_cse);
  assign and_79_nl = (((fsm_output[2:1]==2'b11)) | (fsm_output[5:4]!=2'b00)) & (fsm_output[6]);
  assign mux_tmp_30 = MUX_s_1_2_2(mux_35_nl, and_79_nl, fsm_output[3]);
  assign and_dcpl_2 = (~ (fsm_output[0])) & (fsm_output[2]);
  assign and_dcpl_3 = and_dcpl_2 & (~ (fsm_output[3]));
  assign and_dcpl_5 = (~ (fsm_output[6])) & (fsm_output[4]);
  assign and_dcpl_6 = and_dcpl_5 & nor_cse;
  assign and_dcpl_8 = ~((fsm_output[0]) | (fsm_output[2]));
  assign and_dcpl_10 = (~ (fsm_output[5])) & (fsm_output[1]);
  assign and_dcpl_11 = (fsm_output[6]) & (~ (fsm_output[4]));
  assign and_dcpl_23 = (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_25 = and_dcpl_11 & nor_cse;
  assign mux_tmp_33 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[4]);
  assign mux_tmp_36 = MUX_s_1_2_2(or_15_cse, or_12_cse, fsm_output[5]);
  assign and_dcpl_27 = and_dcpl_23 & (~ (fsm_output[3]));
  assign and_dcpl_29 = and_dcpl_8 & (~ (fsm_output[3]));
  assign and_dcpl_30 = (fsm_output[5]) & (~ (fsm_output[1]));
  assign and_dcpl_31 = and_dcpl_5 & and_dcpl_30;
  assign and_dcpl_32 = and_dcpl_31 & and_dcpl_29;
  assign and_dcpl_33 = and_dcpl_23 & (fsm_output[3]);
  assign and_dcpl_37 = ~((fsm_output[6]) | (fsm_output[4]));
  assign and_dcpl_39 = and_dcpl_37 & and_dcpl_10 & and_dcpl_3;
  assign nor_tmp_9 = (fsm_output[1]) & (fsm_output[5]);
  assign and_dcpl_42 = and_dcpl_37 & and_dcpl_30 & and_dcpl_3;
  assign mux_52_nl = MUX_s_1_2_2((~ (fsm_output[1])), or_13_cse, fsm_output[2]);
  assign and_dcpl_46 = ~(mux_52_nl | (fsm_output[6:3]!=4'b0000));
  assign and_dcpl_48 = (fsm_output[0]) & (~ (fsm_output[2])) & (~ (fsm_output[3]));
  assign and_dcpl_49 = and_dcpl_37 & nor_cse;
  assign and_dcpl_50 = and_dcpl_49 & and_dcpl_48;
  assign nor_tmp_11 = (fsm_output[5:4]==2'b11);
  assign nor_15_cse = ~((fsm_output[5:4]!=2'b00));
  assign and_dcpl_61 = and_dcpl_37 & nor_tmp_9;
  assign and_dcpl_62 = and_dcpl_61 & and_dcpl_48;
  assign or_dcpl_15 = or_12_cse | (fsm_output[5]) | (~ (fsm_output[1])) | (~ (fsm_output[0]))
      | (fsm_output[2]) | (fsm_output[3]);
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_25 & and_dcpl_2 & (fsm_output[3]);
  assign modExp_dev_1_while_mul_mut_mx0c3 = and_dcpl_61 & and_dcpl_33;
  assign vec_rsci_d_d = modulo_dev_cmp_return_rsc_z;
  assign and_7_nl = and_dcpl_6 & and_dcpl_3;
  assign vec_rsci_radr_d = MUX_v_10_2_2(operator_64_false_acc_cse_sva_mx0w0, ({COMP_LOOP_acc_cse_sva_9
      , COMP_LOOP_acc_cse_sva_8_0}), and_7_nl);
  assign and_13_nl = and_dcpl_11 & and_dcpl_10 & and_dcpl_8 & (fsm_output[3]);
  assign vec_rsci_wadr_d = MUX_v_10_2_2(({COMP_LOOP_acc_cse_sva_9 , COMP_LOOP_acc_cse_sva_8_0}),
      operator_64_false_acc_cse_sva, and_13_nl);
  assign or_74_nl = (fsm_output[6:5]!=2'b01);
  assign or_75_nl = (fsm_output[6:5]!=2'b10);
  assign mux_37_nl = MUX_s_1_2_2(or_74_nl, or_75_nl, fsm_output[3]);
  assign vec_rsci_we_d_pff = ~(mux_37_nl | (fsm_output[4]) | (~ (fsm_output[1]))
      | (fsm_output[0]) | (fsm_output[2]));
  assign mux_38_nl = MUX_s_1_2_2(and_83_cse_1, (~ or_13_cse), fsm_output[2]);
  assign vec_rsci_readA_r_ram_ir_internal_RMASK_B_d = mux_38_nl & (fsm_output[6:3]==4'b0010);
  assign and_dcpl_73 = (fsm_output[3:2]==2'b01);
  assign and_dcpl_80 = and_dcpl_73 & (~ (fsm_output[0])) & (~ (fsm_output[1])) &
      (fsm_output[5]) & (~ (fsm_output[4])) & (~ (fsm_output[6]));
  assign and_dcpl_86 = (fsm_output==7'b0111101);
  assign and_dcpl_90 = ~((fsm_output[3:2]!=2'b00));
  assign and_dcpl_92 = and_dcpl_90 & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[5]))
      & (fsm_output[4]) & (~ (fsm_output[6]));
  assign and_dcpl_94 = nor_15_cse & (~ (fsm_output[6]));
  assign and_dcpl_95 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_97 = and_dcpl_90 & and_dcpl_95 & and_dcpl_94;
  assign and_dcpl_98 = nor_15_cse & (fsm_output[6]);
  assign and_dcpl_99 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_100 = (fsm_output[3:2]==2'b11);
  assign and_dcpl_102 = and_dcpl_100 & and_dcpl_99 & and_dcpl_98;
  assign and_dcpl_104 = and_dcpl_100 & and_dcpl_95 & and_dcpl_98;
  assign and_dcpl_107 = and_dcpl_73 & and_dcpl_95 & and_dcpl_94;
  assign and_dcpl_110 = and_dcpl_73 & (fsm_output[1:0]==2'b10) & and_dcpl_94;
  assign and_127_cse = and_dcpl_73 & and_dcpl_99 & (fsm_output[6:4]==3'b010);
  assign and_131_cse = and_dcpl_90 & and_dcpl_99 & (fsm_output[6:4]==3'b011);
  assign and_dcpl_131 = ~((fsm_output[6:4]!=3'b000));
  assign and_dcpl_135 = and_dcpl_90 & and_dcpl_95 & and_dcpl_131;
  assign and_152_cse = and_dcpl_73 & (fsm_output[1:0]==2'b10) & and_dcpl_131;
  assign and_dcpl_148 = and_dcpl_73 & and_dcpl_95 & (fsm_output[6:4]==3'b001);
  assign operator_64_false_1_or_5_ssc = and_dcpl_110 | and_127_cse;
  assign operator_64_false_1_or_6_itm = and_dcpl_97 | and_dcpl_104;
  always @(posedge clk) begin
    if ( mux_tmp_30 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_obj_ld_cse <= and_dcpl_25 & and_dcpl_23 & (fsm_output[3])
          & (z_out_1[4]);
      reg_ensig_cgo_cse <= ~ mux_47_itm;
    end
  end
  always @(posedge clk) begin
    reg_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(z_out, modExp_dev_1_while_mul_mut,
        and_41_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_3, factor1_sva, and_dcpl_46);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_46);
  end
  always @(posedge clk) begin
    if ( mux_tmp_30 | and_dcpl_50 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_1[3:0]), and_dcpl_50);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_53_nl, mux_55_nl, fsm_output[3]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( mux_63_nl | (fsm_output[6]) ) begin
      factor1_sva <= MUX1HOT_v_64_3_2(z_out_3, STAGE_MAIN_LOOP_div_cmp_z, vec_rsci_q_d,
          {operator_64_false_or_2_nl , and_52_nl , and_28_nl});
    end
  end
  always @(posedge clk) begin
    if ( (~((fsm_output[6:5]!=2'b00) | (~((fsm_output[4]) ^ (fsm_output[2]))) | (fsm_output[1])
        | (~ (fsm_output[0])) | (fsm_output[3]))) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1
        ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out_1[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_69_nl | and_61_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z_oreg, and_61_rgt);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_39 | and_dcpl_42 | and_dcpl_32 ) begin
      exit_modExp_dev_1_while_sva <= MUX_s_1_2_2((~ (z_out_1[64])), (~ (z_out_1[63])),
          and_dcpl_32);
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_39 | and_dcpl_62 | and_dcpl_42 | modExp_dev_1_while_mul_mut_mx0c3
        ) begin
      modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_3_2(z_out, 64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z_oreg, {modExp_dev_while_or_1_nl , and_dcpl_62
          , modExp_dev_1_while_mul_mut_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_87_nl, mux_nl, fsm_output[3]) ) begin
      COMP_LOOP_k_9_0_sva_8_0 <= MUX_v_9_2_2(9'b000000000, (z_out_2[8:0]), nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_15 ) begin
      operator_64_false_acc_cse_sva <= operator_64_false_acc_cse_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_15 ) begin
      operator_64_false_1_slc_operator_64_false_1_acc_1_9_itm <= z_out_1[9];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_89_nl | (fsm_output[6])) ) begin
      COMP_LOOP_acc_cse_sva_9 <= COMP_LOOP_COMP_LOOP_mux_rgt[9];
    end
  end
  always @(posedge clk) begin
    if ( mux_91_nl & (~((fsm_output[3]) | (fsm_output[6]))) ) begin
      COMP_LOOP_acc_cse_sva_8_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[8:0];
    end
  end
  always @(posedge clk) begin
    if ( ~(or_12_cse | or_35_cse | (fsm_output[0]) | (~ (fsm_output[2])) | (fsm_output[3]))
        ) begin
      factor2_sva <= vec_rsci_q_d;
    end
  end
  always @(posedge clk) begin
    if ( (~((or_13_cse & (fsm_output[2])) | (fsm_output[3]))) | (fsm_output[6:4]!=3'b010)
        ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), not_165_nl);
    end
  end
  assign mux_50_nl = MUX_s_1_2_2(nor_tmp_9, or_35_cse, fsm_output[0]);
  assign and_74_nl = (fsm_output[2]) & mux_50_nl;
  assign nand_3_nl = ~((fsm_output[2]) & (fsm_output[1]) & (fsm_output[5]));
  assign mux_51_nl = MUX_s_1_2_2(and_74_nl, nand_3_nl, fsm_output[3]);
  assign and_41_nl = mux_51_nl & and_dcpl_37;
  assign or_14_nl = (fsm_output[2:1]!=2'b00);
  assign mux_53_nl = MUX_s_1_2_2(mux_tmp_28, nor_tmp_5, or_14_nl);
  assign and_73_nl = ((fsm_output[0]) | (fsm_output[1]) | (fsm_output[5]) | (fsm_output[4]))
      & (fsm_output[6]);
  assign mux_55_nl = MUX_s_1_2_2(nor_tmp_5, and_73_nl, fsm_output[2]);
  assign operator_64_false_or_2_nl = and_dcpl_50 | and_dcpl_39;
  assign and_52_nl = and_dcpl_49 & and_dcpl_27;
  assign and_28_nl = and_dcpl_6 & and_dcpl_27;
  assign mux_61_nl = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), or_35_cse);
  assign mux_6_nl = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[5]);
  assign mux_7_nl = MUX_s_1_2_2(or_tmp, mux_6_nl, fsm_output[1]);
  assign mux_57_nl = MUX_s_1_2_2(or_tmp, nor_tmp_11, fsm_output[1]);
  assign mux_60_nl = MUX_s_1_2_2(mux_7_nl, mux_57_nl, fsm_output[0]);
  assign mux_62_nl = MUX_s_1_2_2(mux_61_nl, mux_60_nl, fsm_output[2]);
  assign mux_63_nl = MUX_s_1_2_2(mux_62_nl, nor_tmp_11, fsm_output[3]);
  assign mux_68_nl = MUX_s_1_2_2(mux_26_cse, mux_tmp_28, or_44_cse);
  assign or_43_nl = nor_15_cse | (fsm_output[6]);
  assign mux_66_nl = MUX_s_1_2_2(mux_tmp_28, or_43_nl, or_13_cse);
  assign mux_67_nl = MUX_s_1_2_2(mux_tmp_28, mux_66_nl, fsm_output[2]);
  assign mux_69_nl = MUX_s_1_2_2(mux_68_nl, mux_67_nl, fsm_output[3]);
  assign modExp_dev_while_or_1_nl = and_dcpl_39 | and_dcpl_42;
  assign nand_nl = ~(and_dcpl_5 & and_dcpl_10 & and_dcpl_29);
  assign or_78_nl = and_83_cse_1 | (fsm_output[2]);
  assign mux_85_nl = MUX_s_1_2_2(or_78_nl, or_44_cse, fsm_output[5]);
  assign mux_86_nl = MUX_s_1_2_2((fsm_output[5]), mux_85_nl, fsm_output[4]);
  assign mux_87_nl = MUX_s_1_2_2((~ mux_86_nl), or_48_cse, fsm_output[6]);
  assign or_nl = (fsm_output[4]) | (fsm_output[5]) | (fsm_output[2]);
  assign mux_nl = MUX_s_1_2_2((~ or_48_cse), or_nl, fsm_output[6]);
  assign or_91_nl = (fsm_output[4:0]!=5'b10011);
  assign or_92_nl = (fsm_output[4]) | (~(and_83_cse_1 | (fsm_output[3:2]!=2'b00)));
  assign mux_89_nl = MUX_s_1_2_2(or_91_nl, or_92_nl, fsm_output[5]);
  assign and_171_nl = (fsm_output[4]) & (fsm_output[1]) & (fsm_output[0]) & (~ (fsm_output[2]));
  assign or_83_nl = (fsm_output[0]) | (~ (fsm_output[2]));
  assign or_82_nl = (~ (fsm_output[0])) | (fsm_output[2]);
  assign mux_90_nl = MUX_s_1_2_2(or_83_nl, or_82_nl, fsm_output[1]);
  assign nor_40_nl = ~((fsm_output[4]) | mux_90_nl);
  assign mux_91_nl = MUX_s_1_2_2(and_171_nl, nor_40_nl, fsm_output[5]);
  assign not_165_nl = ~ and_dcpl_62;
  assign modExp_dev_while_or_2_nl = and_dcpl_80 | and_dcpl_86;
  assign modExp_dev_while_mux_1_nl = MUX_v_64_2_2(modExp_dev_result_sva, modExp_dev_1_while_mul_mut,
      modExp_dev_while_or_2_nl);
  assign modExp_dev_while_mux1h_4_nl = MUX1HOT_v_64_3_2(r_sva, modExp_dev_result_sva,
      modulo_dev_cmp_return_rsc_z, {and_152_cse , and_dcpl_80 , and_dcpl_86});
  assign nl_z_out = modExp_dev_while_mux_1_nl * modExp_dev_while_mux1h_4_nl;
  assign z_out = nl_z_out[63:0];
  assign operator_64_false_1_operator_64_false_1_or_2_nl = (~(and_dcpl_97 | and_dcpl_102
      | and_dcpl_104 | and_131_cse)) | and_dcpl_92 | and_dcpl_107 | and_dcpl_110
      | and_127_cse;
  assign operator_64_false_1_mux1h_4_nl = MUX1HOT_v_55_3_2(({54'b111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_VEC_LOOP_j_sva_9_0[9]))}), (STAGE_MAIN_LOOP_div_cmp_z[63:9]), (z_out_3[63:9]),
      {and_dcpl_102 , and_dcpl_107 , operator_64_false_1_or_5_ssc});
  assign operator_64_false_1_nor_6_nl = ~(and_dcpl_92 | and_131_cse);
  assign operator_64_false_1_and_1_nl = MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
      operator_64_false_1_mux1h_4_nl, operator_64_false_1_nor_6_nl);
  assign operator_64_false_1_operator_64_false_1_nor_2_nl = ~(MUX_v_55_2_2(operator_64_false_1_and_1_nl,
      55'b1111111111111111111111111111111111111111111111111111111, operator_64_false_1_or_6_itm));
  assign operator_64_false_1_mux1h_5_nl = MUX1HOT_v_5_5_2((COMP_LOOP_k_9_0_sva_8_0[8:4]),
      (~ (STAGE_VEC_LOOP_j_sva_9_0[8:4])), (STAGE_MAIN_LOOP_div_cmp_z[8:4]), (z_out_3[8:4]),
      (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:5]), {and_dcpl_92 , and_dcpl_102 , and_dcpl_107
      , operator_64_false_1_or_5_ssc , and_131_cse});
  assign operator_64_false_1_operator_64_false_1_nor_3_nl = ~(MUX_v_5_2_2(operator_64_false_1_mux1h_5_nl,
      5'b11111, operator_64_false_1_or_6_itm));
  assign operator_64_false_1_mux1h_6_nl = MUX1HOT_v_4_6_2((~ (COMP_LOOP_k_9_0_sva_8_0[3:0])),
      STAGE_MAIN_LOOP_acc_1_psp_sva, (STAGE_VEC_LOOP_j_sva_9_0[3:0]), (~ (STAGE_MAIN_LOOP_div_cmp_z[3:0])),
      (~ (z_out_3[3:0])), (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[4:1])), {and_dcpl_92
      , operator_64_false_1_or_6_itm , and_dcpl_102 , and_dcpl_107 , operator_64_false_1_or_5_ssc
      , and_131_cse});
  assign operator_64_false_1_or_8_nl = (~(and_dcpl_92 | and_dcpl_97 | and_dcpl_102
      | and_dcpl_104 | and_dcpl_107 | and_dcpl_110 | and_127_cse)) | and_131_cse;
  assign operator_64_false_1_operator_64_false_1_or_3_nl = (~(and_dcpl_92 | and_dcpl_102
      | and_dcpl_107 | and_dcpl_110 | and_127_cse | and_131_cse)) | and_dcpl_97 |
      and_dcpl_104;
  assign operator_64_false_1_or_10_nl = and_dcpl_92 | and_dcpl_107 | and_dcpl_110
      | and_127_cse;
  assign operator_64_false_1_mux1h_7_nl = MUX1HOT_v_10_3_2(10'b0000000001, STAGE_MAIN_LOOP_lshift_psp_1_sva,
      z_out_2, {operator_64_false_1_or_10_nl , and_dcpl_102 , and_131_cse});
  assign operator_64_false_1_or_9_nl = MUX_v_10_2_2(operator_64_false_1_mux1h_7_nl,
      10'b1111111111, operator_64_false_1_or_6_itm);
  assign nl_acc_nl = ({operator_64_false_1_operator_64_false_1_or_2_nl , operator_64_false_1_operator_64_false_1_nor_2_nl
      , operator_64_false_1_operator_64_false_1_nor_3_nl , operator_64_false_1_mux1h_6_nl
      , operator_64_false_1_or_8_nl}) + conv_s2u_12_66({operator_64_false_1_operator_64_false_1_or_3_nl
      , operator_64_false_1_or_9_nl , 1'b1});
  assign acc_nl = nl_acc_nl[65:0];
  assign z_out_1 = readslicef_66_65_1(acc_nl);
  assign COMP_LOOP_mux_6_nl = MUX_v_9_2_2((STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]),
      9'b000000001, and_131_cse);
  assign nl_z_out_2 = conv_u2u_9_10(COMP_LOOP_k_9_0_sva_8_0) + conv_u2u_9_10(COMP_LOOP_mux_6_nl);
  assign z_out_2 = nl_z_out_2[9:0];
  assign operator_64_false_or_4_nl = and_152_cse | and_131_cse;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_64_4_2(p_sva, factor1_sva, ({modExp_dev_exp_1_sva_63_9
      , COMP_LOOP_acc_cse_sva_8_0}), vec_rsci_q_d, {and_dcpl_135 , operator_64_false_or_4_nl
      , and_127_cse , and_dcpl_148});
  assign operator_64_false_or_5_nl = (~(and_dcpl_135 | and_152_cse | and_127_cse
      | and_dcpl_148)) | and_131_cse;
  assign operator_64_false_mux_2_nl = MUX_v_64_2_2(factor2_sva, (~ factor2_sva),
      and_131_cse);
  assign operator_64_false_or_6_nl = and_dcpl_135 | and_152_cse | and_127_cse;
  assign operator_64_false_operator_64_false_or_1_nl = MUX_v_64_2_2(operator_64_false_mux_2_nl,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_6_nl);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl , operator_64_false_or_5_nl})
      + ({operator_64_false_operator_64_false_or_1_nl , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_3 = readslicef_65_64_1(acc_2_nl);

  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_6_2;
    input [3:0] input_5;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [5:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    result = result | ( input_4 & {4{sel[4]}});
    result = result | ( input_5 & {4{sel[5]}});
    MUX1HOT_v_4_6_2 = result;
  end
  endfunction


  function automatic [54:0] MUX1HOT_v_55_3_2;
    input [54:0] input_2;
    input [54:0] input_1;
    input [54:0] input_0;
    input [2:0] sel;
    reg [54:0] result;
  begin
    result = input_0 & {55{sel[0]}};
    result = result | ( input_1 & {55{sel[1]}});
    result = result | ( input_2 & {55{sel[2]}});
    MUX1HOT_v_55_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_5_2;
    input [4:0] input_4;
    input [4:0] input_3;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [4:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | ( input_1 & {5{sel[1]}});
    result = result | ( input_2 & {5{sel[2]}});
    result = result | ( input_3 & {5{sel[3]}});
    result = result | ( input_4 & {5{sel[4]}});
    MUX1HOT_v_5_5_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_64_1_63;
    input [63:0] vector;
    reg [63:0] tmp;
  begin
    tmp = vector >> 63;
    readslicef_64_1_63 = tmp[0:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [64:0] readslicef_66_65_1;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_66_65_1 = tmp[64:0];
  end
  endfunction


  function automatic [65:0] conv_s2u_12_66 ;
    input [11:0]  vector ;
  begin
    conv_s2u_12_66 = {{54{vector[11]}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_wadr, vec_rsc_d, vec_rsc_we, vec_rsc_radr, vec_rsc_q, vec_rsc_triosy_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [9:0] vec_rsc_wadr;
  output [63:0] vec_rsc_d;
  output vec_rsc_we;
  output [9:0] vec_rsc_radr;
  input [63:0] vec_rsc_q;
  output vec_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsci_d_d;
  wire [63:0] vec_rsci_q_d;
  wire [9:0] vec_rsci_radr_d;
  wire [9:0] vec_rsci_wadr_d;
  wire vec_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_b;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  wire vec_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(modExp_dev_while_rem_cmp_b),
      .z(modExp_dev_while_rem_cmp_z)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen vec_rsci
      (
      .q(vec_rsc_q),
      .radr(vec_rsc_radr),
      .we(vec_rsc_we),
      .d(vec_rsc_d),
      .wadr(vec_rsc_wadr),
      .d_d(vec_rsci_d_d),
      .q_d(vec_rsci_q_d),
      .radr_d(vec_rsci_radr_d),
      .wadr_d(vec_rsci_wadr_d),
      .we_d(vec_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_lz(vec_rsc_triosy_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsci_d_d(vec_rsci_d_d),
      .vec_rsci_q_d(vec_rsci_q_d),
      .vec_rsci_radr_d(vec_rsci_radr_d),
      .vec_rsci_wadr_d(vec_rsci_wadr_d),
      .vec_rsci_readA_r_ram_ir_internal_RMASK_B_d(vec_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .modExp_dev_while_rem_cmp_a(modExp_dev_while_rem_cmp_a),
      .modExp_dev_while_rem_cmp_b(modExp_dev_while_rem_cmp_b),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .vec_rsci_we_d_pff(vec_rsci_we_d_iff)
    );
endmodule



