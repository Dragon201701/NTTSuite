// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 27 16:04:02 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_4_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, COMP_LOOP_1_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_44_tr0,
      COMP_LOOP_2_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_88_tr0, COMP_LOOP_3_modExp_dev_1_while_C_11_tr0,
      COMP_LOOP_C_132_tr0, COMP_LOOP_4_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_176_tr0,
      STAGE_VEC_LOOP_C_1_tr0, STAGE_MAIN_LOOP_C_5_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_MAIN_LOOP_C_4_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_44_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_88_tr0;
  input COMP_LOOP_3_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_132_tr0;
  input COMP_LOOP_4_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_176_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_5_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_MAIN_LOOP_C_0 = 8'd1,
    STAGE_MAIN_LOOP_C_1 = 8'd2,
    STAGE_MAIN_LOOP_C_2 = 8'd3,
    STAGE_MAIN_LOOP_C_3 = 8'd4,
    STAGE_MAIN_LOOP_C_4 = 8'd5,
    modExp_dev_while_C_0 = 8'd6,
    modExp_dev_while_C_1 = 8'd7,
    modExp_dev_while_C_2 = 8'd8,
    modExp_dev_while_C_3 = 8'd9,
    modExp_dev_while_C_4 = 8'd10,
    modExp_dev_while_C_5 = 8'd11,
    modExp_dev_while_C_6 = 8'd12,
    modExp_dev_while_C_7 = 8'd13,
    modExp_dev_while_C_8 = 8'd14,
    modExp_dev_while_C_9 = 8'd15,
    modExp_dev_while_C_10 = 8'd16,
    modExp_dev_while_C_11 = 8'd17,
    STAGE_VEC_LOOP_C_0 = 8'd18,
    COMP_LOOP_C_0 = 8'd19,
    COMP_LOOP_C_1 = 8'd20,
    COMP_LOOP_C_2 = 8'd21,
    COMP_LOOP_C_3 = 8'd22,
    COMP_LOOP_C_4 = 8'd23,
    COMP_LOOP_C_5 = 8'd24,
    COMP_LOOP_C_6 = 8'd25,
    COMP_LOOP_C_7 = 8'd26,
    COMP_LOOP_C_8 = 8'd27,
    COMP_LOOP_C_9 = 8'd28,
    COMP_LOOP_C_10 = 8'd29,
    COMP_LOOP_C_11 = 8'd30,
    COMP_LOOP_C_12 = 8'd31,
    COMP_LOOP_C_13 = 8'd32,
    COMP_LOOP_C_14 = 8'd33,
    COMP_LOOP_C_15 = 8'd34,
    COMP_LOOP_C_16 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd36,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd37,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd38,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd39,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd40,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd41,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd42,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd43,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd44,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd45,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd46,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd47,
    COMP_LOOP_C_17 = 8'd48,
    COMP_LOOP_C_18 = 8'd49,
    COMP_LOOP_C_19 = 8'd50,
    COMP_LOOP_C_20 = 8'd51,
    COMP_LOOP_C_21 = 8'd52,
    COMP_LOOP_C_22 = 8'd53,
    COMP_LOOP_C_23 = 8'd54,
    COMP_LOOP_C_24 = 8'd55,
    COMP_LOOP_C_25 = 8'd56,
    COMP_LOOP_C_26 = 8'd57,
    COMP_LOOP_C_27 = 8'd58,
    COMP_LOOP_C_28 = 8'd59,
    COMP_LOOP_C_29 = 8'd60,
    COMP_LOOP_C_30 = 8'd61,
    COMP_LOOP_C_31 = 8'd62,
    COMP_LOOP_C_32 = 8'd63,
    COMP_LOOP_C_33 = 8'd64,
    COMP_LOOP_C_34 = 8'd65,
    COMP_LOOP_C_35 = 8'd66,
    COMP_LOOP_C_36 = 8'd67,
    COMP_LOOP_C_37 = 8'd68,
    COMP_LOOP_C_38 = 8'd69,
    COMP_LOOP_C_39 = 8'd70,
    COMP_LOOP_C_40 = 8'd71,
    COMP_LOOP_C_41 = 8'd72,
    COMP_LOOP_C_42 = 8'd73,
    COMP_LOOP_C_43 = 8'd74,
    COMP_LOOP_C_44 = 8'd75,
    COMP_LOOP_C_45 = 8'd76,
    COMP_LOOP_C_46 = 8'd77,
    COMP_LOOP_C_47 = 8'd78,
    COMP_LOOP_C_48 = 8'd79,
    COMP_LOOP_C_49 = 8'd80,
    COMP_LOOP_C_50 = 8'd81,
    COMP_LOOP_C_51 = 8'd82,
    COMP_LOOP_C_52 = 8'd83,
    COMP_LOOP_C_53 = 8'd84,
    COMP_LOOP_C_54 = 8'd85,
    COMP_LOOP_C_55 = 8'd86,
    COMP_LOOP_C_56 = 8'd87,
    COMP_LOOP_C_57 = 8'd88,
    COMP_LOOP_C_58 = 8'd89,
    COMP_LOOP_C_59 = 8'd90,
    COMP_LOOP_C_60 = 8'd91,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd92,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd93,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd94,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd95,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd96,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd97,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd98,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd99,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd100,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd101,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd102,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd103,
    COMP_LOOP_C_61 = 8'd104,
    COMP_LOOP_C_62 = 8'd105,
    COMP_LOOP_C_63 = 8'd106,
    COMP_LOOP_C_64 = 8'd107,
    COMP_LOOP_C_65 = 8'd108,
    COMP_LOOP_C_66 = 8'd109,
    COMP_LOOP_C_67 = 8'd110,
    COMP_LOOP_C_68 = 8'd111,
    COMP_LOOP_C_69 = 8'd112,
    COMP_LOOP_C_70 = 8'd113,
    COMP_LOOP_C_71 = 8'd114,
    COMP_LOOP_C_72 = 8'd115,
    COMP_LOOP_C_73 = 8'd116,
    COMP_LOOP_C_74 = 8'd117,
    COMP_LOOP_C_75 = 8'd118,
    COMP_LOOP_C_76 = 8'd119,
    COMP_LOOP_C_77 = 8'd120,
    COMP_LOOP_C_78 = 8'd121,
    COMP_LOOP_C_79 = 8'd122,
    COMP_LOOP_C_80 = 8'd123,
    COMP_LOOP_C_81 = 8'd124,
    COMP_LOOP_C_82 = 8'd125,
    COMP_LOOP_C_83 = 8'd126,
    COMP_LOOP_C_84 = 8'd127,
    COMP_LOOP_C_85 = 8'd128,
    COMP_LOOP_C_86 = 8'd129,
    COMP_LOOP_C_87 = 8'd130,
    COMP_LOOP_C_88 = 8'd131,
    COMP_LOOP_C_89 = 8'd132,
    COMP_LOOP_C_90 = 8'd133,
    COMP_LOOP_C_91 = 8'd134,
    COMP_LOOP_C_92 = 8'd135,
    COMP_LOOP_C_93 = 8'd136,
    COMP_LOOP_C_94 = 8'd137,
    COMP_LOOP_C_95 = 8'd138,
    COMP_LOOP_C_96 = 8'd139,
    COMP_LOOP_C_97 = 8'd140,
    COMP_LOOP_C_98 = 8'd141,
    COMP_LOOP_C_99 = 8'd142,
    COMP_LOOP_C_100 = 8'd143,
    COMP_LOOP_C_101 = 8'd144,
    COMP_LOOP_C_102 = 8'd145,
    COMP_LOOP_C_103 = 8'd146,
    COMP_LOOP_C_104 = 8'd147,
    COMP_LOOP_3_modExp_dev_1_while_C_0 = 8'd148,
    COMP_LOOP_3_modExp_dev_1_while_C_1 = 8'd149,
    COMP_LOOP_3_modExp_dev_1_while_C_2 = 8'd150,
    COMP_LOOP_3_modExp_dev_1_while_C_3 = 8'd151,
    COMP_LOOP_3_modExp_dev_1_while_C_4 = 8'd152,
    COMP_LOOP_3_modExp_dev_1_while_C_5 = 8'd153,
    COMP_LOOP_3_modExp_dev_1_while_C_6 = 8'd154,
    COMP_LOOP_3_modExp_dev_1_while_C_7 = 8'd155,
    COMP_LOOP_3_modExp_dev_1_while_C_8 = 8'd156,
    COMP_LOOP_3_modExp_dev_1_while_C_9 = 8'd157,
    COMP_LOOP_3_modExp_dev_1_while_C_10 = 8'd158,
    COMP_LOOP_3_modExp_dev_1_while_C_11 = 8'd159,
    COMP_LOOP_C_105 = 8'd160,
    COMP_LOOP_C_106 = 8'd161,
    COMP_LOOP_C_107 = 8'd162,
    COMP_LOOP_C_108 = 8'd163,
    COMP_LOOP_C_109 = 8'd164,
    COMP_LOOP_C_110 = 8'd165,
    COMP_LOOP_C_111 = 8'd166,
    COMP_LOOP_C_112 = 8'd167,
    COMP_LOOP_C_113 = 8'd168,
    COMP_LOOP_C_114 = 8'd169,
    COMP_LOOP_C_115 = 8'd170,
    COMP_LOOP_C_116 = 8'd171,
    COMP_LOOP_C_117 = 8'd172,
    COMP_LOOP_C_118 = 8'd173,
    COMP_LOOP_C_119 = 8'd174,
    COMP_LOOP_C_120 = 8'd175,
    COMP_LOOP_C_121 = 8'd176,
    COMP_LOOP_C_122 = 8'd177,
    COMP_LOOP_C_123 = 8'd178,
    COMP_LOOP_C_124 = 8'd179,
    COMP_LOOP_C_125 = 8'd180,
    COMP_LOOP_C_126 = 8'd181,
    COMP_LOOP_C_127 = 8'd182,
    COMP_LOOP_C_128 = 8'd183,
    COMP_LOOP_C_129 = 8'd184,
    COMP_LOOP_C_130 = 8'd185,
    COMP_LOOP_C_131 = 8'd186,
    COMP_LOOP_C_132 = 8'd187,
    COMP_LOOP_C_133 = 8'd188,
    COMP_LOOP_C_134 = 8'd189,
    COMP_LOOP_C_135 = 8'd190,
    COMP_LOOP_C_136 = 8'd191,
    COMP_LOOP_C_137 = 8'd192,
    COMP_LOOP_C_138 = 8'd193,
    COMP_LOOP_C_139 = 8'd194,
    COMP_LOOP_C_140 = 8'd195,
    COMP_LOOP_C_141 = 8'd196,
    COMP_LOOP_C_142 = 8'd197,
    COMP_LOOP_C_143 = 8'd198,
    COMP_LOOP_C_144 = 8'd199,
    COMP_LOOP_C_145 = 8'd200,
    COMP_LOOP_C_146 = 8'd201,
    COMP_LOOP_C_147 = 8'd202,
    COMP_LOOP_C_148 = 8'd203,
    COMP_LOOP_4_modExp_dev_1_while_C_0 = 8'd204,
    COMP_LOOP_4_modExp_dev_1_while_C_1 = 8'd205,
    COMP_LOOP_4_modExp_dev_1_while_C_2 = 8'd206,
    COMP_LOOP_4_modExp_dev_1_while_C_3 = 8'd207,
    COMP_LOOP_4_modExp_dev_1_while_C_4 = 8'd208,
    COMP_LOOP_4_modExp_dev_1_while_C_5 = 8'd209,
    COMP_LOOP_4_modExp_dev_1_while_C_6 = 8'd210,
    COMP_LOOP_4_modExp_dev_1_while_C_7 = 8'd211,
    COMP_LOOP_4_modExp_dev_1_while_C_8 = 8'd212,
    COMP_LOOP_4_modExp_dev_1_while_C_9 = 8'd213,
    COMP_LOOP_4_modExp_dev_1_while_C_10 = 8'd214,
    COMP_LOOP_4_modExp_dev_1_while_C_11 = 8'd215,
    COMP_LOOP_C_149 = 8'd216,
    COMP_LOOP_C_150 = 8'd217,
    COMP_LOOP_C_151 = 8'd218,
    COMP_LOOP_C_152 = 8'd219,
    COMP_LOOP_C_153 = 8'd220,
    COMP_LOOP_C_154 = 8'd221,
    COMP_LOOP_C_155 = 8'd222,
    COMP_LOOP_C_156 = 8'd223,
    COMP_LOOP_C_157 = 8'd224,
    COMP_LOOP_C_158 = 8'd225,
    COMP_LOOP_C_159 = 8'd226,
    COMP_LOOP_C_160 = 8'd227,
    COMP_LOOP_C_161 = 8'd228,
    COMP_LOOP_C_162 = 8'd229,
    COMP_LOOP_C_163 = 8'd230,
    COMP_LOOP_C_164 = 8'd231,
    COMP_LOOP_C_165 = 8'd232,
    COMP_LOOP_C_166 = 8'd233,
    COMP_LOOP_C_167 = 8'd234,
    COMP_LOOP_C_168 = 8'd235,
    COMP_LOOP_C_169 = 8'd236,
    COMP_LOOP_C_170 = 8'd237,
    COMP_LOOP_C_171 = 8'd238,
    COMP_LOOP_C_172 = 8'd239,
    COMP_LOOP_C_173 = 8'd240,
    COMP_LOOP_C_174 = 8'd241,
    COMP_LOOP_C_175 = 8'd242,
    COMP_LOOP_C_176 = 8'd243,
    STAGE_VEC_LOOP_C_1 = 8'd244,
    STAGE_MAIN_LOOP_C_5 = 8'd245,
    main_C_1 = 8'd246;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        state_var_NS = STAGE_MAIN_LOOP_C_4;
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 8'b00000101;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00010000;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010001;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 8'b00010010;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00100010;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00100011;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00101110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00101111;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01001011;
        if ( COMP_LOOP_C_44_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_45;
        end
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01100111;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_61;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10000011;
        if ( COMP_LOOP_C_88_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_89;
        end
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b10000100;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b10000101;
        state_var_NS = COMP_LOOP_C_91;
      end
      COMP_LOOP_C_91 : begin
        fsm_output = 8'b10000110;
        state_var_NS = COMP_LOOP_C_92;
      end
      COMP_LOOP_C_92 : begin
        fsm_output = 8'b10000111;
        state_var_NS = COMP_LOOP_C_93;
      end
      COMP_LOOP_C_93 : begin
        fsm_output = 8'b10001000;
        state_var_NS = COMP_LOOP_C_94;
      end
      COMP_LOOP_C_94 : begin
        fsm_output = 8'b10001001;
        state_var_NS = COMP_LOOP_C_95;
      end
      COMP_LOOP_C_95 : begin
        fsm_output = 8'b10001010;
        state_var_NS = COMP_LOOP_C_96;
      end
      COMP_LOOP_C_96 : begin
        fsm_output = 8'b10001011;
        state_var_NS = COMP_LOOP_C_97;
      end
      COMP_LOOP_C_97 : begin
        fsm_output = 8'b10001100;
        state_var_NS = COMP_LOOP_C_98;
      end
      COMP_LOOP_C_98 : begin
        fsm_output = 8'b10001101;
        state_var_NS = COMP_LOOP_C_99;
      end
      COMP_LOOP_C_99 : begin
        fsm_output = 8'b10001110;
        state_var_NS = COMP_LOOP_C_100;
      end
      COMP_LOOP_C_100 : begin
        fsm_output = 8'b10001111;
        state_var_NS = COMP_LOOP_C_101;
      end
      COMP_LOOP_C_101 : begin
        fsm_output = 8'b10010000;
        state_var_NS = COMP_LOOP_C_102;
      end
      COMP_LOOP_C_102 : begin
        fsm_output = 8'b10010001;
        state_var_NS = COMP_LOOP_C_103;
      end
      COMP_LOOP_C_103 : begin
        fsm_output = 8'b10010010;
        state_var_NS = COMP_LOOP_C_104;
      end
      COMP_LOOP_C_104 : begin
        fsm_output = 8'b10010011;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b10010100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b10010101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b10010110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b10010111;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b10011000;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b10011001;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b10011010;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b10011011;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b10011100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b10011101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b10011110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b10011111;
        if ( COMP_LOOP_3_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_105;
        end
        else begin
          state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_105 : begin
        fsm_output = 8'b10100000;
        state_var_NS = COMP_LOOP_C_106;
      end
      COMP_LOOP_C_106 : begin
        fsm_output = 8'b10100001;
        state_var_NS = COMP_LOOP_C_107;
      end
      COMP_LOOP_C_107 : begin
        fsm_output = 8'b10100010;
        state_var_NS = COMP_LOOP_C_108;
      end
      COMP_LOOP_C_108 : begin
        fsm_output = 8'b10100011;
        state_var_NS = COMP_LOOP_C_109;
      end
      COMP_LOOP_C_109 : begin
        fsm_output = 8'b10100100;
        state_var_NS = COMP_LOOP_C_110;
      end
      COMP_LOOP_C_110 : begin
        fsm_output = 8'b10100101;
        state_var_NS = COMP_LOOP_C_111;
      end
      COMP_LOOP_C_111 : begin
        fsm_output = 8'b10100110;
        state_var_NS = COMP_LOOP_C_112;
      end
      COMP_LOOP_C_112 : begin
        fsm_output = 8'b10100111;
        state_var_NS = COMP_LOOP_C_113;
      end
      COMP_LOOP_C_113 : begin
        fsm_output = 8'b10101000;
        state_var_NS = COMP_LOOP_C_114;
      end
      COMP_LOOP_C_114 : begin
        fsm_output = 8'b10101001;
        state_var_NS = COMP_LOOP_C_115;
      end
      COMP_LOOP_C_115 : begin
        fsm_output = 8'b10101010;
        state_var_NS = COMP_LOOP_C_116;
      end
      COMP_LOOP_C_116 : begin
        fsm_output = 8'b10101011;
        state_var_NS = COMP_LOOP_C_117;
      end
      COMP_LOOP_C_117 : begin
        fsm_output = 8'b10101100;
        state_var_NS = COMP_LOOP_C_118;
      end
      COMP_LOOP_C_118 : begin
        fsm_output = 8'b10101101;
        state_var_NS = COMP_LOOP_C_119;
      end
      COMP_LOOP_C_119 : begin
        fsm_output = 8'b10101110;
        state_var_NS = COMP_LOOP_C_120;
      end
      COMP_LOOP_C_120 : begin
        fsm_output = 8'b10101111;
        state_var_NS = COMP_LOOP_C_121;
      end
      COMP_LOOP_C_121 : begin
        fsm_output = 8'b10110000;
        state_var_NS = COMP_LOOP_C_122;
      end
      COMP_LOOP_C_122 : begin
        fsm_output = 8'b10110001;
        state_var_NS = COMP_LOOP_C_123;
      end
      COMP_LOOP_C_123 : begin
        fsm_output = 8'b10110010;
        state_var_NS = COMP_LOOP_C_124;
      end
      COMP_LOOP_C_124 : begin
        fsm_output = 8'b10110011;
        state_var_NS = COMP_LOOP_C_125;
      end
      COMP_LOOP_C_125 : begin
        fsm_output = 8'b10110100;
        state_var_NS = COMP_LOOP_C_126;
      end
      COMP_LOOP_C_126 : begin
        fsm_output = 8'b10110101;
        state_var_NS = COMP_LOOP_C_127;
      end
      COMP_LOOP_C_127 : begin
        fsm_output = 8'b10110110;
        state_var_NS = COMP_LOOP_C_128;
      end
      COMP_LOOP_C_128 : begin
        fsm_output = 8'b10110111;
        state_var_NS = COMP_LOOP_C_129;
      end
      COMP_LOOP_C_129 : begin
        fsm_output = 8'b10111000;
        state_var_NS = COMP_LOOP_C_130;
      end
      COMP_LOOP_C_130 : begin
        fsm_output = 8'b10111001;
        state_var_NS = COMP_LOOP_C_131;
      end
      COMP_LOOP_C_131 : begin
        fsm_output = 8'b10111010;
        state_var_NS = COMP_LOOP_C_132;
      end
      COMP_LOOP_C_132 : begin
        fsm_output = 8'b10111011;
        if ( COMP_LOOP_C_132_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_133;
        end
      end
      COMP_LOOP_C_133 : begin
        fsm_output = 8'b10111100;
        state_var_NS = COMP_LOOP_C_134;
      end
      COMP_LOOP_C_134 : begin
        fsm_output = 8'b10111101;
        state_var_NS = COMP_LOOP_C_135;
      end
      COMP_LOOP_C_135 : begin
        fsm_output = 8'b10111110;
        state_var_NS = COMP_LOOP_C_136;
      end
      COMP_LOOP_C_136 : begin
        fsm_output = 8'b10111111;
        state_var_NS = COMP_LOOP_C_137;
      end
      COMP_LOOP_C_137 : begin
        fsm_output = 8'b11000000;
        state_var_NS = COMP_LOOP_C_138;
      end
      COMP_LOOP_C_138 : begin
        fsm_output = 8'b11000001;
        state_var_NS = COMP_LOOP_C_139;
      end
      COMP_LOOP_C_139 : begin
        fsm_output = 8'b11000010;
        state_var_NS = COMP_LOOP_C_140;
      end
      COMP_LOOP_C_140 : begin
        fsm_output = 8'b11000011;
        state_var_NS = COMP_LOOP_C_141;
      end
      COMP_LOOP_C_141 : begin
        fsm_output = 8'b11000100;
        state_var_NS = COMP_LOOP_C_142;
      end
      COMP_LOOP_C_142 : begin
        fsm_output = 8'b11000101;
        state_var_NS = COMP_LOOP_C_143;
      end
      COMP_LOOP_C_143 : begin
        fsm_output = 8'b11000110;
        state_var_NS = COMP_LOOP_C_144;
      end
      COMP_LOOP_C_144 : begin
        fsm_output = 8'b11000111;
        state_var_NS = COMP_LOOP_C_145;
      end
      COMP_LOOP_C_145 : begin
        fsm_output = 8'b11001000;
        state_var_NS = COMP_LOOP_C_146;
      end
      COMP_LOOP_C_146 : begin
        fsm_output = 8'b11001001;
        state_var_NS = COMP_LOOP_C_147;
      end
      COMP_LOOP_C_147 : begin
        fsm_output = 8'b11001010;
        state_var_NS = COMP_LOOP_C_148;
      end
      COMP_LOOP_C_148 : begin
        fsm_output = 8'b11001011;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b11001100;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b11001101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b11001110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b11001111;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b11010000;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b11010001;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b11010010;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b11010011;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b11010100;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b11010101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b11010110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b11010111;
        if ( COMP_LOOP_4_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_149;
        end
        else begin
          state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_149 : begin
        fsm_output = 8'b11011000;
        state_var_NS = COMP_LOOP_C_150;
      end
      COMP_LOOP_C_150 : begin
        fsm_output = 8'b11011001;
        state_var_NS = COMP_LOOP_C_151;
      end
      COMP_LOOP_C_151 : begin
        fsm_output = 8'b11011010;
        state_var_NS = COMP_LOOP_C_152;
      end
      COMP_LOOP_C_152 : begin
        fsm_output = 8'b11011011;
        state_var_NS = COMP_LOOP_C_153;
      end
      COMP_LOOP_C_153 : begin
        fsm_output = 8'b11011100;
        state_var_NS = COMP_LOOP_C_154;
      end
      COMP_LOOP_C_154 : begin
        fsm_output = 8'b11011101;
        state_var_NS = COMP_LOOP_C_155;
      end
      COMP_LOOP_C_155 : begin
        fsm_output = 8'b11011110;
        state_var_NS = COMP_LOOP_C_156;
      end
      COMP_LOOP_C_156 : begin
        fsm_output = 8'b11011111;
        state_var_NS = COMP_LOOP_C_157;
      end
      COMP_LOOP_C_157 : begin
        fsm_output = 8'b11100000;
        state_var_NS = COMP_LOOP_C_158;
      end
      COMP_LOOP_C_158 : begin
        fsm_output = 8'b11100001;
        state_var_NS = COMP_LOOP_C_159;
      end
      COMP_LOOP_C_159 : begin
        fsm_output = 8'b11100010;
        state_var_NS = COMP_LOOP_C_160;
      end
      COMP_LOOP_C_160 : begin
        fsm_output = 8'b11100011;
        state_var_NS = COMP_LOOP_C_161;
      end
      COMP_LOOP_C_161 : begin
        fsm_output = 8'b11100100;
        state_var_NS = COMP_LOOP_C_162;
      end
      COMP_LOOP_C_162 : begin
        fsm_output = 8'b11100101;
        state_var_NS = COMP_LOOP_C_163;
      end
      COMP_LOOP_C_163 : begin
        fsm_output = 8'b11100110;
        state_var_NS = COMP_LOOP_C_164;
      end
      COMP_LOOP_C_164 : begin
        fsm_output = 8'b11100111;
        state_var_NS = COMP_LOOP_C_165;
      end
      COMP_LOOP_C_165 : begin
        fsm_output = 8'b11101000;
        state_var_NS = COMP_LOOP_C_166;
      end
      COMP_LOOP_C_166 : begin
        fsm_output = 8'b11101001;
        state_var_NS = COMP_LOOP_C_167;
      end
      COMP_LOOP_C_167 : begin
        fsm_output = 8'b11101010;
        state_var_NS = COMP_LOOP_C_168;
      end
      COMP_LOOP_C_168 : begin
        fsm_output = 8'b11101011;
        state_var_NS = COMP_LOOP_C_169;
      end
      COMP_LOOP_C_169 : begin
        fsm_output = 8'b11101100;
        state_var_NS = COMP_LOOP_C_170;
      end
      COMP_LOOP_C_170 : begin
        fsm_output = 8'b11101101;
        state_var_NS = COMP_LOOP_C_171;
      end
      COMP_LOOP_C_171 : begin
        fsm_output = 8'b11101110;
        state_var_NS = COMP_LOOP_C_172;
      end
      COMP_LOOP_C_172 : begin
        fsm_output = 8'b11101111;
        state_var_NS = COMP_LOOP_C_173;
      end
      COMP_LOOP_C_173 : begin
        fsm_output = 8'b11110000;
        state_var_NS = COMP_LOOP_C_174;
      end
      COMP_LOOP_C_174 : begin
        fsm_output = 8'b11110001;
        state_var_NS = COMP_LOOP_C_175;
      end
      COMP_LOOP_C_175 : begin
        fsm_output = 8'b11110010;
        state_var_NS = COMP_LOOP_C_176;
      end
      COMP_LOOP_C_176 : begin
        fsm_output = 8'b11110011;
        if ( COMP_LOOP_C_176_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 8'b11110100;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_5;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_5 : begin
        fsm_output = 8'b11110101;
        if ( STAGE_MAIN_LOOP_C_5_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b11110110;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  clk, ensig_cgo_iro, modExp_dev_while_rem_cmp_z, ensig_cgo, COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en,
      modExp_dev_while_rem_cmp_z_oreg
);
  input clk;
  input ensig_cgo_iro;
  input [63:0] modExp_dev_while_rem_cmp_z;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  output [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] modExp_dev_while_rem_cmp_z_oreg;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
  always @(posedge clk) begin
    modExp_dev_while_rem_cmp_z_oreg <= modExp_dev_while_rem_cmp_z;
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_q_d, vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_q_d, vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d, modExp_dev_while_rem_cmp_a,
      modExp_dev_while_rem_cmp_b, modExp_dev_while_rem_cmp_z, vec_rsc_0_0_i_d_d_pff,
      vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff, vec_rsc_0_0_i_we_d_pff,
      vec_rsc_0_1_i_we_d_pff, vec_rsc_0_2_i_we_d_pff, vec_rsc_0_3_i_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_q_d;
  output vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_q_d;
  output vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] modExp_dev_while_rem_cmp_a;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  output [63:0] modExp_dev_while_rem_cmp_b;
  input [63:0] modExp_dev_while_rem_cmp_z;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [7:0] vec_rsc_0_0_i_radr_d_pff;
  output [7:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;
  output vec_rsc_0_2_i_we_d_pff;
  output vec_rsc_0_3_i_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  wire [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [7:0] fsm_output;
  wire [9:0] COMP_LOOP_1_operator_64_false_acc_tmp;
  wire [11:0] nl_COMP_LOOP_1_operator_64_false_acc_tmp;
  wire or_tmp_6;
  wire or_tmp_8;
  wire not_tmp_32;
  wire not_tmp_35;
  wire nor_tmp_20;
  wire mux_tmp_73;
  wire nor_tmp_21;
  wire nor_tmp_22;
  wire mux_tmp_77;
  wire mux_tmp_80;
  wire mux_tmp_93;
  wire and_dcpl_4;
  wire and_dcpl_5;
  wire and_dcpl_6;
  wire and_dcpl_7;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_13;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire and_dcpl_18;
  wire and_dcpl_20;
  wire and_dcpl_21;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_27;
  wire and_dcpl_30;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire and_dcpl_34;
  wire and_dcpl_40;
  wire and_dcpl_43;
  wire and_dcpl_46;
  wire and_dcpl_49;
  wire and_dcpl_55;
  wire and_dcpl_58;
  wire mux_tmp_150;
  wire mux_tmp_152;
  wire mux_tmp_154;
  wire mux_tmp_155;
  wire mux_tmp_159;
  wire and_dcpl_63;
  wire xor_dcpl;
  wire or_tmp_133;
  wire mux_tmp_173;
  wire and_dcpl_77;
  wire mux_tmp_178;
  wire mux_tmp_179;
  wire or_tmp_140;
  wire mux_tmp_186;
  wire or_tmp_144;
  wire mux_tmp_191;
  wire and_dcpl_79;
  wire and_dcpl_80;
  wire and_dcpl_84;
  wire and_dcpl_85;
  wire and_dcpl_86;
  wire and_dcpl_87;
  wire and_dcpl_90;
  wire mux_tmp_207;
  wire or_tmp_159;
  wire or_tmp_162;
  wire and_dcpl_104;
  wire and_dcpl_107;
  wire and_dcpl_111;
  wire mux_tmp_242;
  wire mux_tmp_243;
  wire mux_tmp_259;
  wire nor_tmp_56;
  reg COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  reg operator_64_false_slc_operator_64_false_acc_61_itm;
  reg [6:0] COMP_LOOP_k_9_2_sva_6_0;
  reg [9:0] operator_64_false_acc_cse_3_sva;
  wire [11:0] nl_operator_64_false_acc_cse_3_sva;
  reg [9:0] operator_64_false_acc_cse_sva;
  wire [11:0] nl_operator_64_false_acc_cse_sva;
  reg [8:0] COMP_LOOP_acc_7_psp_sva;
  wire [9:0] nl_COMP_LOOP_acc_7_psp_sva;
  reg [9:0] COMP_LOOP_acc_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_cse_sva;
  reg [9:0] operator_64_false_acc_cse_2_sva;
  wire [11:0] nl_operator_64_false_acc_cse_2_sva;
  reg [9:0] COMP_LOOP_acc_cse_2_sva;
  reg [9:0] operator_64_false_acc_cse_1_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  wire nor_26_cse;
  reg reg_vec_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_157_cse;
  wire and_190_cse;
  wire and_192_cse;
  wire nor_153_cse;
  wire or_210_cse;
  wire and_145_cse;
  wire or_140_cse;
  wire nor_143_cse;
  wire and_186_cse;
  wire and_183_cse;
  wire or_145_cse;
  wire or_211_cse;
  wire mux_27_cse;
  wire mux_26_cse;
  reg [63:0] tmp_1_lpi_4_dfm;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] COMP_LOOP_1_modExp_dev_1_while_mul_mut;
  reg [63:0] p_sva;
  wire mux_182_itm;
  wire and_dcpl_151;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  wire and_dcpl_152;
  wire and_dcpl_153;
  wire and_dcpl_158;
  wire and_dcpl_159;
  wire and_dcpl_163;
  wire and_dcpl_164;
  wire and_dcpl_165;
  wire and_dcpl_170;
  wire and_dcpl_173;
  wire or_tmp_224;
  wire and_dcpl_177;
  wire and_dcpl_180;
  wire and_dcpl_183;
  wire and_dcpl_187;
  wire [64:0] z_out_1;
  wire and_dcpl_194;
  wire and_dcpl_198;
  wire and_dcpl_201;
  wire and_dcpl_205;
  wire and_dcpl_206;
  wire and_dcpl_208;
  wire and_dcpl_213;
  wire and_dcpl_216;
  wire and_dcpl_220;
  wire [63:0] z_out_2;
  wire and_dcpl_235;
  wire [63:0] z_out_3;
  wire [127:0] nl_z_out_3;
  wire and_dcpl_242;
  wire and_dcpl_247;
  wire and_dcpl_253;
  wire and_dcpl_259;
  wire [7:0] z_out_4;
  wire [8:0] nl_z_out_4;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [1:0] modExp_dev_exp_1_sva_1_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2;
  wire COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3;
  wire operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1;
  wire tmp_1_lpi_4_dfm_mx0c0;
  wire tmp_1_lpi_4_dfm_mx0c1;
  wire tmp_1_lpi_4_dfm_mx0c2;
  wire tmp_1_lpi_4_dfm_mx0c3;
  wire and_103_rgt;
  wire operator_64_false_or_2_cse;
  wire or_257_cse;
  wire mux_324_cse;
  wire mux_325_cse;
  wire nor_181_cse;
  wire mux_tmp_319;
  wire or_tmp_238;
  wire mux_tmp_324;
  wire or_tmp_246;
  wire [7:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  wire mux_tmp_329;
  wire or_tmp_252;
  reg COMP_LOOP_acc_psp_sva_7;
  reg [6:0] COMP_LOOP_acc_psp_sva_6_0;
  wire operator_64_false_or_5_itm;
  wire operator_64_false_1_or_itm;

  wire[0:0] mux_181_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] and_164_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] mux_200_nl;
  wire[0:0] or_153_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] mux_198_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] mux_227_nl;
  wire[0:0] mux_226_nl;
  wire[0:0] mux_224_nl;
  wire[0:0] and_104_nl;
  wire[0:0] COMP_LOOP_or_3_nl;
  wire[0:0] mux_242_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] nor_88_nl;
  wire[0:0] nor_89_nl;
  wire[0:0] COMP_LOOP_or_4_nl;
  wire[0:0] mux_244_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] and_159_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] nor_86_nl;
  wire[0:0] COMP_LOOP_or_5_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] nor_82_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] nor_84_nl;
  wire[0:0] COMP_LOOP_or_6_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] and_158_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] mux_240_nl;
  wire[0:0] mux_239_nl;
  wire[0:0] mux_238_nl;
  wire[0:0] mux_237_nl;
  wire[0:0] mux_236_nl;
  wire[0:0] or_177_nl;
  wire[0:0] mux_235_nl;
  wire[0:0] mux_234_nl;
  wire[0:0] or_176_nl;
  wire[0:0] and_105_nl;
  wire[0:0] mux_233_nl;
  wire[0:0] mux_232_nl;
  wire[0:0] mux_231_nl;
  wire[0:0] mux_230_nl;
  wire[0:0] nor_90_nl;
  wire[0:0] modExp_dev_while_or_2_nl;
  wire[0:0] nand_36_nl;
  wire[0:0] mux_334_nl;
  wire[0:0] nor_193_nl;
  wire[0:0] nor_194_nl;
  wire[6:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] mux_260_nl;
  wire[0:0] mux_259_nl;
  wire[0:0] mux_339_nl;
  wire[0:0] mux_338_nl;
  wire[0:0] nand_nl;
  wire[0:0] mux_337_nl;
  wire[0:0] mux_336_nl;
  wire[0:0] or_286_nl;
  wire[0:0] nand_40_nl;
  wire[0:0] or_270_nl;
  wire[0:0] nor_191_nl;
  wire[0:0] mux_343_nl;
  wire[0:0] mux_342_nl;
  wire[0:0] nand_37_nl;
  wire[0:0] or_280_nl;
  wire[0:0] and_336_nl;
  wire[0:0] mux_341_nl;
  wire[0:0] or_277_nl;
  wire[0:0] mux_271_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] mux_277_nl;
  wire[0:0] mux_276_nl;
  wire[0:0] mux_275_nl;
  wire[0:0] or_208_nl;
  wire[0:0] mux_272_nl;
  wire[0:0] or_206_nl;
  wire[0:0] or_204_nl;
  wire[0:0] mux_285_nl;
  wire[0:0] mux_284_nl;
  wire[0:0] mux_283_nl;
  wire[0:0] mux_282_nl;
  wire[0:0] mux_281_nl;
  wire[0:0] mux_280_nl;
  wire[0:0] mux_279_nl;
  wire[0:0] or_209_nl;
  wire[0:0] mux_293_nl;
  wire[0:0] mux_292_nl;
  wire[0:0] mux_291_nl;
  wire[0:0] mux_290_nl;
  wire[0:0] mux_289_nl;
  wire[0:0] mux_288_nl;
  wire[0:0] mux_287_nl;
  wire[0:0] mux_298_nl;
  wire[0:0] mux_297_nl;
  wire[0:0] and_148_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] mux_295_nl;
  wire[0:0] mux_301_nl;
  wire[0:0] mux_300_nl;
  wire[1:0] COMP_LOOP_and_4_nl;
  wire[1:0] COMP_LOOP_mux1h_23_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] mux_323_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] or_244_nl;
  wire[0:0] and_131_nl;
  wire[0:0] nand_35_nl;
  wire[0:0] and_132_nl;
  wire[0:0] not_nl;
  wire[0:0] mux_347_nl;
  wire[0:0] nand_38_nl;
  wire[0:0] mux_346_nl;
  wire[0:0] or_284_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] nand_21_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] or_146_nl;
  wire[0:0] or_150_nl;
  wire[0:0] nand_11_nl;
  wire[0:0] nand_12_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_273_nl;
  wire[0:0] mux_306_nl;
  wire[0:0] nor_73_nl;
  wire[0:0] mux_305_nl;
  wire[0:0] mux_304_nl;
  wire[0:0] nor_74_nl;
  wire[0:0] nor_75_nl;
  wire[0:0] nor_76_nl;
  wire[0:0] mux_309_nl;
  wire[0:0] nor_69_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] mux_307_nl;
  wire[0:0] nor_70_nl;
  wire[0:0] nor_71_nl;
  wire[0:0] nor_72_nl;
  wire[0:0] mux_312_nl;
  wire[0:0] nor_65_nl;
  wire[0:0] mux_311_nl;
  wire[0:0] mux_310_nl;
  wire[0:0] nor_66_nl;
  wire[0:0] nor_67_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] mux_315_nl;
  wire[0:0] nor_62_nl;
  wire[0:0] mux_314_nl;
  wire[0:0] mux_313_nl;
  wire[0:0] nor_63_nl;
  wire[0:0] and_147_nl;
  wire[0:0] nor_64_nl;
  wire[0:0] and_17_nl;
  wire[0:0] and_22_nl;
  wire[0:0] and_25_nl;
  wire[0:0] and_29_nl;
  wire[0:0] and_31_nl;
  wire[0:0] and_32_nl;
  wire[0:0] and_36_nl;
  wire[0:0] and_38_nl;
  wire[0:0] and_41_nl;
  wire[0:0] and_42_nl;
  wire[0:0] and_44_nl;
  wire[0:0] and_45_nl;
  wire[0:0] and_47_nl;
  wire[0:0] and_50_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] nor_134_nl;
  wire[0:0] nor_135_nl;
  wire[0:0] nor_136_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] nor_137_nl;
  wire[0:0] nor_138_nl;
  wire[0:0] nor_139_nl;
  wire[0:0] and_177_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] nor_140_nl;
  wire[0:0] nor_141_nl;
  wire[0:0] and_176_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] nor_130_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] nor_131_nl;
  wire[0:0] nor_132_nl;
  wire[0:0] nor_133_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] or_68_nl;
  wire[0:0] or_67_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] or_66_nl;
  wire[0:0] or_65_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] and_201_nl;
  wire[0:0] and_202_nl;
  wire[0:0] nor_123_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] nor_124_nl;
  wire[0:0] nor_125_nl;
  wire[0:0] nor_126_nl;
  wire[0:0] and_175_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] nor_127_nl;
  wire[0:0] nor_128_nl;
  wire[0:0] and_174_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] nor_116_nl;
  wire[0:0] nor_117_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] nor_118_nl;
  wire[0:0] nor_119_nl;
  wire[0:0] nor_120_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] or_92_nl;
  wire[0:0] or_91_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] or_90_nl;
  wire[0:0] or_89_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] nor_108_nl;
  wire[0:0] nor_109_nl;
  wire[0:0] nor_110_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] nor_111_nl;
  wire[0:0] nor_112_nl;
  wire[0:0] nor_113_nl;
  wire[0:0] and_173_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] nor_114_nl;
  wire[0:0] nor_115_nl;
  wire[0:0] and_172_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] nor_103_nl;
  wire[0:0] nor_104_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] nor_105_nl;
  wire[0:0] nor_106_nl;
  wire[0:0] nor_107_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] or_115_nl;
  wire[0:0] or_114_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] or_113_nl;
  wire[0:0] or_112_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] and_167_nl;
  wire[0:0] and_168_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] and_169_nl;
  wire[0:0] nor_101_nl;
  wire[0:0] and_170_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] and_171_nl;
  wire[0:0] nor_102_nl;
  wire[0:0] and_166_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] nor_94_nl;
  wire[0:0] nor_95_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] nor_96_nl;
  wire[0:0] and_200_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] or_132_nl;
  wire[0:0] or_131_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] or_130_nl;
  wire[0:0] nand_30_nl;
  wire[0:0] mux_nl;
  wire[0:0] or_264_nl;
  wire[0:0] mux_330_nl;
  wire[0:0] mux_329_nl;
  wire[0:0] nand_32_nl;
  wire[0:0] nor_192_nl;
  wire[0:0] or_276_nl;
  wire[0:0] or_275_nl;
  wire[0:0] nor_190_nl;
  wire[9:0] COMP_LOOP_mux_17_nl;
  wire[9:0] COMP_LOOP_mux_18_nl;
  wire[65:0] acc_1_nl;
  wire[66:0] nl_acc_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_3_nl;
  wire[54:0] operator_64_false_operator_64_false_nand_1_nl;
  wire[54:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_nor_9_nl;
  wire[8:0] operator_64_false_mux1h_4_nl;
  wire[0:0] operator_64_false_or_9_nl;
  wire[0:0] operator_64_false_or_10_nl;
  wire[0:0] operator_64_false_operator_64_false_and_1_nl;
  wire[6:0] operator_64_false_and_3_nl;
  wire[6:0] operator_64_false_mux1h_5_nl;
  wire[0:0] operator_64_false_or_11_nl;
  wire[0:0] operator_64_false_nor_12_nl;
  wire[0:0] operator_64_false_operator_64_false_or_4_nl;
  wire[0:0] operator_64_false_operator_64_false_or_5_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl_1;
  wire[0:0] operator_64_false_or_9_nl_1;
  wire[0:0] operator_64_false_and_16_nl;
  wire[0:0] operator_64_false_and_17_nl;
  wire[0:0] operator_64_false_and_18_nl;
  wire[0:0] operator_64_false_and_19_nl;
  wire[0:0] operator_64_false_or_10_nl_1;
  wire[63:0] operator_64_false_or_11_nl_1;
  wire[63:0] operator_64_false_mux1h_4_nl_1;
  wire[0:0] operator_64_false_or_12_nl;
  wire[0:0] operator_64_false_or_13_nl;
  wire[0:0] operator_64_false_or_14_nl;
  wire[0:0] operator_64_false_or_15_nl;
  wire[0:0] operator_64_false_or_16_nl;
  wire[63:0] modExp_dev_while_mux_1_nl;
  wire[0:0] modExp_dev_while_or_3_nl;
  wire[63:0] modExp_dev_while_mux1h_3_nl;
  wire[0:0] and_338_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_2_nl;
  wire[2:0] operator_64_false_1_operator_64_false_1_and_1_nl;
  wire[2:0] operator_64_false_1_mux_1_nl;
  wire[0:0] operator_64_false_1_nor_3_nl;
  wire[3:0] operator_64_false_1_mux1h_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_73_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign and_73_nl = ((fsm_output[7]) ^ (fsm_output[4])) & xor_dcpl & (fsm_output[5])
      & (fsm_output[0]) & and_dcpl_11;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_2, z_out_3,
      and_73_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_191_nl;
  wire[0:0] or_255_nl;
  wire[0:0] mux_190_nl;
  wire[0:0] nand_19_nl;
  wire[0:0] nand_31_nl;
  wire[0:0] mux_189_nl;
  wire[0:0] mux_187_nl;
  wire[0:0] nand_20_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nand_19_nl = ~((fsm_output[6]) & (fsm_output[3]) & (fsm_output[4]) & (fsm_output[7]));
  assign mux_190_nl = MUX_s_1_2_2(nand_19_nl, mux_tmp_173, fsm_output[5]);
  assign or_255_nl = (fsm_output[2]) | mux_190_nl;
  assign nand_20_nl = ~((fsm_output[3]) & or_145_cse);
  assign mux_187_nl = MUX_s_1_2_2(nand_20_nl, or_tmp_133, fsm_output[6]);
  assign mux_189_nl = MUX_s_1_2_2(mux_tmp_173, mux_187_nl, fsm_output[5]);
  assign nand_31_nl = ~((fsm_output[2]) & (~ mux_189_nl));
  assign mux_191_nl = MUX_s_1_2_2(or_255_nl, nand_31_nl, fsm_output[0]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = ~(mux_191_nl | (fsm_output[1]));
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_4[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro = ~ mux_182_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = ~ (z_out_1[64]);
  wire[63:0] COMP_LOOP_1_operator_64_false_acc_1_nl;
  wire[64:0] nl_COMP_LOOP_1_operator_64_false_acc_1_nl;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_COMP_LOOP_1_operator_64_false_acc_1_nl = ({55'b1111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]))}) + 64'b0000000000000000000000000000000000000000000000000000000000000001;
  assign COMP_LOOP_1_operator_64_false_acc_1_nl = nl_COMP_LOOP_1_operator_64_false_acc_1_nl[63:0];
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (readslicef_64_1_63(COMP_LOOP_1_operator_64_false_acc_1_nl));
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_slc_operator_64_false_acc_61_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0 = ~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_88_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_88_tr0 = ~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_132_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_132_tr0 = ~ operator_64_false_slc_operator_64_false_acc_61_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0 = z_out_4[4];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  COMP_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .clk(clk),
      .ensig_cgo_iro(nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en),
      .modExp_dev_while_rem_cmp_z_oreg(modExp_dev_while_rem_cmp_z_oreg)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_44_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_88_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_88_tr0[0:0]),
      .COMP_LOOP_3_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_132_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_132_tr0[0:0]),
      .COMP_LOOP_4_modExp_dev_1_while_C_11_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .COMP_LOOP_C_176_tr0(COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_5_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0[0:0])
    );
  assign nor_26_cse = ~((fsm_output[2:1]!=2'b10));
  assign mux_179_nl = MUX_s_1_2_2(or_140_cse, mux_tmp_154, fsm_output[3]);
  assign mux_177_nl = MUX_s_1_2_2(and_183_cse, (~ or_145_cse), fsm_output[5]);
  assign and_164_nl = (fsm_output[5]) & (fsm_output[4]) & (fsm_output[7]);
  assign mux_178_nl = MUX_s_1_2_2(mux_177_nl, and_164_nl, fsm_output[3]);
  assign mux_180_nl = MUX_s_1_2_2((~ mux_179_nl), mux_178_nl, fsm_output[6]);
  assign mux_176_nl = MUX_s_1_2_2(mux_tmp_159, mux_tmp_155, fsm_output[0]);
  assign mux_181_nl = MUX_s_1_2_2(mux_180_nl, mux_176_nl, fsm_output[2]);
  assign mux_175_nl = MUX_s_1_2_2(mux_tmp_159, mux_tmp_155, fsm_output[2]);
  assign mux_182_itm = MUX_s_1_2_2(mux_181_nl, mux_175_nl, fsm_output[1]);
  assign or_145_cse = (fsm_output[4]) | (fsm_output[7]);
  assign modExp_dev_while_rem_cmp_b = reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  assign or_157_cse = (fsm_output[1:0]!=2'b00);
  assign operator_64_false_or_2_cse = and_dcpl_77 | and_dcpl_79;
  assign and_103_rgt = and_dcpl_9 & and_dcpl_86;
  assign and_190_cse = (fsm_output[4:3]==2'b11);
  assign and_192_cse = (fsm_output[1:0]==2'b11);
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_7_2_2(COMP_LOOP_k_9_2_sva_6_0, (z_out_2[8:2]),
      and_dcpl_79);
  assign mux_259_nl = MUX_s_1_2_2(mux_tmp_243, mux_tmp_242, and_192_cse);
  assign mux_260_nl = MUX_s_1_2_2(mux_259_nl, mux_tmp_242, fsm_output[2]);
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_8_2_2(({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      (z_out[7:0]), mux_260_nl);
  assign nor_153_cse = ~((fsm_output[5:4]!=2'b00));
  assign or_210_cse = (fsm_output[5:4]!=2'b00);
  assign or_211_cse = and_190_cse | (fsm_output[5]);
  assign and_183_cse = (fsm_output[4]) & (fsm_output[7]);
  assign and_145_cse = (fsm_output[6]) & (fsm_output[3]);
  assign or_140_cse = (fsm_output[5]) | (fsm_output[7]);
  assign nl_COMP_LOOP_1_operator_64_false_acc_tmp = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b00}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign COMP_LOOP_1_operator_64_false_acc_tmp = nl_COMP_LOOP_1_operator_64_false_acc_tmp[9:0];
  assign or_tmp_6 = (~ (fsm_output[7])) | (fsm_output[5]);
  assign or_tmp_8 = (fsm_output[7]) | (~ (fsm_output[5]));
  assign mux_27_cse = MUX_s_1_2_2(or_tmp_8, or_tmp_6, fsm_output[4]);
  assign mux_26_cse = MUX_s_1_2_2(or_tmp_6, or_140_cse, fsm_output[4]);
  assign not_tmp_32 = ~((fsm_output[4]) | (fsm_output[7]) | (fsm_output[5]));
  assign and_186_cse = (fsm_output[7]) & (fsm_output[5]);
  assign not_tmp_35 = ~(and_190_cse | (fsm_output[7]) | (fsm_output[5]));
  assign nor_tmp_20 = (fsm_output[3]) & (fsm_output[4]) & (fsm_output[7]) & (fsm_output[5]);
  assign mux_tmp_73 = MUX_s_1_2_2(not_tmp_35, nor_tmp_20, fsm_output[6]);
  assign nor_tmp_21 = (fsm_output[7:4]==4'b1111);
  assign nor_tmp_22 = (fsm_output[7:3]==5'b11111);
  assign nor_143_cse = ~((fsm_output[3]) | (fsm_output[4]) | (fsm_output[7]) | (fsm_output[5]));
  assign mux_tmp_77 = MUX_s_1_2_2(nor_143_cse, nor_tmp_20, fsm_output[6]);
  assign mux_tmp_80 = MUX_s_1_2_2(not_tmp_32, nor_tmp_20, fsm_output[6]);
  assign mux_103_nl = MUX_s_1_2_2(mux_tmp_77, nor_tmp_22, or_157_cse);
  assign mux_100_nl = MUX_s_1_2_2(nor_tmp_22, nor_tmp_21, fsm_output[1]);
  assign mux_tmp_93 = MUX_s_1_2_2(mux_103_nl, mux_100_nl, fsm_output[2]);
  assign and_dcpl_4 = (fsm_output[2:1]==2'b01);
  assign and_dcpl_5 = (~ (fsm_output[6])) & (fsm_output[0]);
  assign and_dcpl_6 = and_dcpl_5 & and_dcpl_4;
  assign and_dcpl_7 = (fsm_output[4:3]==2'b10);
  assign and_dcpl_8 = ~((fsm_output[7]) | (fsm_output[5]));
  assign and_dcpl_9 = and_dcpl_8 & and_dcpl_7;
  assign and_dcpl_10 = and_dcpl_9 & and_dcpl_6;
  assign and_dcpl_11 = (fsm_output[2:1]==2'b10);
  assign and_dcpl_12 = ~((fsm_output[6]) | (fsm_output[0]));
  assign and_dcpl_13 = and_dcpl_12 & and_dcpl_11;
  assign and_dcpl_16 = (fsm_output[6]) & (fsm_output[0]) & and_dcpl_4;
  assign and_dcpl_17 = (fsm_output[4:3]==2'b01);
  assign and_dcpl_18 = and_dcpl_8 & and_dcpl_17;
  assign and_dcpl_20 = (fsm_output[6]) & (~ (fsm_output[0]));
  assign and_dcpl_21 = and_dcpl_20 & and_dcpl_11;
  assign and_dcpl_23 = ~((fsm_output[4:3]!=2'b00));
  assign and_dcpl_24 = (fsm_output[7]) & (~ (fsm_output[5]));
  assign and_dcpl_25 = and_dcpl_24 & and_dcpl_23;
  assign and_dcpl_27 = and_dcpl_25 & and_dcpl_13;
  assign and_dcpl_30 = and_dcpl_12 & and_dcpl_4;
  assign and_dcpl_31 = (~ (fsm_output[7])) & (fsm_output[5]);
  assign and_dcpl_32 = and_dcpl_31 & and_dcpl_23;
  assign and_dcpl_34 = and_dcpl_20 & and_dcpl_4;
  assign and_dcpl_40 = and_dcpl_24 & and_dcpl_7;
  assign and_dcpl_43 = and_dcpl_24 & and_dcpl_17;
  assign and_dcpl_46 = and_186_cse & and_dcpl_7;
  assign and_dcpl_49 = (fsm_output[2:0]==3'b010);
  assign and_dcpl_55 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_58 = and_186_cse & (fsm_output[4]);
  assign mux_tmp_150 = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[4]);
  assign mux_tmp_152 = MUX_s_1_2_2(and_183_cse, mux_tmp_150, fsm_output[5]);
  assign mux_tmp_154 = MUX_s_1_2_2((~ mux_tmp_150), or_145_cse, fsm_output[5]);
  assign mux_166_nl = MUX_s_1_2_2((~ mux_tmp_150), and_183_cse, fsm_output[5]);
  assign mux_168_nl = MUX_s_1_2_2(mux_tmp_152, mux_166_nl, fsm_output[3]);
  assign mux_tmp_155 = MUX_s_1_2_2((~ mux_tmp_154), mux_168_nl, fsm_output[6]);
  assign nand_21_nl = ~((fsm_output[5]) & or_145_cse);
  assign mux_173_nl = MUX_s_1_2_2(nand_21_nl, mux_tmp_150, fsm_output[3]);
  assign mux_171_nl = MUX_s_1_2_2((~ and_183_cse), and_183_cse, fsm_output[5]);
  assign mux_172_nl = MUX_s_1_2_2(mux_tmp_152, mux_171_nl, fsm_output[3]);
  assign mux_tmp_159 = MUX_s_1_2_2(mux_173_nl, mux_172_nl, fsm_output[6]);
  assign and_dcpl_63 = ~((fsm_output[1:0]!=2'b00));
  assign xor_dcpl = (fsm_output[3]) ^ (fsm_output[6]);
  assign or_tmp_133 = (fsm_output[3]) | mux_tmp_150;
  assign or_146_nl = (~ (fsm_output[3])) | (fsm_output[4]) | (fsm_output[7]);
  assign mux_tmp_173 = MUX_s_1_2_2(or_tmp_133, or_146_nl, fsm_output[6]);
  assign and_dcpl_77 = nor_143_cse & and_dcpl_12 & (fsm_output[2:1]==2'b11);
  assign or_150_nl = (fsm_output[4]) | (fsm_output[7]) | (fsm_output[5]);
  assign mux_tmp_178 = MUX_s_1_2_2(or_150_nl, mux_26_cse, fsm_output[6]);
  assign mux_tmp_179 = MUX_s_1_2_2((fsm_output[7]), or_tmp_6, fsm_output[4]);
  assign or_tmp_140 = (fsm_output[6]) | mux_tmp_179;
  assign nand_11_nl = ~((fsm_output[6]) & (~ mux_27_cse));
  assign mux_tmp_186 = MUX_s_1_2_2(nand_11_nl, or_tmp_140, fsm_output[3]);
  assign or_tmp_144 = (fsm_output[3]) | mux_27_cse;
  assign nand_12_nl = ~((fsm_output[3]) & (~ mux_26_cse));
  assign mux_tmp_191 = MUX_s_1_2_2(or_tmp_144, nand_12_nl, fsm_output[6]);
  assign and_dcpl_79 = (~ mux_tmp_191) & and_dcpl_63 & (fsm_output[2]);
  assign and_dcpl_80 = ~((fsm_output[3]) | (fsm_output[6]));
  assign mux_207_nl = MUX_s_1_2_2((fsm_output[1]), and_dcpl_63, fsm_output[2]);
  assign and_dcpl_84 = mux_207_nl & (~ (fsm_output[7])) & nor_153_cse & and_dcpl_80;
  assign and_dcpl_85 = ~((fsm_output[2:1]!=2'b00));
  assign and_dcpl_86 = and_dcpl_5 & and_dcpl_85;
  assign and_dcpl_87 = nor_143_cse & and_dcpl_86;
  assign and_dcpl_90 = (~ mux_tmp_191) & and_192_cse & (~ (fsm_output[2]));
  assign mux_tmp_207 = MUX_s_1_2_2(not_tmp_32, and_dcpl_58, fsm_output[6]);
  assign or_tmp_159 = (fsm_output[7]) | (fsm_output[3]);
  assign or_tmp_162 = (fsm_output[1]) | (fsm_output[7]) | (fsm_output[3]);
  assign and_dcpl_104 = and_dcpl_12 & and_dcpl_85;
  assign and_dcpl_107 = and_dcpl_20 & and_dcpl_85;
  assign and_dcpl_111 = and_dcpl_24 & and_190_cse & and_dcpl_107;
  assign mux_tmp_242 = MUX_s_1_2_2(mux_27_cse, mux_26_cse, and_145_cse);
  assign nand_9_nl = ~((fsm_output[3]) & (~ mux_27_cse));
  assign mux_tmp_243 = MUX_s_1_2_2(nand_9_nl, or_tmp_144, fsm_output[6]);
  assign mux_273_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[5]);
  assign mux_tmp_259 = MUX_s_1_2_2(mux_273_nl, or_tmp_8, fsm_output[4]);
  assign nor_tmp_56 = ((fsm_output[5:3]!=3'b000)) & (fsm_output[7]);
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4 = (~ mux_27_cse) & xor_dcpl
      & and_192_cse & (fsm_output[2]);
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_46 & and_dcpl_21;
  assign COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2 = and_dcpl_31
      & and_dcpl_7 & and_dcpl_104;
  assign COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3 = and_dcpl_31
      & and_dcpl_17 & and_dcpl_107;
  assign operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1 = and_186_cse &
      and_dcpl_23 & and_dcpl_104;
  assign nor_73_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (operator_64_false_acc_cse_1_sva[1:0]!=2'b00) | (fsm_output[5]) | (fsm_output[7]));
  assign nor_74_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b00) | (fsm_output[4])
      | (fsm_output[5]) | (~ (fsm_output[7])));
  assign nor_75_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b00) | (~ and_dcpl_58));
  assign mux_304_nl = MUX_s_1_2_2(nor_74_nl, nor_75_nl, fsm_output[3]);
  assign nor_76_nl = ~((fsm_output[4:3]!=2'b01) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b00)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_305_nl = MUX_s_1_2_2(mux_304_nl, nor_76_nl, fsm_output[6]);
  assign mux_306_nl = MUX_s_1_2_2(nor_73_nl, mux_305_nl, fsm_output[0]);
  assign tmp_1_lpi_4_dfm_mx0c0 = mux_306_nl & and_dcpl_11;
  assign nor_69_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (operator_64_false_acc_cse_1_sva[1:0]!=2'b01) | (fsm_output[5]) | (fsm_output[7]));
  assign nor_70_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b01) | (fsm_output[4])
      | (fsm_output[5]) | (~ (fsm_output[7])));
  assign nor_71_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b01) | (~ and_dcpl_58));
  assign mux_307_nl = MUX_s_1_2_2(nor_70_nl, nor_71_nl, fsm_output[3]);
  assign nor_72_nl = ~((fsm_output[4:3]!=2'b01) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_308_nl = MUX_s_1_2_2(mux_307_nl, nor_72_nl, fsm_output[6]);
  assign mux_309_nl = MUX_s_1_2_2(nor_69_nl, mux_308_nl, fsm_output[0]);
  assign tmp_1_lpi_4_dfm_mx0c1 = mux_309_nl & and_dcpl_11;
  assign nor_65_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (operator_64_false_acc_cse_1_sva[1:0]!=2'b10) | (fsm_output[5]) | (fsm_output[7]));
  assign nor_66_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b10) | (fsm_output[4])
      | (fsm_output[5]) | (~ (fsm_output[7])));
  assign nor_67_nl = ~((operator_64_false_acc_cse_sva[0]) | (~((operator_64_false_acc_cse_sva[1])
      & (fsm_output[4]) & (fsm_output[5]) & (fsm_output[7]))));
  assign mux_310_nl = MUX_s_1_2_2(nor_66_nl, nor_67_nl, fsm_output[3]);
  assign nor_68_nl = ~((fsm_output[4:3]!=2'b01) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b10)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_311_nl = MUX_s_1_2_2(mux_310_nl, nor_68_nl, fsm_output[6]);
  assign mux_312_nl = MUX_s_1_2_2(nor_65_nl, mux_311_nl, fsm_output[0]);
  assign tmp_1_lpi_4_dfm_mx0c2 = mux_312_nl & and_dcpl_11;
  assign nor_62_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (operator_64_false_acc_cse_1_sva[1:0]!=2'b11) | (fsm_output[5]) | (fsm_output[7]));
  assign nor_63_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b11) | (fsm_output[4])
      | (fsm_output[5]) | (~ (fsm_output[7])));
  assign and_147_nl = (operator_64_false_acc_cse_sva[1:0]==2'b11) & (fsm_output[4])
      & (fsm_output[5]) & (fsm_output[7]);
  assign mux_313_nl = MUX_s_1_2_2(nor_63_nl, and_147_nl, fsm_output[3]);
  assign nor_64_nl = ~((fsm_output[4:3]!=2'b01) | (operator_64_false_acc_cse_2_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_314_nl = MUX_s_1_2_2(mux_313_nl, nor_64_nl, fsm_output[6]);
  assign mux_315_nl = MUX_s_1_2_2(nor_62_nl, mux_314_nl, fsm_output[0]);
  assign tmp_1_lpi_4_dfm_mx0c3 = mux_315_nl & and_dcpl_11;
  assign vec_rsc_0_0_i_d_d_pff = COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign and_17_nl = and_dcpl_9 & and_dcpl_13;
  assign and_22_nl = and_dcpl_18 & and_dcpl_16;
  assign and_25_nl = and_dcpl_18 & and_dcpl_21;
  assign and_29_nl = and_dcpl_25 & and_dcpl_6;
  assign and_31_nl = nor_tmp_20 & and_dcpl_6;
  assign and_32_nl = nor_tmp_20 & and_dcpl_13;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_8_8_2((COMP_LOOP_1_operator_64_false_acc_tmp[9:2]),
      ({COMP_LOOP_acc_psp_sva_7 , COMP_LOOP_acc_psp_sva_6_0}), (COMP_LOOP_acc_cse_2_sva[9:2]),
      (operator_64_false_acc_cse_2_sva[9:2]), (COMP_LOOP_acc_7_psp_sva[8:1]), (operator_64_false_acc_cse_3_sva[9:2]),
      (COMP_LOOP_acc_cse_sva[9:2]), (operator_64_false_acc_cse_sva[9:2]), {and_dcpl_10
      , and_17_nl , and_22_nl , and_25_nl , and_29_nl , and_dcpl_27 , and_31_nl ,
      and_32_nl});
  assign and_36_nl = and_dcpl_32 & and_dcpl_30;
  assign and_38_nl = and_dcpl_18 & and_dcpl_34;
  assign and_41_nl = and_dcpl_8 & and_190_cse & and_dcpl_34;
  assign and_42_nl = and_dcpl_25 & and_dcpl_30;
  assign and_44_nl = and_dcpl_40 & and_dcpl_30;
  assign and_45_nl = nor_tmp_20 & and_dcpl_30;
  assign and_47_nl = and_dcpl_43 & and_dcpl_34;
  assign and_50_nl = and_dcpl_46 & and_dcpl_34;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_8_8_2(({COMP_LOOP_acc_psp_sva_7 , COMP_LOOP_acc_psp_sva_6_0}),
      (operator_64_false_acc_cse_1_sva[9:2]), (COMP_LOOP_acc_cse_2_sva[9:2]), (operator_64_false_acc_cse_2_sva[9:2]),
      (COMP_LOOP_acc_7_psp_sva[8:1]), (operator_64_false_acc_cse_3_sva[9:2]), (COMP_LOOP_acc_cse_sva[9:2]),
      (operator_64_false_acc_cse_sva[9:2]), {and_36_nl , and_38_nl , and_41_nl ,
      and_42_nl , and_44_nl , and_45_nl , and_47_nl , and_50_nl});
  assign nor_134_nl = ~((~ (fsm_output[3])) | (operator_64_false_acc_cse_1_sva[1:0]!=2'b00)
      | (~ (fsm_output[6])));
  assign nor_135_nl = ~((~ (fsm_output[3])) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00)
      | (~ (fsm_output[6])));
  assign mux_113_nl = MUX_s_1_2_2(nor_134_nl, nor_135_nl, fsm_output[4]);
  assign nor_136_nl = ~((fsm_output[4:3]!=2'b00) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[6]) | (STAGE_VEC_LOOP_j_sva_9_0[1]));
  assign mux_114_nl = MUX_s_1_2_2(mux_113_nl, nor_136_nl, fsm_output[5]);
  assign nor_137_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[6]));
  assign nor_138_nl = ~((COMP_LOOP_acc_cse_sva[1:0]!=2'b00) | (~ (fsm_output[6])));
  assign mux_110_nl = MUX_s_1_2_2(nor_137_nl, nor_138_nl, fsm_output[3]);
  assign nor_139_nl = ~((fsm_output[3]) | (COMP_LOOP_acc_7_psp_sva[0]) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[6]));
  assign mux_111_nl = MUX_s_1_2_2(mux_110_nl, nor_139_nl, fsm_output[4]);
  assign nor_140_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b00) | (~ (fsm_output[6])));
  assign nor_141_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b00) | (fsm_output[6]));
  assign mux_109_nl = MUX_s_1_2_2(nor_140_nl, nor_141_nl, fsm_output[3]);
  assign and_177_nl = (fsm_output[4]) & mux_109_nl;
  assign mux_112_nl = MUX_s_1_2_2(mux_111_nl, and_177_nl, fsm_output[5]);
  assign mux_115_nl = MUX_s_1_2_2(mux_114_nl, mux_112_nl, fsm_output[7]);
  assign vec_rsc_0_0_i_we_d_pff = mux_115_nl & and_dcpl_49;
  assign nor_129_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b00) | (fsm_output[7:5]!=3'b100));
  assign nor_130_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[7:5]!=3'b010));
  assign mux_120_nl = MUX_s_1_2_2(nor_129_nl, nor_130_nl, fsm_output[3]);
  assign nor_131_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[7:5]!=3'b000));
  assign nor_132_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b00) | (fsm_output[7:5]!=3'b101));
  assign mux_119_nl = MUX_s_1_2_2(nor_131_nl, nor_132_nl, fsm_output[3]);
  assign mux_121_nl = MUX_s_1_2_2(mux_120_nl, mux_119_nl, fsm_output[4]);
  assign and_176_nl = nor_26_cse & mux_121_nl;
  assign or_68_nl = (COMP_LOOP_acc_7_psp_sva[0]) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7:5]!=3'b100);
  assign or_67_nl = (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00) | (fsm_output[7:5]!=3'b010);
  assign mux_117_nl = MUX_s_1_2_2(or_68_nl, or_67_nl, fsm_output[3]);
  assign or_66_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b00) | (fsm_output[7:5]!=3'b000);
  assign or_65_nl = (~ operator_64_false_slc_operator_64_false_acc_61_itm) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b00)
      | (fsm_output[7:5]!=3'b101);
  assign mux_116_nl = MUX_s_1_2_2(or_66_nl, or_65_nl, fsm_output[3]);
  assign mux_118_nl = MUX_s_1_2_2(mux_117_nl, mux_116_nl, fsm_output[4]);
  assign nor_133_nl = ~((fsm_output[2:1]!=2'b01) | mux_118_nl);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_176_nl,
      nor_133_nl, fsm_output[0]);
  assign and_201_nl = (fsm_output[3]) & (operator_64_false_acc_cse_1_sva[1:0]==2'b01)
      & (fsm_output[6]);
  assign and_202_nl = (fsm_output[3]) & (COMP_LOOP_acc_cse_2_sva[1:0]==2'b01) & (fsm_output[6]);
  assign mux_127_nl = MUX_s_1_2_2(and_201_nl, and_202_nl, fsm_output[4]);
  assign nor_123_nl = ~((fsm_output[4:3]!=2'b00) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]) | (STAGE_VEC_LOOP_j_sva_9_0[1]));
  assign mux_128_nl = MUX_s_1_2_2(mux_127_nl, nor_123_nl, fsm_output[5]);
  assign nor_124_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[6]));
  assign nor_125_nl = ~((COMP_LOOP_acc_cse_sva[1:0]!=2'b01) | (~ (fsm_output[6])));
  assign mux_124_nl = MUX_s_1_2_2(nor_124_nl, nor_125_nl, fsm_output[3]);
  assign nor_126_nl = ~((fsm_output[3]) | (COMP_LOOP_acc_7_psp_sva[0]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]));
  assign mux_125_nl = MUX_s_1_2_2(mux_124_nl, nor_126_nl, fsm_output[4]);
  assign nor_127_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b01) | (~ (fsm_output[6])));
  assign nor_128_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b01) | (fsm_output[6]));
  assign mux_123_nl = MUX_s_1_2_2(nor_127_nl, nor_128_nl, fsm_output[3]);
  assign and_175_nl = (fsm_output[4]) & mux_123_nl;
  assign mux_126_nl = MUX_s_1_2_2(mux_125_nl, and_175_nl, fsm_output[5]);
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, mux_126_nl, fsm_output[7]);
  assign vec_rsc_0_1_i_we_d_pff = mux_129_nl & and_dcpl_49;
  assign nor_116_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b01) | (fsm_output[7:5]!=3'b100));
  assign nor_117_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[7:5]!=3'b010));
  assign mux_134_nl = MUX_s_1_2_2(nor_116_nl, nor_117_nl, fsm_output[3]);
  assign nor_118_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[7:5]!=3'b000));
  assign nor_119_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b01) | (fsm_output[7:5]!=3'b101));
  assign mux_133_nl = MUX_s_1_2_2(nor_118_nl, nor_119_nl, fsm_output[3]);
  assign mux_135_nl = MUX_s_1_2_2(mux_134_nl, mux_133_nl, fsm_output[4]);
  assign and_174_nl = nor_26_cse & mux_135_nl;
  assign or_92_nl = (COMP_LOOP_acc_7_psp_sva[0]) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[7:5]!=3'b100);
  assign or_91_nl = (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b01) | (fsm_output[7:5]!=3'b010);
  assign mux_131_nl = MUX_s_1_2_2(or_92_nl, or_91_nl, fsm_output[3]);
  assign or_90_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b01) | (fsm_output[7:5]!=3'b000);
  assign or_89_nl = (~ operator_64_false_slc_operator_64_false_acc_61_itm) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b01)
      | (fsm_output[7:5]!=3'b101);
  assign mux_130_nl = MUX_s_1_2_2(or_90_nl, or_89_nl, fsm_output[3]);
  assign mux_132_nl = MUX_s_1_2_2(mux_131_nl, mux_130_nl, fsm_output[4]);
  assign nor_120_nl = ~((fsm_output[2:1]!=2'b01) | mux_132_nl);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_174_nl,
      nor_120_nl, fsm_output[0]);
  assign nor_108_nl = ~((~ (fsm_output[3])) | (operator_64_false_acc_cse_1_sva[0])
      | (~((operator_64_false_acc_cse_1_sva[1]) & (fsm_output[6]))));
  assign nor_109_nl = ~((~ (fsm_output[3])) | (COMP_LOOP_acc_cse_2_sva[0]) | (~((COMP_LOOP_acc_cse_2_sva[1])
      & (fsm_output[6]))));
  assign mux_141_nl = MUX_s_1_2_2(nor_108_nl, nor_109_nl, fsm_output[4]);
  assign nor_110_nl = ~((fsm_output[4:3]!=2'b00) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[6]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[1])));
  assign mux_142_nl = MUX_s_1_2_2(mux_141_nl, nor_110_nl, fsm_output[5]);
  assign nor_111_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[6]));
  assign nor_112_nl = ~((COMP_LOOP_acc_cse_sva[0]) | (~((COMP_LOOP_acc_cse_sva[1])
      & (fsm_output[6]))));
  assign mux_138_nl = MUX_s_1_2_2(nor_111_nl, nor_112_nl, fsm_output[3]);
  assign nor_113_nl = ~((fsm_output[3]) | (~ (COMP_LOOP_acc_7_psp_sva[0])) | (STAGE_VEC_LOOP_j_sva_9_0[0])
      | (fsm_output[6]));
  assign mux_139_nl = MUX_s_1_2_2(mux_138_nl, nor_113_nl, fsm_output[4]);
  assign nor_114_nl = ~((operator_64_false_acc_cse_sva[0]) | (~((operator_64_false_acc_cse_sva[1])
      & (fsm_output[6]))));
  assign nor_115_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b10) | (fsm_output[6]));
  assign mux_137_nl = MUX_s_1_2_2(nor_114_nl, nor_115_nl, fsm_output[3]);
  assign and_173_nl = (fsm_output[4]) & mux_137_nl;
  assign mux_140_nl = MUX_s_1_2_2(mux_139_nl, and_173_nl, fsm_output[5]);
  assign mux_143_nl = MUX_s_1_2_2(mux_142_nl, mux_140_nl, fsm_output[7]);
  assign vec_rsc_0_2_i_we_d_pff = mux_143_nl & and_dcpl_49;
  assign nor_103_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b10) | (fsm_output[7:5]!=3'b100));
  assign nor_104_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[7:5]!=3'b010));
  assign mux_148_nl = MUX_s_1_2_2(nor_103_nl, nor_104_nl, fsm_output[3]);
  assign nor_105_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[7:5]!=3'b000));
  assign nor_106_nl = ~((operator_64_false_acc_cse_sva[1:0]!=2'b10) | (fsm_output[7:5]!=3'b101));
  assign mux_147_nl = MUX_s_1_2_2(nor_105_nl, nor_106_nl, fsm_output[3]);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, mux_147_nl, fsm_output[4]);
  assign and_172_nl = nor_26_cse & mux_149_nl;
  assign or_115_nl = (~ (COMP_LOOP_acc_7_psp_sva[0])) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7:5]!=3'b100);
  assign or_114_nl = (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b10) | (fsm_output[7:5]!=3'b010);
  assign mux_145_nl = MUX_s_1_2_2(or_115_nl, or_114_nl, fsm_output[3]);
  assign or_113_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b10) | (fsm_output[7:5]!=3'b000);
  assign or_112_nl = (~ operator_64_false_slc_operator_64_false_acc_61_itm) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b10)
      | (fsm_output[7:5]!=3'b101);
  assign mux_144_nl = MUX_s_1_2_2(or_113_nl, or_112_nl, fsm_output[3]);
  assign mux_146_nl = MUX_s_1_2_2(mux_145_nl, mux_144_nl, fsm_output[4]);
  assign nor_107_nl = ~((fsm_output[2:1]!=2'b01) | mux_146_nl);
  assign vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_172_nl,
      nor_107_nl, fsm_output[0]);
  assign and_167_nl = (fsm_output[3]) & (operator_64_false_acc_cse_1_sva[1:0]==2'b11)
      & (fsm_output[6]);
  assign and_168_nl = (fsm_output[3]) & (COMP_LOOP_acc_cse_2_sva[1:0]==2'b11) & (fsm_output[6]);
  assign mux_155_nl = MUX_s_1_2_2(and_167_nl, and_168_nl, fsm_output[4]);
  assign nor_99_nl = ~((fsm_output[4:3]!=2'b00) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[1])));
  assign mux_156_nl = MUX_s_1_2_2(mux_155_nl, nor_99_nl, fsm_output[5]);
  assign nor_100_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b11) | (fsm_output[6]));
  assign and_169_nl = (COMP_LOOP_acc_cse_sva[1:0]==2'b11) & (fsm_output[6]);
  assign mux_152_nl = MUX_s_1_2_2(nor_100_nl, and_169_nl, fsm_output[3]);
  assign nor_101_nl = ~((fsm_output[3]) | (~ (COMP_LOOP_acc_7_psp_sva[0])) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0]))
      | (fsm_output[6]));
  assign mux_153_nl = MUX_s_1_2_2(mux_152_nl, nor_101_nl, fsm_output[4]);
  assign and_171_nl = (operator_64_false_acc_cse_sva[1:0]==2'b11) & (fsm_output[6]);
  assign nor_102_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b11) | (fsm_output[6]));
  assign mux_151_nl = MUX_s_1_2_2(and_171_nl, nor_102_nl, fsm_output[3]);
  assign and_170_nl = (fsm_output[4]) & mux_151_nl;
  assign mux_154_nl = MUX_s_1_2_2(mux_153_nl, and_170_nl, fsm_output[5]);
  assign mux_157_nl = MUX_s_1_2_2(mux_156_nl, mux_154_nl, fsm_output[7]);
  assign vec_rsc_0_3_i_we_d_pff = mux_157_nl & and_dcpl_49;
  assign nor_94_nl = ~((operator_64_false_acc_cse_3_sva[1:0]!=2'b11) | (fsm_output[7:5]!=3'b100));
  assign nor_95_nl = ~((operator_64_false_acc_cse_2_sva[1:0]!=2'b11) | (fsm_output[7:5]!=3'b010));
  assign mux_162_nl = MUX_s_1_2_2(nor_94_nl, nor_95_nl, fsm_output[3]);
  assign nor_96_nl = ~((STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b11) | (fsm_output[7:5]!=3'b000));
  assign and_200_nl = (operator_64_false_acc_cse_sva[1:0]==2'b11) & (fsm_output[7:5]==3'b101);
  assign mux_161_nl = MUX_s_1_2_2(nor_96_nl, and_200_nl, fsm_output[3]);
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, mux_161_nl, fsm_output[4]);
  assign and_166_nl = nor_26_cse & mux_163_nl;
  assign or_132_nl = (~ (COMP_LOOP_acc_7_psp_sva[0])) | (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[7:5]!=3'b100);
  assign or_131_nl = (~ COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm)
      | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b11) | (fsm_output[7:5]!=3'b010);
  assign mux_159_nl = MUX_s_1_2_2(or_132_nl, or_131_nl, fsm_output[3]);
  assign or_130_nl = (COMP_LOOP_1_operator_64_false_acc_tmp[1:0]!=2'b11) | (fsm_output[7:5]!=3'b000);
  assign nand_30_nl = ~(operator_64_false_slc_operator_64_false_acc_61_itm & (COMP_LOOP_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[7:5]==3'b101));
  assign mux_158_nl = MUX_s_1_2_2(or_130_nl, nand_30_nl, fsm_output[3]);
  assign mux_160_nl = MUX_s_1_2_2(mux_159_nl, mux_158_nl, fsm_output[4]);
  assign nor_98_nl = ~((fsm_output[2:1]!=2'b01) | mux_160_nl);
  assign vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = MUX_s_1_2_2(and_166_nl,
      nor_98_nl, fsm_output[0]);
  assign and_dcpl_151 = and_dcpl_63 & (fsm_output[7:2]==6'b111101);
  assign and_dcpl_152 = (~ (fsm_output[7])) & (fsm_output[4]);
  assign and_dcpl_153 = (~ (fsm_output[3])) & (fsm_output[5]);
  assign and_dcpl_158 = and_dcpl_104 & and_dcpl_153 & and_dcpl_152;
  assign and_dcpl_159 = ~((fsm_output[7]) | (fsm_output[4]));
  assign and_dcpl_163 = (~ (fsm_output[0])) & (fsm_output[6]) & and_dcpl_85;
  assign and_dcpl_164 = and_dcpl_163 & (fsm_output[3]) & (fsm_output[5]) & and_dcpl_159;
  assign and_dcpl_165 = ~((fsm_output[3]) | (fsm_output[5]));
  assign and_dcpl_170 = and_dcpl_5 & (fsm_output[2:1]==2'b01) & and_dcpl_165 & and_dcpl_152;
  assign and_dcpl_173 = and_dcpl_104 & and_dcpl_153 & (fsm_output[7]) & (~ (fsm_output[4]));
  assign or_tmp_224 = (fsm_output[5]) | (~((fsm_output[3]) & (fsm_output[6])));
  assign or_257_cse = (~ (fsm_output[5])) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_324_cse = MUX_s_1_2_2(or_257_cse, or_tmp_224, fsm_output[7]);
  assign or_264_nl = (fsm_output[5]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_nl = MUX_s_1_2_2(or_tmp_224, or_264_nl, fsm_output[7]);
  assign mux_325_cse = MUX_s_1_2_2(mux_324_cse, mux_nl, fsm_output[4]);
  assign nor_181_cse = ~(mux_325_cse | (fsm_output[2:0]!=3'b100));
  assign and_dcpl_177 = and_dcpl_165 & and_dcpl_159;
  assign and_dcpl_180 = and_dcpl_5 & (fsm_output[2:1]==2'b10) & and_dcpl_177;
  assign and_dcpl_183 = and_dcpl_12 & (fsm_output[2:1]==2'b11) & and_dcpl_177;
  assign and_dcpl_187 = and_dcpl_163 & (fsm_output[3]) & (~ (fsm_output[5])) & (fsm_output[7])
      & (fsm_output[4]);
  assign and_dcpl_194 = and_dcpl_5 & (fsm_output[2:1]==2'b00) & and_dcpl_177;
  assign and_dcpl_198 = (~ (fsm_output[6])) & (~ (fsm_output[0])) & (fsm_output[1])
      & (fsm_output[2]) & and_dcpl_177;
  assign and_dcpl_201 = (~ mux_325_cse) & and_dcpl_63 & (fsm_output[2]);
  assign and_dcpl_205 = and_dcpl_5 & and_dcpl_11;
  assign and_dcpl_206 = and_dcpl_205 & and_dcpl_165 & (~ (fsm_output[7])) & (fsm_output[4]);
  assign nand_32_nl = ~((fsm_output[5]) & (fsm_output[3]) & (fsm_output[6]));
  assign mux_329_nl = MUX_s_1_2_2(nand_32_nl, or_257_cse, fsm_output[7]);
  assign mux_330_nl = MUX_s_1_2_2(mux_329_nl, mux_324_cse, fsm_output[4]);
  assign and_dcpl_208 = (~ mux_330_nl) & and_dcpl_63 & (~ (fsm_output[2]));
  assign and_dcpl_213 = (fsm_output[6]) & (fsm_output[0]) & and_dcpl_11 & (fsm_output[3])
      & (~ (fsm_output[5])) & and_dcpl_159;
  assign and_dcpl_216 = and_dcpl_205 & and_dcpl_165 & (fsm_output[7]) & (~ (fsm_output[4]));
  assign and_dcpl_220 = and_dcpl_205 & (fsm_output[3]) & (fsm_output[5]) & (fsm_output[7])
      & (fsm_output[4]);
  assign and_dcpl_235 = (fsm_output[1:0]==2'b01) & xor_dcpl & (fsm_output[2]) & (fsm_output[5])
      & ((fsm_output[7]) ^ (fsm_output[4]));
  assign and_dcpl_242 = and_dcpl_5 & (fsm_output[2:1]==2'b01) & and_dcpl_165 & (~
      (fsm_output[7])) & (fsm_output[4]);
  assign and_dcpl_247 = and_dcpl_5 & and_dcpl_85 & and_dcpl_165 & (~ (fsm_output[7]))
      & (~ (fsm_output[4]));
  assign and_dcpl_253 = (fsm_output[6]) & (~ (fsm_output[0])) & and_dcpl_85 & (fsm_output[3])
      & (~ (fsm_output[5])) & and_183_cse;
  assign and_dcpl_259 = (fsm_output[6]) & (fsm_output[0]) & (~ (fsm_output[1])) &
      (fsm_output[2]) & (~ (fsm_output[3])) & (fsm_output[5]) & and_183_cse;
  assign nor_192_nl = ~((fsm_output[6]) | (fsm_output[2]) | and_192_cse);
  assign mux_tmp_319 = MUX_s_1_2_2(nor_192_nl, (fsm_output[6]), fsm_output[3]);
  assign or_tmp_238 = (fsm_output[2]) | and_192_cse;
  assign or_276_nl = (fsm_output[2:1]!=2'b10);
  assign or_275_nl = (fsm_output[2:1]!=2'b01);
  assign mux_tmp_324 = MUX_s_1_2_2(or_276_nl, or_275_nl, fsm_output[0]);
  assign or_tmp_246 = (fsm_output[5:4]!=2'b01) | mux_tmp_324;
  assign nor_190_nl = ~((fsm_output[3]) | ((fsm_output[2]) & or_157_cse));
  assign mux_tmp_329 = MUX_s_1_2_2(nor_190_nl, (fsm_output[3]), fsm_output[6]);
  assign or_tmp_252 = (fsm_output[5]) | (~((fsm_output[6]) & (fsm_output[3]) & (fsm_output[2])
      & or_157_cse));
  assign operator_64_false_or_5_itm = nor_181_cse | and_dcpl_183;
  assign operator_64_false_1_or_itm = and_dcpl_247 | and_dcpl_259;
  always @(posedge clk) begin
    if ( mux_tmp_93 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= and_dcpl_58 & (~ (fsm_output[3])) & (fsm_output[6])
          & and_dcpl_55 & (fsm_output[2]) & (z_out_4[4]);
      reg_ensig_cgo_cse <= ~ mux_182_itm;
    end
  end
  always @(posedge clk) begin
    reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        z_out_3, mux_204_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_2, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        and_dcpl_84);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_84);
    modExp_dev_exp_1_sva_1_0 <= MUX_v_2_2_2(COMP_LOOP_and_4_nl, 2'b11, and_132_nl);
  end
  always @(posedge clk) begin
    if ( mux_tmp_93 | and_dcpl_87 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_4[3:0]), and_dcpl_87);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_93_nl, mux_210_nl, fsm_output[2]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_87 | and_dcpl_77 | and_dcpl_90 | and_dcpl_79 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4
        ) begin
      COMP_LOOP_1_modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_4_2(z_out_2, z_out_3,
          64'b0000000000000000000000000000000000000000000000000000000000000001, modExp_dev_while_rem_cmp_z_oreg,
          {and_dcpl_87 , operator_64_false_or_2_cse , and_dcpl_90 , COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (and_dcpl_80 & and_dcpl_55 & and_dcpl_8 & ((fsm_output[4]) ^ (fsm_output[2])))
        | STAGE_VEC_LOOP_j_sva_9_0_mx0c1 ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_227_nl | and_103_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z_oreg, and_103_rgt);
    end
  end
  always @(posedge clk) begin
    if ( ~ mux_240_nl ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_6_2(STAGE_MAIN_LOOP_div_cmp_z, z_out_2, vec_rsc_0_0_i_q_d,
          vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d, {and_104_nl ,
          and_dcpl_77 , COMP_LOOP_or_3_nl , COMP_LOOP_or_4_nl , COMP_LOOP_or_5_nl
          , COMP_LOOP_or_6_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm <= 1'b0;
    end
    else if ( and_dcpl_77 | and_dcpl_79 | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2
        | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3 |
        and_dcpl_111 ) begin
      COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm <= MUX1HOT_s_1_3_2((~
          (z_out_1[64])), (z_out_1[63]), (~ (z_out_1[63])), {operator_64_false_or_2_cse
          , modExp_dev_while_or_2_nl , and_dcpl_111});
    end
  end
  always @(posedge clk) begin
    if ( mux_334_nl & (~((fsm_output[2]) | (fsm_output[0]))) & (fsm_output[4]) &
        (~ (fsm_output[5])) ) begin
      COMP_LOOP_k_9_2_sva_6_0 <= MUX_v_7_2_2(7'b0000000, (z_out_4[6:0]), nand_36_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_1_sva <= 10'b0000000000;
    end
    else if ( ~(or_140_cse | (~ (fsm_output[4])) | (fsm_output[3]) | (fsm_output[6])
        | (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[2])) ) begin
      operator_64_false_acc_cse_1_sva <= COMP_LOOP_1_operator_64_false_acc_tmp;
    end
  end
  always @(posedge clk) begin
    if ( ~ mux_339_nl ) begin
      COMP_LOOP_acc_psp_sva_7 <= COMP_LOOP_COMP_LOOP_mux_rgt[7];
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_191_nl, and_336_nl, fsm_output[3]) ) begin
      COMP_LOOP_acc_psp_sva_6_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[6:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_2_sva <= 10'b0000000000;
    end
    else if ( mux_271_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_cse_2_sva <= z_out_1[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_2_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_277_nl, or_204_nl, fsm_output[2]) ) begin
      operator_64_false_acc_cse_2_sva <= nl_operator_64_false_acc_cse_2_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_7_psp_sva <= 9'b000000000;
    end
    else if ( MUX_s_1_2_2(mux_285_nl, mux_279_nl, fsm_output[2]) ) begin
      COMP_LOOP_acc_7_psp_sva <= nl_COMP_LOOP_acc_7_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_3_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_293_nl, mux_289_nl, fsm_output[2]) ) begin
      operator_64_false_acc_cse_3_sva <= nl_operator_64_false_acc_cse_3_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_298_nl, mux_295_nl, fsm_output[2]) ) begin
      COMP_LOOP_acc_cse_sva <= nl_COMP_LOOP_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_301_nl, mux_tmp_207, fsm_output[2]) ) begin
      operator_64_false_acc_cse_sva <= nl_operator_64_false_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_10 | operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1 )
        begin
      operator_64_false_slc_operator_64_false_acc_61_itm <= MUX_s_1_2_2((z_out_4[7]),
          (z_out_1[61]), operator_64_false_slc_operator_64_false_acc_61_itm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( tmp_1_lpi_4_dfm_mx0c0 | tmp_1_lpi_4_dfm_mx0c1 | tmp_1_lpi_4_dfm_mx0c2 |
        tmp_1_lpi_4_dfm_mx0c3 ) begin
      tmp_1_lpi_4_dfm <= MUX1HOT_v_64_4_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d,
          vec_rsc_0_3_i_q_d, {tmp_1_lpi_4_dfm_mx0c0 , tmp_1_lpi_4_dfm_mx0c1 , tmp_1_lpi_4_dfm_mx0c2
          , tmp_1_lpi_4_dfm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_347_nl, mux_346_nl, fsm_output[4]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_2[63:9]), not_nl);
    end
  end
  assign or_153_nl = (fsm_output[6]) | mux_27_cse;
  assign mux_200_nl = MUX_s_1_2_2(or_153_nl, mux_tmp_178, fsm_output[3]);
  assign mux_202_nl = MUX_s_1_2_2(mux_tmp_186, mux_200_nl, fsm_output[1]);
  assign mux_196_nl = MUX_s_1_2_2(mux_tmp_179, mux_26_cse, fsm_output[6]);
  assign mux_198_nl = MUX_s_1_2_2(mux_27_cse, mux_196_nl, fsm_output[3]);
  assign mux_195_nl = MUX_s_1_2_2(or_tmp_140, mux_tmp_178, fsm_output[3]);
  assign mux_199_nl = MUX_s_1_2_2(mux_198_nl, mux_195_nl, fsm_output[1]);
  assign mux_203_nl = MUX_s_1_2_2(mux_202_nl, mux_199_nl, fsm_output[0]);
  assign mux_204_nl = MUX_s_1_2_2(mux_tmp_186, mux_203_nl, fsm_output[2]);
  assign mux_319_nl = MUX_s_1_2_2(mux_tmp_243, mux_tmp_242, or_157_cse);
  assign mux_320_nl = MUX_s_1_2_2(mux_tmp_243, mux_319_nl, fsm_output[2]);
  assign or_244_nl = (fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[7]));
  assign mux_321_nl = MUX_s_1_2_2(mux_27_cse, or_244_nl, and_145_cse);
  assign mux_322_nl = MUX_s_1_2_2(mux_tmp_243, mux_321_nl, and_192_cse);
  assign mux_323_nl = MUX_s_1_2_2(mux_322_nl, mux_tmp_242, fsm_output[2]);
  assign and_131_nl = and_dcpl_40 & and_dcpl_6;
  assign COMP_LOOP_mux1h_23_nl = MUX1HOT_v_2_4_2((z_out_2[1:0]), modExp_dev_exp_1_sva_1_0,
      2'b01, 2'b10, {and_dcpl_79 , (~ mux_320_nl) , mux_323_nl , and_131_nl});
  assign nand_35_nl = ~(and_dcpl_32 & and_dcpl_6);
  assign COMP_LOOP_and_4_nl = MUX_v_2_2_2(2'b00, COMP_LOOP_mux1h_23_nl, nand_35_nl);
  assign and_132_nl = and_dcpl_43 & and_dcpl_16;
  assign mux_93_nl = MUX_s_1_2_2(mux_tmp_77, nor_tmp_22, fsm_output[1]);
  assign mux_210_nl = MUX_s_1_2_2(nor_tmp_22, nor_tmp_21, or_157_cse);
  assign mux_226_nl = MUX_s_1_2_2(mux_tmp_73, mux_tmp_80, or_157_cse);
  assign mux_224_nl = MUX_s_1_2_2(mux_tmp_80, mux_tmp_207, or_157_cse);
  assign mux_227_nl = MUX_s_1_2_2(mux_226_nl, mux_224_nl, fsm_output[2]);
  assign and_104_nl = nor_143_cse & and_dcpl_5 & and_dcpl_11;
  assign nor_87_nl = ~((fsm_output[4:3]!=2'b11) | (COMP_LOOP_acc_cse_sva[1:0]!=2'b00)
      | (~ and_186_cse));
  assign nor_88_nl = ~((fsm_output[4:3]!=2'b01) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b00)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_241_nl = MUX_s_1_2_2(nor_87_nl, nor_88_nl, fsm_output[6]);
  assign nor_89_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[5]) | (fsm_output[7]));
  assign mux_242_nl = MUX_s_1_2_2(mux_241_nl, nor_89_nl, fsm_output[0]);
  assign COMP_LOOP_or_3_nl = (mux_242_nl & and_dcpl_11) | ((~((STAGE_VEC_LOOP_j_sva_9_0[0])
      | (COMP_LOOP_acc_7_psp_sva[0]))) & and_dcpl_27);
  assign and_159_nl = (fsm_output[4:3]==2'b11) & (COMP_LOOP_acc_cse_sva[1:0]==2'b01)
      & and_186_cse;
  assign nor_85_nl = ~((fsm_output[4:3]!=2'b01) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_243_nl = MUX_s_1_2_2(and_159_nl, nor_85_nl, fsm_output[6]);
  assign nor_86_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[5]) | (fsm_output[7]));
  assign mux_244_nl = MUX_s_1_2_2(mux_243_nl, nor_86_nl, fsm_output[0]);
  assign COMP_LOOP_or_4_nl = (mux_244_nl & and_dcpl_11) | ((STAGE_VEC_LOOP_j_sva_9_0[0])
      & (~ (COMP_LOOP_acc_7_psp_sva[0])) & and_dcpl_27);
  assign nor_82_nl = ~((fsm_output[4:3]!=2'b11) | (COMP_LOOP_acc_cse_sva[0]) | (~((COMP_LOOP_acc_cse_sva[1])
      & (fsm_output[5]) & (fsm_output[7]))));
  assign nor_83_nl = ~((fsm_output[4:3]!=2'b01) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b10)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_245_nl = MUX_s_1_2_2(nor_82_nl, nor_83_nl, fsm_output[6]);
  assign nor_84_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[5]) | (fsm_output[7]));
  assign mux_246_nl = MUX_s_1_2_2(mux_245_nl, nor_84_nl, fsm_output[0]);
  assign COMP_LOOP_or_5_nl = (mux_246_nl & and_dcpl_11) | ((COMP_LOOP_acc_7_psp_sva[0])
      & (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) & and_dcpl_27);
  assign and_158_nl = (fsm_output[4:3]==2'b11) & (COMP_LOOP_acc_cse_sva[1:0]==2'b11)
      & (fsm_output[5]) & (fsm_output[7]);
  assign nor_80_nl = ~((fsm_output[4:3]!=2'b01) | (COMP_LOOP_acc_cse_2_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (fsm_output[7]));
  assign mux_247_nl = MUX_s_1_2_2(and_158_nl, nor_80_nl, fsm_output[6]);
  assign nor_81_nl = ~((fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (STAGE_VEC_LOOP_j_sva_9_0[1:0]!=2'b11) | (fsm_output[5]) | (fsm_output[7]));
  assign mux_248_nl = MUX_s_1_2_2(mux_247_nl, nor_81_nl, fsm_output[0]);
  assign COMP_LOOP_or_6_nl = (mux_248_nl & and_dcpl_11) | ((STAGE_VEC_LOOP_j_sva_9_0[0])
      & (COMP_LOOP_acc_7_psp_sva[0]) & and_dcpl_27);
  assign or_177_nl = ((fsm_output[1]) & (fsm_output[7])) | (fsm_output[3]);
  assign mux_236_nl = MUX_s_1_2_2(or_177_nl, or_tmp_162, fsm_output[0]);
  assign mux_237_nl = MUX_s_1_2_2((fsm_output[3]), mux_236_nl, fsm_output[2]);
  assign mux_238_nl = MUX_s_1_2_2(mux_237_nl, (~ (fsm_output[7])), fsm_output[5]);
  assign or_176_nl = (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[3]);
  assign mux_234_nl = MUX_s_1_2_2(or_176_nl, or_tmp_162, fsm_output[2]);
  assign and_105_nl = (fsm_output[2]) & or_157_cse & (fsm_output[7]) & (fsm_output[3]);
  assign mux_235_nl = MUX_s_1_2_2(mux_234_nl, and_105_nl, fsm_output[5]);
  assign mux_239_nl = MUX_s_1_2_2(mux_238_nl, mux_235_nl, fsm_output[4]);
  assign mux_230_nl = MUX_s_1_2_2((fsm_output[7]), or_tmp_159, or_157_cse);
  assign mux_231_nl = MUX_s_1_2_2((fsm_output[7]), mux_230_nl, fsm_output[2]);
  assign mux_232_nl = MUX_s_1_2_2(mux_231_nl, (~ or_tmp_159), fsm_output[5]);
  assign nor_90_nl = ~((fsm_output[5]) | ((fsm_output[7]) & (fsm_output[3])));
  assign mux_233_nl = MUX_s_1_2_2(mux_232_nl, nor_90_nl, fsm_output[4]);
  assign mux_240_nl = MUX_s_1_2_2(mux_239_nl, mux_233_nl, fsm_output[6]);
  assign modExp_dev_while_or_2_nl = COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c2
      | COMP_LOOP_2_operator_64_false_slc_operator_64_false_acc_63_itm_mx0c3;
  assign nand_36_nl = ~(and_dcpl_9 & and_dcpl_30);
  assign nor_193_nl = ~((fsm_output[3]) | (fsm_output[6]) | (~ (fsm_output[1])));
  assign nor_194_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[6])) | (fsm_output[1]));
  assign mux_334_nl = MUX_s_1_2_2(nor_193_nl, nor_194_nl, fsm_output[7]);
  assign nand_nl = ~((fsm_output[7]) & (fsm_output[3]) & (fsm_output[6]) & or_tmp_238);
  assign or_286_nl = (fsm_output[6]) | (fsm_output[2]) | (~ and_192_cse);
  assign nand_40_nl = ~((fsm_output[6]) & or_tmp_238);
  assign mux_336_nl = MUX_s_1_2_2(or_286_nl, nand_40_nl, fsm_output[3]);
  assign mux_337_nl = MUX_s_1_2_2(mux_336_nl, mux_tmp_319, fsm_output[7]);
  assign mux_338_nl = MUX_s_1_2_2(nand_nl, mux_337_nl, fsm_output[4]);
  assign or_270_nl = (fsm_output[4]) | (fsm_output[7]) | mux_tmp_319;
  assign mux_339_nl = MUX_s_1_2_2(mux_338_nl, or_270_nl, fsm_output[5]);
  assign nand_37_nl = ~((fsm_output[5]) & (~ mux_tmp_324));
  assign or_280_nl = (fsm_output[5]) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (fsm_output[2]);
  assign mux_342_nl = MUX_s_1_2_2(nand_37_nl, or_280_nl, fsm_output[4]);
  assign mux_343_nl = MUX_s_1_2_2(mux_342_nl, or_tmp_246, fsm_output[7]);
  assign nor_191_nl = ~((fsm_output[6]) | mux_343_nl);
  assign or_277_nl = (fsm_output[5:4]!=2'b00) | mux_tmp_324;
  assign mux_341_nl = MUX_s_1_2_2(or_tmp_246, or_277_nl, fsm_output[7]);
  assign and_336_nl = (fsm_output[6]) & (~ mux_341_nl);
  assign mux_35_nl = MUX_s_1_2_2((~ or_211_cse), (fsm_output[5]), fsm_output[6]);
  assign mux_33_nl = MUX_s_1_2_2((~ or_211_cse), or_211_cse, fsm_output[6]);
  assign mux_270_nl = MUX_s_1_2_2(mux_35_nl, mux_33_nl, fsm_output[1]);
  assign mux_30_nl = MUX_s_1_2_2(nor_153_cse, or_211_cse, fsm_output[6]);
  assign mux_271_nl = MUX_s_1_2_2(mux_270_nl, mux_30_nl, fsm_output[2]);
  assign nl_operator_64_false_acc_cse_2_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b01}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign or_208_nl = nor_153_cse | (fsm_output[7]);
  assign mux_275_nl = MUX_s_1_2_2(mux_tmp_259, or_208_nl, fsm_output[3]);
  assign mux_276_nl = MUX_s_1_2_2(mux_275_nl, (fsm_output[7]), fsm_output[6]);
  assign or_206_nl = (~(and_190_cse | (fsm_output[5]))) | (fsm_output[7]);
  assign mux_272_nl = MUX_s_1_2_2(or_206_nl, (fsm_output[7]), fsm_output[6]);
  assign mux_277_nl = MUX_s_1_2_2(mux_276_nl, mux_272_nl, fsm_output[1]);
  assign or_204_nl = (~((fsm_output[6:4]!=3'b000))) | (fsm_output[7]);
  assign nl_COMP_LOOP_acc_7_psp_sva  = (STAGE_VEC_LOOP_j_sva_9_0[9:1]) + conv_u2u_8_9({COMP_LOOP_k_9_2_sva_6_0
      , 1'b1});
  assign mux_283_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), or_211_cse);
  assign mux_284_nl = MUX_s_1_2_2(mux_283_nl, (fsm_output[7]), fsm_output[6]);
  assign mux_280_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), or_210_cse);
  assign mux_281_nl = MUX_s_1_2_2(mux_tmp_259, mux_280_nl, fsm_output[3]);
  assign mux_282_nl = MUX_s_1_2_2(mux_281_nl, (fsm_output[7]), fsm_output[6]);
  assign mux_285_nl = MUX_s_1_2_2(mux_284_nl, mux_282_nl, fsm_output[1]);
  assign or_209_nl = (fsm_output[6:4]!=3'b000);
  assign mux_279_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), or_209_nl);
  assign nl_operator_64_false_acc_cse_3_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b10}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign mux_292_nl = MUX_s_1_2_2(not_tmp_35, (fsm_output[7]), fsm_output[6]);
  assign mux_290_nl = MUX_s_1_2_2(and_dcpl_8, and_186_cse, and_190_cse);
  assign mux_291_nl = MUX_s_1_2_2(mux_290_nl, (fsm_output[7]), fsm_output[6]);
  assign mux_293_nl = MUX_s_1_2_2(mux_292_nl, mux_291_nl, fsm_output[1]);
  assign mux_287_nl = MUX_s_1_2_2(and_dcpl_8, and_186_cse, fsm_output[4]);
  assign mux_288_nl = MUX_s_1_2_2(not_tmp_32, mux_287_nl, fsm_output[3]);
  assign mux_289_nl = MUX_s_1_2_2(mux_288_nl, (fsm_output[7]), fsm_output[6]);
  assign nl_COMP_LOOP_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b11});
  assign and_148_nl = or_210_cse & (fsm_output[7]);
  assign mux_297_nl = MUX_s_1_2_2(not_tmp_35, and_148_nl, fsm_output[6]);
  assign mux_296_nl = MUX_s_1_2_2(not_tmp_35, nor_tmp_56, fsm_output[6]);
  assign mux_298_nl = MUX_s_1_2_2(mux_297_nl, mux_296_nl, fsm_output[1]);
  assign mux_295_nl = MUX_s_1_2_2(not_tmp_32, nor_tmp_56, fsm_output[6]);
  assign nl_operator_64_false_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b11}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign mux_300_nl = MUX_s_1_2_2(not_tmp_35, and_dcpl_58, fsm_output[6]);
  assign mux_301_nl = MUX_s_1_2_2(mux_tmp_73, mux_300_nl, fsm_output[1]);
  assign not_nl = ~ and_dcpl_90;
  assign nand_38_nl = ~((fsm_output[5]) & (~ mux_tmp_329));
  assign mux_347_nl = MUX_s_1_2_2(nand_38_nl, or_tmp_252, fsm_output[7]);
  assign or_284_nl = (fsm_output[5]) | mux_tmp_329;
  assign mux_346_nl = MUX_s_1_2_2(or_tmp_252, or_284_nl, fsm_output[7]);
  assign COMP_LOOP_mux_17_nl = MUX_v_10_2_2(({2'b00 , (STAGE_VEC_LOOP_j_sva_9_0[9:2])}),
      STAGE_VEC_LOOP_j_sva_9_0, and_dcpl_151);
  assign COMP_LOOP_mux_18_nl = MUX_v_10_2_2(({3'b000 , COMP_LOOP_k_9_2_sva_6_0}),
      STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_151);
  assign nl_z_out = conv_u2u_10_11(COMP_LOOP_mux_17_nl) + conv_u2u_10_11(COMP_LOOP_mux_18_nl);
  assign z_out = nl_z_out[10:0];
  assign operator_64_false_operator_64_false_or_3_nl = (~(and_dcpl_158 | and_dcpl_164
      | and_dcpl_170 | and_dcpl_173 | and_dcpl_187)) | nor_181_cse | and_dcpl_180
      | and_dcpl_183;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_55_4_2(({54'b111111111111111111111111111111111111111111111111111111
      , (~ (STAGE_VEC_LOOP_j_sva_9_0[9]))}), 55'b1100000000000000000000000000000000000000000000000000000,
      (z_out_2[63:9]), (STAGE_MAIN_LOOP_div_cmp_z[63:9]), {and_dcpl_170 , and_dcpl_173
      , operator_64_false_or_5_itm , and_dcpl_180});
  assign operator_64_false_nor_9_nl = ~(and_dcpl_158 | and_dcpl_164 | and_dcpl_187);
  assign operator_64_false_operator_64_false_nand_1_nl = ~(MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
      operator_64_false_mux1h_3_nl, operator_64_false_nor_9_nl));
  assign operator_64_false_or_9_nl = and_dcpl_158 | and_dcpl_164 | and_dcpl_187;
  assign operator_64_false_mux1h_4_nl = MUX1HOT_v_9_5_2((~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      (STAGE_VEC_LOOP_j_sva_9_0[8:0]), ({2'b11 , (~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:3]))}),
      (~ (z_out_2[8:0])), (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])), {operator_64_false_or_9_nl
      , and_dcpl_170 , and_dcpl_173 , operator_64_false_or_5_itm , and_dcpl_180});
  assign operator_64_false_or_10_nl = (~(and_dcpl_170 | nor_181_cse | and_dcpl_180
      | and_dcpl_183)) | and_dcpl_158 | and_dcpl_164 | and_dcpl_173 | and_dcpl_187;
  assign operator_64_false_operator_64_false_and_1_nl = (z_out_4[7]) & (~(and_dcpl_158
      | and_dcpl_164 | and_dcpl_170 | and_dcpl_173 | nor_181_cse | and_dcpl_180 |
      and_dcpl_183));
  assign operator_64_false_or_11_nl = and_dcpl_158 | and_dcpl_164 | and_dcpl_170;
  assign operator_64_false_mux1h_5_nl = MUX1HOT_v_7_3_2(COMP_LOOP_k_9_2_sva_6_0,
      ({2'b00 , (COMP_LOOP_k_9_2_sva_6_0[6:2])}), (z_out_4[6:0]), {operator_64_false_or_11_nl
      , and_dcpl_173 , and_dcpl_187});
  assign operator_64_false_nor_12_nl = ~(nor_181_cse | and_dcpl_180 | and_dcpl_183);
  assign operator_64_false_and_3_nl = MUX_v_7_2_2(7'b0000000, operator_64_false_mux1h_5_nl,
      operator_64_false_nor_12_nl);
  assign operator_64_false_operator_64_false_or_4_nl = ((COMP_LOOP_k_9_2_sva_6_0[1])
      & (~(and_dcpl_158 | and_dcpl_170 | nor_181_cse | and_dcpl_180 | and_dcpl_183
      | and_dcpl_187))) | and_dcpl_164;
  assign operator_64_false_operator_64_false_or_5_nl = ((COMP_LOOP_k_9_2_sva_6_0[0])
      & (~(and_dcpl_164 | and_dcpl_187))) | and_dcpl_158 | and_dcpl_170 | nor_181_cse
      | and_dcpl_180 | and_dcpl_183;
  assign nl_acc_1_nl = ({operator_64_false_operator_64_false_or_3_nl , operator_64_false_operator_64_false_nand_1_nl
      , operator_64_false_mux1h_4_nl , operator_64_false_or_10_nl}) + conv_u2u_11_66({operator_64_false_operator_64_false_and_1_nl
      , operator_64_false_and_3_nl , operator_64_false_operator_64_false_or_4_nl
      , operator_64_false_operator_64_false_or_5_nl , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[65:0];
  assign z_out_1 = readslicef_66_65_1(acc_1_nl);
  assign operator_64_false_or_9_nl_1 = and_dcpl_198 | and_dcpl_208 | and_dcpl_213
      | and_dcpl_216 | and_dcpl_220;
  assign operator_64_false_and_16_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b00) & and_dcpl_206;
  assign operator_64_false_and_17_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b01) & and_dcpl_206;
  assign operator_64_false_and_18_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b10) & and_dcpl_206;
  assign operator_64_false_and_19_nl = (STAGE_VEC_LOOP_j_sva_9_0[1:0]==2'b11) & and_dcpl_206;
  assign operator_64_false_mux1h_3_nl_1 = MUX1HOT_v_64_7_2(p_sva, tmp_2_lpi_4_dfm,
      ({modExp_dev_exp_1_sva_63_9 , COMP_LOOP_acc_psp_sva_6_0 , modExp_dev_exp_1_sva_1_0}),
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d,
      {and_dcpl_194 , operator_64_false_or_9_nl_1 , and_dcpl_201 , operator_64_false_and_16_nl
      , operator_64_false_and_17_nl , operator_64_false_and_18_nl , operator_64_false_and_19_nl});
  assign operator_64_false_or_10_nl_1 = (~(and_dcpl_194 | and_dcpl_198 | and_dcpl_201
      | and_dcpl_206 | and_dcpl_213 | and_dcpl_216 | and_dcpl_220)) | and_dcpl_208;
  assign operator_64_false_or_12_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b00)
      & and_dcpl_213) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b00) & and_dcpl_216)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b00) & and_dcpl_220);
  assign operator_64_false_or_13_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b01)
      & and_dcpl_213) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b01) & and_dcpl_216)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b01) & and_dcpl_220);
  assign operator_64_false_or_14_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b10)
      & and_dcpl_213) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b10) & and_dcpl_216)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b10) & and_dcpl_220);
  assign operator_64_false_or_15_nl = ((operator_64_false_acc_cse_2_sva[1:0]==2'b11)
      & and_dcpl_213) | ((operator_64_false_acc_cse_3_sva[1:0]==2'b11) & and_dcpl_216)
      | ((operator_64_false_acc_cse_sva[1:0]==2'b11) & and_dcpl_220);
  assign operator_64_false_mux1h_4_nl_1 = MUX1HOT_v_64_6_2(tmp_1_lpi_4_dfm, (~ tmp_1_lpi_4_dfm),
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d,
      {and_dcpl_206 , and_dcpl_208 , operator_64_false_or_12_nl , operator_64_false_or_13_nl
      , operator_64_false_or_14_nl , operator_64_false_or_15_nl});
  assign operator_64_false_or_16_nl = and_dcpl_194 | and_dcpl_198 | and_dcpl_201;
  assign operator_64_false_or_11_nl_1 = MUX_v_64_2_2(operator_64_false_mux1h_4_nl_1,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_16_nl);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl_1 , operator_64_false_or_10_nl_1})
      + ({operator_64_false_or_11_nl_1 , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_2 = readslicef_65_64_1(acc_2_nl);
  assign modExp_dev_while_or_3_nl = nor_181_cse | and_dcpl_235;
  assign modExp_dev_while_mux_1_nl = MUX_v_64_2_2(modExp_dev_result_sva, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      modExp_dev_while_or_3_nl);
  assign and_338_nl = and_dcpl_12 & (fsm_output[2:1]==2'b11) & and_dcpl_165 & and_dcpl_159;
  assign modExp_dev_while_mux1h_3_nl = MUX1HOT_v_64_3_2(r_sva, modExp_dev_result_sva,
      COMP_LOOP_1_modulo_dev_cmp_return_rsc_z, {and_338_nl , nor_181_cse , and_dcpl_235});
  assign nl_z_out_3 = modExp_dev_while_mux_1_nl * modExp_dev_while_mux1h_3_nl;
  assign z_out_3 = nl_z_out_3[63:0];
  assign operator_64_false_1_operator_64_false_1_or_2_nl = (~(and_dcpl_247 | and_dcpl_253
      | and_dcpl_259)) | and_dcpl_242;
  assign operator_64_false_1_mux_1_nl = MUX_v_3_2_2((~ (COMP_LOOP_k_9_2_sva_6_0[6:4])),
      (COMP_LOOP_k_9_2_sva_6_0[6:4]), and_dcpl_253);
  assign operator_64_false_1_nor_3_nl = ~(and_dcpl_247 | and_dcpl_259);
  assign operator_64_false_1_operator_64_false_1_and_1_nl = MUX_v_3_2_2(3'b000, operator_64_false_1_mux_1_nl,
      operator_64_false_1_nor_3_nl);
  assign operator_64_false_1_mux1h_2_nl = MUX1HOT_v_4_3_2((~ (COMP_LOOP_k_9_2_sva_6_0[3:0])),
      STAGE_MAIN_LOOP_acc_1_psp_sva, (COMP_LOOP_k_9_2_sva_6_0[3:0]), {and_dcpl_242
      , operator_64_false_1_or_itm , and_dcpl_253});
  assign nl_z_out_4 = ({operator_64_false_1_operator_64_false_1_or_2_nl , operator_64_false_1_operator_64_false_1_and_1_nl
      , operator_64_false_1_mux1h_2_nl}) + conv_s2u_2_8({operator_64_false_1_or_itm
      , 1'b1});
  assign z_out_4 = nl_z_out_4[7:0];

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [54:0] MUX1HOT_v_55_4_2;
    input [54:0] input_3;
    input [54:0] input_2;
    input [54:0] input_1;
    input [54:0] input_0;
    input [3:0] sel;
    reg [54:0] result;
  begin
    result = input_0 & {55{sel[0]}};
    result = result | ( input_1 & {55{sel[1]}});
    result = result | ( input_2 & {55{sel[2]}});
    result = result | ( input_3 & {55{sel[3]}});
    MUX1HOT_v_55_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_6_2;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [5:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    MUX1HOT_v_64_6_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_7_2;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [6:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    MUX1HOT_v_64_7_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_8_2;
    input [7:0] input_7;
    input [7:0] input_6;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [7:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    result = result | ( input_5 & {8{sel[5]}});
    result = result | ( input_6 & {8{sel[6]}});
    result = result | ( input_7 & {8{sel[7]}});
    MUX1HOT_v_8_8_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    result = result | ( input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_64_1_63;
    input [63:0] vector;
    reg [63:0] tmp;
  begin
    tmp = vector >> 63;
    readslicef_64_1_63 = tmp[0:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [64:0] readslicef_66_65_1;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_66_65_1 = tmp[64:0];
  end
  endfunction


  function automatic [7:0] conv_s2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_8 = {{6{vector[1]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [65:0] conv_u2u_11_66 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_66 = {{55{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, vec_rsc_0_2_wadr, vec_rsc_0_2_d, vec_rsc_0_2_we,
      vec_rsc_0_2_radr, vec_rsc_0_2_q, vec_rsc_triosy_0_2_lz, vec_rsc_0_3_wadr, vec_rsc_0_3_d,
      vec_rsc_0_3_we, vec_rsc_0_3_radr, vec_rsc_0_3_q, vec_rsc_triosy_0_3_lz, p_rsc_dat,
      p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [7:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [7:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [7:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [7:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  output [7:0] vec_rsc_0_2_wadr;
  output [63:0] vec_rsc_0_2_d;
  output vec_rsc_0_2_we;
  output [7:0] vec_rsc_0_2_radr;
  input [63:0] vec_rsc_0_2_q;
  output vec_rsc_triosy_0_2_lz;
  output [7:0] vec_rsc_0_3_wadr;
  output [63:0] vec_rsc_0_3_d;
  output vec_rsc_0_3_we;
  output [7:0] vec_rsc_0_3_radr;
  input [63:0] vec_rsc_0_3_q;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_q_d;
  wire vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_q_d;
  wire vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_b;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [7:0] vec_rsc_0_0_i_radr_d_iff;
  wire [7:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;
  wire vec_rsc_0_2_i_we_d_iff;
  wire vec_rsc_0_3_i_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(modExp_dev_while_rem_cmp_b),
      .z(modExp_dev_while_rem_cmp_z)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen vec_rsc_0_2_i
      (
      .q(vec_rsc_0_2_q),
      .radr(vec_rsc_0_2_radr),
      .we(vec_rsc_0_2_we),
      .d(vec_rsc_0_2_d),
      .wadr(vec_rsc_0_2_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_2_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen vec_rsc_0_3_i
      (
      .q(vec_rsc_0_3_q),
      .radr(vec_rsc_0_3_radr),
      .we(vec_rsc_0_3_we),
      .d(vec_rsc_0_3_d),
      .wadr(vec_rsc_0_3_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_3_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_q_d(vec_rsc_0_2_i_q_d),
      .vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_q_d(vec_rsc_0_3_i_q_d),
      .vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .modExp_dev_while_rem_cmp_a(modExp_dev_while_rem_cmp_a),
      .modExp_dev_while_rem_cmp_b(modExp_dev_while_rem_cmp_b),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff),
      .vec_rsc_0_2_i_we_d_pff(vec_rsc_0_2_i_we_d_iff),
      .vec_rsc_0_3_i_we_d_pff(vec_rsc_0_3_i_we_d_iff)
    );
endmodule



