// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Tue Jul 27 15:54:31 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_core_fsm (
  clk, rst, fsm_output, STAGE_MAIN_LOOP_C_4_tr0, modExp_dev_while_C_11_tr0, STAGE_VEC_LOOP_C_0_tr0,
      COMP_LOOP_C_16_tr0, COMP_LOOP_1_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_44_tr0,
      COMP_LOOP_2_modExp_dev_1_while_C_11_tr0, COMP_LOOP_C_88_tr0, STAGE_VEC_LOOP_C_1_tr0,
      STAGE_MAIN_LOOP_C_5_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_MAIN_LOOP_C_4_tr0;
  input modExp_dev_while_C_11_tr0;
  input STAGE_VEC_LOOP_C_0_tr0;
  input COMP_LOOP_C_16_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_44_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_11_tr0;
  input COMP_LOOP_C_88_tr0;
  input STAGE_VEC_LOOP_C_1_tr0;
  input STAGE_MAIN_LOOP_C_5_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIF_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_MAIN_LOOP_C_0 = 8'd1,
    STAGE_MAIN_LOOP_C_1 = 8'd2,
    STAGE_MAIN_LOOP_C_2 = 8'd3,
    STAGE_MAIN_LOOP_C_3 = 8'd4,
    STAGE_MAIN_LOOP_C_4 = 8'd5,
    modExp_dev_while_C_0 = 8'd6,
    modExp_dev_while_C_1 = 8'd7,
    modExp_dev_while_C_2 = 8'd8,
    modExp_dev_while_C_3 = 8'd9,
    modExp_dev_while_C_4 = 8'd10,
    modExp_dev_while_C_5 = 8'd11,
    modExp_dev_while_C_6 = 8'd12,
    modExp_dev_while_C_7 = 8'd13,
    modExp_dev_while_C_8 = 8'd14,
    modExp_dev_while_C_9 = 8'd15,
    modExp_dev_while_C_10 = 8'd16,
    modExp_dev_while_C_11 = 8'd17,
    STAGE_VEC_LOOP_C_0 = 8'd18,
    COMP_LOOP_C_0 = 8'd19,
    COMP_LOOP_C_1 = 8'd20,
    COMP_LOOP_C_2 = 8'd21,
    COMP_LOOP_C_3 = 8'd22,
    COMP_LOOP_C_4 = 8'd23,
    COMP_LOOP_C_5 = 8'd24,
    COMP_LOOP_C_6 = 8'd25,
    COMP_LOOP_C_7 = 8'd26,
    COMP_LOOP_C_8 = 8'd27,
    COMP_LOOP_C_9 = 8'd28,
    COMP_LOOP_C_10 = 8'd29,
    COMP_LOOP_C_11 = 8'd30,
    COMP_LOOP_C_12 = 8'd31,
    COMP_LOOP_C_13 = 8'd32,
    COMP_LOOP_C_14 = 8'd33,
    COMP_LOOP_C_15 = 8'd34,
    COMP_LOOP_C_16 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd36,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd37,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd38,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd39,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd40,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd41,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd42,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd43,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd44,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd45,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd46,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd47,
    COMP_LOOP_C_17 = 8'd48,
    COMP_LOOP_C_18 = 8'd49,
    COMP_LOOP_C_19 = 8'd50,
    COMP_LOOP_C_20 = 8'd51,
    COMP_LOOP_C_21 = 8'd52,
    COMP_LOOP_C_22 = 8'd53,
    COMP_LOOP_C_23 = 8'd54,
    COMP_LOOP_C_24 = 8'd55,
    COMP_LOOP_C_25 = 8'd56,
    COMP_LOOP_C_26 = 8'd57,
    COMP_LOOP_C_27 = 8'd58,
    COMP_LOOP_C_28 = 8'd59,
    COMP_LOOP_C_29 = 8'd60,
    COMP_LOOP_C_30 = 8'd61,
    COMP_LOOP_C_31 = 8'd62,
    COMP_LOOP_C_32 = 8'd63,
    COMP_LOOP_C_33 = 8'd64,
    COMP_LOOP_C_34 = 8'd65,
    COMP_LOOP_C_35 = 8'd66,
    COMP_LOOP_C_36 = 8'd67,
    COMP_LOOP_C_37 = 8'd68,
    COMP_LOOP_C_38 = 8'd69,
    COMP_LOOP_C_39 = 8'd70,
    COMP_LOOP_C_40 = 8'd71,
    COMP_LOOP_C_41 = 8'd72,
    COMP_LOOP_C_42 = 8'd73,
    COMP_LOOP_C_43 = 8'd74,
    COMP_LOOP_C_44 = 8'd75,
    COMP_LOOP_C_45 = 8'd76,
    COMP_LOOP_C_46 = 8'd77,
    COMP_LOOP_C_47 = 8'd78,
    COMP_LOOP_C_48 = 8'd79,
    COMP_LOOP_C_49 = 8'd80,
    COMP_LOOP_C_50 = 8'd81,
    COMP_LOOP_C_51 = 8'd82,
    COMP_LOOP_C_52 = 8'd83,
    COMP_LOOP_C_53 = 8'd84,
    COMP_LOOP_C_54 = 8'd85,
    COMP_LOOP_C_55 = 8'd86,
    COMP_LOOP_C_56 = 8'd87,
    COMP_LOOP_C_57 = 8'd88,
    COMP_LOOP_C_58 = 8'd89,
    COMP_LOOP_C_59 = 8'd90,
    COMP_LOOP_C_60 = 8'd91,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd92,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd93,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd94,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd95,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd96,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd97,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd98,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd99,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd100,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd101,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd102,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd103,
    COMP_LOOP_C_61 = 8'd104,
    COMP_LOOP_C_62 = 8'd105,
    COMP_LOOP_C_63 = 8'd106,
    COMP_LOOP_C_64 = 8'd107,
    COMP_LOOP_C_65 = 8'd108,
    COMP_LOOP_C_66 = 8'd109,
    COMP_LOOP_C_67 = 8'd110,
    COMP_LOOP_C_68 = 8'd111,
    COMP_LOOP_C_69 = 8'd112,
    COMP_LOOP_C_70 = 8'd113,
    COMP_LOOP_C_71 = 8'd114,
    COMP_LOOP_C_72 = 8'd115,
    COMP_LOOP_C_73 = 8'd116,
    COMP_LOOP_C_74 = 8'd117,
    COMP_LOOP_C_75 = 8'd118,
    COMP_LOOP_C_76 = 8'd119,
    COMP_LOOP_C_77 = 8'd120,
    COMP_LOOP_C_78 = 8'd121,
    COMP_LOOP_C_79 = 8'd122,
    COMP_LOOP_C_80 = 8'd123,
    COMP_LOOP_C_81 = 8'd124,
    COMP_LOOP_C_82 = 8'd125,
    COMP_LOOP_C_83 = 8'd126,
    COMP_LOOP_C_84 = 8'd127,
    COMP_LOOP_C_85 = 8'd128,
    COMP_LOOP_C_86 = 8'd129,
    COMP_LOOP_C_87 = 8'd130,
    COMP_LOOP_C_88 = 8'd131,
    STAGE_VEC_LOOP_C_1 = 8'd132,
    STAGE_MAIN_LOOP_C_5 = 8'd133,
    main_C_1 = 8'd134;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIF_core_core_fsm_1
    case (state_var)
      STAGE_MAIN_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_MAIN_LOOP_C_1;
      end
      STAGE_MAIN_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_MAIN_LOOP_C_2;
      end
      STAGE_MAIN_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_MAIN_LOOP_C_3;
      end
      STAGE_MAIN_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        state_var_NS = STAGE_MAIN_LOOP_C_4;
      end
      STAGE_MAIN_LOOP_C_4 : begin
        fsm_output = 8'b00000101;
        if ( STAGE_MAIN_LOOP_C_4_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00010000;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010001;
        if ( modExp_dev_while_C_11_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      STAGE_VEC_LOOP_C_0 : begin
        fsm_output = 8'b00010010;
        if ( STAGE_VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010011;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_2;
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00010101;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00100010;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00100011;
        if ( COMP_LOOP_C_16_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00100100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00101110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00101111;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_17;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_33;
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_34;
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01000011;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01001011;
        if ( COMP_LOOP_C_44_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_45;
        end
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01010011;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01100111;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_11_tr0 ) begin
          state_var_NS = COMP_LOOP_C_61;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_65;
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_66;
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b01110010;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10000010;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10000011;
        if ( COMP_LOOP_C_88_tr0 ) begin
          state_var_NS = STAGE_VEC_LOOP_C_1;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_VEC_LOOP_C_1 : begin
        fsm_output = 8'b10000100;
        if ( STAGE_VEC_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_MAIN_LOOP_C_5;
        end
        else begin
          state_var_NS = STAGE_VEC_LOOP_C_0;
        end
      end
      STAGE_MAIN_LOOP_C_5 : begin
        fsm_output = 8'b10000101;
        if ( STAGE_MAIN_LOOP_C_5_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_MAIN_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000110;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_MAIN_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core_wait_dp (
  clk, ensig_cgo_iro, modExp_dev_while_rem_cmp_z, ensig_cgo, COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en,
      modExp_dev_while_rem_cmp_z_oreg
);
  input clk;
  input ensig_cgo_iro;
  input [63:0] modExp_dev_while_rem_cmp_z;
  input ensig_cgo;
  output COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  output [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] modExp_dev_while_rem_cmp_z_oreg;



  // Interconnect Declarations for Component Instantiations 
  assign COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
  always @(posedge clk) begin
    modExp_dev_while_rem_cmp_z_oreg <= modExp_dev_while_rem_cmp_z;
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF_core
// ------------------------------------------------------------------


module inPlaceNTT_DIF_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_dat, r_rsc_triosy_lz, vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_q_d, vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, modExp_dev_while_rem_cmp_a,
      modExp_dev_while_rem_cmp_b, modExp_dev_while_rem_cmp_z, vec_rsc_0_0_i_d_d_pff,
      vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff, vec_rsc_0_0_i_we_d_pff,
      vec_rsc_0_1_i_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] modExp_dev_while_rem_cmp_a;
  reg [63:0] modExp_dev_while_rem_cmp_a;
  output [63:0] modExp_dev_while_rem_cmp_b;
  input [63:0] modExp_dev_while_rem_cmp_z;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [8:0] vec_rsc_0_0_i_radr_d_pff;
  output [8:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  wire [63:0] modExp_dev_while_rem_cmp_z_oreg;
  reg [63:0] STAGE_MAIN_LOOP_div_cmp_a;
  reg [9:0] STAGE_MAIN_LOOP_div_cmp_b;
  wire [63:0] STAGE_MAIN_LOOP_div_cmp_z;
  wire [7:0] fsm_output;
  wire [9:0] COMP_LOOP_1_operator_64_false_acc_tmp;
  wire [11:0] nl_COMP_LOOP_1_operator_64_false_acc_tmp;
  wire mux_tmp_4;
  wire nor_tmp;
  wire or_tmp_9;
  wire mux_tmp_43;
  wire and_dcpl_7;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_14;
  wire and_dcpl_15;
  wire and_dcpl_16;
  wire and_dcpl_18;
  wire and_dcpl_19;
  wire and_dcpl_20;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_26;
  wire and_dcpl_27;
  wire and_dcpl_35;
  wire and_dcpl_37;
  wire or_tmp_26;
  wire and_dcpl_39;
  wire or_tmp_29;
  wire or_tmp_30;
  wire or_tmp_39;
  wire or_tmp_43;
  wire and_dcpl_46;
  wire or_tmp_50;
  wire or_tmp_51;
  wire mux_tmp_61;
  wire or_tmp_52;
  wire mux_tmp_64;
  wire and_dcpl_50;
  wire and_dcpl_51;
  wire and_dcpl_53;
  wire xor_dcpl;
  wire and_dcpl_60;
  wire mux_tmp_75;
  wire or_tmp_58;
  wire and_dcpl_63;
  wire or_tmp_62;
  wire mux_tmp_79;
  wire or_tmp_64;
  wire mux_tmp_85;
  wire mux_tmp_89;
  wire and_dcpl_65;
  wire and_dcpl_70;
  wire and_dcpl_71;
  wire and_dcpl_72;
  wire mux_tmp_92;
  wire and_dcpl_73;
  wire mux_tmp_94;
  wire nor_tmp_18;
  wire mux_tmp_110;
  wire mux_tmp_111;
  wire and_dcpl_88;
  wire and_dcpl_94;
  wire or_dcpl_17;
  wire mux_tmp_127;
  reg exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  reg operator_64_false_1_slc_operator_64_false_1_acc_8_itm;
  reg [9:0] STAGE_VEC_LOOP_j_sva_9_0;
  reg [9:0] operator_64_false_acc_cse_sva;
  wire [10:0] nl_operator_64_false_acc_cse_sva;
  reg [9:0] operator_64_false_acc_cse_1_sva;
  reg [9:0] COMP_LOOP_acc_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_cse_sva;
  reg [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva;
  reg reg_vec_rsc_triosy_0_1_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire and_121_cse;
  wire and_109_cse;
  wire or_1_cse;
  wire or_71_cse;
  wire mux_11_cse;
  wire or_70_cse;
  wire or_76_cse;
  reg [7:0] COMP_LOOP_k_9_1_sva_7_0;
  reg [63:0] tmp_1_lpi_4_dfm;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] COMP_LOOP_1_modExp_dev_1_while_mul_mut;
  reg [63:0] p_sva;
  wire mux_81_itm;
  wire and_dcpl_113;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  wire and_dcpl_120;
  wire and_dcpl_125;
  wire and_dcpl_128;
  wire and_dcpl_130;
  wire and_dcpl_133;
  wire and_dcpl_136;
  wire and_dcpl_138;
  wire and_dcpl_142;
  wire and_dcpl_149;
  wire and_dcpl_153;
  wire and_dcpl_160;
  wire and_dcpl_165;
  wire and_dcpl_169;
  wire [63:0] z_out_2;
  wire and_dcpl_184;
  wire [63:0] z_out_3;
  wire [127:0] nl_z_out_3;
  wire [4:0] z_out_4;
  wire [5:0] nl_z_out_4;
  wire and_dcpl_207;
  wire [9:0] z_out_5;
  wire [10:0] nl_z_out_5;
  reg [63:0] r_sva;
  reg [3:0] STAGE_MAIN_LOOP_acc_1_psp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg modExp_dev_exp_1_sva_0;
  wire [9:0] STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
  wire COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4;
  wire STAGE_VEC_LOOP_j_sva_9_0_mx0c1;
  wire exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2;
  wire tmp_1_lpi_4_dfm_mx0c1;
  wire and_85_rgt;
  wire operator_64_false_or_2_cse;
  wire mux_cse;
  wire and_182_cse;
  wire or_tmp_115;
  wire mux_tmp_158;
  wire [8:0] COMP_LOOP_COMP_LOOP_mux_rgt;
  reg COMP_LOOP_acc_psp_sva_8;
  reg [7:0] COMP_LOOP_acc_psp_sva_7_0;
  wire or_162_cse;
  wire operator_64_false_nor_3_itm;
  wire [56:0] z_out_1_64_8;

  wire[0:0] mux_80_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] or_59_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] nor_52_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] mux_95_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] nor_34_nl;
  wire[0:0] and_86_nl;
  wire[0:0] and_90_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] or_95_nl;
  wire[0:0] and_91_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] nand_8_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] nor_nl;
  wire[0:0] nor_84_nl;
  wire[7:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] nor_50_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] and_244_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] nor_82_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] or_165_nl;
  wire[0:0] or_166_nl;
  wire[0:0] or_167_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] nor_31_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] nor_29_nl;
  wire[0:0] nor_30_nl;
  wire[0:0] COMP_LOOP_mux_9_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] not_320_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] or_163_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] and_248_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] or_161_nl;
  wire[0:0] nor_44_nl;
  wire[0:0] or_26_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] or_54_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_58_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] or_15_nl;
  wire[0:0] or_72_nl;
  wire[0:0] or_73_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] or_20_nl;
  wire[0:0] or_23_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] nor_27_nl;
  wire[0:0] and_127_nl;
  wire[0:0] and_13_nl;
  wire[0:0] and_17_nl;
  wire[0:0] and_21_nl;
  wire[0:0] and_22_nl;
  wire[0:0] and_28_nl;
  wire[0:0] and_29_nl;
  wire[0:0] and_32_nl;
  wire[0:0] and_36_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] or_32_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] or_29_nl;
  wire[0:0] or_28_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] and_117_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] nor_40_nl;
  wire[0:0] nor_41_nl;
  wire[0:0] nor_42_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] or_36_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] nand_6_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] or_42_nl;
  wire[0:0] or_41_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] and_116_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] nor_37_nl;
  wire[0:0] and_nl;
  wire[0:0] nor_39_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] or_47_nl;
  wire[0:0] and_240_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] or_nl;
  wire[0:0] or_145_nl;
  wire[0:0] or_156_nl;
  wire[0:0] or_155_nl;
  wire[9:0] COMP_LOOP_mux_10_nl;
  wire[9:0] COMP_LOOP_mux_11_nl;
  wire[65:0] acc_1_nl;
  wire[66:0] nl_acc_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_2_nl;
  wire[54:0] operator_64_false_operator_64_false_nand_1_nl;
  wire[54:0] operator_64_false_operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_nor_6_nl;
  wire[8:0] operator_64_false_mux1h_3_nl;
  wire[0:0] operator_64_false_or_6_nl;
  wire[0:0] operator_64_false_or_7_nl;
  wire[0:0] operator_64_false_or_8_nl;
  wire[0:0] operator_64_false_operator_64_false_and_2_nl;
  wire[7:0] operator_64_false_operator_64_false_and_3_nl;
  wire[7:0] operator_64_false_mux_1_nl;
  wire[0:0] operator_64_false_operator_64_false_or_3_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] operator_64_false_mux1h_3_nl_1;
  wire[0:0] operator_64_false_or_5_nl;
  wire[0:0] operator_64_false_and_4_nl;
  wire[0:0] operator_64_false_and_5_nl;
  wire[0:0] operator_64_false_or_6_nl_1;
  wire[63:0] operator_64_false_or_7_nl_1;
  wire[63:0] operator_64_false_mux1h_4_nl;
  wire[0:0] operator_64_false_and_6_nl;
  wire[0:0] operator_64_false_and_7_nl;
  wire[0:0] operator_64_false_or_8_nl_1;
  wire[63:0] modExp_dev_while_mux_1_nl;
  wire[0:0] modExp_dev_while_or_2_nl;
  wire[63:0] modExp_dev_while_mux1h_3_nl;
  wire[0:0] and_250_nl;
  wire[8:0] COMP_LOOP_mux_12_nl;
  wire[8:0] COMP_LOOP_mux_13_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[0:0] and_58_nl;
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign and_58_nl = (fsm_output[5:4]==2'b11) & xor_dcpl & and_dcpl_51;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(z_out_2, z_out_3,
      and_58_nl);
  wire [63:0] nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_87_nl;
  wire[0:0] nor_35_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] or_65_nl;
  wire[0:0] and_114_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] nand_5_nl;
  wire[0:0] mux_83_nl;
  wire [0:0] nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign or_65_nl = (fsm_output[6:4]!=3'b011);
  assign mux_86_nl = MUX_s_1_2_2(or_65_nl, or_tmp_58, fsm_output[3]);
  assign nor_35_nl = ~((fsm_output[0]) | mux_86_nl);
  assign nand_5_nl = ~((fsm_output[4]) & mux_tmp_75);
  assign mux_83_nl = MUX_s_1_2_2(or_1_cse, or_162_cse, fsm_output[4]);
  assign mux_85_nl = MUX_s_1_2_2(nand_5_nl, mux_83_nl, fsm_output[3]);
  assign and_114_nl = (fsm_output[0]) & (~ mux_85_nl);
  assign mux_87_nl = MUX_s_1_2_2(nor_35_nl, and_114_nl, fsm_output[2]);
  assign nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = mux_87_nl & and_dcpl_60;
  wire [3:0] nl_STAGE_MAIN_LOOP_lshift_rg_s;
  assign nl_STAGE_MAIN_LOOP_lshift_rg_s = z_out_4[3:0];
  wire [0:0] nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro = ~ mux_81_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0 = ~ (z_out_1_64_8[56]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0 = ~ (z_out_1_64_8[55]);
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0 = ~ operator_64_false_1_slc_operator_64_false_1_acc_8_itm;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0 = ~ exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0 = z_out[10];
  wire [0:0] nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0;
  assign nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0 = z_out_4[4];
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  COMP_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(COMP_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_div #(.width_a(32'sd64),
  .width_b(32'sd10),
  .signd(32'sd0)) STAGE_MAIN_LOOP_div_cmp (
      .a(STAGE_MAIN_LOOP_div_cmp_a),
      .b(STAGE_MAIN_LOOP_div_cmp_b),
      .z(STAGE_MAIN_LOOP_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_MAIN_LOOP_lshift_rg (
      .a(1'b1),
      .s(nl_STAGE_MAIN_LOOP_lshift_rg_s[3:0]),
      .z(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0)
    );
  inPlaceNTT_DIF_core_wait_dp inPlaceNTT_DIF_core_wait_dp_inst (
      .clk(clk),
      .ensig_cgo_iro(nl_inPlaceNTT_DIF_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .ensig_cgo(reg_ensig_cgo_cse),
      .COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en(COMP_LOOP_1_modulo_dev_cmp_ccs_ccore_en),
      .modExp_dev_while_rem_cmp_z_oreg(modExp_dev_while_rem_cmp_z_oreg)
    );
  inPlaceNTT_DIF_core_core_fsm inPlaceNTT_DIF_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_MAIN_LOOP_C_4_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_4_tr0[0:0]),
      .modExp_dev_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_0_tr0[0:0]),
      .COMP_LOOP_C_16_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_16_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_44_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_COMP_LOOP_C_44_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_11_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_88_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .STAGE_VEC_LOOP_C_1_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_VEC_LOOP_C_1_tr0[0:0]),
      .STAGE_MAIN_LOOP_C_5_tr0(nl_inPlaceNTT_DIF_core_core_fsm_inst_STAGE_MAIN_LOOP_C_5_tr0[0:0])
    );
  assign mux_76_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[5]);
  assign mux_77_nl = MUX_s_1_2_2(mux_76_nl, or_tmp_52, fsm_output[4]);
  assign mux_78_nl = MUX_s_1_2_2(mux_77_nl, or_tmp_51, fsm_output[3]);
  assign or_59_nl = (~((fsm_output[5:3]!=3'b100))) | (fsm_output[7]);
  assign mux_79_nl = MUX_s_1_2_2(mux_78_nl, or_59_nl, fsm_output[6]);
  assign mux_75_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_61, fsm_output[0]);
  assign mux_80_nl = MUX_s_1_2_2(mux_79_nl, mux_75_nl, fsm_output[2]);
  assign mux_74_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_61, fsm_output[2]);
  assign mux_81_itm = MUX_s_1_2_2(mux_80_nl, mux_74_nl, fsm_output[1]);
  assign or_71_cse = (fsm_output[6:4]!=3'b010);
  assign or_70_cse = (fsm_output[5:4]!=2'b10);
  assign modExp_dev_while_rem_cmp_b = reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  assign operator_64_false_or_2_cse = and_dcpl_63 | and_dcpl_65;
  assign and_85_rgt = and_dcpl_12 & and_dcpl_71;
  assign mux_11_cse = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[4]);
  assign and_121_cse = (fsm_output[1:0]==2'b11);
  assign and_109_cse = (fsm_output[4:3]==2'b11);
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_2[8:1]),
      and_dcpl_65);
  assign mux_137_nl = MUX_s_1_2_2(mux_tmp_94, mux_tmp_127, and_121_cse);
  assign mux_138_nl = MUX_s_1_2_2(mux_137_nl, mux_tmp_127, fsm_output[2]);
  assign nor_50_nl = ~(mux_138_nl | (fsm_output[7]));
  assign COMP_LOOP_COMP_LOOP_mux_rgt = MUX_v_9_2_2((z_out[8:0]), ({1'b0 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      nor_50_nl);
  assign or_162_cse = (fsm_output[6:5]!=2'b01);
  assign nl_COMP_LOOP_1_operator_64_false_acc_tmp = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b0}) + conv_u2u_9_10(STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]);
  assign COMP_LOOP_1_operator_64_false_acc_tmp = nl_COMP_LOOP_1_operator_64_false_acc_tmp[9:0];
  assign or_1_cse = (fsm_output[6:5]!=2'b10);
  assign mux_tmp_4 = MUX_s_1_2_2((~ (fsm_output[5])), or_1_cse, fsm_output[4]);
  assign nor_tmp = (fsm_output[6:5]==2'b11);
  assign or_tmp_9 = (fsm_output[6:1]!=6'b000000);
  assign nor_44_nl = ~((fsm_output[6:0]!=7'b0000000));
  assign or_26_nl = ((fsm_output[2:1]==2'b11)) | (fsm_output[6:3]!=4'b0000);
  assign mux_tmp_43 = MUX_s_1_2_2(nor_44_nl, or_26_nl, fsm_output[7]);
  assign and_dcpl_7 = ~((fsm_output[2]) | (fsm_output[7]));
  assign and_dcpl_9 = and_121_cse & and_dcpl_7;
  assign and_dcpl_10 = (fsm_output[4:3]==2'b10);
  assign and_dcpl_11 = ~((fsm_output[6:5]!=2'b00));
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_10;
  assign and_dcpl_14 = (fsm_output[2]) & (~ (fsm_output[7]));
  assign and_dcpl_15 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_16 = and_dcpl_15 & and_dcpl_14;
  assign and_dcpl_18 = (fsm_output[4:3]==2'b01);
  assign and_dcpl_19 = (fsm_output[6:5]==2'b10);
  assign and_dcpl_20 = and_dcpl_19 & and_dcpl_18;
  assign and_dcpl_23 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_24 = and_dcpl_23 & and_dcpl_7;
  assign and_dcpl_25 = ~((fsm_output[4:3]!=2'b00));
  assign and_dcpl_26 = (fsm_output[6:5]==2'b01);
  assign and_dcpl_27 = and_dcpl_26 & and_dcpl_25;
  assign and_dcpl_35 = and_dcpl_11 & and_dcpl_25;
  assign and_dcpl_37 = and_dcpl_23 & (~ (fsm_output[2]));
  assign or_tmp_26 = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6:4]!=3'b010);
  assign and_dcpl_39 = ~((fsm_output[5]) | (fsm_output[7]));
  assign or_tmp_29 = (fsm_output[3]) | (STAGE_VEC_LOOP_j_sva_9_0[0]) | (~ (fsm_output[4]))
      | (fsm_output[6]);
  assign or_tmp_30 = (fsm_output[4]) | (~ (fsm_output[6]));
  assign or_tmp_39 = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (fsm_output[6:4]!=3'b010);
  assign or_tmp_43 = (fsm_output[3]) | (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (~ (fsm_output[4]))
      | (fsm_output[6]);
  assign and_dcpl_46 = (~ (fsm_output[3])) & (fsm_output[0]);
  assign or_tmp_50 = (~((fsm_output[5:4]!=2'b10))) | (fsm_output[7]);
  assign or_tmp_51 = (~ (fsm_output[4])) | (fsm_output[7]);
  assign or_54_nl = (~((fsm_output[5:4]!=2'b01))) | (fsm_output[7]);
  assign mux_69_nl = MUX_s_1_2_2(or_tmp_50, or_54_nl, fsm_output[3]);
  assign mux_tmp_61 = MUX_s_1_2_2(or_tmp_51, mux_69_nl, fsm_output[6]);
  assign or_tmp_52 = (~ (fsm_output[5])) | (fsm_output[7]);
  assign or_58_nl = (~ (fsm_output[4])) | (~ (fsm_output[5])) | (fsm_output[7]);
  assign mux_72_nl = MUX_s_1_2_2(or_58_nl, or_tmp_51, fsm_output[3]);
  assign mux_71_nl = MUX_s_1_2_2(or_tmp_50, or_tmp_52, fsm_output[3]);
  assign mux_tmp_64 = MUX_s_1_2_2(mux_72_nl, mux_71_nl, fsm_output[6]);
  assign and_dcpl_50 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_51 = and_dcpl_50 & and_dcpl_14;
  assign and_dcpl_53 = and_dcpl_15 & and_dcpl_7;
  assign xor_dcpl = (fsm_output[6]) ^ (fsm_output[3]);
  assign and_dcpl_60 = ~((fsm_output[1]) | (fsm_output[7]));
  assign mux_tmp_75 = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[6]);
  assign or_tmp_58 = (fsm_output[4]) | (~ nor_tmp);
  assign and_dcpl_63 = and_dcpl_35 & and_dcpl_23 & and_dcpl_14;
  assign or_tmp_62 = (fsm_output[5:4]!=2'b01);
  assign or_15_nl = (fsm_output[5:4]!=2'b00);
  assign mux_tmp_79 = MUX_s_1_2_2(or_15_nl, or_tmp_62, fsm_output[6]);
  assign or_tmp_64 = (fsm_output[6]) | (fsm_output[4]);
  assign or_72_nl = (fsm_output[6:4]!=3'b110);
  assign mux_tmp_85 = MUX_s_1_2_2(or_72_nl, or_tmp_64, fsm_output[3]);
  assign or_73_nl = (fsm_output[6:4]!=3'b101);
  assign mux_tmp_89 = MUX_s_1_2_2(or_71_cse, or_73_nl, fsm_output[3]);
  assign and_dcpl_65 = (~ mux_tmp_89) & and_dcpl_16;
  assign or_76_cse = (fsm_output[1:0]!=2'b00);
  assign mux_99_nl = MUX_s_1_2_2((~ (fsm_output[1])), or_76_cse, fsm_output[2]);
  assign and_dcpl_70 = ~(mux_99_nl | (fsm_output[7:3]!=5'b00000));
  assign and_dcpl_71 = and_dcpl_50 & and_dcpl_7;
  assign and_dcpl_72 = and_dcpl_35 & and_dcpl_71;
  assign or_20_nl = (fsm_output[6:3]!=4'b0000);
  assign or_23_nl = (fsm_output[1]) | (fsm_output[0]) | (fsm_output[3]) | (fsm_output[4])
      | (fsm_output[5]) | (fsm_output[6]);
  assign mux_tmp_92 = MUX_s_1_2_2(or_20_nl, or_23_nl, fsm_output[2]);
  assign and_dcpl_73 = (~ mux_tmp_89) & and_dcpl_9;
  assign mux_tmp_94 = MUX_s_1_2_2(or_tmp_58, or_71_cse, fsm_output[3]);
  assign nor_tmp_18 = or_tmp_64 & (fsm_output[5]);
  assign mux_tmp_110 = MUX_s_1_2_2((fsm_output[6]), (fsm_output[5]), fsm_output[4]);
  assign mux_tmp_111 = MUX_s_1_2_2(mux_tmp_4, mux_tmp_110, fsm_output[3]);
  assign and_dcpl_88 = (~ (fsm_output[5])) & (~ (fsm_output[1])) & and_dcpl_14;
  assign and_dcpl_94 = nor_tmp & and_dcpl_18 & and_dcpl_53;
  assign or_dcpl_17 = (fsm_output!=8'b00010011);
  assign mux_135_nl = MUX_s_1_2_2(or_162_cse, or_1_cse, fsm_output[4]);
  assign mux_tmp_127 = MUX_s_1_2_2(or_70_cse, mux_135_nl, fsm_output[3]);
  assign COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4 = (fsm_output[5:4]==2'b10)
      & xor_dcpl & and_121_cse & and_dcpl_14;
  assign STAGE_VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_35 & and_dcpl_15 & (fsm_output[2])
      & (fsm_output[7]);
  assign exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2 = and_dcpl_26 & and_dcpl_10
      & and_dcpl_53;
  assign nor_27_nl = ~((~ (operator_64_false_acc_cse_1_sva[0])) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[6]));
  assign and_127_nl = (operator_64_false_acc_cse_sva[0]) & (fsm_output[3]) & (~ (fsm_output[4]))
      & (fsm_output[6]);
  assign mux_152_nl = MUX_s_1_2_2(nor_27_nl, and_127_nl, fsm_output[0]);
  assign tmp_1_lpi_4_dfm_mx0c1 = mux_152_nl & and_dcpl_88;
  assign vec_rsc_0_0_i_d_d_pff = COMP_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign and_13_nl = and_dcpl_12 & and_dcpl_9;
  assign and_17_nl = and_dcpl_12 & and_dcpl_16;
  assign and_21_nl = and_dcpl_20 & and_dcpl_9;
  assign and_22_nl = and_dcpl_20 & and_dcpl_16;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_9_4_2((COMP_LOOP_1_operator_64_false_acc_tmp[9:1]),
      ({COMP_LOOP_acc_psp_sva_8 , COMP_LOOP_acc_psp_sva_7_0}), (COMP_LOOP_acc_cse_sva[9:1]),
      (operator_64_false_acc_cse_sva[9:1]), {and_13_nl , and_17_nl , and_21_nl ,
      and_22_nl});
  assign and_28_nl = and_dcpl_27 & and_dcpl_24;
  assign and_29_nl = and_dcpl_20 & and_dcpl_24;
  assign and_32_nl = and_dcpl_19 & (fsm_output[4:3]==2'b11) & and_dcpl_24;
  assign and_36_nl = and_dcpl_35 & and_dcpl_23 & (~ (fsm_output[2])) & (fsm_output[7]);
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_9_4_2(({COMP_LOOP_acc_psp_sva_8 , COMP_LOOP_acc_psp_sva_7_0}),
      (operator_64_false_acc_cse_1_sva[9:1]), (COMP_LOOP_acc_cse_sva[9:1]), (operator_64_false_acc_cse_sva[9:1]),
      {and_28_nl , and_29_nl , and_32_nl , and_36_nl});
  assign or_32_nl = ((COMP_LOOP_acc_cse_sva[0]) & (fsm_output[4])) | (fsm_output[6:5]!=2'b10);
  assign mux_54_nl = MUX_s_1_2_2(or_tmp_26, or_32_nl, fsm_output[3]);
  assign or_29_nl = (COMP_LOOP_acc_cse_sva[0]) | (fsm_output[6:4]!=3'b101);
  assign mux_53_nl = MUX_s_1_2_2(or_tmp_26, or_29_nl, fsm_output[3]);
  assign mux_55_nl = MUX_s_1_2_2(mux_54_nl, mux_53_nl, operator_64_false_acc_cse_1_sva[0]);
  assign or_28_nl = (operator_64_false_acc_cse_sva[0]) | (fsm_output[6:3]!=4'b0000);
  assign mux_56_nl = MUX_s_1_2_2(mux_55_nl, or_28_nl, fsm_output[7]);
  assign vec_rsc_0_0_i_we_d_pff = (~ mux_56_nl) & and_dcpl_37;
  assign nor_40_nl = ~((COMP_LOOP_1_operator_64_false_acc_tmp[0]) | (~ (fsm_output[4]))
      | (fsm_output[6]));
  assign nor_41_nl = ~((~ exit_COMP_LOOP_1_modExp_dev_1_while_sva) | (COMP_LOOP_acc_cse_sva[0])
      | (fsm_output[4]) | (~ (fsm_output[6])));
  assign mux_59_nl = MUX_s_1_2_2(nor_40_nl, nor_41_nl, fsm_output[3]);
  assign and_117_nl = (fsm_output[1:0]==2'b11) & mux_59_nl;
  assign or_36_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign mux_57_nl = MUX_s_1_2_2(or_36_nl, or_tmp_30, fsm_output[3]);
  assign mux_58_nl = MUX_s_1_2_2(mux_57_nl, or_tmp_29, operator_64_false_acc_cse_sva[0]);
  assign nor_42_nl = ~((fsm_output[1:0]!=2'b00) | mux_58_nl);
  assign mux_60_nl = MUX_s_1_2_2(and_117_nl, nor_42_nl, fsm_output[2]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = mux_60_nl & and_dcpl_39;
  assign nand_6_nl = ~((COMP_LOOP_acc_cse_sva[0]) & (fsm_output[6:4]==3'b101));
  assign mux_62_nl = MUX_s_1_2_2(or_tmp_39, nand_6_nl, fsm_output[3]);
  assign or_42_nl = (~((COMP_LOOP_acc_cse_sva[0]) | (~ (fsm_output[4])))) | (fsm_output[6:5]!=2'b10);
  assign mux_61_nl = MUX_s_1_2_2(or_tmp_39, or_42_nl, fsm_output[3]);
  assign mux_63_nl = MUX_s_1_2_2(mux_62_nl, mux_61_nl, operator_64_false_acc_cse_1_sva[0]);
  assign or_41_nl = (~ (operator_64_false_acc_cse_sva[0])) | (fsm_output[6:3]!=4'b0000);
  assign mux_64_nl = MUX_s_1_2_2(mux_63_nl, or_41_nl, fsm_output[7]);
  assign vec_rsc_0_1_i_we_d_pff = (~ mux_64_nl) & and_dcpl_37;
  assign nor_37_nl = ~((~ (COMP_LOOP_1_operator_64_false_acc_tmp[0])) | (~ (fsm_output[4]))
      | (fsm_output[6]));
  assign and_nl = exit_COMP_LOOP_1_modExp_dev_1_while_sva & (COMP_LOOP_acc_cse_sva[0])
      & (~ (fsm_output[4])) & (fsm_output[6]);
  assign mux_67_nl = MUX_s_1_2_2(nor_37_nl, and_nl, fsm_output[3]);
  assign and_116_nl = (fsm_output[1:0]==2'b11) & mux_67_nl;
  assign or_47_nl = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) | (~ (fsm_output[4])) | (fsm_output[6]);
  assign mux_65_nl = MUX_s_1_2_2(or_47_nl, or_tmp_30, fsm_output[3]);
  assign mux_66_nl = MUX_s_1_2_2(or_tmp_43, mux_65_nl, operator_64_false_acc_cse_sva[0]);
  assign nor_39_nl = ~((fsm_output[1:0]!=2'b00) | mux_66_nl);
  assign mux_68_nl = MUX_s_1_2_2(and_116_nl, nor_39_nl, fsm_output[2]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = mux_68_nl & and_dcpl_39;
  assign and_dcpl_113 = (fsm_output[7]) & (fsm_output[2]) & and_dcpl_15 & (fsm_output[4:3]==2'b00)
      & and_dcpl_11;
  assign and_dcpl_120 = and_dcpl_53 & and_dcpl_10 & (fsm_output[6:5]==2'b01);
  assign and_dcpl_125 = and_dcpl_7 & (fsm_output[1:0]==2'b11) & and_dcpl_12;
  assign and_240_nl = (fsm_output[6]) & (fsm_output[4]) & (fsm_output[3]);
  assign nor_68_nl = ~((fsm_output[6]) | (fsm_output[4]) | (fsm_output[3]));
  assign mux_cse = MUX_s_1_2_2(and_240_nl, nor_68_nl, fsm_output[5]);
  assign and_dcpl_128 = mux_cse & and_dcpl_14 & and_dcpl_15;
  assign and_dcpl_130 = (fsm_output[4:3]==2'b00) & and_dcpl_11;
  assign and_dcpl_133 = and_dcpl_14 & (fsm_output[1:0]==2'b01) & and_dcpl_130;
  assign and_dcpl_136 = and_dcpl_14 & and_dcpl_23 & and_dcpl_130;
  assign and_dcpl_138 = and_dcpl_7 & and_dcpl_23 & and_dcpl_12;
  assign and_dcpl_142 = and_dcpl_53 & (fsm_output[6:3]==4'b1101);
  assign and_dcpl_149 = (~ (fsm_output[7])) & (~ (fsm_output[2])) & and_dcpl_50 &
      and_dcpl_130;
  assign and_dcpl_153 = and_dcpl_14 & (fsm_output[1:0]==2'b10) & and_dcpl_130;
  assign and_182_cse = mux_cse & and_dcpl_14 & (fsm_output[1:0]==2'b00);
  assign and_dcpl_160 = and_dcpl_51 & (fsm_output[4:3]==2'b10) & and_dcpl_11;
  assign or_nl = (fsm_output[4:3]!=2'b10);
  assign or_145_nl = (fsm_output[4:3]!=2'b01);
  assign mux_160_nl = MUX_s_1_2_2(or_nl, or_145_nl, fsm_output[6]);
  assign and_dcpl_165 = ~(mux_160_nl | (fsm_output[7]) | (fsm_output[2]) | (fsm_output[1])
      | (fsm_output[0]) | (~ (fsm_output[5])));
  assign and_dcpl_169 = and_dcpl_51 & (fsm_output[6:3]==4'b1001);
  assign and_dcpl_184 = and_dcpl_14 & xor_dcpl & (~ (fsm_output[1])) & (fsm_output[0])
      & (fsm_output[4]) & (fsm_output[5]);
  assign and_dcpl_207 = and_dcpl_7 & and_dcpl_15 & (fsm_output[6:3]==4'b1101);
  assign or_tmp_115 = and_121_cse | (fsm_output[2]);
  assign or_156_nl = (fsm_output[2:1]!=2'b10);
  assign or_155_nl = (fsm_output[2:1]!=2'b01);
  assign mux_tmp_158 = MUX_s_1_2_2(or_156_nl, or_155_nl, fsm_output[0]);
  assign operator_64_false_nor_3_itm = ~(and_dcpl_125 | and_dcpl_128 | and_dcpl_133
      | and_dcpl_136 | and_dcpl_138);
  always @(posedge clk) begin
    if ( mux_tmp_43 ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_11 & (~ (fsm_output[4])) & and_dcpl_46
          & (~ (fsm_output[1])) & (fsm_output[2]) & (fsm_output[7]) & (z_out_4[4]);
      reg_ensig_cgo_cse <= ~ mux_81_itm;
    end
  end
  always @(posedge clk) begin
    reg_COMP_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    modExp_dev_while_rem_cmp_a <= MUX_v_64_2_2(z_out_3, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        nor_52_nl);
    STAGE_MAIN_LOOP_div_cmp_a <= MUX_v_64_2_2(z_out_2, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
        and_dcpl_70);
    STAGE_MAIN_LOOP_div_cmp_b <= MUX_v_10_2_2(STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0,
        STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_70);
    modExp_dev_exp_1_sva_0 <= (COMP_LOOP_mux_9_nl & (~(and_dcpl_27 & and_dcpl_9)))
        | mux_158_nl | (fsm_output[7]);
  end
  always @(posedge clk) begin
    if ( mux_tmp_43 | and_dcpl_72 ) begin
      STAGE_MAIN_LOOP_acc_1_psp_sva <= MUX_v_4_2_2(4'b1010, (z_out_4[3:0]), and_dcpl_72);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2((~ or_tmp_9), mux_tmp_92, fsm_output[7]) ) begin
      STAGE_MAIN_LOOP_lshift_psp_1_sva <= STAGE_MAIN_LOOP_lshift_psp_1_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_72 | and_dcpl_63 | and_dcpl_73 | and_dcpl_65 | COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4
        ) begin
      COMP_LOOP_1_modExp_dev_1_while_mul_mut <= MUX1HOT_v_64_4_2(z_out_2, z_out_3,
          64'b0000000000000000000000000000000000000000000000000000000000000001, modExp_dev_while_rem_cmp_z_oreg,
          {and_dcpl_72 , operator_64_false_or_2_cse , and_dcpl_73 , COMP_LOOP_1_modExp_dev_1_while_mul_mut_mx0c4});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (and_dcpl_11 & ((fsm_output[4]) ^ (fsm_output[2])) & and_dcpl_46 &
        and_dcpl_60) | STAGE_VEC_LOOP_j_sva_9_0_mx0c1 ) begin
      STAGE_VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (z_out[9:0]), STAGE_VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_110_nl | and_85_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modExp_dev_while_rem_cmp_z_oreg, and_85_rgt);
    end
  end
  always @(posedge clk) begin
    if ( mux_125_nl | (fsm_output[7]) ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_4_2(STAGE_MAIN_LOOP_div_cmp_z, z_out_2, vec_rsc_0_0_i_q_d,
          vec_rsc_0_1_i_q_d, {and_86_nl , and_dcpl_63 , and_90_nl , and_91_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_63 | and_dcpl_65 | exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2
        | and_dcpl_94 ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= MUX1HOT_s_1_3_2((~ (z_out_1_64_8[56])),
          (z_out_1_64_8[55]), (~ (z_out_1_64_8[55])), {operator_64_false_or_2_cse
          , exit_COMP_LOOP_1_modExp_dev_1_while_sva_mx0c2 , and_dcpl_94});
    end
  end
  always @(posedge clk) begin
    if ( mux_162_nl & (~((fsm_output[2]) | (fsm_output[7]) | (fsm_output[0]))) )
        begin
      COMP_LOOP_k_9_1_sva_7_0 <= MUX_v_8_2_2(8'b00000000, (z_out_5[7:0]), nand_9_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_1_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_17 ) begin
      operator_64_false_acc_cse_1_sva <= COMP_LOOP_1_operator_64_false_acc_tmp;
    end
  end
  always @(posedge clk) begin
    if ( mux_166_nl & (~ (fsm_output[7])) ) begin
      COMP_LOOP_acc_psp_sva_8 <= COMP_LOOP_COMP_LOOP_mux_rgt[8];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_169_nl | (fsm_output[7])) ) begin
      COMP_LOOP_acc_psp_sva_7_0 <= COMP_LOOP_COMP_LOOP_mux_rgt[7:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_17 ) begin
      operator_64_false_1_slc_operator_64_false_1_acc_8_itm <= z_out_1_64_8[0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_cse_sva <= 10'b0000000000;
    end
    else if ( mux_149_nl | (fsm_output[7]) ) begin
      COMP_LOOP_acc_cse_sva <= nl_COMP_LOOP_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_64_false_acc_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(nor_31_nl, or_tmp_9, fsm_output[7]) ) begin
      operator_64_false_acc_cse_sva <= nl_operator_64_false_acc_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( (mux_151_nl & and_dcpl_88) | tmp_1_lpi_4_dfm_mx0c1 ) begin
      tmp_1_lpi_4_dfm <= MUX_v_64_2_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, tmp_1_lpi_4_dfm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_172_nl | (fsm_output[7]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_2[63:9]), not_320_nl);
    end
  end
  assign mux_93_nl = MUX_s_1_2_2(or_71_cse, mux_tmp_79, fsm_output[3]);
  assign mux_95_nl = MUX_s_1_2_2(mux_tmp_85, mux_93_nl, fsm_output[1]);
  assign mux_90_nl = MUX_s_1_2_2((fsm_output[4]), or_tmp_62, fsm_output[6]);
  assign mux_91_nl = MUX_s_1_2_2(or_70_cse, mux_90_nl, fsm_output[3]);
  assign mux_89_nl = MUX_s_1_2_2(or_tmp_64, mux_tmp_79, fsm_output[3]);
  assign mux_92_nl = MUX_s_1_2_2(mux_91_nl, mux_89_nl, fsm_output[1]);
  assign mux_96_nl = MUX_s_1_2_2(mux_95_nl, mux_92_nl, fsm_output[0]);
  assign mux_97_nl = MUX_s_1_2_2(mux_tmp_85, mux_96_nl, fsm_output[2]);
  assign nor_52_nl = ~(mux_97_nl | (fsm_output[7]));
  assign mux_154_nl = MUX_s_1_2_2(mux_tmp_94, mux_tmp_127, or_76_cse);
  assign mux_155_nl = MUX_s_1_2_2(mux_tmp_94, mux_154_nl, fsm_output[2]);
  assign COMP_LOOP_mux_9_nl = MUX_s_1_2_2(modExp_dev_exp_1_sva_0, (z_out_2[0]), mux_155_nl);
  assign mux_156_nl = MUX_s_1_2_2(or_70_cse, or_71_cse, fsm_output[3]);
  assign mux_157_nl = MUX_s_1_2_2(mux_tmp_94, mux_156_nl, and_121_cse);
  assign mux_158_nl = MUX_s_1_2_2(mux_157_nl, mux_tmp_127, fsm_output[2]);
  assign nor_34_nl = ~((((fsm_output[3:0]!=4'b0000)) & (fsm_output[4])) | (fsm_output[6:5]!=2'b00));
  assign mux_110_nl = MUX_s_1_2_2(nor_34_nl, mux_tmp_92, fsm_output[7]);
  assign and_86_nl = and_dcpl_35 & and_dcpl_51;
  assign or_95_nl = (~ (fsm_output[3])) | (COMP_LOOP_acc_cse_sva[0]) | (fsm_output[4])
      | (~ (fsm_output[6]));
  assign mux_126_nl = MUX_s_1_2_2(or_95_nl, or_tmp_29, fsm_output[0]);
  assign and_90_nl = (~ mux_126_nl) & and_dcpl_88;
  assign nand_8_nl = ~((fsm_output[3]) & (COMP_LOOP_acc_cse_sva[0]) & (~ (fsm_output[4]))
      & (fsm_output[6]));
  assign mux_127_nl = MUX_s_1_2_2(nand_8_nl, or_tmp_43, fsm_output[0]);
  assign and_91_nl = (~ mux_127_nl) & and_dcpl_88;
  assign mux_123_nl = MUX_s_1_2_2(mux_11_cse, mux_tmp_110, fsm_output[3]);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, mux_tmp_111, fsm_output[1]);
  assign mux_118_nl = MUX_s_1_2_2(mux_tmp_4, nor_tmp_18, fsm_output[3]);
  assign mux_121_nl = MUX_s_1_2_2(mux_tmp_111, mux_118_nl, fsm_output[0]);
  assign mux_115_nl = MUX_s_1_2_2(mux_11_cse, nor_tmp_18, fsm_output[3]);
  assign mux_112_nl = MUX_s_1_2_2(and_dcpl_19, (fsm_output[5]), fsm_output[4]);
  assign mux_113_nl = MUX_s_1_2_2(mux_112_nl, nor_tmp_18, fsm_output[3]);
  assign mux_116_nl = MUX_s_1_2_2(mux_115_nl, mux_113_nl, fsm_output[0]);
  assign mux_122_nl = MUX_s_1_2_2(mux_121_nl, mux_116_nl, fsm_output[1]);
  assign mux_125_nl = MUX_s_1_2_2(mux_124_nl, mux_122_nl, fsm_output[2]);
  assign nand_9_nl = ~(and_dcpl_12 & and_dcpl_24);
  assign nor_nl = ~((fsm_output[6]) | (~ (fsm_output[4])) | (fsm_output[3]) | (~
      (fsm_output[1])));
  assign nor_84_nl = ~((~ (fsm_output[6])) | (fsm_output[4]) | (~ (fsm_output[3]))
      | (fsm_output[1]));
  assign mux_162_nl = MUX_s_1_2_2(nor_nl, nor_84_nl, fsm_output[5]);
  assign and_244_nl = (fsm_output[5]) & or_tmp_115;
  assign mux_164_nl = MUX_s_1_2_2(and_244_nl, (fsm_output[5]), fsm_output[6]);
  assign nor_81_nl = ~((fsm_output[6]) | (fsm_output[5]) | (~ (fsm_output[0])) |
      (~ (fsm_output[1])) | (fsm_output[2]));
  assign mux_165_nl = MUX_s_1_2_2(mux_164_nl, nor_81_nl, fsm_output[4]);
  assign nor_82_nl = ~((fsm_output[6:5]!=2'b01));
  assign nor_83_nl = ~((fsm_output[6:5]!=2'b10) | (~ or_tmp_115));
  assign mux_163_nl = MUX_s_1_2_2(nor_82_nl, nor_83_nl, fsm_output[4]);
  assign mux_166_nl = MUX_s_1_2_2(mux_165_nl, mux_163_nl, fsm_output[3]);
  assign or_165_nl = (fsm_output[6:5]!=2'b01) | mux_tmp_158;
  assign or_166_nl = (fsm_output[6]) | (fsm_output[5]) | (~ (fsm_output[0])) | (~
      (fsm_output[1])) | (fsm_output[2]);
  assign mux_168_nl = MUX_s_1_2_2(or_165_nl, or_166_nl, fsm_output[4]);
  assign or_167_nl = (fsm_output[6:4]!=3'b101) | mux_tmp_158;
  assign mux_169_nl = MUX_s_1_2_2(mux_168_nl, or_167_nl, fsm_output[3]);
  assign nl_COMP_LOOP_acc_cse_sva  = STAGE_VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_1_sva_7_0
      , 1'b1});
  assign mux_147_nl = MUX_s_1_2_2(mux_tmp_75, nor_tmp, and_109_cse);
  assign mux_146_nl = MUX_s_1_2_2(mux_tmp_75, (fsm_output[6]), and_109_cse);
  assign mux_148_nl = MUX_s_1_2_2(mux_147_nl, mux_146_nl, fsm_output[1]);
  assign mux_144_nl = MUX_s_1_2_2(mux_tmp_75, nor_tmp, fsm_output[4]);
  assign mux_143_nl = MUX_s_1_2_2(mux_tmp_75, (fsm_output[6]), fsm_output[4]);
  assign mux_145_nl = MUX_s_1_2_2(mux_144_nl, mux_143_nl, fsm_output[3]);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, mux_145_nl, fsm_output[2]);
  assign nl_operator_64_false_acc_cse_sva  = z_out_5 + STAGE_VEC_LOOP_j_sva_9_0;
  assign nor_31_nl = ~((((fsm_output[3:2]!=2'b00)) & (fsm_output[4])) | (fsm_output[6:5]!=2'b00));
  assign nor_29_nl = ~((operator_64_false_acc_cse_1_sva[0]) | (fsm_output[3]) | (~
      (fsm_output[4])) | (fsm_output[6]));
  assign nor_30_nl = ~((operator_64_false_acc_cse_sva[0]) | (~ (fsm_output[3])) |
      (fsm_output[4]) | (~ (fsm_output[6])));
  assign mux_151_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, fsm_output[0]);
  assign not_320_nl = ~ and_dcpl_73;
  assign and_248_nl = (fsm_output[5]) & (fsm_output[2]) & or_76_cse;
  assign mux_171_nl = MUX_s_1_2_2(and_248_nl, (fsm_output[5]), fsm_output[6]);
  assign or_163_nl = (fsm_output[4]) | (~ mux_171_nl);
  assign or_161_nl = (fsm_output[6:5]!=2'b10) | (~((fsm_output[2]) & or_76_cse));
  assign mux_170_nl = MUX_s_1_2_2(or_162_cse, or_161_nl, fsm_output[4]);
  assign mux_172_nl = MUX_s_1_2_2(or_163_nl, mux_170_nl, fsm_output[3]);
  assign COMP_LOOP_mux_10_nl = MUX_v_10_2_2(({1'b0 , (STAGE_VEC_LOOP_j_sva_9_0[9:1])}),
      STAGE_VEC_LOOP_j_sva_9_0, and_dcpl_113);
  assign COMP_LOOP_mux_11_nl = MUX_v_10_2_2(({2'b00 , COMP_LOOP_k_9_1_sva_7_0}),
      STAGE_MAIN_LOOP_lshift_psp_1_sva, and_dcpl_113);
  assign nl_z_out = conv_u2u_10_11(COMP_LOOP_mux_10_nl) + conv_u2u_10_11(COMP_LOOP_mux_11_nl);
  assign z_out = nl_z_out[10:0];
  assign operator_64_false_operator_64_false_or_2_nl = (~(and_dcpl_120 | and_dcpl_138
      | and_dcpl_142)) | and_dcpl_125 | and_dcpl_128 | and_dcpl_133 | and_dcpl_136;
  assign operator_64_false_operator_64_false_mux_1_nl = MUX_v_55_2_2((z_out_2[63:9]),
      (STAGE_MAIN_LOOP_div_cmp_z[63:9]), and_dcpl_133);
  assign operator_64_false_nor_6_nl = ~(and_dcpl_120 | and_dcpl_125 | and_dcpl_138
      | and_dcpl_142);
  assign operator_64_false_operator_64_false_nand_1_nl = ~(MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
      operator_64_false_operator_64_false_mux_1_nl, operator_64_false_nor_6_nl));
  assign operator_64_false_or_6_nl = and_dcpl_120 | and_dcpl_138 | and_dcpl_142;
  assign operator_64_false_or_7_nl = and_dcpl_128 | and_dcpl_136;
  assign operator_64_false_mux1h_3_nl = MUX1HOT_v_9_4_2((~ (STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1])),
      ({1'b1 , (~ COMP_LOOP_k_9_1_sva_7_0)}), (~ (z_out_2[8:0])), (~ (STAGE_MAIN_LOOP_div_cmp_z[8:0])),
      {operator_64_false_or_6_nl , and_dcpl_125 , operator_64_false_or_7_nl , and_dcpl_133});
  assign operator_64_false_or_8_nl = operator_64_false_nor_3_itm | and_dcpl_120 |
      and_dcpl_142;
  assign operator_64_false_operator_64_false_and_2_nl = (z_out_5[8]) & (~(and_dcpl_120
      | and_dcpl_125 | and_dcpl_128 | and_dcpl_133 | and_dcpl_136 | and_dcpl_138));
  assign operator_64_false_mux_1_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_5[7:0]),
      and_dcpl_142);
  assign operator_64_false_operator_64_false_and_3_nl = MUX_v_8_2_2(8'b00000000,
      operator_64_false_mux_1_nl, operator_64_false_nor_3_itm);
  assign operator_64_false_operator_64_false_or_3_nl = (~ and_dcpl_142) | and_dcpl_120
      | and_dcpl_125 | and_dcpl_128 | and_dcpl_133 | and_dcpl_136 | and_dcpl_138;
  assign nl_acc_1_nl = ({operator_64_false_operator_64_false_or_2_nl , operator_64_false_operator_64_false_nand_1_nl
      , operator_64_false_mux1h_3_nl , operator_64_false_or_8_nl}) + conv_u2u_11_66({operator_64_false_operator_64_false_and_2_nl
      , operator_64_false_operator_64_false_and_3_nl , operator_64_false_operator_64_false_or_3_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[65:0];
  assign z_out_1_64_8 = readslicef_66_57_9(acc_1_nl);
  assign operator_64_false_or_5_nl = and_dcpl_153 | and_dcpl_165 | and_dcpl_169;
  assign operator_64_false_and_4_nl = (~ (STAGE_VEC_LOOP_j_sva_9_0[0])) & and_dcpl_160;
  assign operator_64_false_and_5_nl = (STAGE_VEC_LOOP_j_sva_9_0[0]) & and_dcpl_160;
  assign operator_64_false_mux1h_3_nl_1 = MUX1HOT_v_64_5_2(p_sva, tmp_2_lpi_4_dfm,
      ({modExp_dev_exp_1_sva_63_9 , COMP_LOOP_acc_psp_sva_7_0 , modExp_dev_exp_1_sva_0}),
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, {and_dcpl_149 , operator_64_false_or_5_nl
      , and_182_cse , operator_64_false_and_4_nl , operator_64_false_and_5_nl});
  assign operator_64_false_or_6_nl_1 = (~(and_dcpl_149 | and_dcpl_153 | and_182_cse
      | and_dcpl_160 | and_dcpl_169)) | and_dcpl_165;
  assign operator_64_false_and_6_nl = (~ (operator_64_false_acc_cse_sva[0])) & and_dcpl_169;
  assign operator_64_false_and_7_nl = (operator_64_false_acc_cse_sva[0]) & and_dcpl_169;
  assign operator_64_false_mux1h_4_nl = MUX1HOT_v_64_4_2(tmp_1_lpi_4_dfm, (~ tmp_1_lpi_4_dfm),
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, {and_dcpl_160 , and_dcpl_165 , operator_64_false_and_6_nl
      , operator_64_false_and_7_nl});
  assign operator_64_false_or_8_nl_1 = and_dcpl_149 | and_dcpl_153 | and_182_cse;
  assign operator_64_false_or_7_nl_1 = MUX_v_64_2_2(operator_64_false_mux1h_4_nl,
      64'b1111111111111111111111111111111111111111111111111111111111111111, operator_64_false_or_8_nl_1);
  assign nl_acc_2_nl = ({operator_64_false_mux1h_3_nl_1 , operator_64_false_or_6_nl_1})
      + ({operator_64_false_or_7_nl_1 , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign z_out_2 = readslicef_65_64_1(acc_2_nl);
  assign modExp_dev_while_or_2_nl = and_182_cse | and_dcpl_184;
  assign modExp_dev_while_mux_1_nl = MUX_v_64_2_2(modExp_dev_result_sva, COMP_LOOP_1_modExp_dev_1_while_mul_mut,
      modExp_dev_while_or_2_nl);
  assign and_250_nl = and_dcpl_14 & (fsm_output[1:0]==2'b10) & and_dcpl_25 & and_dcpl_11;
  assign modExp_dev_while_mux1h_3_nl = MUX1HOT_v_64_3_2(r_sva, modExp_dev_result_sva,
      COMP_LOOP_1_modulo_dev_cmp_return_rsc_z, {and_250_nl , and_182_cse , and_dcpl_184});
  assign nl_z_out_3 = modExp_dev_while_mux_1_nl * modExp_dev_while_mux1h_3_nl;
  assign z_out_3 = nl_z_out_3[63:0];
  assign nl_z_out_4 = conv_u2u_4_5(STAGE_MAIN_LOOP_acc_1_psp_sva) + 5'b11111;
  assign z_out_4 = nl_z_out_4[4:0];
  assign COMP_LOOP_mux_12_nl = MUX_v_9_2_2(({COMP_LOOP_k_9_1_sva_7_0 , 1'b1}), ({1'b0
      , COMP_LOOP_k_9_1_sva_7_0}), and_dcpl_207);
  assign COMP_LOOP_mux_13_nl = MUX_v_9_2_2((STAGE_MAIN_LOOP_lshift_psp_1_sva[9:1]),
      9'b000000001, and_dcpl_207);
  assign nl_z_out_5 = conv_u2u_9_10(COMP_LOOP_mux_12_nl) + conv_u2u_9_10(COMP_LOOP_mux_13_nl);
  assign z_out_5 = nl_z_out_5[9:0];

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [56:0] readslicef_66_57_9;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_66_57_9 = tmp[56:0];
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [65:0] conv_u2u_11_66 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_66 = {{55{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIF
// ------------------------------------------------------------------


module inPlaceNTT_DIF (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat,
      r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [8:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [8:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [8:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [8:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] modExp_dev_while_rem_cmp_a;
  wire [63:0] modExp_dev_while_rem_cmp_b;
  wire [63:0] modExp_dev_while_rem_cmp_z;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [8:0] vec_rsc_0_0_i_radr_d_iff;
  wire [8:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_rem #(.width_a(32'sd64),
  .width_b(32'sd64),
  .signd(32'sd0)) modExp_dev_while_rem_cmp (
      .a(modExp_dev_while_rem_cmp_a),
      .b(modExp_dev_while_rem_cmp_b),
      .z(modExp_dev_while_rem_cmp_z)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIF_core inPlaceNTT_DIF_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .modExp_dev_while_rem_cmp_a(modExp_dev_while_rem_cmp_a),
      .modExp_dev_while_rem_cmp_b(modExp_dev_while_rem_cmp_b),
      .modExp_dev_while_rem_cmp_z(modExp_dev_while_rem_cmp_z),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff)
    );
endmodule



