-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   jd4691@newnano.poly.edu
--  Generated date: Sun Sep 12 00:12:32 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen;

ARCHITECTURE v5 OF peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    core_wen : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (57 DOWNTO 0);
    INNER_LOOP1_C_12_tr0 : IN STD_LOGIC;
    INNER_LOOP2_C_12_tr0 : IN STD_LOGIC;
    INNER_LOOP2_C_12_tr1 : IN STD_LOGIC;
    INNER_LOOP3_C_12_tr0 : IN STD_LOGIC;
    INNER_LOOP4_C_12_tr0 : IN STD_LOGIC;
    INNER_LOOP4_C_12_tr1 : IN STD_LOGIC
  );
END peaseNTT_core_core_fsm;

ARCHITECTURE v5 OF peaseNTT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for peaseNTT_core_core_fsm_1
  TYPE peaseNTT_core_core_fsm_1_ST IS (main_C_0, STAGE_LOOP_C_0, INNER_LOOP1_C_0,
      INNER_LOOP1_C_1, INNER_LOOP1_C_2, INNER_LOOP1_C_3, INNER_LOOP1_C_4, INNER_LOOP1_C_5,
      INNER_LOOP1_C_6, INNER_LOOP1_C_7, INNER_LOOP1_C_8, INNER_LOOP1_C_9, INNER_LOOP1_C_10,
      INNER_LOOP1_C_11, INNER_LOOP1_C_12, STAGE_LOOP_C_1, INNER_LOOP2_C_0, INNER_LOOP2_C_1,
      INNER_LOOP2_C_2, INNER_LOOP2_C_3, INNER_LOOP2_C_4, INNER_LOOP2_C_5, INNER_LOOP2_C_6,
      INNER_LOOP2_C_7, INNER_LOOP2_C_8, INNER_LOOP2_C_9, INNER_LOOP2_C_10, INNER_LOOP2_C_11,
      INNER_LOOP2_C_12, STAGE_LOOP1_C_0, INNER_LOOP3_C_0, INNER_LOOP3_C_1, INNER_LOOP3_C_2,
      INNER_LOOP3_C_3, INNER_LOOP3_C_4, INNER_LOOP3_C_5, INNER_LOOP3_C_6, INNER_LOOP3_C_7,
      INNER_LOOP3_C_8, INNER_LOOP3_C_9, INNER_LOOP3_C_10, INNER_LOOP3_C_11, INNER_LOOP3_C_12,
      STAGE_LOOP1_C_1, INNER_LOOP4_C_0, INNER_LOOP4_C_1, INNER_LOOP4_C_2, INNER_LOOP4_C_3,
      INNER_LOOP4_C_4, INNER_LOOP4_C_5, INNER_LOOP4_C_6, INNER_LOOP4_C_7, INNER_LOOP4_C_8,
      INNER_LOOP4_C_9, INNER_LOOP4_C_10, INNER_LOOP4_C_11, INNER_LOOP4_C_12, main_C_1);

  SIGNAL state_var : peaseNTT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : peaseNTT_core_core_fsm_1_ST;

BEGIN
  peaseNTT_core_core_fsm_1 : PROCESS (INNER_LOOP1_C_12_tr0, INNER_LOOP2_C_12_tr0,
      INNER_LOOP2_C_12_tr1, INNER_LOOP3_C_12_tr0, INNER_LOOP4_C_12_tr0, INNER_LOOP4_C_12_tr1,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN STAGE_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000010");
        state_var_NS <= INNER_LOOP1_C_0;
      WHEN INNER_LOOP1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000100");
        state_var_NS <= INNER_LOOP1_C_1;
      WHEN INNER_LOOP1_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000001000");
        state_var_NS <= INNER_LOOP1_C_2;
      WHEN INNER_LOOP1_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000010000");
        state_var_NS <= INNER_LOOP1_C_3;
      WHEN INNER_LOOP1_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000100000");
        state_var_NS <= INNER_LOOP1_C_4;
      WHEN INNER_LOOP1_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000001000000");
        state_var_NS <= INNER_LOOP1_C_5;
      WHEN INNER_LOOP1_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000010000000");
        state_var_NS <= INNER_LOOP1_C_6;
      WHEN INNER_LOOP1_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000100000000");
        state_var_NS <= INNER_LOOP1_C_7;
      WHEN INNER_LOOP1_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000001000000000");
        state_var_NS <= INNER_LOOP1_C_8;
      WHEN INNER_LOOP1_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000010000000000");
        state_var_NS <= INNER_LOOP1_C_9;
      WHEN INNER_LOOP1_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000100000000000");
        state_var_NS <= INNER_LOOP1_C_10;
      WHEN INNER_LOOP1_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000001000000000000");
        state_var_NS <= INNER_LOOP1_C_11;
      WHEN INNER_LOOP1_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000010000000000000");
        state_var_NS <= INNER_LOOP1_C_12;
      WHEN INNER_LOOP1_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000100000000000000");
        IF ( INNER_LOOP1_C_12_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP_C_1;
        ELSE
          state_var_NS <= INNER_LOOP1_C_0;
        END IF;
      WHEN STAGE_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000001000000000000000");
        state_var_NS <= INNER_LOOP2_C_0;
      WHEN INNER_LOOP2_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000010000000000000000");
        state_var_NS <= INNER_LOOP2_C_1;
      WHEN INNER_LOOP2_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000100000000000000000");
        state_var_NS <= INNER_LOOP2_C_2;
      WHEN INNER_LOOP2_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000001000000000000000000");
        state_var_NS <= INNER_LOOP2_C_3;
      WHEN INNER_LOOP2_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000010000000000000000000");
        state_var_NS <= INNER_LOOP2_C_4;
      WHEN INNER_LOOP2_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000100000000000000000000");
        state_var_NS <= INNER_LOOP2_C_5;
      WHEN INNER_LOOP2_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000001000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_6;
      WHEN INNER_LOOP2_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000010000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_7;
      WHEN INNER_LOOP2_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000100000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_8;
      WHEN INNER_LOOP2_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000001000000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_9;
      WHEN INNER_LOOP2_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000010000000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_10;
      WHEN INNER_LOOP2_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000100000000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_11;
      WHEN INNER_LOOP2_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000001000000000000000000000000000");
        state_var_NS <= INNER_LOOP2_C_12;
      WHEN INNER_LOOP2_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000010000000000000000000000000000");
        IF ( INNER_LOOP2_C_12_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP1_C_0;
        ELSIF ( INNER_LOOP2_C_12_tr1 = '1' ) THEN
          state_var_NS <= INNER_LOOP2_C_0;
        ELSE
          state_var_NS <= STAGE_LOOP_C_0;
        END IF;
      WHEN STAGE_LOOP1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000100000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_0;
      WHEN INNER_LOOP3_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000001000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_1;
      WHEN INNER_LOOP3_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000010000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_2;
      WHEN INNER_LOOP3_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000100000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_3;
      WHEN INNER_LOOP3_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000001000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_4;
      WHEN INNER_LOOP3_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000010000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_5;
      WHEN INNER_LOOP3_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000100000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_6;
      WHEN INNER_LOOP3_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000001000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_7;
      WHEN INNER_LOOP3_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000010000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_8;
      WHEN INNER_LOOP3_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000100000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_9;
      WHEN INNER_LOOP3_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000001000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_10;
      WHEN INNER_LOOP3_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000010000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_11;
      WHEN INNER_LOOP3_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000100000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP3_C_12;
      WHEN INNER_LOOP3_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000001000000000000000000000000000000000000000000");
        IF ( INNER_LOOP3_C_12_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP1_C_1;
        ELSE
          state_var_NS <= INNER_LOOP3_C_0;
        END IF;
      WHEN STAGE_LOOP1_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000010000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_0;
      WHEN INNER_LOOP4_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000100000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_1;
      WHEN INNER_LOOP4_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000001000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_2;
      WHEN INNER_LOOP4_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000010000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_3;
      WHEN INNER_LOOP4_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000100000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_4;
      WHEN INNER_LOOP4_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000001000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_5;
      WHEN INNER_LOOP4_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000010000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_6;
      WHEN INNER_LOOP4_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000100000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_7;
      WHEN INNER_LOOP4_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000001000000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_8;
      WHEN INNER_LOOP4_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000010000000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_9;
      WHEN INNER_LOOP4_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000100000000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_10;
      WHEN INNER_LOOP4_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001000000000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_11;
      WHEN INNER_LOOP4_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010000000000000000000000000000000000000000000000000000000");
        state_var_NS <= INNER_LOOP4_C_12;
      WHEN INNER_LOOP4_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100000000000000000000000000000000000000000000000000000000");
        IF ( INNER_LOOP4_C_12_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSIF ( INNER_LOOP4_C_12_tr1 = '1' ) THEN
          state_var_NS <= INNER_LOOP4_C_0;
        ELSE
          state_var_NS <= STAGE_LOOP1_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000000000000000000000000000000000000000000000000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000001");
        state_var_NS <= STAGE_LOOP_C_0;
    END CASE;
  END PROCESS peaseNTT_core_core_fsm_1;

  peaseNTT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        IF ( core_wen = '1' ) THEN
          state_var <= state_var_NS;
        END IF;
      END IF;
    END IF;
  END PROCESS peaseNTT_core_core_fsm_1_REG;

END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_staller
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_staller IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    core_wen : OUT STD_LOGIC;
    core_wten : OUT STD_LOGIC;
    xt_rsci_wen_comp : IN STD_LOGIC;
    xt_rsci_wen_comp_1 : IN STD_LOGIC;
    twiddle_rsci_wen_comp : IN STD_LOGIC;
    twiddle_h_rsci_wen_comp : IN STD_LOGIC
  );
END peaseNTT_core_staller;

ARCHITECTURE v5 OF peaseNTT_core_staller IS
  -- Default Constants

  -- Output Reader Declarations
  SIGNAL core_wen_drv : STD_LOGIC;

BEGIN
  -- Output Reader Assignments
  core_wen <= core_wen_drv;

  core_wen_drv <= xt_rsci_wen_comp AND xt_rsci_wen_comp_1 AND twiddle_rsci_wen_comp
      AND twiddle_h_rsci_wen_comp;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        core_wten <= '0';
      ELSE
        core_wten <= NOT core_wen_drv;
      END IF;
    END IF;
  END PROCESS;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl IS
  PORT(
    core_wten : IN STD_LOGIC;
    twiddle_h_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
    twiddle_h_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
  );
END peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
    IS
  -- Default Constants

BEGIN
  twiddle_h_rsc_triosy_obj_ld_core_sct <= twiddle_h_rsc_triosy_obj_iswt0 AND (NOT
      core_wten);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl IS
  PORT(
    core_wten : IN STD_LOGIC;
    twiddle_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
    twiddle_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
  );
END peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
    IS
  -- Default Constants

BEGIN
  twiddle_rsc_triosy_obj_ld_core_sct <= twiddle_rsc_triosy_obj_iswt0 AND (NOT core_wten);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl IS
  PORT(
    core_wten : IN STD_LOGIC;
    r_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
    r_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
  );
END peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl IS
  -- Default Constants

BEGIN
  r_rsc_triosy_obj_ld_core_sct <= r_rsc_triosy_obj_iswt0 AND (NOT core_wten);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl IS
  PORT(
    core_wten : IN STD_LOGIC;
    p_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
    p_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
  );
END peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl IS
  -- Default Constants

BEGIN
  p_rsc_triosy_obj_ld_core_sct <= p_rsc_triosy_obj_iswt0 AND (NOT core_wten);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl IS
  PORT(
    core_wten : IN STD_LOGIC;
    xt_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
    xt_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
  );
END peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl IS
  -- Default Constants

BEGIN
  xt_rsc_triosy_obj_ld_core_sct <= xt_rsc_triosy_obj_iswt0 AND (NOT core_wten);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    twiddle_h_rsci_oswt : IN STD_LOGIC;
    twiddle_h_rsci_wen_comp : OUT STD_LOGIC;
    twiddle_h_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_h_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsci_biwt : IN STD_LOGIC;
    twiddle_h_rsci_bdwt : IN STD_LOGIC;
    twiddle_h_rsci_bcwt : OUT STD_LOGIC;
    twiddle_h_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_h_rsci_s_raddr_core_sct : IN STD_LOGIC;
    twiddle_h_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp IS
  -- Default Constants

  -- Output Reader Declarations
  SIGNAL twiddle_h_rsci_bcwt_drv : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL twiddle_h_rsci_s_din_bfwt : STD_LOGIC_VECTOR (31 DOWNTO 0);

  SIGNAL INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Output Reader Assignments
  twiddle_h_rsci_bcwt <= twiddle_h_rsci_bcwt_drv;

  twiddle_h_rsci_wen_comp <= (NOT twiddle_h_rsci_oswt) OR twiddle_h_rsci_biwt OR
      twiddle_h_rsci_bcwt_drv;
  INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"),
      (twiddle_h_rsci_s_raddr_core(8 DOWNTO 0)), twiddle_h_rsci_s_raddr_core_sct);
  twiddle_h_rsci_s_raddr <= STD_LOGIC_VECTOR(UNSIGNED'( "0") & UNSIGNED(INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl));
  twiddle_h_rsci_s_din_mxwt <= MUX_v_32_2_2(twiddle_h_rsci_s_din, twiddle_h_rsci_s_din_bfwt,
      twiddle_h_rsci_bcwt_drv);
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        twiddle_h_rsci_bcwt_drv <= '0';
      ELSE
        twiddle_h_rsci_bcwt_drv <= NOT((NOT(twiddle_h_rsci_bcwt_drv OR twiddle_h_rsci_biwt))
            OR twiddle_h_rsci_bdwt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( twiddle_h_rsci_biwt = '1' ) THEN
        twiddle_h_rsci_s_din_bfwt <= twiddle_h_rsci_s_din;
      END IF;
    END IF;
  END PROCESS;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl IS
  PORT(
    core_wen : IN STD_LOGIC;
    twiddle_h_rsci_oswt : IN STD_LOGIC;
    twiddle_h_rsci_biwt : OUT STD_LOGIC;
    twiddle_h_rsci_bdwt : OUT STD_LOGIC;
    twiddle_h_rsci_bcwt : IN STD_LOGIC;
    twiddle_h_rsci_s_re_core_sct : OUT STD_LOGIC;
    twiddle_h_rsci_s_rrdy : IN STD_LOGIC
  );
END peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL twiddle_h_rsci_ogwt : STD_LOGIC;

BEGIN
  twiddle_h_rsci_bdwt <= twiddle_h_rsci_oswt AND core_wen;
  twiddle_h_rsci_biwt <= twiddle_h_rsci_ogwt AND twiddle_h_rsci_s_rrdy;
  twiddle_h_rsci_ogwt <= twiddle_h_rsci_oswt AND (NOT twiddle_h_rsci_bcwt);
  twiddle_h_rsci_s_re_core_sct <= twiddle_h_rsci_ogwt;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    twiddle_rsci_oswt : IN STD_LOGIC;
    twiddle_rsci_wen_comp : OUT STD_LOGIC;
    twiddle_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsci_biwt : IN STD_LOGIC;
    twiddle_rsci_bdwt : IN STD_LOGIC;
    twiddle_rsci_bcwt : OUT STD_LOGIC;
    twiddle_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_s_raddr_core_sct : IN STD_LOGIC;
    twiddle_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp IS
  -- Default Constants

  -- Output Reader Declarations
  SIGNAL twiddle_rsci_bcwt_drv : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL twiddle_rsci_s_din_bfwt : STD_LOGIC_VECTOR (31 DOWNTO 0);

  SIGNAL INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Output Reader Assignments
  twiddle_rsci_bcwt <= twiddle_rsci_bcwt_drv;

  twiddle_rsci_wen_comp <= (NOT twiddle_rsci_oswt) OR twiddle_rsci_biwt OR twiddle_rsci_bcwt_drv;
  INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"),
      (twiddle_rsci_s_raddr_core(8 DOWNTO 0)), twiddle_rsci_s_raddr_core_sct);
  twiddle_rsci_s_raddr <= STD_LOGIC_VECTOR(UNSIGNED'( "0") & UNSIGNED(INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl));
  twiddle_rsci_s_din_mxwt <= MUX_v_32_2_2(twiddle_rsci_s_din, twiddle_rsci_s_din_bfwt,
      twiddle_rsci_bcwt_drv);
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        twiddle_rsci_bcwt_drv <= '0';
      ELSE
        twiddle_rsci_bcwt_drv <= NOT((NOT(twiddle_rsci_bcwt_drv OR twiddle_rsci_biwt))
            OR twiddle_rsci_bdwt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( twiddle_rsci_biwt = '1' ) THEN
        twiddle_rsci_s_din_bfwt <= twiddle_rsci_s_din;
      END IF;
    END IF;
  END PROCESS;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl IS
  PORT(
    core_wen : IN STD_LOGIC;
    twiddle_rsci_oswt : IN STD_LOGIC;
    twiddle_rsci_biwt : OUT STD_LOGIC;
    twiddle_rsci_bdwt : OUT STD_LOGIC;
    twiddle_rsci_bcwt : IN STD_LOGIC;
    twiddle_rsci_s_re_core_sct : OUT STD_LOGIC;
    twiddle_rsci_s_rrdy : IN STD_LOGIC
  );
END peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL twiddle_rsci_ogwt : STD_LOGIC;

BEGIN
  twiddle_rsci_bdwt <= twiddle_rsci_oswt AND core_wen;
  twiddle_rsci_biwt <= twiddle_rsci_ogwt AND twiddle_rsci_s_rrdy;
  twiddle_rsci_ogwt <= twiddle_rsci_oswt AND (NOT twiddle_rsci_bcwt);
  twiddle_rsci_s_re_core_sct <= twiddle_rsci_ogwt;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_xt_rsci_xt_rsc_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_xt_rsci_xt_rsc_wait_dp IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsci_oswt : IN STD_LOGIC;
    xt_rsci_wen_comp : OUT STD_LOGIC;
    xt_rsci_oswt_1 : IN STD_LOGIC;
    xt_rsci_wen_comp_1 : OUT STD_LOGIC;
    xt_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_waddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsci_s_dout_core : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsci_biwt : IN STD_LOGIC;
    xt_rsci_bdwt : IN STD_LOGIC;
    xt_rsci_bcwt : OUT STD_LOGIC;
    xt_rsci_biwt_1 : IN STD_LOGIC;
    xt_rsci_bdwt_2 : IN STD_LOGIC;
    xt_rsci_bcwt_1 : OUT STD_LOGIC;
    xt_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_raddr_core_sct : IN STD_LOGIC;
    xt_rsci_s_waddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_waddr_core_sct : IN STD_LOGIC;
    xt_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsci_s_dout : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_xt_rsci_xt_rsc_wait_dp;

ARCHITECTURE v5 OF peaseNTT_core_xt_rsci_xt_rsc_wait_dp IS
  -- Default Constants

  -- Output Reader Declarations
  SIGNAL xt_rsci_bcwt_drv : STD_LOGIC;
  SIGNAL xt_rsci_bcwt_1_drv : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL xt_rsci_s_din_bfwt : STD_LOGIC_VECTOR (31 DOWNTO 0);

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Output Reader Assignments
  xt_rsci_bcwt <= xt_rsci_bcwt_drv;
  xt_rsci_bcwt_1 <= xt_rsci_bcwt_1_drv;

  xt_rsci_wen_comp <= (NOT xt_rsci_oswt) OR xt_rsci_biwt OR xt_rsci_bcwt_drv;
  xt_rsci_wen_comp_1 <= (NOT xt_rsci_oswt_1) OR xt_rsci_biwt_1 OR xt_rsci_bcwt_1_drv;
  xt_rsci_s_raddr <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), xt_rsci_s_raddr_core,
      xt_rsci_s_raddr_core_sct);
  xt_rsci_s_waddr <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), xt_rsci_s_waddr_core,
      xt_rsci_s_waddr_core_sct);
  xt_rsci_s_din_mxwt <= MUX_v_32_2_2(xt_rsci_s_din, xt_rsci_s_din_bfwt, xt_rsci_bcwt_drv);
  xt_rsci_s_dout <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
      xt_rsci_s_dout_core, xt_rsci_s_waddr_core_sct);
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        xt_rsci_bcwt_drv <= '0';
        xt_rsci_bcwt_1_drv <= '0';
      ELSE
        xt_rsci_bcwt_drv <= NOT((NOT(xt_rsci_bcwt_drv OR xt_rsci_biwt)) OR xt_rsci_bdwt);
        xt_rsci_bcwt_1_drv <= NOT((NOT(xt_rsci_bcwt_1_drv OR xt_rsci_biwt_1)) OR
            xt_rsci_bdwt_2);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( xt_rsci_biwt = '1' ) THEN
        xt_rsci_s_din_bfwt <= xt_rsci_s_din;
      END IF;
    END IF;
  END PROCESS;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl IS
  PORT(
    core_wen : IN STD_LOGIC;
    xt_rsci_oswt : IN STD_LOGIC;
    xt_rsci_oswt_1 : IN STD_LOGIC;
    xt_rsci_biwt : OUT STD_LOGIC;
    xt_rsci_bdwt : OUT STD_LOGIC;
    xt_rsci_bcwt : IN STD_LOGIC;
    xt_rsci_s_re_core_sct : OUT STD_LOGIC;
    xt_rsci_biwt_1 : OUT STD_LOGIC;
    xt_rsci_bdwt_2 : OUT STD_LOGIC;
    xt_rsci_bcwt_1 : IN STD_LOGIC;
    xt_rsci_s_we_core_sct : OUT STD_LOGIC;
    xt_rsci_s_rrdy : IN STD_LOGIC;
    xt_rsci_s_wrdy : IN STD_LOGIC
  );
END peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl;

ARCHITECTURE v5 OF peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL xt_rsci_ogwt : STD_LOGIC;
  SIGNAL xt_rsci_ogwt_1 : STD_LOGIC;

BEGIN
  xt_rsci_bdwt <= xt_rsci_oswt AND core_wen;
  xt_rsci_biwt <= xt_rsci_ogwt AND xt_rsci_s_rrdy;
  xt_rsci_ogwt <= xt_rsci_oswt AND (NOT xt_rsci_bcwt);
  xt_rsci_s_re_core_sct <= xt_rsci_ogwt;
  xt_rsci_bdwt_2 <= xt_rsci_oswt_1 AND core_wen;
  xt_rsci_biwt_1 <= xt_rsci_ogwt_1 AND xt_rsci_s_wrdy;
  xt_rsci_ogwt_1 <= xt_rsci_oswt_1 AND (NOT xt_rsci_bcwt_1);
  xt_rsci_s_we_core_sct <= xt_rsci_ogwt_1;
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_wait_dp IS
  PORT(
    yt_rsc_cgo_iro : IN STD_LOGIC;
    yt_rsci_clken_d : OUT STD_LOGIC;
    ensig_cgo_iro : IN STD_LOGIC;
    core_wen : IN STD_LOGIC;
    yt_rsc_cgo : IN STD_LOGIC;
    ensig_cgo : IN STD_LOGIC;
    mult_z_mul_cmp_en : OUT STD_LOGIC
  );
END peaseNTT_core_wait_dp;

ARCHITECTURE v5 OF peaseNTT_core_wait_dp IS
  -- Default Constants

BEGIN
  yt_rsci_clken_d <= core_wen AND (yt_rsc_cgo OR yt_rsc_cgo_iro);
  mult_z_mul_cmp_en <= core_wen AND (ensig_cgo OR ensig_cgo_iro);
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_obj
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_h_rsc_triosy_obj IS
  PORT(
    twiddle_h_rsc_triosy_lz : OUT STD_LOGIC;
    core_wten : IN STD_LOGIC;
    twiddle_h_rsc_triosy_obj_iswt0 : IN STD_LOGIC
  );
END peaseNTT_core_twiddle_h_rsc_triosy_obj;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_h_rsc_triosy_obj IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL twiddle_h_rsc_triosy_obj_ld_core_sct : STD_LOGIC;

  COMPONENT peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
    PORT(
      core_wten : IN STD_LOGIC;
      twiddle_h_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
      twiddle_h_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
    );
  END COMPONENT;
BEGIN
  twiddle_h_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => twiddle_h_rsc_triosy_obj_ld_core_sct,
      lz => twiddle_h_rsc_triosy_lz
    );
  peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl_inst : peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
    PORT MAP(
      core_wten => core_wten,
      twiddle_h_rsc_triosy_obj_iswt0 => twiddle_h_rsc_triosy_obj_iswt0,
      twiddle_h_rsc_triosy_obj_ld_core_sct => twiddle_h_rsc_triosy_obj_ld_core_sct
    );
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_obj
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_rsc_triosy_obj IS
  PORT(
    twiddle_rsc_triosy_lz : OUT STD_LOGIC;
    core_wten : IN STD_LOGIC;
    twiddle_rsc_triosy_obj_iswt0 : IN STD_LOGIC
  );
END peaseNTT_core_twiddle_rsc_triosy_obj;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_rsc_triosy_obj IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL twiddle_rsc_triosy_obj_ld_core_sct : STD_LOGIC;

  COMPONENT peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
    PORT(
      core_wten : IN STD_LOGIC;
      twiddle_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
      twiddle_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
    );
  END COMPONENT;
BEGIN
  twiddle_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => twiddle_rsc_triosy_obj_ld_core_sct,
      lz => twiddle_rsc_triosy_lz
    );
  peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl_inst : peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
    PORT MAP(
      core_wten => core_wten,
      twiddle_rsc_triosy_obj_iswt0 => twiddle_rsc_triosy_obj_iswt0,
      twiddle_rsc_triosy_obj_ld_core_sct => twiddle_rsc_triosy_obj_ld_core_sct
    );
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_r_rsc_triosy_obj
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_r_rsc_triosy_obj IS
  PORT(
    r_rsc_triosy_lz : OUT STD_LOGIC;
    core_wten : IN STD_LOGIC;
    r_rsc_triosy_obj_iswt0 : IN STD_LOGIC
  );
END peaseNTT_core_r_rsc_triosy_obj;

ARCHITECTURE v5 OF peaseNTT_core_r_rsc_triosy_obj IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL r_rsc_triosy_obj_ld_core_sct : STD_LOGIC;

  COMPONENT peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
    PORT(
      core_wten : IN STD_LOGIC;
      r_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
      r_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
    );
  END COMPONENT;
BEGIN
  r_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => r_rsc_triosy_obj_ld_core_sct,
      lz => r_rsc_triosy_lz
    );
  peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl_inst : peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
    PORT MAP(
      core_wten => core_wten,
      r_rsc_triosy_obj_iswt0 => r_rsc_triosy_obj_iswt0,
      r_rsc_triosy_obj_ld_core_sct => r_rsc_triosy_obj_ld_core_sct
    );
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_p_rsc_triosy_obj
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_p_rsc_triosy_obj IS
  PORT(
    p_rsc_triosy_lz : OUT STD_LOGIC;
    core_wten : IN STD_LOGIC;
    p_rsc_triosy_obj_iswt0 : IN STD_LOGIC
  );
END peaseNTT_core_p_rsc_triosy_obj;

ARCHITECTURE v5 OF peaseNTT_core_p_rsc_triosy_obj IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsc_triosy_obj_ld_core_sct : STD_LOGIC;

  COMPONENT peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
    PORT(
      core_wten : IN STD_LOGIC;
      p_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
      p_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
    );
  END COMPONENT;
BEGIN
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => p_rsc_triosy_obj_ld_core_sct,
      lz => p_rsc_triosy_lz
    );
  peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl_inst : peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
    PORT MAP(
      core_wten => core_wten,
      p_rsc_triosy_obj_iswt0 => p_rsc_triosy_obj_iswt0,
      p_rsc_triosy_obj_ld_core_sct => p_rsc_triosy_obj_ld_core_sct
    );
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_xt_rsc_triosy_obj
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_xt_rsc_triosy_obj IS
  PORT(
    xt_rsc_triosy_lz : OUT STD_LOGIC;
    core_wten : IN STD_LOGIC;
    xt_rsc_triosy_obj_iswt0 : IN STD_LOGIC
  );
END peaseNTT_core_xt_rsc_triosy_obj;

ARCHITECTURE v5 OF peaseNTT_core_xt_rsc_triosy_obj IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL xt_rsc_triosy_obj_ld_core_sct : STD_LOGIC;

  COMPONENT peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl
    PORT(
      core_wten : IN STD_LOGIC;
      xt_rsc_triosy_obj_iswt0 : IN STD_LOGIC;
      xt_rsc_triosy_obj_ld_core_sct : OUT STD_LOGIC
    );
  END COMPONENT;
BEGIN
  xt_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => xt_rsc_triosy_obj_ld_core_sct,
      lz => xt_rsc_triosy_lz
    );
  peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl_inst : peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl
    PORT MAP(
      core_wten => core_wten,
      xt_rsc_triosy_obj_iswt0 => xt_rsc_triosy_obj_iswt0,
      xt_rsc_triosy_obj_ld_core_sct => xt_rsc_triosy_obj_ld_core_sct
    );
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_h_rsci
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_h_rsci IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    twiddle_h_rsc_s_tdone : IN STD_LOGIC;
    twiddle_h_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_h_rsc_RREADY : IN STD_LOGIC;
    twiddle_h_rsc_RVALID : OUT STD_LOGIC;
    twiddle_h_rsc_RUSER : OUT STD_LOGIC;
    twiddle_h_rsc_RLAST : OUT STD_LOGIC;
    twiddle_h_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_RID : OUT STD_LOGIC;
    twiddle_h_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_h_rsc_ARVALID : IN STD_LOGIC;
    twiddle_h_rsc_ARUSER : IN STD_LOGIC;
    twiddle_h_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_h_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_ARID : IN STD_LOGIC;
    twiddle_h_rsc_BREADY : IN STD_LOGIC;
    twiddle_h_rsc_BVALID : OUT STD_LOGIC;
    twiddle_h_rsc_BUSER : OUT STD_LOGIC;
    twiddle_h_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_BID : OUT STD_LOGIC;
    twiddle_h_rsc_WREADY : OUT STD_LOGIC;
    twiddle_h_rsc_WVALID : IN STD_LOGIC;
    twiddle_h_rsc_WUSER : IN STD_LOGIC;
    twiddle_h_rsc_WLAST : IN STD_LOGIC;
    twiddle_h_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_h_rsc_AWVALID : IN STD_LOGIC;
    twiddle_h_rsc_AWUSER : IN STD_LOGIC;
    twiddle_h_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_h_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_AWID : IN STD_LOGIC;
    core_wen : IN STD_LOGIC;
    twiddle_h_rsci_oswt : IN STD_LOGIC;
    twiddle_h_rsci_wen_comp : OUT STD_LOGIC;
    twiddle_h_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_h_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_twiddle_h_rsci;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_h_rsci IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';
  CONSTANT GND : STD_LOGIC := '0';

  -- Interconnect Declarations
  SIGNAL twiddle_h_rsci_biwt : STD_LOGIC;
  SIGNAL twiddle_h_rsci_bdwt : STD_LOGIC;
  SIGNAL twiddle_h_rsci_bcwt : STD_LOGIC;
  SIGNAL twiddle_h_rsci_s_re_core_sct : STD_LOGIC;
  SIGNAL twiddle_h_rsci_s_raddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_din : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_rrdy : STD_LOGIC;
  SIGNAL twiddle_h_rsci_s_wrdy : STD_LOGIC;
  SIGNAL twiddle_h_rsc_is_idle : STD_LOGIC;

  SIGNAL twiddle_h_rsci_AWID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_AWUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_h_rsci_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_WUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_BID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_h_rsci_BUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_h_rsci_ARUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_RID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_h_rsci_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_h_rsci_RUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_raddr_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_waddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_din_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_h_rsci_s_dout : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl
    PORT(
      core_wen : IN STD_LOGIC;
      twiddle_h_rsci_oswt : IN STD_LOGIC;
      twiddle_h_rsci_biwt : OUT STD_LOGIC;
      twiddle_h_rsci_bdwt : OUT STD_LOGIC;
      twiddle_h_rsci_bcwt : IN STD_LOGIC;
      twiddle_h_rsci_s_re_core_sct : OUT STD_LOGIC;
      twiddle_h_rsci_s_rrdy : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      twiddle_h_rsci_oswt : IN STD_LOGIC;
      twiddle_h_rsci_wen_comp : OUT STD_LOGIC;
      twiddle_h_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_h_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_h_rsci_biwt : IN STD_LOGIC;
      twiddle_h_rsci_bdwt : IN STD_LOGIC;
      twiddle_h_rsci_bcwt : OUT STD_LOGIC;
      twiddle_h_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_h_rsci_s_raddr_core_sct : IN STD_LOGIC;
      twiddle_h_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core
      : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din_mxwt
      : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr
      : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din
      : STD_LOGIC_VECTOR (31 DOWNTO 0);

BEGIN
  twiddle_h_rsci : amba_lib.amba_comps.ccs_axi4_slave_mem
    GENERIC MAP(
      rscid => 0,
      depth => 1024,
      op_width => 32,
      cwidth => 32,
      addr_w => 10,
      nopreload => 0,
      rst_ph => 0,
      ADDR_WIDTH => 12,
      DATA_WIDTH => 32,
      ID_WIDTH => 1,
      USER_WIDTH => 1,
      REGION_MAP_SIZE => 1,
      wBASE_ADDRESS => 0,
      rBASE_ADDRESS => 0
      )
    PORT MAP(
      ACLK => clk,
      ARESETn => '1',
      AWID => twiddle_h_rsci_AWID,
      AWADDR => twiddle_h_rsci_AWADDR,
      AWLEN => twiddle_h_rsci_AWLEN,
      AWSIZE => twiddle_h_rsci_AWSIZE,
      AWBURST => twiddle_h_rsci_AWBURST,
      AWLOCK => twiddle_h_rsc_AWLOCK,
      AWCACHE => twiddle_h_rsci_AWCACHE,
      AWPROT => twiddle_h_rsci_AWPROT,
      AWQOS => twiddle_h_rsci_AWQOS,
      AWREGION => twiddle_h_rsci_AWREGION,
      AWUSER => twiddle_h_rsci_AWUSER,
      AWVALID => twiddle_h_rsc_AWVALID,
      AWREADY => twiddle_h_rsc_AWREADY,
      WDATA => twiddle_h_rsci_WDATA,
      WSTRB => twiddle_h_rsci_WSTRB,
      WLAST => twiddle_h_rsc_WLAST,
      WUSER => twiddle_h_rsci_WUSER,
      WVALID => twiddle_h_rsc_WVALID,
      WREADY => twiddle_h_rsc_WREADY,
      BID => twiddle_h_rsci_BID,
      BRESP => twiddle_h_rsci_BRESP,
      BUSER => twiddle_h_rsci_BUSER,
      BVALID => twiddle_h_rsc_BVALID,
      BREADY => twiddle_h_rsc_BREADY,
      ARID => twiddle_h_rsci_ARID,
      ARADDR => twiddle_h_rsci_ARADDR,
      ARLEN => twiddle_h_rsci_ARLEN,
      ARSIZE => twiddle_h_rsci_ARSIZE,
      ARBURST => twiddle_h_rsci_ARBURST,
      ARLOCK => twiddle_h_rsc_ARLOCK,
      ARCACHE => twiddle_h_rsci_ARCACHE,
      ARPROT => twiddle_h_rsci_ARPROT,
      ARQOS => twiddle_h_rsci_ARQOS,
      ARREGION => twiddle_h_rsci_ARREGION,
      ARUSER => twiddle_h_rsci_ARUSER,
      ARVALID => twiddle_h_rsc_ARVALID,
      ARREADY => twiddle_h_rsc_ARREADY,
      RID => twiddle_h_rsci_RID,
      RDATA => twiddle_h_rsci_RDATA,
      RRESP => twiddle_h_rsci_RRESP,
      RLAST => twiddle_h_rsc_RLAST,
      RUSER => twiddle_h_rsci_RUSER,
      RVALID => twiddle_h_rsc_RVALID,
      RREADY => twiddle_h_rsc_RREADY,
      s_re => twiddle_h_rsci_s_re_core_sct,
      s_we => '0',
      s_raddr => twiddle_h_rsci_s_raddr_1,
      s_waddr => twiddle_h_rsci_s_waddr,
      s_din => twiddle_h_rsci_s_din_1,
      s_dout => twiddle_h_rsci_s_dout,
      s_rrdy => twiddle_h_rsci_s_rrdy,
      s_wrdy => twiddle_h_rsci_s_wrdy,
      is_idle => twiddle_h_rsc_is_idle,
      tr_write_done => twiddle_h_rsc_tr_write_done,
      s_tdone => twiddle_h_rsc_s_tdone
    );
  twiddle_h_rsci_AWID(0) <= twiddle_h_rsc_AWID;
  twiddle_h_rsci_AWADDR <= twiddle_h_rsc_AWADDR;
  twiddle_h_rsci_AWLEN <= twiddle_h_rsc_AWLEN;
  twiddle_h_rsci_AWSIZE <= twiddle_h_rsc_AWSIZE;
  twiddle_h_rsci_AWBURST <= twiddle_h_rsc_AWBURST;
  twiddle_h_rsci_AWCACHE <= twiddle_h_rsc_AWCACHE;
  twiddle_h_rsci_AWPROT <= twiddle_h_rsc_AWPROT;
  twiddle_h_rsci_AWQOS <= twiddle_h_rsc_AWQOS;
  twiddle_h_rsci_AWREGION <= twiddle_h_rsc_AWREGION;
  twiddle_h_rsci_AWUSER(0) <= twiddle_h_rsc_AWUSER;
  twiddle_h_rsci_WDATA <= twiddle_h_rsc_WDATA;
  twiddle_h_rsci_WSTRB <= twiddle_h_rsc_WSTRB;
  twiddle_h_rsci_WUSER(0) <= twiddle_h_rsc_WUSER;
  twiddle_h_rsc_BID <= twiddle_h_rsci_BID(0);
  twiddle_h_rsc_BRESP <= twiddle_h_rsci_BRESP;
  twiddle_h_rsc_BUSER <= twiddle_h_rsci_BUSER(0);
  twiddle_h_rsci_ARID(0) <= twiddle_h_rsc_ARID;
  twiddle_h_rsci_ARADDR <= twiddle_h_rsc_ARADDR;
  twiddle_h_rsci_ARLEN <= twiddle_h_rsc_ARLEN;
  twiddle_h_rsci_ARSIZE <= twiddle_h_rsc_ARSIZE;
  twiddle_h_rsci_ARBURST <= twiddle_h_rsc_ARBURST;
  twiddle_h_rsci_ARCACHE <= twiddle_h_rsc_ARCACHE;
  twiddle_h_rsci_ARPROT <= twiddle_h_rsc_ARPROT;
  twiddle_h_rsci_ARQOS <= twiddle_h_rsc_ARQOS;
  twiddle_h_rsci_ARREGION <= twiddle_h_rsc_ARREGION;
  twiddle_h_rsci_ARUSER(0) <= twiddle_h_rsc_ARUSER;
  twiddle_h_rsc_RID <= twiddle_h_rsci_RID(0);
  twiddle_h_rsc_RDATA <= twiddle_h_rsci_RDATA;
  twiddle_h_rsc_RRESP <= twiddle_h_rsci_RRESP;
  twiddle_h_rsc_RUSER <= twiddle_h_rsci_RUSER(0);
  twiddle_h_rsci_s_raddr_1 <= twiddle_h_rsci_s_raddr;
  twiddle_h_rsci_s_waddr <= STD_LOGIC_VECTOR'( "0000000000");
  twiddle_h_rsci_s_din <= twiddle_h_rsci_s_din_1;
  twiddle_h_rsci_s_dout <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");

  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl_inst : peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl
    PORT MAP(
      core_wen => core_wen,
      twiddle_h_rsci_oswt => twiddle_h_rsci_oswt,
      twiddle_h_rsci_biwt => twiddle_h_rsci_biwt,
      twiddle_h_rsci_bdwt => twiddle_h_rsci_bdwt,
      twiddle_h_rsci_bcwt => twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_re_core_sct => twiddle_h_rsci_s_re_core_sct,
      twiddle_h_rsci_s_rrdy => twiddle_h_rsci_s_rrdy
    );
  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst : peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp
    PORT MAP(
      clk => clk,
      rst => rst,
      twiddle_h_rsci_oswt => twiddle_h_rsci_oswt,
      twiddle_h_rsci_wen_comp => twiddle_h_rsci_wen_comp,
      twiddle_h_rsci_s_raddr_core => peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core,
      twiddle_h_rsci_s_din_mxwt => peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din_mxwt,
      twiddle_h_rsci_biwt => twiddle_h_rsci_biwt,
      twiddle_h_rsci_bdwt => twiddle_h_rsci_bdwt,
      twiddle_h_rsci_bcwt => twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_raddr => peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr,
      twiddle_h_rsci_s_raddr_core_sct => twiddle_h_rsci_s_re_core_sct,
      twiddle_h_rsci_s_din => peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din
    );
  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core
      <= '0' & (twiddle_h_rsci_s_raddr_core(8 DOWNTO 0));
  twiddle_h_rsci_s_din_mxwt <= peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din_mxwt;
  twiddle_h_rsci_s_raddr <= peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr;
  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_din <=
      twiddle_h_rsci_s_din;

END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_twiddle_rsci
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_twiddle_rsci IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    twiddle_rsc_s_tdone : IN STD_LOGIC;
    twiddle_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_rsc_RREADY : IN STD_LOGIC;
    twiddle_rsc_RVALID : OUT STD_LOGIC;
    twiddle_rsc_RUSER : OUT STD_LOGIC;
    twiddle_rsc_RLAST : OUT STD_LOGIC;
    twiddle_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_RID : OUT STD_LOGIC;
    twiddle_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_rsc_ARVALID : IN STD_LOGIC;
    twiddle_rsc_ARUSER : IN STD_LOGIC;
    twiddle_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_ARID : IN STD_LOGIC;
    twiddle_rsc_BREADY : IN STD_LOGIC;
    twiddle_rsc_BVALID : OUT STD_LOGIC;
    twiddle_rsc_BUSER : OUT STD_LOGIC;
    twiddle_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_BID : OUT STD_LOGIC;
    twiddle_rsc_WREADY : OUT STD_LOGIC;
    twiddle_rsc_WVALID : IN STD_LOGIC;
    twiddle_rsc_WUSER : IN STD_LOGIC;
    twiddle_rsc_WLAST : IN STD_LOGIC;
    twiddle_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_rsc_AWVALID : IN STD_LOGIC;
    twiddle_rsc_AWUSER : IN STD_LOGIC;
    twiddle_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_AWID : IN STD_LOGIC;
    core_wen : IN STD_LOGIC;
    twiddle_rsci_oswt : IN STD_LOGIC;
    twiddle_rsci_wen_comp : OUT STD_LOGIC;
    twiddle_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_twiddle_rsci;

ARCHITECTURE v5 OF peaseNTT_core_twiddle_rsci IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';
  CONSTANT GND : STD_LOGIC := '0';

  -- Interconnect Declarations
  SIGNAL twiddle_rsci_biwt : STD_LOGIC;
  SIGNAL twiddle_rsci_bdwt : STD_LOGIC;
  SIGNAL twiddle_rsci_bcwt : STD_LOGIC;
  SIGNAL twiddle_rsci_s_re_core_sct : STD_LOGIC;
  SIGNAL twiddle_rsci_s_raddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_s_din : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_rsci_s_rrdy : STD_LOGIC;
  SIGNAL twiddle_rsci_s_wrdy : STD_LOGIC;
  SIGNAL twiddle_rsc_is_idle : STD_LOGIC;

  SIGNAL twiddle_rsci_AWID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL twiddle_rsci_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsci_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_rsci_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_rsci_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_rsci_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_AWUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_rsci_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_WUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_BID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_rsci_BUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_ARID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL twiddle_rsci_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsci_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_rsci_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_rsci_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL twiddle_rsci_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL twiddle_rsci_ARUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_RID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_rsci_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL twiddle_rsci_RUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL twiddle_rsci_s_raddr_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_s_waddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_s_din_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_rsci_s_dout : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl
    PORT(
      core_wen : IN STD_LOGIC;
      twiddle_rsci_oswt : IN STD_LOGIC;
      twiddle_rsci_biwt : OUT STD_LOGIC;
      twiddle_rsci_bdwt : OUT STD_LOGIC;
      twiddle_rsci_bcwt : IN STD_LOGIC;
      twiddle_rsci_s_re_core_sct : OUT STD_LOGIC;
      twiddle_rsci_s_rrdy : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      twiddle_rsci_oswt : IN STD_LOGIC;
      twiddle_rsci_wen_comp : OUT STD_LOGIC;
      twiddle_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_rsci_biwt : IN STD_LOGIC;
      twiddle_rsci_bdwt : IN STD_LOGIC;
      twiddle_rsci_bcwt : OUT STD_LOGIC;
      twiddle_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_s_raddr_core_sct : IN STD_LOGIC;
      twiddle_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core
      : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din_mxwt
      : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr
      : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din :
      STD_LOGIC_VECTOR (31 DOWNTO 0);

BEGIN
  twiddle_rsci : amba_lib.amba_comps.ccs_axi4_slave_mem
    GENERIC MAP(
      rscid => 0,
      depth => 1024,
      op_width => 32,
      cwidth => 32,
      addr_w => 10,
      nopreload => 0,
      rst_ph => 0,
      ADDR_WIDTH => 12,
      DATA_WIDTH => 32,
      ID_WIDTH => 1,
      USER_WIDTH => 1,
      REGION_MAP_SIZE => 1,
      wBASE_ADDRESS => 0,
      rBASE_ADDRESS => 0
      )
    PORT MAP(
      ACLK => clk,
      ARESETn => '1',
      AWID => twiddle_rsci_AWID,
      AWADDR => twiddle_rsci_AWADDR,
      AWLEN => twiddle_rsci_AWLEN,
      AWSIZE => twiddle_rsci_AWSIZE,
      AWBURST => twiddle_rsci_AWBURST,
      AWLOCK => twiddle_rsc_AWLOCK,
      AWCACHE => twiddle_rsci_AWCACHE,
      AWPROT => twiddle_rsci_AWPROT,
      AWQOS => twiddle_rsci_AWQOS,
      AWREGION => twiddle_rsci_AWREGION,
      AWUSER => twiddle_rsci_AWUSER,
      AWVALID => twiddle_rsc_AWVALID,
      AWREADY => twiddle_rsc_AWREADY,
      WDATA => twiddle_rsci_WDATA,
      WSTRB => twiddle_rsci_WSTRB,
      WLAST => twiddle_rsc_WLAST,
      WUSER => twiddle_rsci_WUSER,
      WVALID => twiddle_rsc_WVALID,
      WREADY => twiddle_rsc_WREADY,
      BID => twiddle_rsci_BID,
      BRESP => twiddle_rsci_BRESP,
      BUSER => twiddle_rsci_BUSER,
      BVALID => twiddle_rsc_BVALID,
      BREADY => twiddle_rsc_BREADY,
      ARID => twiddle_rsci_ARID,
      ARADDR => twiddle_rsci_ARADDR,
      ARLEN => twiddle_rsci_ARLEN,
      ARSIZE => twiddle_rsci_ARSIZE,
      ARBURST => twiddle_rsci_ARBURST,
      ARLOCK => twiddle_rsc_ARLOCK,
      ARCACHE => twiddle_rsci_ARCACHE,
      ARPROT => twiddle_rsci_ARPROT,
      ARQOS => twiddle_rsci_ARQOS,
      ARREGION => twiddle_rsci_ARREGION,
      ARUSER => twiddle_rsci_ARUSER,
      ARVALID => twiddle_rsc_ARVALID,
      ARREADY => twiddle_rsc_ARREADY,
      RID => twiddle_rsci_RID,
      RDATA => twiddle_rsci_RDATA,
      RRESP => twiddle_rsci_RRESP,
      RLAST => twiddle_rsc_RLAST,
      RUSER => twiddle_rsci_RUSER,
      RVALID => twiddle_rsc_RVALID,
      RREADY => twiddle_rsc_RREADY,
      s_re => twiddle_rsci_s_re_core_sct,
      s_we => '0',
      s_raddr => twiddle_rsci_s_raddr_1,
      s_waddr => twiddle_rsci_s_waddr,
      s_din => twiddle_rsci_s_din_1,
      s_dout => twiddle_rsci_s_dout,
      s_rrdy => twiddle_rsci_s_rrdy,
      s_wrdy => twiddle_rsci_s_wrdy,
      is_idle => twiddle_rsc_is_idle,
      tr_write_done => twiddle_rsc_tr_write_done,
      s_tdone => twiddle_rsc_s_tdone
    );
  twiddle_rsci_AWID(0) <= twiddle_rsc_AWID;
  twiddle_rsci_AWADDR <= twiddle_rsc_AWADDR;
  twiddle_rsci_AWLEN <= twiddle_rsc_AWLEN;
  twiddle_rsci_AWSIZE <= twiddle_rsc_AWSIZE;
  twiddle_rsci_AWBURST <= twiddle_rsc_AWBURST;
  twiddle_rsci_AWCACHE <= twiddle_rsc_AWCACHE;
  twiddle_rsci_AWPROT <= twiddle_rsc_AWPROT;
  twiddle_rsci_AWQOS <= twiddle_rsc_AWQOS;
  twiddle_rsci_AWREGION <= twiddle_rsc_AWREGION;
  twiddle_rsci_AWUSER(0) <= twiddle_rsc_AWUSER;
  twiddle_rsci_WDATA <= twiddle_rsc_WDATA;
  twiddle_rsci_WSTRB <= twiddle_rsc_WSTRB;
  twiddle_rsci_WUSER(0) <= twiddle_rsc_WUSER;
  twiddle_rsc_BID <= twiddle_rsci_BID(0);
  twiddle_rsc_BRESP <= twiddle_rsci_BRESP;
  twiddle_rsc_BUSER <= twiddle_rsci_BUSER(0);
  twiddle_rsci_ARID(0) <= twiddle_rsc_ARID;
  twiddle_rsci_ARADDR <= twiddle_rsc_ARADDR;
  twiddle_rsci_ARLEN <= twiddle_rsc_ARLEN;
  twiddle_rsci_ARSIZE <= twiddle_rsc_ARSIZE;
  twiddle_rsci_ARBURST <= twiddle_rsc_ARBURST;
  twiddle_rsci_ARCACHE <= twiddle_rsc_ARCACHE;
  twiddle_rsci_ARPROT <= twiddle_rsc_ARPROT;
  twiddle_rsci_ARQOS <= twiddle_rsc_ARQOS;
  twiddle_rsci_ARREGION <= twiddle_rsc_ARREGION;
  twiddle_rsci_ARUSER(0) <= twiddle_rsc_ARUSER;
  twiddle_rsc_RID <= twiddle_rsci_RID(0);
  twiddle_rsc_RDATA <= twiddle_rsci_RDATA;
  twiddle_rsc_RRESP <= twiddle_rsci_RRESP;
  twiddle_rsc_RUSER <= twiddle_rsci_RUSER(0);
  twiddle_rsci_s_raddr_1 <= twiddle_rsci_s_raddr;
  twiddle_rsci_s_waddr <= STD_LOGIC_VECTOR'( "0000000000");
  twiddle_rsci_s_din <= twiddle_rsci_s_din_1;
  twiddle_rsci_s_dout <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");

  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl_inst : peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl
    PORT MAP(
      core_wen => core_wen,
      twiddle_rsci_oswt => twiddle_rsci_oswt,
      twiddle_rsci_biwt => twiddle_rsci_biwt,
      twiddle_rsci_bdwt => twiddle_rsci_bdwt,
      twiddle_rsci_bcwt => twiddle_rsci_bcwt,
      twiddle_rsci_s_re_core_sct => twiddle_rsci_s_re_core_sct,
      twiddle_rsci_s_rrdy => twiddle_rsci_s_rrdy
    );
  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst : peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp
    PORT MAP(
      clk => clk,
      rst => rst,
      twiddle_rsci_oswt => twiddle_rsci_oswt,
      twiddle_rsci_wen_comp => twiddle_rsci_wen_comp,
      twiddle_rsci_s_raddr_core => peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core,
      twiddle_rsci_s_din_mxwt => peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din_mxwt,
      twiddle_rsci_biwt => twiddle_rsci_biwt,
      twiddle_rsci_bdwt => twiddle_rsci_bdwt,
      twiddle_rsci_bcwt => twiddle_rsci_bcwt,
      twiddle_rsci_s_raddr => peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr,
      twiddle_rsci_s_raddr_core_sct => twiddle_rsci_s_re_core_sct,
      twiddle_rsci_s_din => peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din
    );
  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core <=
      '0' & (twiddle_rsci_s_raddr_core(8 DOWNTO 0));
  twiddle_rsci_s_din_mxwt <= peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din_mxwt;
  twiddle_rsci_s_raddr <= peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr;
  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_din <= twiddle_rsci_s_din;

END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core_xt_rsci
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core_xt_rsci IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_s_tdone : IN STD_LOGIC;
    xt_rsc_tr_write_done : IN STD_LOGIC;
    xt_rsc_RREADY : IN STD_LOGIC;
    xt_rsc_RVALID : OUT STD_LOGIC;
    xt_rsc_RUSER : OUT STD_LOGIC;
    xt_rsc_RLAST : OUT STD_LOGIC;
    xt_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_RID : OUT STD_LOGIC;
    xt_rsc_ARREADY : OUT STD_LOGIC;
    xt_rsc_ARVALID : IN STD_LOGIC;
    xt_rsc_ARUSER : IN STD_LOGIC;
    xt_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARLOCK : IN STD_LOGIC;
    xt_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_ARID : IN STD_LOGIC;
    xt_rsc_BREADY : IN STD_LOGIC;
    xt_rsc_BVALID : OUT STD_LOGIC;
    xt_rsc_BUSER : OUT STD_LOGIC;
    xt_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_BID : OUT STD_LOGIC;
    xt_rsc_WREADY : OUT STD_LOGIC;
    xt_rsc_WVALID : IN STD_LOGIC;
    xt_rsc_WUSER : IN STD_LOGIC;
    xt_rsc_WLAST : IN STD_LOGIC;
    xt_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_AWREADY : OUT STD_LOGIC;
    xt_rsc_AWVALID : IN STD_LOGIC;
    xt_rsc_AWUSER : IN STD_LOGIC;
    xt_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWLOCK : IN STD_LOGIC;
    xt_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_AWID : IN STD_LOGIC;
    core_wen : IN STD_LOGIC;
    xt_rsci_oswt : IN STD_LOGIC;
    xt_rsci_wen_comp : OUT STD_LOGIC;
    xt_rsci_oswt_1 : IN STD_LOGIC;
    xt_rsci_wen_comp_1 : OUT STD_LOGIC;
    xt_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_waddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsci_s_dout_core : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END peaseNTT_core_xt_rsci;

ARCHITECTURE v5 OF peaseNTT_core_xt_rsci IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';
  CONSTANT GND : STD_LOGIC := '0';

  -- Interconnect Declarations
  SIGNAL xt_rsci_biwt : STD_LOGIC;
  SIGNAL xt_rsci_bdwt : STD_LOGIC;
  SIGNAL xt_rsci_bcwt : STD_LOGIC;
  SIGNAL xt_rsci_s_re_core_sct : STD_LOGIC;
  SIGNAL xt_rsci_biwt_1 : STD_LOGIC;
  SIGNAL xt_rsci_bdwt_2 : STD_LOGIC;
  SIGNAL xt_rsci_bcwt_1 : STD_LOGIC;
  SIGNAL xt_rsci_s_we_core_sct : STD_LOGIC;
  SIGNAL xt_rsci_s_raddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_s_waddr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_s_din : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_s_dout : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_s_rrdy : STD_LOGIC;
  SIGNAL xt_rsci_s_wrdy : STD_LOGIC;
  SIGNAL xt_rsc_is_idle_1 : STD_LOGIC;

  SIGNAL xt_rsci_AWID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL xt_rsci_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsci_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL xt_rsci_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL xt_rsci_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL xt_rsci_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_AWUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_WUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_BID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL xt_rsci_BUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_ARID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL xt_rsci_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsci_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL xt_rsci_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL xt_rsci_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL xt_rsci_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL xt_rsci_ARUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_RID : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL xt_rsci_RUSER : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL xt_rsci_s_raddr_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_s_waddr_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_s_din_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_s_dout_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl
    PORT(
      core_wen : IN STD_LOGIC;
      xt_rsci_oswt : IN STD_LOGIC;
      xt_rsci_oswt_1 : IN STD_LOGIC;
      xt_rsci_biwt : OUT STD_LOGIC;
      xt_rsci_bdwt : OUT STD_LOGIC;
      xt_rsci_bcwt : IN STD_LOGIC;
      xt_rsci_s_re_core_sct : OUT STD_LOGIC;
      xt_rsci_biwt_1 : OUT STD_LOGIC;
      xt_rsci_bdwt_2 : OUT STD_LOGIC;
      xt_rsci_bcwt_1 : IN STD_LOGIC;
      xt_rsci_s_we_core_sct : OUT STD_LOGIC;
      xt_rsci_s_rrdy : IN STD_LOGIC;
      xt_rsci_s_wrdy : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_xt_rsci_xt_rsc_wait_dp
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsci_oswt : IN STD_LOGIC;
      xt_rsci_wen_comp : OUT STD_LOGIC;
      xt_rsci_oswt_1 : IN STD_LOGIC;
      xt_rsci_wen_comp_1 : OUT STD_LOGIC;
      xt_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_waddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsci_s_dout_core : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsci_biwt : IN STD_LOGIC;
      xt_rsci_bdwt : IN STD_LOGIC;
      xt_rsci_bcwt : OUT STD_LOGIC;
      xt_rsci_biwt_1 : IN STD_LOGIC;
      xt_rsci_bdwt_2 : IN STD_LOGIC;
      xt_rsci_bcwt_1 : OUT STD_LOGIC;
      xt_rsci_s_raddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_raddr_core_sct : IN STD_LOGIC;
      xt_rsci_s_waddr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_waddr_core_sct : IN STD_LOGIC;
      xt_rsci_s_din : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsci_s_dout : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr_core : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr_core : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din_mxwt : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout_core : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout : STD_LOGIC_VECTOR
      (31 DOWNTO 0);

BEGIN
  xt_rsci : amba_lib.amba_comps.ccs_axi4_slave_mem
    GENERIC MAP(
      rscid => 0,
      depth => 1024,
      op_width => 32,
      cwidth => 32,
      addr_w => 10,
      nopreload => 0,
      rst_ph => 0,
      ADDR_WIDTH => 12,
      DATA_WIDTH => 32,
      ID_WIDTH => 1,
      USER_WIDTH => 1,
      REGION_MAP_SIZE => 1,
      wBASE_ADDRESS => 0,
      rBASE_ADDRESS => 0
      )
    PORT MAP(
      ACLK => clk,
      ARESETn => '1',
      AWID => xt_rsci_AWID,
      AWADDR => xt_rsci_AWADDR,
      AWLEN => xt_rsci_AWLEN,
      AWSIZE => xt_rsci_AWSIZE,
      AWBURST => xt_rsci_AWBURST,
      AWLOCK => xt_rsc_AWLOCK,
      AWCACHE => xt_rsci_AWCACHE,
      AWPROT => xt_rsci_AWPROT,
      AWQOS => xt_rsci_AWQOS,
      AWREGION => xt_rsci_AWREGION,
      AWUSER => xt_rsci_AWUSER,
      AWVALID => xt_rsc_AWVALID,
      AWREADY => xt_rsc_AWREADY,
      WDATA => xt_rsci_WDATA,
      WSTRB => xt_rsci_WSTRB,
      WLAST => xt_rsc_WLAST,
      WUSER => xt_rsci_WUSER,
      WVALID => xt_rsc_WVALID,
      WREADY => xt_rsc_WREADY,
      BID => xt_rsci_BID,
      BRESP => xt_rsci_BRESP,
      BUSER => xt_rsci_BUSER,
      BVALID => xt_rsc_BVALID,
      BREADY => xt_rsc_BREADY,
      ARID => xt_rsci_ARID,
      ARADDR => xt_rsci_ARADDR,
      ARLEN => xt_rsci_ARLEN,
      ARSIZE => xt_rsci_ARSIZE,
      ARBURST => xt_rsci_ARBURST,
      ARLOCK => xt_rsc_ARLOCK,
      ARCACHE => xt_rsci_ARCACHE,
      ARPROT => xt_rsci_ARPROT,
      ARQOS => xt_rsci_ARQOS,
      ARREGION => xt_rsci_ARREGION,
      ARUSER => xt_rsci_ARUSER,
      ARVALID => xt_rsc_ARVALID,
      ARREADY => xt_rsc_ARREADY,
      RID => xt_rsci_RID,
      RDATA => xt_rsci_RDATA,
      RRESP => xt_rsci_RRESP,
      RLAST => xt_rsc_RLAST,
      RUSER => xt_rsci_RUSER,
      RVALID => xt_rsc_RVALID,
      RREADY => xt_rsc_RREADY,
      s_re => xt_rsci_s_re_core_sct,
      s_we => xt_rsci_s_we_core_sct,
      s_raddr => xt_rsci_s_raddr_1,
      s_waddr => xt_rsci_s_waddr_1,
      s_din => xt_rsci_s_din_1,
      s_dout => xt_rsci_s_dout_1,
      s_rrdy => xt_rsci_s_rrdy,
      s_wrdy => xt_rsci_s_wrdy,
      is_idle => xt_rsc_is_idle_1,
      tr_write_done => xt_rsc_tr_write_done,
      s_tdone => xt_rsc_s_tdone
    );
  xt_rsci_AWID(0) <= xt_rsc_AWID;
  xt_rsci_AWADDR <= xt_rsc_AWADDR;
  xt_rsci_AWLEN <= xt_rsc_AWLEN;
  xt_rsci_AWSIZE <= xt_rsc_AWSIZE;
  xt_rsci_AWBURST <= xt_rsc_AWBURST;
  xt_rsci_AWCACHE <= xt_rsc_AWCACHE;
  xt_rsci_AWPROT <= xt_rsc_AWPROT;
  xt_rsci_AWQOS <= xt_rsc_AWQOS;
  xt_rsci_AWREGION <= xt_rsc_AWREGION;
  xt_rsci_AWUSER(0) <= xt_rsc_AWUSER;
  xt_rsci_WDATA <= xt_rsc_WDATA;
  xt_rsci_WSTRB <= xt_rsc_WSTRB;
  xt_rsci_WUSER(0) <= xt_rsc_WUSER;
  xt_rsc_BID <= xt_rsci_BID(0);
  xt_rsc_BRESP <= xt_rsci_BRESP;
  xt_rsc_BUSER <= xt_rsci_BUSER(0);
  xt_rsci_ARID(0) <= xt_rsc_ARID;
  xt_rsci_ARADDR <= xt_rsc_ARADDR;
  xt_rsci_ARLEN <= xt_rsc_ARLEN;
  xt_rsci_ARSIZE <= xt_rsc_ARSIZE;
  xt_rsci_ARBURST <= xt_rsc_ARBURST;
  xt_rsci_ARCACHE <= xt_rsc_ARCACHE;
  xt_rsci_ARPROT <= xt_rsc_ARPROT;
  xt_rsci_ARQOS <= xt_rsc_ARQOS;
  xt_rsci_ARREGION <= xt_rsc_ARREGION;
  xt_rsci_ARUSER(0) <= xt_rsc_ARUSER;
  xt_rsc_RID <= xt_rsci_RID(0);
  xt_rsc_RDATA <= xt_rsci_RDATA;
  xt_rsc_RRESP <= xt_rsci_RRESP;
  xt_rsc_RUSER <= xt_rsci_RUSER(0);
  xt_rsci_s_raddr_1 <= xt_rsci_s_raddr;
  xt_rsci_s_waddr_1 <= xt_rsci_s_waddr;
  xt_rsci_s_din <= xt_rsci_s_din_1;
  xt_rsci_s_dout_1 <= xt_rsci_s_dout;

  peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl_inst : peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl
    PORT MAP(
      core_wen => core_wen,
      xt_rsci_oswt => xt_rsci_oswt,
      xt_rsci_oswt_1 => xt_rsci_oswt_1,
      xt_rsci_biwt => xt_rsci_biwt,
      xt_rsci_bdwt => xt_rsci_bdwt,
      xt_rsci_bcwt => xt_rsci_bcwt,
      xt_rsci_s_re_core_sct => xt_rsci_s_re_core_sct,
      xt_rsci_biwt_1 => xt_rsci_biwt_1,
      xt_rsci_bdwt_2 => xt_rsci_bdwt_2,
      xt_rsci_bcwt_1 => xt_rsci_bcwt_1,
      xt_rsci_s_we_core_sct => xt_rsci_s_we_core_sct,
      xt_rsci_s_rrdy => xt_rsci_s_rrdy,
      xt_rsci_s_wrdy => xt_rsci_s_wrdy
    );
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst : peaseNTT_core_xt_rsci_xt_rsc_wait_dp
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsci_oswt => xt_rsci_oswt,
      xt_rsci_wen_comp => xt_rsci_wen_comp,
      xt_rsci_oswt_1 => xt_rsci_oswt_1,
      xt_rsci_wen_comp_1 => xt_rsci_wen_comp_1,
      xt_rsci_s_raddr_core => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr_core,
      xt_rsci_s_waddr_core => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr_core,
      xt_rsci_s_din_mxwt => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din_mxwt,
      xt_rsci_s_dout_core => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout_core,
      xt_rsci_biwt => xt_rsci_biwt,
      xt_rsci_bdwt => xt_rsci_bdwt,
      xt_rsci_bcwt => xt_rsci_bcwt,
      xt_rsci_biwt_1 => xt_rsci_biwt_1,
      xt_rsci_bdwt_2 => xt_rsci_bdwt_2,
      xt_rsci_bcwt_1 => xt_rsci_bcwt_1,
      xt_rsci_s_raddr => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr,
      xt_rsci_s_raddr_core_sct => xt_rsci_s_re_core_sct,
      xt_rsci_s_waddr => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr,
      xt_rsci_s_waddr_core_sct => xt_rsci_s_we_core_sct,
      xt_rsci_s_din => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din,
      xt_rsci_s_dout => peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout
    );
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr_core <= xt_rsci_s_raddr_core;
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr_core <= xt_rsci_s_waddr_core;
  xt_rsci_s_din_mxwt <= peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din_mxwt;
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout_core <= xt_rsci_s_dout_core;
  xt_rsci_s_raddr <= peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_raddr;
  xt_rsci_s_waddr <= peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_waddr;
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_din <= xt_rsci_s_din;
  xt_rsci_s_dout <= peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst_xt_rsci_s_dout;

END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_s_tdone : IN STD_LOGIC;
    xt_rsc_tr_write_done : IN STD_LOGIC;
    xt_rsc_RREADY : IN STD_LOGIC;
    xt_rsc_RVALID : OUT STD_LOGIC;
    xt_rsc_RUSER : OUT STD_LOGIC;
    xt_rsc_RLAST : OUT STD_LOGIC;
    xt_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_RID : OUT STD_LOGIC;
    xt_rsc_ARREADY : OUT STD_LOGIC;
    xt_rsc_ARVALID : IN STD_LOGIC;
    xt_rsc_ARUSER : IN STD_LOGIC;
    xt_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARLOCK : IN STD_LOGIC;
    xt_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_ARID : IN STD_LOGIC;
    xt_rsc_BREADY : IN STD_LOGIC;
    xt_rsc_BVALID : OUT STD_LOGIC;
    xt_rsc_BUSER : OUT STD_LOGIC;
    xt_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_BID : OUT STD_LOGIC;
    xt_rsc_WREADY : OUT STD_LOGIC;
    xt_rsc_WVALID : IN STD_LOGIC;
    xt_rsc_WUSER : IN STD_LOGIC;
    xt_rsc_WLAST : IN STD_LOGIC;
    xt_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_AWREADY : OUT STD_LOGIC;
    xt_rsc_AWVALID : IN STD_LOGIC;
    xt_rsc_AWUSER : IN STD_LOGIC;
    xt_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWLOCK : IN STD_LOGIC;
    xt_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_AWID : IN STD_LOGIC;
    xt_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_s_tdone : IN STD_LOGIC;
    twiddle_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_rsc_RREADY : IN STD_LOGIC;
    twiddle_rsc_RVALID : OUT STD_LOGIC;
    twiddle_rsc_RUSER : OUT STD_LOGIC;
    twiddle_rsc_RLAST : OUT STD_LOGIC;
    twiddle_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_RID : OUT STD_LOGIC;
    twiddle_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_rsc_ARVALID : IN STD_LOGIC;
    twiddle_rsc_ARUSER : IN STD_LOGIC;
    twiddle_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_ARID : IN STD_LOGIC;
    twiddle_rsc_BREADY : IN STD_LOGIC;
    twiddle_rsc_BVALID : OUT STD_LOGIC;
    twiddle_rsc_BUSER : OUT STD_LOGIC;
    twiddle_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_BID : OUT STD_LOGIC;
    twiddle_rsc_WREADY : OUT STD_LOGIC;
    twiddle_rsc_WVALID : IN STD_LOGIC;
    twiddle_rsc_WUSER : IN STD_LOGIC;
    twiddle_rsc_WLAST : IN STD_LOGIC;
    twiddle_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_rsc_AWVALID : IN STD_LOGIC;
    twiddle_rsc_AWUSER : IN STD_LOGIC;
    twiddle_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_AWID : IN STD_LOGIC;
    twiddle_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_h_rsc_s_tdone : IN STD_LOGIC;
    twiddle_h_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_h_rsc_RREADY : IN STD_LOGIC;
    twiddle_h_rsc_RVALID : OUT STD_LOGIC;
    twiddle_h_rsc_RUSER : OUT STD_LOGIC;
    twiddle_h_rsc_RLAST : OUT STD_LOGIC;
    twiddle_h_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_RID : OUT STD_LOGIC;
    twiddle_h_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_h_rsc_ARVALID : IN STD_LOGIC;
    twiddle_h_rsc_ARUSER : IN STD_LOGIC;
    twiddle_h_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_h_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_ARID : IN STD_LOGIC;
    twiddle_h_rsc_BREADY : IN STD_LOGIC;
    twiddle_h_rsc_BVALID : OUT STD_LOGIC;
    twiddle_h_rsc_BUSER : OUT STD_LOGIC;
    twiddle_h_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_BID : OUT STD_LOGIC;
    twiddle_h_rsc_WREADY : OUT STD_LOGIC;
    twiddle_h_rsc_WVALID : IN STD_LOGIC;
    twiddle_h_rsc_WUSER : IN STD_LOGIC;
    twiddle_h_rsc_WLAST : IN STD_LOGIC;
    twiddle_h_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_h_rsc_AWVALID : IN STD_LOGIC;
    twiddle_h_rsc_AWUSER : IN STD_LOGIC;
    twiddle_h_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_h_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_AWID : IN STD_LOGIC;
    twiddle_h_rsc_triosy_lz : OUT STD_LOGIC;
    yt_rsci_clken_d : OUT STD_LOGIC;
    yt_rsci_d_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    yt_rsci_q_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    yt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    yt_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsci_we_d_pff : OUT STD_LOGIC
  );
END peaseNTT_core;

ARCHITECTURE v5 OF peaseNTT_core IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';
  CONSTANT GND : STD_LOGIC := '0';

  -- Interconnect Declarations
  SIGNAL core_wen : STD_LOGIC;
  SIGNAL core_wten : STD_LOGIC;
  SIGNAL xt_rsci_wen_comp : STD_LOGIC;
  SIGNAL xt_rsci_wen_comp_1 : STD_LOGIC;
  SIGNAL xt_rsci_s_din_mxwt : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL xt_rsci_s_dout_core : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_rsci_wen_comp : STD_LOGIC;
  SIGNAL twiddle_rsci_s_din_mxwt : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL twiddle_h_rsci_wen_comp : STD_LOGIC;
  SIGNAL twiddle_h_rsci_s_din_mxwt : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mult_z_mul_cmp_en : STD_LOGIC;
  SIGNAL mult_z_mul_cmp_z : STD_LOGIC_VECTOR (51 DOWNTO 0);
  SIGNAL xt_rsci_s_raddr_core_0 : STD_LOGIC;
  SIGNAL xt_rsci_s_waddr_core_9 : STD_LOGIC;
  SIGNAL fsm_output : STD_LOGIC_VECTOR (57 DOWNTO 0);
  SIGNAL and_dcpl_6 : STD_LOGIC;
  SIGNAL and_dcpl_8 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL or_dcpl_31 : STD_LOGIC;
  SIGNAL or_dcpl_36 : STD_LOGIC;
  SIGNAL or_dcpl_40 : STD_LOGIC;
  SIGNAL or_dcpl_43 : STD_LOGIC;
  SIGNAL or_dcpl_44 : STD_LOGIC;
  SIGNAL or_dcpl_47 : STD_LOGIC;
  SIGNAL and_dcpl_24 : STD_LOGIC;
  SIGNAL or_dcpl_49 : STD_LOGIC;
  SIGNAL or_dcpl_51 : STD_LOGIC;
  SIGNAL or_dcpl_55 : STD_LOGIC;
  SIGNAL or_dcpl_64 : STD_LOGIC;
  SIGNAL or_dcpl_65 : STD_LOGIC;
  SIGNAL or_dcpl_69 : STD_LOGIC;
  SIGNAL or_dcpl_91 : STD_LOGIC;
  SIGNAL or_tmp_45 : STD_LOGIC;
  SIGNAL or_tmp_46 : STD_LOGIC;
  SIGNAL or_tmp_48 : STD_LOGIC;
  SIGNAL c_1_sva : STD_LOGIC;
  SIGNAL INNER_LOOP1_r_9_0_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL modulo_add_3_slc_32_svs_st : STD_LOGIC;
  SIGNAL modulo_add_base_2_sva_mx0w6 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_add_base_1_sva_mx0w5 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_add_base_sva_mx0w2 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mult_res_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reg_xt_rsci_oswt_cse : STD_LOGIC;
  SIGNAL reg_xt_rsci_oswt_1_cse : STD_LOGIC;
  SIGNAL reg_xt_rsci_s_raddr_core_9_1_cse : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL reg_twiddle_rsci_oswt_cse : STD_LOGIC;
  SIGNAL reg_twiddle_rsci_s_raddr_core_2_cse : STD_LOGIC;
  SIGNAL reg_twiddle_rsci_s_raddr_core_7_3_cse : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL reg_twiddle_rsci_s_raddr_core_1_0_cse : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reg_twiddle_rsci_s_raddr_core_8_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_cgo_cse : STD_LOGIC;
  SIGNAL reg_xt_rsc_triosy_obj_iswt0_cse : STD_LOGIC;
  SIGNAL reg_ensig_cgo_cse : STD_LOGIC;
  SIGNAL or_174_rmff : STD_LOGIC;
  SIGNAL or_184_rmff : STD_LOGIC;
  SIGNAL mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL butterFly1_1_f1_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_sub_mux_itm : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL INNER_LOOP1_r_9_0_sva_8_0 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL operator_33_true_2_lshift_itm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_33_true_3_lshift_itm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL or_tmp_98 : STD_LOGIC;
  SIGNAL z_out_7 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL modulo_sub_1_mux_itm : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_sub_3_mux_itm : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL INNER_LOOP1_r_9_0_sva_8_0_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP1_tw_and_psp_sva_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL modulo_add_base_3_sva_mx0w7 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL butterFly1_1_f1_sva_mx0c3 : STD_LOGIC;
  SIGNAL mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP2_tw_and_psp_7_0_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL butterFly2_tw_and_psp_2_0_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL reg_mult_res_lpi_3_dfm_cse : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reg_modulo_add_slc_32_svs_st_cse : STD_LOGIC;
  SIGNAL operator_20_false_and_2_ssc : STD_LOGIC;
  SIGNAL reg_operator_20_false_acc_ftd : STD_LOGIC;
  SIGNAL reg_operator_20_false_acc_ftd_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_20_false_or_m1c : STD_LOGIC;
  SIGNAL operator_33_true_return_8_0_sva_8 : STD_LOGIC;
  SIGNAL operator_33_true_return_8_0_sva_7_0 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_290_cse : STD_LOGIC;
  SIGNAL mult_res_or_2_cse : STD_LOGIC;

  SIGNAL c_mux_1_nl : STD_LOGIC;
  SIGNAL c_c_or_1_nl : STD_LOGIC;
  SIGNAL butterFly2_1_tw_and_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL or_173_nl : STD_LOGIC;
  SIGNAL operator_20_false_and_3_nl : STD_LOGIC;
  SIGNAL operator_20_false_and_4_nl : STD_LOGIC;
  SIGNAL INNER_LOOP1_r_not_4_nl : STD_LOGIC;
  SIGNAL acc_4_nl : STD_LOGIC_VECTOR (33 DOWNTO 0);
  SIGNAL modulo_sub_qif_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL acc_5_nl : STD_LOGIC_VECTOR (33 DOWNTO 0);
  SIGNAL modulo_add_mux1h_3_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_sub_1_qif_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_sub_3_qif_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_add_3_acc_1_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL acc_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL modulo_add_qif_modulo_add_qif_mux_1_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL modulo_add_qif_or_1_nl : STD_LOGIC;
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL mult_res_mux_2_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mult_res_mult_res_mux_1_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL acc_3_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL operator_20_false_mux_3_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  SIGNAL mult_z_mul_cmp_a : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mult_z_mul_cmp_b : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mult_z_mul_cmp_z_1 : STD_LOGIC_VECTOR (51 DOWNTO 0);

  SIGNAL operator_33_true_2_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL operator_33_true_2_lshift_rg_s : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_33_true_2_lshift_rg_z : STD_LOGIC_VECTOR (2 DOWNTO 0);

  SIGNAL operator_33_true_3_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL operator_33_true_3_lshift_rg_s : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL operator_33_true_3_lshift_rg_z : STD_LOGIC_VECTOR (1 DOWNTO 0);

  SIGNAL operator_33_true_1_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL operator_33_true_1_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL operator_33_true_1_lshift_rg_z : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT peaseNTT_core_wait_dp
    PORT(
      yt_rsc_cgo_iro : IN STD_LOGIC;
      yt_rsci_clken_d : OUT STD_LOGIC;
      ensig_cgo_iro : IN STD_LOGIC;
      core_wen : IN STD_LOGIC;
      yt_rsc_cgo : IN STD_LOGIC;
      ensig_cgo : IN STD_LOGIC;
      mult_z_mul_cmp_en : OUT STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_xt_rsci
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsc_s_tdone : IN STD_LOGIC;
      xt_rsc_tr_write_done : IN STD_LOGIC;
      xt_rsc_RREADY : IN STD_LOGIC;
      xt_rsc_RVALID : OUT STD_LOGIC;
      xt_rsc_RUSER : OUT STD_LOGIC;
      xt_rsc_RLAST : OUT STD_LOGIC;
      xt_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsc_RID : OUT STD_LOGIC;
      xt_rsc_ARREADY : OUT STD_LOGIC;
      xt_rsc_ARVALID : IN STD_LOGIC;
      xt_rsc_ARUSER : IN STD_LOGIC;
      xt_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARLOCK : IN STD_LOGIC;
      xt_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      xt_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      xt_rsc_ARID : IN STD_LOGIC;
      xt_rsc_BREADY : IN STD_LOGIC;
      xt_rsc_BVALID : OUT STD_LOGIC;
      xt_rsc_BUSER : OUT STD_LOGIC;
      xt_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_BID : OUT STD_LOGIC;
      xt_rsc_WREADY : OUT STD_LOGIC;
      xt_rsc_WVALID : IN STD_LOGIC;
      xt_rsc_WUSER : IN STD_LOGIC;
      xt_rsc_WLAST : IN STD_LOGIC;
      xt_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsc_AWREADY : OUT STD_LOGIC;
      xt_rsc_AWVALID : IN STD_LOGIC;
      xt_rsc_AWUSER : IN STD_LOGIC;
      xt_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWLOCK : IN STD_LOGIC;
      xt_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      xt_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      xt_rsc_AWID : IN STD_LOGIC;
      core_wen : IN STD_LOGIC;
      xt_rsci_oswt : IN STD_LOGIC;
      xt_rsci_wen_comp : OUT STD_LOGIC;
      xt_rsci_oswt_1 : IN STD_LOGIC;
      xt_rsci_wen_comp_1 : OUT STD_LOGIC;
      xt_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_waddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsci_s_dout_core : IN STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsc_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsci_s_din_mxwt : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL peaseNTT_core_xt_rsci_inst_xt_rsci_s_dout_core : STD_LOGIC_VECTOR (31 DOWNTO
      0);

  COMPONENT peaseNTT_core_twiddle_rsci
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      twiddle_rsc_s_tdone : IN STD_LOGIC;
      twiddle_rsc_tr_write_done : IN STD_LOGIC;
      twiddle_rsc_RREADY : IN STD_LOGIC;
      twiddle_rsc_RVALID : OUT STD_LOGIC;
      twiddle_rsc_RUSER : OUT STD_LOGIC;
      twiddle_rsc_RLAST : OUT STD_LOGIC;
      twiddle_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_rsc_RID : OUT STD_LOGIC;
      twiddle_rsc_ARREADY : OUT STD_LOGIC;
      twiddle_rsc_ARVALID : IN STD_LOGIC;
      twiddle_rsc_ARUSER : IN STD_LOGIC;
      twiddle_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARLOCK : IN STD_LOGIC;
      twiddle_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_rsc_ARID : IN STD_LOGIC;
      twiddle_rsc_BREADY : IN STD_LOGIC;
      twiddle_rsc_BVALID : OUT STD_LOGIC;
      twiddle_rsc_BUSER : OUT STD_LOGIC;
      twiddle_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_BID : OUT STD_LOGIC;
      twiddle_rsc_WREADY : OUT STD_LOGIC;
      twiddle_rsc_WVALID : IN STD_LOGIC;
      twiddle_rsc_WUSER : IN STD_LOGIC;
      twiddle_rsc_WLAST : IN STD_LOGIC;
      twiddle_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_rsc_AWREADY : OUT STD_LOGIC;
      twiddle_rsc_AWVALID : IN STD_LOGIC;
      twiddle_rsc_AWUSER : IN STD_LOGIC;
      twiddle_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWLOCK : IN STD_LOGIC;
      twiddle_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_rsc_AWID : IN STD_LOGIC;
      core_wen : IN STD_LOGIC;
      twiddle_rsci_oswt : IN STD_LOGIC;
      twiddle_rsci_wen_comp : OUT STD_LOGIC;
      twiddle_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RRESP : STD_LOGIC_VECTOR (1
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RDATA : STD_LOGIC_VECTOR (31
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARREGION : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARQOS : STD_LOGIC_VECTOR (3
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARPROT : STD_LOGIC_VECTOR (2
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARCACHE : STD_LOGIC_VECTOR (3
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARBURST : STD_LOGIC_VECTOR (1
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARSIZE : STD_LOGIC_VECTOR (2
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARLEN : STD_LOGIC_VECTOR (7
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARADDR : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_BRESP : STD_LOGIC_VECTOR (1
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WSTRB : STD_LOGIC_VECTOR (3
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WDATA : STD_LOGIC_VECTOR (31
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWREGION : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWQOS : STD_LOGIC_VECTOR (3
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWPROT : STD_LOGIC_VECTOR (2
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWCACHE : STD_LOGIC_VECTOR (3
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWBURST : STD_LOGIC_VECTOR (1
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWSIZE : STD_LOGIC_VECTOR (2
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWLEN : STD_LOGIC_VECTOR (7
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWADDR : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_din_mxwt : STD_LOGIC_VECTOR
      (31 DOWNTO 0);

  COMPONENT peaseNTT_core_twiddle_h_rsci
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      twiddle_h_rsc_s_tdone : IN STD_LOGIC;
      twiddle_h_rsc_tr_write_done : IN STD_LOGIC;
      twiddle_h_rsc_RREADY : IN STD_LOGIC;
      twiddle_h_rsc_RVALID : OUT STD_LOGIC;
      twiddle_h_rsc_RUSER : OUT STD_LOGIC;
      twiddle_h_rsc_RLAST : OUT STD_LOGIC;
      twiddle_h_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_h_rsc_RID : OUT STD_LOGIC;
      twiddle_h_rsc_ARREADY : OUT STD_LOGIC;
      twiddle_h_rsc_ARVALID : IN STD_LOGIC;
      twiddle_h_rsc_ARUSER : IN STD_LOGIC;
      twiddle_h_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARLOCK : IN STD_LOGIC;
      twiddle_h_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_h_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_h_rsc_ARID : IN STD_LOGIC;
      twiddle_h_rsc_BREADY : IN STD_LOGIC;
      twiddle_h_rsc_BVALID : OUT STD_LOGIC;
      twiddle_h_rsc_BUSER : OUT STD_LOGIC;
      twiddle_h_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_BID : OUT STD_LOGIC;
      twiddle_h_rsc_WREADY : OUT STD_LOGIC;
      twiddle_h_rsc_WVALID : IN STD_LOGIC;
      twiddle_h_rsc_WUSER : IN STD_LOGIC;
      twiddle_h_rsc_WLAST : IN STD_LOGIC;
      twiddle_h_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_h_rsc_AWREADY : OUT STD_LOGIC;
      twiddle_h_rsc_AWVALID : IN STD_LOGIC;
      twiddle_h_rsc_AWUSER : IN STD_LOGIC;
      twiddle_h_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWLOCK : IN STD_LOGIC;
      twiddle_h_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_h_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_h_rsc_AWID : IN STD_LOGIC;
      core_wen : IN STD_LOGIC;
      twiddle_h_rsci_oswt : IN STD_LOGIC;
      twiddle_h_rsci_wen_comp : OUT STD_LOGIC;
      twiddle_h_rsci_s_raddr_core : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_h_rsci_s_din_mxwt : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RRESP : STD_LOGIC_VECTOR
      (1 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RDATA : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARREGION : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARQOS : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARPROT : STD_LOGIC_VECTOR
      (2 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARCACHE : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARBURST : STD_LOGIC_VECTOR
      (1 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARSIZE : STD_LOGIC_VECTOR
      (2 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARLEN : STD_LOGIC_VECTOR
      (7 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARADDR : STD_LOGIC_VECTOR
      (11 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_BRESP : STD_LOGIC_VECTOR
      (1 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WSTRB : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WDATA : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWREGION : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWQOS : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWPROT : STD_LOGIC_VECTOR
      (2 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWCACHE : STD_LOGIC_VECTOR
      (3 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWBURST : STD_LOGIC_VECTOR
      (1 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWSIZE : STD_LOGIC_VECTOR
      (2 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWLEN : STD_LOGIC_VECTOR
      (7 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWADDR : STD_LOGIC_VECTOR
      (11 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core : STD_LOGIC_VECTOR
      (9 DOWNTO 0);
  SIGNAL peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_din_mxwt : STD_LOGIC_VECTOR
      (31 DOWNTO 0);

  COMPONENT peaseNTT_core_xt_rsc_triosy_obj
    PORT(
      xt_rsc_triosy_lz : OUT STD_LOGIC;
      core_wten : IN STD_LOGIC;
      xt_rsc_triosy_obj_iswt0 : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_p_rsc_triosy_obj
    PORT(
      p_rsc_triosy_lz : OUT STD_LOGIC;
      core_wten : IN STD_LOGIC;
      p_rsc_triosy_obj_iswt0 : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_r_rsc_triosy_obj
    PORT(
      r_rsc_triosy_lz : OUT STD_LOGIC;
      core_wten : IN STD_LOGIC;
      r_rsc_triosy_obj_iswt0 : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_twiddle_rsc_triosy_obj
    PORT(
      twiddle_rsc_triosy_lz : OUT STD_LOGIC;
      core_wten : IN STD_LOGIC;
      twiddle_rsc_triosy_obj_iswt0 : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_twiddle_h_rsc_triosy_obj
    PORT(
      twiddle_h_rsc_triosy_lz : OUT STD_LOGIC;
      core_wten : IN STD_LOGIC;
      twiddle_h_rsc_triosy_obj_iswt0 : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_staller
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      core_wen : OUT STD_LOGIC;
      core_wten : OUT STD_LOGIC;
      xt_rsci_wen_comp : IN STD_LOGIC;
      xt_rsci_wen_comp_1 : IN STD_LOGIC;
      twiddle_rsci_wen_comp : IN STD_LOGIC;
      twiddle_h_rsci_wen_comp : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT peaseNTT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      core_wen : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (57 DOWNTO 0);
      INNER_LOOP1_C_12_tr0 : IN STD_LOGIC;
      INNER_LOOP2_C_12_tr0 : IN STD_LOGIC;
      INNER_LOOP2_C_12_tr1 : IN STD_LOGIC;
      INNER_LOOP3_C_12_tr0 : IN STD_LOGIC;
      INNER_LOOP4_C_12_tr0 : IN STD_LOGIC;
      INNER_LOOP4_C_12_tr1 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (57 DOWNTO 0);
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_12_tr0 : STD_LOGIC;
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr0 : STD_LOGIC;
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr1 : STD_LOGIC;
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_12_tr0 : STD_LOGIC;
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr0 : STD_LOGIC;
  SIGNAL peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr1 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_4_2(input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_4_2(input_3 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_5_2(input_4 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_32_3_2(input_2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_32_4_2(input_3 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_32_8_2(input_7 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(7 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_5_3_2(input_2 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 2,
      width => 32
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  mult_z_mul_cmp : mgc_hls.mgc_comps.mgc_mul_pipe
    GENERIC MAP(
      width_a => 32,
      signd_a => 0,
      width_b => 32,
      signd_b => 0,
      width_z => 52,
      clock_edge => 1,
      enable_active => 1,
      a_rst_active => 0,
      s_rst_active => 1,
      stages => 2,
      n_inreg => 2
      )
    PORT MAP(
      a => mult_z_mul_cmp_a,
      b => mult_z_mul_cmp_b,
      clk => clk,
      en => mult_z_mul_cmp_en,
      a_rst => '1',
      s_rst => rst,
      z => mult_z_mul_cmp_z_1
    );
  mult_z_mul_cmp_a <= MUX1HOT_v_32_4_2(xt_rsci_s_din_mxwt, mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm,
      (mult_z_mul_cmp_z(51 DOWNTO 20)), yt_rsci_q_d, STD_LOGIC_VECTOR'( or_dcpl_44
      & or_tmp_45 & or_tmp_46 & or_dcpl_65));
  mult_z_mul_cmp_b <= MUX1HOT_v_32_3_2(twiddle_h_rsci_s_din_mxwt, butterFly1_1_f1_sva,
      p_sva, STD_LOGIC_VECTOR'( or_tmp_48 & or_tmp_45 & or_tmp_46));
  mult_z_mul_cmp_z <= mult_z_mul_cmp_z_1;

  operator_33_true_2_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_bl_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 1,
      width_s => 3,
      width_z => 3
      )
    PORT MAP(
      a => operator_33_true_2_lshift_rg_a,
      s => operator_33_true_2_lshift_rg_s,
      z => operator_33_true_2_lshift_rg_z
    );
  operator_33_true_2_lshift_rg_a(0) <= '1';
  operator_33_true_2_lshift_rg_s <= STD_LOGIC_VECTOR'( '0' & (NOT c_1_sva) & '1');
  operator_33_true_2_lshift_itm <= operator_33_true_2_lshift_rg_z;

  operator_33_true_3_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_bl_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 1,
      width_s => 3,
      width_z => 2
      )
    PORT MAP(
      a => operator_33_true_3_lshift_rg_a,
      s => operator_33_true_3_lshift_rg_s,
      z => operator_33_true_3_lshift_rg_z
    );
  operator_33_true_3_lshift_rg_a(0) <= '1';
  operator_33_true_3_lshift_rg_s <= STD_LOGIC_VECTOR'( '0' & (NOT c_1_sva) & '0');
  operator_33_true_3_lshift_itm <= operator_33_true_3_lshift_rg_z;

  operator_33_true_1_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 1,
      width_s => 4,
      width_z => 9
      )
    PORT MAP(
      a => operator_33_true_1_lshift_rg_a,
      s => operator_33_true_1_lshift_rg_s,
      z => operator_33_true_1_lshift_rg_z
    );
  operator_33_true_1_lshift_rg_a(0) <= '1';
  operator_33_true_1_lshift_rg_s <= (MUX_v_3_2_2((z_out_7(2 DOWNTO 0)), (reg_operator_20_false_acc_ftd
      & reg_operator_20_false_acc_ftd_1), fsm_output(15))) & (NOT (fsm_output(15)));
  z_out <= operator_33_true_1_lshift_rg_z;

  peaseNTT_core_wait_dp_inst : peaseNTT_core_wait_dp
    PORT MAP(
      yt_rsc_cgo_iro => or_174_rmff,
      yt_rsci_clken_d => yt_rsci_clken_d,
      ensig_cgo_iro => or_184_rmff,
      core_wen => core_wen,
      yt_rsc_cgo => reg_yt_rsc_cgo_cse,
      ensig_cgo => reg_ensig_cgo_cse,
      mult_z_mul_cmp_en => mult_z_mul_cmp_en
    );
  peaseNTT_core_xt_rsci_inst : peaseNTT_core_xt_rsci
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsc_s_tdone => xt_rsc_s_tdone,
      xt_rsc_tr_write_done => xt_rsc_tr_write_done,
      xt_rsc_RREADY => xt_rsc_RREADY,
      xt_rsc_RVALID => xt_rsc_RVALID,
      xt_rsc_RUSER => xt_rsc_RUSER,
      xt_rsc_RLAST => xt_rsc_RLAST,
      xt_rsc_RRESP => peaseNTT_core_xt_rsci_inst_xt_rsc_RRESP,
      xt_rsc_RDATA => peaseNTT_core_xt_rsci_inst_xt_rsc_RDATA,
      xt_rsc_RID => xt_rsc_RID,
      xt_rsc_ARREADY => xt_rsc_ARREADY,
      xt_rsc_ARVALID => xt_rsc_ARVALID,
      xt_rsc_ARUSER => xt_rsc_ARUSER,
      xt_rsc_ARREGION => peaseNTT_core_xt_rsci_inst_xt_rsc_ARREGION,
      xt_rsc_ARQOS => peaseNTT_core_xt_rsci_inst_xt_rsc_ARQOS,
      xt_rsc_ARPROT => peaseNTT_core_xt_rsci_inst_xt_rsc_ARPROT,
      xt_rsc_ARCACHE => peaseNTT_core_xt_rsci_inst_xt_rsc_ARCACHE,
      xt_rsc_ARLOCK => xt_rsc_ARLOCK,
      xt_rsc_ARBURST => peaseNTT_core_xt_rsci_inst_xt_rsc_ARBURST,
      xt_rsc_ARSIZE => peaseNTT_core_xt_rsci_inst_xt_rsc_ARSIZE,
      xt_rsc_ARLEN => peaseNTT_core_xt_rsci_inst_xt_rsc_ARLEN,
      xt_rsc_ARADDR => peaseNTT_core_xt_rsci_inst_xt_rsc_ARADDR,
      xt_rsc_ARID => xt_rsc_ARID,
      xt_rsc_BREADY => xt_rsc_BREADY,
      xt_rsc_BVALID => xt_rsc_BVALID,
      xt_rsc_BUSER => xt_rsc_BUSER,
      xt_rsc_BRESP => peaseNTT_core_xt_rsci_inst_xt_rsc_BRESP,
      xt_rsc_BID => xt_rsc_BID,
      xt_rsc_WREADY => xt_rsc_WREADY,
      xt_rsc_WVALID => xt_rsc_WVALID,
      xt_rsc_WUSER => xt_rsc_WUSER,
      xt_rsc_WLAST => xt_rsc_WLAST,
      xt_rsc_WSTRB => peaseNTT_core_xt_rsci_inst_xt_rsc_WSTRB,
      xt_rsc_WDATA => peaseNTT_core_xt_rsci_inst_xt_rsc_WDATA,
      xt_rsc_AWREADY => xt_rsc_AWREADY,
      xt_rsc_AWVALID => xt_rsc_AWVALID,
      xt_rsc_AWUSER => xt_rsc_AWUSER,
      xt_rsc_AWREGION => peaseNTT_core_xt_rsci_inst_xt_rsc_AWREGION,
      xt_rsc_AWQOS => peaseNTT_core_xt_rsci_inst_xt_rsc_AWQOS,
      xt_rsc_AWPROT => peaseNTT_core_xt_rsci_inst_xt_rsc_AWPROT,
      xt_rsc_AWCACHE => peaseNTT_core_xt_rsci_inst_xt_rsc_AWCACHE,
      xt_rsc_AWLOCK => xt_rsc_AWLOCK,
      xt_rsc_AWBURST => peaseNTT_core_xt_rsci_inst_xt_rsc_AWBURST,
      xt_rsc_AWSIZE => peaseNTT_core_xt_rsci_inst_xt_rsc_AWSIZE,
      xt_rsc_AWLEN => peaseNTT_core_xt_rsci_inst_xt_rsc_AWLEN,
      xt_rsc_AWADDR => peaseNTT_core_xt_rsci_inst_xt_rsc_AWADDR,
      xt_rsc_AWID => xt_rsc_AWID,
      core_wen => core_wen,
      xt_rsci_oswt => reg_xt_rsci_oswt_cse,
      xt_rsci_wen_comp => xt_rsci_wen_comp,
      xt_rsci_oswt_1 => reg_xt_rsci_oswt_1_cse,
      xt_rsci_wen_comp_1 => xt_rsci_wen_comp_1,
      xt_rsci_s_raddr_core => peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core,
      xt_rsci_s_waddr_core => peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core,
      xt_rsci_s_din_mxwt => peaseNTT_core_xt_rsci_inst_xt_rsci_s_din_mxwt,
      xt_rsci_s_dout_core => peaseNTT_core_xt_rsci_inst_xt_rsci_s_dout_core
    );
  xt_rsc_RRESP <= peaseNTT_core_xt_rsci_inst_xt_rsc_RRESP;
  xt_rsc_RDATA <= peaseNTT_core_xt_rsci_inst_xt_rsc_RDATA;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARREGION <= xt_rsc_ARREGION;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARQOS <= xt_rsc_ARQOS;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARPROT <= xt_rsc_ARPROT;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARCACHE <= xt_rsc_ARCACHE;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARBURST <= xt_rsc_ARBURST;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARSIZE <= xt_rsc_ARSIZE;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARLEN <= xt_rsc_ARLEN;
  peaseNTT_core_xt_rsci_inst_xt_rsc_ARADDR <= xt_rsc_ARADDR;
  xt_rsc_BRESP <= peaseNTT_core_xt_rsci_inst_xt_rsc_BRESP;
  peaseNTT_core_xt_rsci_inst_xt_rsc_WSTRB <= xt_rsc_WSTRB;
  peaseNTT_core_xt_rsci_inst_xt_rsc_WDATA <= xt_rsc_WDATA;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWREGION <= xt_rsc_AWREGION;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWQOS <= xt_rsc_AWQOS;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWPROT <= xt_rsc_AWPROT;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWCACHE <= xt_rsc_AWCACHE;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWBURST <= xt_rsc_AWBURST;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWSIZE <= xt_rsc_AWSIZE;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWLEN <= xt_rsc_AWLEN;
  peaseNTT_core_xt_rsci_inst_xt_rsc_AWADDR <= xt_rsc_AWADDR;
  peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core <= reg_xt_rsci_s_raddr_core_9_1_cse
      & xt_rsci_s_raddr_core_0;
  peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core <= xt_rsci_s_waddr_core_9 & reg_xt_rsci_s_raddr_core_9_1_cse;
  xt_rsci_s_din_mxwt <= peaseNTT_core_xt_rsci_inst_xt_rsci_s_din_mxwt;
  peaseNTT_core_xt_rsci_inst_xt_rsci_s_dout_core <= xt_rsci_s_dout_core;

  peaseNTT_core_twiddle_rsci_inst : peaseNTT_core_twiddle_rsci
    PORT MAP(
      clk => clk,
      rst => rst,
      twiddle_rsc_s_tdone => twiddle_rsc_s_tdone,
      twiddle_rsc_tr_write_done => twiddle_rsc_tr_write_done,
      twiddle_rsc_RREADY => twiddle_rsc_RREADY,
      twiddle_rsc_RVALID => twiddle_rsc_RVALID,
      twiddle_rsc_RUSER => twiddle_rsc_RUSER,
      twiddle_rsc_RLAST => twiddle_rsc_RLAST,
      twiddle_rsc_RRESP => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RRESP,
      twiddle_rsc_RDATA => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RDATA,
      twiddle_rsc_RID => twiddle_rsc_RID,
      twiddle_rsc_ARREADY => twiddle_rsc_ARREADY,
      twiddle_rsc_ARVALID => twiddle_rsc_ARVALID,
      twiddle_rsc_ARUSER => twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARREGION,
      twiddle_rsc_ARQOS => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARQOS,
      twiddle_rsc_ARPROT => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARPROT,
      twiddle_rsc_ARCACHE => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK => twiddle_rsc_ARLOCK,
      twiddle_rsc_ARBURST => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARBURST,
      twiddle_rsc_ARSIZE => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARSIZE,
      twiddle_rsc_ARLEN => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARADDR,
      twiddle_rsc_ARID => twiddle_rsc_ARID,
      twiddle_rsc_BREADY => twiddle_rsc_BREADY,
      twiddle_rsc_BVALID => twiddle_rsc_BVALID,
      twiddle_rsc_BUSER => twiddle_rsc_BUSER,
      twiddle_rsc_BRESP => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_BRESP,
      twiddle_rsc_BID => twiddle_rsc_BID,
      twiddle_rsc_WREADY => twiddle_rsc_WREADY,
      twiddle_rsc_WVALID => twiddle_rsc_WVALID,
      twiddle_rsc_WUSER => twiddle_rsc_WUSER,
      twiddle_rsc_WLAST => twiddle_rsc_WLAST,
      twiddle_rsc_WSTRB => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WDATA,
      twiddle_rsc_AWREADY => twiddle_rsc_AWREADY,
      twiddle_rsc_AWVALID => twiddle_rsc_AWVALID,
      twiddle_rsc_AWUSER => twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWREGION,
      twiddle_rsc_AWQOS => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWQOS,
      twiddle_rsc_AWPROT => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWPROT,
      twiddle_rsc_AWCACHE => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK => twiddle_rsc_AWLOCK,
      twiddle_rsc_AWBURST => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWBURST,
      twiddle_rsc_AWSIZE => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWSIZE,
      twiddle_rsc_AWLEN => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR => peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWADDR,
      twiddle_rsc_AWID => twiddle_rsc_AWID,
      core_wen => core_wen,
      twiddle_rsci_oswt => reg_twiddle_rsci_oswt_cse,
      twiddle_rsci_wen_comp => twiddle_rsci_wen_comp,
      twiddle_rsci_s_raddr_core => peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core,
      twiddle_rsci_s_din_mxwt => peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_din_mxwt
    );
  twiddle_rsc_RRESP <= peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RRESP;
  twiddle_rsc_RDATA <= peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_RDATA;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARREGION <= twiddle_rsc_ARREGION;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARQOS <= twiddle_rsc_ARQOS;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARPROT <= twiddle_rsc_ARPROT;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARCACHE <= twiddle_rsc_ARCACHE;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARBURST <= twiddle_rsc_ARBURST;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARSIZE <= twiddle_rsc_ARSIZE;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARLEN <= twiddle_rsc_ARLEN;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_ARADDR <= twiddle_rsc_ARADDR;
  twiddle_rsc_BRESP <= peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_BRESP;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WSTRB <= twiddle_rsc_WSTRB;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_WDATA <= twiddle_rsc_WDATA;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWREGION <= twiddle_rsc_AWREGION;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWQOS <= twiddle_rsc_AWQOS;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWPROT <= twiddle_rsc_AWPROT;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWCACHE <= twiddle_rsc_AWCACHE;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWBURST <= twiddle_rsc_AWBURST;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWSIZE <= twiddle_rsc_AWSIZE;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWLEN <= twiddle_rsc_AWLEN;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsc_AWADDR <= twiddle_rsc_AWADDR;
  peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core <= '0' & reg_twiddle_rsci_s_raddr_core_8_cse
      & reg_twiddle_rsci_s_raddr_core_7_3_cse & reg_twiddle_rsci_s_raddr_core_2_cse
      & reg_twiddle_rsci_s_raddr_core_1_0_cse;
  twiddle_rsci_s_din_mxwt <= peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_din_mxwt;

  peaseNTT_core_twiddle_h_rsci_inst : peaseNTT_core_twiddle_h_rsci
    PORT MAP(
      clk => clk,
      rst => rst,
      twiddle_h_rsc_s_tdone => twiddle_h_rsc_s_tdone,
      twiddle_h_rsc_tr_write_done => twiddle_h_rsc_tr_write_done,
      twiddle_h_rsc_RREADY => twiddle_h_rsc_RREADY,
      twiddle_h_rsc_RVALID => twiddle_h_rsc_RVALID,
      twiddle_h_rsc_RUSER => twiddle_h_rsc_RUSER,
      twiddle_h_rsc_RLAST => twiddle_h_rsc_RLAST,
      twiddle_h_rsc_RRESP => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RRESP,
      twiddle_h_rsc_RDATA => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RDATA,
      twiddle_h_rsc_RID => twiddle_h_rsc_RID,
      twiddle_h_rsc_ARREADY => twiddle_h_rsc_ARREADY,
      twiddle_h_rsc_ARVALID => twiddle_h_rsc_ARVALID,
      twiddle_h_rsc_ARUSER => twiddle_h_rsc_ARUSER,
      twiddle_h_rsc_ARREGION => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARREGION,
      twiddle_h_rsc_ARQOS => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARQOS,
      twiddle_h_rsc_ARPROT => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARPROT,
      twiddle_h_rsc_ARCACHE => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARCACHE,
      twiddle_h_rsc_ARLOCK => twiddle_h_rsc_ARLOCK,
      twiddle_h_rsc_ARBURST => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARBURST,
      twiddle_h_rsc_ARSIZE => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARSIZE,
      twiddle_h_rsc_ARLEN => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARLEN,
      twiddle_h_rsc_ARADDR => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARADDR,
      twiddle_h_rsc_ARID => twiddle_h_rsc_ARID,
      twiddle_h_rsc_BREADY => twiddle_h_rsc_BREADY,
      twiddle_h_rsc_BVALID => twiddle_h_rsc_BVALID,
      twiddle_h_rsc_BUSER => twiddle_h_rsc_BUSER,
      twiddle_h_rsc_BRESP => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_BRESP,
      twiddle_h_rsc_BID => twiddle_h_rsc_BID,
      twiddle_h_rsc_WREADY => twiddle_h_rsc_WREADY,
      twiddle_h_rsc_WVALID => twiddle_h_rsc_WVALID,
      twiddle_h_rsc_WUSER => twiddle_h_rsc_WUSER,
      twiddle_h_rsc_WLAST => twiddle_h_rsc_WLAST,
      twiddle_h_rsc_WSTRB => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WSTRB,
      twiddle_h_rsc_WDATA => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WDATA,
      twiddle_h_rsc_AWREADY => twiddle_h_rsc_AWREADY,
      twiddle_h_rsc_AWVALID => twiddle_h_rsc_AWVALID,
      twiddle_h_rsc_AWUSER => twiddle_h_rsc_AWUSER,
      twiddle_h_rsc_AWREGION => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWREGION,
      twiddle_h_rsc_AWQOS => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWQOS,
      twiddle_h_rsc_AWPROT => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWPROT,
      twiddle_h_rsc_AWCACHE => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWCACHE,
      twiddle_h_rsc_AWLOCK => twiddle_h_rsc_AWLOCK,
      twiddle_h_rsc_AWBURST => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWBURST,
      twiddle_h_rsc_AWSIZE => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWSIZE,
      twiddle_h_rsc_AWLEN => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWLEN,
      twiddle_h_rsc_AWADDR => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWADDR,
      twiddle_h_rsc_AWID => twiddle_h_rsc_AWID,
      core_wen => core_wen,
      twiddle_h_rsci_oswt => reg_twiddle_rsci_oswt_cse,
      twiddle_h_rsci_wen_comp => twiddle_h_rsci_wen_comp,
      twiddle_h_rsci_s_raddr_core => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core,
      twiddle_h_rsci_s_din_mxwt => peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_din_mxwt
    );
  twiddle_h_rsc_RRESP <= peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RRESP;
  twiddle_h_rsc_RDATA <= peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_RDATA;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARREGION <= twiddle_h_rsc_ARREGION;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARQOS <= twiddle_h_rsc_ARQOS;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARPROT <= twiddle_h_rsc_ARPROT;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARCACHE <= twiddle_h_rsc_ARCACHE;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARBURST <= twiddle_h_rsc_ARBURST;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARSIZE <= twiddle_h_rsc_ARSIZE;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARLEN <= twiddle_h_rsc_ARLEN;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_ARADDR <= twiddle_h_rsc_ARADDR;
  twiddle_h_rsc_BRESP <= peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_BRESP;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WSTRB <= twiddle_h_rsc_WSTRB;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_WDATA <= twiddle_h_rsc_WDATA;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWREGION <= twiddle_h_rsc_AWREGION;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWQOS <= twiddle_h_rsc_AWQOS;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWPROT <= twiddle_h_rsc_AWPROT;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWCACHE <= twiddle_h_rsc_AWCACHE;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWBURST <= twiddle_h_rsc_AWBURST;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWSIZE <= twiddle_h_rsc_AWSIZE;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWLEN <= twiddle_h_rsc_AWLEN;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsc_AWADDR <= twiddle_h_rsc_AWADDR;
  peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core <= '0' & reg_twiddle_rsci_s_raddr_core_8_cse
      & reg_twiddle_rsci_s_raddr_core_7_3_cse & reg_twiddle_rsci_s_raddr_core_2_cse
      & reg_twiddle_rsci_s_raddr_core_1_0_cse;
  twiddle_h_rsci_s_din_mxwt <= peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_din_mxwt;

  peaseNTT_core_xt_rsc_triosy_obj_inst : peaseNTT_core_xt_rsc_triosy_obj
    PORT MAP(
      xt_rsc_triosy_lz => xt_rsc_triosy_lz,
      core_wten => core_wten,
      xt_rsc_triosy_obj_iswt0 => reg_xt_rsc_triosy_obj_iswt0_cse
    );
  peaseNTT_core_p_rsc_triosy_obj_inst : peaseNTT_core_p_rsc_triosy_obj
    PORT MAP(
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      core_wten => core_wten,
      p_rsc_triosy_obj_iswt0 => reg_xt_rsc_triosy_obj_iswt0_cse
    );
  peaseNTT_core_r_rsc_triosy_obj_inst : peaseNTT_core_r_rsc_triosy_obj
    PORT MAP(
      r_rsc_triosy_lz => r_rsc_triosy_lz,
      core_wten => core_wten,
      r_rsc_triosy_obj_iswt0 => reg_xt_rsc_triosy_obj_iswt0_cse
    );
  peaseNTT_core_twiddle_rsc_triosy_obj_inst : peaseNTT_core_twiddle_rsc_triosy_obj
    PORT MAP(
      twiddle_rsc_triosy_lz => twiddle_rsc_triosy_lz,
      core_wten => core_wten,
      twiddle_rsc_triosy_obj_iswt0 => reg_xt_rsc_triosy_obj_iswt0_cse
    );
  peaseNTT_core_twiddle_h_rsc_triosy_obj_inst : peaseNTT_core_twiddle_h_rsc_triosy_obj
    PORT MAP(
      twiddle_h_rsc_triosy_lz => twiddle_h_rsc_triosy_lz,
      core_wten => core_wten,
      twiddle_h_rsc_triosy_obj_iswt0 => reg_xt_rsc_triosy_obj_iswt0_cse
    );
  peaseNTT_core_staller_inst : peaseNTT_core_staller
    PORT MAP(
      clk => clk,
      rst => rst,
      core_wen => core_wen,
      core_wten => core_wten,
      xt_rsci_wen_comp => xt_rsci_wen_comp,
      xt_rsci_wen_comp_1 => xt_rsci_wen_comp_1,
      twiddle_rsci_wen_comp => twiddle_rsci_wen_comp,
      twiddle_h_rsci_wen_comp => twiddle_h_rsci_wen_comp
    );
  peaseNTT_core_core_fsm_inst : peaseNTT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      core_wen => core_wen,
      fsm_output => peaseNTT_core_core_fsm_inst_fsm_output,
      INNER_LOOP1_C_12_tr0 => peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_12_tr0,
      INNER_LOOP2_C_12_tr0 => peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr0,
      INNER_LOOP2_C_12_tr1 => peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr1,
      INNER_LOOP3_C_12_tr0 => peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_12_tr0,
      INNER_LOOP4_C_12_tr0 => peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr0,
      INNER_LOOP4_C_12_tr1 => peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr1
    );
  fsm_output <= peaseNTT_core_core_fsm_inst_fsm_output;
  peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_12_tr0 <= INNER_LOOP1_r_9_0_sva_1(9);
  peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr0 <= ((reg_operator_20_false_acc_ftd_1(0))
      XOR (reg_operator_20_false_acc_ftd_1(1))) AND (INNER_LOOP1_r_9_0_sva_1(9));
  peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_12_tr1 <= NOT (INNER_LOOP1_r_9_0_sva_1(9));
  peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_12_tr0 <= INNER_LOOP1_r_9_0_sva_1(9);
  peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr0 <= and_dcpl_6;
  peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_12_tr1 <= NOT (INNER_LOOP1_r_9_0_sva_1(9));

  or_174_rmff <= (fsm_output(41)) OR (fsm_output(42)) OR (fsm_output(18)) OR (fsm_output(14))
      OR (fsm_output(13)) OR (fsm_output(17)) OR or_dcpl_55 OR (fsm_output(40)) OR
      (fsm_output(12)) OR (fsm_output(44)) OR (fsm_output(16));
  or_184_rmff <= (fsm_output(36)) OR (fsm_output(33)) OR (fsm_output(50)) OR (fsm_output(47))
      OR (fsm_output(35)) OR (fsm_output(49)) OR (fsm_output(22)) OR (fsm_output(21))
      OR (fsm_output(20)) OR (fsm_output(34)) OR (fsm_output(48)) OR (fsm_output(19))
      OR (fsm_output(18)) OR (fsm_output(8)) OR (fsm_output(7)) OR or_dcpl_65 OR
      (fsm_output(46)) OR (fsm_output(6)) OR (fsm_output(5)) OR (fsm_output(31))
      OR or_dcpl_69 OR (fsm_output(3));
  operator_20_false_and_2_ssc <= core_wen AND ((NOT(((NOT (INNER_LOOP1_r_9_0_sva_1(9)))
      AND (fsm_output(28))) OR (NOT((NOT and_dcpl_18) OR (fsm_output(52)) OR (fsm_output(51))
      OR (fsm_output(49)) OR (fsm_output(48)) OR (fsm_output(45)) OR (fsm_output(46))
      OR (NOT and_dcpl_11) OR (fsm_output(57)) OR (fsm_output(53)) OR (fsm_output(54))
      OR (NOT and_dcpl_8) OR (fsm_output(0)) OR (fsm_output(44)))))) OR (fsm_output(1))
      OR (fsm_output(29)));
  operator_20_false_or_m1c <= ((INNER_LOOP1_r_9_0_sva_1(9)) AND (fsm_output(28)))
      OR or_dcpl_40 OR or_dcpl_36 OR or_dcpl_55 OR CONV_SL_1_1(fsm_output(56 DOWNTO
      55)/=STD_LOGIC_VECTOR'("00")) OR or_dcpl_31 OR (fsm_output(43)) OR (fsm_output(0))
      OR (fsm_output(44));
  and_290_cse <= CONV_SL_1_1(fsm_output(14 DOWNTO 2)=STD_LOGIC_VECTOR'("0000000000000"));
  INNER_LOOP1_tw_and_psp_sva_1 <= (operator_33_true_return_8_0_sva_8 & operator_33_true_return_8_0_sva_7_0)
      AND INNER_LOOP1_r_9_0_sva_8_0;
  modulo_add_base_sva_mx0w2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva)
      + UNSIGNED(reg_mult_res_lpi_3_dfm_cse), 32));
  modulo_add_base_1_sva_mx0w5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva)
      + UNSIGNED(reg_mult_res_lpi_3_dfm_cse), 32));
  modulo_add_base_2_sva_mx0w6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva)
      + UNSIGNED(reg_mult_res_lpi_3_dfm_cse), 32));
  modulo_add_base_3_sva_mx0w7 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva)
      + UNSIGNED(reg_mult_res_lpi_3_dfm_cse), 32));
  INNER_LOOP2_tw_and_psp_7_0_sva_1 <= operator_33_true_return_8_0_sva_7_0 AND (INNER_LOOP1_r_9_0_sva_8_0(7
      DOWNTO 0));
  butterFly2_tw_and_psp_2_0_sva_1 <= (reg_operator_20_false_acc_ftd & reg_operator_20_false_acc_ftd_1)
      AND (INNER_LOOP1_r_9_0_sva_8_0(2 DOWNTO 0));
  and_dcpl_6 <= c_1_sva AND (INNER_LOOP1_r_9_0_sva_1(9));
  and_dcpl_8 <= NOT((fsm_output(43)) OR (fsm_output(28)));
  and_dcpl_11 <= NOT(CONV_SL_1_1(fsm_output(56 DOWNTO 55)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_18 <= NOT((fsm_output(50)) OR (fsm_output(47)));
  or_dcpl_31 <= CONV_SL_1_1(fsm_output(54 DOWNTO 53)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_36 <= CONV_SL_1_1(fsm_output(49 DOWNTO 48)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_40 <= (fsm_output(50)) OR (fsm_output(47)) OR (fsm_output(52)) OR (fsm_output(51));
  or_dcpl_43 <= (fsm_output(2)) OR (fsm_output(30));
  or_dcpl_44 <= (fsm_output(31)) OR (fsm_output(3));
  or_dcpl_47 <= (fsm_output(27)) OR (fsm_output(55));
  and_dcpl_24 <= NOT((fsm_output(2)) OR (fsm_output(30)));
  or_dcpl_49 <= (fsm_output(44)) OR (fsm_output(16));
  or_dcpl_51 <= (fsm_output(30)) OR (fsm_output(44));
  or_dcpl_55 <= CONV_SL_1_1(fsm_output(46 DOWNTO 45)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_64 <= (fsm_output(41)) OR (fsm_output(13));
  or_dcpl_65 <= (fsm_output(17)) OR (fsm_output(45));
  or_dcpl_69 <= (fsm_output(32)) OR (fsm_output(4));
  or_dcpl_91 <= (fsm_output(18)) OR (fsm_output(46));
  or_tmp_45 <= or_dcpl_91 OR or_dcpl_69;
  or_tmp_46 <= (fsm_output(20)) OR (fsm_output(34)) OR (fsm_output(48)) OR (fsm_output(6));
  or_tmp_48 <= or_dcpl_65 OR or_dcpl_44;
  INNER_LOOP1_r_9_0_sva_8_0_mx0c0 <= (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(43))
      OR (fsm_output(15));
  butterFly1_1_f1_sva_mx0c3 <= (modulo_add_3_slc_32_svs_st AND (fsm_output(54)))
      OR (reg_modulo_add_slc_32_svs_st_cse AND (fsm_output(26))) OR (reg_modulo_add_slc_32_svs_st_cse
      AND (fsm_output(12))) OR (reg_modulo_add_slc_32_svs_st_cse AND (fsm_output(40)));
  mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm_mx0c1 <= (fsm_output(35)) OR (fsm_output(49))
      OR (fsm_output(21)) OR (fsm_output(7));
  yt_rsci_d_d <= MUX1HOT_v_32_3_2(modulo_sub_mux_itm, butterFly1_1_f1_sva, modulo_sub_1_mux_itm,
      STD_LOGIC_VECTOR'( (fsm_output(12)) & or_dcpl_64 & (fsm_output(40))));
  yt_rsci_radr_d <= INNER_LOOP1_r_9_0_sva_8_0 & (NOT or_dcpl_65);
  yt_rsci_wadr_d <= (NOT or_dcpl_64) & INNER_LOOP1_r_9_0_sva_8_0;
  yt_rsci_we_d_pff <= or_dcpl_64 OR (fsm_output(40)) OR (fsm_output(12));
  yt_rsci_readA_r_ram_ir_internal_RMASK_B_d <= or_dcpl_65 OR or_dcpl_49;
  or_tmp_98 <= (fsm_output(44)) OR (fsm_output(30)) OR (fsm_output(16)) OR (fsm_output(2));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (core_wen AND ((fsm_output(57)) OR (fsm_output(0)))) = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        c_1_sva <= '0';
      ELSIF ( (core_wen AND ((fsm_output(56)) OR (fsm_output(28)) OR (fsm_output(0))))
          = '1' ) THEN
        c_1_sva <= c_mux_1_nl OR (fsm_output(0));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( core_wen = '1' ) THEN
        xt_rsci_s_raddr_core_0 <= NOT and_dcpl_24;
        reg_xt_rsci_s_raddr_core_9_1_cse <= INNER_LOOP1_r_9_0_sva_8_0;
        xt_rsci_s_waddr_core_9 <= (fsm_output(54)) OR (fsm_output(26));
        xt_rsci_s_dout_core <= MUX1HOT_v_32_3_2(modulo_sub_1_mux_itm, butterFly1_1_f1_sva,
            modulo_sub_3_mux_itm, STD_LOGIC_VECTOR'( (fsm_output(26)) & or_dcpl_47
            & (fsm_output(54))));
        reg_twiddle_rsci_s_raddr_core_2_cse <= MUX1HOT_s_1_4_2((INNER_LOOP1_tw_and_psp_sva_1(2)),
            (INNER_LOOP2_tw_and_psp_7_0_sva_1(2)), (butterFly2_tw_and_psp_2_0_sva_1(2)),
            (INNER_LOOP1_r_9_0_sva_8_0(2)), STD_LOGIC_VECTOR'( (fsm_output(2)) &
            (fsm_output(16)) & (fsm_output(30)) & (fsm_output(44))));
        reg_twiddle_rsci_s_raddr_core_7_3_cse <= MUX1HOT_v_5_3_2((INNER_LOOP1_tw_and_psp_sva_1(7
            DOWNTO 3)), (INNER_LOOP2_tw_and_psp_7_0_sva_1(7 DOWNTO 3)), (INNER_LOOP1_r_9_0_sva_8_0(7
            DOWNTO 3)), STD_LOGIC_VECTOR'( (fsm_output(2)) & (fsm_output(16)) & or_dcpl_51));
        reg_twiddle_rsci_s_raddr_core_1_0_cse <= MUX1HOT_v_2_4_2((INNER_LOOP1_tw_and_psp_sva_1(1
            DOWNTO 0)), (INNER_LOOP2_tw_and_psp_7_0_sva_1(1 DOWNTO 0)), (butterFly2_tw_and_psp_2_0_sva_1(1
            DOWNTO 0)), butterFly2_1_tw_and_nl, STD_LOGIC_VECTOR'( (fsm_output(2))
            & (fsm_output(16)) & (fsm_output(30)) & (fsm_output(44))));
        reg_twiddle_rsci_s_raddr_core_8_cse <= MUX_s_1_2_2((INNER_LOOP1_tw_and_psp_sva_1(8)),
            (INNER_LOOP1_r_9_0_sva_8_0(8)), or_173_nl);
        mult_res_sva <= z_out_2;
        reg_mult_res_lpi_3_dfm_cse <= MUX_v_32_2_2(z_out_2, mult_res_sva, acc_4_nl(33));
        modulo_sub_mux_itm <= MUX_v_32_2_2(('0' & (z_out_1(30 DOWNTO 0))), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modulo_sub_qif_acc_nl),
            32)), z_out_1(31));
        modulo_sub_1_mux_itm <= MUX_v_32_2_2(('0' & (z_out_4(30 DOWNTO 0))), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modulo_sub_1_qif_acc_nl),
            32)), z_out_4(31));
        modulo_sub_3_mux_itm <= MUX_v_32_2_2(('0' & (z_out_1(30 DOWNTO 0))), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modulo_sub_3_qif_acc_nl),
            32)), z_out_1(31));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_xt_rsci_oswt_cse <= '0';
        reg_xt_rsci_oswt_1_cse <= '0';
        reg_twiddle_rsci_oswt_cse <= '0';
        reg_yt_rsc_cgo_cse <= '0';
        reg_xt_rsc_triosy_obj_iswt0_cse <= '0';
        reg_ensig_cgo_cse <= '0';
        reg_modulo_add_slc_32_svs_st_cse <= '0';
        modulo_add_3_slc_32_svs_st <= '0';
      ELSIF ( core_wen = '1' ) THEN
        reg_xt_rsci_oswt_cse <= or_dcpl_44 OR or_dcpl_43;
        reg_xt_rsci_oswt_1_cse <= or_dcpl_47 OR (fsm_output(54)) OR (fsm_output(26));
        reg_twiddle_rsci_oswt_cse <= or_dcpl_43 OR or_dcpl_49;
        reg_yt_rsc_cgo_cse <= or_174_rmff;
        reg_xt_rsc_triosy_obj_iswt0_cse <= and_dcpl_6 AND (fsm_output(56));
        reg_ensig_cgo_cse <= or_184_rmff;
        reg_modulo_add_slc_32_svs_st_cse <= acc_5_nl(33);
        modulo_add_3_slc_32_svs_st <= modulo_add_3_acc_1_nl(32);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_operator_20_false_acc_ftd <= '0';
      ELSIF ( operator_20_false_and_2_ssc = '1' ) THEN
        reg_operator_20_false_acc_ftd <= MUX_s_1_2_2((z_out_7(2)), (operator_33_true_2_lshift_itm(2)),
            fsm_output(29));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_operator_20_false_acc_ftd_1 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (operator_20_false_and_2_ssc AND (NOT(or_dcpl_40 OR or_dcpl_36 OR (fsm_output(45))
          OR (fsm_output(46)) OR (fsm_output(56)) OR (fsm_output(55)) OR or_dcpl_31
          OR (fsm_output(44))))) = '1' ) THEN
        reg_operator_20_false_acc_ftd_1 <= MUX1HOT_v_2_5_2((z_out_7(1 DOWNTO 0)),
            STD_LOGIC_VECTOR'( "10"), STD_LOGIC_VECTOR'( reg_operator_20_false_acc_ftd
            & (reg_operator_20_false_acc_ftd_1(1))), operator_33_true_3_lshift_itm,
            (operator_33_true_2_lshift_itm(1 DOWNTO 0)), STD_LOGIC_VECTOR'( (fsm_output(1))
            & operator_20_false_and_3_nl & operator_20_false_and_4_nl & (fsm_output(43))
            & (fsm_output(29))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (core_wen AND (INNER_LOOP1_r_9_0_sva_8_0_mx0c0 OR (fsm_output(42)) OR
          (fsm_output(14)) OR (fsm_output(56)) OR (fsm_output(28)))) = '1' ) THEN
        INNER_LOOP1_r_9_0_sva_8_0 <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"),
            (INNER_LOOP1_r_9_0_sva_1(8 DOWNTO 0)), INNER_LOOP1_r_not_4_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (and_290_cse AND core_wen) = '1' ) THEN
        operator_33_true_return_8_0_sva_8 <= z_out(8);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (and_290_cse AND CONV_SL_1_1(fsm_output(28 DOWNTO 16)=STD_LOGIC_VECTOR'("0000000000000"))
          AND core_wen) = '1' ) THEN
        operator_33_true_return_8_0_sva_7_0 <= z_out(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP1_r_9_0_sva_1 <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (core_wen AND (NOT(and_dcpl_24 AND (NOT (fsm_output(44))) AND (NOT
          (fsm_output(16)))))) = '1' ) THEN
        INNER_LOOP1_r_9_0_sva_1 <= z_out_7;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (core_wen AND (or_tmp_48 OR or_dcpl_69 OR (fsm_output(11)) OR butterFly1_1_f1_sva_mx0c3
          OR or_dcpl_91 OR (fsm_output(25)) OR (fsm_output(39)) OR (fsm_output(53))))
          = '1' ) THEN
        butterFly1_1_f1_sva <= MUX1HOT_v_32_8_2(twiddle_rsci_s_din_mxwt, xt_rsci_s_din_mxwt,
            modulo_add_base_sva_mx0w2, z_out_1, yt_rsci_q_d, modulo_add_base_1_sva_mx0w5,
            modulo_add_base_2_sva_mx0w6, modulo_add_base_3_sva_mx0w7, STD_LOGIC_VECTOR'(
            or_tmp_48 & or_dcpl_69 & (fsm_output(11)) & butterFly1_1_f1_sva_mx0c3
            & or_dcpl_91 & (fsm_output(25)) & (fsm_output(39)) & (fsm_output(53))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (core_wen AND (or_dcpl_44 OR mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm_mx0c1
          OR or_dcpl_65)) = '1' ) THEN
        mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm <= MUX1HOT_v_32_3_2(xt_rsci_s_din_mxwt,
            (mult_z_mul_cmp_z(31 DOWNTO 0)), yt_rsci_q_d, STD_LOGIC_VECTOR'( or_dcpl_44
            & mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm_mx0c1 & or_dcpl_65));
      END IF;
    END IF;
  END PROCESS;
  c_c_or_1_nl <= c_1_sva OR (INNER_LOOP1_r_9_0_sva_1(9));
  c_mux_1_nl <= MUX_s_1_2_2((reg_operator_20_false_acc_ftd_1(0)), c_c_or_1_nl, fsm_output(56));
  butterFly2_1_tw_and_nl <= reg_operator_20_false_acc_ftd_1 AND (INNER_LOOP1_r_9_0_sva_8_0(1
      DOWNTO 0));
  or_173_nl <= or_dcpl_51 OR (fsm_output(16));
  acc_4_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & mult_res_sva & '1') +
      CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED((NOT p_sva) & '1'), 33), 34), 34));
  modulo_sub_qif_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (z_out_1(30
      DOWNTO 0))) + UNSIGNED(p_sva), 32));
  modulo_add_mux1h_3_nl <= MUX1HOT_v_32_3_2((NOT modulo_add_base_sva_mx0w2), (NOT
      modulo_add_base_1_sva_mx0w5), (NOT modulo_add_base_2_sva_mx0w6), STD_LOGIC_VECTOR'(
      (fsm_output(11)) & (fsm_output(25)) & (fsm_output(39))));
  acc_5_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & p_sva & '1') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(modulo_add_mux1h_3_nl
      & '1'), 33), 34), 34));
  modulo_sub_1_qif_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (z_out_4(30
      DOWNTO 0))) + UNSIGNED(p_sva), 32));
  modulo_sub_3_qif_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (z_out_1(30
      DOWNTO 0))) + UNSIGNED(p_sva), 32));
  modulo_add_3_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & p_sva) +
      CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT modulo_add_base_3_sva_mx0w7), 32),
      33) + UNSIGNED'( "000000000000000000000000000000001"), 33));
  operator_20_false_and_3_nl <= (NOT((NOT and_dcpl_18) OR (fsm_output(52)) OR (fsm_output(51))
      OR (fsm_output(49)) OR (fsm_output(48)) OR (fsm_output(45)) OR (fsm_output(46))
      OR (NOT and_dcpl_11) OR CONV_SL_1_1(fsm_output(54 DOWNTO 53)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT and_dcpl_8) OR (fsm_output(44)))) AND operator_20_false_or_m1c;
  operator_20_false_and_4_nl <= (fsm_output(28)) AND operator_20_false_or_m1c;
  INNER_LOOP1_r_not_4_nl <= NOT INNER_LOOP1_r_9_0_sva_8_0_mx0c0;
  modulo_add_qif_or_1_nl <= (fsm_output(11)) OR (fsm_output(53));
  modulo_add_qif_modulo_add_qif_mux_1_nl <= MUX_v_32_2_2((NOT p_sva), (NOT reg_mult_res_lpi_3_dfm_cse),
      modulo_add_qif_or_1_nl);
  acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva & '1') +
      UNSIGNED(modulo_add_qif_modulo_add_qif_mux_1_nl & '1'), 33));
  z_out_1 <= acc_nl(32 DOWNTO 1);
  mult_res_or_2_cse <= (fsm_output(10)) OR (fsm_output(24)) OR (fsm_output(38)) OR
      (fsm_output(52));
  mult_res_mux_2_nl <= MUX_v_32_2_2(mult_1_z_slc_mult_z_mul_cmp_z_31_0_itm, mult_res_sva,
      mult_res_or_2_cse);
  mult_res_mult_res_mux_1_nl <= MUX_v_32_2_2((NOT (mult_z_mul_cmp_z(31 DOWNTO 0))),
      (NOT p_sva), mult_res_or_2_cse);
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(mult_res_mux_2_nl & '1') +
      UNSIGNED(mult_res_mult_res_mux_1_nl & '1'), 33));
  z_out_2 <= acc_1_nl(32 DOWNTO 1);
  acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(butterFly1_1_f1_sva & '1')
      + UNSIGNED((NOT reg_mult_res_lpi_3_dfm_cse) & '1'), 33));
  z_out_4 <= acc_3_nl(32 DOWNTO 1);
  operator_20_false_mux_3_nl <= MUX_v_9_2_2((STD_LOGIC_VECTOR'( "000000") & reg_operator_20_false_acc_ftd_1
      & c_1_sva), INNER_LOOP1_r_9_0_sva_8_0, or_tmp_98);
  z_out_7 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_20_false_mux_3_nl),
      10) + CONV_UNSIGNED(CONV_SIGNED(SIGNED'( (NOT or_tmp_98) & '1'), 2), 10), 10));
END v5;

-- ------------------------------------------------------------------
--  Design Unit:    peaseNTT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY amba_lib;
USE amba_lib.amba_comps.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY peaseNTT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_s_tdone : IN STD_LOGIC;
    xt_rsc_tr_write_done : IN STD_LOGIC;
    xt_rsc_RREADY : IN STD_LOGIC;
    xt_rsc_RVALID : OUT STD_LOGIC;
    xt_rsc_RUSER : OUT STD_LOGIC;
    xt_rsc_RLAST : OUT STD_LOGIC;
    xt_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_RID : OUT STD_LOGIC;
    xt_rsc_ARREADY : OUT STD_LOGIC;
    xt_rsc_ARVALID : IN STD_LOGIC;
    xt_rsc_ARUSER : IN STD_LOGIC;
    xt_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_ARLOCK : IN STD_LOGIC;
    xt_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_ARID : IN STD_LOGIC;
    xt_rsc_BREADY : IN STD_LOGIC;
    xt_rsc_BVALID : OUT STD_LOGIC;
    xt_rsc_BUSER : OUT STD_LOGIC;
    xt_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_BID : OUT STD_LOGIC;
    xt_rsc_WREADY : OUT STD_LOGIC;
    xt_rsc_WVALID : IN STD_LOGIC;
    xt_rsc_WUSER : IN STD_LOGIC;
    xt_rsc_WLAST : IN STD_LOGIC;
    xt_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    xt_rsc_AWREADY : OUT STD_LOGIC;
    xt_rsc_AWVALID : IN STD_LOGIC;
    xt_rsc_AWUSER : IN STD_LOGIC;
    xt_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    xt_rsc_AWLOCK : IN STD_LOGIC;
    xt_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    xt_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    xt_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    xt_rsc_AWID : IN STD_LOGIC;
    xt_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_dat : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    r_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_s_tdone : IN STD_LOGIC;
    twiddle_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_rsc_RREADY : IN STD_LOGIC;
    twiddle_rsc_RVALID : OUT STD_LOGIC;
    twiddle_rsc_RUSER : OUT STD_LOGIC;
    twiddle_rsc_RLAST : OUT STD_LOGIC;
    twiddle_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_RID : OUT STD_LOGIC;
    twiddle_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_rsc_ARVALID : IN STD_LOGIC;
    twiddle_rsc_ARUSER : IN STD_LOGIC;
    twiddle_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_ARID : IN STD_LOGIC;
    twiddle_rsc_BREADY : IN STD_LOGIC;
    twiddle_rsc_BVALID : OUT STD_LOGIC;
    twiddle_rsc_BUSER : OUT STD_LOGIC;
    twiddle_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_BID : OUT STD_LOGIC;
    twiddle_rsc_WREADY : OUT STD_LOGIC;
    twiddle_rsc_WVALID : IN STD_LOGIC;
    twiddle_rsc_WUSER : IN STD_LOGIC;
    twiddle_rsc_WLAST : IN STD_LOGIC;
    twiddle_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_rsc_AWVALID : IN STD_LOGIC;
    twiddle_rsc_AWUSER : IN STD_LOGIC;
    twiddle_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_rsc_AWID : IN STD_LOGIC;
    twiddle_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_h_rsc_s_tdone : IN STD_LOGIC;
    twiddle_h_rsc_tr_write_done : IN STD_LOGIC;
    twiddle_h_rsc_RREADY : IN STD_LOGIC;
    twiddle_h_rsc_RVALID : OUT STD_LOGIC;
    twiddle_h_rsc_RUSER : OUT STD_LOGIC;
    twiddle_h_rsc_RLAST : OUT STD_LOGIC;
    twiddle_h_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_RID : OUT STD_LOGIC;
    twiddle_h_rsc_ARREADY : OUT STD_LOGIC;
    twiddle_h_rsc_ARVALID : IN STD_LOGIC;
    twiddle_h_rsc_ARUSER : IN STD_LOGIC;
    twiddle_h_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_ARLOCK : IN STD_LOGIC;
    twiddle_h_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_ARID : IN STD_LOGIC;
    twiddle_h_rsc_BREADY : IN STD_LOGIC;
    twiddle_h_rsc_BVALID : OUT STD_LOGIC;
    twiddle_h_rsc_BUSER : OUT STD_LOGIC;
    twiddle_h_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_BID : OUT STD_LOGIC;
    twiddle_h_rsc_WREADY : OUT STD_LOGIC;
    twiddle_h_rsc_WVALID : IN STD_LOGIC;
    twiddle_h_rsc_WUSER : IN STD_LOGIC;
    twiddle_h_rsc_WLAST : IN STD_LOGIC;
    twiddle_h_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    twiddle_h_rsc_AWREADY : OUT STD_LOGIC;
    twiddle_h_rsc_AWVALID : IN STD_LOGIC;
    twiddle_h_rsc_AWUSER : IN STD_LOGIC;
    twiddle_h_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    twiddle_h_rsc_AWLOCK : IN STD_LOGIC;
    twiddle_h_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    twiddle_h_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    twiddle_h_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_h_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    twiddle_h_rsc_AWID : IN STD_LOGIC;
    twiddle_h_rsc_triosy_lz : OUT STD_LOGIC
  );
END peaseNTT;

ARCHITECTURE v5 OF peaseNTT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';
  CONSTANT GND : STD_LOGIC := '0';

  -- Interconnect Declarations
  SIGNAL yt_rsci_clken_d : STD_LOGIC;
  SIGNAL yt_rsci_d_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_q_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_clken : STD_LOGIC;
  SIGNAL yt_rsc_q : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsc_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsc_we : STD_LOGIC;
  SIGNAL yt_rsc_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsc_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_we_d_iff : STD_LOGIC;

  SIGNAL yt_rsc_comp_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsc_comp_q : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsc_comp_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsc_comp_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsci_q : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_d_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_q_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL yt_rsci_radr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_wadr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT peaseNTT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsc_s_tdone : IN STD_LOGIC;
      xt_rsc_tr_write_done : IN STD_LOGIC;
      xt_rsc_RREADY : IN STD_LOGIC;
      xt_rsc_RVALID : OUT STD_LOGIC;
      xt_rsc_RUSER : OUT STD_LOGIC;
      xt_rsc_RLAST : OUT STD_LOGIC;
      xt_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsc_RID : OUT STD_LOGIC;
      xt_rsc_ARREADY : OUT STD_LOGIC;
      xt_rsc_ARVALID : IN STD_LOGIC;
      xt_rsc_ARUSER : IN STD_LOGIC;
      xt_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_ARLOCK : IN STD_LOGIC;
      xt_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      xt_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      xt_rsc_ARID : IN STD_LOGIC;
      xt_rsc_BREADY : IN STD_LOGIC;
      xt_rsc_BVALID : OUT STD_LOGIC;
      xt_rsc_BUSER : OUT STD_LOGIC;
      xt_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_BID : OUT STD_LOGIC;
      xt_rsc_WREADY : OUT STD_LOGIC;
      xt_rsc_WVALID : IN STD_LOGIC;
      xt_rsc_WUSER : IN STD_LOGIC;
      xt_rsc_WLAST : IN STD_LOGIC;
      xt_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      xt_rsc_AWREADY : OUT STD_LOGIC;
      xt_rsc_AWVALID : IN STD_LOGIC;
      xt_rsc_AWUSER : IN STD_LOGIC;
      xt_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      xt_rsc_AWLOCK : IN STD_LOGIC;
      xt_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      xt_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      xt_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      xt_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      xt_rsc_AWID : IN STD_LOGIC;
      xt_rsc_triosy_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      r_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_rsc_s_tdone : IN STD_LOGIC;
      twiddle_rsc_tr_write_done : IN STD_LOGIC;
      twiddle_rsc_RREADY : IN STD_LOGIC;
      twiddle_rsc_RVALID : OUT STD_LOGIC;
      twiddle_rsc_RUSER : OUT STD_LOGIC;
      twiddle_rsc_RLAST : OUT STD_LOGIC;
      twiddle_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_rsc_RID : OUT STD_LOGIC;
      twiddle_rsc_ARREADY : OUT STD_LOGIC;
      twiddle_rsc_ARVALID : IN STD_LOGIC;
      twiddle_rsc_ARUSER : IN STD_LOGIC;
      twiddle_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_ARLOCK : IN STD_LOGIC;
      twiddle_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_rsc_ARID : IN STD_LOGIC;
      twiddle_rsc_BREADY : IN STD_LOGIC;
      twiddle_rsc_BVALID : OUT STD_LOGIC;
      twiddle_rsc_BUSER : OUT STD_LOGIC;
      twiddle_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_BID : OUT STD_LOGIC;
      twiddle_rsc_WREADY : OUT STD_LOGIC;
      twiddle_rsc_WVALID : IN STD_LOGIC;
      twiddle_rsc_WUSER : IN STD_LOGIC;
      twiddle_rsc_WLAST : IN STD_LOGIC;
      twiddle_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_rsc_AWREADY : OUT STD_LOGIC;
      twiddle_rsc_AWVALID : IN STD_LOGIC;
      twiddle_rsc_AWUSER : IN STD_LOGIC;
      twiddle_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_rsc_AWLOCK : IN STD_LOGIC;
      twiddle_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_rsc_AWID : IN STD_LOGIC;
      twiddle_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_h_rsc_s_tdone : IN STD_LOGIC;
      twiddle_h_rsc_tr_write_done : IN STD_LOGIC;
      twiddle_h_rsc_RREADY : IN STD_LOGIC;
      twiddle_h_rsc_RVALID : OUT STD_LOGIC;
      twiddle_h_rsc_RUSER : OUT STD_LOGIC;
      twiddle_h_rsc_RLAST : OUT STD_LOGIC;
      twiddle_h_rsc_RRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_RDATA : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_h_rsc_RID : OUT STD_LOGIC;
      twiddle_h_rsc_ARREADY : OUT STD_LOGIC;
      twiddle_h_rsc_ARVALID : IN STD_LOGIC;
      twiddle_h_rsc_ARUSER : IN STD_LOGIC;
      twiddle_h_rsc_ARREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_ARCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_ARLOCK : IN STD_LOGIC;
      twiddle_h_rsc_ARBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_ARSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_ARLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_h_rsc_ARADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_h_rsc_ARID : IN STD_LOGIC;
      twiddle_h_rsc_BREADY : IN STD_LOGIC;
      twiddle_h_rsc_BVALID : OUT STD_LOGIC;
      twiddle_h_rsc_BUSER : OUT STD_LOGIC;
      twiddle_h_rsc_BRESP : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_BID : OUT STD_LOGIC;
      twiddle_h_rsc_WREADY : OUT STD_LOGIC;
      twiddle_h_rsc_WVALID : IN STD_LOGIC;
      twiddle_h_rsc_WUSER : IN STD_LOGIC;
      twiddle_h_rsc_WLAST : IN STD_LOGIC;
      twiddle_h_rsc_WSTRB : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_WDATA : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      twiddle_h_rsc_AWREADY : OUT STD_LOGIC;
      twiddle_h_rsc_AWVALID : IN STD_LOGIC;
      twiddle_h_rsc_AWUSER : IN STD_LOGIC;
      twiddle_h_rsc_AWREGION : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWQOS : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWPROT : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_AWCACHE : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      twiddle_h_rsc_AWLOCK : IN STD_LOGIC;
      twiddle_h_rsc_AWBURST : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      twiddle_h_rsc_AWSIZE : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      twiddle_h_rsc_AWLEN : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      twiddle_h_rsc_AWADDR : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      twiddle_h_rsc_AWID : IN STD_LOGIC;
      twiddle_h_rsc_triosy_lz : OUT STD_LOGIC;
      yt_rsci_clken_d : OUT STD_LOGIC;
      yt_rsci_d_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      yt_rsci_q_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      yt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      yt_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL peaseNTT_core_inst_xt_rsc_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_xt_rsc_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_rsc_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_RRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_RDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_ARADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_BRESP : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_WSTRB : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_WDATA : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWREGION : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWQOS : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWPROT : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWCACHE : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWBURST : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWSIZE : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWLEN : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_twiddle_h_rsc_AWADDR : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_yt_rsci_d_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_yt_rsci_q_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_yt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL peaseNTT_core_inst_yt_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);

BEGIN
  yt_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 10,
      data_width => 32,
      depth => 1024,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_clken,
      d => yt_rsc_comp_d,
      q => yt_rsc_comp_q,
      radr => yt_rsc_comp_radr,
      wadr => yt_rsc_comp_wadr,
      we => yt_rsc_we
    );
  yt_rsc_comp_d <= yt_rsc_d;
  yt_rsc_q <= yt_rsc_comp_q;
  yt_rsc_comp_radr <= yt_rsc_radr;
  yt_rsc_comp_wadr <= yt_rsc_wadr;

  yt_rsci : peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_10_32_1024_1024_32_1_gen
    PORT MAP(
      clken => yt_rsc_clken,
      q => yt_rsci_q,
      radr => yt_rsci_radr,
      we => yt_rsc_we,
      d => yt_rsci_d,
      wadr => yt_rsci_wadr,
      clken_d => yt_rsci_clken_d,
      d_d => yt_rsci_d_d_1,
      q_d => yt_rsci_q_d_1,
      radr_d => yt_rsci_radr_d_1,
      wadr_d => yt_rsci_wadr_d_1,
      we_d => yt_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsci_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsci_q <= yt_rsc_q;
  yt_rsc_radr <= yt_rsci_radr;
  yt_rsc_d <= yt_rsci_d;
  yt_rsc_wadr <= yt_rsci_wadr;
  yt_rsci_d_d_1 <= yt_rsci_d_d;
  yt_rsci_q_d <= yt_rsci_q_d_1;
  yt_rsci_radr_d_1 <= yt_rsci_radr_d;
  yt_rsci_wadr_d_1 <= yt_rsci_wadr_d;

  peaseNTT_core_inst : peaseNTT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsc_s_tdone => xt_rsc_s_tdone,
      xt_rsc_tr_write_done => xt_rsc_tr_write_done,
      xt_rsc_RREADY => xt_rsc_RREADY,
      xt_rsc_RVALID => xt_rsc_RVALID,
      xt_rsc_RUSER => xt_rsc_RUSER,
      xt_rsc_RLAST => xt_rsc_RLAST,
      xt_rsc_RRESP => peaseNTT_core_inst_xt_rsc_RRESP,
      xt_rsc_RDATA => peaseNTT_core_inst_xt_rsc_RDATA,
      xt_rsc_RID => xt_rsc_RID,
      xt_rsc_ARREADY => xt_rsc_ARREADY,
      xt_rsc_ARVALID => xt_rsc_ARVALID,
      xt_rsc_ARUSER => xt_rsc_ARUSER,
      xt_rsc_ARREGION => peaseNTT_core_inst_xt_rsc_ARREGION,
      xt_rsc_ARQOS => peaseNTT_core_inst_xt_rsc_ARQOS,
      xt_rsc_ARPROT => peaseNTT_core_inst_xt_rsc_ARPROT,
      xt_rsc_ARCACHE => peaseNTT_core_inst_xt_rsc_ARCACHE,
      xt_rsc_ARLOCK => xt_rsc_ARLOCK,
      xt_rsc_ARBURST => peaseNTT_core_inst_xt_rsc_ARBURST,
      xt_rsc_ARSIZE => peaseNTT_core_inst_xt_rsc_ARSIZE,
      xt_rsc_ARLEN => peaseNTT_core_inst_xt_rsc_ARLEN,
      xt_rsc_ARADDR => peaseNTT_core_inst_xt_rsc_ARADDR,
      xt_rsc_ARID => xt_rsc_ARID,
      xt_rsc_BREADY => xt_rsc_BREADY,
      xt_rsc_BVALID => xt_rsc_BVALID,
      xt_rsc_BUSER => xt_rsc_BUSER,
      xt_rsc_BRESP => peaseNTT_core_inst_xt_rsc_BRESP,
      xt_rsc_BID => xt_rsc_BID,
      xt_rsc_WREADY => xt_rsc_WREADY,
      xt_rsc_WVALID => xt_rsc_WVALID,
      xt_rsc_WUSER => xt_rsc_WUSER,
      xt_rsc_WLAST => xt_rsc_WLAST,
      xt_rsc_WSTRB => peaseNTT_core_inst_xt_rsc_WSTRB,
      xt_rsc_WDATA => peaseNTT_core_inst_xt_rsc_WDATA,
      xt_rsc_AWREADY => xt_rsc_AWREADY,
      xt_rsc_AWVALID => xt_rsc_AWVALID,
      xt_rsc_AWUSER => xt_rsc_AWUSER,
      xt_rsc_AWREGION => peaseNTT_core_inst_xt_rsc_AWREGION,
      xt_rsc_AWQOS => peaseNTT_core_inst_xt_rsc_AWQOS,
      xt_rsc_AWPROT => peaseNTT_core_inst_xt_rsc_AWPROT,
      xt_rsc_AWCACHE => peaseNTT_core_inst_xt_rsc_AWCACHE,
      xt_rsc_AWLOCK => xt_rsc_AWLOCK,
      xt_rsc_AWBURST => peaseNTT_core_inst_xt_rsc_AWBURST,
      xt_rsc_AWSIZE => peaseNTT_core_inst_xt_rsc_AWSIZE,
      xt_rsc_AWLEN => peaseNTT_core_inst_xt_rsc_AWLEN,
      xt_rsc_AWADDR => peaseNTT_core_inst_xt_rsc_AWADDR,
      xt_rsc_AWID => xt_rsc_AWID,
      xt_rsc_triosy_lz => xt_rsc_triosy_lz,
      p_rsc_dat => peaseNTT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      r_rsc_triosy_lz => r_rsc_triosy_lz,
      twiddle_rsc_s_tdone => twiddle_rsc_s_tdone,
      twiddle_rsc_tr_write_done => twiddle_rsc_tr_write_done,
      twiddle_rsc_RREADY => twiddle_rsc_RREADY,
      twiddle_rsc_RVALID => twiddle_rsc_RVALID,
      twiddle_rsc_RUSER => twiddle_rsc_RUSER,
      twiddle_rsc_RLAST => twiddle_rsc_RLAST,
      twiddle_rsc_RRESP => peaseNTT_core_inst_twiddle_rsc_RRESP,
      twiddle_rsc_RDATA => peaseNTT_core_inst_twiddle_rsc_RDATA,
      twiddle_rsc_RID => twiddle_rsc_RID,
      twiddle_rsc_ARREADY => twiddle_rsc_ARREADY,
      twiddle_rsc_ARVALID => twiddle_rsc_ARVALID,
      twiddle_rsc_ARUSER => twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION => peaseNTT_core_inst_twiddle_rsc_ARREGION,
      twiddle_rsc_ARQOS => peaseNTT_core_inst_twiddle_rsc_ARQOS,
      twiddle_rsc_ARPROT => peaseNTT_core_inst_twiddle_rsc_ARPROT,
      twiddle_rsc_ARCACHE => peaseNTT_core_inst_twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK => twiddle_rsc_ARLOCK,
      twiddle_rsc_ARBURST => peaseNTT_core_inst_twiddle_rsc_ARBURST,
      twiddle_rsc_ARSIZE => peaseNTT_core_inst_twiddle_rsc_ARSIZE,
      twiddle_rsc_ARLEN => peaseNTT_core_inst_twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR => peaseNTT_core_inst_twiddle_rsc_ARADDR,
      twiddle_rsc_ARID => twiddle_rsc_ARID,
      twiddle_rsc_BREADY => twiddle_rsc_BREADY,
      twiddle_rsc_BVALID => twiddle_rsc_BVALID,
      twiddle_rsc_BUSER => twiddle_rsc_BUSER,
      twiddle_rsc_BRESP => peaseNTT_core_inst_twiddle_rsc_BRESP,
      twiddle_rsc_BID => twiddle_rsc_BID,
      twiddle_rsc_WREADY => twiddle_rsc_WREADY,
      twiddle_rsc_WVALID => twiddle_rsc_WVALID,
      twiddle_rsc_WUSER => twiddle_rsc_WUSER,
      twiddle_rsc_WLAST => twiddle_rsc_WLAST,
      twiddle_rsc_WSTRB => peaseNTT_core_inst_twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA => peaseNTT_core_inst_twiddle_rsc_WDATA,
      twiddle_rsc_AWREADY => twiddle_rsc_AWREADY,
      twiddle_rsc_AWVALID => twiddle_rsc_AWVALID,
      twiddle_rsc_AWUSER => twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION => peaseNTT_core_inst_twiddle_rsc_AWREGION,
      twiddle_rsc_AWQOS => peaseNTT_core_inst_twiddle_rsc_AWQOS,
      twiddle_rsc_AWPROT => peaseNTT_core_inst_twiddle_rsc_AWPROT,
      twiddle_rsc_AWCACHE => peaseNTT_core_inst_twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK => twiddle_rsc_AWLOCK,
      twiddle_rsc_AWBURST => peaseNTT_core_inst_twiddle_rsc_AWBURST,
      twiddle_rsc_AWSIZE => peaseNTT_core_inst_twiddle_rsc_AWSIZE,
      twiddle_rsc_AWLEN => peaseNTT_core_inst_twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR => peaseNTT_core_inst_twiddle_rsc_AWADDR,
      twiddle_rsc_AWID => twiddle_rsc_AWID,
      twiddle_rsc_triosy_lz => twiddle_rsc_triosy_lz,
      twiddle_h_rsc_s_tdone => twiddle_h_rsc_s_tdone,
      twiddle_h_rsc_tr_write_done => twiddle_h_rsc_tr_write_done,
      twiddle_h_rsc_RREADY => twiddle_h_rsc_RREADY,
      twiddle_h_rsc_RVALID => twiddle_h_rsc_RVALID,
      twiddle_h_rsc_RUSER => twiddle_h_rsc_RUSER,
      twiddle_h_rsc_RLAST => twiddle_h_rsc_RLAST,
      twiddle_h_rsc_RRESP => peaseNTT_core_inst_twiddle_h_rsc_RRESP,
      twiddle_h_rsc_RDATA => peaseNTT_core_inst_twiddle_h_rsc_RDATA,
      twiddle_h_rsc_RID => twiddle_h_rsc_RID,
      twiddle_h_rsc_ARREADY => twiddle_h_rsc_ARREADY,
      twiddle_h_rsc_ARVALID => twiddle_h_rsc_ARVALID,
      twiddle_h_rsc_ARUSER => twiddle_h_rsc_ARUSER,
      twiddle_h_rsc_ARREGION => peaseNTT_core_inst_twiddle_h_rsc_ARREGION,
      twiddle_h_rsc_ARQOS => peaseNTT_core_inst_twiddle_h_rsc_ARQOS,
      twiddle_h_rsc_ARPROT => peaseNTT_core_inst_twiddle_h_rsc_ARPROT,
      twiddle_h_rsc_ARCACHE => peaseNTT_core_inst_twiddle_h_rsc_ARCACHE,
      twiddle_h_rsc_ARLOCK => twiddle_h_rsc_ARLOCK,
      twiddle_h_rsc_ARBURST => peaseNTT_core_inst_twiddle_h_rsc_ARBURST,
      twiddle_h_rsc_ARSIZE => peaseNTT_core_inst_twiddle_h_rsc_ARSIZE,
      twiddle_h_rsc_ARLEN => peaseNTT_core_inst_twiddle_h_rsc_ARLEN,
      twiddle_h_rsc_ARADDR => peaseNTT_core_inst_twiddle_h_rsc_ARADDR,
      twiddle_h_rsc_ARID => twiddle_h_rsc_ARID,
      twiddle_h_rsc_BREADY => twiddle_h_rsc_BREADY,
      twiddle_h_rsc_BVALID => twiddle_h_rsc_BVALID,
      twiddle_h_rsc_BUSER => twiddle_h_rsc_BUSER,
      twiddle_h_rsc_BRESP => peaseNTT_core_inst_twiddle_h_rsc_BRESP,
      twiddle_h_rsc_BID => twiddle_h_rsc_BID,
      twiddle_h_rsc_WREADY => twiddle_h_rsc_WREADY,
      twiddle_h_rsc_WVALID => twiddle_h_rsc_WVALID,
      twiddle_h_rsc_WUSER => twiddle_h_rsc_WUSER,
      twiddle_h_rsc_WLAST => twiddle_h_rsc_WLAST,
      twiddle_h_rsc_WSTRB => peaseNTT_core_inst_twiddle_h_rsc_WSTRB,
      twiddle_h_rsc_WDATA => peaseNTT_core_inst_twiddle_h_rsc_WDATA,
      twiddle_h_rsc_AWREADY => twiddle_h_rsc_AWREADY,
      twiddle_h_rsc_AWVALID => twiddle_h_rsc_AWVALID,
      twiddle_h_rsc_AWUSER => twiddle_h_rsc_AWUSER,
      twiddle_h_rsc_AWREGION => peaseNTT_core_inst_twiddle_h_rsc_AWREGION,
      twiddle_h_rsc_AWQOS => peaseNTT_core_inst_twiddle_h_rsc_AWQOS,
      twiddle_h_rsc_AWPROT => peaseNTT_core_inst_twiddle_h_rsc_AWPROT,
      twiddle_h_rsc_AWCACHE => peaseNTT_core_inst_twiddle_h_rsc_AWCACHE,
      twiddle_h_rsc_AWLOCK => twiddle_h_rsc_AWLOCK,
      twiddle_h_rsc_AWBURST => peaseNTT_core_inst_twiddle_h_rsc_AWBURST,
      twiddle_h_rsc_AWSIZE => peaseNTT_core_inst_twiddle_h_rsc_AWSIZE,
      twiddle_h_rsc_AWLEN => peaseNTT_core_inst_twiddle_h_rsc_AWLEN,
      twiddle_h_rsc_AWADDR => peaseNTT_core_inst_twiddle_h_rsc_AWADDR,
      twiddle_h_rsc_AWID => twiddle_h_rsc_AWID,
      twiddle_h_rsc_triosy_lz => twiddle_h_rsc_triosy_lz,
      yt_rsci_clken_d => yt_rsci_clken_d,
      yt_rsci_d_d => peaseNTT_core_inst_yt_rsci_d_d,
      yt_rsci_q_d => peaseNTT_core_inst_yt_rsci_q_d,
      yt_rsci_radr_d => peaseNTT_core_inst_yt_rsci_radr_d,
      yt_rsci_wadr_d => peaseNTT_core_inst_yt_rsci_wadr_d,
      yt_rsci_readA_r_ram_ir_internal_RMASK_B_d => yt_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsci_we_d_pff => yt_rsci_we_d_iff
    );
  xt_rsc_RRESP <= peaseNTT_core_inst_xt_rsc_RRESP;
  xt_rsc_RDATA <= peaseNTT_core_inst_xt_rsc_RDATA;
  peaseNTT_core_inst_xt_rsc_ARREGION <= xt_rsc_ARREGION;
  peaseNTT_core_inst_xt_rsc_ARQOS <= xt_rsc_ARQOS;
  peaseNTT_core_inst_xt_rsc_ARPROT <= xt_rsc_ARPROT;
  peaseNTT_core_inst_xt_rsc_ARCACHE <= xt_rsc_ARCACHE;
  peaseNTT_core_inst_xt_rsc_ARBURST <= xt_rsc_ARBURST;
  peaseNTT_core_inst_xt_rsc_ARSIZE <= xt_rsc_ARSIZE;
  peaseNTT_core_inst_xt_rsc_ARLEN <= xt_rsc_ARLEN;
  peaseNTT_core_inst_xt_rsc_ARADDR <= xt_rsc_ARADDR;
  xt_rsc_BRESP <= peaseNTT_core_inst_xt_rsc_BRESP;
  peaseNTT_core_inst_xt_rsc_WSTRB <= xt_rsc_WSTRB;
  peaseNTT_core_inst_xt_rsc_WDATA <= xt_rsc_WDATA;
  peaseNTT_core_inst_xt_rsc_AWREGION <= xt_rsc_AWREGION;
  peaseNTT_core_inst_xt_rsc_AWQOS <= xt_rsc_AWQOS;
  peaseNTT_core_inst_xt_rsc_AWPROT <= xt_rsc_AWPROT;
  peaseNTT_core_inst_xt_rsc_AWCACHE <= xt_rsc_AWCACHE;
  peaseNTT_core_inst_xt_rsc_AWBURST <= xt_rsc_AWBURST;
  peaseNTT_core_inst_xt_rsc_AWSIZE <= xt_rsc_AWSIZE;
  peaseNTT_core_inst_xt_rsc_AWLEN <= xt_rsc_AWLEN;
  peaseNTT_core_inst_xt_rsc_AWADDR <= xt_rsc_AWADDR;
  peaseNTT_core_inst_p_rsc_dat <= p_rsc_dat;
  twiddle_rsc_RRESP <= peaseNTT_core_inst_twiddle_rsc_RRESP;
  twiddle_rsc_RDATA <= peaseNTT_core_inst_twiddle_rsc_RDATA;
  peaseNTT_core_inst_twiddle_rsc_ARREGION <= twiddle_rsc_ARREGION;
  peaseNTT_core_inst_twiddle_rsc_ARQOS <= twiddle_rsc_ARQOS;
  peaseNTT_core_inst_twiddle_rsc_ARPROT <= twiddle_rsc_ARPROT;
  peaseNTT_core_inst_twiddle_rsc_ARCACHE <= twiddle_rsc_ARCACHE;
  peaseNTT_core_inst_twiddle_rsc_ARBURST <= twiddle_rsc_ARBURST;
  peaseNTT_core_inst_twiddle_rsc_ARSIZE <= twiddle_rsc_ARSIZE;
  peaseNTT_core_inst_twiddle_rsc_ARLEN <= twiddle_rsc_ARLEN;
  peaseNTT_core_inst_twiddle_rsc_ARADDR <= twiddle_rsc_ARADDR;
  twiddle_rsc_BRESP <= peaseNTT_core_inst_twiddle_rsc_BRESP;
  peaseNTT_core_inst_twiddle_rsc_WSTRB <= twiddle_rsc_WSTRB;
  peaseNTT_core_inst_twiddle_rsc_WDATA <= twiddle_rsc_WDATA;
  peaseNTT_core_inst_twiddle_rsc_AWREGION <= twiddle_rsc_AWREGION;
  peaseNTT_core_inst_twiddle_rsc_AWQOS <= twiddle_rsc_AWQOS;
  peaseNTT_core_inst_twiddle_rsc_AWPROT <= twiddle_rsc_AWPROT;
  peaseNTT_core_inst_twiddle_rsc_AWCACHE <= twiddle_rsc_AWCACHE;
  peaseNTT_core_inst_twiddle_rsc_AWBURST <= twiddle_rsc_AWBURST;
  peaseNTT_core_inst_twiddle_rsc_AWSIZE <= twiddle_rsc_AWSIZE;
  peaseNTT_core_inst_twiddle_rsc_AWLEN <= twiddle_rsc_AWLEN;
  peaseNTT_core_inst_twiddle_rsc_AWADDR <= twiddle_rsc_AWADDR;
  twiddle_h_rsc_RRESP <= peaseNTT_core_inst_twiddle_h_rsc_RRESP;
  twiddle_h_rsc_RDATA <= peaseNTT_core_inst_twiddle_h_rsc_RDATA;
  peaseNTT_core_inst_twiddle_h_rsc_ARREGION <= twiddle_h_rsc_ARREGION;
  peaseNTT_core_inst_twiddle_h_rsc_ARQOS <= twiddle_h_rsc_ARQOS;
  peaseNTT_core_inst_twiddle_h_rsc_ARPROT <= twiddle_h_rsc_ARPROT;
  peaseNTT_core_inst_twiddle_h_rsc_ARCACHE <= twiddle_h_rsc_ARCACHE;
  peaseNTT_core_inst_twiddle_h_rsc_ARBURST <= twiddle_h_rsc_ARBURST;
  peaseNTT_core_inst_twiddle_h_rsc_ARSIZE <= twiddle_h_rsc_ARSIZE;
  peaseNTT_core_inst_twiddle_h_rsc_ARLEN <= twiddle_h_rsc_ARLEN;
  peaseNTT_core_inst_twiddle_h_rsc_ARADDR <= twiddle_h_rsc_ARADDR;
  twiddle_h_rsc_BRESP <= peaseNTT_core_inst_twiddle_h_rsc_BRESP;
  peaseNTT_core_inst_twiddle_h_rsc_WSTRB <= twiddle_h_rsc_WSTRB;
  peaseNTT_core_inst_twiddle_h_rsc_WDATA <= twiddle_h_rsc_WDATA;
  peaseNTT_core_inst_twiddle_h_rsc_AWREGION <= twiddle_h_rsc_AWREGION;
  peaseNTT_core_inst_twiddle_h_rsc_AWQOS <= twiddle_h_rsc_AWQOS;
  peaseNTT_core_inst_twiddle_h_rsc_AWPROT <= twiddle_h_rsc_AWPROT;
  peaseNTT_core_inst_twiddle_h_rsc_AWCACHE <= twiddle_h_rsc_AWCACHE;
  peaseNTT_core_inst_twiddle_h_rsc_AWBURST <= twiddle_h_rsc_AWBURST;
  peaseNTT_core_inst_twiddle_h_rsc_AWSIZE <= twiddle_h_rsc_AWSIZE;
  peaseNTT_core_inst_twiddle_h_rsc_AWLEN <= twiddle_h_rsc_AWLEN;
  peaseNTT_core_inst_twiddle_h_rsc_AWADDR <= twiddle_h_rsc_AWADDR;
  yt_rsci_d_d <= peaseNTT_core_inst_yt_rsci_d_d;
  peaseNTT_core_inst_yt_rsci_q_d <= yt_rsci_q_d;
  yt_rsci_radr_d <= peaseNTT_core_inst_yt_rsci_radr_d;
  yt_rsci_wadr_d <= peaseNTT_core_inst_yt_rsci_wadr_d;

END v5;



