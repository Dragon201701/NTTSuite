// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   jd4691@newnano.poly.edu
//  Generated date: Sat Sep 11 23:33:35 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_10_32_1024_1024_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_10_32_1024_1024_32_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [31:0] q;
  output [9:0] radr;
  output we;
  output [31:0] d;
  output [9:0] wadr;
  input clken_d;
  input [31:0] d_d;
  output [31:0] q_d;
  input [9:0] radr_d;
  input [9:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module peaseNTT_core_core_fsm (
  clk, rst, core_wen, fsm_output, INNER_LOOP1_C_13_tr0, INNER_LOOP2_C_14_tr0, INNER_LOOP2_C_14_tr1,
      INNER_LOOP3_C_13_tr0, INNER_LOOP4_C_14_tr0, INNER_LOOP4_C_14_tr1
);
  input clk;
  input rst;
  input core_wen;
  output [5:0] fsm_output;
  reg [5:0] fsm_output;
  input INNER_LOOP1_C_13_tr0;
  input INNER_LOOP2_C_14_tr0;
  input INNER_LOOP2_C_14_tr1;
  input INNER_LOOP3_C_13_tr0;
  input INNER_LOOP4_C_14_tr0;
  input INNER_LOOP4_C_14_tr1;


  // FSM State Type Declaration for peaseNTT_core_core_fsm_1
  parameter
    main_C_0 = 6'd0,
    STAGE_LOOP_C_0 = 6'd1,
    INNER_LOOP1_C_0 = 6'd2,
    INNER_LOOP1_C_1 = 6'd3,
    INNER_LOOP1_C_2 = 6'd4,
    INNER_LOOP1_C_3 = 6'd5,
    INNER_LOOP1_C_4 = 6'd6,
    INNER_LOOP1_C_5 = 6'd7,
    INNER_LOOP1_C_6 = 6'd8,
    INNER_LOOP1_C_7 = 6'd9,
    INNER_LOOP1_C_8 = 6'd10,
    INNER_LOOP1_C_9 = 6'd11,
    INNER_LOOP1_C_10 = 6'd12,
    INNER_LOOP1_C_11 = 6'd13,
    INNER_LOOP1_C_12 = 6'd14,
    INNER_LOOP1_C_13 = 6'd15,
    STAGE_LOOP_C_1 = 6'd16,
    INNER_LOOP2_C_0 = 6'd17,
    INNER_LOOP2_C_1 = 6'd18,
    INNER_LOOP2_C_2 = 6'd19,
    INNER_LOOP2_C_3 = 6'd20,
    INNER_LOOP2_C_4 = 6'd21,
    INNER_LOOP2_C_5 = 6'd22,
    INNER_LOOP2_C_6 = 6'd23,
    INNER_LOOP2_C_7 = 6'd24,
    INNER_LOOP2_C_8 = 6'd25,
    INNER_LOOP2_C_9 = 6'd26,
    INNER_LOOP2_C_10 = 6'd27,
    INNER_LOOP2_C_11 = 6'd28,
    INNER_LOOP2_C_12 = 6'd29,
    INNER_LOOP2_C_13 = 6'd30,
    INNER_LOOP2_C_14 = 6'd31,
    STAGE_LOOP1_C_0 = 6'd32,
    INNER_LOOP3_C_0 = 6'd33,
    INNER_LOOP3_C_1 = 6'd34,
    INNER_LOOP3_C_2 = 6'd35,
    INNER_LOOP3_C_3 = 6'd36,
    INNER_LOOP3_C_4 = 6'd37,
    INNER_LOOP3_C_5 = 6'd38,
    INNER_LOOP3_C_6 = 6'd39,
    INNER_LOOP3_C_7 = 6'd40,
    INNER_LOOP3_C_8 = 6'd41,
    INNER_LOOP3_C_9 = 6'd42,
    INNER_LOOP3_C_10 = 6'd43,
    INNER_LOOP3_C_11 = 6'd44,
    INNER_LOOP3_C_12 = 6'd45,
    INNER_LOOP3_C_13 = 6'd46,
    STAGE_LOOP1_C_1 = 6'd47,
    INNER_LOOP4_C_0 = 6'd48,
    INNER_LOOP4_C_1 = 6'd49,
    INNER_LOOP4_C_2 = 6'd50,
    INNER_LOOP4_C_3 = 6'd51,
    INNER_LOOP4_C_4 = 6'd52,
    INNER_LOOP4_C_5 = 6'd53,
    INNER_LOOP4_C_6 = 6'd54,
    INNER_LOOP4_C_7 = 6'd55,
    INNER_LOOP4_C_8 = 6'd56,
    INNER_LOOP4_C_9 = 6'd57,
    INNER_LOOP4_C_10 = 6'd58,
    INNER_LOOP4_C_11 = 6'd59,
    INNER_LOOP4_C_12 = 6'd60,
    INNER_LOOP4_C_13 = 6'd61,
    INNER_LOOP4_C_14 = 6'd62,
    main_C_1 = 6'd63;

  reg [5:0] state_var;
  reg [5:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : peaseNTT_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 6'b000001;
        state_var_NS = INNER_LOOP1_C_0;
      end
      INNER_LOOP1_C_0 : begin
        fsm_output = 6'b000010;
        state_var_NS = INNER_LOOP1_C_1;
      end
      INNER_LOOP1_C_1 : begin
        fsm_output = 6'b000011;
        state_var_NS = INNER_LOOP1_C_2;
      end
      INNER_LOOP1_C_2 : begin
        fsm_output = 6'b000100;
        state_var_NS = INNER_LOOP1_C_3;
      end
      INNER_LOOP1_C_3 : begin
        fsm_output = 6'b000101;
        state_var_NS = INNER_LOOP1_C_4;
      end
      INNER_LOOP1_C_4 : begin
        fsm_output = 6'b000110;
        state_var_NS = INNER_LOOP1_C_5;
      end
      INNER_LOOP1_C_5 : begin
        fsm_output = 6'b000111;
        state_var_NS = INNER_LOOP1_C_6;
      end
      INNER_LOOP1_C_6 : begin
        fsm_output = 6'b001000;
        state_var_NS = INNER_LOOP1_C_7;
      end
      INNER_LOOP1_C_7 : begin
        fsm_output = 6'b001001;
        state_var_NS = INNER_LOOP1_C_8;
      end
      INNER_LOOP1_C_8 : begin
        fsm_output = 6'b001010;
        state_var_NS = INNER_LOOP1_C_9;
      end
      INNER_LOOP1_C_9 : begin
        fsm_output = 6'b001011;
        state_var_NS = INNER_LOOP1_C_10;
      end
      INNER_LOOP1_C_10 : begin
        fsm_output = 6'b001100;
        state_var_NS = INNER_LOOP1_C_11;
      end
      INNER_LOOP1_C_11 : begin
        fsm_output = 6'b001101;
        state_var_NS = INNER_LOOP1_C_12;
      end
      INNER_LOOP1_C_12 : begin
        fsm_output = 6'b001110;
        state_var_NS = INNER_LOOP1_C_13;
      end
      INNER_LOOP1_C_13 : begin
        fsm_output = 6'b001111;
        if ( INNER_LOOP1_C_13_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP1_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 6'b010000;
        state_var_NS = INNER_LOOP2_C_0;
      end
      INNER_LOOP2_C_0 : begin
        fsm_output = 6'b010001;
        state_var_NS = INNER_LOOP2_C_1;
      end
      INNER_LOOP2_C_1 : begin
        fsm_output = 6'b010010;
        state_var_NS = INNER_LOOP2_C_2;
      end
      INNER_LOOP2_C_2 : begin
        fsm_output = 6'b010011;
        state_var_NS = INNER_LOOP2_C_3;
      end
      INNER_LOOP2_C_3 : begin
        fsm_output = 6'b010100;
        state_var_NS = INNER_LOOP2_C_4;
      end
      INNER_LOOP2_C_4 : begin
        fsm_output = 6'b010101;
        state_var_NS = INNER_LOOP2_C_5;
      end
      INNER_LOOP2_C_5 : begin
        fsm_output = 6'b010110;
        state_var_NS = INNER_LOOP2_C_6;
      end
      INNER_LOOP2_C_6 : begin
        fsm_output = 6'b010111;
        state_var_NS = INNER_LOOP2_C_7;
      end
      INNER_LOOP2_C_7 : begin
        fsm_output = 6'b011000;
        state_var_NS = INNER_LOOP2_C_8;
      end
      INNER_LOOP2_C_8 : begin
        fsm_output = 6'b011001;
        state_var_NS = INNER_LOOP2_C_9;
      end
      INNER_LOOP2_C_9 : begin
        fsm_output = 6'b011010;
        state_var_NS = INNER_LOOP2_C_10;
      end
      INNER_LOOP2_C_10 : begin
        fsm_output = 6'b011011;
        state_var_NS = INNER_LOOP2_C_11;
      end
      INNER_LOOP2_C_11 : begin
        fsm_output = 6'b011100;
        state_var_NS = INNER_LOOP2_C_12;
      end
      INNER_LOOP2_C_12 : begin
        fsm_output = 6'b011101;
        state_var_NS = INNER_LOOP2_C_13;
      end
      INNER_LOOP2_C_13 : begin
        fsm_output = 6'b011110;
        state_var_NS = INNER_LOOP2_C_14;
      end
      INNER_LOOP2_C_14 : begin
        fsm_output = 6'b011111;
        if ( INNER_LOOP2_C_14_tr0 ) begin
          state_var_NS = STAGE_LOOP1_C_0;
        end
        else if ( INNER_LOOP2_C_14_tr1 ) begin
          state_var_NS = INNER_LOOP2_C_0;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      STAGE_LOOP1_C_0 : begin
        fsm_output = 6'b100000;
        state_var_NS = INNER_LOOP3_C_0;
      end
      INNER_LOOP3_C_0 : begin
        fsm_output = 6'b100001;
        state_var_NS = INNER_LOOP3_C_1;
      end
      INNER_LOOP3_C_1 : begin
        fsm_output = 6'b100010;
        state_var_NS = INNER_LOOP3_C_2;
      end
      INNER_LOOP3_C_2 : begin
        fsm_output = 6'b100011;
        state_var_NS = INNER_LOOP3_C_3;
      end
      INNER_LOOP3_C_3 : begin
        fsm_output = 6'b100100;
        state_var_NS = INNER_LOOP3_C_4;
      end
      INNER_LOOP3_C_4 : begin
        fsm_output = 6'b100101;
        state_var_NS = INNER_LOOP3_C_5;
      end
      INNER_LOOP3_C_5 : begin
        fsm_output = 6'b100110;
        state_var_NS = INNER_LOOP3_C_6;
      end
      INNER_LOOP3_C_6 : begin
        fsm_output = 6'b100111;
        state_var_NS = INNER_LOOP3_C_7;
      end
      INNER_LOOP3_C_7 : begin
        fsm_output = 6'b101000;
        state_var_NS = INNER_LOOP3_C_8;
      end
      INNER_LOOP3_C_8 : begin
        fsm_output = 6'b101001;
        state_var_NS = INNER_LOOP3_C_9;
      end
      INNER_LOOP3_C_9 : begin
        fsm_output = 6'b101010;
        state_var_NS = INNER_LOOP3_C_10;
      end
      INNER_LOOP3_C_10 : begin
        fsm_output = 6'b101011;
        state_var_NS = INNER_LOOP3_C_11;
      end
      INNER_LOOP3_C_11 : begin
        fsm_output = 6'b101100;
        state_var_NS = INNER_LOOP3_C_12;
      end
      INNER_LOOP3_C_12 : begin
        fsm_output = 6'b101101;
        state_var_NS = INNER_LOOP3_C_13;
      end
      INNER_LOOP3_C_13 : begin
        fsm_output = 6'b101110;
        if ( INNER_LOOP3_C_13_tr0 ) begin
          state_var_NS = STAGE_LOOP1_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP3_C_0;
        end
      end
      STAGE_LOOP1_C_1 : begin
        fsm_output = 6'b101111;
        state_var_NS = INNER_LOOP4_C_0;
      end
      INNER_LOOP4_C_0 : begin
        fsm_output = 6'b110000;
        state_var_NS = INNER_LOOP4_C_1;
      end
      INNER_LOOP4_C_1 : begin
        fsm_output = 6'b110001;
        state_var_NS = INNER_LOOP4_C_2;
      end
      INNER_LOOP4_C_2 : begin
        fsm_output = 6'b110010;
        state_var_NS = INNER_LOOP4_C_3;
      end
      INNER_LOOP4_C_3 : begin
        fsm_output = 6'b110011;
        state_var_NS = INNER_LOOP4_C_4;
      end
      INNER_LOOP4_C_4 : begin
        fsm_output = 6'b110100;
        state_var_NS = INNER_LOOP4_C_5;
      end
      INNER_LOOP4_C_5 : begin
        fsm_output = 6'b110101;
        state_var_NS = INNER_LOOP4_C_6;
      end
      INNER_LOOP4_C_6 : begin
        fsm_output = 6'b110110;
        state_var_NS = INNER_LOOP4_C_7;
      end
      INNER_LOOP4_C_7 : begin
        fsm_output = 6'b110111;
        state_var_NS = INNER_LOOP4_C_8;
      end
      INNER_LOOP4_C_8 : begin
        fsm_output = 6'b111000;
        state_var_NS = INNER_LOOP4_C_9;
      end
      INNER_LOOP4_C_9 : begin
        fsm_output = 6'b111001;
        state_var_NS = INNER_LOOP4_C_10;
      end
      INNER_LOOP4_C_10 : begin
        fsm_output = 6'b111010;
        state_var_NS = INNER_LOOP4_C_11;
      end
      INNER_LOOP4_C_11 : begin
        fsm_output = 6'b111011;
        state_var_NS = INNER_LOOP4_C_12;
      end
      INNER_LOOP4_C_12 : begin
        fsm_output = 6'b111100;
        state_var_NS = INNER_LOOP4_C_13;
      end
      INNER_LOOP4_C_13 : begin
        fsm_output = 6'b111101;
        state_var_NS = INNER_LOOP4_C_14;
      end
      INNER_LOOP4_C_14 : begin
        fsm_output = 6'b111110;
        if ( INNER_LOOP4_C_14_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else if ( INNER_LOOP4_C_14_tr1 ) begin
          state_var_NS = INNER_LOOP4_C_0;
        end
        else begin
          state_var_NS = STAGE_LOOP1_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 6'b111111;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 6'b000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( core_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_staller
// ------------------------------------------------------------------


module peaseNTT_core_staller (
  clk, rst, core_wen, core_wten, xt_rsci_wen_comp, xt_rsci_wen_comp_1, twiddle_rsci_wen_comp,
      twiddle_h_rsci_wen_comp
);
  input clk;
  input rst;
  output core_wen;
  output core_wten;
  reg core_wten;
  input xt_rsci_wen_comp;
  input xt_rsci_wen_comp_1;
  input twiddle_rsci_wen_comp;
  input twiddle_h_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = xt_rsci_wen_comp & xt_rsci_wen_comp_1 & twiddle_rsci_wen_comp
      & twiddle_h_rsci_wen_comp;
  always @(posedge clk) begin
    if ( rst ) begin
      core_wten <= 1'b0;
    end
    else begin
      core_wten <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl (
  core_wten, twiddle_h_rsc_triosy_obj_iswt0, twiddle_h_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_obj_iswt0;
  output twiddle_h_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_obj_ld_core_sct = twiddle_h_rsc_triosy_obj_iswt0 &
      (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl (
  core_wten, twiddle_rsc_triosy_obj_iswt0, twiddle_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_obj_iswt0;
  output twiddle_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_obj_ld_core_sct = twiddle_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl (
  core_wten, r_rsc_triosy_obj_iswt0, r_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input r_rsc_triosy_obj_iswt0;
  output r_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign r_rsc_triosy_obj_ld_core_sct = r_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl (
  core_wten, p_rsc_triosy_obj_iswt0, p_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input p_rsc_triosy_obj_iswt0;
  output p_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign p_rsc_triosy_obj_ld_core_sct = p_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl (
  core_wten, xt_rsc_triosy_obj_iswt0, xt_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_obj_iswt0;
  output xt_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_obj_ld_core_sct = xt_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp (
  clk, rst, twiddle_h_rsci_oswt, twiddle_h_rsci_wen_comp, twiddle_h_rsci_s_raddr_core,
      twiddle_h_rsci_s_din_mxwt, twiddle_h_rsci_biwt, twiddle_h_rsci_bdwt, twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_raddr, twiddle_h_rsci_s_raddr_core_sct, twiddle_h_rsci_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_wen_comp;
  input [9:0] twiddle_h_rsci_s_raddr_core;
  output [31:0] twiddle_h_rsci_s_din_mxwt;
  input twiddle_h_rsci_biwt;
  input twiddle_h_rsci_bdwt;
  output twiddle_h_rsci_bcwt;
  reg twiddle_h_rsci_bcwt;
  output [9:0] twiddle_h_rsci_s_raddr;
  input twiddle_h_rsci_s_raddr_core_sct;
  input [31:0] twiddle_h_rsci_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsci_s_din_bfwt;

  wire[8:0] INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsci_wen_comp = (~ twiddle_h_rsci_oswt) | twiddle_h_rsci_biwt
      | twiddle_h_rsci_bcwt;
  assign INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl = MUX_v_9_2_2(9'b000000000, (twiddle_h_rsci_s_raddr_core[8:0]),
      twiddle_h_rsci_s_raddr_core_sct);
  assign twiddle_h_rsci_s_raddr = {1'b0, INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl};
  assign twiddle_h_rsci_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsci_s_din, twiddle_h_rsci_s_din_bfwt,
      twiddle_h_rsci_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsci_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsci_bcwt <= ~((~(twiddle_h_rsci_bcwt | twiddle_h_rsci_biwt)) | twiddle_h_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsci_biwt ) begin
      twiddle_h_rsci_s_din_bfwt <= twiddle_h_rsci_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl (
  core_wen, twiddle_h_rsci_oswt, twiddle_h_rsci_biwt, twiddle_h_rsci_bdwt, twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_re_core_sct, twiddle_h_rsci_s_rrdy
);
  input core_wen;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_biwt;
  output twiddle_h_rsci_bdwt;
  input twiddle_h_rsci_bcwt;
  output twiddle_h_rsci_s_re_core_sct;
  input twiddle_h_rsci_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsci_bdwt = twiddle_h_rsci_oswt & core_wen;
  assign twiddle_h_rsci_biwt = twiddle_h_rsci_ogwt & twiddle_h_rsci_s_rrdy;
  assign twiddle_h_rsci_ogwt = twiddle_h_rsci_oswt & (~ twiddle_h_rsci_bcwt);
  assign twiddle_h_rsci_s_re_core_sct = twiddle_h_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp (
  clk, rst, twiddle_rsci_oswt, twiddle_rsci_wen_comp, twiddle_rsci_s_raddr_core,
      twiddle_rsci_s_din_mxwt, twiddle_rsci_biwt, twiddle_rsci_bdwt, twiddle_rsci_bcwt,
      twiddle_rsci_s_raddr, twiddle_rsci_s_raddr_core_sct, twiddle_rsci_s_din
);
  input clk;
  input rst;
  input twiddle_rsci_oswt;
  output twiddle_rsci_wen_comp;
  input [9:0] twiddle_rsci_s_raddr_core;
  output [31:0] twiddle_rsci_s_din_mxwt;
  input twiddle_rsci_biwt;
  input twiddle_rsci_bdwt;
  output twiddle_rsci_bcwt;
  reg twiddle_rsci_bcwt;
  output [9:0] twiddle_rsci_s_raddr;
  input twiddle_rsci_s_raddr_core_sct;
  input [31:0] twiddle_rsci_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsci_s_din_bfwt;

  wire[8:0] INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsci_wen_comp = (~ twiddle_rsci_oswt) | twiddle_rsci_biwt | twiddle_rsci_bcwt;
  assign INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl = MUX_v_9_2_2(9'b000000000, (twiddle_rsci_s_raddr_core[8:0]),
      twiddle_rsci_s_raddr_core_sct);
  assign twiddle_rsci_s_raddr = {1'b0, INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl};
  assign twiddle_rsci_s_din_mxwt = MUX_v_32_2_2(twiddle_rsci_s_din, twiddle_rsci_s_din_bfwt,
      twiddle_rsci_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsci_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsci_bcwt <= ~((~(twiddle_rsci_bcwt | twiddle_rsci_biwt)) | twiddle_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsci_biwt ) begin
      twiddle_rsci_s_din_bfwt <= twiddle_rsci_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl (
  core_wen, twiddle_rsci_oswt, twiddle_rsci_biwt, twiddle_rsci_bdwt, twiddle_rsci_bcwt,
      twiddle_rsci_s_re_core_sct, twiddle_rsci_s_rrdy
);
  input core_wen;
  input twiddle_rsci_oswt;
  output twiddle_rsci_biwt;
  output twiddle_rsci_bdwt;
  input twiddle_rsci_bcwt;
  output twiddle_rsci_s_re_core_sct;
  input twiddle_rsci_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsci_bdwt = twiddle_rsci_oswt & core_wen;
  assign twiddle_rsci_biwt = twiddle_rsci_ogwt & twiddle_rsci_s_rrdy;
  assign twiddle_rsci_ogwt = twiddle_rsci_oswt & (~ twiddle_rsci_bcwt);
  assign twiddle_rsci_s_re_core_sct = twiddle_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsci_xt_rsc_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsci_xt_rsc_wait_dp (
  clk, rst, xt_rsci_oswt, xt_rsci_wen_comp, xt_rsci_oswt_1, xt_rsci_wen_comp_1, xt_rsci_s_raddr_core,
      xt_rsci_s_waddr_core, xt_rsci_s_din_mxwt, xt_rsci_s_dout_core, xt_rsci_biwt,
      xt_rsci_bdwt, xt_rsci_bcwt, xt_rsci_biwt_1, xt_rsci_bdwt_2, xt_rsci_bcwt_1,
      xt_rsci_s_raddr, xt_rsci_s_raddr_core_sct, xt_rsci_s_waddr, xt_rsci_s_waddr_core_sct,
      xt_rsci_s_din, xt_rsci_s_dout
);
  input clk;
  input rst;
  input xt_rsci_oswt;
  output xt_rsci_wen_comp;
  input xt_rsci_oswt_1;
  output xt_rsci_wen_comp_1;
  input [9:0] xt_rsci_s_raddr_core;
  input [9:0] xt_rsci_s_waddr_core;
  output [31:0] xt_rsci_s_din_mxwt;
  input [31:0] xt_rsci_s_dout_core;
  input xt_rsci_biwt;
  input xt_rsci_bdwt;
  output xt_rsci_bcwt;
  reg xt_rsci_bcwt;
  input xt_rsci_biwt_1;
  input xt_rsci_bdwt_2;
  output xt_rsci_bcwt_1;
  reg xt_rsci_bcwt_1;
  output [9:0] xt_rsci_s_raddr;
  input xt_rsci_s_raddr_core_sct;
  output [9:0] xt_rsci_s_waddr;
  input xt_rsci_s_waddr_core_sct;
  input [31:0] xt_rsci_s_din;
  output [31:0] xt_rsci_s_dout;


  // Interconnect Declarations
  reg [31:0] xt_rsci_s_din_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsci_wen_comp = (~ xt_rsci_oswt) | xt_rsci_biwt | xt_rsci_bcwt;
  assign xt_rsci_wen_comp_1 = (~ xt_rsci_oswt_1) | xt_rsci_biwt_1 | xt_rsci_bcwt_1;
  assign xt_rsci_s_raddr = MUX_v_10_2_2(10'b0000000000, xt_rsci_s_raddr_core, xt_rsci_s_raddr_core_sct);
  assign xt_rsci_s_waddr = MUX_v_10_2_2(10'b0000000000, xt_rsci_s_waddr_core, xt_rsci_s_waddr_core_sct);
  assign xt_rsci_s_din_mxwt = MUX_v_32_2_2(xt_rsci_s_din, xt_rsci_s_din_bfwt, xt_rsci_bcwt);
  assign xt_rsci_s_dout = MUX_v_32_2_2(32'b00000000000000000000000000000000, xt_rsci_s_dout_core,
      xt_rsci_s_waddr_core_sct);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsci_bcwt <= 1'b0;
      xt_rsci_bcwt_1 <= 1'b0;
    end
    else begin
      xt_rsci_bcwt <= ~((~(xt_rsci_bcwt | xt_rsci_biwt)) | xt_rsci_bdwt);
      xt_rsci_bcwt_1 <= ~((~(xt_rsci_bcwt_1 | xt_rsci_biwt_1)) | xt_rsci_bdwt_2);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsci_biwt ) begin
      xt_rsci_s_din_bfwt <= xt_rsci_s_din;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl (
  core_wen, xt_rsci_oswt, xt_rsci_oswt_1, xt_rsci_biwt, xt_rsci_bdwt, xt_rsci_bcwt,
      xt_rsci_s_re_core_sct, xt_rsci_biwt_1, xt_rsci_bdwt_2, xt_rsci_bcwt_1, xt_rsci_s_we_core_sct,
      xt_rsci_s_rrdy, xt_rsci_s_wrdy
);
  input core_wen;
  input xt_rsci_oswt;
  input xt_rsci_oswt_1;
  output xt_rsci_biwt;
  output xt_rsci_bdwt;
  input xt_rsci_bcwt;
  output xt_rsci_s_re_core_sct;
  output xt_rsci_biwt_1;
  output xt_rsci_bdwt_2;
  input xt_rsci_bcwt_1;
  output xt_rsci_s_we_core_sct;
  input xt_rsci_s_rrdy;
  input xt_rsci_s_wrdy;


  // Interconnect Declarations
  wire xt_rsci_ogwt;
  wire xt_rsci_ogwt_1;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsci_bdwt = xt_rsci_oswt & core_wen;
  assign xt_rsci_biwt = xt_rsci_ogwt & xt_rsci_s_rrdy;
  assign xt_rsci_ogwt = xt_rsci_oswt & (~ xt_rsci_bcwt);
  assign xt_rsci_s_re_core_sct = xt_rsci_ogwt;
  assign xt_rsci_bdwt_2 = xt_rsci_oswt_1 & core_wen;
  assign xt_rsci_biwt_1 = xt_rsci_ogwt_1 & xt_rsci_s_wrdy;
  assign xt_rsci_ogwt_1 = xt_rsci_oswt_1 & (~ xt_rsci_bcwt_1);
  assign xt_rsci_s_we_core_sct = xt_rsci_ogwt_1;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_wait_dp (
  yt_rsc_cgo_iro, yt_rsci_clken_d, ensig_cgo_iro, ensig_cgo_iro_2, core_wen, yt_rsc_cgo,
      ensig_cgo, modulo_sub_cmp_ccs_ccore_en, ensig_cgo_2, mult_cmp_ccs_ccore_en
);
  input yt_rsc_cgo_iro;
  output yt_rsci_clken_d;
  input ensig_cgo_iro;
  input ensig_cgo_iro_2;
  input core_wen;
  input yt_rsc_cgo;
  input ensig_cgo;
  output modulo_sub_cmp_ccs_ccore_en;
  input ensig_cgo_2;
  output mult_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign yt_rsci_clken_d = core_wen & (yt_rsc_cgo | yt_rsc_cgo_iro);
  assign modulo_sub_cmp_ccs_ccore_en = core_wen & (ensig_cgo | ensig_cgo_iro);
  assign mult_cmp_ccs_ccore_en = core_wen & (ensig_cgo_2 | ensig_cgo_iro_2);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_obj (
  twiddle_h_rsc_triosy_lz, core_wten, twiddle_h_rsc_triosy_obj_iswt0
);
  output twiddle_h_rsc_triosy_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_obj (
      .ld(twiddle_h_rsc_triosy_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_obj_iswt0(twiddle_h_rsc_triosy_obj_iswt0),
      .twiddle_h_rsc_triosy_obj_ld_core_sct(twiddle_h_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_obj (
  twiddle_rsc_triosy_lz, core_wten, twiddle_rsc_triosy_obj_iswt0
);
  output twiddle_rsc_triosy_lz;
  input core_wten;
  input twiddle_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_obj (
      .ld(twiddle_rsc_triosy_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_obj_iswt0(twiddle_rsc_triosy_obj_iswt0),
      .twiddle_rsc_triosy_obj_ld_core_sct(twiddle_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_r_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_r_rsc_triosy_obj (
  r_rsc_triosy_lz, core_wten, r_rsc_triosy_obj_iswt0
);
  output r_rsc_triosy_lz;
  input core_wten;
  input r_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire r_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(r_rsc_triosy_obj_ld_core_sct),
      .lz(r_rsc_triosy_lz)
    );
  peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(r_rsc_triosy_obj_iswt0),
      .r_rsc_triosy_obj_ld_core_sct(r_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_p_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_p_rsc_triosy_obj (
  p_rsc_triosy_lz, core_wten, p_rsc_triosy_obj_iswt0
);
  output p_rsc_triosy_lz;
  input core_wten;
  input p_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire p_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(p_rsc_triosy_obj_ld_core_sct),
      .lz(p_rsc_triosy_lz)
    );
  peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(p_rsc_triosy_obj_iswt0),
      .p_rsc_triosy_obj_ld_core_sct(p_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_obj (
  xt_rsc_triosy_lz, core_wten, xt_rsc_triosy_obj_iswt0
);
  output xt_rsc_triosy_lz;
  input core_wten;
  input xt_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_obj (
      .ld(xt_rsc_triosy_obj_ld_core_sct),
      .lz(xt_rsc_triosy_lz)
    );
  peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl peaseNTT_core_xt_rsc_triosy_obj_xt_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_obj_iswt0(xt_rsc_triosy_obj_iswt0),
      .xt_rsc_triosy_obj_ld_core_sct(xt_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsci
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsci (
  clk, rst, twiddle_h_rsc_s_tdone, twiddle_h_rsc_tr_write_done, twiddle_h_rsc_RREADY,
      twiddle_h_rsc_RVALID, twiddle_h_rsc_RUSER, twiddle_h_rsc_RLAST, twiddle_h_rsc_RRESP,
      twiddle_h_rsc_RDATA, twiddle_h_rsc_RID, twiddle_h_rsc_ARREADY, twiddle_h_rsc_ARVALID,
      twiddle_h_rsc_ARUSER, twiddle_h_rsc_ARREGION, twiddle_h_rsc_ARQOS, twiddle_h_rsc_ARPROT,
      twiddle_h_rsc_ARCACHE, twiddle_h_rsc_ARLOCK, twiddle_h_rsc_ARBURST, twiddle_h_rsc_ARSIZE,
      twiddle_h_rsc_ARLEN, twiddle_h_rsc_ARADDR, twiddle_h_rsc_ARID, twiddle_h_rsc_BREADY,
      twiddle_h_rsc_BVALID, twiddle_h_rsc_BUSER, twiddle_h_rsc_BRESP, twiddle_h_rsc_BID,
      twiddle_h_rsc_WREADY, twiddle_h_rsc_WVALID, twiddle_h_rsc_WUSER, twiddle_h_rsc_WLAST,
      twiddle_h_rsc_WSTRB, twiddle_h_rsc_WDATA, twiddle_h_rsc_AWREADY, twiddle_h_rsc_AWVALID,
      twiddle_h_rsc_AWUSER, twiddle_h_rsc_AWREGION, twiddle_h_rsc_AWQOS, twiddle_h_rsc_AWPROT,
      twiddle_h_rsc_AWCACHE, twiddle_h_rsc_AWLOCK, twiddle_h_rsc_AWBURST, twiddle_h_rsc_AWSIZE,
      twiddle_h_rsc_AWLEN, twiddle_h_rsc_AWADDR, twiddle_h_rsc_AWID, core_wen, twiddle_h_rsci_oswt,
      twiddle_h_rsci_wen_comp, twiddle_h_rsci_s_raddr_core, twiddle_h_rsci_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  input core_wen;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_wen_comp;
  input [9:0] twiddle_h_rsci_s_raddr_core;
  output [31:0] twiddle_h_rsci_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsci_biwt;
  wire twiddle_h_rsci_bdwt;
  wire twiddle_h_rsci_bcwt;
  wire twiddle_h_rsci_s_re_core_sct;
  wire [9:0] twiddle_h_rsci_s_raddr;
  wire [31:0] twiddle_h_rsci_s_din;
  wire twiddle_h_rsci_s_rrdy;
  wire twiddle_h_rsci_s_wrdy;
  wire twiddle_h_rsc_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [9:0] nl_peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core
      = {1'b0 , (twiddle_h_rsci_s_raddr_core[8:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_AWID),
      .AWADDR(twiddle_h_rsc_AWADDR),
      .AWLEN(twiddle_h_rsc_AWLEN),
      .AWSIZE(twiddle_h_rsc_AWSIZE),
      .AWBURST(twiddle_h_rsc_AWBURST),
      .AWLOCK(twiddle_h_rsc_AWLOCK),
      .AWCACHE(twiddle_h_rsc_AWCACHE),
      .AWPROT(twiddle_h_rsc_AWPROT),
      .AWQOS(twiddle_h_rsc_AWQOS),
      .AWREGION(twiddle_h_rsc_AWREGION),
      .AWUSER(twiddle_h_rsc_AWUSER),
      .AWVALID(twiddle_h_rsc_AWVALID),
      .AWREADY(twiddle_h_rsc_AWREADY),
      .WDATA(twiddle_h_rsc_WDATA),
      .WSTRB(twiddle_h_rsc_WSTRB),
      .WLAST(twiddle_h_rsc_WLAST),
      .WUSER(twiddle_h_rsc_WUSER),
      .WVALID(twiddle_h_rsc_WVALID),
      .WREADY(twiddle_h_rsc_WREADY),
      .BID(twiddle_h_rsc_BID),
      .BRESP(twiddle_h_rsc_BRESP),
      .BUSER(twiddle_h_rsc_BUSER),
      .BVALID(twiddle_h_rsc_BVALID),
      .BREADY(twiddle_h_rsc_BREADY),
      .ARID(twiddle_h_rsc_ARID),
      .ARADDR(twiddle_h_rsc_ARADDR),
      .ARLEN(twiddle_h_rsc_ARLEN),
      .ARSIZE(twiddle_h_rsc_ARSIZE),
      .ARBURST(twiddle_h_rsc_ARBURST),
      .ARLOCK(twiddle_h_rsc_ARLOCK),
      .ARCACHE(twiddle_h_rsc_ARCACHE),
      .ARPROT(twiddle_h_rsc_ARPROT),
      .ARQOS(twiddle_h_rsc_ARQOS),
      .ARREGION(twiddle_h_rsc_ARREGION),
      .ARUSER(twiddle_h_rsc_ARUSER),
      .ARVALID(twiddle_h_rsc_ARVALID),
      .ARREADY(twiddle_h_rsc_ARREADY),
      .RID(twiddle_h_rsc_RID),
      .RDATA(twiddle_h_rsc_RDATA),
      .RRESP(twiddle_h_rsc_RRESP),
      .RLAST(twiddle_h_rsc_RLAST),
      .RUSER(twiddle_h_rsc_RUSER),
      .RVALID(twiddle_h_rsc_RVALID),
      .RREADY(twiddle_h_rsc_RREADY),
      .s_re(twiddle_h_rsci_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsci_s_raddr),
      .s_waddr(10'b0000000000),
      .s_din(twiddle_h_rsci_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsci_s_rrdy),
      .s_wrdy(twiddle_h_rsci_s_wrdy),
      .is_idle(twiddle_h_rsc_is_idle),
      .tr_write_done(twiddle_h_rsc_tr_write_done),
      .s_tdone(twiddle_h_rsc_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsci_oswt(twiddle_h_rsci_oswt),
      .twiddle_h_rsci_biwt(twiddle_h_rsci_biwt),
      .twiddle_h_rsci_bdwt(twiddle_h_rsci_bdwt),
      .twiddle_h_rsci_bcwt(twiddle_h_rsci_bcwt),
      .twiddle_h_rsci_s_re_core_sct(twiddle_h_rsci_s_re_core_sct),
      .twiddle_h_rsci_s_rrdy(twiddle_h_rsci_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsci_oswt(twiddle_h_rsci_oswt),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp),
      .twiddle_h_rsci_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst_twiddle_h_rsci_s_raddr_core[9:0]),
      .twiddle_h_rsci_s_din_mxwt(twiddle_h_rsci_s_din_mxwt),
      .twiddle_h_rsci_biwt(twiddle_h_rsci_biwt),
      .twiddle_h_rsci_bdwt(twiddle_h_rsci_bdwt),
      .twiddle_h_rsci_bcwt(twiddle_h_rsci_bcwt),
      .twiddle_h_rsci_s_raddr(twiddle_h_rsci_s_raddr),
      .twiddle_h_rsci_s_raddr_core_sct(twiddle_h_rsci_s_re_core_sct),
      .twiddle_h_rsci_s_din(twiddle_h_rsci_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsci
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsci (
  clk, rst, twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done, twiddle_rsc_RREADY, twiddle_rsc_RVALID,
      twiddle_rsc_RUSER, twiddle_rsc_RLAST, twiddle_rsc_RRESP, twiddle_rsc_RDATA,
      twiddle_rsc_RID, twiddle_rsc_ARREADY, twiddle_rsc_ARVALID, twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION, twiddle_rsc_ARQOS, twiddle_rsc_ARPROT, twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST, twiddle_rsc_ARSIZE, twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR, twiddle_rsc_ARID, twiddle_rsc_BREADY, twiddle_rsc_BVALID,
      twiddle_rsc_BUSER, twiddle_rsc_BRESP, twiddle_rsc_BID, twiddle_rsc_WREADY,
      twiddle_rsc_WVALID, twiddle_rsc_WUSER, twiddle_rsc_WLAST, twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA, twiddle_rsc_AWREADY, twiddle_rsc_AWVALID, twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION, twiddle_rsc_AWQOS, twiddle_rsc_AWPROT, twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST, twiddle_rsc_AWSIZE, twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR, twiddle_rsc_AWID, core_wen, twiddle_rsci_oswt, twiddle_rsci_wen_comp,
      twiddle_rsci_s_raddr_core, twiddle_rsci_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  input core_wen;
  input twiddle_rsci_oswt;
  output twiddle_rsci_wen_comp;
  input [9:0] twiddle_rsci_s_raddr_core;
  output [31:0] twiddle_rsci_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsci_biwt;
  wire twiddle_rsci_bdwt;
  wire twiddle_rsci_bcwt;
  wire twiddle_rsci_s_re_core_sct;
  wire [9:0] twiddle_rsci_s_raddr;
  wire [31:0] twiddle_rsci_s_din;
  wire twiddle_rsci_s_rrdy;
  wire twiddle_rsci_s_wrdy;
  wire twiddle_rsc_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [9:0] nl_peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core
      = {1'b0 , (twiddle_rsci_s_raddr_core[8:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_AWID),
      .AWADDR(twiddle_rsc_AWADDR),
      .AWLEN(twiddle_rsc_AWLEN),
      .AWSIZE(twiddle_rsc_AWSIZE),
      .AWBURST(twiddle_rsc_AWBURST),
      .AWLOCK(twiddle_rsc_AWLOCK),
      .AWCACHE(twiddle_rsc_AWCACHE),
      .AWPROT(twiddle_rsc_AWPROT),
      .AWQOS(twiddle_rsc_AWQOS),
      .AWREGION(twiddle_rsc_AWREGION),
      .AWUSER(twiddle_rsc_AWUSER),
      .AWVALID(twiddle_rsc_AWVALID),
      .AWREADY(twiddle_rsc_AWREADY),
      .WDATA(twiddle_rsc_WDATA),
      .WSTRB(twiddle_rsc_WSTRB),
      .WLAST(twiddle_rsc_WLAST),
      .WUSER(twiddle_rsc_WUSER),
      .WVALID(twiddle_rsc_WVALID),
      .WREADY(twiddle_rsc_WREADY),
      .BID(twiddle_rsc_BID),
      .BRESP(twiddle_rsc_BRESP),
      .BUSER(twiddle_rsc_BUSER),
      .BVALID(twiddle_rsc_BVALID),
      .BREADY(twiddle_rsc_BREADY),
      .ARID(twiddle_rsc_ARID),
      .ARADDR(twiddle_rsc_ARADDR),
      .ARLEN(twiddle_rsc_ARLEN),
      .ARSIZE(twiddle_rsc_ARSIZE),
      .ARBURST(twiddle_rsc_ARBURST),
      .ARLOCK(twiddle_rsc_ARLOCK),
      .ARCACHE(twiddle_rsc_ARCACHE),
      .ARPROT(twiddle_rsc_ARPROT),
      .ARQOS(twiddle_rsc_ARQOS),
      .ARREGION(twiddle_rsc_ARREGION),
      .ARUSER(twiddle_rsc_ARUSER),
      .ARVALID(twiddle_rsc_ARVALID),
      .ARREADY(twiddle_rsc_ARREADY),
      .RID(twiddle_rsc_RID),
      .RDATA(twiddle_rsc_RDATA),
      .RRESP(twiddle_rsc_RRESP),
      .RLAST(twiddle_rsc_RLAST),
      .RUSER(twiddle_rsc_RUSER),
      .RVALID(twiddle_rsc_RVALID),
      .RREADY(twiddle_rsc_RREADY),
      .s_re(twiddle_rsci_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsci_s_raddr),
      .s_waddr(10'b0000000000),
      .s_din(twiddle_rsci_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsci_s_rrdy),
      .s_wrdy(twiddle_rsci_s_wrdy),
      .is_idle(twiddle_rsc_is_idle),
      .tr_write_done(twiddle_rsc_tr_write_done),
      .s_tdone(twiddle_rsc_s_tdone)
    );
  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsci_oswt(twiddle_rsci_oswt),
      .twiddle_rsci_biwt(twiddle_rsci_biwt),
      .twiddle_rsci_bdwt(twiddle_rsci_bdwt),
      .twiddle_rsci_bcwt(twiddle_rsci_bcwt),
      .twiddle_rsci_s_re_core_sct(twiddle_rsci_s_re_core_sct),
      .twiddle_rsci_s_rrdy(twiddle_rsci_s_rrdy)
    );
  peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsci_oswt(twiddle_rsci_oswt),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_rsci_s_raddr_core(nl_peaseNTT_core_twiddle_rsci_twiddle_rsc_wait_dp_inst_twiddle_rsci_s_raddr_core[9:0]),
      .twiddle_rsci_s_din_mxwt(twiddle_rsci_s_din_mxwt),
      .twiddle_rsci_biwt(twiddle_rsci_biwt),
      .twiddle_rsci_bdwt(twiddle_rsci_bdwt),
      .twiddle_rsci_bcwt(twiddle_rsci_bcwt),
      .twiddle_rsci_s_raddr(twiddle_rsci_s_raddr),
      .twiddle_rsci_s_raddr_core_sct(twiddle_rsci_s_re_core_sct),
      .twiddle_rsci_s_din(twiddle_rsci_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsci
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsci (
  clk, rst, xt_rsc_s_tdone, xt_rsc_tr_write_done, xt_rsc_RREADY, xt_rsc_RVALID, xt_rsc_RUSER,
      xt_rsc_RLAST, xt_rsc_RRESP, xt_rsc_RDATA, xt_rsc_RID, xt_rsc_ARREADY, xt_rsc_ARVALID,
      xt_rsc_ARUSER, xt_rsc_ARREGION, xt_rsc_ARQOS, xt_rsc_ARPROT, xt_rsc_ARCACHE,
      xt_rsc_ARLOCK, xt_rsc_ARBURST, xt_rsc_ARSIZE, xt_rsc_ARLEN, xt_rsc_ARADDR,
      xt_rsc_ARID, xt_rsc_BREADY, xt_rsc_BVALID, xt_rsc_BUSER, xt_rsc_BRESP, xt_rsc_BID,
      xt_rsc_WREADY, xt_rsc_WVALID, xt_rsc_WUSER, xt_rsc_WLAST, xt_rsc_WSTRB, xt_rsc_WDATA,
      xt_rsc_AWREADY, xt_rsc_AWVALID, xt_rsc_AWUSER, xt_rsc_AWREGION, xt_rsc_AWQOS,
      xt_rsc_AWPROT, xt_rsc_AWCACHE, xt_rsc_AWLOCK, xt_rsc_AWBURST, xt_rsc_AWSIZE,
      xt_rsc_AWLEN, xt_rsc_AWADDR, xt_rsc_AWID, core_wen, xt_rsci_oswt, xt_rsci_wen_comp,
      xt_rsci_oswt_1, xt_rsci_wen_comp_1, xt_rsci_s_raddr_core, xt_rsci_s_waddr_core,
      xt_rsci_s_din_mxwt, xt_rsci_s_dout_core
);
  input clk;
  input rst;
  input xt_rsc_s_tdone;
  input xt_rsc_tr_write_done;
  input xt_rsc_RREADY;
  output xt_rsc_RVALID;
  output xt_rsc_RUSER;
  output xt_rsc_RLAST;
  output [1:0] xt_rsc_RRESP;
  output [31:0] xt_rsc_RDATA;
  output xt_rsc_RID;
  output xt_rsc_ARREADY;
  input xt_rsc_ARVALID;
  input xt_rsc_ARUSER;
  input [3:0] xt_rsc_ARREGION;
  input [3:0] xt_rsc_ARQOS;
  input [2:0] xt_rsc_ARPROT;
  input [3:0] xt_rsc_ARCACHE;
  input xt_rsc_ARLOCK;
  input [1:0] xt_rsc_ARBURST;
  input [2:0] xt_rsc_ARSIZE;
  input [7:0] xt_rsc_ARLEN;
  input [11:0] xt_rsc_ARADDR;
  input xt_rsc_ARID;
  input xt_rsc_BREADY;
  output xt_rsc_BVALID;
  output xt_rsc_BUSER;
  output [1:0] xt_rsc_BRESP;
  output xt_rsc_BID;
  output xt_rsc_WREADY;
  input xt_rsc_WVALID;
  input xt_rsc_WUSER;
  input xt_rsc_WLAST;
  input [3:0] xt_rsc_WSTRB;
  input [31:0] xt_rsc_WDATA;
  output xt_rsc_AWREADY;
  input xt_rsc_AWVALID;
  input xt_rsc_AWUSER;
  input [3:0] xt_rsc_AWREGION;
  input [3:0] xt_rsc_AWQOS;
  input [2:0] xt_rsc_AWPROT;
  input [3:0] xt_rsc_AWCACHE;
  input xt_rsc_AWLOCK;
  input [1:0] xt_rsc_AWBURST;
  input [2:0] xt_rsc_AWSIZE;
  input [7:0] xt_rsc_AWLEN;
  input [11:0] xt_rsc_AWADDR;
  input xt_rsc_AWID;
  input core_wen;
  input xt_rsci_oswt;
  output xt_rsci_wen_comp;
  input xt_rsci_oswt_1;
  output xt_rsci_wen_comp_1;
  input [9:0] xt_rsci_s_raddr_core;
  input [9:0] xt_rsci_s_waddr_core;
  output [31:0] xt_rsci_s_din_mxwt;
  input [31:0] xt_rsci_s_dout_core;


  // Interconnect Declarations
  wire xt_rsci_biwt;
  wire xt_rsci_bdwt;
  wire xt_rsci_bcwt;
  wire xt_rsci_s_re_core_sct;
  wire xt_rsci_biwt_1;
  wire xt_rsci_bdwt_2;
  wire xt_rsci_bcwt_1;
  wire xt_rsci_s_we_core_sct;
  wire [9:0] xt_rsci_s_raddr;
  wire [9:0] xt_rsci_s_waddr;
  wire [31:0] xt_rsci_s_din;
  wire [31:0] xt_rsci_s_dout;
  wire xt_rsci_s_rrdy;
  wire xt_rsci_s_wrdy;
  wire xt_rsc_is_idle_1;


  // Interconnect Declarations for Component Instantiations 
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) xt_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(xt_rsc_AWID),
      .AWADDR(xt_rsc_AWADDR),
      .AWLEN(xt_rsc_AWLEN),
      .AWSIZE(xt_rsc_AWSIZE),
      .AWBURST(xt_rsc_AWBURST),
      .AWLOCK(xt_rsc_AWLOCK),
      .AWCACHE(xt_rsc_AWCACHE),
      .AWPROT(xt_rsc_AWPROT),
      .AWQOS(xt_rsc_AWQOS),
      .AWREGION(xt_rsc_AWREGION),
      .AWUSER(xt_rsc_AWUSER),
      .AWVALID(xt_rsc_AWVALID),
      .AWREADY(xt_rsc_AWREADY),
      .WDATA(xt_rsc_WDATA),
      .WSTRB(xt_rsc_WSTRB),
      .WLAST(xt_rsc_WLAST),
      .WUSER(xt_rsc_WUSER),
      .WVALID(xt_rsc_WVALID),
      .WREADY(xt_rsc_WREADY),
      .BID(xt_rsc_BID),
      .BRESP(xt_rsc_BRESP),
      .BUSER(xt_rsc_BUSER),
      .BVALID(xt_rsc_BVALID),
      .BREADY(xt_rsc_BREADY),
      .ARID(xt_rsc_ARID),
      .ARADDR(xt_rsc_ARADDR),
      .ARLEN(xt_rsc_ARLEN),
      .ARSIZE(xt_rsc_ARSIZE),
      .ARBURST(xt_rsc_ARBURST),
      .ARLOCK(xt_rsc_ARLOCK),
      .ARCACHE(xt_rsc_ARCACHE),
      .ARPROT(xt_rsc_ARPROT),
      .ARQOS(xt_rsc_ARQOS),
      .ARREGION(xt_rsc_ARREGION),
      .ARUSER(xt_rsc_ARUSER),
      .ARVALID(xt_rsc_ARVALID),
      .ARREADY(xt_rsc_ARREADY),
      .RID(xt_rsc_RID),
      .RDATA(xt_rsc_RDATA),
      .RRESP(xt_rsc_RRESP),
      .RLAST(xt_rsc_RLAST),
      .RUSER(xt_rsc_RUSER),
      .RVALID(xt_rsc_RVALID),
      .RREADY(xt_rsc_RREADY),
      .s_re(xt_rsci_s_re_core_sct),
      .s_we(xt_rsci_s_we_core_sct),
      .s_raddr(xt_rsci_s_raddr),
      .s_waddr(xt_rsci_s_waddr),
      .s_din(xt_rsci_s_din),
      .s_dout(xt_rsci_s_dout),
      .s_rrdy(xt_rsci_s_rrdy),
      .s_wrdy(xt_rsci_s_wrdy),
      .is_idle(xt_rsc_is_idle_1),
      .tr_write_done(xt_rsc_tr_write_done),
      .s_tdone(xt_rsc_s_tdone)
    );
  peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl peaseNTT_core_xt_rsci_xt_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .xt_rsci_oswt(xt_rsci_oswt),
      .xt_rsci_oswt_1(xt_rsci_oswt_1),
      .xt_rsci_biwt(xt_rsci_biwt),
      .xt_rsci_bdwt(xt_rsci_bdwt),
      .xt_rsci_bcwt(xt_rsci_bcwt),
      .xt_rsci_s_re_core_sct(xt_rsci_s_re_core_sct),
      .xt_rsci_biwt_1(xt_rsci_biwt_1),
      .xt_rsci_bdwt_2(xt_rsci_bdwt_2),
      .xt_rsci_bcwt_1(xt_rsci_bcwt_1),
      .xt_rsci_s_we_core_sct(xt_rsci_s_we_core_sct),
      .xt_rsci_s_rrdy(xt_rsci_s_rrdy),
      .xt_rsci_s_wrdy(xt_rsci_s_wrdy)
    );
  peaseNTT_core_xt_rsci_xt_rsc_wait_dp peaseNTT_core_xt_rsci_xt_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsci_oswt(xt_rsci_oswt),
      .xt_rsci_wen_comp(xt_rsci_wen_comp),
      .xt_rsci_oswt_1(xt_rsci_oswt_1),
      .xt_rsci_wen_comp_1(xt_rsci_wen_comp_1),
      .xt_rsci_s_raddr_core(xt_rsci_s_raddr_core),
      .xt_rsci_s_waddr_core(xt_rsci_s_waddr_core),
      .xt_rsci_s_din_mxwt(xt_rsci_s_din_mxwt),
      .xt_rsci_s_dout_core(xt_rsci_s_dout_core),
      .xt_rsci_biwt(xt_rsci_biwt),
      .xt_rsci_bdwt(xt_rsci_bdwt),
      .xt_rsci_bcwt(xt_rsci_bcwt),
      .xt_rsci_biwt_1(xt_rsci_biwt_1),
      .xt_rsci_bdwt_2(xt_rsci_bdwt_2),
      .xt_rsci_bcwt_1(xt_rsci_bcwt_1),
      .xt_rsci_s_raddr(xt_rsci_s_raddr),
      .xt_rsci_s_raddr_core_sct(xt_rsci_s_re_core_sct),
      .xt_rsci_s_waddr(xt_rsci_s_waddr),
      .xt_rsci_s_waddr_core_sct(xt_rsci_s_we_core_sct),
      .xt_rsci_s_din(xt_rsci_s_din),
      .xt_rsci_s_dout(xt_rsci_s_dout)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core
// ------------------------------------------------------------------


module peaseNTT_core (
  clk, rst, xt_rsc_s_tdone, xt_rsc_tr_write_done, xt_rsc_RREADY, xt_rsc_RVALID, xt_rsc_RUSER,
      xt_rsc_RLAST, xt_rsc_RRESP, xt_rsc_RDATA, xt_rsc_RID, xt_rsc_ARREADY, xt_rsc_ARVALID,
      xt_rsc_ARUSER, xt_rsc_ARREGION, xt_rsc_ARQOS, xt_rsc_ARPROT, xt_rsc_ARCACHE,
      xt_rsc_ARLOCK, xt_rsc_ARBURST, xt_rsc_ARSIZE, xt_rsc_ARLEN, xt_rsc_ARADDR,
      xt_rsc_ARID, xt_rsc_BREADY, xt_rsc_BVALID, xt_rsc_BUSER, xt_rsc_BRESP, xt_rsc_BID,
      xt_rsc_WREADY, xt_rsc_WVALID, xt_rsc_WUSER, xt_rsc_WLAST, xt_rsc_WSTRB, xt_rsc_WDATA,
      xt_rsc_AWREADY, xt_rsc_AWVALID, xt_rsc_AWUSER, xt_rsc_AWREGION, xt_rsc_AWQOS,
      xt_rsc_AWPROT, xt_rsc_AWCACHE, xt_rsc_AWLOCK, xt_rsc_AWBURST, xt_rsc_AWSIZE,
      xt_rsc_AWLEN, xt_rsc_AWADDR, xt_rsc_AWID, xt_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_triosy_lz, twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done, twiddle_rsc_RREADY,
      twiddle_rsc_RVALID, twiddle_rsc_RUSER, twiddle_rsc_RLAST, twiddle_rsc_RRESP,
      twiddle_rsc_RDATA, twiddle_rsc_RID, twiddle_rsc_ARREADY, twiddle_rsc_ARVALID,
      twiddle_rsc_ARUSER, twiddle_rsc_ARREGION, twiddle_rsc_ARQOS, twiddle_rsc_ARPROT,
      twiddle_rsc_ARCACHE, twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST, twiddle_rsc_ARSIZE,
      twiddle_rsc_ARLEN, twiddle_rsc_ARADDR, twiddle_rsc_ARID, twiddle_rsc_BREADY,
      twiddle_rsc_BVALID, twiddle_rsc_BUSER, twiddle_rsc_BRESP, twiddle_rsc_BID,
      twiddle_rsc_WREADY, twiddle_rsc_WVALID, twiddle_rsc_WUSER, twiddle_rsc_WLAST,
      twiddle_rsc_WSTRB, twiddle_rsc_WDATA, twiddle_rsc_AWREADY, twiddle_rsc_AWVALID,
      twiddle_rsc_AWUSER, twiddle_rsc_AWREGION, twiddle_rsc_AWQOS, twiddle_rsc_AWPROT,
      twiddle_rsc_AWCACHE, twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST, twiddle_rsc_AWSIZE,
      twiddle_rsc_AWLEN, twiddle_rsc_AWADDR, twiddle_rsc_AWID, twiddle_rsc_triosy_lz,
      twiddle_h_rsc_s_tdone, twiddle_h_rsc_tr_write_done, twiddle_h_rsc_RREADY, twiddle_h_rsc_RVALID,
      twiddle_h_rsc_RUSER, twiddle_h_rsc_RLAST, twiddle_h_rsc_RRESP, twiddle_h_rsc_RDATA,
      twiddle_h_rsc_RID, twiddle_h_rsc_ARREADY, twiddle_h_rsc_ARVALID, twiddle_h_rsc_ARUSER,
      twiddle_h_rsc_ARREGION, twiddle_h_rsc_ARQOS, twiddle_h_rsc_ARPROT, twiddle_h_rsc_ARCACHE,
      twiddle_h_rsc_ARLOCK, twiddle_h_rsc_ARBURST, twiddle_h_rsc_ARSIZE, twiddle_h_rsc_ARLEN,
      twiddle_h_rsc_ARADDR, twiddle_h_rsc_ARID, twiddle_h_rsc_BREADY, twiddle_h_rsc_BVALID,
      twiddle_h_rsc_BUSER, twiddle_h_rsc_BRESP, twiddle_h_rsc_BID, twiddle_h_rsc_WREADY,
      twiddle_h_rsc_WVALID, twiddle_h_rsc_WUSER, twiddle_h_rsc_WLAST, twiddle_h_rsc_WSTRB,
      twiddle_h_rsc_WDATA, twiddle_h_rsc_AWREADY, twiddle_h_rsc_AWVALID, twiddle_h_rsc_AWUSER,
      twiddle_h_rsc_AWREGION, twiddle_h_rsc_AWQOS, twiddle_h_rsc_AWPROT, twiddle_h_rsc_AWCACHE,
      twiddle_h_rsc_AWLOCK, twiddle_h_rsc_AWBURST, twiddle_h_rsc_AWSIZE, twiddle_h_rsc_AWLEN,
      twiddle_h_rsc_AWADDR, twiddle_h_rsc_AWID, twiddle_h_rsc_triosy_lz, yt_rsci_clken_d,
      yt_rsci_d_d, yt_rsci_q_d, yt_rsci_radr_d, yt_rsci_wadr_d, yt_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsci_we_d_pff
);
  input clk;
  input rst;
  input xt_rsc_s_tdone;
  input xt_rsc_tr_write_done;
  input xt_rsc_RREADY;
  output xt_rsc_RVALID;
  output xt_rsc_RUSER;
  output xt_rsc_RLAST;
  output [1:0] xt_rsc_RRESP;
  output [31:0] xt_rsc_RDATA;
  output xt_rsc_RID;
  output xt_rsc_ARREADY;
  input xt_rsc_ARVALID;
  input xt_rsc_ARUSER;
  input [3:0] xt_rsc_ARREGION;
  input [3:0] xt_rsc_ARQOS;
  input [2:0] xt_rsc_ARPROT;
  input [3:0] xt_rsc_ARCACHE;
  input xt_rsc_ARLOCK;
  input [1:0] xt_rsc_ARBURST;
  input [2:0] xt_rsc_ARSIZE;
  input [7:0] xt_rsc_ARLEN;
  input [11:0] xt_rsc_ARADDR;
  input xt_rsc_ARID;
  input xt_rsc_BREADY;
  output xt_rsc_BVALID;
  output xt_rsc_BUSER;
  output [1:0] xt_rsc_BRESP;
  output xt_rsc_BID;
  output xt_rsc_WREADY;
  input xt_rsc_WVALID;
  input xt_rsc_WUSER;
  input xt_rsc_WLAST;
  input [3:0] xt_rsc_WSTRB;
  input [31:0] xt_rsc_WDATA;
  output xt_rsc_AWREADY;
  input xt_rsc_AWVALID;
  input xt_rsc_AWUSER;
  input [3:0] xt_rsc_AWREGION;
  input [3:0] xt_rsc_AWQOS;
  input [2:0] xt_rsc_AWPROT;
  input [3:0] xt_rsc_AWCACHE;
  input xt_rsc_AWLOCK;
  input [1:0] xt_rsc_AWBURST;
  input [2:0] xt_rsc_AWSIZE;
  input [7:0] xt_rsc_AWLEN;
  input [11:0] xt_rsc_AWADDR;
  input xt_rsc_AWID;
  output xt_rsc_triosy_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  output twiddle_rsc_triosy_lz;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  output twiddle_h_rsc_triosy_lz;
  output yt_rsci_clken_d;
  output [31:0] yt_rsci_d_d;
  input [31:0] yt_rsci_q_d;
  output [9:0] yt_rsci_radr_d;
  output [9:0] yt_rsci_wadr_d;
  output yt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsci_we_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire xt_rsci_wen_comp;
  wire xt_rsci_wen_comp_1;
  wire [31:0] xt_rsci_s_din_mxwt;
  reg [31:0] xt_rsci_s_dout_core;
  wire [31:0] p_rsci_idat;
  wire twiddle_rsci_wen_comp;
  wire [31:0] twiddle_rsci_s_din_mxwt;
  wire twiddle_h_rsci_wen_comp;
  wire [31:0] twiddle_h_rsci_s_din_mxwt;
  wire [31:0] modulo_sub_cmp_return_rsc_z;
  wire modulo_sub_cmp_ccs_ccore_en;
  wire [31:0] modulo_add_cmp_return_rsc_z;
  wire [31:0] mult_cmp_return_rsc_z;
  wire mult_cmp_ccs_ccore_en;
  reg xt_rsci_s_raddr_core_0;
  reg xt_rsci_s_waddr_core_9;
  wire [5:0] fsm_output;
  wire and_dcpl_2;
  wire and_dcpl_6;
  wire nor_tmp_4;
  wire and_dcpl_7;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_16;
  wire and_dcpl_18;
  wire and_dcpl_20;
  wire and_dcpl_21;
  wire and_dcpl_25;
  wire xor_dcpl;
  wire and_dcpl_27;
  wire xor_dcpl_1;
  wire or_dcpl_12;
  wire mux_tmp_16;
  wire xor_dcpl_2;
  wire mux_tmp_17;
  wire and_dcpl_32;
  wire and_dcpl_34;
  wire and_dcpl_35;
  wire and_dcpl_36;
  wire and_dcpl_37;
  wire and_dcpl_38;
  wire and_dcpl_40;
  wire and_dcpl_48;
  wire and_dcpl_49;
  wire and_dcpl_50;
  wire or_tmp_10;
  wire mux_tmp_23;
  wire and_dcpl_61;
  wire xor_dcpl_4;
  wire and_dcpl_63;
  wire nor_tmp_8;
  wire and_dcpl_73;
  reg c_1_sva;
  reg [9:0] INNER_LOOP1_r_9_0_sva_1;
  reg reg_xt_rsci_oswt_cse;
  reg reg_xt_rsci_oswt_1_cse;
  reg [8:0] reg_xt_rsci_s_raddr_core_9_1_cse;
  reg reg_twiddle_rsci_oswt_cse;
  reg reg_twiddle_rsci_s_raddr_core_2_cse;
  reg [4:0] reg_twiddle_rsci_s_raddr_core_7_3_cse;
  reg [1:0] reg_twiddle_rsci_s_raddr_core_1_0_cse;
  reg reg_twiddle_rsci_s_raddr_core_8_cse;
  reg reg_yt_rsc_cgo_cse;
  reg reg_xt_rsc_triosy_obj_iswt0_cse;
  reg reg_ensig_cgo_cse;
  reg reg_ensig_cgo_2_cse;
  wire or_48_cse;
  wire and_93_cse;
  wire nor_cse;
  wire or_46_cse;
  wire INNER_LOOP1_tw_or_cse;
  wire and_48_rmff;
  wire and_60_rmff;
  wire and_61_rmff;
  reg [31:0] butterFly1_1_f1_sva;
  reg [31:0] butterFly1_1_f2_mult_tw_sva;
  reg [31:0] butterFly1_1_f2_mult_tw_h_sva;
  reg [31:0] p_sva;
  reg [8:0] INNER_LOOP1_r_9_0_sva_8_0;
  wire mux_28_itm;
  wire [2:0] operator_33_true_2_lshift_itm;
  wire [1:0] operator_33_true_3_lshift_itm;
  wire mux_24_itm;
  wire and_dcpl_90;
  wire [8:0] z_out;
  wire and_dcpl_96;
  wire [9:0] z_out_1;
  wire [10:0] nl_z_out_1;
  wire c_1_sva_mx0c0;
  wire c_1_sva_mx0c2;
  wire INNER_LOOP1_r_9_0_sva_8_0_mx0c0;
  wire [8:0] INNER_LOOP1_tw_and_psp_sva_1;
  wire butterFly1_1_f1_sva_mx0c0;
  wire butterFly1_1_f1_sva_mx0c1;
  wire butterFly1_1_f1_sva_mx0c2;
  wire [7:0] INNER_LOOP2_tw_and_psp_7_0_sva_1;
  wire [2:0] butterFly2_tw_and_psp_2_0_sva_1;
  wire and_72_rgt;
  wire operator_20_false_and_1_ssc;
  reg reg_operator_20_false_acc_ftd;
  reg [1:0] reg_operator_20_false_acc_ftd_1;
  wire operator_20_false_or_1_m1c;
  reg operator_33_true_return_8_0_sva_8;
  reg [7:0] operator_33_true_return_8_0_sva_7_0;
  wire nor_30_cse;

  wire[0:0] mux_12_nl;
  wire[0:0] STAGE_LOOP_mux_12_nl;
  wire[0:0] c_c_or_nl;
  wire[0:0] and_30_nl;
  wire[0:0] nor_21_nl;
  wire[1:0] butterFly2_1_tw_and_nl;
  wire[0:0] and_47_nl;
  wire[0:0] mux_20_nl;
  wire[0:0] mux_22_nl;
  wire[0:0] nand_13_nl;
  wire[0:0] mux_21_nl;
  wire[0:0] mux_23_nl;
  wire[0:0] nand_4_nl;
  wire[0:0] mux_27_nl;
  wire[0:0] mux_26_nl;
  wire[0:0] and_88_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] nor_22_nl;
  wire[0:0] mux_2_nl;
  wire[0:0] or_4_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] nor_28_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] and_nl;
  wire[0:0] and_71_nl;
  wire[0:0] operator_20_false_and_2_nl;
  wire[0:0] mux_15_nl;
  wire[0:0] mux_14_nl;
  wire[0:0] mux_13_nl;
  wire[0:0] operator_20_false_and_3_nl;
  wire[0:0] and_13_nl;
  wire[0:0] INNER_LOOP1_r_not_1_nl;
  wire[0:0] or_28_nl;
  wire[0:0] or_32_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] nor_12_nl;
  wire[0:0] nor_13_nl;
  wire[0:0] butterFly1_butterFly1_nand_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] nor_23_nl;
  wire[0:0] nor_24_nl;
  wire[0:0] mux_nl;
  wire[8:0] operator_20_false_mux_3_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [31:0] nl_modulo_sub_cmp_base_rsc_dat;
  assign nl_modulo_sub_cmp_base_rsc_dat = butterFly1_1_f1_sva - mult_cmp_return_rsc_z;
  wire [31:0] nl_modulo_sub_cmp_m_rsc_dat;
  assign nl_modulo_sub_cmp_m_rsc_dat = p_sva;
  wire [31:0] nl_modulo_add_cmp_base_rsc_dat;
  assign nl_modulo_add_cmp_base_rsc_dat = butterFly1_1_f1_sva + mult_cmp_return_rsc_z;
  wire [31:0] nl_modulo_add_cmp_m_rsc_dat;
  assign nl_modulo_add_cmp_m_rsc_dat = p_sva;
  wire[0:0] and_65_nl;
  wire [31:0] nl_mult_cmp_x_rsc_dat;
  assign and_65_nl = and_dcpl_63 & and_dcpl_61 & (fsm_output[4]);
  assign nl_mult_cmp_x_rsc_dat = MUX_v_32_2_2(xt_rsci_s_din_mxwt, butterFly1_1_f1_sva,
      and_65_nl);
  wire [31:0] nl_mult_cmp_y_rsc_dat;
  assign nl_mult_cmp_y_rsc_dat = MUX_v_32_2_2(twiddle_rsci_s_din_mxwt, butterFly1_1_f2_mult_tw_sva,
      INNER_LOOP1_tw_or_cse);
  wire [31:0] nl_mult_cmp_y_rsc_dat_1;
  assign nl_mult_cmp_y_rsc_dat_1 = MUX_v_32_2_2(twiddle_h_rsci_s_din_mxwt, butterFly1_1_f2_mult_tw_h_sva,
      INNER_LOOP1_tw_or_cse);
  wire [31:0] nl_mult_cmp_p_rsc_dat;
  assign nl_mult_cmp_p_rsc_dat = p_sva;
  wire [0:0] nl_mult_cmp_ccs_ccore_start_rsc_dat;
  assign nl_mult_cmp_ccs_ccore_start_rsc_dat = and_dcpl_63 & and_dcpl_61;
  wire [2:0] nl_operator_33_true_2_lshift_rg_s;
  assign nl_operator_33_true_2_lshift_rg_s = {1'b0 , (~ c_1_sva) , 1'b1};
  wire [2:0] nl_operator_33_true_3_lshift_rg_s;
  assign nl_operator_33_true_3_lshift_rg_s = {1'b0 , (~ c_1_sva) , 1'b0};
  wire[2:0] operator_33_true_mux_nl;
  wire [3:0] nl_operator_33_true_1_lshift_rg_s;
  assign operator_33_true_mux_nl = MUX_v_3_2_2((z_out_1[2:0]), ({reg_operator_20_false_acc_ftd
      , reg_operator_20_false_acc_ftd_1}), and_dcpl_90);
  assign nl_operator_33_true_1_lshift_rg_s = {operator_33_true_mux_nl , (~ and_dcpl_90)};
  wire [0:0] nl_peaseNTT_core_wait_dp_inst_ensig_cgo_iro_2;
  assign nl_peaseNTT_core_wait_dp_inst_ensig_cgo_iro_2 = ~ mux_28_itm;
  wire [9:0] nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core;
  assign nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core = {reg_xt_rsci_s_raddr_core_9_1_cse
      , xt_rsci_s_raddr_core_0};
  wire [9:0] nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core;
  assign nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core = {xt_rsci_s_waddr_core_9
      , reg_xt_rsci_s_raddr_core_9_1_cse};
  wire [9:0] nl_peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core = {1'b0 , reg_twiddle_rsci_s_raddr_core_8_cse
      , reg_twiddle_rsci_s_raddr_core_7_3_cse , reg_twiddle_rsci_s_raddr_core_2_cse
      , reg_twiddle_rsci_s_raddr_core_1_0_cse};
  wire [9:0] nl_peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core = {1'b0
      , reg_twiddle_rsci_s_raddr_core_8_cse , reg_twiddle_rsci_s_raddr_core_7_3_cse
      , reg_twiddle_rsci_s_raddr_core_2_cse , reg_twiddle_rsci_s_raddr_core_1_0_cse};
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_13_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_13_tr0 = INNER_LOOP1_r_9_0_sva_1[9];
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr0 = (INNER_LOOP1_r_9_0_sva_1[9])
      & ((reg_operator_20_false_acc_ftd_1[0]) ^ (reg_operator_20_false_acc_ftd_1[1]));
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr1;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr1 = ~ (INNER_LOOP1_r_9_0_sva_1[9]);
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_13_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_13_tr0 = INNER_LOOP1_r_9_0_sva_1[9];
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr0 = and_dcpl_6;
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr1;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr1 = ~ (INNER_LOOP1_r_9_0_sva_1[9]);
  ccs_in_v1 #(.rscid(32'sd13),
  .width(32'sd32)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  modulo_sub  modulo_sub_cmp (
      .base_rsc_dat(nl_modulo_sub_cmp_base_rsc_dat[31:0]),
      .m_rsc_dat(nl_modulo_sub_cmp_m_rsc_dat[31:0]),
      .return_rsc_z(modulo_sub_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(and_61_rmff),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_sub_cmp_ccs_ccore_en)
    );
  modulo_add  modulo_add_cmp (
      .base_rsc_dat(nl_modulo_add_cmp_base_rsc_dat[31:0]),
      .m_rsc_dat(nl_modulo_add_cmp_m_rsc_dat[31:0]),
      .return_rsc_z(modulo_add_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(and_61_rmff),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_sub_cmp_ccs_ccore_en)
    );
  mult  mult_cmp (
      .x_rsc_dat(nl_mult_cmp_x_rsc_dat[31:0]),
      .y_rsc_dat(nl_mult_cmp_y_rsc_dat[31:0]),
      .y_rsc_dat_1(nl_mult_cmp_y_rsc_dat_1[31:0]),
      .p_rsc_dat(nl_mult_cmp_p_rsc_dat[31:0]),
      .return_rsc_z(mult_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_mult_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(mult_cmp_ccs_ccore_en)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd1),
  .width_s(32'sd3),
  .width_z(32'sd3)) operator_33_true_2_lshift_rg (
      .a(1'b1),
      .s(nl_operator_33_true_2_lshift_rg_s[2:0]),
      .z(operator_33_true_2_lshift_itm)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd1),
  .width_s(32'sd3),
  .width_z(32'sd2)) operator_33_true_3_lshift_rg (
      .a(1'b1),
      .s(nl_operator_33_true_3_lshift_rg_s[2:0]),
      .z(operator_33_true_3_lshift_itm)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd1),
  .width_s(32'sd4),
  .width_z(32'sd9)) operator_33_true_1_lshift_rg (
      .a(1'b1),
      .s(nl_operator_33_true_1_lshift_rg_s[3:0]),
      .z(z_out)
    );
  peaseNTT_core_wait_dp peaseNTT_core_wait_dp_inst (
      .yt_rsc_cgo_iro(and_48_rmff),
      .yt_rsci_clken_d(yt_rsci_clken_d),
      .ensig_cgo_iro(and_60_rmff),
      .ensig_cgo_iro_2(nl_peaseNTT_core_wait_dp_inst_ensig_cgo_iro_2[0:0]),
      .core_wen(core_wen),
      .yt_rsc_cgo(reg_yt_rsc_cgo_cse),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_sub_cmp_ccs_ccore_en(modulo_sub_cmp_ccs_ccore_en),
      .ensig_cgo_2(reg_ensig_cgo_2_cse),
      .mult_cmp_ccs_ccore_en(mult_cmp_ccs_ccore_en)
    );
  peaseNTT_core_xt_rsci peaseNTT_core_xt_rsci_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_s_tdone(xt_rsc_s_tdone),
      .xt_rsc_tr_write_done(xt_rsc_tr_write_done),
      .xt_rsc_RREADY(xt_rsc_RREADY),
      .xt_rsc_RVALID(xt_rsc_RVALID),
      .xt_rsc_RUSER(xt_rsc_RUSER),
      .xt_rsc_RLAST(xt_rsc_RLAST),
      .xt_rsc_RRESP(xt_rsc_RRESP),
      .xt_rsc_RDATA(xt_rsc_RDATA),
      .xt_rsc_RID(xt_rsc_RID),
      .xt_rsc_ARREADY(xt_rsc_ARREADY),
      .xt_rsc_ARVALID(xt_rsc_ARVALID),
      .xt_rsc_ARUSER(xt_rsc_ARUSER),
      .xt_rsc_ARREGION(xt_rsc_ARREGION),
      .xt_rsc_ARQOS(xt_rsc_ARQOS),
      .xt_rsc_ARPROT(xt_rsc_ARPROT),
      .xt_rsc_ARCACHE(xt_rsc_ARCACHE),
      .xt_rsc_ARLOCK(xt_rsc_ARLOCK),
      .xt_rsc_ARBURST(xt_rsc_ARBURST),
      .xt_rsc_ARSIZE(xt_rsc_ARSIZE),
      .xt_rsc_ARLEN(xt_rsc_ARLEN),
      .xt_rsc_ARADDR(xt_rsc_ARADDR),
      .xt_rsc_ARID(xt_rsc_ARID),
      .xt_rsc_BREADY(xt_rsc_BREADY),
      .xt_rsc_BVALID(xt_rsc_BVALID),
      .xt_rsc_BUSER(xt_rsc_BUSER),
      .xt_rsc_BRESP(xt_rsc_BRESP),
      .xt_rsc_BID(xt_rsc_BID),
      .xt_rsc_WREADY(xt_rsc_WREADY),
      .xt_rsc_WVALID(xt_rsc_WVALID),
      .xt_rsc_WUSER(xt_rsc_WUSER),
      .xt_rsc_WLAST(xt_rsc_WLAST),
      .xt_rsc_WSTRB(xt_rsc_WSTRB),
      .xt_rsc_WDATA(xt_rsc_WDATA),
      .xt_rsc_AWREADY(xt_rsc_AWREADY),
      .xt_rsc_AWVALID(xt_rsc_AWVALID),
      .xt_rsc_AWUSER(xt_rsc_AWUSER),
      .xt_rsc_AWREGION(xt_rsc_AWREGION),
      .xt_rsc_AWQOS(xt_rsc_AWQOS),
      .xt_rsc_AWPROT(xt_rsc_AWPROT),
      .xt_rsc_AWCACHE(xt_rsc_AWCACHE),
      .xt_rsc_AWLOCK(xt_rsc_AWLOCK),
      .xt_rsc_AWBURST(xt_rsc_AWBURST),
      .xt_rsc_AWSIZE(xt_rsc_AWSIZE),
      .xt_rsc_AWLEN(xt_rsc_AWLEN),
      .xt_rsc_AWADDR(xt_rsc_AWADDR),
      .xt_rsc_AWID(xt_rsc_AWID),
      .core_wen(core_wen),
      .xt_rsci_oswt(reg_xt_rsci_oswt_cse),
      .xt_rsci_wen_comp(xt_rsci_wen_comp),
      .xt_rsci_oswt_1(reg_xt_rsci_oswt_1_cse),
      .xt_rsci_wen_comp_1(xt_rsci_wen_comp_1),
      .xt_rsci_s_raddr_core(nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_raddr_core[9:0]),
      .xt_rsci_s_waddr_core(nl_peaseNTT_core_xt_rsci_inst_xt_rsci_s_waddr_core[9:0]),
      .xt_rsci_s_din_mxwt(xt_rsci_s_din_mxwt),
      .xt_rsci_s_dout_core(xt_rsci_s_dout_core)
    );
  peaseNTT_core_twiddle_rsci peaseNTT_core_twiddle_rsci_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_s_tdone(twiddle_rsc_s_tdone),
      .twiddle_rsc_tr_write_done(twiddle_rsc_tr_write_done),
      .twiddle_rsc_RREADY(twiddle_rsc_RREADY),
      .twiddle_rsc_RVALID(twiddle_rsc_RVALID),
      .twiddle_rsc_RUSER(twiddle_rsc_RUSER),
      .twiddle_rsc_RLAST(twiddle_rsc_RLAST),
      .twiddle_rsc_RRESP(twiddle_rsc_RRESP),
      .twiddle_rsc_RDATA(twiddle_rsc_RDATA),
      .twiddle_rsc_RID(twiddle_rsc_RID),
      .twiddle_rsc_ARREADY(twiddle_rsc_ARREADY),
      .twiddle_rsc_ARVALID(twiddle_rsc_ARVALID),
      .twiddle_rsc_ARUSER(twiddle_rsc_ARUSER),
      .twiddle_rsc_ARREGION(twiddle_rsc_ARREGION),
      .twiddle_rsc_ARQOS(twiddle_rsc_ARQOS),
      .twiddle_rsc_ARPROT(twiddle_rsc_ARPROT),
      .twiddle_rsc_ARCACHE(twiddle_rsc_ARCACHE),
      .twiddle_rsc_ARLOCK(twiddle_rsc_ARLOCK),
      .twiddle_rsc_ARBURST(twiddle_rsc_ARBURST),
      .twiddle_rsc_ARSIZE(twiddle_rsc_ARSIZE),
      .twiddle_rsc_ARLEN(twiddle_rsc_ARLEN),
      .twiddle_rsc_ARADDR(twiddle_rsc_ARADDR),
      .twiddle_rsc_ARID(twiddle_rsc_ARID),
      .twiddle_rsc_BREADY(twiddle_rsc_BREADY),
      .twiddle_rsc_BVALID(twiddle_rsc_BVALID),
      .twiddle_rsc_BUSER(twiddle_rsc_BUSER),
      .twiddle_rsc_BRESP(twiddle_rsc_BRESP),
      .twiddle_rsc_BID(twiddle_rsc_BID),
      .twiddle_rsc_WREADY(twiddle_rsc_WREADY),
      .twiddle_rsc_WVALID(twiddle_rsc_WVALID),
      .twiddle_rsc_WUSER(twiddle_rsc_WUSER),
      .twiddle_rsc_WLAST(twiddle_rsc_WLAST),
      .twiddle_rsc_WSTRB(twiddle_rsc_WSTRB),
      .twiddle_rsc_WDATA(twiddle_rsc_WDATA),
      .twiddle_rsc_AWREADY(twiddle_rsc_AWREADY),
      .twiddle_rsc_AWVALID(twiddle_rsc_AWVALID),
      .twiddle_rsc_AWUSER(twiddle_rsc_AWUSER),
      .twiddle_rsc_AWREGION(twiddle_rsc_AWREGION),
      .twiddle_rsc_AWQOS(twiddle_rsc_AWQOS),
      .twiddle_rsc_AWPROT(twiddle_rsc_AWPROT),
      .twiddle_rsc_AWCACHE(twiddle_rsc_AWCACHE),
      .twiddle_rsc_AWLOCK(twiddle_rsc_AWLOCK),
      .twiddle_rsc_AWBURST(twiddle_rsc_AWBURST),
      .twiddle_rsc_AWSIZE(twiddle_rsc_AWSIZE),
      .twiddle_rsc_AWLEN(twiddle_rsc_AWLEN),
      .twiddle_rsc_AWADDR(twiddle_rsc_AWADDR),
      .twiddle_rsc_AWID(twiddle_rsc_AWID),
      .core_wen(core_wen),
      .twiddle_rsci_oswt(reg_twiddle_rsci_oswt_cse),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_rsci_s_raddr_core(nl_peaseNTT_core_twiddle_rsci_inst_twiddle_rsci_s_raddr_core[9:0]),
      .twiddle_rsci_s_din_mxwt(twiddle_rsci_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsci peaseNTT_core_twiddle_h_rsci_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_s_tdone(twiddle_h_rsc_s_tdone),
      .twiddle_h_rsc_tr_write_done(twiddle_h_rsc_tr_write_done),
      .twiddle_h_rsc_RREADY(twiddle_h_rsc_RREADY),
      .twiddle_h_rsc_RVALID(twiddle_h_rsc_RVALID),
      .twiddle_h_rsc_RUSER(twiddle_h_rsc_RUSER),
      .twiddle_h_rsc_RLAST(twiddle_h_rsc_RLAST),
      .twiddle_h_rsc_RRESP(twiddle_h_rsc_RRESP),
      .twiddle_h_rsc_RDATA(twiddle_h_rsc_RDATA),
      .twiddle_h_rsc_RID(twiddle_h_rsc_RID),
      .twiddle_h_rsc_ARREADY(twiddle_h_rsc_ARREADY),
      .twiddle_h_rsc_ARVALID(twiddle_h_rsc_ARVALID),
      .twiddle_h_rsc_ARUSER(twiddle_h_rsc_ARUSER),
      .twiddle_h_rsc_ARREGION(twiddle_h_rsc_ARREGION),
      .twiddle_h_rsc_ARQOS(twiddle_h_rsc_ARQOS),
      .twiddle_h_rsc_ARPROT(twiddle_h_rsc_ARPROT),
      .twiddle_h_rsc_ARCACHE(twiddle_h_rsc_ARCACHE),
      .twiddle_h_rsc_ARLOCK(twiddle_h_rsc_ARLOCK),
      .twiddle_h_rsc_ARBURST(twiddle_h_rsc_ARBURST),
      .twiddle_h_rsc_ARSIZE(twiddle_h_rsc_ARSIZE),
      .twiddle_h_rsc_ARLEN(twiddle_h_rsc_ARLEN),
      .twiddle_h_rsc_ARADDR(twiddle_h_rsc_ARADDR),
      .twiddle_h_rsc_ARID(twiddle_h_rsc_ARID),
      .twiddle_h_rsc_BREADY(twiddle_h_rsc_BREADY),
      .twiddle_h_rsc_BVALID(twiddle_h_rsc_BVALID),
      .twiddle_h_rsc_BUSER(twiddle_h_rsc_BUSER),
      .twiddle_h_rsc_BRESP(twiddle_h_rsc_BRESP),
      .twiddle_h_rsc_BID(twiddle_h_rsc_BID),
      .twiddle_h_rsc_WREADY(twiddle_h_rsc_WREADY),
      .twiddle_h_rsc_WVALID(twiddle_h_rsc_WVALID),
      .twiddle_h_rsc_WUSER(twiddle_h_rsc_WUSER),
      .twiddle_h_rsc_WLAST(twiddle_h_rsc_WLAST),
      .twiddle_h_rsc_WSTRB(twiddle_h_rsc_WSTRB),
      .twiddle_h_rsc_WDATA(twiddle_h_rsc_WDATA),
      .twiddle_h_rsc_AWREADY(twiddle_h_rsc_AWREADY),
      .twiddle_h_rsc_AWVALID(twiddle_h_rsc_AWVALID),
      .twiddle_h_rsc_AWUSER(twiddle_h_rsc_AWUSER),
      .twiddle_h_rsc_AWREGION(twiddle_h_rsc_AWREGION),
      .twiddle_h_rsc_AWQOS(twiddle_h_rsc_AWQOS),
      .twiddle_h_rsc_AWPROT(twiddle_h_rsc_AWPROT),
      .twiddle_h_rsc_AWCACHE(twiddle_h_rsc_AWCACHE),
      .twiddle_h_rsc_AWLOCK(twiddle_h_rsc_AWLOCK),
      .twiddle_h_rsc_AWBURST(twiddle_h_rsc_AWBURST),
      .twiddle_h_rsc_AWSIZE(twiddle_h_rsc_AWSIZE),
      .twiddle_h_rsc_AWLEN(twiddle_h_rsc_AWLEN),
      .twiddle_h_rsc_AWADDR(twiddle_h_rsc_AWADDR),
      .twiddle_h_rsc_AWID(twiddle_h_rsc_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsci_oswt(reg_twiddle_rsci_oswt_cse),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp),
      .twiddle_h_rsci_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsci_inst_twiddle_h_rsci_s_raddr_core[9:0]),
      .twiddle_h_rsci_s_din_mxwt(twiddle_h_rsci_s_din_mxwt)
    );
  peaseNTT_core_xt_rsc_triosy_obj peaseNTT_core_xt_rsc_triosy_obj_inst (
      .xt_rsc_triosy_lz(xt_rsc_triosy_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_obj_iswt0_cse)
    );
  peaseNTT_core_p_rsc_triosy_obj peaseNTT_core_p_rsc_triosy_obj_inst (
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_obj_iswt0_cse)
    );
  peaseNTT_core_r_rsc_triosy_obj peaseNTT_core_r_rsc_triosy_obj_inst (
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_obj peaseNTT_core_twiddle_rsc_triosy_obj_inst
      (
      .twiddle_rsc_triosy_lz(twiddle_rsc_triosy_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_obj peaseNTT_core_twiddle_h_rsc_triosy_obj_inst
      (
      .twiddle_h_rsc_triosy_lz(twiddle_h_rsc_triosy_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_obj_iswt0_cse)
    );
  peaseNTT_core_staller peaseNTT_core_staller_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsci_wen_comp(xt_rsci_wen_comp),
      .xt_rsci_wen_comp_1(xt_rsci_wen_comp_1),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp)
    );
  peaseNTT_core_core_fsm peaseNTT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .fsm_output(fsm_output),
      .INNER_LOOP1_C_13_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP1_C_13_tr0[0:0]),
      .INNER_LOOP2_C_14_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr0[0:0]),
      .INNER_LOOP2_C_14_tr1(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_14_tr1[0:0]),
      .INNER_LOOP3_C_13_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_13_tr0[0:0]),
      .INNER_LOOP4_C_14_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr0[0:0]),
      .INNER_LOOP4_C_14_tr1(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_14_tr1[0:0])
    );
  assign or_48_cse = (fsm_output[1]) | (fsm_output[5]) | (fsm_output[0]) | (fsm_output[2])
      | (fsm_output[3]);
  assign nand_13_nl = ~((fsm_output[3:2]==2'b11));
  assign mux_22_nl = MUX_s_1_2_2(nand_13_nl, or_dcpl_12, fsm_output[4]);
  assign mux_21_nl = MUX_s_1_2_2(or_46_cse, (~ and_dcpl_25), fsm_output[1]);
  assign and_48_rmff = (~ mux_22_nl) & mux_21_nl;
  assign nand_4_nl = ~((~((fsm_output[5]) & (fsm_output[0]))) & (fsm_output[2]));
  assign mux_23_nl = MUX_s_1_2_2(nand_4_nl, or_tmp_10, fsm_output[1]);
  assign and_60_rmff = (~ mux_23_nl) & (fsm_output[3]);
  assign and_61_rmff = (~ mux_24_itm) & (fsm_output[3]);
  assign mux_26_nl = MUX_s_1_2_2(mux_tmp_23, and_dcpl_21, fsm_output[0]);
  assign and_88_nl = ((fsm_output[0]) | (fsm_output[2])) & (fsm_output[3]);
  assign mux_27_nl = MUX_s_1_2_2(mux_26_nl, and_88_nl, fsm_output[5]);
  assign mux_28_itm = MUX_s_1_2_2(mux_tmp_23, mux_27_nl, fsm_output[1]);
  assign INNER_LOOP1_tw_or_cse = (and_dcpl_34 & and_dcpl_8) | (and_dcpl_18 & and_dcpl_20);
  assign and_93_cse = (fsm_output[0]) & (fsm_output[2]) & (fsm_output[3]);
  assign and_72_rgt = and_dcpl_18 & and_dcpl_37;
  assign nor_22_nl = ~(and_dcpl_25 | (fsm_output[3:2]!=2'b00));
  assign mux_30_nl = MUX_s_1_2_2(nor_22_nl, nor_tmp_8, fsm_output[1]);
  assign or_4_nl = (fsm_output[5]) | and_93_cse;
  assign mux_2_nl = MUX_s_1_2_2((fsm_output[5]), or_4_nl, fsm_output[1]);
  assign mux_31_nl = MUX_s_1_2_2(mux_30_nl, mux_2_nl, fsm_output[4]);
  assign operator_20_false_and_1_ssc = core_wen & (~((~ (INNER_LOOP1_r_9_0_sva_1[9]))
      & and_dcpl_9)) & mux_31_nl;
  assign nor_28_nl = ~((fsm_output[5]) | (fsm_output[0]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_33_nl = MUX_s_1_2_2(nor_28_nl, nor_tmp_8, fsm_output[1]);
  assign and_nl = (fsm_output[5]) & (~ and_93_cse);
  assign mux_32_nl = MUX_s_1_2_2((fsm_output[5]), and_nl, fsm_output[1]);
  assign mux_34_nl = MUX_s_1_2_2(mux_33_nl, mux_32_nl, fsm_output[4]);
  assign operator_20_false_or_1_m1c = ((INNER_LOOP1_r_9_0_sva_1[9]) & and_dcpl_9)
      | mux_34_nl;
  assign or_46_cse = (fsm_output[5]) | (fsm_output[0]);
  assign nor_cse = ~((fsm_output[5]) | (fsm_output[1]));
  assign nor_30_cse = ~((fsm_output[3:1]!=3'b000));
  assign INNER_LOOP1_tw_and_psp_sva_1 = ({operator_33_true_return_8_0_sva_8 , operator_33_true_return_8_0_sva_7_0})
      & INNER_LOOP1_r_9_0_sva_8_0;
  assign INNER_LOOP2_tw_and_psp_7_0_sva_1 = operator_33_true_return_8_0_sva_7_0 &
      (INNER_LOOP1_r_9_0_sva_8_0[7:0]);
  assign butterFly2_tw_and_psp_2_0_sva_1 = ({reg_operator_20_false_acc_ftd , reg_operator_20_false_acc_ftd_1})
      & (INNER_LOOP1_r_9_0_sva_8_0[2:0]);
  assign and_dcpl_2 = ~((fsm_output[3:2]!=2'b00));
  assign and_dcpl_6 = (INNER_LOOP1_r_9_0_sva_1[9]) & c_1_sva;
  assign nor_tmp_4 = (fsm_output[1]) & (fsm_output[5]) & (fsm_output[0]) & (fsm_output[2])
      & (fsm_output[3]);
  assign and_dcpl_7 = (~ (fsm_output[5])) & (fsm_output[1]);
  assign and_dcpl_8 = and_dcpl_7 & (fsm_output[4]);
  assign and_dcpl_9 = and_93_cse & and_dcpl_8;
  assign and_dcpl_10 = (fsm_output[5]) & (fsm_output[1]);
  assign and_dcpl_16 = nor_cse & (~ (fsm_output[4]));
  assign and_dcpl_18 = and_dcpl_2 & (~ (fsm_output[0]));
  assign and_dcpl_20 = and_dcpl_10 & (fsm_output[4]);
  assign and_dcpl_21 = (fsm_output[3:2]==2'b11);
  assign and_dcpl_25 = (fsm_output[0]) & (fsm_output[5]);
  assign xor_dcpl = and_dcpl_25 ^ (fsm_output[1]);
  assign and_dcpl_27 = and_dcpl_21 & (fsm_output[4]);
  assign xor_dcpl_1 = or_46_cse ^ (fsm_output[1]);
  assign or_dcpl_12 = (fsm_output[3:2]!=2'b00);
  assign mux_tmp_16 = MUX_s_1_2_2((~ and_dcpl_25), or_46_cse, fsm_output[1]);
  assign or_28_nl = (fsm_output[1]) | xor_dcpl_2;
  assign mux_tmp_17 = MUX_s_1_2_2(mux_tmp_16, or_28_nl, fsm_output[4]);
  assign and_dcpl_32 = and_dcpl_18 & and_dcpl_7 & (~ (fsm_output[4]));
  assign and_dcpl_34 = and_dcpl_2 & (fsm_output[0]);
  assign and_dcpl_35 = and_dcpl_34 & nor_cse & (fsm_output[4]);
  assign and_dcpl_36 = (fsm_output[5]) & (~ (fsm_output[1]));
  assign and_dcpl_37 = and_dcpl_36 & (~ (fsm_output[4]));
  assign and_dcpl_38 = and_dcpl_34 & and_dcpl_37;
  assign and_dcpl_40 = and_dcpl_18 & and_dcpl_36 & (fsm_output[4]);
  assign and_dcpl_48 = and_dcpl_21 & (~ (fsm_output[4]));
  assign and_dcpl_49 = (~ mux_tmp_16) & and_dcpl_48;
  assign and_dcpl_50 = and_dcpl_2 & (fsm_output[4]);
  assign or_tmp_10 = (~ (fsm_output[5])) | (~ (fsm_output[0])) | (fsm_output[2]);
  assign or_32_nl = (fsm_output[5]) | (fsm_output[0]) | (~ (fsm_output[2]));
  assign mux_24_itm = MUX_s_1_2_2(or_32_nl, or_tmp_10, fsm_output[1]);
  assign mux_tmp_23 = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[2]);
  assign and_dcpl_61 = (fsm_output[2:1]==2'b01);
  assign xor_dcpl_4 = (fsm_output[0]) ^ (fsm_output[5]);
  assign and_dcpl_63 = xor_dcpl_4 & (~ (fsm_output[3]));
  assign nor_tmp_8 = (fsm_output[5]) & (fsm_output[0]) & (fsm_output[2]) & (fsm_output[3]);
  assign and_dcpl_73 = xor_dcpl_4 & (fsm_output[3]);
  assign c_1_sva_mx0c0 = and_dcpl_18 & and_dcpl_16;
  assign c_1_sva_mx0c2 = and_dcpl_21 & (~ (fsm_output[0])) & and_dcpl_20;
  assign nor_12_nl = ~((~ (fsm_output[0])) | (fsm_output[2]) | (fsm_output[3]));
  assign nor_13_nl = ~((fsm_output[0]) | (fsm_output[2]) | (fsm_output[3]));
  assign mux_35_nl = MUX_s_1_2_2(nor_12_nl, nor_13_nl, fsm_output[5]);
  assign mux_36_nl = MUX_s_1_2_2(mux_35_nl, nor_tmp_8, fsm_output[1]);
  assign INNER_LOOP1_r_9_0_sva_8_0_mx0c0 = MUX_s_1_2_2(mux_36_nl, (~ or_48_cse),
      fsm_output[4]);
  assign butterFly1_1_f1_sva_mx0c0 = ~(mux_24_itm | (fsm_output[4:3]!=2'b00));
  assign butterFly1_1_f1_sva_mx0c1 = and_dcpl_73 & (fsm_output[2:1]==2'b10);
  assign butterFly1_1_f1_sva_mx0c2 = xor_dcpl & and_dcpl_50;
  assign xor_dcpl_2 = ~((fsm_output[0]) ^ (fsm_output[5]));
  assign yt_rsci_d_d = MUX_v_32_2_2(modulo_sub_cmp_return_rsc_z, butterFly1_1_f1_sva,
      and_dcpl_49);
  assign butterFly1_butterFly1_nand_nl = ~((~ mux_tmp_16) & and_dcpl_50);
  assign yt_rsci_radr_d = {INNER_LOOP1_r_9_0_sva_8_0 , butterFly1_butterFly1_nand_nl};
  assign yt_rsci_wadr_d = {(~ and_dcpl_49) , INNER_LOOP1_r_9_0_sva_8_0};
  assign yt_rsci_we_d_pff = xor_dcpl_1 & and_dcpl_48;
  assign yt_rsci_readA_r_ram_ir_internal_RMASK_B_d = xor_dcpl_1 & and_dcpl_50;
  assign and_dcpl_90 = (fsm_output==6'b010000);
  assign nor_23_nl = ~((fsm_output[5]) | (fsm_output[0]));
  assign mux_48_nl = MUX_s_1_2_2(and_dcpl_25, nor_23_nl, fsm_output[1]);
  assign mux_nl = MUX_s_1_2_2((~ (fsm_output[0])), (fsm_output[0]), fsm_output[5]);
  assign nor_24_nl = ~((fsm_output[1]) | mux_nl);
  assign mux_49_nl = MUX_s_1_2_2(mux_48_nl, nor_24_nl, fsm_output[4]);
  assign and_dcpl_96 = mux_49_nl & and_dcpl_2;
  always @(posedge clk) begin
    if ( core_wen & mux_12_nl ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      c_1_sva <= 1'b0;
    end
    else if ( core_wen & (c_1_sva_mx0c0 | and_dcpl_9 | c_1_sva_mx0c2) ) begin
      c_1_sva <= STAGE_LOOP_mux_12_nl | c_1_sva_mx0c0;
    end
  end
  always @(posedge clk) begin
    if ( core_wen ) begin
      xt_rsci_s_raddr_core_0 <= ~(mux_tmp_16 | or_dcpl_12 | (fsm_output[4]));
      reg_xt_rsci_s_raddr_core_9_1_cse <= INNER_LOOP1_r_9_0_sva_8_0;
      xt_rsci_s_waddr_core_9 <= ~(xor_dcpl_2 | (fsm_output[4:1]!=4'b1110));
      xt_rsci_s_dout_core <= MUX_v_32_2_2(modulo_sub_cmp_return_rsc_z, butterFly1_1_f1_sva,
          and_30_nl);
      reg_twiddle_rsci_s_raddr_core_2_cse <= MUX1HOT_s_1_4_2((INNER_LOOP1_tw_and_psp_sva_1[2]),
          (INNER_LOOP2_tw_and_psp_7_0_sva_1[2]), (butterFly2_tw_and_psp_2_0_sva_1[2]),
          (INNER_LOOP1_r_9_0_sva_8_0[2]), {and_dcpl_32 , and_dcpl_35 , and_dcpl_38
          , and_dcpl_40});
      reg_twiddle_rsci_s_raddr_core_7_3_cse <= MUX1HOT_v_5_3_2((INNER_LOOP1_tw_and_psp_sva_1[7:3]),
          (INNER_LOOP2_tw_and_psp_7_0_sva_1[7:3]), (INNER_LOOP1_r_9_0_sva_8_0[7:3]),
          {and_dcpl_32 , and_dcpl_35 , nor_21_nl});
      reg_twiddle_rsci_s_raddr_core_1_0_cse <= MUX1HOT_v_2_4_2((INNER_LOOP1_tw_and_psp_sva_1[1:0]),
          (INNER_LOOP2_tw_and_psp_7_0_sva_1[1:0]), (butterFly2_tw_and_psp_2_0_sva_1[1:0]),
          butterFly2_1_tw_and_nl, {and_dcpl_32 , and_dcpl_35 , and_dcpl_38 , and_dcpl_40});
      reg_twiddle_rsci_s_raddr_core_8_cse <= MUX_s_1_2_2((INNER_LOOP1_tw_and_psp_sva_1[8]),
          (INNER_LOOP1_r_9_0_sva_8_0[8]), and_47_nl);
      butterFly1_1_f2_mult_tw_h_sva <= twiddle_h_rsci_s_din_mxwt;
      butterFly1_1_f2_mult_tw_sva <= twiddle_rsci_s_din_mxwt;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_xt_rsci_oswt_cse <= 1'b0;
      reg_xt_rsci_oswt_1_cse <= 1'b0;
      reg_twiddle_rsci_oswt_cse <= 1'b0;
      reg_yt_rsc_cgo_cse <= 1'b0;
      reg_xt_rsc_triosy_obj_iswt0_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      reg_ensig_cgo_2_cse <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_xt_rsci_oswt_cse <= xor_dcpl & and_dcpl_2 & (~ (fsm_output[4]));
      reg_xt_rsci_oswt_1_cse <= xor_dcpl_1 & and_dcpl_27;
      reg_twiddle_rsci_oswt_cse <= (~ mux_tmp_17) & and_dcpl_2;
      reg_yt_rsc_cgo_cse <= and_48_rmff;
      reg_xt_rsc_triosy_obj_iswt0_cse <= and_dcpl_21 & (~ (fsm_output[0])) & (fsm_output[5])
          & (fsm_output[1]) & (fsm_output[4]) & and_dcpl_6;
      reg_ensig_cgo_cse <= and_60_rmff;
      reg_ensig_cgo_2_cse <= ~ mux_28_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_20_false_acc_ftd <= 1'b0;
    end
    else if ( operator_20_false_and_1_ssc ) begin
      reg_operator_20_false_acc_ftd <= MUX_s_1_2_2((z_out_1[2]), (operator_33_true_2_lshift_itm[2]),
          and_72_rgt);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_20_false_acc_ftd_1 <= 2'b00;
    end
    else if ( operator_20_false_and_1_ssc & (~((fsm_output[5:4]==2'b11) & operator_20_false_or_1_m1c))
        ) begin
      reg_operator_20_false_acc_ftd_1 <= MUX1HOT_v_2_5_2((z_out_1[1:0]), 2'b10, ({reg_operator_20_false_acc_ftd
          , (reg_operator_20_false_acc_ftd_1[1])}), operator_33_true_3_lshift_itm,
          (operator_33_true_2_lshift_itm[1:0]), {and_71_nl , operator_20_false_and_2_nl
          , operator_20_false_and_3_nl , and_13_nl , and_72_rgt});
    end
  end
  always @(posedge clk) begin
    if ( core_wen & (INNER_LOOP1_r_9_0_sva_8_0_mx0c0 | (and_dcpl_73 & (fsm_output[2:1]==2'b11)))
        ) begin
      INNER_LOOP1_r_9_0_sva_8_0 <= MUX_v_9_2_2(9'b000000000, (INNER_LOOP1_r_9_0_sva_1[8:0]),
          INNER_LOOP1_r_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( (nor_30_cse | (fsm_output[5:4]!=2'b00)) & core_wen ) begin
      operator_33_true_return_8_0_sva_8 <= z_out[8];
    end
  end
  always @(posedge clk) begin
    if ( ((nor_30_cse & (~((fsm_output[0]) & (fsm_output[4])))) | (fsm_output[5]))
        & core_wen ) begin
      operator_33_true_return_8_0_sva_7_0 <= z_out[7:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_9_0_sva_1 <= 10'b0000000000;
    end
    else if ( core_wen & (~(mux_tmp_17 | or_dcpl_12)) ) begin
      INNER_LOOP1_r_9_0_sva_1 <= z_out_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & (butterFly1_1_f1_sva_mx0c0 | butterFly1_1_f1_sva_mx0c1 | butterFly1_1_f1_sva_mx0c2)
        ) begin
      butterFly1_1_f1_sva <= MUX1HOT_v_32_3_2(xt_rsci_s_din_mxwt, modulo_add_cmp_return_rsc_z,
          yt_rsci_q_d, {butterFly1_1_f1_sva_mx0c0 , butterFly1_1_f1_sva_mx0c1 , butterFly1_1_f1_sva_mx0c2});
    end
  end
  assign mux_12_nl = MUX_s_1_2_2((~ or_48_cse), nor_tmp_4, fsm_output[4]);
  assign c_c_or_nl = c_1_sva | (INNER_LOOP1_r_9_0_sva_1[9]);
  assign STAGE_LOOP_mux_12_nl = MUX_s_1_2_2((reg_operator_20_false_acc_ftd_1[0]),
      c_c_or_nl, c_1_sva_mx0c2);
  assign and_30_nl = (~ mux_tmp_16) & and_dcpl_27;
  assign nor_21_nl = ~((fsm_output[3]) | (~ (fsm_output[5])) | (fsm_output[1]) |
      (~((fsm_output[0]) ^ (fsm_output[4]))) | (fsm_output[2]));
  assign butterFly2_1_tw_and_nl = reg_operator_20_false_acc_ftd_1 & (INNER_LOOP1_r_9_0_sva_8_0[1:0]);
  assign mux_20_nl = MUX_s_1_2_2(and_dcpl_25, (~ xor_dcpl_2), fsm_output[4]);
  assign and_47_nl = mux_20_nl & and_dcpl_2 & (~ (fsm_output[1]));
  assign and_71_nl = and_dcpl_34 & and_dcpl_16;
  assign mux_13_nl = MUX_s_1_2_2((~ and_93_cse), and_93_cse, fsm_output[5]);
  assign mux_14_nl = MUX_s_1_2_2((~ (fsm_output[5])), mux_13_nl, fsm_output[1]);
  assign mux_15_nl = MUX_s_1_2_2((~ nor_tmp_4), mux_14_nl, fsm_output[4]);
  assign operator_20_false_and_2_nl = mux_15_nl & operator_20_false_or_1_m1c;
  assign operator_20_false_and_3_nl = and_dcpl_9 & operator_20_false_or_1_m1c;
  assign and_13_nl = and_dcpl_10 & (~ (fsm_output[4])) & operator_20_false_or_1_m1c;
  assign INNER_LOOP1_r_not_1_nl = ~ INNER_LOOP1_r_9_0_sva_8_0_mx0c0;
  assign operator_20_false_mux_3_nl = MUX_v_9_2_2(({6'b000000 , reg_operator_20_false_acc_ftd_1
      , c_1_sva}), INNER_LOOP1_r_9_0_sva_8_0, and_dcpl_96);
  assign nl_z_out_1 = conv_u2u_9_10(operator_20_false_mux_3_nl) + conv_s2u_2_10({(~
      and_dcpl_96) , 1'b1});
  assign z_out_1 = nl_z_out_1[9:0];

  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_5_2;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [4:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    result = result | ( input_4 & {2{sel[4]}});
    MUX1HOT_v_2_5_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_3_2;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [2:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | ( input_1 & {5{sel[1]}});
    result = result | ( input_2 & {5{sel[2]}});
    MUX1HOT_v_5_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [9:0] conv_s2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_10 = {{8{vector[1]}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT
// ------------------------------------------------------------------


module peaseNTT (
  clk, rst, xt_rsc_s_tdone, xt_rsc_tr_write_done, xt_rsc_RREADY, xt_rsc_RVALID, xt_rsc_RUSER,
      xt_rsc_RLAST, xt_rsc_RRESP, xt_rsc_RDATA, xt_rsc_RID, xt_rsc_ARREADY, xt_rsc_ARVALID,
      xt_rsc_ARUSER, xt_rsc_ARREGION, xt_rsc_ARQOS, xt_rsc_ARPROT, xt_rsc_ARCACHE,
      xt_rsc_ARLOCK, xt_rsc_ARBURST, xt_rsc_ARSIZE, xt_rsc_ARLEN, xt_rsc_ARADDR,
      xt_rsc_ARID, xt_rsc_BREADY, xt_rsc_BVALID, xt_rsc_BUSER, xt_rsc_BRESP, xt_rsc_BID,
      xt_rsc_WREADY, xt_rsc_WVALID, xt_rsc_WUSER, xt_rsc_WLAST, xt_rsc_WSTRB, xt_rsc_WDATA,
      xt_rsc_AWREADY, xt_rsc_AWVALID, xt_rsc_AWUSER, xt_rsc_AWREGION, xt_rsc_AWQOS,
      xt_rsc_AWPROT, xt_rsc_AWCACHE, xt_rsc_AWLOCK, xt_rsc_AWBURST, xt_rsc_AWSIZE,
      xt_rsc_AWLEN, xt_rsc_AWADDR, xt_rsc_AWID, xt_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_dat, r_rsc_triosy_lz, twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done,
      twiddle_rsc_RREADY, twiddle_rsc_RVALID, twiddle_rsc_RUSER, twiddle_rsc_RLAST,
      twiddle_rsc_RRESP, twiddle_rsc_RDATA, twiddle_rsc_RID, twiddle_rsc_ARREADY,
      twiddle_rsc_ARVALID, twiddle_rsc_ARUSER, twiddle_rsc_ARREGION, twiddle_rsc_ARQOS,
      twiddle_rsc_ARPROT, twiddle_rsc_ARCACHE, twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST,
      twiddle_rsc_ARSIZE, twiddle_rsc_ARLEN, twiddle_rsc_ARADDR, twiddle_rsc_ARID,
      twiddle_rsc_BREADY, twiddle_rsc_BVALID, twiddle_rsc_BUSER, twiddle_rsc_BRESP,
      twiddle_rsc_BID, twiddle_rsc_WREADY, twiddle_rsc_WVALID, twiddle_rsc_WUSER,
      twiddle_rsc_WLAST, twiddle_rsc_WSTRB, twiddle_rsc_WDATA, twiddle_rsc_AWREADY,
      twiddle_rsc_AWVALID, twiddle_rsc_AWUSER, twiddle_rsc_AWREGION, twiddle_rsc_AWQOS,
      twiddle_rsc_AWPROT, twiddle_rsc_AWCACHE, twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST,
      twiddle_rsc_AWSIZE, twiddle_rsc_AWLEN, twiddle_rsc_AWADDR, twiddle_rsc_AWID,
      twiddle_rsc_triosy_lz, twiddle_h_rsc_s_tdone, twiddle_h_rsc_tr_write_done,
      twiddle_h_rsc_RREADY, twiddle_h_rsc_RVALID, twiddle_h_rsc_RUSER, twiddle_h_rsc_RLAST,
      twiddle_h_rsc_RRESP, twiddle_h_rsc_RDATA, twiddle_h_rsc_RID, twiddle_h_rsc_ARREADY,
      twiddle_h_rsc_ARVALID, twiddle_h_rsc_ARUSER, twiddle_h_rsc_ARREGION, twiddle_h_rsc_ARQOS,
      twiddle_h_rsc_ARPROT, twiddle_h_rsc_ARCACHE, twiddle_h_rsc_ARLOCK, twiddle_h_rsc_ARBURST,
      twiddle_h_rsc_ARSIZE, twiddle_h_rsc_ARLEN, twiddle_h_rsc_ARADDR, twiddle_h_rsc_ARID,
      twiddle_h_rsc_BREADY, twiddle_h_rsc_BVALID, twiddle_h_rsc_BUSER, twiddle_h_rsc_BRESP,
      twiddle_h_rsc_BID, twiddle_h_rsc_WREADY, twiddle_h_rsc_WVALID, twiddle_h_rsc_WUSER,
      twiddle_h_rsc_WLAST, twiddle_h_rsc_WSTRB, twiddle_h_rsc_WDATA, twiddle_h_rsc_AWREADY,
      twiddle_h_rsc_AWVALID, twiddle_h_rsc_AWUSER, twiddle_h_rsc_AWREGION, twiddle_h_rsc_AWQOS,
      twiddle_h_rsc_AWPROT, twiddle_h_rsc_AWCACHE, twiddle_h_rsc_AWLOCK, twiddle_h_rsc_AWBURST,
      twiddle_h_rsc_AWSIZE, twiddle_h_rsc_AWLEN, twiddle_h_rsc_AWADDR, twiddle_h_rsc_AWID,
      twiddle_h_rsc_triosy_lz
);
  input clk;
  input rst;
  input xt_rsc_s_tdone;
  input xt_rsc_tr_write_done;
  input xt_rsc_RREADY;
  output xt_rsc_RVALID;
  output xt_rsc_RUSER;
  output xt_rsc_RLAST;
  output [1:0] xt_rsc_RRESP;
  output [31:0] xt_rsc_RDATA;
  output xt_rsc_RID;
  output xt_rsc_ARREADY;
  input xt_rsc_ARVALID;
  input xt_rsc_ARUSER;
  input [3:0] xt_rsc_ARREGION;
  input [3:0] xt_rsc_ARQOS;
  input [2:0] xt_rsc_ARPROT;
  input [3:0] xt_rsc_ARCACHE;
  input xt_rsc_ARLOCK;
  input [1:0] xt_rsc_ARBURST;
  input [2:0] xt_rsc_ARSIZE;
  input [7:0] xt_rsc_ARLEN;
  input [11:0] xt_rsc_ARADDR;
  input xt_rsc_ARID;
  input xt_rsc_BREADY;
  output xt_rsc_BVALID;
  output xt_rsc_BUSER;
  output [1:0] xt_rsc_BRESP;
  output xt_rsc_BID;
  output xt_rsc_WREADY;
  input xt_rsc_WVALID;
  input xt_rsc_WUSER;
  input xt_rsc_WLAST;
  input [3:0] xt_rsc_WSTRB;
  input [31:0] xt_rsc_WDATA;
  output xt_rsc_AWREADY;
  input xt_rsc_AWVALID;
  input xt_rsc_AWUSER;
  input [3:0] xt_rsc_AWREGION;
  input [3:0] xt_rsc_AWQOS;
  input [2:0] xt_rsc_AWPROT;
  input [3:0] xt_rsc_AWCACHE;
  input xt_rsc_AWLOCK;
  input [1:0] xt_rsc_AWBURST;
  input [2:0] xt_rsc_AWSIZE;
  input [7:0] xt_rsc_AWLEN;
  input [11:0] xt_rsc_AWADDR;
  input xt_rsc_AWID;
  output xt_rsc_triosy_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [31:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  output twiddle_rsc_triosy_lz;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  output twiddle_h_rsc_triosy_lz;


  // Interconnect Declarations
  wire yt_rsci_clken_d;
  wire [31:0] yt_rsci_d_d;
  wire [31:0] yt_rsci_q_d;
  wire [9:0] yt_rsci_radr_d;
  wire [9:0] yt_rsci_wadr_d;
  wire yt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_clken;
  wire [31:0] yt_rsc_q;
  wire [9:0] yt_rsc_radr;
  wire yt_rsc_we;
  wire [31:0] yt_rsc_d;
  wire [9:0] yt_rsc_wadr;
  wire yt_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd10),
  .data_width(32'sd32),
  .depth(32'sd1024),
  .latency(32'sd1)) yt_rsc_comp (
      .clk(clk),
      .clken(yt_rsc_clken),
      .d(yt_rsc_d),
      .q(yt_rsc_q),
      .radr(yt_rsc_radr),
      .wadr(yt_rsc_wadr),
      .we(yt_rsc_we)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_10_32_1024_1024_32_1_gen yt_rsci
      (
      .clken(yt_rsc_clken),
      .q(yt_rsc_q),
      .radr(yt_rsc_radr),
      .we(yt_rsc_we),
      .d(yt_rsc_d),
      .wadr(yt_rsc_wadr),
      .clken_d(yt_rsci_clken_d),
      .d_d(yt_rsci_d_d),
      .q_d(yt_rsci_q_d),
      .radr_d(yt_rsci_radr_d),
      .wadr_d(yt_rsci_wadr_d),
      .we_d(yt_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  peaseNTT_core peaseNTT_core_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_s_tdone(xt_rsc_s_tdone),
      .xt_rsc_tr_write_done(xt_rsc_tr_write_done),
      .xt_rsc_RREADY(xt_rsc_RREADY),
      .xt_rsc_RVALID(xt_rsc_RVALID),
      .xt_rsc_RUSER(xt_rsc_RUSER),
      .xt_rsc_RLAST(xt_rsc_RLAST),
      .xt_rsc_RRESP(xt_rsc_RRESP),
      .xt_rsc_RDATA(xt_rsc_RDATA),
      .xt_rsc_RID(xt_rsc_RID),
      .xt_rsc_ARREADY(xt_rsc_ARREADY),
      .xt_rsc_ARVALID(xt_rsc_ARVALID),
      .xt_rsc_ARUSER(xt_rsc_ARUSER),
      .xt_rsc_ARREGION(xt_rsc_ARREGION),
      .xt_rsc_ARQOS(xt_rsc_ARQOS),
      .xt_rsc_ARPROT(xt_rsc_ARPROT),
      .xt_rsc_ARCACHE(xt_rsc_ARCACHE),
      .xt_rsc_ARLOCK(xt_rsc_ARLOCK),
      .xt_rsc_ARBURST(xt_rsc_ARBURST),
      .xt_rsc_ARSIZE(xt_rsc_ARSIZE),
      .xt_rsc_ARLEN(xt_rsc_ARLEN),
      .xt_rsc_ARADDR(xt_rsc_ARADDR),
      .xt_rsc_ARID(xt_rsc_ARID),
      .xt_rsc_BREADY(xt_rsc_BREADY),
      .xt_rsc_BVALID(xt_rsc_BVALID),
      .xt_rsc_BUSER(xt_rsc_BUSER),
      .xt_rsc_BRESP(xt_rsc_BRESP),
      .xt_rsc_BID(xt_rsc_BID),
      .xt_rsc_WREADY(xt_rsc_WREADY),
      .xt_rsc_WVALID(xt_rsc_WVALID),
      .xt_rsc_WUSER(xt_rsc_WUSER),
      .xt_rsc_WLAST(xt_rsc_WLAST),
      .xt_rsc_WSTRB(xt_rsc_WSTRB),
      .xt_rsc_WDATA(xt_rsc_WDATA),
      .xt_rsc_AWREADY(xt_rsc_AWREADY),
      .xt_rsc_AWVALID(xt_rsc_AWVALID),
      .xt_rsc_AWUSER(xt_rsc_AWUSER),
      .xt_rsc_AWREGION(xt_rsc_AWREGION),
      .xt_rsc_AWQOS(xt_rsc_AWQOS),
      .xt_rsc_AWPROT(xt_rsc_AWPROT),
      .xt_rsc_AWCACHE(xt_rsc_AWCACHE),
      .xt_rsc_AWLOCK(xt_rsc_AWLOCK),
      .xt_rsc_AWBURST(xt_rsc_AWBURST),
      .xt_rsc_AWSIZE(xt_rsc_AWSIZE),
      .xt_rsc_AWLEN(xt_rsc_AWLEN),
      .xt_rsc_AWADDR(xt_rsc_AWADDR),
      .xt_rsc_AWID(xt_rsc_AWID),
      .xt_rsc_triosy_lz(xt_rsc_triosy_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_s_tdone(twiddle_rsc_s_tdone),
      .twiddle_rsc_tr_write_done(twiddle_rsc_tr_write_done),
      .twiddle_rsc_RREADY(twiddle_rsc_RREADY),
      .twiddle_rsc_RVALID(twiddle_rsc_RVALID),
      .twiddle_rsc_RUSER(twiddle_rsc_RUSER),
      .twiddle_rsc_RLAST(twiddle_rsc_RLAST),
      .twiddle_rsc_RRESP(twiddle_rsc_RRESP),
      .twiddle_rsc_RDATA(twiddle_rsc_RDATA),
      .twiddle_rsc_RID(twiddle_rsc_RID),
      .twiddle_rsc_ARREADY(twiddle_rsc_ARREADY),
      .twiddle_rsc_ARVALID(twiddle_rsc_ARVALID),
      .twiddle_rsc_ARUSER(twiddle_rsc_ARUSER),
      .twiddle_rsc_ARREGION(twiddle_rsc_ARREGION),
      .twiddle_rsc_ARQOS(twiddle_rsc_ARQOS),
      .twiddle_rsc_ARPROT(twiddle_rsc_ARPROT),
      .twiddle_rsc_ARCACHE(twiddle_rsc_ARCACHE),
      .twiddle_rsc_ARLOCK(twiddle_rsc_ARLOCK),
      .twiddle_rsc_ARBURST(twiddle_rsc_ARBURST),
      .twiddle_rsc_ARSIZE(twiddle_rsc_ARSIZE),
      .twiddle_rsc_ARLEN(twiddle_rsc_ARLEN),
      .twiddle_rsc_ARADDR(twiddle_rsc_ARADDR),
      .twiddle_rsc_ARID(twiddle_rsc_ARID),
      .twiddle_rsc_BREADY(twiddle_rsc_BREADY),
      .twiddle_rsc_BVALID(twiddle_rsc_BVALID),
      .twiddle_rsc_BUSER(twiddle_rsc_BUSER),
      .twiddle_rsc_BRESP(twiddle_rsc_BRESP),
      .twiddle_rsc_BID(twiddle_rsc_BID),
      .twiddle_rsc_WREADY(twiddle_rsc_WREADY),
      .twiddle_rsc_WVALID(twiddle_rsc_WVALID),
      .twiddle_rsc_WUSER(twiddle_rsc_WUSER),
      .twiddle_rsc_WLAST(twiddle_rsc_WLAST),
      .twiddle_rsc_WSTRB(twiddle_rsc_WSTRB),
      .twiddle_rsc_WDATA(twiddle_rsc_WDATA),
      .twiddle_rsc_AWREADY(twiddle_rsc_AWREADY),
      .twiddle_rsc_AWVALID(twiddle_rsc_AWVALID),
      .twiddle_rsc_AWUSER(twiddle_rsc_AWUSER),
      .twiddle_rsc_AWREGION(twiddle_rsc_AWREGION),
      .twiddle_rsc_AWQOS(twiddle_rsc_AWQOS),
      .twiddle_rsc_AWPROT(twiddle_rsc_AWPROT),
      .twiddle_rsc_AWCACHE(twiddle_rsc_AWCACHE),
      .twiddle_rsc_AWLOCK(twiddle_rsc_AWLOCK),
      .twiddle_rsc_AWBURST(twiddle_rsc_AWBURST),
      .twiddle_rsc_AWSIZE(twiddle_rsc_AWSIZE),
      .twiddle_rsc_AWLEN(twiddle_rsc_AWLEN),
      .twiddle_rsc_AWADDR(twiddle_rsc_AWADDR),
      .twiddle_rsc_AWID(twiddle_rsc_AWID),
      .twiddle_rsc_triosy_lz(twiddle_rsc_triosy_lz),
      .twiddle_h_rsc_s_tdone(twiddle_h_rsc_s_tdone),
      .twiddle_h_rsc_tr_write_done(twiddle_h_rsc_tr_write_done),
      .twiddle_h_rsc_RREADY(twiddle_h_rsc_RREADY),
      .twiddle_h_rsc_RVALID(twiddle_h_rsc_RVALID),
      .twiddle_h_rsc_RUSER(twiddle_h_rsc_RUSER),
      .twiddle_h_rsc_RLAST(twiddle_h_rsc_RLAST),
      .twiddle_h_rsc_RRESP(twiddle_h_rsc_RRESP),
      .twiddle_h_rsc_RDATA(twiddle_h_rsc_RDATA),
      .twiddle_h_rsc_RID(twiddle_h_rsc_RID),
      .twiddle_h_rsc_ARREADY(twiddle_h_rsc_ARREADY),
      .twiddle_h_rsc_ARVALID(twiddle_h_rsc_ARVALID),
      .twiddle_h_rsc_ARUSER(twiddle_h_rsc_ARUSER),
      .twiddle_h_rsc_ARREGION(twiddle_h_rsc_ARREGION),
      .twiddle_h_rsc_ARQOS(twiddle_h_rsc_ARQOS),
      .twiddle_h_rsc_ARPROT(twiddle_h_rsc_ARPROT),
      .twiddle_h_rsc_ARCACHE(twiddle_h_rsc_ARCACHE),
      .twiddle_h_rsc_ARLOCK(twiddle_h_rsc_ARLOCK),
      .twiddle_h_rsc_ARBURST(twiddle_h_rsc_ARBURST),
      .twiddle_h_rsc_ARSIZE(twiddle_h_rsc_ARSIZE),
      .twiddle_h_rsc_ARLEN(twiddle_h_rsc_ARLEN),
      .twiddle_h_rsc_ARADDR(twiddle_h_rsc_ARADDR),
      .twiddle_h_rsc_ARID(twiddle_h_rsc_ARID),
      .twiddle_h_rsc_BREADY(twiddle_h_rsc_BREADY),
      .twiddle_h_rsc_BVALID(twiddle_h_rsc_BVALID),
      .twiddle_h_rsc_BUSER(twiddle_h_rsc_BUSER),
      .twiddle_h_rsc_BRESP(twiddle_h_rsc_BRESP),
      .twiddle_h_rsc_BID(twiddle_h_rsc_BID),
      .twiddle_h_rsc_WREADY(twiddle_h_rsc_WREADY),
      .twiddle_h_rsc_WVALID(twiddle_h_rsc_WVALID),
      .twiddle_h_rsc_WUSER(twiddle_h_rsc_WUSER),
      .twiddle_h_rsc_WLAST(twiddle_h_rsc_WLAST),
      .twiddle_h_rsc_WSTRB(twiddle_h_rsc_WSTRB),
      .twiddle_h_rsc_WDATA(twiddle_h_rsc_WDATA),
      .twiddle_h_rsc_AWREADY(twiddle_h_rsc_AWREADY),
      .twiddle_h_rsc_AWVALID(twiddle_h_rsc_AWVALID),
      .twiddle_h_rsc_AWUSER(twiddle_h_rsc_AWUSER),
      .twiddle_h_rsc_AWREGION(twiddle_h_rsc_AWREGION),
      .twiddle_h_rsc_AWQOS(twiddle_h_rsc_AWQOS),
      .twiddle_h_rsc_AWPROT(twiddle_h_rsc_AWPROT),
      .twiddle_h_rsc_AWCACHE(twiddle_h_rsc_AWCACHE),
      .twiddle_h_rsc_AWLOCK(twiddle_h_rsc_AWLOCK),
      .twiddle_h_rsc_AWBURST(twiddle_h_rsc_AWBURST),
      .twiddle_h_rsc_AWSIZE(twiddle_h_rsc_AWSIZE),
      .twiddle_h_rsc_AWLEN(twiddle_h_rsc_AWLEN),
      .twiddle_h_rsc_AWADDR(twiddle_h_rsc_AWADDR),
      .twiddle_h_rsc_AWID(twiddle_h_rsc_AWID),
      .twiddle_h_rsc_triosy_lz(twiddle_h_rsc_triosy_lz),
      .yt_rsci_clken_d(yt_rsci_clken_d),
      .yt_rsci_d_d(yt_rsci_d_d),
      .yt_rsci_q_d(yt_rsci_q_d),
      .yt_rsci_radr_d(yt_rsci_radr_d),
      .yt_rsci_wadr_d(yt_rsci_wadr_d),
      .yt_rsci_readA_r_ram_ir_internal_RMASK_B_d(yt_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsci_we_d_pff(yt_rsci_we_d_iff)
    );
endmodule



