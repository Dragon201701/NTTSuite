
//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/ccs_libs/interfaces/amba/ccs_axi4_slave_mem.v 
////////////////////////////////////////////////////////////////////////////////
// Catapult Synthesis - Custom Interfaces
//
// Copyright (c) 2018 Mentor Graphics Corp.
//       All Rights Reserved
// 
// This document contains information that is proprietary to Mentor Graphics
// Corp. The original recipient of this document may duplicate this  
// document in whole or in part for internal business purposes only, provided  
// that this entire notice appears in all copies. In duplicating any part of  
// this document, the recipient agrees to make every reasonable effort to  
// prevent the unauthorized use and distribution of the proprietary information.
// 
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in prepartion for creating
// their own custom interfaces. This design does not present a complete
// implementation of the named protocol or standard.
//
// NO WARRANTY.
// MENTOR GRAPHICS CORP. EXPRESSLY DISCLAIMS ALL WARRANTY
// FOR THE SOFTWARE. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE
// LAW, THE SOFTWARE AND ANY RELATED DOCUMENTATION IS PROVIDED "AS IS"
// AND WITH ALL FAULTS AND WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE, OR NONINFRINGEMENT. THE ENTIRE RISK ARISING OUT OF USE OR
// DISTRIBUTION OF THE SOFTWARE REMAINS WITH YOU.
// 
////////////////////////////////////////////////////////////////////////////////

// --------------------------------------------------------------------------
// DESIGN UNIT:        ccs_axi4_slave_mem
//
// DESCRIPTION:
//   This model implements an AXI4 Slave memory interface for use in 
//   Interface Synthesis in Catapult. The component details are described in the datasheet
//
//   AXI/Catapult read/write to the same address in the same cycle is non-determinant
//
// Notes:
//  1. This model implements a local memory of size {cwidth x depth}.
//     If the Catapult operation requires a memory width cwidth <= AXI bus width
//     this model will zero-pad the high end bits as necessary.
// CHANGE LOG:
//
//  01/29/19 - Add reset phase and separate base address for read/write channels
//  11/26/18 - Add burst and other tweaks
//  02/28/18 - Initial implementation
//
// --------------------------------------------------------------------------

// -------------------------------------------------------------------------------
//  Memory Organization
//   This model is designed to provide storage for only the bits/elements that
//   the Catapult core actually interacts with.
//   The user supplies a base address for the AXI memory store via BASE_ADDRESS
//   parameter.  
// Example:
//   C++ array declared as "ac_int<7,false>  coeffs[4];"
//   results in a Catapult operator width (op_width) of 7,
//   and cwidth=7 and addr_w=2 (addressing 4 element locations).
//   The library forces DATA_WIDTH to be big enough to hold
//   cwidth bits, rounded up to power-of-2 as needed.
// 
//   The AXI address scheme addresses bytes and so increments
//   by number-of-bytes per data transaction, plus the BASE_ADDRESS. 
//   The top and left describe the AXI view of the memory. 
//   The bottom and right describe the Catapult view of the memory.
//
//      AXI-4 SIGNALS
//      ADDR_WIDTH=4        DATA_WIDTH=32
//        AxADDR               xDATA
//                    31                       0
//                    +------------+-----------+
//      BA+0000       |            |           |
//                    +------------+-----------+
//      BA+0000       |            |           |
//                    +------------+===========+
//      BA+1100       |            |  elem3    |    11
//                    +------------+===========+
//      BA+1000       |            |  elem2    |    10
//                    +------------+===========+
//      BA+0100       |            |  elem1    |    01
//                    +------------+===========+
//      BA+0000       |            |  elem0    |    00
//                    +------------+===========+
//                                 6           0
//                                   s_din/out     s_addr
//                                   cwidth=7      addr_w=2
//                                         CATAPULT SIGNALS
//
// -------------------------------------------------------------------------------

// Uncomment this for lots of messages
//`define SLAVE_DBG_READ 1
//`define SLAVE_DBG_WRITE 1

`define AXI4_AxBURST_FIXED      2'b00
`define AXI4_AxBURST_INCR       2'b01
`define AXI4_AxBURST_WRAP       2'b10
`define AXI4_AxBURST_RESERVED   2'b11
`define AXI4_AxSIZE_001_BYTE    3'b000
`define AXI4_AxSIZE_002_BYTE    3'b001
`define AXI4_AxSIZE_004_BYTE    3'b010
`define AXI4_AxSIZE_008_BYTE    3'b011
`define AXI4_AxSIZE_016_BYTE    3'b100
`define AXI4_AxSIZE_032_BYTE    3'b101
`define AXI4_AxSIZE_064_BYTE    3'b110
`define AXI4_AxSIZE_128_BYTE    3'b111
`define AXI4_AxLOCK_NORMAL      1'b0
`define AXI4_AxLOCK_EXCLUSIVE   1'b1

`define AXI3_AxLOCK_NORMAL      2'b00
`define AXI3_AxLOCK_EXCLUSIVE   2'b01
`define AXI3_AxLOCK_LOCKED      2'b10
`define AXI3_AxLOCK_RESERVED    2'b11

`define AXI4_AxCACHE_NORM_NN    4'b0010

// W and R cache consts are almost the same
`define AXI4_AWCACHE_NB        4'b0000
`define AXI4_AWCACHE_B         4'b0001
`define AXI4_AWCACHE_NORM_NCNB 4'b0010
`define AXI4_AWCACHE_NORM_NCB  4'b0011
`define AXI4_AWCACHE_WTNA      4'b0110
`define AXI4_AWCACHE_WTRA      4'b0110
`define AXI4_AWCACHE_WTWA      4'b1110
`define AXI4_AWCACHE_WTRWA     4'b1110
`define AXI4_AWCACHE_WBNA      4'b0111
`define AXI4_AWCACHE_WBRA      4'b0111
`define AXI4_WACACHE_WBWA      4'b1111
`define AXI4_AWCACHE_WBRWA     4'b1111
`define AXI4_ARCACHE_NB        4'b0000
`define AXI4_ARCACHE_B         4'b0001
`define AXI4_ARCACHE_NORM_NCNB 4'b0010
`define AXI4_ARCACHE_NORM_NCB  4'b0011
`define AXI4_ARCACHE_WTNA      4'b1010
`define AXI4_ARCACHE_WTRA      4'b1110
`define AXI4_ARCACHE_WTWA      4'b1010
`define AXI4_ARCACHE_WTRWA     4'b1110
`define AXI4_ARCACHE_WBNA      4'b1011
`define AXI4_ARCACHE_WBRA      4'b1111
`define AXI4_ARCACHE_WBWA      4'b1011
`define AXI4_ARCACHE_WBRWA     4'b1111

`define AXI4_AxPROT_b0_UNPRIV     1'b0
`define AXI4_AxPROT_b0_PRIV       1'b1
`define AXI4_AxPROT_b1_SECURE     1'b0
`define AXI4_AxPROT_b1_UNSECURE   1'b1
`define AXI4_AxPROT_b2_DATA       1'b0
`define AXI4_AxPROT_b2_INSTR      1'b1
`define AXI4_AxQOS_NONE           4'b0000
`define AXI4_xRESP_OKAY           2'b00
`define AXI4_xRESP_EXOKAY         2'b01
`define AXI4_xRESP_SLVERR         2'b10
`define AXI4_xRESP_DECERR         2'b11

`define CLOG2(x) \
      (x <= 1) ?   0 : \
      (x <= 2) ?   1 : \
      (x <= 4) ?   2 : \
      (x <= 8) ?   3 : \
      (x <= 16) ?  4 : \
      (x <= 32) ?  5 : \
      (x <= 64) ?  6 : \
      (x <= 128) ? 7 : \
      -1

module ccs_axi4_slave_mem ( ACLK, ARESETn, 
  AWID, AWADDR, AWLEN, AWSIZE, AWBURST, AWLOCK, AWCACHE, AWPROT, AWQOS, AWREGION, AWUSER, AWVALID, AWREADY,
  WDATA, WSTRB, WLAST, WUSER, WVALID, WREADY,
  BID, BRESP, BUSER, BVALID, BREADY,
  ARID, ARADDR, ARLEN, ARSIZE, ARBURST, ARLOCK, ARCACHE, ARPROT, ARQOS, ARREGION, ARUSER, ARVALID, ARREADY,
  RID, RDATA, RRESP, RLAST, RUSER, RVALID, RREADY,
  s_re, s_we, s_raddr, s_waddr, s_din, s_dout, s_rrdy, s_wrdy, is_idle, tr_write_done, s_tdone);

   parameter rscid = 1;           // Required resource ID parameter
   parameter depth  = 16;         // Number of addressable elements
   parameter op_width = 1;        // dummy parameter for cwidth calculation
   parameter cwidth = 8;          // Internal memory data width
   parameter addr_w = 4;          // Internal memory address width
   parameter nopreload = 0;       // 1= no preload before Catapult can read
   parameter rst_ph = 0;          // Reset phase.  1= Positive edge. Default is AXI negative edge
   parameter ADDR_WIDTH = 32;     // AXI4 address width (must be >= addr_w)
   parameter DATA_WIDTH = 32;     // AXI4 data width (must be between 8 and 1024, and power of 2
   parameter ID_WIDTH    = 1;     // AXI4 ID field width (ignored in this model)
   parameter USER_WIDTH  = 1;     // AXI4 User field width (ignored in this model)
   parameter REGION_MAP_SIZE = 1; // AXI4 Region Map (ignored in this model)
   parameter wBASE_ADDRESS = 0;    // AXI4 write channel base address
   parameter rBASE_ADDRESS = 0;    // AXI4 read channel base address
   
   // AXI Clocking
   input                               ACLK;                           // Rising edge clock
   input                               ARESETn;                        // Active LOW asynchronous reset
   wire                                int_ARESETn;
   assign int_ARESETn = rst_ph ? ~ARESETn : ARESETn;

   // ============== AXI4 Slave Write Address Channel Signals
   input [ID_WIDTH-1:0]                AWID;                           // Write Transaction ID
   input [ADDR_WIDTH-1:0]              AWADDR;                         // Write address
   input [7:0]                         AWLEN;                          // Write burst length in beats
   input [2:0]                         AWSIZE;                         // Write burst size - encoding(above)
   input [1:0]                         AWBURST;                        // Write burst mode
   input                               AWLOCK;                         // Lock type
   input [3:0]                         AWCACHE;                        // Memory type
   input [2:0]                         AWPROT;                         // Protection Type
   input [3:0]                         AWQOS;                          // Quality of Service
   input [3:0]                         AWREGION;                       // Region identifier
   input [USER_WIDTH-1:0]              AWUSER;                         // User signal
   input                               AWVALID;                        // Write address valid
   output                              AWREADY;                        // Write address ready
   
   // ============== AXI4 Slave Write Data Channel
   input [DATA_WIDTH-1:0]              WDATA;                          // Write data
   input [DATA_WIDTH/8 - 1:0]          WSTRB;                          // Write strobe (bytewise)
   input                               WLAST;                          // Write last
   input [USER_WIDTH-1:0]              WUSER;                          // User signal
   input                               WVALID;                         // Write data is valid
   output                              WREADY;                         // Write ready

   // ============== AXI4 Slave Write Response Channel Signals
   output [ID_WIDTH-1:0]               BID;                            // Response Transaction ID tag
   output [1:0]                        BRESP;                          // Write response (of slave)
   output [USER_WIDTH-1:0]             BUSER;                          // User signal
   output                              BVALID;                         // Write response valid
   input                               BREADY;                         // Response ready

   // ============== AXI4 Slave Read Address Channel Signals
   input [ID_WIDTH-1:0]                ARID;                           // Read Transaction ID
   input [ADDR_WIDTH-1:0]              ARADDR;                         // Read address
   input [7:0]                         ARLEN;                          // Read burst length in beats
   input [2:0]                         ARSIZE;                         // Read burst size - encoding(above)
   input [1:0]                         ARBURST;                        // Read burst mode
   input                               ARLOCK;                         // Lock type
   input [3:0]                         ARCACHE;                        // Memory type
   input [2:0]                         ARPROT;                         // Protection Type
   input [3:0]                         ARQOS;                          // Quality of Service
   input [3:0]                         ARREGION;                       // Region identifier
   input [USER_WIDTH-1:0]              ARUSER;                         // User signal
   input                               ARVALID;                        // Read address valid
   output                              ARREADY;                        // Read address ready
   
   // ============== AXI4 Slave Read Data Channel Signals
   output [ID_WIDTH-1:0]               RID;                            // Read Transaction ID tag
   output [DATA_WIDTH-1:0]             RDATA;                          // Read data
   output [1:0]                        RRESP;                          // Read response
   output                              RLAST;                          // Read last
   output [USER_WIDTH-1:0]             RUSER;                          // User signal
   output                              RVALID;                         // Read valid
   input                               RREADY;                         // Read ready

   reg                                 AWREADY_reg;
   assign AWREADY = AWREADY_reg;
   reg                                 WREADY_reg;
   assign WREADY = WREADY_reg;
   reg [ID_WIDTH-1:0]                  AWID_reg;
   assign BID = AWID_reg;
   reg [1:0]                           BRESP_reg;
   assign BRESP = BRESP_reg;
   assign BUSER = 0;
   reg                                 BVALID_reg;
   assign BVALID = BVALID_reg;
   
   reg                                 ARREADY_reg;
   assign ARREADY = ARREADY_reg;

   reg [ID_WIDTH-1:0]                  ARID_reg;
   assign RID = ARID_reg;   
   reg [DATA_WIDTH-1:0]                RDATA_reg;
   assign RDATA = RDATA_reg;
   reg [1:0]                           RRESP_reg;
   assign RRESP = RRESP_reg;
   reg                                 RLAST_reg;
   assign RLAST = RLAST_reg;
   assign RUSER = 0;
   reg                                 RVALID_reg;
   assign RVALID = RVALID_reg;
   
   // Catapult interface
   input                               s_re;     // Catapult attempting read of slave memory
   input                               s_we;     // Catapult attempting write to slave memory
   input [addr_w-1:0]                  s_raddr;  // Catapult addressing into memory
   input [addr_w-1:0]                  s_waddr;  // Catapult addressing into memory
   output [cwidth-1:0]                 s_din;    // Data into catapult block through this interface
   input [cwidth-1:0]                  s_dout;   // Data out to slave from catapult
   output                              s_rrdy;   // Slave memory ready for access by Catapult (1=ready)
   output                              s_wrdy;   // Slave memory ready for access by Catapult (1=ready)
   output                              is_idle;  // The component is idle - clock can be suppressed
   input                               tr_write_done;  // transactor resource preload write done
   input                               s_tdone;        // Transaction_done in scverify
   
   reg [cwidth-1:0]                    s_din_reg;
   assign s_din = s_din_reg;
   reg                                 s_rrdy_reg;

   wire                                rCatOutOfOrder;
   reg                                 catIsReading;
   integer                             next_raddr;
   
   assign s_rrdy = s_rrdy_reg && !rCatOutOfOrder;
   
   reg                                 s_wrdy_reg;
   assign s_wrdy = s_wrdy_reg && !s_tdone;
   assign is_idle = 0;
   
   // Statemachine for read and write operations are separate
   localparam [2:0] axi4r_idle=0, axi4r_read=1;   
   localparam [2:0] axi4w_idle=0, axi4w_write=1, axi4w_write_done=2,  axi4w_catwrite=3, axi4w_catwrite_done=4;
   localparam addrShift = `CLOG2(DATA_WIDTH/8);

   reg [2:0]     read_state;
   reg [2:0]     write_state;
   
   reg [7:0]     readBurstCnt;  // how many are left

  // Memory embedded in this slave
   reg [cwidth-1:0] mem[depth-1:0];

   wire [ADDR_WIDTH-1:0] wbase_address;
   wire [ADDR_WIDTH-1:0] rbase_address;
   assign wbase_address = wBASE_ADDRESS;
   assign rbase_address = rBASE_ADDRESS;
   
   reg [ADDR_WIDTH-1:0] address;
      
   // AXI4 Bus Read processing
   reg [ADDR_WIDTH-1:0] useAddr ;

   // The "last" catapult address processed in a burst
   integer readAddr;

   always @(posedge ACLK or negedge int_ARESETn) begin
      if (~int_ARESETn) begin
         read_state <= axi4r_idle;
         ARREADY_reg <= 1;
         ARID_reg <= 0;
         RDATA_reg <= 0;
         RRESP_reg <= `AXI4_xRESP_OKAY;
         RLAST_reg <= 0;
         RVALID_reg <= 0;
         readAddr <= 0;
         readBurstCnt <= 0;
      end else begin
         if ((read_state == axi4r_idle) && (ARVALID == 1)) begin
            useAddr = (ARADDR - rbase_address) >> addrShift;
            // Protect from out of range addressing

`ifdef SLAVE_DBG_WRITE
            $display("ARADDR=%d rbase_address=%d addrShift=%d useAddr=%d at T=%t",
                     ARADDR, rbase_address, addrShift, useAddr, $time);
`endif
            if (useAddr < depth) begin
               if (cwidth < DATA_WIDTH) begin
                  //RDATA_reg[DATA_WIDTH-1:cwidth] <= 0;   // vcs doesnt like this
                  //RDATA_reg[cwidth-1:0] <= mem[useAddr];
                  RDATA_reg <= {{DATA_WIDTH - cwidth{1'b0}}, mem[useAddr]};
               end else begin
                  RDATA_reg <= mem[useAddr];
               end
`ifdef SLAVE_DBG_READ
               $display("Slave AXI1 read:mem[%d]=%h at T=%t", useAddr, mem[useAddr], $time);
`endif
            end else begin
               // synopsys translate_off               
               $display("Error:  Out-of-range AXI memory read access:%h at T=%t", ARADDR, $time);
               // synopsys translate_on
            end
            RRESP_reg <= `AXI4_xRESP_OKAY;
            readAddr <= useAddr;            
            readBurstCnt <= ARLEN;
            if (ARLEN== 0) begin
               ARREADY_reg <= 0;        
               RLAST_reg <= 1;
            end
            RVALID_reg <= 1;
            ARID_reg <= ARID;
            read_state <= axi4r_read;
         end else if (read_state == axi4r_read) begin
            if (RREADY == 1) begin
               if (readBurstCnt == 0) begin
                  // we already sent the last data
                  ARREADY_reg <= 1;
                  RRESP_reg <= `AXI4_xRESP_OKAY;
                  RLAST_reg <= 0;
                  RVALID_reg <= 0;
                  read_state <= axi4r_idle;               
               end else begin 
                  useAddr = readAddr + 1;
                  readAddr <= readAddr + 1;
                  // Protect from out of range addressing
                  if (useAddr < depth) begin
                     if (cwidth < DATA_WIDTH) begin
                        //RDATA_reg[DATA_WIDTH-1:cwidth] <= 0;  // vcs errors on this
                        //RDATA_reg[cwidth-1:0] <= mem[useAddr];
                        RDATA_reg <= {{DATA_WIDTH - cwidth{1'b0}}, mem[useAddr]};
                     end else begin
                        RDATA_reg <= mem[useAddr];
                     end
`ifdef SLAVE_DBG_READ
                     $display("Slave AXI2 read:mem[%d]=%h at T=%t", useAddr, mem[useAddr], $time);
`endif
                  end else begin
                     // We bursted right off the end of the array
                     // synopsys translate_off               
                     $display("Error:  Out-of-range AXI memory read access:%h at T=%t", ARADDR, $time);
                     // synopsys translate_on
                  end
                  readBurstCnt <= readBurstCnt - 1;
                  if ((readBurstCnt - 1) == 0) begin
                     ARREADY_reg <= 0;        
                     RRESP_reg <= `AXI4_xRESP_OKAY;
                     RLAST_reg <= 1;
                  end
                  RVALID_reg <= 1;
               end // else: !if(readBurstCnt == 0)
            end // if (RREADY == 1)
         end // if (read_state == axi4r_read)
      end // else: !if(~int_ARESETn)
   end // always@ (posedge ACLK or negedge int_ARESETn)
   

   // AXI and catapult write processing.
   // Catapult write is one-cycle long so basically a write can happen
   // in any axi state.  AXI has precedence in that catapult write is processed
   // first at each cycle
   integer writeAddr;  // last cat addr written
   integer i;
   
   always @(posedge ACLK or negedge int_ARESETn) begin
      if (~int_ARESETn) begin
         AWREADY_reg <= 1;
         AWID_reg <= 0;
         WREADY_reg <= 1;
         BRESP_reg <= `AXI4_xRESP_OKAY;
         BVALID_reg <= 0;
         write_state <= axi4w_idle;
         writeAddr <= 0;
         s_wrdy_reg <= 0;
         // synopsys translate_off
         for (i=0; i<depth; i=i+1) begin
            mem[i] <= 0;
         end
         // synopsys translate_on
      end else begin
         // When in idle state, catapult and AXI can both initiate writes.
         // If to the same address, then AXI wins...
         if ((s_we == 1) && (write_state == axi4w_idle) && !s_tdone) begin
            mem[s_waddr] <= s_dout;
`ifdef SLAVE_DBG_WRITE
            $display("Slave CAT write:mem[%d]=%h at T=%t", s_waddr, s_dout, $time);
`endif
         end
         if ((write_state == axi4w_idle) && (AWVALID == 1)) begin
            s_wrdy_reg <= 0;
            AWREADY_reg <= 0;
            AWID_reg <= AWID;
            useAddr = (AWADDR - wbase_address) >> addrShift;
`ifdef SLAVE_DBG_WRITE
            $display("AWADDR=%d wbase_address=%d addrShift=%d useAddr=%d at T=%t",
                     AWADDR, wbase_address, addrShift, useAddr, $time);
`endif
            if (WVALID == 1) begin
               // allow for address and data to be presented in one cycle
               // Check for the write to be masked
               if (WSTRB != 0) begin // a byte at a time.  Watch for cwidth much less than DATA_WIDTH
                  if (useAddr < depth) begin
                     for (i=0; i<(DATA_WIDTH/8);i=i+1) begin
                        if (WSTRB[i] == 1) begin
                           if ((8*i) < cwidth) begin
                              mem[useAddr][8*i +: 8] <= WDATA[8*i +: 8];
                           end
                        end
                     end
`ifdef SLAVE_DBG_WRITE
                     $display("Slave AXI1 write:mem[%d]=%h at T=%t", useAddr, WDATA, $time);
`endif
                  end else begin
                     // synopsys translate_off               
                     $display("Error:  Out-of-range AXI memory write access:%h at T=%t", AWADDR, $time);
                     // synopsys translate_on
                  end
               end
            end
            writeAddr <= useAddr;
            if ((WLAST == 1) && (WVALID == 1)) begin
               write_state <= axi4w_write_done;
               WREADY_reg <= 0;
               BRESP_reg <= `AXI4_xRESP_OKAY;
               BVALID_reg <= 1;
            end else begin
               write_state <= axi4w_write;
            end
         end else if (write_state == axi4w_write) begin
            if (WVALID == 1) begin
               useAddr = writeAddr+1;
               if (WSTRB != 0) begin // a byte at a time.  Watch for cwidth much less than DATA_WIDTH
                  if (useAddr < depth) begin
                     for (i=0; i<(DATA_WIDTH/8);i=i+1) begin
                        if (WSTRB[i] == 1) begin
                           if ((8*i) < cwidth) begin
                              mem[useAddr][8*i +: 8] <= WDATA[8*i +: 8];
                           end
                        end
                     end
`ifdef SLAVE_DBG_WRITE
                     $display("SLAVE AXI2 write:mem[%d]=%h at T=%t", useAddr, WDATA, $time);
`endif
                  end else begin
                     // synopsys translate_off
                     $display("Error:  Out-of-range AXI memory write access:%h at T=%t", AWADDR, $time);
                     // synopsys translate_on
                  end
               end
               writeAddr <= useAddr;
               if (WLAST == 1) begin
                  write_state <= axi4w_write_done;
                  WREADY_reg <= 0;
                  BRESP_reg <= `AXI4_xRESP_OKAY;
                  BVALID_reg <= 1;
               end 
            end // if (WVALID == 1)
         end else if (write_state == axi4w_write_done) begin // if (write_state == axi4w_write)
            if (BREADY == 1) begin
               AWREADY_reg <= 1;
               WREADY_reg <= 1;
               BRESP_reg <= `AXI4_xRESP_OKAY;
               BVALID_reg <= 0;
               write_state <= axi4w_idle;
               s_wrdy_reg <= 1;
            end
         end else begin
            s_wrdy_reg <= 1;
         end
      end // else: !if(~int_ARESETn)
   end // always@ (posedge ACLK or negedge int_ARESETn)

   assign rCatOutOfOrder = s_re && s_rrdy_reg && catIsReading && (next_raddr != s_raddr+1);
   
   // Catapult read processing
   always @(posedge ACLK or negedge int_ARESETn) begin
      if (~int_ARESETn) begin
         s_din_reg <= 0;
         s_rrdy_reg <= 0;
         catIsReading <= 0;
         next_raddr <= 0;
      end else begin
         // Catapult has read access to memory
         if (tr_write_done == 1'b1) begin
            if (s_re == 1'b1) begin
`ifdef SLAVE_DBG_READ
               $display("Slave CAT read.  Addr=%d nextAddr=%d Data=%d OOO=%d isReading=%d T=%t", s_raddr, next_raddr, 
                        mem[s_raddr], rCatOutOfOrder, catIsReading, $time);
`endif
               if (catIsReading && !rCatOutOfOrder) begin 
                  if (next_raddr < depth) begin
                     s_din_reg <= mem[next_raddr];
                     next_raddr <= next_raddr+1;                  
`ifdef SLAVE_DBG_READ
                     $display("  Burst continues");                  
`endif
                  end else begin
                     s_rrdy_reg <= 0;
                     catIsReading <= 0;
                     next_raddr <= 0;                  
                  end
               end else begin
                  s_din_reg <= mem[s_raddr];
                  s_rrdy_reg <= 1;
                  next_raddr <= s_raddr+1;                  
                  if (catIsReading && rCatOutOfOrder) begin
`ifdef SLAVE_DBG_READ
                     $display("  OutOfOrder");                  
`endif                  
                     catIsReading <= 0;  // a hiccup
                  end else begin
                     catIsReading <= 1;
                  end
               end
            end else begin
               s_rrdy_reg <= 0;
               catIsReading <= 0;
               next_raddr <= 0;
            end
         end else begin 
            s_rrdy_reg <= 0;
            catIsReading <= 0;
            next_raddr <= 0;
         end
      end
   end
endmodule


//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/siflibs/mgc_io_sync_v2.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module mgc_io_sync_v2 (ld, lz);
    parameter valid = 0;

    input  ld;
    output lz;

    wire   lz;

    assign lz = ld;

endmodule


//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/siflibs/ccs_in_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module ccs_in_v1 (idat, dat);

  parameter integer rscid = 1;
  parameter integer width = 8;

  output [width-1:0] idat;
  input  [width-1:0] dat;

  wire   [width-1:0] idat;

  assign idat = dat;

endmodule


//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/hls_pkgs/mgc_comps_src/mgc_mul_pipe_beh.v 
//
// File:      $Mgc_home/pkgs/hls_pkgs/mgc_comps_src/mgc_mul_pipe_beh.v
//
// BASELINE:  Catapult-C version 2006b.63
// MODIFIED:  2007-04-03, tnagler
//
// Note: this file uses Verilog2001 features; 
//       please enable Verilog2001 in the flow!

module mgc_mul_pipe (a, b, clk, en, a_rst, s_rst, z);

    // Parameters:
    parameter integer width_a = 32'd4;  // input a bit width
    parameter         signd_a =  1'b1;  // input a type (1=signed, 0=unsigned)
    parameter integer width_b = 32'd4;  // input b bit width
    parameter         signd_b =  1'b1;  // input b type (1=signed, 0=unsigned)
    parameter integer width_z = 32'd8;  // result bit width (= width_a + width_b)
    parameter      clock_edge =  1'b0;  // clock polarity (1=posedge, 0=negedge)
    parameter   enable_active =  1'b0;  // enable polarity (1=posedge, 0=negedge)
    parameter    a_rst_active =  1'b1;  // unused
    parameter    s_rst_active =  1'b1;  // unused
    parameter integer  stages = 32'd2;  // number of output registers + 1 (careful!)
    parameter integer n_inreg = 32'd0;  // number of input registers
   
    localparam integer width_ab = width_a + width_b;  // multiplier result width
    localparam integer n_inreg_min = (n_inreg > 1) ? (n_inreg-1) : 0; // for Synopsys DC
   
    // I/O ports:
    input  [width_a-1:0] a;      // input A
    input  [width_b-1:0] b;      // input B
    input                clk;    // clock
    input                en;     // enable
    input                a_rst;  // async reset (unused)
    input                s_rst;  // sync reset (unused)
    output [width_z-1:0] z;      // output


    // Input registers:

    wire [width_a-1:0] a_f;
    wire [width_b-1:0] b_f;

    integer i;

    generate
    if (clock_edge == 1'b0)
    begin: NEG_EDGE1
        case (n_inreg)
        32'd0: begin: B1
            assign a_f = a, 
                   b_f = b;
        end
        default: begin: B2
            reg [width_a-1:0] a_reg [n_inreg_min:0];
            reg [width_b-1:0] b_reg [n_inreg_min:0];
            always @(negedge clk)
            if (en == enable_active)
            begin: B21
                a_reg[0] <= a;
                b_reg[0] <= b;
                for (i = 0; i < n_inreg_min; i = i + 1)
                begin: B3
                    a_reg[i+1] <= a_reg[i];
                    b_reg[i+1] <= b_reg[i];
                end
            end
            assign a_f = a_reg[n_inreg_min],
                   b_f = b_reg[n_inreg_min];
        end
        endcase
    end
    else
    begin: POS_EDGE1
        case (n_inreg)
        32'd0: begin: B1
            assign a_f = a, 
                   b_f = b;
        end
        default: begin: B2
            reg [width_a-1:0] a_reg [n_inreg_min:0];
            reg [width_b-1:0] b_reg [n_inreg_min:0];
            always @(posedge clk)
            if (en == enable_active)
            begin: B21
                a_reg[0] <= a;
                b_reg[0] <= b;
                for (i = 0; i < n_inreg_min; i = i + 1)
                begin: B3
                    a_reg[i+1] <= a_reg[i];
                    b_reg[i+1] <= b_reg[i];
                end
            end
            assign a_f = a_reg[n_inreg_min],
                   b_f = b_reg[n_inreg_min];
        end
        endcase
    end
    endgenerate


    // Output:
    wire [width_z-1:0]  xz;

    function signed [width_z-1:0] conv_signed;
      input signed [width_ab-1:0] res;
      conv_signed = res[width_z-1:0];
    endfunction

    generate
      wire signed [width_ab-1:0] res;
      if ( (signd_a == 1'b1) && (signd_b == 1'b1) )
      begin: SIGNED_AB
              assign res = $signed(a_f) * $signed(b_f);
              assign xz = conv_signed(res);
      end
      else if ( (signd_a == 1'b1) && (signd_b == 1'b0) )
      begin: SIGNED_A
              assign res = $signed(a_f) * $signed({1'b0, b_f});
              assign xz = conv_signed(res);
      end
      else if ( (signd_a == 1'b0) && (signd_b == 1'b1) )
      begin: SIGNED_B
              assign res = $signed({1'b0,a_f}) * $signed(b_f);
              assign xz = conv_signed(res);
      end
      else
      begin: UNSIGNED_AB
              assign res = a_f * b_f;
	      assign xz = res[width_z-1:0];
      end
    endgenerate


    // Output registers:

    reg  [width_z-1:0] reg_array[stages-2:0];
    wire [width_z-1:0] z;

    generate
    if (clock_edge == 1'b0)
    begin: NEG_EDGE2
        always @(negedge clk)
        if (en == enable_active)
            for (i = stages-2; i >= 0; i = i-1)
                if (i == 0)
                    reg_array[i] <= xz;
                else
                    reg_array[i] <= reg_array[i-1];
    end
    else
    begin: POS_EDGE2
        always @(posedge clk)
        if (en == enable_active)
            for (i = stages-2; i >= 0; i = i-1)
                if (i == 0)
                    reg_array[i] <= xz;
                else
                    reg_array[i] <= reg_array[i-1];
    end
    endgenerate

    assign z = reg_array[stages-2];
endmodule

//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/siflibs/mgc_shift_bl_beh_v5.v 
module mgc_shift_bl_v5(a,s,z);
   parameter    width_a = 4;
   parameter    signd_a = 1;
   parameter    width_s = 2;
   parameter    width_z = 8;

   input [width_a-1:0] a;
   input [width_s-1:0] s;
   output [width_z -1:0] z;

   generate if ( signd_a )
   begin: SGNED
     assign z = fshl_s(a,s,a[width_a-1]);
   end
   else
   begin: UNSGNED
     assign z = fshl_s(a,s,1'b0);
   end
   endgenerate

   //Shift-left - unsigned shift argument one bit more
   function [width_z-1:0] fshl_u_1;
      input [width_a  :0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      parameter olen = width_z;
      parameter ilen = width_a+1;
      parameter len = (ilen >= olen) ? ilen : olen;
      reg [len-1:0] result;
      reg [len-1:0] result_t;
      begin
        result_t = {(len){sbit}};
        result_t[ilen-1:0] = arg1;
        result = result_t <<< arg2;
        fshl_u_1 =  result[olen-1:0];
      end
   endfunction // fshl_u

   //Shift-left - unsigned shift argument
   function [width_z-1:0] fshl_u;
      input [width_a-1:0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      fshl_u = fshl_u_1({sbit,arg1} ,arg2, sbit);
   endfunction // fshl_u

   //Shift right - unsigned shift argument
   function [width_z-1:0] fshr_u;
      input [width_a-1:0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      parameter olen = width_z;
      parameter ilen = signd_a ? width_a : width_a+1;
      parameter len = (ilen >= olen) ? ilen : olen;
      reg signed [len-1:0] result;
      reg signed [len-1:0] result_t;
      begin
        result_t = $signed( {(len){sbit}} );
        result_t[width_a-1:0] = arg1;
        result = result_t >>> arg2;
        fshr_u =  result[olen-1:0];
      end
   endfunction // fshl_u

   //Shift left - signed shift argument
   function [width_z-1:0] fshl_s;
      input [width_a-1:0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      reg [width_a:0] sbit_arg1;
      begin
        // Ignoring the possibility that arg2[width_s-1] could be X
        // because of customer complaints regarding X'es in simulation results
        if ( arg2[width_s-1] == 1'b0 )
        begin
          sbit_arg1[width_a:0] = {(width_a+1){1'b0}};
          fshl_s = fshl_u(arg1, arg2, sbit);
        end
        else
        begin
          sbit_arg1[width_a] = sbit;
          sbit_arg1[width_a-1:0] = arg1;
          fshl_s = fshr_u(sbit_arg1[width_a:1], ~arg2, sbit);
        end
      end
   endfunction

endmodule

//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/siflibs/mgc_shift_l_beh_v5.v 
module mgc_shift_l_v5(a,s,z);
   parameter    width_a = 4;
   parameter    signd_a = 1;
   parameter    width_s = 2;
   parameter    width_z = 8;

   input [width_a-1:0] a;
   input [width_s-1:0] s;
   output [width_z -1:0] z;

   generate
   if (signd_a)
   begin: SGNED
      assign z = fshl_u(a,s,a[width_a-1]);
   end
   else
   begin: UNSGNED
      assign z = fshl_u(a,s,1'b0);
   end
   endgenerate

   //Shift-left - unsigned shift argument one bit more
   function [width_z-1:0] fshl_u_1;
      input [width_a  :0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      parameter olen = width_z;
      parameter ilen = width_a+1;
      parameter len = (ilen >= olen) ? ilen : olen;
      reg [len-1:0] result;
      reg [len-1:0] result_t;
      begin
        result_t = {(len){sbit}};
        result_t[ilen-1:0] = arg1;
        result = result_t <<< arg2;
        fshl_u_1 =  result[olen-1:0];
      end
   endfunction // fshl_u

   //Shift-left - unsigned shift argument
   function [width_z-1:0] fshl_u;
      input [width_a-1:0] arg1;
      input [width_s-1:0] arg2;
      input sbit;
      fshl_u = fshl_u_1({sbit,arg1} ,arg2, sbit);
   endfunction // fshl_u

endmodule

//------> /opt/mentorgraphics/Catapult_10.5c/Mgc_home/pkgs/ccs_xilinx/hdl/BLOCK_2R1W_RBW.v 
// Memory Type:            BLOCK
// Operating Mode:         Unknown Memory Type
// Clock Mode:             Single Clock
// 
// RTL Code RW Resolution: RBW
// Catapult RW Resolution: RBW
// 
// HDL Work Library:       Xilinx_RAMS_lib
// Component Name:         BLOCK_2R1W_RBW
// Latency = 1:            RAM with no registers on inputs or outputs
//         = 2:            adds embedded register on RAM output
//         = 3:            adds fabric registers to non-clock input RAM pins
//         = 4:            adds fabric register to output (driven by embedded register from latency=2)

module BLOCK_2R1W_RBW #(
  parameter addr_width = 8 ,
  parameter data_width = 7 ,
  parameter depth = 256 ,
  parameter latency = 1 
  
)( adra,adrb,clk,clken,da,qa,qb,wea);

  input [addr_width-1:0] adra;
  input [addr_width-1:0] adrb;
  input  clk;
  input  clken;
  input [data_width-1:0] da;
  output [data_width-1:0] qa;
  output [data_width-1:0] qb;
  input  wea;
  
  (* ram_style = "block" *)
  reg [data_width-1:0] mem [depth-1:0];// synthesis syn_ramstyle="block"
  
  reg [data_width-1:0] ramqa;
  reg [data_width-1:0] ramqb;
  
  // Port Map
  // rwA :: ADDRESS adra CLOCK clk ENABLE clken DATA_IN da DATA_OUT qa WRITE_ENABLE wea
  // readB :: ADDRESS adrb CLOCK clk ENABLE clken DATA_OUT qb

  generate
    // Register all non-clock inputs (latency < 3)
    if (latency > 2 ) begin
      reg [addr_width-1:0] adra_reg;
      reg [data_width-1:0] da_reg;
      reg wea_reg;
      reg [addr_width-1:0] adrb_reg;
      
      always @(posedge clk) begin
        if (clken) begin
          adra_reg <= adra;
          da_reg <= da;
          wea_reg <= wea;
        end
      end
      always @(posedge clk) begin
        if (clken) begin
          adrb_reg <= adrb;
        end
      end
      
    // Access memory with registered inputs
      always @(posedge clk) begin
        if (clken) begin
            ramqa <= mem[adra_reg];
            if (wea_reg) begin
              mem[adra_reg] <= da_reg;
            end
            ramqb <= mem[adrb_reg];
        end
      end
      
    end // END register inputs

    else begin
    // latency = 1||2: Access memory with non-registered inputs
      always @(posedge clk) begin
        if (clken) begin
            ramqa <= mem[adra];
            if (wea) begin
              mem[adra] <= da;
            end
            ramqb <= mem[adrb];
        end
      end
      
    end
  endgenerate //END input port generate 

  generate
    // latency=1: sequential RAM outputs drive module outputs
    if (latency == 1) begin
      assign qa = ramqa;
      assign qb = ramqb;
      
    end

    else if (latency == 2 || latency == 3) begin
    // latency=2: sequential (RAM output => tmp register => module output)
      reg [data_width-1:0] tmpqa;
      reg [data_width-1:0] tmpqb;
      
      always @(posedge clk) begin
        if (clken) begin
          tmpqa <= ramqa;
        end
      end
      always @(posedge clk) begin
        if (clken) begin
          tmpqb <= ramqb;
        end
      end
      
      assign qa = tmpqa;
      assign qb = tmpqb;
      
    end
    else if (latency == 4) begin
    // latency=4: (RAM => tmp1 register => tmp2 fabric register => module output)
      reg [data_width-1:0] tmp1qa;
      reg [data_width-1:0] tmp1qb;
      
      reg [data_width-1:0] tmp2qa;
      reg [data_width-1:0] tmp2qb;
      
      always @(posedge clk) begin
        if (clken) begin
          tmp1qa <= ramqa;
        end
      end
      always @(posedge clk) begin
        if (clken) begin
          tmp1qb <= ramqb;
        end
      end
      
      always @(posedge clk) begin
        if (clken) begin
          tmp2qa <= tmp1qa;
        end
      end
      always @(posedge clk) begin
        if (clken) begin
          tmp2qb <= tmp1qb;
        end
      end
      
      assign qa = tmp2qa;
      assign qb = tmp2qb;
      
    end
    else begin
      //Add error check if latency > 4 or add N-pipeline regs
    end
  endgenerate //END output port generate

endmodule

//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   jd4691@newnano.poly.edu
//  Generated date: Sun Sep 12 02:32:53 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_134_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_134_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_133_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_133_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_132_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_132_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_131_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_131_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_130_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_130_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_129_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_129_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_128_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_128_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_127_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_127_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_126_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_126_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_125_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_125_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_124_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_124_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_123_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_123_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_122_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_122_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_121_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_121_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_120_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_120_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_119_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_119_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_118_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_118_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_117_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_117_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_116_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_116_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_115_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_115_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_114_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_114_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_113_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_113_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_112_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_112_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_111_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_111_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_110_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_110_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_109_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_109_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_108_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_108_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_107_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_107_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_106_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_106_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_105_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_105_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_104_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_104_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_103_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_103_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_102_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_102_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_101_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_101_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_100_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_100_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_99_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_99_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_98_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_98_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_97_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_97_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_96_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_96_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_95_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_95_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_94_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_94_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_93_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_93_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_92_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_92_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_91_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_91_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_90_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_90_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_89_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_89_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_88_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_88_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_87_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_87_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_86_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_86_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_85_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_85_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_84_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_84_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_83_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_83_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_82_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_82_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_81_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_81_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_80_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_80_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_79_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_79_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_78_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_78_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_77_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_77_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_76_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_76_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_75_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_75_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_74_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_74_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_73_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_73_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_72_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_72_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_71_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_71_4_32_16_16_32_1_gen (
  qa, wea, da, adra, adra_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_70_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_70_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_69_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_69_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_68_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_68_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_67_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_67_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_66_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_66_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_65_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_65_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_64_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_64_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_63_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_63_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_62_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_62_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_61_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_61_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_60_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_60_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_59_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_59_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_58_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_58_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_57_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_57_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_56_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_56_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_55_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_55_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_54_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_54_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_53_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_53_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_52_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_52_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_51_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_51_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_50_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_50_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_49_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_49_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_48_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_48_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_47_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_47_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_46_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_46_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_45_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_45_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_44_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_44_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_43_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_43_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_42_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_42_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_41_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_41_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_40_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_40_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_39_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_39_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_38_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_38_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_37_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_37_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_36_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_36_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_35_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_35_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_34_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_34_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_33_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_33_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_32_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_32_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_31_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_31_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_30_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_30_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_29_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_29_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_28_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_28_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_27_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_27_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_26_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_26_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_25_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_25_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_24_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_24_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_23_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_23_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_22_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_22_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_21_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_21_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_20_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_20_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_19_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_19_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_18_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_18_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_17_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_17_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_16_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_16_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_15_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_15_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_14_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_14_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_13_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_13_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_12_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_12_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_11_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_11_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_10_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_10_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_9_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_9_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_8_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_8_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_7_4_32_16_16_32_1_gen
// ------------------------------------------------------------------


module peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_7_4_32_16_16_32_1_gen (
  clken, qa, wea, da, adra, adra_d, clken_d, da_d, qa_d, wea_d, rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d
);
  output clken;
  input [31:0] qa;
  output wea;
  output [31:0] da;
  output [3:0] adra;
  input [3:0] adra_d;
  input clken_d;
  input [31:0] da_d;
  output [31:0] qa_d;
  input wea_d;
  input rwA_rw_ram_ir_internal_RMASK_B_d;
  input rwA_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign qa_d = qa;
  assign wea = (rwA_rw_ram_ir_internal_WMASK_B_d);
  assign da = (da_d);
  assign adra = (adra_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module peaseNTT_core_core_fsm (
  clk, rst, core_wen, fsm_output, INNER_LOOP1_C_0_tr0, INNER_LOOP2_C_0_tr0, INNER_LOOP2_C_0_tr1,
      INNER_LOOP3_C_0_tr0, INNER_LOOP4_C_0_tr0, INNER_LOOP4_C_0_tr1
);
  input clk;
  input rst;
  input core_wen;
  output [9:0] fsm_output;
  reg [9:0] fsm_output;
  input INNER_LOOP1_C_0_tr0;
  input INNER_LOOP2_C_0_tr0;
  input INNER_LOOP2_C_0_tr1;
  input INNER_LOOP3_C_0_tr0;
  input INNER_LOOP4_C_0_tr0;
  input INNER_LOOP4_C_0_tr1;


  // FSM State Type Declaration for peaseNTT_core_core_fsm_1
  parameter
    main_C_0 = 4'd0,
    STAGE_LOOP_C_0 = 4'd1,
    INNER_LOOP1_C_0 = 4'd2,
    STAGE_LOOP_C_1 = 4'd3,
    INNER_LOOP2_C_0 = 4'd4,
    STAGE_LOOP1_C_0 = 4'd5,
    INNER_LOOP3_C_0 = 4'd6,
    STAGE_LOOP1_C_1 = 4'd7,
    INNER_LOOP4_C_0 = 4'd8,
    main_C_1 = 4'd9;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : peaseNTT_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 10'b0000000010;
        state_var_NS = INNER_LOOP1_C_0;
      end
      INNER_LOOP1_C_0 : begin
        fsm_output = 10'b0000000100;
        if ( INNER_LOOP1_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP1_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 10'b0000001000;
        state_var_NS = INNER_LOOP2_C_0;
      end
      INNER_LOOP2_C_0 : begin
        fsm_output = 10'b0000010000;
        if ( INNER_LOOP2_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP1_C_0;
        end
        else if ( INNER_LOOP2_C_0_tr1 ) begin
          state_var_NS = INNER_LOOP2_C_0;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      STAGE_LOOP1_C_0 : begin
        fsm_output = 10'b0000100000;
        state_var_NS = INNER_LOOP3_C_0;
      end
      INNER_LOOP3_C_0 : begin
        fsm_output = 10'b0001000000;
        if ( INNER_LOOP3_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP1_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP3_C_0;
        end
      end
      STAGE_LOOP1_C_1 : begin
        fsm_output = 10'b0010000000;
        state_var_NS = INNER_LOOP4_C_0;
      end
      INNER_LOOP4_C_0 : begin
        fsm_output = 10'b0100000000;
        if ( INNER_LOOP4_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else if ( INNER_LOOP4_C_0_tr1 ) begin
          state_var_NS = INNER_LOOP4_C_0;
        end
        else begin
          state_var_NS = STAGE_LOOP1_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 10'b1000000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 10'b0000000001;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( core_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_staller
// ------------------------------------------------------------------


module peaseNTT_core_staller (
  clk, rst, core_wen, core_wten, twiddle_rsc_0_0_i_wen_comp, twiddle_rsc_0_1_i_wen_comp,
      twiddle_rsc_0_2_i_wen_comp, twiddle_rsc_0_3_i_wen_comp, twiddle_rsc_0_4_i_wen_comp,
      twiddle_rsc_0_5_i_wen_comp, twiddle_rsc_0_6_i_wen_comp, twiddle_rsc_0_7_i_wen_comp,
      twiddle_rsc_0_8_i_wen_comp, twiddle_rsc_0_9_i_wen_comp, twiddle_rsc_0_10_i_wen_comp,
      twiddle_rsc_0_11_i_wen_comp, twiddle_rsc_0_12_i_wen_comp, twiddle_rsc_0_13_i_wen_comp,
      twiddle_rsc_0_14_i_wen_comp, twiddle_rsc_0_15_i_wen_comp, twiddle_h_rsc_0_0_i_wen_comp,
      twiddle_h_rsc_0_1_i_wen_comp, twiddle_h_rsc_0_2_i_wen_comp, twiddle_h_rsc_0_3_i_wen_comp,
      twiddle_h_rsc_0_4_i_wen_comp, twiddle_h_rsc_0_5_i_wen_comp, twiddle_h_rsc_0_6_i_wen_comp,
      twiddle_h_rsc_0_7_i_wen_comp, twiddle_h_rsc_0_8_i_wen_comp, twiddle_h_rsc_0_9_i_wen_comp,
      twiddle_h_rsc_0_10_i_wen_comp, twiddle_h_rsc_0_11_i_wen_comp, twiddle_h_rsc_0_12_i_wen_comp,
      twiddle_h_rsc_0_13_i_wen_comp, twiddle_h_rsc_0_14_i_wen_comp, twiddle_h_rsc_0_15_i_wen_comp
);
  input clk;
  input rst;
  output core_wen;
  output core_wten;
  input twiddle_rsc_0_0_i_wen_comp;
  input twiddle_rsc_0_1_i_wen_comp;
  input twiddle_rsc_0_2_i_wen_comp;
  input twiddle_rsc_0_3_i_wen_comp;
  input twiddle_rsc_0_4_i_wen_comp;
  input twiddle_rsc_0_5_i_wen_comp;
  input twiddle_rsc_0_6_i_wen_comp;
  input twiddle_rsc_0_7_i_wen_comp;
  input twiddle_rsc_0_8_i_wen_comp;
  input twiddle_rsc_0_9_i_wen_comp;
  input twiddle_rsc_0_10_i_wen_comp;
  input twiddle_rsc_0_11_i_wen_comp;
  input twiddle_rsc_0_12_i_wen_comp;
  input twiddle_rsc_0_13_i_wen_comp;
  input twiddle_rsc_0_14_i_wen_comp;
  input twiddle_rsc_0_15_i_wen_comp;
  input twiddle_h_rsc_0_0_i_wen_comp;
  input twiddle_h_rsc_0_1_i_wen_comp;
  input twiddle_h_rsc_0_2_i_wen_comp;
  input twiddle_h_rsc_0_3_i_wen_comp;
  input twiddle_h_rsc_0_4_i_wen_comp;
  input twiddle_h_rsc_0_5_i_wen_comp;
  input twiddle_h_rsc_0_6_i_wen_comp;
  input twiddle_h_rsc_0_7_i_wen_comp;
  input twiddle_h_rsc_0_8_i_wen_comp;
  input twiddle_h_rsc_0_9_i_wen_comp;
  input twiddle_h_rsc_0_10_i_wen_comp;
  input twiddle_h_rsc_0_11_i_wen_comp;
  input twiddle_h_rsc_0_12_i_wen_comp;
  input twiddle_h_rsc_0_13_i_wen_comp;
  input twiddle_h_rsc_0_14_i_wen_comp;
  input twiddle_h_rsc_0_15_i_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = twiddle_rsc_0_0_i_wen_comp & twiddle_rsc_0_1_i_wen_comp & twiddle_rsc_0_2_i_wen_comp
      & twiddle_rsc_0_3_i_wen_comp & twiddle_rsc_0_4_i_wen_comp & twiddle_rsc_0_5_i_wen_comp
      & twiddle_rsc_0_6_i_wen_comp & twiddle_rsc_0_7_i_wen_comp & twiddle_rsc_0_8_i_wen_comp
      & twiddle_rsc_0_9_i_wen_comp & twiddle_rsc_0_10_i_wen_comp & twiddle_rsc_0_11_i_wen_comp
      & twiddle_rsc_0_12_i_wen_comp & twiddle_rsc_0_13_i_wen_comp & twiddle_rsc_0_14_i_wen_comp
      & twiddle_rsc_0_15_i_wen_comp & twiddle_h_rsc_0_0_i_wen_comp & twiddle_h_rsc_0_1_i_wen_comp
      & twiddle_h_rsc_0_2_i_wen_comp & twiddle_h_rsc_0_3_i_wen_comp & twiddle_h_rsc_0_4_i_wen_comp
      & twiddle_h_rsc_0_5_i_wen_comp & twiddle_h_rsc_0_6_i_wen_comp & twiddle_h_rsc_0_7_i_wen_comp
      & twiddle_h_rsc_0_8_i_wen_comp & twiddle_h_rsc_0_9_i_wen_comp & twiddle_h_rsc_0_10_i_wen_comp
      & twiddle_h_rsc_0_11_i_wen_comp & twiddle_h_rsc_0_12_i_wen_comp & twiddle_h_rsc_0_13_i_wen_comp
      & twiddle_h_rsc_0_14_i_wen_comp & twiddle_h_rsc_0_15_i_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk) begin
    if ( rst ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj_twiddle_h_rsc_triosy_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj_twiddle_h_rsc_triosy_0_0_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_0_obj_iswt0, twiddle_h_rsc_triosy_0_0_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_0_obj_iswt0;
  output twiddle_h_rsc_triosy_0_0_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_0_obj_ld_core_sct = twiddle_h_rsc_triosy_0_0_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj_twiddle_h_rsc_triosy_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj_twiddle_h_rsc_triosy_0_1_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_1_obj_iswt0, twiddle_h_rsc_triosy_0_1_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_1_obj_iswt0;
  output twiddle_h_rsc_triosy_0_1_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_1_obj_ld_core_sct = twiddle_h_rsc_triosy_0_1_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj_twiddle_h_rsc_triosy_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj_twiddle_h_rsc_triosy_0_2_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_2_obj_iswt0, twiddle_h_rsc_triosy_0_2_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_2_obj_iswt0;
  output twiddle_h_rsc_triosy_0_2_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_2_obj_ld_core_sct = twiddle_h_rsc_triosy_0_2_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj_twiddle_h_rsc_triosy_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj_twiddle_h_rsc_triosy_0_3_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_3_obj_iswt0, twiddle_h_rsc_triosy_0_3_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_3_obj_iswt0;
  output twiddle_h_rsc_triosy_0_3_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_3_obj_ld_core_sct = twiddle_h_rsc_triosy_0_3_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj_twiddle_h_rsc_triosy_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj_twiddle_h_rsc_triosy_0_4_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_4_obj_iswt0, twiddle_h_rsc_triosy_0_4_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_4_obj_iswt0;
  output twiddle_h_rsc_triosy_0_4_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_4_obj_ld_core_sct = twiddle_h_rsc_triosy_0_4_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj_twiddle_h_rsc_triosy_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj_twiddle_h_rsc_triosy_0_5_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_5_obj_iswt0, twiddle_h_rsc_triosy_0_5_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_5_obj_iswt0;
  output twiddle_h_rsc_triosy_0_5_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_5_obj_ld_core_sct = twiddle_h_rsc_triosy_0_5_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj_twiddle_h_rsc_triosy_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj_twiddle_h_rsc_triosy_0_6_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_6_obj_iswt0, twiddle_h_rsc_triosy_0_6_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_6_obj_iswt0;
  output twiddle_h_rsc_triosy_0_6_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_6_obj_ld_core_sct = twiddle_h_rsc_triosy_0_6_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj_twiddle_h_rsc_triosy_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj_twiddle_h_rsc_triosy_0_7_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_7_obj_iswt0, twiddle_h_rsc_triosy_0_7_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_7_obj_iswt0;
  output twiddle_h_rsc_triosy_0_7_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_7_obj_ld_core_sct = twiddle_h_rsc_triosy_0_7_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj_twiddle_h_rsc_triosy_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj_twiddle_h_rsc_triosy_0_8_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_8_obj_iswt0, twiddle_h_rsc_triosy_0_8_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_8_obj_iswt0;
  output twiddle_h_rsc_triosy_0_8_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_8_obj_ld_core_sct = twiddle_h_rsc_triosy_0_8_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj_twiddle_h_rsc_triosy_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj_twiddle_h_rsc_triosy_0_9_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_9_obj_iswt0, twiddle_h_rsc_triosy_0_9_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_9_obj_iswt0;
  output twiddle_h_rsc_triosy_0_9_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_9_obj_ld_core_sct = twiddle_h_rsc_triosy_0_9_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj_twiddle_h_rsc_triosy_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj_twiddle_h_rsc_triosy_0_10_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_10_obj_iswt0, twiddle_h_rsc_triosy_0_10_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_10_obj_iswt0;
  output twiddle_h_rsc_triosy_0_10_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_10_obj_ld_core_sct = twiddle_h_rsc_triosy_0_10_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj_twiddle_h_rsc_triosy_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj_twiddle_h_rsc_triosy_0_11_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_11_obj_iswt0, twiddle_h_rsc_triosy_0_11_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_11_obj_iswt0;
  output twiddle_h_rsc_triosy_0_11_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_11_obj_ld_core_sct = twiddle_h_rsc_triosy_0_11_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj_twiddle_h_rsc_triosy_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj_twiddle_h_rsc_triosy_0_12_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_12_obj_iswt0, twiddle_h_rsc_triosy_0_12_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_12_obj_iswt0;
  output twiddle_h_rsc_triosy_0_12_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_12_obj_ld_core_sct = twiddle_h_rsc_triosy_0_12_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj_twiddle_h_rsc_triosy_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj_twiddle_h_rsc_triosy_0_13_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_13_obj_iswt0, twiddle_h_rsc_triosy_0_13_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_13_obj_iswt0;
  output twiddle_h_rsc_triosy_0_13_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_13_obj_ld_core_sct = twiddle_h_rsc_triosy_0_13_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj_twiddle_h_rsc_triosy_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj_twiddle_h_rsc_triosy_0_14_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_14_obj_iswt0, twiddle_h_rsc_triosy_0_14_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_14_obj_iswt0;
  output twiddle_h_rsc_triosy_0_14_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_14_obj_ld_core_sct = twiddle_h_rsc_triosy_0_14_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj_twiddle_h_rsc_triosy_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj_twiddle_h_rsc_triosy_0_15_wait_ctrl
    (
  core_wten, twiddle_h_rsc_triosy_0_15_obj_iswt0, twiddle_h_rsc_triosy_0_15_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_0_15_obj_iswt0;
  output twiddle_h_rsc_triosy_0_15_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_0_15_obj_ld_core_sct = twiddle_h_rsc_triosy_0_15_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_0_obj_twiddle_rsc_triosy_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_0_obj_twiddle_rsc_triosy_0_0_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_0_obj_iswt0, twiddle_rsc_triosy_0_0_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_0_obj_iswt0;
  output twiddle_rsc_triosy_0_0_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_0_obj_ld_core_sct = twiddle_rsc_triosy_0_0_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_1_obj_twiddle_rsc_triosy_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_1_obj_twiddle_rsc_triosy_0_1_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_1_obj_iswt0, twiddle_rsc_triosy_0_1_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_1_obj_iswt0;
  output twiddle_rsc_triosy_0_1_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_1_obj_ld_core_sct = twiddle_rsc_triosy_0_1_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_2_obj_twiddle_rsc_triosy_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_2_obj_twiddle_rsc_triosy_0_2_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_2_obj_iswt0, twiddle_rsc_triosy_0_2_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_2_obj_iswt0;
  output twiddle_rsc_triosy_0_2_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_2_obj_ld_core_sct = twiddle_rsc_triosy_0_2_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_3_obj_twiddle_rsc_triosy_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_3_obj_twiddle_rsc_triosy_0_3_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_3_obj_iswt0, twiddle_rsc_triosy_0_3_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_3_obj_iswt0;
  output twiddle_rsc_triosy_0_3_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_3_obj_ld_core_sct = twiddle_rsc_triosy_0_3_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_4_obj_twiddle_rsc_triosy_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_4_obj_twiddle_rsc_triosy_0_4_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_4_obj_iswt0, twiddle_rsc_triosy_0_4_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_4_obj_iswt0;
  output twiddle_rsc_triosy_0_4_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_4_obj_ld_core_sct = twiddle_rsc_triosy_0_4_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_5_obj_twiddle_rsc_triosy_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_5_obj_twiddle_rsc_triosy_0_5_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_5_obj_iswt0, twiddle_rsc_triosy_0_5_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_5_obj_iswt0;
  output twiddle_rsc_triosy_0_5_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_5_obj_ld_core_sct = twiddle_rsc_triosy_0_5_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_6_obj_twiddle_rsc_triosy_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_6_obj_twiddle_rsc_triosy_0_6_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_6_obj_iswt0, twiddle_rsc_triosy_0_6_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_6_obj_iswt0;
  output twiddle_rsc_triosy_0_6_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_6_obj_ld_core_sct = twiddle_rsc_triosy_0_6_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_7_obj_twiddle_rsc_triosy_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_7_obj_twiddle_rsc_triosy_0_7_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_7_obj_iswt0, twiddle_rsc_triosy_0_7_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_7_obj_iswt0;
  output twiddle_rsc_triosy_0_7_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_7_obj_ld_core_sct = twiddle_rsc_triosy_0_7_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_8_obj_twiddle_rsc_triosy_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_8_obj_twiddle_rsc_triosy_0_8_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_8_obj_iswt0, twiddle_rsc_triosy_0_8_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_8_obj_iswt0;
  output twiddle_rsc_triosy_0_8_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_8_obj_ld_core_sct = twiddle_rsc_triosy_0_8_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_9_obj_twiddle_rsc_triosy_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_9_obj_twiddle_rsc_triosy_0_9_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_9_obj_iswt0, twiddle_rsc_triosy_0_9_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_9_obj_iswt0;
  output twiddle_rsc_triosy_0_9_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_9_obj_ld_core_sct = twiddle_rsc_triosy_0_9_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_10_obj_twiddle_rsc_triosy_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_10_obj_twiddle_rsc_triosy_0_10_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_10_obj_iswt0, twiddle_rsc_triosy_0_10_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_10_obj_iswt0;
  output twiddle_rsc_triosy_0_10_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_10_obj_ld_core_sct = twiddle_rsc_triosy_0_10_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_11_obj_twiddle_rsc_triosy_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_11_obj_twiddle_rsc_triosy_0_11_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_11_obj_iswt0, twiddle_rsc_triosy_0_11_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_11_obj_iswt0;
  output twiddle_rsc_triosy_0_11_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_11_obj_ld_core_sct = twiddle_rsc_triosy_0_11_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_12_obj_twiddle_rsc_triosy_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_12_obj_twiddle_rsc_triosy_0_12_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_12_obj_iswt0, twiddle_rsc_triosy_0_12_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_12_obj_iswt0;
  output twiddle_rsc_triosy_0_12_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_12_obj_ld_core_sct = twiddle_rsc_triosy_0_12_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_13_obj_twiddle_rsc_triosy_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_13_obj_twiddle_rsc_triosy_0_13_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_13_obj_iswt0, twiddle_rsc_triosy_0_13_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_13_obj_iswt0;
  output twiddle_rsc_triosy_0_13_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_13_obj_ld_core_sct = twiddle_rsc_triosy_0_13_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_14_obj_twiddle_rsc_triosy_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_14_obj_twiddle_rsc_triosy_0_14_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_14_obj_iswt0, twiddle_rsc_triosy_0_14_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_14_obj_iswt0;
  output twiddle_rsc_triosy_0_14_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_14_obj_ld_core_sct = twiddle_rsc_triosy_0_14_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_15_obj_twiddle_rsc_triosy_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_15_obj_twiddle_rsc_triosy_0_15_wait_ctrl
    (
  core_wten, twiddle_rsc_triosy_0_15_obj_iswt0, twiddle_rsc_triosy_0_15_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_0_15_obj_iswt0;
  output twiddle_rsc_triosy_0_15_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_0_15_obj_ld_core_sct = twiddle_rsc_triosy_0_15_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl (
  core_wten, r_rsc_triosy_obj_iswt0, r_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input r_rsc_triosy_obj_iswt0;
  output r_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign r_rsc_triosy_obj_ld_core_sct = r_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl (
  core_wten, p_rsc_triosy_obj_iswt0, p_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input p_rsc_triosy_obj_iswt0;
  output p_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign p_rsc_triosy_obj_ld_core_sct = p_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_0_obj_xt_rsc_triosy_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_0_obj_xt_rsc_triosy_0_0_wait_ctrl (
  core_wten, xt_rsc_triosy_0_0_obj_iswt0, xt_rsc_triosy_0_0_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_0_obj_iswt0;
  output xt_rsc_triosy_0_0_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_0_obj_ld_core_sct = xt_rsc_triosy_0_0_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_1_obj_xt_rsc_triosy_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_1_obj_xt_rsc_triosy_0_1_wait_ctrl (
  core_wten, xt_rsc_triosy_0_1_obj_iswt0, xt_rsc_triosy_0_1_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_1_obj_iswt0;
  output xt_rsc_triosy_0_1_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_1_obj_ld_core_sct = xt_rsc_triosy_0_1_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_2_obj_xt_rsc_triosy_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_2_obj_xt_rsc_triosy_0_2_wait_ctrl (
  core_wten, xt_rsc_triosy_0_2_obj_iswt0, xt_rsc_triosy_0_2_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_2_obj_iswt0;
  output xt_rsc_triosy_0_2_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_2_obj_ld_core_sct = xt_rsc_triosy_0_2_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_3_obj_xt_rsc_triosy_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_3_obj_xt_rsc_triosy_0_3_wait_ctrl (
  core_wten, xt_rsc_triosy_0_3_obj_iswt0, xt_rsc_triosy_0_3_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_3_obj_iswt0;
  output xt_rsc_triosy_0_3_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_3_obj_ld_core_sct = xt_rsc_triosy_0_3_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_4_obj_xt_rsc_triosy_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_4_obj_xt_rsc_triosy_0_4_wait_ctrl (
  core_wten, xt_rsc_triosy_0_4_obj_iswt0, xt_rsc_triosy_0_4_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_4_obj_iswt0;
  output xt_rsc_triosy_0_4_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_4_obj_ld_core_sct = xt_rsc_triosy_0_4_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_5_obj_xt_rsc_triosy_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_5_obj_xt_rsc_triosy_0_5_wait_ctrl (
  core_wten, xt_rsc_triosy_0_5_obj_iswt0, xt_rsc_triosy_0_5_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_5_obj_iswt0;
  output xt_rsc_triosy_0_5_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_5_obj_ld_core_sct = xt_rsc_triosy_0_5_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_6_obj_xt_rsc_triosy_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_6_obj_xt_rsc_triosy_0_6_wait_ctrl (
  core_wten, xt_rsc_triosy_0_6_obj_iswt0, xt_rsc_triosy_0_6_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_6_obj_iswt0;
  output xt_rsc_triosy_0_6_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_6_obj_ld_core_sct = xt_rsc_triosy_0_6_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_7_obj_xt_rsc_triosy_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_7_obj_xt_rsc_triosy_0_7_wait_ctrl (
  core_wten, xt_rsc_triosy_0_7_obj_iswt0, xt_rsc_triosy_0_7_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_7_obj_iswt0;
  output xt_rsc_triosy_0_7_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_7_obj_ld_core_sct = xt_rsc_triosy_0_7_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_8_obj_xt_rsc_triosy_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_8_obj_xt_rsc_triosy_0_8_wait_ctrl (
  core_wten, xt_rsc_triosy_0_8_obj_iswt0, xt_rsc_triosy_0_8_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_8_obj_iswt0;
  output xt_rsc_triosy_0_8_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_8_obj_ld_core_sct = xt_rsc_triosy_0_8_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_9_obj_xt_rsc_triosy_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_9_obj_xt_rsc_triosy_0_9_wait_ctrl (
  core_wten, xt_rsc_triosy_0_9_obj_iswt0, xt_rsc_triosy_0_9_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_9_obj_iswt0;
  output xt_rsc_triosy_0_9_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_9_obj_ld_core_sct = xt_rsc_triosy_0_9_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_10_obj_xt_rsc_triosy_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_10_obj_xt_rsc_triosy_0_10_wait_ctrl (
  core_wten, xt_rsc_triosy_0_10_obj_iswt0, xt_rsc_triosy_0_10_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_10_obj_iswt0;
  output xt_rsc_triosy_0_10_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_10_obj_ld_core_sct = xt_rsc_triosy_0_10_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_11_obj_xt_rsc_triosy_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_11_obj_xt_rsc_triosy_0_11_wait_ctrl (
  core_wten, xt_rsc_triosy_0_11_obj_iswt0, xt_rsc_triosy_0_11_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_11_obj_iswt0;
  output xt_rsc_triosy_0_11_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_11_obj_ld_core_sct = xt_rsc_triosy_0_11_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_12_obj_xt_rsc_triosy_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_12_obj_xt_rsc_triosy_0_12_wait_ctrl (
  core_wten, xt_rsc_triosy_0_12_obj_iswt0, xt_rsc_triosy_0_12_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_12_obj_iswt0;
  output xt_rsc_triosy_0_12_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_12_obj_ld_core_sct = xt_rsc_triosy_0_12_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_13_obj_xt_rsc_triosy_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_13_obj_xt_rsc_triosy_0_13_wait_ctrl (
  core_wten, xt_rsc_triosy_0_13_obj_iswt0, xt_rsc_triosy_0_13_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_13_obj_iswt0;
  output xt_rsc_triosy_0_13_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_13_obj_ld_core_sct = xt_rsc_triosy_0_13_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_14_obj_xt_rsc_triosy_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_14_obj_xt_rsc_triosy_0_14_wait_ctrl (
  core_wten, xt_rsc_triosy_0_14_obj_iswt0, xt_rsc_triosy_0_14_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_14_obj_iswt0;
  output xt_rsc_triosy_0_14_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_14_obj_ld_core_sct = xt_rsc_triosy_0_14_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_15_obj_xt_rsc_triosy_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_15_obj_xt_rsc_triosy_0_15_wait_ctrl (
  core_wten, xt_rsc_triosy_0_15_obj_iswt0, xt_rsc_triosy_0_15_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_15_obj_iswt0;
  output xt_rsc_triosy_0_15_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_15_obj_ld_core_sct = xt_rsc_triosy_0_15_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_16_obj_xt_rsc_triosy_0_16_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_16_obj_xt_rsc_triosy_0_16_wait_ctrl (
  core_wten, xt_rsc_triosy_0_16_obj_iswt0, xt_rsc_triosy_0_16_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_16_obj_iswt0;
  output xt_rsc_triosy_0_16_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_16_obj_ld_core_sct = xt_rsc_triosy_0_16_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_17_obj_xt_rsc_triosy_0_17_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_17_obj_xt_rsc_triosy_0_17_wait_ctrl (
  core_wten, xt_rsc_triosy_0_17_obj_iswt0, xt_rsc_triosy_0_17_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_17_obj_iswt0;
  output xt_rsc_triosy_0_17_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_17_obj_ld_core_sct = xt_rsc_triosy_0_17_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_18_obj_xt_rsc_triosy_0_18_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_18_obj_xt_rsc_triosy_0_18_wait_ctrl (
  core_wten, xt_rsc_triosy_0_18_obj_iswt0, xt_rsc_triosy_0_18_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_18_obj_iswt0;
  output xt_rsc_triosy_0_18_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_18_obj_ld_core_sct = xt_rsc_triosy_0_18_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_19_obj_xt_rsc_triosy_0_19_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_19_obj_xt_rsc_triosy_0_19_wait_ctrl (
  core_wten, xt_rsc_triosy_0_19_obj_iswt0, xt_rsc_triosy_0_19_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_19_obj_iswt0;
  output xt_rsc_triosy_0_19_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_19_obj_ld_core_sct = xt_rsc_triosy_0_19_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_20_obj_xt_rsc_triosy_0_20_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_20_obj_xt_rsc_triosy_0_20_wait_ctrl (
  core_wten, xt_rsc_triosy_0_20_obj_iswt0, xt_rsc_triosy_0_20_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_20_obj_iswt0;
  output xt_rsc_triosy_0_20_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_20_obj_ld_core_sct = xt_rsc_triosy_0_20_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_21_obj_xt_rsc_triosy_0_21_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_21_obj_xt_rsc_triosy_0_21_wait_ctrl (
  core_wten, xt_rsc_triosy_0_21_obj_iswt0, xt_rsc_triosy_0_21_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_21_obj_iswt0;
  output xt_rsc_triosy_0_21_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_21_obj_ld_core_sct = xt_rsc_triosy_0_21_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_22_obj_xt_rsc_triosy_0_22_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_22_obj_xt_rsc_triosy_0_22_wait_ctrl (
  core_wten, xt_rsc_triosy_0_22_obj_iswt0, xt_rsc_triosy_0_22_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_22_obj_iswt0;
  output xt_rsc_triosy_0_22_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_22_obj_ld_core_sct = xt_rsc_triosy_0_22_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_23_obj_xt_rsc_triosy_0_23_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_23_obj_xt_rsc_triosy_0_23_wait_ctrl (
  core_wten, xt_rsc_triosy_0_23_obj_iswt0, xt_rsc_triosy_0_23_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_23_obj_iswt0;
  output xt_rsc_triosy_0_23_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_23_obj_ld_core_sct = xt_rsc_triosy_0_23_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_24_obj_xt_rsc_triosy_0_24_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_24_obj_xt_rsc_triosy_0_24_wait_ctrl (
  core_wten, xt_rsc_triosy_0_24_obj_iswt0, xt_rsc_triosy_0_24_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_24_obj_iswt0;
  output xt_rsc_triosy_0_24_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_24_obj_ld_core_sct = xt_rsc_triosy_0_24_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_25_obj_xt_rsc_triosy_0_25_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_25_obj_xt_rsc_triosy_0_25_wait_ctrl (
  core_wten, xt_rsc_triosy_0_25_obj_iswt0, xt_rsc_triosy_0_25_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_25_obj_iswt0;
  output xt_rsc_triosy_0_25_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_25_obj_ld_core_sct = xt_rsc_triosy_0_25_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_26_obj_xt_rsc_triosy_0_26_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_26_obj_xt_rsc_triosy_0_26_wait_ctrl (
  core_wten, xt_rsc_triosy_0_26_obj_iswt0, xt_rsc_triosy_0_26_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_26_obj_iswt0;
  output xt_rsc_triosy_0_26_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_26_obj_ld_core_sct = xt_rsc_triosy_0_26_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_27_obj_xt_rsc_triosy_0_27_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_27_obj_xt_rsc_triosy_0_27_wait_ctrl (
  core_wten, xt_rsc_triosy_0_27_obj_iswt0, xt_rsc_triosy_0_27_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_27_obj_iswt0;
  output xt_rsc_triosy_0_27_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_27_obj_ld_core_sct = xt_rsc_triosy_0_27_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_28_obj_xt_rsc_triosy_0_28_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_28_obj_xt_rsc_triosy_0_28_wait_ctrl (
  core_wten, xt_rsc_triosy_0_28_obj_iswt0, xt_rsc_triosy_0_28_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_28_obj_iswt0;
  output xt_rsc_triosy_0_28_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_28_obj_ld_core_sct = xt_rsc_triosy_0_28_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_29_obj_xt_rsc_triosy_0_29_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_29_obj_xt_rsc_triosy_0_29_wait_ctrl (
  core_wten, xt_rsc_triosy_0_29_obj_iswt0, xt_rsc_triosy_0_29_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_29_obj_iswt0;
  output xt_rsc_triosy_0_29_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_29_obj_ld_core_sct = xt_rsc_triosy_0_29_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_30_obj_xt_rsc_triosy_0_30_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_30_obj_xt_rsc_triosy_0_30_wait_ctrl (
  core_wten, xt_rsc_triosy_0_30_obj_iswt0, xt_rsc_triosy_0_30_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_30_obj_iswt0;
  output xt_rsc_triosy_0_30_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_30_obj_ld_core_sct = xt_rsc_triosy_0_30_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_31_obj_xt_rsc_triosy_0_31_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_31_obj_xt_rsc_triosy_0_31_wait_ctrl (
  core_wten, xt_rsc_triosy_0_31_obj_iswt0, xt_rsc_triosy_0_31_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_0_31_obj_iswt0;
  output xt_rsc_triosy_0_31_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_0_31_obj_ld_core_sct = xt_rsc_triosy_0_31_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_0_obj_xt_rsc_triosy_1_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_0_obj_xt_rsc_triosy_1_0_wait_ctrl (
  core_wten, xt_rsc_triosy_1_0_obj_iswt0, xt_rsc_triosy_1_0_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_0_obj_iswt0;
  output xt_rsc_triosy_1_0_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_0_obj_ld_core_sct = xt_rsc_triosy_1_0_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_1_obj_xt_rsc_triosy_1_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_1_obj_xt_rsc_triosy_1_1_wait_ctrl (
  core_wten, xt_rsc_triosy_1_1_obj_iswt0, xt_rsc_triosy_1_1_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_1_obj_iswt0;
  output xt_rsc_triosy_1_1_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_1_obj_ld_core_sct = xt_rsc_triosy_1_1_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_2_obj_xt_rsc_triosy_1_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_2_obj_xt_rsc_triosy_1_2_wait_ctrl (
  core_wten, xt_rsc_triosy_1_2_obj_iswt0, xt_rsc_triosy_1_2_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_2_obj_iswt0;
  output xt_rsc_triosy_1_2_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_2_obj_ld_core_sct = xt_rsc_triosy_1_2_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_3_obj_xt_rsc_triosy_1_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_3_obj_xt_rsc_triosy_1_3_wait_ctrl (
  core_wten, xt_rsc_triosy_1_3_obj_iswt0, xt_rsc_triosy_1_3_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_3_obj_iswt0;
  output xt_rsc_triosy_1_3_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_3_obj_ld_core_sct = xt_rsc_triosy_1_3_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_4_obj_xt_rsc_triosy_1_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_4_obj_xt_rsc_triosy_1_4_wait_ctrl (
  core_wten, xt_rsc_triosy_1_4_obj_iswt0, xt_rsc_triosy_1_4_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_4_obj_iswt0;
  output xt_rsc_triosy_1_4_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_4_obj_ld_core_sct = xt_rsc_triosy_1_4_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_5_obj_xt_rsc_triosy_1_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_5_obj_xt_rsc_triosy_1_5_wait_ctrl (
  core_wten, xt_rsc_triosy_1_5_obj_iswt0, xt_rsc_triosy_1_5_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_5_obj_iswt0;
  output xt_rsc_triosy_1_5_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_5_obj_ld_core_sct = xt_rsc_triosy_1_5_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_6_obj_xt_rsc_triosy_1_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_6_obj_xt_rsc_triosy_1_6_wait_ctrl (
  core_wten, xt_rsc_triosy_1_6_obj_iswt0, xt_rsc_triosy_1_6_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_6_obj_iswt0;
  output xt_rsc_triosy_1_6_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_6_obj_ld_core_sct = xt_rsc_triosy_1_6_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_7_obj_xt_rsc_triosy_1_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_7_obj_xt_rsc_triosy_1_7_wait_ctrl (
  core_wten, xt_rsc_triosy_1_7_obj_iswt0, xt_rsc_triosy_1_7_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_7_obj_iswt0;
  output xt_rsc_triosy_1_7_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_7_obj_ld_core_sct = xt_rsc_triosy_1_7_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_8_obj_xt_rsc_triosy_1_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_8_obj_xt_rsc_triosy_1_8_wait_ctrl (
  core_wten, xt_rsc_triosy_1_8_obj_iswt0, xt_rsc_triosy_1_8_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_8_obj_iswt0;
  output xt_rsc_triosy_1_8_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_8_obj_ld_core_sct = xt_rsc_triosy_1_8_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_9_obj_xt_rsc_triosy_1_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_9_obj_xt_rsc_triosy_1_9_wait_ctrl (
  core_wten, xt_rsc_triosy_1_9_obj_iswt0, xt_rsc_triosy_1_9_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_9_obj_iswt0;
  output xt_rsc_triosy_1_9_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_9_obj_ld_core_sct = xt_rsc_triosy_1_9_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_10_obj_xt_rsc_triosy_1_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_10_obj_xt_rsc_triosy_1_10_wait_ctrl (
  core_wten, xt_rsc_triosy_1_10_obj_iswt0, xt_rsc_triosy_1_10_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_10_obj_iswt0;
  output xt_rsc_triosy_1_10_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_10_obj_ld_core_sct = xt_rsc_triosy_1_10_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_11_obj_xt_rsc_triosy_1_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_11_obj_xt_rsc_triosy_1_11_wait_ctrl (
  core_wten, xt_rsc_triosy_1_11_obj_iswt0, xt_rsc_triosy_1_11_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_11_obj_iswt0;
  output xt_rsc_triosy_1_11_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_11_obj_ld_core_sct = xt_rsc_triosy_1_11_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_12_obj_xt_rsc_triosy_1_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_12_obj_xt_rsc_triosy_1_12_wait_ctrl (
  core_wten, xt_rsc_triosy_1_12_obj_iswt0, xt_rsc_triosy_1_12_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_12_obj_iswt0;
  output xt_rsc_triosy_1_12_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_12_obj_ld_core_sct = xt_rsc_triosy_1_12_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_13_obj_xt_rsc_triosy_1_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_13_obj_xt_rsc_triosy_1_13_wait_ctrl (
  core_wten, xt_rsc_triosy_1_13_obj_iswt0, xt_rsc_triosy_1_13_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_13_obj_iswt0;
  output xt_rsc_triosy_1_13_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_13_obj_ld_core_sct = xt_rsc_triosy_1_13_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_14_obj_xt_rsc_triosy_1_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_14_obj_xt_rsc_triosy_1_14_wait_ctrl (
  core_wten, xt_rsc_triosy_1_14_obj_iswt0, xt_rsc_triosy_1_14_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_14_obj_iswt0;
  output xt_rsc_triosy_1_14_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_14_obj_ld_core_sct = xt_rsc_triosy_1_14_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_15_obj_xt_rsc_triosy_1_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_15_obj_xt_rsc_triosy_1_15_wait_ctrl (
  core_wten, xt_rsc_triosy_1_15_obj_iswt0, xt_rsc_triosy_1_15_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_15_obj_iswt0;
  output xt_rsc_triosy_1_15_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_15_obj_ld_core_sct = xt_rsc_triosy_1_15_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_16_obj_xt_rsc_triosy_1_16_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_16_obj_xt_rsc_triosy_1_16_wait_ctrl (
  core_wten, xt_rsc_triosy_1_16_obj_iswt0, xt_rsc_triosy_1_16_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_16_obj_iswt0;
  output xt_rsc_triosy_1_16_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_16_obj_ld_core_sct = xt_rsc_triosy_1_16_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_17_obj_xt_rsc_triosy_1_17_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_17_obj_xt_rsc_triosy_1_17_wait_ctrl (
  core_wten, xt_rsc_triosy_1_17_obj_iswt0, xt_rsc_triosy_1_17_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_17_obj_iswt0;
  output xt_rsc_triosy_1_17_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_17_obj_ld_core_sct = xt_rsc_triosy_1_17_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_18_obj_xt_rsc_triosy_1_18_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_18_obj_xt_rsc_triosy_1_18_wait_ctrl (
  core_wten, xt_rsc_triosy_1_18_obj_iswt0, xt_rsc_triosy_1_18_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_18_obj_iswt0;
  output xt_rsc_triosy_1_18_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_18_obj_ld_core_sct = xt_rsc_triosy_1_18_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_19_obj_xt_rsc_triosy_1_19_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_19_obj_xt_rsc_triosy_1_19_wait_ctrl (
  core_wten, xt_rsc_triosy_1_19_obj_iswt0, xt_rsc_triosy_1_19_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_19_obj_iswt0;
  output xt_rsc_triosy_1_19_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_19_obj_ld_core_sct = xt_rsc_triosy_1_19_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_20_obj_xt_rsc_triosy_1_20_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_20_obj_xt_rsc_triosy_1_20_wait_ctrl (
  core_wten, xt_rsc_triosy_1_20_obj_iswt0, xt_rsc_triosy_1_20_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_20_obj_iswt0;
  output xt_rsc_triosy_1_20_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_20_obj_ld_core_sct = xt_rsc_triosy_1_20_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_21_obj_xt_rsc_triosy_1_21_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_21_obj_xt_rsc_triosy_1_21_wait_ctrl (
  core_wten, xt_rsc_triosy_1_21_obj_iswt0, xt_rsc_triosy_1_21_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_21_obj_iswt0;
  output xt_rsc_triosy_1_21_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_21_obj_ld_core_sct = xt_rsc_triosy_1_21_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_22_obj_xt_rsc_triosy_1_22_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_22_obj_xt_rsc_triosy_1_22_wait_ctrl (
  core_wten, xt_rsc_triosy_1_22_obj_iswt0, xt_rsc_triosy_1_22_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_22_obj_iswt0;
  output xt_rsc_triosy_1_22_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_22_obj_ld_core_sct = xt_rsc_triosy_1_22_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_23_obj_xt_rsc_triosy_1_23_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_23_obj_xt_rsc_triosy_1_23_wait_ctrl (
  core_wten, xt_rsc_triosy_1_23_obj_iswt0, xt_rsc_triosy_1_23_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_23_obj_iswt0;
  output xt_rsc_triosy_1_23_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_23_obj_ld_core_sct = xt_rsc_triosy_1_23_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_24_obj_xt_rsc_triosy_1_24_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_24_obj_xt_rsc_triosy_1_24_wait_ctrl (
  core_wten, xt_rsc_triosy_1_24_obj_iswt0, xt_rsc_triosy_1_24_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_24_obj_iswt0;
  output xt_rsc_triosy_1_24_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_24_obj_ld_core_sct = xt_rsc_triosy_1_24_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_25_obj_xt_rsc_triosy_1_25_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_25_obj_xt_rsc_triosy_1_25_wait_ctrl (
  core_wten, xt_rsc_triosy_1_25_obj_iswt0, xt_rsc_triosy_1_25_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_25_obj_iswt0;
  output xt_rsc_triosy_1_25_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_25_obj_ld_core_sct = xt_rsc_triosy_1_25_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_26_obj_xt_rsc_triosy_1_26_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_26_obj_xt_rsc_triosy_1_26_wait_ctrl (
  core_wten, xt_rsc_triosy_1_26_obj_iswt0, xt_rsc_triosy_1_26_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_26_obj_iswt0;
  output xt_rsc_triosy_1_26_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_26_obj_ld_core_sct = xt_rsc_triosy_1_26_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_27_obj_xt_rsc_triosy_1_27_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_27_obj_xt_rsc_triosy_1_27_wait_ctrl (
  core_wten, xt_rsc_triosy_1_27_obj_iswt0, xt_rsc_triosy_1_27_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_27_obj_iswt0;
  output xt_rsc_triosy_1_27_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_27_obj_ld_core_sct = xt_rsc_triosy_1_27_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_28_obj_xt_rsc_triosy_1_28_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_28_obj_xt_rsc_triosy_1_28_wait_ctrl (
  core_wten, xt_rsc_triosy_1_28_obj_iswt0, xt_rsc_triosy_1_28_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_28_obj_iswt0;
  output xt_rsc_triosy_1_28_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_28_obj_ld_core_sct = xt_rsc_triosy_1_28_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_29_obj_xt_rsc_triosy_1_29_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_29_obj_xt_rsc_triosy_1_29_wait_ctrl (
  core_wten, xt_rsc_triosy_1_29_obj_iswt0, xt_rsc_triosy_1_29_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_29_obj_iswt0;
  output xt_rsc_triosy_1_29_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_29_obj_ld_core_sct = xt_rsc_triosy_1_29_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_30_obj_xt_rsc_triosy_1_30_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_30_obj_xt_rsc_triosy_1_30_wait_ctrl (
  core_wten, xt_rsc_triosy_1_30_obj_iswt0, xt_rsc_triosy_1_30_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_30_obj_iswt0;
  output xt_rsc_triosy_1_30_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_30_obj_ld_core_sct = xt_rsc_triosy_1_30_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_31_obj_xt_rsc_triosy_1_31_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_31_obj_xt_rsc_triosy_1_31_wait_ctrl (
  core_wten, xt_rsc_triosy_1_31_obj_iswt0, xt_rsc_triosy_1_31_obj_ld_core_sct
);
  input core_wten;
  input xt_rsc_triosy_1_31_obj_iswt0;
  output xt_rsc_triosy_1_31_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_triosy_1_31_obj_ld_core_sct = xt_rsc_triosy_1_31_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp (
  clk, rst, twiddle_h_rsc_0_15_i_oswt, twiddle_h_rsc_0_15_i_wen_comp, twiddle_h_rsc_0_15_i_s_raddr_core,
      twiddle_h_rsc_0_15_i_s_din_mxwt, twiddle_h_rsc_0_15_i_biwt, twiddle_h_rsc_0_15_i_bdwt,
      twiddle_h_rsc_0_15_i_bcwt, twiddle_h_rsc_0_15_i_s_raddr, twiddle_h_rsc_0_15_i_s_raddr_core_sct,
      twiddle_h_rsc_0_15_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_15_i_oswt;
  output twiddle_h_rsc_0_15_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_15_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_15_i_s_din_mxwt;
  input twiddle_h_rsc_0_15_i_biwt;
  input twiddle_h_rsc_0_15_i_bdwt;
  output twiddle_h_rsc_0_15_i_bcwt;
  reg twiddle_h_rsc_0_15_i_bcwt;
  output [5:0] twiddle_h_rsc_0_15_i_s_raddr;
  input twiddle_h_rsc_0_15_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_15_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_15_i_s_din_bfwt;

  wire[4:0] butterFly2_15_tw_h_butterFly2_15_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_15_i_wen_comp = (~ twiddle_h_rsc_0_15_i_oswt) | twiddle_h_rsc_0_15_i_biwt
      | twiddle_h_rsc_0_15_i_bcwt;
  assign butterFly2_15_tw_h_butterFly2_15_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_15_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_15_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_15_i_s_raddr = {1'b0, butterFly2_15_tw_h_butterFly2_15_tw_h_and_nl};
  assign twiddle_h_rsc_0_15_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_15_i_s_din,
      twiddle_h_rsc_0_15_i_s_din_bfwt, twiddle_h_rsc_0_15_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_15_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_15_i_bcwt <= ~((~(twiddle_h_rsc_0_15_i_bcwt | twiddle_h_rsc_0_15_i_biwt))
          | twiddle_h_rsc_0_15_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_15_i_biwt ) begin
      twiddle_h_rsc_0_15_i_s_din_bfwt <= twiddle_h_rsc_0_15_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_ctrl (
  core_wen, twiddle_h_rsc_0_15_i_oswt, twiddle_h_rsc_0_15_i_biwt, twiddle_h_rsc_0_15_i_bdwt,
      twiddle_h_rsc_0_15_i_bcwt, twiddle_h_rsc_0_15_i_s_re_core_sct, twiddle_h_rsc_0_15_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_15_i_oswt;
  output twiddle_h_rsc_0_15_i_biwt;
  output twiddle_h_rsc_0_15_i_bdwt;
  input twiddle_h_rsc_0_15_i_bcwt;
  output twiddle_h_rsc_0_15_i_s_re_core_sct;
  input twiddle_h_rsc_0_15_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_15_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_15_i_bdwt = twiddle_h_rsc_0_15_i_oswt & core_wen;
  assign twiddle_h_rsc_0_15_i_biwt = twiddle_h_rsc_0_15_i_ogwt & twiddle_h_rsc_0_15_i_s_rrdy;
  assign twiddle_h_rsc_0_15_i_ogwt = twiddle_h_rsc_0_15_i_oswt & (~ twiddle_h_rsc_0_15_i_bcwt);
  assign twiddle_h_rsc_0_15_i_s_re_core_sct = twiddle_h_rsc_0_15_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp (
  clk, rst, twiddle_h_rsc_0_14_i_oswt, twiddle_h_rsc_0_14_i_wen_comp, twiddle_h_rsc_0_14_i_s_raddr_core,
      twiddle_h_rsc_0_14_i_s_din_mxwt, twiddle_h_rsc_0_14_i_biwt, twiddle_h_rsc_0_14_i_bdwt,
      twiddle_h_rsc_0_14_i_bcwt, twiddle_h_rsc_0_14_i_s_raddr, twiddle_h_rsc_0_14_i_s_raddr_core_sct,
      twiddle_h_rsc_0_14_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_14_i_oswt;
  output twiddle_h_rsc_0_14_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_14_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_14_i_s_din_mxwt;
  input twiddle_h_rsc_0_14_i_biwt;
  input twiddle_h_rsc_0_14_i_bdwt;
  output twiddle_h_rsc_0_14_i_bcwt;
  reg twiddle_h_rsc_0_14_i_bcwt;
  output [5:0] twiddle_h_rsc_0_14_i_s_raddr;
  input twiddle_h_rsc_0_14_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_14_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_14_i_s_din_bfwt;

  wire[4:0] butterFly2_14_tw_h_butterFly2_14_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_14_i_wen_comp = (~ twiddle_h_rsc_0_14_i_oswt) | twiddle_h_rsc_0_14_i_biwt
      | twiddle_h_rsc_0_14_i_bcwt;
  assign butterFly2_14_tw_h_butterFly2_14_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_14_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_14_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_14_i_s_raddr = {1'b0, butterFly2_14_tw_h_butterFly2_14_tw_h_and_nl};
  assign twiddle_h_rsc_0_14_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_14_i_s_din,
      twiddle_h_rsc_0_14_i_s_din_bfwt, twiddle_h_rsc_0_14_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_14_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_14_i_bcwt <= ~((~(twiddle_h_rsc_0_14_i_bcwt | twiddle_h_rsc_0_14_i_biwt))
          | twiddle_h_rsc_0_14_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_14_i_biwt ) begin
      twiddle_h_rsc_0_14_i_s_din_bfwt <= twiddle_h_rsc_0_14_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_ctrl (
  core_wen, twiddle_h_rsc_0_14_i_oswt, twiddle_h_rsc_0_14_i_biwt, twiddle_h_rsc_0_14_i_bdwt,
      twiddle_h_rsc_0_14_i_bcwt, twiddle_h_rsc_0_14_i_s_re_core_sct, twiddle_h_rsc_0_14_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_14_i_oswt;
  output twiddle_h_rsc_0_14_i_biwt;
  output twiddle_h_rsc_0_14_i_bdwt;
  input twiddle_h_rsc_0_14_i_bcwt;
  output twiddle_h_rsc_0_14_i_s_re_core_sct;
  input twiddle_h_rsc_0_14_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_14_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_14_i_bdwt = twiddle_h_rsc_0_14_i_oswt & core_wen;
  assign twiddle_h_rsc_0_14_i_biwt = twiddle_h_rsc_0_14_i_ogwt & twiddle_h_rsc_0_14_i_s_rrdy;
  assign twiddle_h_rsc_0_14_i_ogwt = twiddle_h_rsc_0_14_i_oswt & (~ twiddle_h_rsc_0_14_i_bcwt);
  assign twiddle_h_rsc_0_14_i_s_re_core_sct = twiddle_h_rsc_0_14_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp (
  clk, rst, twiddle_h_rsc_0_13_i_oswt, twiddle_h_rsc_0_13_i_wen_comp, twiddle_h_rsc_0_13_i_s_raddr_core,
      twiddle_h_rsc_0_13_i_s_din_mxwt, twiddle_h_rsc_0_13_i_biwt, twiddle_h_rsc_0_13_i_bdwt,
      twiddle_h_rsc_0_13_i_bcwt, twiddle_h_rsc_0_13_i_s_raddr, twiddle_h_rsc_0_13_i_s_raddr_core_sct,
      twiddle_h_rsc_0_13_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_13_i_oswt;
  output twiddle_h_rsc_0_13_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_13_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_13_i_s_din_mxwt;
  input twiddle_h_rsc_0_13_i_biwt;
  input twiddle_h_rsc_0_13_i_bdwt;
  output twiddle_h_rsc_0_13_i_bcwt;
  reg twiddle_h_rsc_0_13_i_bcwt;
  output [5:0] twiddle_h_rsc_0_13_i_s_raddr;
  input twiddle_h_rsc_0_13_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_13_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_13_i_s_din_bfwt;

  wire[4:0] butterFly2_13_tw_h_butterFly2_13_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_13_i_wen_comp = (~ twiddle_h_rsc_0_13_i_oswt) | twiddle_h_rsc_0_13_i_biwt
      | twiddle_h_rsc_0_13_i_bcwt;
  assign butterFly2_13_tw_h_butterFly2_13_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_13_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_13_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_13_i_s_raddr = {1'b0, butterFly2_13_tw_h_butterFly2_13_tw_h_and_nl};
  assign twiddle_h_rsc_0_13_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_13_i_s_din,
      twiddle_h_rsc_0_13_i_s_din_bfwt, twiddle_h_rsc_0_13_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_13_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_13_i_bcwt <= ~((~(twiddle_h_rsc_0_13_i_bcwt | twiddle_h_rsc_0_13_i_biwt))
          | twiddle_h_rsc_0_13_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_13_i_biwt ) begin
      twiddle_h_rsc_0_13_i_s_din_bfwt <= twiddle_h_rsc_0_13_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_ctrl (
  core_wen, twiddle_h_rsc_0_13_i_oswt, twiddle_h_rsc_0_13_i_biwt, twiddle_h_rsc_0_13_i_bdwt,
      twiddle_h_rsc_0_13_i_bcwt, twiddle_h_rsc_0_13_i_s_re_core_sct, twiddle_h_rsc_0_13_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_13_i_oswt;
  output twiddle_h_rsc_0_13_i_biwt;
  output twiddle_h_rsc_0_13_i_bdwt;
  input twiddle_h_rsc_0_13_i_bcwt;
  output twiddle_h_rsc_0_13_i_s_re_core_sct;
  input twiddle_h_rsc_0_13_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_13_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_13_i_bdwt = twiddle_h_rsc_0_13_i_oswt & core_wen;
  assign twiddle_h_rsc_0_13_i_biwt = twiddle_h_rsc_0_13_i_ogwt & twiddle_h_rsc_0_13_i_s_rrdy;
  assign twiddle_h_rsc_0_13_i_ogwt = twiddle_h_rsc_0_13_i_oswt & (~ twiddle_h_rsc_0_13_i_bcwt);
  assign twiddle_h_rsc_0_13_i_s_re_core_sct = twiddle_h_rsc_0_13_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp (
  clk, rst, twiddle_h_rsc_0_12_i_oswt, twiddle_h_rsc_0_12_i_wen_comp, twiddle_h_rsc_0_12_i_s_raddr_core,
      twiddle_h_rsc_0_12_i_s_din_mxwt, twiddle_h_rsc_0_12_i_biwt, twiddle_h_rsc_0_12_i_bdwt,
      twiddle_h_rsc_0_12_i_bcwt, twiddle_h_rsc_0_12_i_s_raddr, twiddle_h_rsc_0_12_i_s_raddr_core_sct,
      twiddle_h_rsc_0_12_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_12_i_oswt;
  output twiddle_h_rsc_0_12_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_12_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_12_i_s_din_mxwt;
  input twiddle_h_rsc_0_12_i_biwt;
  input twiddle_h_rsc_0_12_i_bdwt;
  output twiddle_h_rsc_0_12_i_bcwt;
  reg twiddle_h_rsc_0_12_i_bcwt;
  output [5:0] twiddle_h_rsc_0_12_i_s_raddr;
  input twiddle_h_rsc_0_12_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_12_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_12_i_s_din_bfwt;

  wire[4:0] butterFly2_12_tw_h_butterFly2_12_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_12_i_wen_comp = (~ twiddle_h_rsc_0_12_i_oswt) | twiddle_h_rsc_0_12_i_biwt
      | twiddle_h_rsc_0_12_i_bcwt;
  assign butterFly2_12_tw_h_butterFly2_12_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_12_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_12_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_12_i_s_raddr = {1'b0, butterFly2_12_tw_h_butterFly2_12_tw_h_and_nl};
  assign twiddle_h_rsc_0_12_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_12_i_s_din,
      twiddle_h_rsc_0_12_i_s_din_bfwt, twiddle_h_rsc_0_12_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_12_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_12_i_bcwt <= ~((~(twiddle_h_rsc_0_12_i_bcwt | twiddle_h_rsc_0_12_i_biwt))
          | twiddle_h_rsc_0_12_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_12_i_biwt ) begin
      twiddle_h_rsc_0_12_i_s_din_bfwt <= twiddle_h_rsc_0_12_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_ctrl (
  core_wen, twiddle_h_rsc_0_12_i_oswt, twiddle_h_rsc_0_12_i_biwt, twiddle_h_rsc_0_12_i_bdwt,
      twiddle_h_rsc_0_12_i_bcwt, twiddle_h_rsc_0_12_i_s_re_core_sct, twiddle_h_rsc_0_12_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_12_i_oswt;
  output twiddle_h_rsc_0_12_i_biwt;
  output twiddle_h_rsc_0_12_i_bdwt;
  input twiddle_h_rsc_0_12_i_bcwt;
  output twiddle_h_rsc_0_12_i_s_re_core_sct;
  input twiddle_h_rsc_0_12_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_12_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_12_i_bdwt = twiddle_h_rsc_0_12_i_oswt & core_wen;
  assign twiddle_h_rsc_0_12_i_biwt = twiddle_h_rsc_0_12_i_ogwt & twiddle_h_rsc_0_12_i_s_rrdy;
  assign twiddle_h_rsc_0_12_i_ogwt = twiddle_h_rsc_0_12_i_oswt & (~ twiddle_h_rsc_0_12_i_bcwt);
  assign twiddle_h_rsc_0_12_i_s_re_core_sct = twiddle_h_rsc_0_12_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp (
  clk, rst, twiddle_h_rsc_0_11_i_oswt, twiddle_h_rsc_0_11_i_wen_comp, twiddle_h_rsc_0_11_i_s_raddr_core,
      twiddle_h_rsc_0_11_i_s_din_mxwt, twiddle_h_rsc_0_11_i_biwt, twiddle_h_rsc_0_11_i_bdwt,
      twiddle_h_rsc_0_11_i_bcwt, twiddle_h_rsc_0_11_i_s_raddr, twiddle_h_rsc_0_11_i_s_raddr_core_sct,
      twiddle_h_rsc_0_11_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_11_i_oswt;
  output twiddle_h_rsc_0_11_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_11_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_11_i_s_din_mxwt;
  input twiddle_h_rsc_0_11_i_biwt;
  input twiddle_h_rsc_0_11_i_bdwt;
  output twiddle_h_rsc_0_11_i_bcwt;
  reg twiddle_h_rsc_0_11_i_bcwt;
  output [5:0] twiddle_h_rsc_0_11_i_s_raddr;
  input twiddle_h_rsc_0_11_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_11_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_11_i_s_din_bfwt;

  wire[4:0] butterFly2_11_tw_h_butterFly2_11_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_11_i_wen_comp = (~ twiddle_h_rsc_0_11_i_oswt) | twiddle_h_rsc_0_11_i_biwt
      | twiddle_h_rsc_0_11_i_bcwt;
  assign butterFly2_11_tw_h_butterFly2_11_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_11_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_11_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_11_i_s_raddr = {1'b0, butterFly2_11_tw_h_butterFly2_11_tw_h_and_nl};
  assign twiddle_h_rsc_0_11_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_11_i_s_din,
      twiddle_h_rsc_0_11_i_s_din_bfwt, twiddle_h_rsc_0_11_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_11_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_11_i_bcwt <= ~((~(twiddle_h_rsc_0_11_i_bcwt | twiddle_h_rsc_0_11_i_biwt))
          | twiddle_h_rsc_0_11_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_11_i_biwt ) begin
      twiddle_h_rsc_0_11_i_s_din_bfwt <= twiddle_h_rsc_0_11_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_ctrl (
  core_wen, twiddle_h_rsc_0_11_i_oswt, twiddle_h_rsc_0_11_i_biwt, twiddle_h_rsc_0_11_i_bdwt,
      twiddle_h_rsc_0_11_i_bcwt, twiddle_h_rsc_0_11_i_s_re_core_sct, twiddle_h_rsc_0_11_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_11_i_oswt;
  output twiddle_h_rsc_0_11_i_biwt;
  output twiddle_h_rsc_0_11_i_bdwt;
  input twiddle_h_rsc_0_11_i_bcwt;
  output twiddle_h_rsc_0_11_i_s_re_core_sct;
  input twiddle_h_rsc_0_11_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_11_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_11_i_bdwt = twiddle_h_rsc_0_11_i_oswt & core_wen;
  assign twiddle_h_rsc_0_11_i_biwt = twiddle_h_rsc_0_11_i_ogwt & twiddle_h_rsc_0_11_i_s_rrdy;
  assign twiddle_h_rsc_0_11_i_ogwt = twiddle_h_rsc_0_11_i_oswt & (~ twiddle_h_rsc_0_11_i_bcwt);
  assign twiddle_h_rsc_0_11_i_s_re_core_sct = twiddle_h_rsc_0_11_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp (
  clk, rst, twiddle_h_rsc_0_10_i_oswt, twiddle_h_rsc_0_10_i_wen_comp, twiddle_h_rsc_0_10_i_s_raddr_core,
      twiddle_h_rsc_0_10_i_s_din_mxwt, twiddle_h_rsc_0_10_i_biwt, twiddle_h_rsc_0_10_i_bdwt,
      twiddle_h_rsc_0_10_i_bcwt, twiddle_h_rsc_0_10_i_s_raddr, twiddle_h_rsc_0_10_i_s_raddr_core_sct,
      twiddle_h_rsc_0_10_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_10_i_oswt;
  output twiddle_h_rsc_0_10_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_10_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_10_i_s_din_mxwt;
  input twiddle_h_rsc_0_10_i_biwt;
  input twiddle_h_rsc_0_10_i_bdwt;
  output twiddle_h_rsc_0_10_i_bcwt;
  reg twiddle_h_rsc_0_10_i_bcwt;
  output [5:0] twiddle_h_rsc_0_10_i_s_raddr;
  input twiddle_h_rsc_0_10_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_10_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_10_i_s_din_bfwt;

  wire[4:0] butterFly2_10_tw_h_butterFly2_10_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_10_i_wen_comp = (~ twiddle_h_rsc_0_10_i_oswt) | twiddle_h_rsc_0_10_i_biwt
      | twiddle_h_rsc_0_10_i_bcwt;
  assign butterFly2_10_tw_h_butterFly2_10_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_10_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_10_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_10_i_s_raddr = {1'b0, butterFly2_10_tw_h_butterFly2_10_tw_h_and_nl};
  assign twiddle_h_rsc_0_10_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_10_i_s_din,
      twiddle_h_rsc_0_10_i_s_din_bfwt, twiddle_h_rsc_0_10_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_10_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_10_i_bcwt <= ~((~(twiddle_h_rsc_0_10_i_bcwt | twiddle_h_rsc_0_10_i_biwt))
          | twiddle_h_rsc_0_10_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_10_i_biwt ) begin
      twiddle_h_rsc_0_10_i_s_din_bfwt <= twiddle_h_rsc_0_10_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_ctrl (
  core_wen, twiddle_h_rsc_0_10_i_oswt, twiddle_h_rsc_0_10_i_biwt, twiddle_h_rsc_0_10_i_bdwt,
      twiddle_h_rsc_0_10_i_bcwt, twiddle_h_rsc_0_10_i_s_re_core_sct, twiddle_h_rsc_0_10_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_10_i_oswt;
  output twiddle_h_rsc_0_10_i_biwt;
  output twiddle_h_rsc_0_10_i_bdwt;
  input twiddle_h_rsc_0_10_i_bcwt;
  output twiddle_h_rsc_0_10_i_s_re_core_sct;
  input twiddle_h_rsc_0_10_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_10_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_10_i_bdwt = twiddle_h_rsc_0_10_i_oswt & core_wen;
  assign twiddle_h_rsc_0_10_i_biwt = twiddle_h_rsc_0_10_i_ogwt & twiddle_h_rsc_0_10_i_s_rrdy;
  assign twiddle_h_rsc_0_10_i_ogwt = twiddle_h_rsc_0_10_i_oswt & (~ twiddle_h_rsc_0_10_i_bcwt);
  assign twiddle_h_rsc_0_10_i_s_re_core_sct = twiddle_h_rsc_0_10_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp (
  clk, rst, twiddle_h_rsc_0_9_i_oswt, twiddle_h_rsc_0_9_i_wen_comp, twiddle_h_rsc_0_9_i_s_raddr_core,
      twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_9_i_biwt, twiddle_h_rsc_0_9_i_bdwt,
      twiddle_h_rsc_0_9_i_bcwt, twiddle_h_rsc_0_9_i_s_raddr, twiddle_h_rsc_0_9_i_s_raddr_core_sct,
      twiddle_h_rsc_0_9_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_9_i_oswt;
  output twiddle_h_rsc_0_9_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_9_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_9_i_s_din_mxwt;
  input twiddle_h_rsc_0_9_i_biwt;
  input twiddle_h_rsc_0_9_i_bdwt;
  output twiddle_h_rsc_0_9_i_bcwt;
  reg twiddle_h_rsc_0_9_i_bcwt;
  output [5:0] twiddle_h_rsc_0_9_i_s_raddr;
  input twiddle_h_rsc_0_9_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_9_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_9_i_s_din_bfwt;

  wire[4:0] butterFly2_9_tw_h_butterFly2_9_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_9_i_wen_comp = (~ twiddle_h_rsc_0_9_i_oswt) | twiddle_h_rsc_0_9_i_biwt
      | twiddle_h_rsc_0_9_i_bcwt;
  assign butterFly2_9_tw_h_butterFly2_9_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_9_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_9_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_9_i_s_raddr = {1'b0, butterFly2_9_tw_h_butterFly2_9_tw_h_and_nl};
  assign twiddle_h_rsc_0_9_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_9_i_s_din,
      twiddle_h_rsc_0_9_i_s_din_bfwt, twiddle_h_rsc_0_9_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_9_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_9_i_bcwt <= ~((~(twiddle_h_rsc_0_9_i_bcwt | twiddle_h_rsc_0_9_i_biwt))
          | twiddle_h_rsc_0_9_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_9_i_biwt ) begin
      twiddle_h_rsc_0_9_i_s_din_bfwt <= twiddle_h_rsc_0_9_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_ctrl (
  core_wen, twiddle_h_rsc_0_9_i_oswt, twiddle_h_rsc_0_9_i_biwt, twiddle_h_rsc_0_9_i_bdwt,
      twiddle_h_rsc_0_9_i_bcwt, twiddle_h_rsc_0_9_i_s_re_core_sct, twiddle_h_rsc_0_9_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_9_i_oswt;
  output twiddle_h_rsc_0_9_i_biwt;
  output twiddle_h_rsc_0_9_i_bdwt;
  input twiddle_h_rsc_0_9_i_bcwt;
  output twiddle_h_rsc_0_9_i_s_re_core_sct;
  input twiddle_h_rsc_0_9_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_9_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_9_i_bdwt = twiddle_h_rsc_0_9_i_oswt & core_wen;
  assign twiddle_h_rsc_0_9_i_biwt = twiddle_h_rsc_0_9_i_ogwt & twiddle_h_rsc_0_9_i_s_rrdy;
  assign twiddle_h_rsc_0_9_i_ogwt = twiddle_h_rsc_0_9_i_oswt & (~ twiddle_h_rsc_0_9_i_bcwt);
  assign twiddle_h_rsc_0_9_i_s_re_core_sct = twiddle_h_rsc_0_9_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp (
  clk, rst, twiddle_h_rsc_0_8_i_oswt, twiddle_h_rsc_0_8_i_wen_comp, twiddle_h_rsc_0_8_i_s_raddr_core,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_8_i_biwt, twiddle_h_rsc_0_8_i_bdwt,
      twiddle_h_rsc_0_8_i_bcwt, twiddle_h_rsc_0_8_i_s_raddr, twiddle_h_rsc_0_8_i_s_raddr_core_sct,
      twiddle_h_rsc_0_8_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_8_i_oswt;
  output twiddle_h_rsc_0_8_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_8_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_8_i_s_din_mxwt;
  input twiddle_h_rsc_0_8_i_biwt;
  input twiddle_h_rsc_0_8_i_bdwt;
  output twiddle_h_rsc_0_8_i_bcwt;
  reg twiddle_h_rsc_0_8_i_bcwt;
  output [5:0] twiddle_h_rsc_0_8_i_s_raddr;
  input twiddle_h_rsc_0_8_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_8_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_8_i_s_din_bfwt;

  wire[4:0] butterFly2_8_tw_h_butterFly2_8_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_8_i_wen_comp = (~ twiddle_h_rsc_0_8_i_oswt) | twiddle_h_rsc_0_8_i_biwt
      | twiddle_h_rsc_0_8_i_bcwt;
  assign butterFly2_8_tw_h_butterFly2_8_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_8_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_8_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_8_i_s_raddr = {1'b0, butterFly2_8_tw_h_butterFly2_8_tw_h_and_nl};
  assign twiddle_h_rsc_0_8_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_8_i_s_din,
      twiddle_h_rsc_0_8_i_s_din_bfwt, twiddle_h_rsc_0_8_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_8_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_8_i_bcwt <= ~((~(twiddle_h_rsc_0_8_i_bcwt | twiddle_h_rsc_0_8_i_biwt))
          | twiddle_h_rsc_0_8_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_8_i_biwt ) begin
      twiddle_h_rsc_0_8_i_s_din_bfwt <= twiddle_h_rsc_0_8_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_ctrl (
  core_wen, twiddle_h_rsc_0_8_i_oswt, twiddle_h_rsc_0_8_i_biwt, twiddle_h_rsc_0_8_i_bdwt,
      twiddle_h_rsc_0_8_i_bcwt, twiddle_h_rsc_0_8_i_s_re_core_sct, twiddle_h_rsc_0_8_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_8_i_oswt;
  output twiddle_h_rsc_0_8_i_biwt;
  output twiddle_h_rsc_0_8_i_bdwt;
  input twiddle_h_rsc_0_8_i_bcwt;
  output twiddle_h_rsc_0_8_i_s_re_core_sct;
  input twiddle_h_rsc_0_8_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_8_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_8_i_bdwt = twiddle_h_rsc_0_8_i_oswt & core_wen;
  assign twiddle_h_rsc_0_8_i_biwt = twiddle_h_rsc_0_8_i_ogwt & twiddle_h_rsc_0_8_i_s_rrdy;
  assign twiddle_h_rsc_0_8_i_ogwt = twiddle_h_rsc_0_8_i_oswt & (~ twiddle_h_rsc_0_8_i_bcwt);
  assign twiddle_h_rsc_0_8_i_s_re_core_sct = twiddle_h_rsc_0_8_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp (
  clk, rst, twiddle_h_rsc_0_7_i_oswt, twiddle_h_rsc_0_7_i_wen_comp, twiddle_h_rsc_0_7_i_s_raddr_core,
      twiddle_h_rsc_0_7_i_s_din_mxwt, twiddle_h_rsc_0_7_i_biwt, twiddle_h_rsc_0_7_i_bdwt,
      twiddle_h_rsc_0_7_i_bcwt, twiddle_h_rsc_0_7_i_s_raddr, twiddle_h_rsc_0_7_i_s_raddr_core_sct,
      twiddle_h_rsc_0_7_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_7_i_oswt;
  output twiddle_h_rsc_0_7_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_7_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_7_i_s_din_mxwt;
  input twiddle_h_rsc_0_7_i_biwt;
  input twiddle_h_rsc_0_7_i_bdwt;
  output twiddle_h_rsc_0_7_i_bcwt;
  reg twiddle_h_rsc_0_7_i_bcwt;
  output [5:0] twiddle_h_rsc_0_7_i_s_raddr;
  input twiddle_h_rsc_0_7_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_7_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_7_i_s_din_bfwt;

  wire[4:0] butterFly2_7_tw_h_butterFly2_7_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_7_i_wen_comp = (~ twiddle_h_rsc_0_7_i_oswt) | twiddle_h_rsc_0_7_i_biwt
      | twiddle_h_rsc_0_7_i_bcwt;
  assign butterFly2_7_tw_h_butterFly2_7_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_7_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_7_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_7_i_s_raddr = {1'b0, butterFly2_7_tw_h_butterFly2_7_tw_h_and_nl};
  assign twiddle_h_rsc_0_7_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_7_i_s_din,
      twiddle_h_rsc_0_7_i_s_din_bfwt, twiddle_h_rsc_0_7_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_7_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_7_i_bcwt <= ~((~(twiddle_h_rsc_0_7_i_bcwt | twiddle_h_rsc_0_7_i_biwt))
          | twiddle_h_rsc_0_7_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_7_i_biwt ) begin
      twiddle_h_rsc_0_7_i_s_din_bfwt <= twiddle_h_rsc_0_7_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_ctrl (
  core_wen, twiddle_h_rsc_0_7_i_oswt, twiddle_h_rsc_0_7_i_biwt, twiddle_h_rsc_0_7_i_bdwt,
      twiddle_h_rsc_0_7_i_bcwt, twiddle_h_rsc_0_7_i_s_re_core_sct, twiddle_h_rsc_0_7_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_7_i_oswt;
  output twiddle_h_rsc_0_7_i_biwt;
  output twiddle_h_rsc_0_7_i_bdwt;
  input twiddle_h_rsc_0_7_i_bcwt;
  output twiddle_h_rsc_0_7_i_s_re_core_sct;
  input twiddle_h_rsc_0_7_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_7_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_7_i_bdwt = twiddle_h_rsc_0_7_i_oswt & core_wen;
  assign twiddle_h_rsc_0_7_i_biwt = twiddle_h_rsc_0_7_i_ogwt & twiddle_h_rsc_0_7_i_s_rrdy;
  assign twiddle_h_rsc_0_7_i_ogwt = twiddle_h_rsc_0_7_i_oswt & (~ twiddle_h_rsc_0_7_i_bcwt);
  assign twiddle_h_rsc_0_7_i_s_re_core_sct = twiddle_h_rsc_0_7_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp (
  clk, rst, twiddle_h_rsc_0_6_i_oswt, twiddle_h_rsc_0_6_i_wen_comp, twiddle_h_rsc_0_6_i_s_raddr_core,
      twiddle_h_rsc_0_6_i_s_din_mxwt, twiddle_h_rsc_0_6_i_biwt, twiddle_h_rsc_0_6_i_bdwt,
      twiddle_h_rsc_0_6_i_bcwt, twiddle_h_rsc_0_6_i_s_raddr, twiddle_h_rsc_0_6_i_s_raddr_core_sct,
      twiddle_h_rsc_0_6_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_6_i_oswt;
  output twiddle_h_rsc_0_6_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_6_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_6_i_s_din_mxwt;
  input twiddle_h_rsc_0_6_i_biwt;
  input twiddle_h_rsc_0_6_i_bdwt;
  output twiddle_h_rsc_0_6_i_bcwt;
  reg twiddle_h_rsc_0_6_i_bcwt;
  output [5:0] twiddle_h_rsc_0_6_i_s_raddr;
  input twiddle_h_rsc_0_6_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_6_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_6_i_s_din_bfwt;

  wire[4:0] butterFly2_6_tw_h_butterFly2_6_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_6_i_wen_comp = (~ twiddle_h_rsc_0_6_i_oswt) | twiddle_h_rsc_0_6_i_biwt
      | twiddle_h_rsc_0_6_i_bcwt;
  assign butterFly2_6_tw_h_butterFly2_6_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_6_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_6_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_6_i_s_raddr = {1'b0, butterFly2_6_tw_h_butterFly2_6_tw_h_and_nl};
  assign twiddle_h_rsc_0_6_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_6_i_s_din,
      twiddle_h_rsc_0_6_i_s_din_bfwt, twiddle_h_rsc_0_6_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_6_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_6_i_bcwt <= ~((~(twiddle_h_rsc_0_6_i_bcwt | twiddle_h_rsc_0_6_i_biwt))
          | twiddle_h_rsc_0_6_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_6_i_biwt ) begin
      twiddle_h_rsc_0_6_i_s_din_bfwt <= twiddle_h_rsc_0_6_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_ctrl (
  core_wen, twiddle_h_rsc_0_6_i_oswt, twiddle_h_rsc_0_6_i_biwt, twiddle_h_rsc_0_6_i_bdwt,
      twiddle_h_rsc_0_6_i_bcwt, twiddle_h_rsc_0_6_i_s_re_core_sct, twiddle_h_rsc_0_6_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_6_i_oswt;
  output twiddle_h_rsc_0_6_i_biwt;
  output twiddle_h_rsc_0_6_i_bdwt;
  input twiddle_h_rsc_0_6_i_bcwt;
  output twiddle_h_rsc_0_6_i_s_re_core_sct;
  input twiddle_h_rsc_0_6_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_6_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_6_i_bdwt = twiddle_h_rsc_0_6_i_oswt & core_wen;
  assign twiddle_h_rsc_0_6_i_biwt = twiddle_h_rsc_0_6_i_ogwt & twiddle_h_rsc_0_6_i_s_rrdy;
  assign twiddle_h_rsc_0_6_i_ogwt = twiddle_h_rsc_0_6_i_oswt & (~ twiddle_h_rsc_0_6_i_bcwt);
  assign twiddle_h_rsc_0_6_i_s_re_core_sct = twiddle_h_rsc_0_6_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp (
  clk, rst, twiddle_h_rsc_0_5_i_oswt, twiddle_h_rsc_0_5_i_wen_comp, twiddle_h_rsc_0_5_i_s_raddr_core,
      twiddle_h_rsc_0_5_i_s_din_mxwt, twiddle_h_rsc_0_5_i_biwt, twiddle_h_rsc_0_5_i_bdwt,
      twiddle_h_rsc_0_5_i_bcwt, twiddle_h_rsc_0_5_i_s_raddr, twiddle_h_rsc_0_5_i_s_raddr_core_sct,
      twiddle_h_rsc_0_5_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_5_i_oswt;
  output twiddle_h_rsc_0_5_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_5_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_5_i_s_din_mxwt;
  input twiddle_h_rsc_0_5_i_biwt;
  input twiddle_h_rsc_0_5_i_bdwt;
  output twiddle_h_rsc_0_5_i_bcwt;
  reg twiddle_h_rsc_0_5_i_bcwt;
  output [5:0] twiddle_h_rsc_0_5_i_s_raddr;
  input twiddle_h_rsc_0_5_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_5_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_5_i_s_din_bfwt;

  wire[4:0] butterFly2_5_tw_h_butterFly2_5_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_5_i_wen_comp = (~ twiddle_h_rsc_0_5_i_oswt) | twiddle_h_rsc_0_5_i_biwt
      | twiddle_h_rsc_0_5_i_bcwt;
  assign butterFly2_5_tw_h_butterFly2_5_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_5_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_5_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_5_i_s_raddr = {1'b0, butterFly2_5_tw_h_butterFly2_5_tw_h_and_nl};
  assign twiddle_h_rsc_0_5_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_5_i_s_din,
      twiddle_h_rsc_0_5_i_s_din_bfwt, twiddle_h_rsc_0_5_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_5_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_5_i_bcwt <= ~((~(twiddle_h_rsc_0_5_i_bcwt | twiddle_h_rsc_0_5_i_biwt))
          | twiddle_h_rsc_0_5_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_5_i_biwt ) begin
      twiddle_h_rsc_0_5_i_s_din_bfwt <= twiddle_h_rsc_0_5_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_ctrl (
  core_wen, twiddle_h_rsc_0_5_i_oswt, twiddle_h_rsc_0_5_i_biwt, twiddle_h_rsc_0_5_i_bdwt,
      twiddle_h_rsc_0_5_i_bcwt, twiddle_h_rsc_0_5_i_s_re_core_sct, twiddle_h_rsc_0_5_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_5_i_oswt;
  output twiddle_h_rsc_0_5_i_biwt;
  output twiddle_h_rsc_0_5_i_bdwt;
  input twiddle_h_rsc_0_5_i_bcwt;
  output twiddle_h_rsc_0_5_i_s_re_core_sct;
  input twiddle_h_rsc_0_5_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_5_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_5_i_bdwt = twiddle_h_rsc_0_5_i_oswt & core_wen;
  assign twiddle_h_rsc_0_5_i_biwt = twiddle_h_rsc_0_5_i_ogwt & twiddle_h_rsc_0_5_i_s_rrdy;
  assign twiddle_h_rsc_0_5_i_ogwt = twiddle_h_rsc_0_5_i_oswt & (~ twiddle_h_rsc_0_5_i_bcwt);
  assign twiddle_h_rsc_0_5_i_s_re_core_sct = twiddle_h_rsc_0_5_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp (
  clk, rst, twiddle_h_rsc_0_4_i_oswt, twiddle_h_rsc_0_4_i_wen_comp, twiddle_h_rsc_0_4_i_s_raddr_core,
      twiddle_h_rsc_0_4_i_s_din_mxwt, twiddle_h_rsc_0_4_i_biwt, twiddle_h_rsc_0_4_i_bdwt,
      twiddle_h_rsc_0_4_i_bcwt, twiddle_h_rsc_0_4_i_s_raddr, twiddle_h_rsc_0_4_i_s_raddr_core_sct,
      twiddle_h_rsc_0_4_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_4_i_oswt;
  output twiddle_h_rsc_0_4_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_4_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_4_i_s_din_mxwt;
  input twiddle_h_rsc_0_4_i_biwt;
  input twiddle_h_rsc_0_4_i_bdwt;
  output twiddle_h_rsc_0_4_i_bcwt;
  reg twiddle_h_rsc_0_4_i_bcwt;
  output [5:0] twiddle_h_rsc_0_4_i_s_raddr;
  input twiddle_h_rsc_0_4_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_4_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_4_i_s_din_bfwt;

  wire[4:0] butterFly2_4_tw_h_butterFly2_4_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_4_i_wen_comp = (~ twiddle_h_rsc_0_4_i_oswt) | twiddle_h_rsc_0_4_i_biwt
      | twiddle_h_rsc_0_4_i_bcwt;
  assign butterFly2_4_tw_h_butterFly2_4_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_4_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_4_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_4_i_s_raddr = {1'b0, butterFly2_4_tw_h_butterFly2_4_tw_h_and_nl};
  assign twiddle_h_rsc_0_4_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_4_i_s_din,
      twiddle_h_rsc_0_4_i_s_din_bfwt, twiddle_h_rsc_0_4_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_4_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_4_i_bcwt <= ~((~(twiddle_h_rsc_0_4_i_bcwt | twiddle_h_rsc_0_4_i_biwt))
          | twiddle_h_rsc_0_4_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_4_i_biwt ) begin
      twiddle_h_rsc_0_4_i_s_din_bfwt <= twiddle_h_rsc_0_4_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_ctrl (
  core_wen, twiddle_h_rsc_0_4_i_oswt, twiddle_h_rsc_0_4_i_biwt, twiddle_h_rsc_0_4_i_bdwt,
      twiddle_h_rsc_0_4_i_bcwt, twiddle_h_rsc_0_4_i_s_re_core_sct, twiddle_h_rsc_0_4_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_4_i_oswt;
  output twiddle_h_rsc_0_4_i_biwt;
  output twiddle_h_rsc_0_4_i_bdwt;
  input twiddle_h_rsc_0_4_i_bcwt;
  output twiddle_h_rsc_0_4_i_s_re_core_sct;
  input twiddle_h_rsc_0_4_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_4_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_4_i_bdwt = twiddle_h_rsc_0_4_i_oswt & core_wen;
  assign twiddle_h_rsc_0_4_i_biwt = twiddle_h_rsc_0_4_i_ogwt & twiddle_h_rsc_0_4_i_s_rrdy;
  assign twiddle_h_rsc_0_4_i_ogwt = twiddle_h_rsc_0_4_i_oswt & (~ twiddle_h_rsc_0_4_i_bcwt);
  assign twiddle_h_rsc_0_4_i_s_re_core_sct = twiddle_h_rsc_0_4_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp (
  clk, rst, twiddle_h_rsc_0_3_i_oswt, twiddle_h_rsc_0_3_i_wen_comp, twiddle_h_rsc_0_3_i_s_raddr_core,
      twiddle_h_rsc_0_3_i_s_din_mxwt, twiddle_h_rsc_0_3_i_biwt, twiddle_h_rsc_0_3_i_bdwt,
      twiddle_h_rsc_0_3_i_bcwt, twiddle_h_rsc_0_3_i_s_raddr, twiddle_h_rsc_0_3_i_s_raddr_core_sct,
      twiddle_h_rsc_0_3_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_3_i_oswt;
  output twiddle_h_rsc_0_3_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_3_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_3_i_s_din_mxwt;
  input twiddle_h_rsc_0_3_i_biwt;
  input twiddle_h_rsc_0_3_i_bdwt;
  output twiddle_h_rsc_0_3_i_bcwt;
  reg twiddle_h_rsc_0_3_i_bcwt;
  output [5:0] twiddle_h_rsc_0_3_i_s_raddr;
  input twiddle_h_rsc_0_3_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_3_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_3_i_s_din_bfwt;

  wire[4:0] butterFly2_3_tw_h_butterFly2_3_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_3_i_wen_comp = (~ twiddle_h_rsc_0_3_i_oswt) | twiddle_h_rsc_0_3_i_biwt
      | twiddle_h_rsc_0_3_i_bcwt;
  assign butterFly2_3_tw_h_butterFly2_3_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_3_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_3_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_3_i_s_raddr = {1'b0, butterFly2_3_tw_h_butterFly2_3_tw_h_and_nl};
  assign twiddle_h_rsc_0_3_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_3_i_s_din,
      twiddle_h_rsc_0_3_i_s_din_bfwt, twiddle_h_rsc_0_3_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_3_i_bcwt <= ~((~(twiddle_h_rsc_0_3_i_bcwt | twiddle_h_rsc_0_3_i_biwt))
          | twiddle_h_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_3_i_biwt ) begin
      twiddle_h_rsc_0_3_i_s_din_bfwt <= twiddle_h_rsc_0_3_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_ctrl (
  core_wen, twiddle_h_rsc_0_3_i_oswt, twiddle_h_rsc_0_3_i_biwt, twiddle_h_rsc_0_3_i_bdwt,
      twiddle_h_rsc_0_3_i_bcwt, twiddle_h_rsc_0_3_i_s_re_core_sct, twiddle_h_rsc_0_3_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_3_i_oswt;
  output twiddle_h_rsc_0_3_i_biwt;
  output twiddle_h_rsc_0_3_i_bdwt;
  input twiddle_h_rsc_0_3_i_bcwt;
  output twiddle_h_rsc_0_3_i_s_re_core_sct;
  input twiddle_h_rsc_0_3_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_3_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_3_i_bdwt = twiddle_h_rsc_0_3_i_oswt & core_wen;
  assign twiddle_h_rsc_0_3_i_biwt = twiddle_h_rsc_0_3_i_ogwt & twiddle_h_rsc_0_3_i_s_rrdy;
  assign twiddle_h_rsc_0_3_i_ogwt = twiddle_h_rsc_0_3_i_oswt & (~ twiddle_h_rsc_0_3_i_bcwt);
  assign twiddle_h_rsc_0_3_i_s_re_core_sct = twiddle_h_rsc_0_3_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp (
  clk, rst, twiddle_h_rsc_0_2_i_oswt, twiddle_h_rsc_0_2_i_wen_comp, twiddle_h_rsc_0_2_i_s_raddr_core,
      twiddle_h_rsc_0_2_i_s_din_mxwt, twiddle_h_rsc_0_2_i_biwt, twiddle_h_rsc_0_2_i_bdwt,
      twiddle_h_rsc_0_2_i_bcwt, twiddle_h_rsc_0_2_i_s_raddr, twiddle_h_rsc_0_2_i_s_raddr_core_sct,
      twiddle_h_rsc_0_2_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_2_i_oswt;
  output twiddle_h_rsc_0_2_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_2_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_2_i_s_din_mxwt;
  input twiddle_h_rsc_0_2_i_biwt;
  input twiddle_h_rsc_0_2_i_bdwt;
  output twiddle_h_rsc_0_2_i_bcwt;
  reg twiddle_h_rsc_0_2_i_bcwt;
  output [5:0] twiddle_h_rsc_0_2_i_s_raddr;
  input twiddle_h_rsc_0_2_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_2_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_2_i_s_din_bfwt;

  wire[4:0] butterFly2_2_tw_h_butterFly2_2_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_2_i_wen_comp = (~ twiddle_h_rsc_0_2_i_oswt) | twiddle_h_rsc_0_2_i_biwt
      | twiddle_h_rsc_0_2_i_bcwt;
  assign butterFly2_2_tw_h_butterFly2_2_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_2_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_2_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_2_i_s_raddr = {1'b0, butterFly2_2_tw_h_butterFly2_2_tw_h_and_nl};
  assign twiddle_h_rsc_0_2_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_2_i_s_din,
      twiddle_h_rsc_0_2_i_s_din_bfwt, twiddle_h_rsc_0_2_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_2_i_bcwt <= ~((~(twiddle_h_rsc_0_2_i_bcwt | twiddle_h_rsc_0_2_i_biwt))
          | twiddle_h_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_2_i_biwt ) begin
      twiddle_h_rsc_0_2_i_s_din_bfwt <= twiddle_h_rsc_0_2_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_ctrl (
  core_wen, twiddle_h_rsc_0_2_i_oswt, twiddle_h_rsc_0_2_i_biwt, twiddle_h_rsc_0_2_i_bdwt,
      twiddle_h_rsc_0_2_i_bcwt, twiddle_h_rsc_0_2_i_s_re_core_sct, twiddle_h_rsc_0_2_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_2_i_oswt;
  output twiddle_h_rsc_0_2_i_biwt;
  output twiddle_h_rsc_0_2_i_bdwt;
  input twiddle_h_rsc_0_2_i_bcwt;
  output twiddle_h_rsc_0_2_i_s_re_core_sct;
  input twiddle_h_rsc_0_2_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_2_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_2_i_bdwt = twiddle_h_rsc_0_2_i_oswt & core_wen;
  assign twiddle_h_rsc_0_2_i_biwt = twiddle_h_rsc_0_2_i_ogwt & twiddle_h_rsc_0_2_i_s_rrdy;
  assign twiddle_h_rsc_0_2_i_ogwt = twiddle_h_rsc_0_2_i_oswt & (~ twiddle_h_rsc_0_2_i_bcwt);
  assign twiddle_h_rsc_0_2_i_s_re_core_sct = twiddle_h_rsc_0_2_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp (
  clk, rst, twiddle_h_rsc_0_1_i_oswt, twiddle_h_rsc_0_1_i_wen_comp, twiddle_h_rsc_0_1_i_s_raddr_core,
      twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_1_i_biwt, twiddle_h_rsc_0_1_i_bdwt,
      twiddle_h_rsc_0_1_i_bcwt, twiddle_h_rsc_0_1_i_s_raddr, twiddle_h_rsc_0_1_i_s_raddr_core_sct,
      twiddle_h_rsc_0_1_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_1_i_oswt;
  output twiddle_h_rsc_0_1_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_1_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_1_i_s_din_mxwt;
  input twiddle_h_rsc_0_1_i_biwt;
  input twiddle_h_rsc_0_1_i_bdwt;
  output twiddle_h_rsc_0_1_i_bcwt;
  reg twiddle_h_rsc_0_1_i_bcwt;
  output [5:0] twiddle_h_rsc_0_1_i_s_raddr;
  input twiddle_h_rsc_0_1_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_1_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_1_i_s_din_bfwt;

  wire[4:0] butterFly2_1_tw_h_butterFly2_1_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_1_i_wen_comp = (~ twiddle_h_rsc_0_1_i_oswt) | twiddle_h_rsc_0_1_i_biwt
      | twiddle_h_rsc_0_1_i_bcwt;
  assign butterFly2_1_tw_h_butterFly2_1_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_1_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_1_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_1_i_s_raddr = {1'b0, butterFly2_1_tw_h_butterFly2_1_tw_h_and_nl};
  assign twiddle_h_rsc_0_1_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_1_i_s_din,
      twiddle_h_rsc_0_1_i_s_din_bfwt, twiddle_h_rsc_0_1_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_1_i_bcwt <= ~((~(twiddle_h_rsc_0_1_i_bcwt | twiddle_h_rsc_0_1_i_biwt))
          | twiddle_h_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_1_i_biwt ) begin
      twiddle_h_rsc_0_1_i_s_din_bfwt <= twiddle_h_rsc_0_1_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_ctrl (
  core_wen, twiddle_h_rsc_0_1_i_oswt, twiddle_h_rsc_0_1_i_biwt, twiddle_h_rsc_0_1_i_bdwt,
      twiddle_h_rsc_0_1_i_bcwt, twiddle_h_rsc_0_1_i_s_re_core_sct, twiddle_h_rsc_0_1_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_1_i_oswt;
  output twiddle_h_rsc_0_1_i_biwt;
  output twiddle_h_rsc_0_1_i_bdwt;
  input twiddle_h_rsc_0_1_i_bcwt;
  output twiddle_h_rsc_0_1_i_s_re_core_sct;
  input twiddle_h_rsc_0_1_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_1_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_1_i_bdwt = twiddle_h_rsc_0_1_i_oswt & core_wen;
  assign twiddle_h_rsc_0_1_i_biwt = twiddle_h_rsc_0_1_i_ogwt & twiddle_h_rsc_0_1_i_s_rrdy;
  assign twiddle_h_rsc_0_1_i_ogwt = twiddle_h_rsc_0_1_i_oswt & (~ twiddle_h_rsc_0_1_i_bcwt);
  assign twiddle_h_rsc_0_1_i_s_re_core_sct = twiddle_h_rsc_0_1_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp (
  clk, rst, twiddle_h_rsc_0_0_i_oswt, twiddle_h_rsc_0_0_i_wen_comp, twiddle_h_rsc_0_0_i_s_raddr_core,
      twiddle_h_rsc_0_0_i_s_din_mxwt, twiddle_h_rsc_0_0_i_biwt, twiddle_h_rsc_0_0_i_bdwt,
      twiddle_h_rsc_0_0_i_bcwt, twiddle_h_rsc_0_0_i_s_raddr, twiddle_h_rsc_0_0_i_s_raddr_core_sct,
      twiddle_h_rsc_0_0_i_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_0_i_oswt;
  output twiddle_h_rsc_0_0_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_0_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_0_i_s_din_mxwt;
  input twiddle_h_rsc_0_0_i_biwt;
  input twiddle_h_rsc_0_0_i_bdwt;
  output twiddle_h_rsc_0_0_i_bcwt;
  reg twiddle_h_rsc_0_0_i_bcwt;
  output [5:0] twiddle_h_rsc_0_0_i_s_raddr;
  input twiddle_h_rsc_0_0_i_s_raddr_core_sct;
  input [31:0] twiddle_h_rsc_0_0_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsc_0_0_i_s_din_bfwt;

  wire[4:0] INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_0_i_wen_comp = (~ twiddle_h_rsc_0_0_i_oswt) | twiddle_h_rsc_0_0_i_biwt
      | twiddle_h_rsc_0_0_i_bcwt;
  assign INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_h_rsc_0_0_i_s_raddr_core[4:0]),
      twiddle_h_rsc_0_0_i_s_raddr_core_sct);
  assign twiddle_h_rsc_0_0_i_s_raddr = {1'b0, INNER_LOOP1_tw_h_INNER_LOOP1_tw_h_and_nl};
  assign twiddle_h_rsc_0_0_i_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsc_0_0_i_s_din,
      twiddle_h_rsc_0_0_i_s_din_bfwt, twiddle_h_rsc_0_0_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsc_0_0_i_bcwt <= ~((~(twiddle_h_rsc_0_0_i_bcwt | twiddle_h_rsc_0_0_i_biwt))
          | twiddle_h_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsc_0_0_i_biwt ) begin
      twiddle_h_rsc_0_0_i_s_din_bfwt <= twiddle_h_rsc_0_0_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_ctrl (
  core_wen, twiddle_h_rsc_0_0_i_oswt, twiddle_h_rsc_0_0_i_biwt, twiddle_h_rsc_0_0_i_bdwt,
      twiddle_h_rsc_0_0_i_bcwt, twiddle_h_rsc_0_0_i_s_re_core_sct, twiddle_h_rsc_0_0_i_s_rrdy
);
  input core_wen;
  input twiddle_h_rsc_0_0_i_oswt;
  output twiddle_h_rsc_0_0_i_biwt;
  output twiddle_h_rsc_0_0_i_bdwt;
  input twiddle_h_rsc_0_0_i_bcwt;
  output twiddle_h_rsc_0_0_i_s_re_core_sct;
  input twiddle_h_rsc_0_0_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_0_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_0_0_i_bdwt = twiddle_h_rsc_0_0_i_oswt & core_wen;
  assign twiddle_h_rsc_0_0_i_biwt = twiddle_h_rsc_0_0_i_ogwt & twiddle_h_rsc_0_0_i_s_rrdy;
  assign twiddle_h_rsc_0_0_i_ogwt = twiddle_h_rsc_0_0_i_oswt & (~ twiddle_h_rsc_0_0_i_bcwt);
  assign twiddle_h_rsc_0_0_i_s_re_core_sct = twiddle_h_rsc_0_0_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp (
  clk, rst, twiddle_rsc_0_15_i_oswt, twiddle_rsc_0_15_i_wen_comp, twiddle_rsc_0_15_i_s_raddr_core,
      twiddle_rsc_0_15_i_s_din_mxwt, twiddle_rsc_0_15_i_biwt, twiddle_rsc_0_15_i_bdwt,
      twiddle_rsc_0_15_i_bcwt, twiddle_rsc_0_15_i_s_raddr, twiddle_rsc_0_15_i_s_raddr_core_sct,
      twiddle_rsc_0_15_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_15_i_oswt;
  output twiddle_rsc_0_15_i_wen_comp;
  input [5:0] twiddle_rsc_0_15_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_15_i_s_din_mxwt;
  input twiddle_rsc_0_15_i_biwt;
  input twiddle_rsc_0_15_i_bdwt;
  output twiddle_rsc_0_15_i_bcwt;
  reg twiddle_rsc_0_15_i_bcwt;
  output [5:0] twiddle_rsc_0_15_i_s_raddr;
  input twiddle_rsc_0_15_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_15_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_15_i_s_din_bfwt;

  wire[4:0] butterFly2_15_tw_butterFly2_15_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_15_i_wen_comp = (~ twiddle_rsc_0_15_i_oswt) | twiddle_rsc_0_15_i_biwt
      | twiddle_rsc_0_15_i_bcwt;
  assign butterFly2_15_tw_butterFly2_15_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_15_i_s_raddr_core[4:0]),
      twiddle_rsc_0_15_i_s_raddr_core_sct);
  assign twiddle_rsc_0_15_i_s_raddr = {1'b0, butterFly2_15_tw_butterFly2_15_tw_and_nl};
  assign twiddle_rsc_0_15_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_15_i_s_din, twiddle_rsc_0_15_i_s_din_bfwt,
      twiddle_rsc_0_15_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_15_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_15_i_bcwt <= ~((~(twiddle_rsc_0_15_i_bcwt | twiddle_rsc_0_15_i_biwt))
          | twiddle_rsc_0_15_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_15_i_biwt ) begin
      twiddle_rsc_0_15_i_s_din_bfwt <= twiddle_rsc_0_15_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_ctrl (
  core_wen, twiddle_rsc_0_15_i_oswt, twiddle_rsc_0_15_i_biwt, twiddle_rsc_0_15_i_bdwt,
      twiddle_rsc_0_15_i_bcwt, twiddle_rsc_0_15_i_s_re_core_sct, twiddle_rsc_0_15_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_15_i_oswt;
  output twiddle_rsc_0_15_i_biwt;
  output twiddle_rsc_0_15_i_bdwt;
  input twiddle_rsc_0_15_i_bcwt;
  output twiddle_rsc_0_15_i_s_re_core_sct;
  input twiddle_rsc_0_15_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_15_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_15_i_bdwt = twiddle_rsc_0_15_i_oswt & core_wen;
  assign twiddle_rsc_0_15_i_biwt = twiddle_rsc_0_15_i_ogwt & twiddle_rsc_0_15_i_s_rrdy;
  assign twiddle_rsc_0_15_i_ogwt = twiddle_rsc_0_15_i_oswt & (~ twiddle_rsc_0_15_i_bcwt);
  assign twiddle_rsc_0_15_i_s_re_core_sct = twiddle_rsc_0_15_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp (
  clk, rst, twiddle_rsc_0_14_i_oswt, twiddle_rsc_0_14_i_wen_comp, twiddle_rsc_0_14_i_s_raddr_core,
      twiddle_rsc_0_14_i_s_din_mxwt, twiddle_rsc_0_14_i_biwt, twiddle_rsc_0_14_i_bdwt,
      twiddle_rsc_0_14_i_bcwt, twiddle_rsc_0_14_i_s_raddr, twiddle_rsc_0_14_i_s_raddr_core_sct,
      twiddle_rsc_0_14_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_14_i_oswt;
  output twiddle_rsc_0_14_i_wen_comp;
  input [5:0] twiddle_rsc_0_14_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_14_i_s_din_mxwt;
  input twiddle_rsc_0_14_i_biwt;
  input twiddle_rsc_0_14_i_bdwt;
  output twiddle_rsc_0_14_i_bcwt;
  reg twiddle_rsc_0_14_i_bcwt;
  output [5:0] twiddle_rsc_0_14_i_s_raddr;
  input twiddle_rsc_0_14_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_14_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_14_i_s_din_bfwt;

  wire[4:0] butterFly2_14_tw_butterFly2_14_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_14_i_wen_comp = (~ twiddle_rsc_0_14_i_oswt) | twiddle_rsc_0_14_i_biwt
      | twiddle_rsc_0_14_i_bcwt;
  assign butterFly2_14_tw_butterFly2_14_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_14_i_s_raddr_core[4:0]),
      twiddle_rsc_0_14_i_s_raddr_core_sct);
  assign twiddle_rsc_0_14_i_s_raddr = {1'b0, butterFly2_14_tw_butterFly2_14_tw_and_nl};
  assign twiddle_rsc_0_14_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_14_i_s_din, twiddle_rsc_0_14_i_s_din_bfwt,
      twiddle_rsc_0_14_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_14_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_14_i_bcwt <= ~((~(twiddle_rsc_0_14_i_bcwt | twiddle_rsc_0_14_i_biwt))
          | twiddle_rsc_0_14_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_14_i_biwt ) begin
      twiddle_rsc_0_14_i_s_din_bfwt <= twiddle_rsc_0_14_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_ctrl (
  core_wen, twiddle_rsc_0_14_i_oswt, twiddle_rsc_0_14_i_biwt, twiddle_rsc_0_14_i_bdwt,
      twiddle_rsc_0_14_i_bcwt, twiddle_rsc_0_14_i_s_re_core_sct, twiddle_rsc_0_14_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_14_i_oswt;
  output twiddle_rsc_0_14_i_biwt;
  output twiddle_rsc_0_14_i_bdwt;
  input twiddle_rsc_0_14_i_bcwt;
  output twiddle_rsc_0_14_i_s_re_core_sct;
  input twiddle_rsc_0_14_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_14_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_14_i_bdwt = twiddle_rsc_0_14_i_oswt & core_wen;
  assign twiddle_rsc_0_14_i_biwt = twiddle_rsc_0_14_i_ogwt & twiddle_rsc_0_14_i_s_rrdy;
  assign twiddle_rsc_0_14_i_ogwt = twiddle_rsc_0_14_i_oswt & (~ twiddle_rsc_0_14_i_bcwt);
  assign twiddle_rsc_0_14_i_s_re_core_sct = twiddle_rsc_0_14_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp (
  clk, rst, twiddle_rsc_0_13_i_oswt, twiddle_rsc_0_13_i_wen_comp, twiddle_rsc_0_13_i_s_raddr_core,
      twiddle_rsc_0_13_i_s_din_mxwt, twiddle_rsc_0_13_i_biwt, twiddle_rsc_0_13_i_bdwt,
      twiddle_rsc_0_13_i_bcwt, twiddle_rsc_0_13_i_s_raddr, twiddle_rsc_0_13_i_s_raddr_core_sct,
      twiddle_rsc_0_13_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_13_i_oswt;
  output twiddle_rsc_0_13_i_wen_comp;
  input [5:0] twiddle_rsc_0_13_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_13_i_s_din_mxwt;
  input twiddle_rsc_0_13_i_biwt;
  input twiddle_rsc_0_13_i_bdwt;
  output twiddle_rsc_0_13_i_bcwt;
  reg twiddle_rsc_0_13_i_bcwt;
  output [5:0] twiddle_rsc_0_13_i_s_raddr;
  input twiddle_rsc_0_13_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_13_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_13_i_s_din_bfwt;

  wire[4:0] butterFly2_13_tw_butterFly2_13_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_13_i_wen_comp = (~ twiddle_rsc_0_13_i_oswt) | twiddle_rsc_0_13_i_biwt
      | twiddle_rsc_0_13_i_bcwt;
  assign butterFly2_13_tw_butterFly2_13_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_13_i_s_raddr_core[4:0]),
      twiddle_rsc_0_13_i_s_raddr_core_sct);
  assign twiddle_rsc_0_13_i_s_raddr = {1'b0, butterFly2_13_tw_butterFly2_13_tw_and_nl};
  assign twiddle_rsc_0_13_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_13_i_s_din, twiddle_rsc_0_13_i_s_din_bfwt,
      twiddle_rsc_0_13_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_13_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_13_i_bcwt <= ~((~(twiddle_rsc_0_13_i_bcwt | twiddle_rsc_0_13_i_biwt))
          | twiddle_rsc_0_13_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_13_i_biwt ) begin
      twiddle_rsc_0_13_i_s_din_bfwt <= twiddle_rsc_0_13_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_ctrl (
  core_wen, twiddle_rsc_0_13_i_oswt, twiddle_rsc_0_13_i_biwt, twiddle_rsc_0_13_i_bdwt,
      twiddle_rsc_0_13_i_bcwt, twiddle_rsc_0_13_i_s_re_core_sct, twiddle_rsc_0_13_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_13_i_oswt;
  output twiddle_rsc_0_13_i_biwt;
  output twiddle_rsc_0_13_i_bdwt;
  input twiddle_rsc_0_13_i_bcwt;
  output twiddle_rsc_0_13_i_s_re_core_sct;
  input twiddle_rsc_0_13_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_13_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_13_i_bdwt = twiddle_rsc_0_13_i_oswt & core_wen;
  assign twiddle_rsc_0_13_i_biwt = twiddle_rsc_0_13_i_ogwt & twiddle_rsc_0_13_i_s_rrdy;
  assign twiddle_rsc_0_13_i_ogwt = twiddle_rsc_0_13_i_oswt & (~ twiddle_rsc_0_13_i_bcwt);
  assign twiddle_rsc_0_13_i_s_re_core_sct = twiddle_rsc_0_13_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp (
  clk, rst, twiddle_rsc_0_12_i_oswt, twiddle_rsc_0_12_i_wen_comp, twiddle_rsc_0_12_i_s_raddr_core,
      twiddle_rsc_0_12_i_s_din_mxwt, twiddle_rsc_0_12_i_biwt, twiddle_rsc_0_12_i_bdwt,
      twiddle_rsc_0_12_i_bcwt, twiddle_rsc_0_12_i_s_raddr, twiddle_rsc_0_12_i_s_raddr_core_sct,
      twiddle_rsc_0_12_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_12_i_oswt;
  output twiddle_rsc_0_12_i_wen_comp;
  input [5:0] twiddle_rsc_0_12_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_12_i_s_din_mxwt;
  input twiddle_rsc_0_12_i_biwt;
  input twiddle_rsc_0_12_i_bdwt;
  output twiddle_rsc_0_12_i_bcwt;
  reg twiddle_rsc_0_12_i_bcwt;
  output [5:0] twiddle_rsc_0_12_i_s_raddr;
  input twiddle_rsc_0_12_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_12_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_12_i_s_din_bfwt;

  wire[4:0] butterFly2_12_tw_butterFly2_12_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_12_i_wen_comp = (~ twiddle_rsc_0_12_i_oswt) | twiddle_rsc_0_12_i_biwt
      | twiddle_rsc_0_12_i_bcwt;
  assign butterFly2_12_tw_butterFly2_12_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_12_i_s_raddr_core[4:0]),
      twiddle_rsc_0_12_i_s_raddr_core_sct);
  assign twiddle_rsc_0_12_i_s_raddr = {1'b0, butterFly2_12_tw_butterFly2_12_tw_and_nl};
  assign twiddle_rsc_0_12_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_12_i_s_din, twiddle_rsc_0_12_i_s_din_bfwt,
      twiddle_rsc_0_12_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_12_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_12_i_bcwt <= ~((~(twiddle_rsc_0_12_i_bcwt | twiddle_rsc_0_12_i_biwt))
          | twiddle_rsc_0_12_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_12_i_biwt ) begin
      twiddle_rsc_0_12_i_s_din_bfwt <= twiddle_rsc_0_12_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_ctrl (
  core_wen, twiddle_rsc_0_12_i_oswt, twiddle_rsc_0_12_i_biwt, twiddle_rsc_0_12_i_bdwt,
      twiddle_rsc_0_12_i_bcwt, twiddle_rsc_0_12_i_s_re_core_sct, twiddle_rsc_0_12_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_12_i_oswt;
  output twiddle_rsc_0_12_i_biwt;
  output twiddle_rsc_0_12_i_bdwt;
  input twiddle_rsc_0_12_i_bcwt;
  output twiddle_rsc_0_12_i_s_re_core_sct;
  input twiddle_rsc_0_12_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_12_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_12_i_bdwt = twiddle_rsc_0_12_i_oswt & core_wen;
  assign twiddle_rsc_0_12_i_biwt = twiddle_rsc_0_12_i_ogwt & twiddle_rsc_0_12_i_s_rrdy;
  assign twiddle_rsc_0_12_i_ogwt = twiddle_rsc_0_12_i_oswt & (~ twiddle_rsc_0_12_i_bcwt);
  assign twiddle_rsc_0_12_i_s_re_core_sct = twiddle_rsc_0_12_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp (
  clk, rst, twiddle_rsc_0_11_i_oswt, twiddle_rsc_0_11_i_wen_comp, twiddle_rsc_0_11_i_s_raddr_core,
      twiddle_rsc_0_11_i_s_din_mxwt, twiddle_rsc_0_11_i_biwt, twiddle_rsc_0_11_i_bdwt,
      twiddle_rsc_0_11_i_bcwt, twiddle_rsc_0_11_i_s_raddr, twiddle_rsc_0_11_i_s_raddr_core_sct,
      twiddle_rsc_0_11_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_11_i_oswt;
  output twiddle_rsc_0_11_i_wen_comp;
  input [5:0] twiddle_rsc_0_11_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_11_i_s_din_mxwt;
  input twiddle_rsc_0_11_i_biwt;
  input twiddle_rsc_0_11_i_bdwt;
  output twiddle_rsc_0_11_i_bcwt;
  reg twiddle_rsc_0_11_i_bcwt;
  output [5:0] twiddle_rsc_0_11_i_s_raddr;
  input twiddle_rsc_0_11_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_11_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_11_i_s_din_bfwt;

  wire[4:0] butterFly2_11_tw_butterFly2_11_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_11_i_wen_comp = (~ twiddle_rsc_0_11_i_oswt) | twiddle_rsc_0_11_i_biwt
      | twiddle_rsc_0_11_i_bcwt;
  assign butterFly2_11_tw_butterFly2_11_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_11_i_s_raddr_core[4:0]),
      twiddle_rsc_0_11_i_s_raddr_core_sct);
  assign twiddle_rsc_0_11_i_s_raddr = {1'b0, butterFly2_11_tw_butterFly2_11_tw_and_nl};
  assign twiddle_rsc_0_11_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_11_i_s_din, twiddle_rsc_0_11_i_s_din_bfwt,
      twiddle_rsc_0_11_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_11_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_11_i_bcwt <= ~((~(twiddle_rsc_0_11_i_bcwt | twiddle_rsc_0_11_i_biwt))
          | twiddle_rsc_0_11_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_11_i_biwt ) begin
      twiddle_rsc_0_11_i_s_din_bfwt <= twiddle_rsc_0_11_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_ctrl (
  core_wen, twiddle_rsc_0_11_i_oswt, twiddle_rsc_0_11_i_biwt, twiddle_rsc_0_11_i_bdwt,
      twiddle_rsc_0_11_i_bcwt, twiddle_rsc_0_11_i_s_re_core_sct, twiddle_rsc_0_11_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_11_i_oswt;
  output twiddle_rsc_0_11_i_biwt;
  output twiddle_rsc_0_11_i_bdwt;
  input twiddle_rsc_0_11_i_bcwt;
  output twiddle_rsc_0_11_i_s_re_core_sct;
  input twiddle_rsc_0_11_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_11_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_11_i_bdwt = twiddle_rsc_0_11_i_oswt & core_wen;
  assign twiddle_rsc_0_11_i_biwt = twiddle_rsc_0_11_i_ogwt & twiddle_rsc_0_11_i_s_rrdy;
  assign twiddle_rsc_0_11_i_ogwt = twiddle_rsc_0_11_i_oswt & (~ twiddle_rsc_0_11_i_bcwt);
  assign twiddle_rsc_0_11_i_s_re_core_sct = twiddle_rsc_0_11_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp (
  clk, rst, twiddle_rsc_0_10_i_oswt, twiddle_rsc_0_10_i_wen_comp, twiddle_rsc_0_10_i_s_raddr_core,
      twiddle_rsc_0_10_i_s_din_mxwt, twiddle_rsc_0_10_i_biwt, twiddle_rsc_0_10_i_bdwt,
      twiddle_rsc_0_10_i_bcwt, twiddle_rsc_0_10_i_s_raddr, twiddle_rsc_0_10_i_s_raddr_core_sct,
      twiddle_rsc_0_10_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_10_i_oswt;
  output twiddle_rsc_0_10_i_wen_comp;
  input [5:0] twiddle_rsc_0_10_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_10_i_s_din_mxwt;
  input twiddle_rsc_0_10_i_biwt;
  input twiddle_rsc_0_10_i_bdwt;
  output twiddle_rsc_0_10_i_bcwt;
  reg twiddle_rsc_0_10_i_bcwt;
  output [5:0] twiddle_rsc_0_10_i_s_raddr;
  input twiddle_rsc_0_10_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_10_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_10_i_s_din_bfwt;

  wire[4:0] butterFly2_10_tw_butterFly2_10_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_10_i_wen_comp = (~ twiddle_rsc_0_10_i_oswt) | twiddle_rsc_0_10_i_biwt
      | twiddle_rsc_0_10_i_bcwt;
  assign butterFly2_10_tw_butterFly2_10_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_10_i_s_raddr_core[4:0]),
      twiddle_rsc_0_10_i_s_raddr_core_sct);
  assign twiddle_rsc_0_10_i_s_raddr = {1'b0, butterFly2_10_tw_butterFly2_10_tw_and_nl};
  assign twiddle_rsc_0_10_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_10_i_s_din, twiddle_rsc_0_10_i_s_din_bfwt,
      twiddle_rsc_0_10_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_10_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_10_i_bcwt <= ~((~(twiddle_rsc_0_10_i_bcwt | twiddle_rsc_0_10_i_biwt))
          | twiddle_rsc_0_10_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_10_i_biwt ) begin
      twiddle_rsc_0_10_i_s_din_bfwt <= twiddle_rsc_0_10_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_ctrl (
  core_wen, twiddle_rsc_0_10_i_oswt, twiddle_rsc_0_10_i_biwt, twiddle_rsc_0_10_i_bdwt,
      twiddle_rsc_0_10_i_bcwt, twiddle_rsc_0_10_i_s_re_core_sct, twiddle_rsc_0_10_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_10_i_oswt;
  output twiddle_rsc_0_10_i_biwt;
  output twiddle_rsc_0_10_i_bdwt;
  input twiddle_rsc_0_10_i_bcwt;
  output twiddle_rsc_0_10_i_s_re_core_sct;
  input twiddle_rsc_0_10_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_10_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_10_i_bdwt = twiddle_rsc_0_10_i_oswt & core_wen;
  assign twiddle_rsc_0_10_i_biwt = twiddle_rsc_0_10_i_ogwt & twiddle_rsc_0_10_i_s_rrdy;
  assign twiddle_rsc_0_10_i_ogwt = twiddle_rsc_0_10_i_oswt & (~ twiddle_rsc_0_10_i_bcwt);
  assign twiddle_rsc_0_10_i_s_re_core_sct = twiddle_rsc_0_10_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp (
  clk, rst, twiddle_rsc_0_9_i_oswt, twiddle_rsc_0_9_i_wen_comp, twiddle_rsc_0_9_i_s_raddr_core,
      twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_9_i_biwt, twiddle_rsc_0_9_i_bdwt,
      twiddle_rsc_0_9_i_bcwt, twiddle_rsc_0_9_i_s_raddr, twiddle_rsc_0_9_i_s_raddr_core_sct,
      twiddle_rsc_0_9_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_9_i_oswt;
  output twiddle_rsc_0_9_i_wen_comp;
  input [5:0] twiddle_rsc_0_9_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_9_i_s_din_mxwt;
  input twiddle_rsc_0_9_i_biwt;
  input twiddle_rsc_0_9_i_bdwt;
  output twiddle_rsc_0_9_i_bcwt;
  reg twiddle_rsc_0_9_i_bcwt;
  output [5:0] twiddle_rsc_0_9_i_s_raddr;
  input twiddle_rsc_0_9_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_9_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_9_i_s_din_bfwt;

  wire[4:0] butterFly2_9_tw_butterFly2_9_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_9_i_wen_comp = (~ twiddle_rsc_0_9_i_oswt) | twiddle_rsc_0_9_i_biwt
      | twiddle_rsc_0_9_i_bcwt;
  assign butterFly2_9_tw_butterFly2_9_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_9_i_s_raddr_core[4:0]),
      twiddle_rsc_0_9_i_s_raddr_core_sct);
  assign twiddle_rsc_0_9_i_s_raddr = {1'b0, butterFly2_9_tw_butterFly2_9_tw_and_nl};
  assign twiddle_rsc_0_9_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_9_i_s_din, twiddle_rsc_0_9_i_s_din_bfwt,
      twiddle_rsc_0_9_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_9_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_9_i_bcwt <= ~((~(twiddle_rsc_0_9_i_bcwt | twiddle_rsc_0_9_i_biwt))
          | twiddle_rsc_0_9_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_9_i_biwt ) begin
      twiddle_rsc_0_9_i_s_din_bfwt <= twiddle_rsc_0_9_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_ctrl (
  core_wen, twiddle_rsc_0_9_i_oswt, twiddle_rsc_0_9_i_biwt, twiddle_rsc_0_9_i_bdwt,
      twiddle_rsc_0_9_i_bcwt, twiddle_rsc_0_9_i_s_re_core_sct, twiddle_rsc_0_9_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_9_i_oswt;
  output twiddle_rsc_0_9_i_biwt;
  output twiddle_rsc_0_9_i_bdwt;
  input twiddle_rsc_0_9_i_bcwt;
  output twiddle_rsc_0_9_i_s_re_core_sct;
  input twiddle_rsc_0_9_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_9_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_9_i_bdwt = twiddle_rsc_0_9_i_oswt & core_wen;
  assign twiddle_rsc_0_9_i_biwt = twiddle_rsc_0_9_i_ogwt & twiddle_rsc_0_9_i_s_rrdy;
  assign twiddle_rsc_0_9_i_ogwt = twiddle_rsc_0_9_i_oswt & (~ twiddle_rsc_0_9_i_bcwt);
  assign twiddle_rsc_0_9_i_s_re_core_sct = twiddle_rsc_0_9_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp (
  clk, rst, twiddle_rsc_0_8_i_oswt, twiddle_rsc_0_8_i_wen_comp, twiddle_rsc_0_8_i_s_raddr_core,
      twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_8_i_biwt, twiddle_rsc_0_8_i_bdwt,
      twiddle_rsc_0_8_i_bcwt, twiddle_rsc_0_8_i_s_raddr, twiddle_rsc_0_8_i_s_raddr_core_sct,
      twiddle_rsc_0_8_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_8_i_oswt;
  output twiddle_rsc_0_8_i_wen_comp;
  input [5:0] twiddle_rsc_0_8_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_8_i_s_din_mxwt;
  input twiddle_rsc_0_8_i_biwt;
  input twiddle_rsc_0_8_i_bdwt;
  output twiddle_rsc_0_8_i_bcwt;
  reg twiddle_rsc_0_8_i_bcwt;
  output [5:0] twiddle_rsc_0_8_i_s_raddr;
  input twiddle_rsc_0_8_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_8_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_8_i_s_din_bfwt;

  wire[4:0] butterFly2_8_tw_butterFly2_8_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_8_i_wen_comp = (~ twiddle_rsc_0_8_i_oswt) | twiddle_rsc_0_8_i_biwt
      | twiddle_rsc_0_8_i_bcwt;
  assign butterFly2_8_tw_butterFly2_8_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_8_i_s_raddr_core[4:0]),
      twiddle_rsc_0_8_i_s_raddr_core_sct);
  assign twiddle_rsc_0_8_i_s_raddr = {1'b0, butterFly2_8_tw_butterFly2_8_tw_and_nl};
  assign twiddle_rsc_0_8_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_8_i_s_din, twiddle_rsc_0_8_i_s_din_bfwt,
      twiddle_rsc_0_8_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_8_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_8_i_bcwt <= ~((~(twiddle_rsc_0_8_i_bcwt | twiddle_rsc_0_8_i_biwt))
          | twiddle_rsc_0_8_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_8_i_biwt ) begin
      twiddle_rsc_0_8_i_s_din_bfwt <= twiddle_rsc_0_8_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_ctrl (
  core_wen, twiddle_rsc_0_8_i_oswt, twiddle_rsc_0_8_i_biwt, twiddle_rsc_0_8_i_bdwt,
      twiddle_rsc_0_8_i_bcwt, twiddle_rsc_0_8_i_s_re_core_sct, twiddle_rsc_0_8_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_8_i_oswt;
  output twiddle_rsc_0_8_i_biwt;
  output twiddle_rsc_0_8_i_bdwt;
  input twiddle_rsc_0_8_i_bcwt;
  output twiddle_rsc_0_8_i_s_re_core_sct;
  input twiddle_rsc_0_8_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_8_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_8_i_bdwt = twiddle_rsc_0_8_i_oswt & core_wen;
  assign twiddle_rsc_0_8_i_biwt = twiddle_rsc_0_8_i_ogwt & twiddle_rsc_0_8_i_s_rrdy;
  assign twiddle_rsc_0_8_i_ogwt = twiddle_rsc_0_8_i_oswt & (~ twiddle_rsc_0_8_i_bcwt);
  assign twiddle_rsc_0_8_i_s_re_core_sct = twiddle_rsc_0_8_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp (
  clk, rst, twiddle_rsc_0_7_i_oswt, twiddle_rsc_0_7_i_wen_comp, twiddle_rsc_0_7_i_s_raddr_core,
      twiddle_rsc_0_7_i_s_din_mxwt, twiddle_rsc_0_7_i_biwt, twiddle_rsc_0_7_i_bdwt,
      twiddle_rsc_0_7_i_bcwt, twiddle_rsc_0_7_i_s_raddr, twiddle_rsc_0_7_i_s_raddr_core_sct,
      twiddle_rsc_0_7_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_7_i_oswt;
  output twiddle_rsc_0_7_i_wen_comp;
  input [5:0] twiddle_rsc_0_7_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_7_i_s_din_mxwt;
  input twiddle_rsc_0_7_i_biwt;
  input twiddle_rsc_0_7_i_bdwt;
  output twiddle_rsc_0_7_i_bcwt;
  reg twiddle_rsc_0_7_i_bcwt;
  output [5:0] twiddle_rsc_0_7_i_s_raddr;
  input twiddle_rsc_0_7_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_7_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_7_i_s_din_bfwt;

  wire[4:0] butterFly2_7_tw_butterFly2_7_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_7_i_wen_comp = (~ twiddle_rsc_0_7_i_oswt) | twiddle_rsc_0_7_i_biwt
      | twiddle_rsc_0_7_i_bcwt;
  assign butterFly2_7_tw_butterFly2_7_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_7_i_s_raddr_core[4:0]),
      twiddle_rsc_0_7_i_s_raddr_core_sct);
  assign twiddle_rsc_0_7_i_s_raddr = {1'b0, butterFly2_7_tw_butterFly2_7_tw_and_nl};
  assign twiddle_rsc_0_7_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_7_i_s_din, twiddle_rsc_0_7_i_s_din_bfwt,
      twiddle_rsc_0_7_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_7_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_7_i_bcwt <= ~((~(twiddle_rsc_0_7_i_bcwt | twiddle_rsc_0_7_i_biwt))
          | twiddle_rsc_0_7_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_7_i_biwt ) begin
      twiddle_rsc_0_7_i_s_din_bfwt <= twiddle_rsc_0_7_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_ctrl (
  core_wen, twiddle_rsc_0_7_i_oswt, twiddle_rsc_0_7_i_biwt, twiddle_rsc_0_7_i_bdwt,
      twiddle_rsc_0_7_i_bcwt, twiddle_rsc_0_7_i_s_re_core_sct, twiddle_rsc_0_7_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_7_i_oswt;
  output twiddle_rsc_0_7_i_biwt;
  output twiddle_rsc_0_7_i_bdwt;
  input twiddle_rsc_0_7_i_bcwt;
  output twiddle_rsc_0_7_i_s_re_core_sct;
  input twiddle_rsc_0_7_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_7_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_7_i_bdwt = twiddle_rsc_0_7_i_oswt & core_wen;
  assign twiddle_rsc_0_7_i_biwt = twiddle_rsc_0_7_i_ogwt & twiddle_rsc_0_7_i_s_rrdy;
  assign twiddle_rsc_0_7_i_ogwt = twiddle_rsc_0_7_i_oswt & (~ twiddle_rsc_0_7_i_bcwt);
  assign twiddle_rsc_0_7_i_s_re_core_sct = twiddle_rsc_0_7_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp (
  clk, rst, twiddle_rsc_0_6_i_oswt, twiddle_rsc_0_6_i_wen_comp, twiddle_rsc_0_6_i_s_raddr_core,
      twiddle_rsc_0_6_i_s_din_mxwt, twiddle_rsc_0_6_i_biwt, twiddle_rsc_0_6_i_bdwt,
      twiddle_rsc_0_6_i_bcwt, twiddle_rsc_0_6_i_s_raddr, twiddle_rsc_0_6_i_s_raddr_core_sct,
      twiddle_rsc_0_6_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_6_i_oswt;
  output twiddle_rsc_0_6_i_wen_comp;
  input [5:0] twiddle_rsc_0_6_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_6_i_s_din_mxwt;
  input twiddle_rsc_0_6_i_biwt;
  input twiddle_rsc_0_6_i_bdwt;
  output twiddle_rsc_0_6_i_bcwt;
  reg twiddle_rsc_0_6_i_bcwt;
  output [5:0] twiddle_rsc_0_6_i_s_raddr;
  input twiddle_rsc_0_6_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_6_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_6_i_s_din_bfwt;

  wire[4:0] butterFly2_6_tw_butterFly2_6_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_6_i_wen_comp = (~ twiddle_rsc_0_6_i_oswt) | twiddle_rsc_0_6_i_biwt
      | twiddle_rsc_0_6_i_bcwt;
  assign butterFly2_6_tw_butterFly2_6_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_6_i_s_raddr_core[4:0]),
      twiddle_rsc_0_6_i_s_raddr_core_sct);
  assign twiddle_rsc_0_6_i_s_raddr = {1'b0, butterFly2_6_tw_butterFly2_6_tw_and_nl};
  assign twiddle_rsc_0_6_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_6_i_s_din, twiddle_rsc_0_6_i_s_din_bfwt,
      twiddle_rsc_0_6_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_6_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_6_i_bcwt <= ~((~(twiddle_rsc_0_6_i_bcwt | twiddle_rsc_0_6_i_biwt))
          | twiddle_rsc_0_6_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_6_i_biwt ) begin
      twiddle_rsc_0_6_i_s_din_bfwt <= twiddle_rsc_0_6_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_ctrl (
  core_wen, twiddle_rsc_0_6_i_oswt, twiddle_rsc_0_6_i_biwt, twiddle_rsc_0_6_i_bdwt,
      twiddle_rsc_0_6_i_bcwt, twiddle_rsc_0_6_i_s_re_core_sct, twiddle_rsc_0_6_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_6_i_oswt;
  output twiddle_rsc_0_6_i_biwt;
  output twiddle_rsc_0_6_i_bdwt;
  input twiddle_rsc_0_6_i_bcwt;
  output twiddle_rsc_0_6_i_s_re_core_sct;
  input twiddle_rsc_0_6_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_6_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_6_i_bdwt = twiddle_rsc_0_6_i_oswt & core_wen;
  assign twiddle_rsc_0_6_i_biwt = twiddle_rsc_0_6_i_ogwt & twiddle_rsc_0_6_i_s_rrdy;
  assign twiddle_rsc_0_6_i_ogwt = twiddle_rsc_0_6_i_oswt & (~ twiddle_rsc_0_6_i_bcwt);
  assign twiddle_rsc_0_6_i_s_re_core_sct = twiddle_rsc_0_6_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp (
  clk, rst, twiddle_rsc_0_5_i_oswt, twiddle_rsc_0_5_i_wen_comp, twiddle_rsc_0_5_i_s_raddr_core,
      twiddle_rsc_0_5_i_s_din_mxwt, twiddle_rsc_0_5_i_biwt, twiddle_rsc_0_5_i_bdwt,
      twiddle_rsc_0_5_i_bcwt, twiddle_rsc_0_5_i_s_raddr, twiddle_rsc_0_5_i_s_raddr_core_sct,
      twiddle_rsc_0_5_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_5_i_oswt;
  output twiddle_rsc_0_5_i_wen_comp;
  input [5:0] twiddle_rsc_0_5_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_5_i_s_din_mxwt;
  input twiddle_rsc_0_5_i_biwt;
  input twiddle_rsc_0_5_i_bdwt;
  output twiddle_rsc_0_5_i_bcwt;
  reg twiddle_rsc_0_5_i_bcwt;
  output [5:0] twiddle_rsc_0_5_i_s_raddr;
  input twiddle_rsc_0_5_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_5_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_5_i_s_din_bfwt;

  wire[4:0] butterFly2_5_tw_butterFly2_5_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_5_i_wen_comp = (~ twiddle_rsc_0_5_i_oswt) | twiddle_rsc_0_5_i_biwt
      | twiddle_rsc_0_5_i_bcwt;
  assign butterFly2_5_tw_butterFly2_5_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_5_i_s_raddr_core[4:0]),
      twiddle_rsc_0_5_i_s_raddr_core_sct);
  assign twiddle_rsc_0_5_i_s_raddr = {1'b0, butterFly2_5_tw_butterFly2_5_tw_and_nl};
  assign twiddle_rsc_0_5_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_5_i_s_din, twiddle_rsc_0_5_i_s_din_bfwt,
      twiddle_rsc_0_5_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_5_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_5_i_bcwt <= ~((~(twiddle_rsc_0_5_i_bcwt | twiddle_rsc_0_5_i_biwt))
          | twiddle_rsc_0_5_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_5_i_biwt ) begin
      twiddle_rsc_0_5_i_s_din_bfwt <= twiddle_rsc_0_5_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_ctrl (
  core_wen, twiddle_rsc_0_5_i_oswt, twiddle_rsc_0_5_i_biwt, twiddle_rsc_0_5_i_bdwt,
      twiddle_rsc_0_5_i_bcwt, twiddle_rsc_0_5_i_s_re_core_sct, twiddle_rsc_0_5_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_5_i_oswt;
  output twiddle_rsc_0_5_i_biwt;
  output twiddle_rsc_0_5_i_bdwt;
  input twiddle_rsc_0_5_i_bcwt;
  output twiddle_rsc_0_5_i_s_re_core_sct;
  input twiddle_rsc_0_5_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_5_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_5_i_bdwt = twiddle_rsc_0_5_i_oswt & core_wen;
  assign twiddle_rsc_0_5_i_biwt = twiddle_rsc_0_5_i_ogwt & twiddle_rsc_0_5_i_s_rrdy;
  assign twiddle_rsc_0_5_i_ogwt = twiddle_rsc_0_5_i_oswt & (~ twiddle_rsc_0_5_i_bcwt);
  assign twiddle_rsc_0_5_i_s_re_core_sct = twiddle_rsc_0_5_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp (
  clk, rst, twiddle_rsc_0_4_i_oswt, twiddle_rsc_0_4_i_wen_comp, twiddle_rsc_0_4_i_s_raddr_core,
      twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_4_i_biwt, twiddle_rsc_0_4_i_bdwt,
      twiddle_rsc_0_4_i_bcwt, twiddle_rsc_0_4_i_s_raddr, twiddle_rsc_0_4_i_s_raddr_core_sct,
      twiddle_rsc_0_4_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_4_i_oswt;
  output twiddle_rsc_0_4_i_wen_comp;
  input [5:0] twiddle_rsc_0_4_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_4_i_s_din_mxwt;
  input twiddle_rsc_0_4_i_biwt;
  input twiddle_rsc_0_4_i_bdwt;
  output twiddle_rsc_0_4_i_bcwt;
  reg twiddle_rsc_0_4_i_bcwt;
  output [5:0] twiddle_rsc_0_4_i_s_raddr;
  input twiddle_rsc_0_4_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_4_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_4_i_s_din_bfwt;

  wire[4:0] butterFly2_4_tw_butterFly2_4_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_4_i_wen_comp = (~ twiddle_rsc_0_4_i_oswt) | twiddle_rsc_0_4_i_biwt
      | twiddle_rsc_0_4_i_bcwt;
  assign butterFly2_4_tw_butterFly2_4_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_4_i_s_raddr_core[4:0]),
      twiddle_rsc_0_4_i_s_raddr_core_sct);
  assign twiddle_rsc_0_4_i_s_raddr = {1'b0, butterFly2_4_tw_butterFly2_4_tw_and_nl};
  assign twiddle_rsc_0_4_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_4_i_s_din, twiddle_rsc_0_4_i_s_din_bfwt,
      twiddle_rsc_0_4_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_4_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_4_i_bcwt <= ~((~(twiddle_rsc_0_4_i_bcwt | twiddle_rsc_0_4_i_biwt))
          | twiddle_rsc_0_4_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_4_i_biwt ) begin
      twiddle_rsc_0_4_i_s_din_bfwt <= twiddle_rsc_0_4_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_ctrl (
  core_wen, twiddle_rsc_0_4_i_oswt, twiddle_rsc_0_4_i_biwt, twiddle_rsc_0_4_i_bdwt,
      twiddle_rsc_0_4_i_bcwt, twiddle_rsc_0_4_i_s_re_core_sct, twiddle_rsc_0_4_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_4_i_oswt;
  output twiddle_rsc_0_4_i_biwt;
  output twiddle_rsc_0_4_i_bdwt;
  input twiddle_rsc_0_4_i_bcwt;
  output twiddle_rsc_0_4_i_s_re_core_sct;
  input twiddle_rsc_0_4_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_4_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_4_i_bdwt = twiddle_rsc_0_4_i_oswt & core_wen;
  assign twiddle_rsc_0_4_i_biwt = twiddle_rsc_0_4_i_ogwt & twiddle_rsc_0_4_i_s_rrdy;
  assign twiddle_rsc_0_4_i_ogwt = twiddle_rsc_0_4_i_oswt & (~ twiddle_rsc_0_4_i_bcwt);
  assign twiddle_rsc_0_4_i_s_re_core_sct = twiddle_rsc_0_4_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp (
  clk, rst, twiddle_rsc_0_3_i_oswt, twiddle_rsc_0_3_i_wen_comp, twiddle_rsc_0_3_i_s_raddr_core,
      twiddle_rsc_0_3_i_s_din_mxwt, twiddle_rsc_0_3_i_biwt, twiddle_rsc_0_3_i_bdwt,
      twiddle_rsc_0_3_i_bcwt, twiddle_rsc_0_3_i_s_raddr, twiddle_rsc_0_3_i_s_raddr_core_sct,
      twiddle_rsc_0_3_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_3_i_oswt;
  output twiddle_rsc_0_3_i_wen_comp;
  input [5:0] twiddle_rsc_0_3_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_3_i_s_din_mxwt;
  input twiddle_rsc_0_3_i_biwt;
  input twiddle_rsc_0_3_i_bdwt;
  output twiddle_rsc_0_3_i_bcwt;
  reg twiddle_rsc_0_3_i_bcwt;
  output [5:0] twiddle_rsc_0_3_i_s_raddr;
  input twiddle_rsc_0_3_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_3_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_3_i_s_din_bfwt;

  wire[4:0] butterFly2_3_tw_butterFly2_3_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_3_i_wen_comp = (~ twiddle_rsc_0_3_i_oswt) | twiddle_rsc_0_3_i_biwt
      | twiddle_rsc_0_3_i_bcwt;
  assign butterFly2_3_tw_butterFly2_3_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_3_i_s_raddr_core[4:0]),
      twiddle_rsc_0_3_i_s_raddr_core_sct);
  assign twiddle_rsc_0_3_i_s_raddr = {1'b0, butterFly2_3_tw_butterFly2_3_tw_and_nl};
  assign twiddle_rsc_0_3_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_3_i_s_din, twiddle_rsc_0_3_i_s_din_bfwt,
      twiddle_rsc_0_3_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_3_i_bcwt <= ~((~(twiddle_rsc_0_3_i_bcwt | twiddle_rsc_0_3_i_biwt))
          | twiddle_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_3_i_biwt ) begin
      twiddle_rsc_0_3_i_s_din_bfwt <= twiddle_rsc_0_3_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_ctrl (
  core_wen, twiddle_rsc_0_3_i_oswt, twiddle_rsc_0_3_i_biwt, twiddle_rsc_0_3_i_bdwt,
      twiddle_rsc_0_3_i_bcwt, twiddle_rsc_0_3_i_s_re_core_sct, twiddle_rsc_0_3_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_3_i_oswt;
  output twiddle_rsc_0_3_i_biwt;
  output twiddle_rsc_0_3_i_bdwt;
  input twiddle_rsc_0_3_i_bcwt;
  output twiddle_rsc_0_3_i_s_re_core_sct;
  input twiddle_rsc_0_3_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_3_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_3_i_bdwt = twiddle_rsc_0_3_i_oswt & core_wen;
  assign twiddle_rsc_0_3_i_biwt = twiddle_rsc_0_3_i_ogwt & twiddle_rsc_0_3_i_s_rrdy;
  assign twiddle_rsc_0_3_i_ogwt = twiddle_rsc_0_3_i_oswt & (~ twiddle_rsc_0_3_i_bcwt);
  assign twiddle_rsc_0_3_i_s_re_core_sct = twiddle_rsc_0_3_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp (
  clk, rst, twiddle_rsc_0_2_i_oswt, twiddle_rsc_0_2_i_wen_comp, twiddle_rsc_0_2_i_s_raddr_core,
      twiddle_rsc_0_2_i_s_din_mxwt, twiddle_rsc_0_2_i_biwt, twiddle_rsc_0_2_i_bdwt,
      twiddle_rsc_0_2_i_bcwt, twiddle_rsc_0_2_i_s_raddr, twiddle_rsc_0_2_i_s_raddr_core_sct,
      twiddle_rsc_0_2_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_2_i_oswt;
  output twiddle_rsc_0_2_i_wen_comp;
  input [5:0] twiddle_rsc_0_2_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_2_i_s_din_mxwt;
  input twiddle_rsc_0_2_i_biwt;
  input twiddle_rsc_0_2_i_bdwt;
  output twiddle_rsc_0_2_i_bcwt;
  reg twiddle_rsc_0_2_i_bcwt;
  output [5:0] twiddle_rsc_0_2_i_s_raddr;
  input twiddle_rsc_0_2_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_2_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_2_i_s_din_bfwt;

  wire[4:0] butterFly2_2_tw_butterFly2_2_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_2_i_wen_comp = (~ twiddle_rsc_0_2_i_oswt) | twiddle_rsc_0_2_i_biwt
      | twiddle_rsc_0_2_i_bcwt;
  assign butterFly2_2_tw_butterFly2_2_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_2_i_s_raddr_core[4:0]),
      twiddle_rsc_0_2_i_s_raddr_core_sct);
  assign twiddle_rsc_0_2_i_s_raddr = {1'b0, butterFly2_2_tw_butterFly2_2_tw_and_nl};
  assign twiddle_rsc_0_2_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_2_i_s_din, twiddle_rsc_0_2_i_s_din_bfwt,
      twiddle_rsc_0_2_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_2_i_bcwt <= ~((~(twiddle_rsc_0_2_i_bcwt | twiddle_rsc_0_2_i_biwt))
          | twiddle_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_2_i_biwt ) begin
      twiddle_rsc_0_2_i_s_din_bfwt <= twiddle_rsc_0_2_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_ctrl (
  core_wen, twiddle_rsc_0_2_i_oswt, twiddle_rsc_0_2_i_biwt, twiddle_rsc_0_2_i_bdwt,
      twiddle_rsc_0_2_i_bcwt, twiddle_rsc_0_2_i_s_re_core_sct, twiddle_rsc_0_2_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_2_i_oswt;
  output twiddle_rsc_0_2_i_biwt;
  output twiddle_rsc_0_2_i_bdwt;
  input twiddle_rsc_0_2_i_bcwt;
  output twiddle_rsc_0_2_i_s_re_core_sct;
  input twiddle_rsc_0_2_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_2_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_2_i_bdwt = twiddle_rsc_0_2_i_oswt & core_wen;
  assign twiddle_rsc_0_2_i_biwt = twiddle_rsc_0_2_i_ogwt & twiddle_rsc_0_2_i_s_rrdy;
  assign twiddle_rsc_0_2_i_ogwt = twiddle_rsc_0_2_i_oswt & (~ twiddle_rsc_0_2_i_bcwt);
  assign twiddle_rsc_0_2_i_s_re_core_sct = twiddle_rsc_0_2_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp (
  clk, rst, twiddle_rsc_0_1_i_oswt, twiddle_rsc_0_1_i_wen_comp, twiddle_rsc_0_1_i_s_raddr_core,
      twiddle_rsc_0_1_i_s_din_mxwt, twiddle_rsc_0_1_i_biwt, twiddle_rsc_0_1_i_bdwt,
      twiddle_rsc_0_1_i_bcwt, twiddle_rsc_0_1_i_s_raddr, twiddle_rsc_0_1_i_s_raddr_core_sct,
      twiddle_rsc_0_1_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_1_i_oswt;
  output twiddle_rsc_0_1_i_wen_comp;
  input [5:0] twiddle_rsc_0_1_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_1_i_s_din_mxwt;
  input twiddle_rsc_0_1_i_biwt;
  input twiddle_rsc_0_1_i_bdwt;
  output twiddle_rsc_0_1_i_bcwt;
  reg twiddle_rsc_0_1_i_bcwt;
  output [5:0] twiddle_rsc_0_1_i_s_raddr;
  input twiddle_rsc_0_1_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_1_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_1_i_s_din_bfwt;

  wire[4:0] butterFly2_1_tw_butterFly2_1_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_1_i_wen_comp = (~ twiddle_rsc_0_1_i_oswt) | twiddle_rsc_0_1_i_biwt
      | twiddle_rsc_0_1_i_bcwt;
  assign butterFly2_1_tw_butterFly2_1_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_1_i_s_raddr_core[4:0]),
      twiddle_rsc_0_1_i_s_raddr_core_sct);
  assign twiddle_rsc_0_1_i_s_raddr = {1'b0, butterFly2_1_tw_butterFly2_1_tw_and_nl};
  assign twiddle_rsc_0_1_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_1_i_s_din, twiddle_rsc_0_1_i_s_din_bfwt,
      twiddle_rsc_0_1_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_1_i_bcwt <= ~((~(twiddle_rsc_0_1_i_bcwt | twiddle_rsc_0_1_i_biwt))
          | twiddle_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_1_i_biwt ) begin
      twiddle_rsc_0_1_i_s_din_bfwt <= twiddle_rsc_0_1_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_ctrl (
  core_wen, twiddle_rsc_0_1_i_oswt, twiddle_rsc_0_1_i_biwt, twiddle_rsc_0_1_i_bdwt,
      twiddle_rsc_0_1_i_bcwt, twiddle_rsc_0_1_i_s_re_core_sct, twiddle_rsc_0_1_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_1_i_oswt;
  output twiddle_rsc_0_1_i_biwt;
  output twiddle_rsc_0_1_i_bdwt;
  input twiddle_rsc_0_1_i_bcwt;
  output twiddle_rsc_0_1_i_s_re_core_sct;
  input twiddle_rsc_0_1_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_1_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_1_i_bdwt = twiddle_rsc_0_1_i_oswt & core_wen;
  assign twiddle_rsc_0_1_i_biwt = twiddle_rsc_0_1_i_ogwt & twiddle_rsc_0_1_i_s_rrdy;
  assign twiddle_rsc_0_1_i_ogwt = twiddle_rsc_0_1_i_oswt & (~ twiddle_rsc_0_1_i_bcwt);
  assign twiddle_rsc_0_1_i_s_re_core_sct = twiddle_rsc_0_1_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp (
  clk, rst, twiddle_rsc_0_0_i_oswt, twiddle_rsc_0_0_i_wen_comp, twiddle_rsc_0_0_i_s_raddr_core,
      twiddle_rsc_0_0_i_s_din_mxwt, twiddle_rsc_0_0_i_biwt, twiddle_rsc_0_0_i_bdwt,
      twiddle_rsc_0_0_i_bcwt, twiddle_rsc_0_0_i_s_raddr, twiddle_rsc_0_0_i_s_raddr_core_sct,
      twiddle_rsc_0_0_i_s_din
);
  input clk;
  input rst;
  input twiddle_rsc_0_0_i_oswt;
  output twiddle_rsc_0_0_i_wen_comp;
  input [5:0] twiddle_rsc_0_0_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_0_i_s_din_mxwt;
  input twiddle_rsc_0_0_i_biwt;
  input twiddle_rsc_0_0_i_bdwt;
  output twiddle_rsc_0_0_i_bcwt;
  reg twiddle_rsc_0_0_i_bcwt;
  output [5:0] twiddle_rsc_0_0_i_s_raddr;
  input twiddle_rsc_0_0_i_s_raddr_core_sct;
  input [31:0] twiddle_rsc_0_0_i_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsc_0_0_i_s_din_bfwt;

  wire[4:0] INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_0_i_wen_comp = (~ twiddle_rsc_0_0_i_oswt) | twiddle_rsc_0_0_i_biwt
      | twiddle_rsc_0_0_i_bcwt;
  assign INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl = MUX_v_5_2_2(5'b00000, (twiddle_rsc_0_0_i_s_raddr_core[4:0]),
      twiddle_rsc_0_0_i_s_raddr_core_sct);
  assign twiddle_rsc_0_0_i_s_raddr = {1'b0, INNER_LOOP1_tw_INNER_LOOP1_tw_and_nl};
  assign twiddle_rsc_0_0_i_s_din_mxwt = MUX_v_32_2_2(twiddle_rsc_0_0_i_s_din, twiddle_rsc_0_0_i_s_din_bfwt,
      twiddle_rsc_0_0_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsc_0_0_i_bcwt <= ~((~(twiddle_rsc_0_0_i_bcwt | twiddle_rsc_0_0_i_biwt))
          | twiddle_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsc_0_0_i_biwt ) begin
      twiddle_rsc_0_0_i_s_din_bfwt <= twiddle_rsc_0_0_i_s_din;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_ctrl (
  core_wen, twiddle_rsc_0_0_i_oswt, twiddle_rsc_0_0_i_biwt, twiddle_rsc_0_0_i_bdwt,
      twiddle_rsc_0_0_i_bcwt, twiddle_rsc_0_0_i_s_re_core_sct, twiddle_rsc_0_0_i_s_rrdy
);
  input core_wen;
  input twiddle_rsc_0_0_i_oswt;
  output twiddle_rsc_0_0_i_biwt;
  output twiddle_rsc_0_0_i_bdwt;
  input twiddle_rsc_0_0_i_bcwt;
  output twiddle_rsc_0_0_i_s_re_core_sct;
  input twiddle_rsc_0_0_i_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsc_0_0_i_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_0_0_i_bdwt = twiddle_rsc_0_0_i_oswt & core_wen;
  assign twiddle_rsc_0_0_i_biwt = twiddle_rsc_0_0_i_ogwt & twiddle_rsc_0_0_i_s_rrdy;
  assign twiddle_rsc_0_0_i_ogwt = twiddle_rsc_0_0_i_oswt & (~ twiddle_rsc_0_0_i_bcwt);
  assign twiddle_rsc_0_0_i_s_re_core_sct = twiddle_rsc_0_0_i_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_dp (
  clk, rst, xt_rsc_1_31_i_qa_d, xt_rsc_1_31_i_qa_d_mxwt, xt_rsc_1_31_i_biwt, xt_rsc_1_31_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_31_i_qa_d;
  output [31:0] xt_rsc_1_31_i_qa_d_mxwt;
  input xt_rsc_1_31_i_biwt;
  input xt_rsc_1_31_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_31_i_bcwt;
  reg [31:0] xt_rsc_1_31_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_31_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_31_i_qa_d, xt_rsc_1_31_i_qa_d_bfwt,
      xt_rsc_1_31_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_31_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_31_i_bcwt <= ~((~(xt_rsc_1_31_i_bcwt | xt_rsc_1_31_i_biwt)) | xt_rsc_1_31_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_31_i_biwt ) begin
      xt_rsc_1_31_i_qa_d_bfwt <= xt_rsc_1_31_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_31_i_oswt, xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_31_i_biwt, xt_rsc_1_31_i_bdwt, xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_31_i_wea_d_core_sct_pff, xt_rsc_1_31_i_wea_d_core_psct_pff, xt_rsc_1_31_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_31_i_oswt;
  input xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_31_i_biwt;
  output xt_rsc_1_31_i_bdwt;
  output xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_31_i_wea_d_core_sct_pff;
  input xt_rsc_1_31_i_wea_d_core_psct_pff;
  input xt_rsc_1_31_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_31_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_31_i_bdwt = xt_rsc_1_31_i_oswt & core_wen;
  assign xt_rsc_1_31_i_biwt = (~ core_wten) & xt_rsc_1_31_i_oswt;
  assign xt_rsc_1_31_i_wea_d_core_sct_pff = xt_rsc_1_31_i_wea_d_core_psct_pff & xt_rsc_1_31_i_dswt_pff;
  assign xt_rsc_1_31_i_dswt_pff = core_wen & xt_rsc_1_31_i_oswt_pff;
  assign xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_31_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_dp (
  clk, rst, xt_rsc_1_30_i_qa_d, xt_rsc_1_30_i_qa_d_mxwt, xt_rsc_1_30_i_biwt, xt_rsc_1_30_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_30_i_qa_d;
  output [31:0] xt_rsc_1_30_i_qa_d_mxwt;
  input xt_rsc_1_30_i_biwt;
  input xt_rsc_1_30_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_30_i_bcwt;
  reg [31:0] xt_rsc_1_30_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_30_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_30_i_qa_d, xt_rsc_1_30_i_qa_d_bfwt,
      xt_rsc_1_30_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_30_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_30_i_bcwt <= ~((~(xt_rsc_1_30_i_bcwt | xt_rsc_1_30_i_biwt)) | xt_rsc_1_30_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_30_i_biwt ) begin
      xt_rsc_1_30_i_qa_d_bfwt <= xt_rsc_1_30_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_30_i_oswt, xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_30_i_biwt, xt_rsc_1_30_i_bdwt, xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_30_i_wea_d_core_sct_pff, xt_rsc_1_30_i_wea_d_core_psct_pff, xt_rsc_1_30_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_30_i_oswt;
  input xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_30_i_biwt;
  output xt_rsc_1_30_i_bdwt;
  output xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_30_i_wea_d_core_sct_pff;
  input xt_rsc_1_30_i_wea_d_core_psct_pff;
  input xt_rsc_1_30_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_30_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_30_i_bdwt = xt_rsc_1_30_i_oswt & core_wen;
  assign xt_rsc_1_30_i_biwt = (~ core_wten) & xt_rsc_1_30_i_oswt;
  assign xt_rsc_1_30_i_wea_d_core_sct_pff = xt_rsc_1_30_i_wea_d_core_psct_pff & xt_rsc_1_30_i_dswt_pff;
  assign xt_rsc_1_30_i_dswt_pff = core_wen & xt_rsc_1_30_i_oswt_pff;
  assign xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_30_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_dp (
  clk, rst, xt_rsc_1_29_i_qa_d, xt_rsc_1_29_i_qa_d_mxwt, xt_rsc_1_29_i_biwt, xt_rsc_1_29_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_29_i_qa_d;
  output [31:0] xt_rsc_1_29_i_qa_d_mxwt;
  input xt_rsc_1_29_i_biwt;
  input xt_rsc_1_29_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_29_i_bcwt;
  reg [31:0] xt_rsc_1_29_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_29_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_29_i_qa_d, xt_rsc_1_29_i_qa_d_bfwt,
      xt_rsc_1_29_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_29_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_29_i_bcwt <= ~((~(xt_rsc_1_29_i_bcwt | xt_rsc_1_29_i_biwt)) | xt_rsc_1_29_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_29_i_biwt ) begin
      xt_rsc_1_29_i_qa_d_bfwt <= xt_rsc_1_29_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_29_i_oswt, xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_29_i_biwt, xt_rsc_1_29_i_bdwt, xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_29_i_wea_d_core_sct_pff, xt_rsc_1_29_i_wea_d_core_psct_pff, xt_rsc_1_29_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_29_i_oswt;
  input xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_29_i_biwt;
  output xt_rsc_1_29_i_bdwt;
  output xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_29_i_wea_d_core_sct_pff;
  input xt_rsc_1_29_i_wea_d_core_psct_pff;
  input xt_rsc_1_29_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_29_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_29_i_bdwt = xt_rsc_1_29_i_oswt & core_wen;
  assign xt_rsc_1_29_i_biwt = (~ core_wten) & xt_rsc_1_29_i_oswt;
  assign xt_rsc_1_29_i_wea_d_core_sct_pff = xt_rsc_1_29_i_wea_d_core_psct_pff & xt_rsc_1_29_i_dswt_pff;
  assign xt_rsc_1_29_i_dswt_pff = core_wen & xt_rsc_1_29_i_oswt_pff;
  assign xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_29_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_dp (
  clk, rst, xt_rsc_1_28_i_qa_d, xt_rsc_1_28_i_qa_d_mxwt, xt_rsc_1_28_i_biwt, xt_rsc_1_28_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_28_i_qa_d;
  output [31:0] xt_rsc_1_28_i_qa_d_mxwt;
  input xt_rsc_1_28_i_biwt;
  input xt_rsc_1_28_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_28_i_bcwt;
  reg [31:0] xt_rsc_1_28_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_28_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_28_i_qa_d, xt_rsc_1_28_i_qa_d_bfwt,
      xt_rsc_1_28_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_28_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_28_i_bcwt <= ~((~(xt_rsc_1_28_i_bcwt | xt_rsc_1_28_i_biwt)) | xt_rsc_1_28_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_28_i_biwt ) begin
      xt_rsc_1_28_i_qa_d_bfwt <= xt_rsc_1_28_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_28_i_oswt, xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_28_i_biwt, xt_rsc_1_28_i_bdwt, xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_28_i_wea_d_core_sct_pff, xt_rsc_1_28_i_wea_d_core_psct_pff, xt_rsc_1_28_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_28_i_oswt;
  input xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_28_i_biwt;
  output xt_rsc_1_28_i_bdwt;
  output xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_28_i_wea_d_core_sct_pff;
  input xt_rsc_1_28_i_wea_d_core_psct_pff;
  input xt_rsc_1_28_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_28_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_28_i_bdwt = xt_rsc_1_28_i_oswt & core_wen;
  assign xt_rsc_1_28_i_biwt = (~ core_wten) & xt_rsc_1_28_i_oswt;
  assign xt_rsc_1_28_i_wea_d_core_sct_pff = xt_rsc_1_28_i_wea_d_core_psct_pff & xt_rsc_1_28_i_dswt_pff;
  assign xt_rsc_1_28_i_dswt_pff = core_wen & xt_rsc_1_28_i_oswt_pff;
  assign xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_28_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_dp (
  clk, rst, xt_rsc_1_27_i_qa_d, xt_rsc_1_27_i_qa_d_mxwt, xt_rsc_1_27_i_biwt, xt_rsc_1_27_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_27_i_qa_d;
  output [31:0] xt_rsc_1_27_i_qa_d_mxwt;
  input xt_rsc_1_27_i_biwt;
  input xt_rsc_1_27_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_27_i_bcwt;
  reg [31:0] xt_rsc_1_27_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_27_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_27_i_qa_d, xt_rsc_1_27_i_qa_d_bfwt,
      xt_rsc_1_27_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_27_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_27_i_bcwt <= ~((~(xt_rsc_1_27_i_bcwt | xt_rsc_1_27_i_biwt)) | xt_rsc_1_27_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_27_i_biwt ) begin
      xt_rsc_1_27_i_qa_d_bfwt <= xt_rsc_1_27_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_27_i_oswt, xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_27_i_biwt, xt_rsc_1_27_i_bdwt, xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_27_i_wea_d_core_sct_pff, xt_rsc_1_27_i_wea_d_core_psct_pff, xt_rsc_1_27_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_27_i_oswt;
  input xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_27_i_biwt;
  output xt_rsc_1_27_i_bdwt;
  output xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_27_i_wea_d_core_sct_pff;
  input xt_rsc_1_27_i_wea_d_core_psct_pff;
  input xt_rsc_1_27_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_27_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_27_i_bdwt = xt_rsc_1_27_i_oswt & core_wen;
  assign xt_rsc_1_27_i_biwt = (~ core_wten) & xt_rsc_1_27_i_oswt;
  assign xt_rsc_1_27_i_wea_d_core_sct_pff = xt_rsc_1_27_i_wea_d_core_psct_pff & xt_rsc_1_27_i_dswt_pff;
  assign xt_rsc_1_27_i_dswt_pff = core_wen & xt_rsc_1_27_i_oswt_pff;
  assign xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_27_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_dp (
  clk, rst, xt_rsc_1_26_i_qa_d, xt_rsc_1_26_i_qa_d_mxwt, xt_rsc_1_26_i_biwt, xt_rsc_1_26_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_26_i_qa_d;
  output [31:0] xt_rsc_1_26_i_qa_d_mxwt;
  input xt_rsc_1_26_i_biwt;
  input xt_rsc_1_26_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_26_i_bcwt;
  reg [31:0] xt_rsc_1_26_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_26_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_26_i_qa_d, xt_rsc_1_26_i_qa_d_bfwt,
      xt_rsc_1_26_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_26_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_26_i_bcwt <= ~((~(xt_rsc_1_26_i_bcwt | xt_rsc_1_26_i_biwt)) | xt_rsc_1_26_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_26_i_biwt ) begin
      xt_rsc_1_26_i_qa_d_bfwt <= xt_rsc_1_26_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_26_i_oswt, xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_26_i_biwt, xt_rsc_1_26_i_bdwt, xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_26_i_wea_d_core_sct_pff, xt_rsc_1_26_i_wea_d_core_psct_pff, xt_rsc_1_26_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_26_i_oswt;
  input xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_26_i_biwt;
  output xt_rsc_1_26_i_bdwt;
  output xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_26_i_wea_d_core_sct_pff;
  input xt_rsc_1_26_i_wea_d_core_psct_pff;
  input xt_rsc_1_26_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_26_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_26_i_bdwt = xt_rsc_1_26_i_oswt & core_wen;
  assign xt_rsc_1_26_i_biwt = (~ core_wten) & xt_rsc_1_26_i_oswt;
  assign xt_rsc_1_26_i_wea_d_core_sct_pff = xt_rsc_1_26_i_wea_d_core_psct_pff & xt_rsc_1_26_i_dswt_pff;
  assign xt_rsc_1_26_i_dswt_pff = core_wen & xt_rsc_1_26_i_oswt_pff;
  assign xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_26_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_dp (
  clk, rst, xt_rsc_1_25_i_qa_d, xt_rsc_1_25_i_qa_d_mxwt, xt_rsc_1_25_i_biwt, xt_rsc_1_25_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_25_i_qa_d;
  output [31:0] xt_rsc_1_25_i_qa_d_mxwt;
  input xt_rsc_1_25_i_biwt;
  input xt_rsc_1_25_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_25_i_bcwt;
  reg [31:0] xt_rsc_1_25_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_25_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_25_i_qa_d, xt_rsc_1_25_i_qa_d_bfwt,
      xt_rsc_1_25_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_25_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_25_i_bcwt <= ~((~(xt_rsc_1_25_i_bcwt | xt_rsc_1_25_i_biwt)) | xt_rsc_1_25_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_25_i_biwt ) begin
      xt_rsc_1_25_i_qa_d_bfwt <= xt_rsc_1_25_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_25_i_oswt, xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_25_i_biwt, xt_rsc_1_25_i_bdwt, xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_25_i_wea_d_core_sct_pff, xt_rsc_1_25_i_wea_d_core_psct_pff, xt_rsc_1_25_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_25_i_oswt;
  input xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_25_i_biwt;
  output xt_rsc_1_25_i_bdwt;
  output xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_25_i_wea_d_core_sct_pff;
  input xt_rsc_1_25_i_wea_d_core_psct_pff;
  input xt_rsc_1_25_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_25_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_25_i_bdwt = xt_rsc_1_25_i_oswt & core_wen;
  assign xt_rsc_1_25_i_biwt = (~ core_wten) & xt_rsc_1_25_i_oswt;
  assign xt_rsc_1_25_i_wea_d_core_sct_pff = xt_rsc_1_25_i_wea_d_core_psct_pff & xt_rsc_1_25_i_dswt_pff;
  assign xt_rsc_1_25_i_dswt_pff = core_wen & xt_rsc_1_25_i_oswt_pff;
  assign xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_25_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_dp (
  clk, rst, xt_rsc_1_24_i_qa_d, xt_rsc_1_24_i_qa_d_mxwt, xt_rsc_1_24_i_biwt, xt_rsc_1_24_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_24_i_qa_d;
  output [31:0] xt_rsc_1_24_i_qa_d_mxwt;
  input xt_rsc_1_24_i_biwt;
  input xt_rsc_1_24_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_24_i_bcwt;
  reg [31:0] xt_rsc_1_24_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_24_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_24_i_qa_d, xt_rsc_1_24_i_qa_d_bfwt,
      xt_rsc_1_24_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_24_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_24_i_bcwt <= ~((~(xt_rsc_1_24_i_bcwt | xt_rsc_1_24_i_biwt)) | xt_rsc_1_24_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_24_i_biwt ) begin
      xt_rsc_1_24_i_qa_d_bfwt <= xt_rsc_1_24_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_24_i_oswt, xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_24_i_biwt, xt_rsc_1_24_i_bdwt, xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_24_i_wea_d_core_sct_pff, xt_rsc_1_24_i_wea_d_core_psct_pff, xt_rsc_1_24_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_24_i_oswt;
  input xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_24_i_biwt;
  output xt_rsc_1_24_i_bdwt;
  output xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_24_i_wea_d_core_sct_pff;
  input xt_rsc_1_24_i_wea_d_core_psct_pff;
  input xt_rsc_1_24_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_24_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_24_i_bdwt = xt_rsc_1_24_i_oswt & core_wen;
  assign xt_rsc_1_24_i_biwt = (~ core_wten) & xt_rsc_1_24_i_oswt;
  assign xt_rsc_1_24_i_wea_d_core_sct_pff = xt_rsc_1_24_i_wea_d_core_psct_pff & xt_rsc_1_24_i_dswt_pff;
  assign xt_rsc_1_24_i_dswt_pff = core_wen & xt_rsc_1_24_i_oswt_pff;
  assign xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_24_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_dp (
  clk, rst, xt_rsc_1_23_i_qa_d, xt_rsc_1_23_i_qa_d_mxwt, xt_rsc_1_23_i_biwt, xt_rsc_1_23_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_23_i_qa_d;
  output [31:0] xt_rsc_1_23_i_qa_d_mxwt;
  input xt_rsc_1_23_i_biwt;
  input xt_rsc_1_23_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_23_i_bcwt;
  reg [31:0] xt_rsc_1_23_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_23_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_23_i_qa_d, xt_rsc_1_23_i_qa_d_bfwt,
      xt_rsc_1_23_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_23_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_23_i_bcwt <= ~((~(xt_rsc_1_23_i_bcwt | xt_rsc_1_23_i_biwt)) | xt_rsc_1_23_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_23_i_biwt ) begin
      xt_rsc_1_23_i_qa_d_bfwt <= xt_rsc_1_23_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_23_i_oswt, xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_23_i_biwt, xt_rsc_1_23_i_bdwt, xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_23_i_wea_d_core_sct_pff, xt_rsc_1_23_i_wea_d_core_psct_pff, xt_rsc_1_23_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_23_i_oswt;
  input xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_23_i_biwt;
  output xt_rsc_1_23_i_bdwt;
  output xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_23_i_wea_d_core_sct_pff;
  input xt_rsc_1_23_i_wea_d_core_psct_pff;
  input xt_rsc_1_23_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_23_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_23_i_bdwt = xt_rsc_1_23_i_oswt & core_wen;
  assign xt_rsc_1_23_i_biwt = (~ core_wten) & xt_rsc_1_23_i_oswt;
  assign xt_rsc_1_23_i_wea_d_core_sct_pff = xt_rsc_1_23_i_wea_d_core_psct_pff & xt_rsc_1_23_i_dswt_pff;
  assign xt_rsc_1_23_i_dswt_pff = core_wen & xt_rsc_1_23_i_oswt_pff;
  assign xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_23_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_dp (
  clk, rst, xt_rsc_1_22_i_qa_d, xt_rsc_1_22_i_qa_d_mxwt, xt_rsc_1_22_i_biwt, xt_rsc_1_22_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_22_i_qa_d;
  output [31:0] xt_rsc_1_22_i_qa_d_mxwt;
  input xt_rsc_1_22_i_biwt;
  input xt_rsc_1_22_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_22_i_bcwt;
  reg [31:0] xt_rsc_1_22_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_22_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_22_i_qa_d, xt_rsc_1_22_i_qa_d_bfwt,
      xt_rsc_1_22_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_22_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_22_i_bcwt <= ~((~(xt_rsc_1_22_i_bcwt | xt_rsc_1_22_i_biwt)) | xt_rsc_1_22_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_22_i_biwt ) begin
      xt_rsc_1_22_i_qa_d_bfwt <= xt_rsc_1_22_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_22_i_oswt, xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_22_i_biwt, xt_rsc_1_22_i_bdwt, xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_22_i_wea_d_core_sct_pff, xt_rsc_1_22_i_wea_d_core_psct_pff, xt_rsc_1_22_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_22_i_oswt;
  input xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_22_i_biwt;
  output xt_rsc_1_22_i_bdwt;
  output xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_22_i_wea_d_core_sct_pff;
  input xt_rsc_1_22_i_wea_d_core_psct_pff;
  input xt_rsc_1_22_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_22_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_22_i_bdwt = xt_rsc_1_22_i_oswt & core_wen;
  assign xt_rsc_1_22_i_biwt = (~ core_wten) & xt_rsc_1_22_i_oswt;
  assign xt_rsc_1_22_i_wea_d_core_sct_pff = xt_rsc_1_22_i_wea_d_core_psct_pff & xt_rsc_1_22_i_dswt_pff;
  assign xt_rsc_1_22_i_dswt_pff = core_wen & xt_rsc_1_22_i_oswt_pff;
  assign xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_22_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_dp (
  clk, rst, xt_rsc_1_21_i_qa_d, xt_rsc_1_21_i_qa_d_mxwt, xt_rsc_1_21_i_biwt, xt_rsc_1_21_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_21_i_qa_d;
  output [31:0] xt_rsc_1_21_i_qa_d_mxwt;
  input xt_rsc_1_21_i_biwt;
  input xt_rsc_1_21_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_21_i_bcwt;
  reg [31:0] xt_rsc_1_21_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_21_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_21_i_qa_d, xt_rsc_1_21_i_qa_d_bfwt,
      xt_rsc_1_21_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_21_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_21_i_bcwt <= ~((~(xt_rsc_1_21_i_bcwt | xt_rsc_1_21_i_biwt)) | xt_rsc_1_21_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_21_i_biwt ) begin
      xt_rsc_1_21_i_qa_d_bfwt <= xt_rsc_1_21_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_21_i_oswt, xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_21_i_biwt, xt_rsc_1_21_i_bdwt, xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_21_i_wea_d_core_sct_pff, xt_rsc_1_21_i_wea_d_core_psct_pff, xt_rsc_1_21_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_21_i_oswt;
  input xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_21_i_biwt;
  output xt_rsc_1_21_i_bdwt;
  output xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_21_i_wea_d_core_sct_pff;
  input xt_rsc_1_21_i_wea_d_core_psct_pff;
  input xt_rsc_1_21_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_21_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_21_i_bdwt = xt_rsc_1_21_i_oswt & core_wen;
  assign xt_rsc_1_21_i_biwt = (~ core_wten) & xt_rsc_1_21_i_oswt;
  assign xt_rsc_1_21_i_wea_d_core_sct_pff = xt_rsc_1_21_i_wea_d_core_psct_pff & xt_rsc_1_21_i_dswt_pff;
  assign xt_rsc_1_21_i_dswt_pff = core_wen & xt_rsc_1_21_i_oswt_pff;
  assign xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_21_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_dp (
  clk, rst, xt_rsc_1_20_i_qa_d, xt_rsc_1_20_i_qa_d_mxwt, xt_rsc_1_20_i_biwt, xt_rsc_1_20_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_20_i_qa_d;
  output [31:0] xt_rsc_1_20_i_qa_d_mxwt;
  input xt_rsc_1_20_i_biwt;
  input xt_rsc_1_20_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_20_i_bcwt;
  reg [31:0] xt_rsc_1_20_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_20_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_20_i_qa_d, xt_rsc_1_20_i_qa_d_bfwt,
      xt_rsc_1_20_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_20_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_20_i_bcwt <= ~((~(xt_rsc_1_20_i_bcwt | xt_rsc_1_20_i_biwt)) | xt_rsc_1_20_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_20_i_biwt ) begin
      xt_rsc_1_20_i_qa_d_bfwt <= xt_rsc_1_20_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_20_i_oswt, xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_20_i_biwt, xt_rsc_1_20_i_bdwt, xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_20_i_wea_d_core_sct_pff, xt_rsc_1_20_i_wea_d_core_psct_pff, xt_rsc_1_20_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_20_i_oswt;
  input xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_20_i_biwt;
  output xt_rsc_1_20_i_bdwt;
  output xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_20_i_wea_d_core_sct_pff;
  input xt_rsc_1_20_i_wea_d_core_psct_pff;
  input xt_rsc_1_20_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_20_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_20_i_bdwt = xt_rsc_1_20_i_oswt & core_wen;
  assign xt_rsc_1_20_i_biwt = (~ core_wten) & xt_rsc_1_20_i_oswt;
  assign xt_rsc_1_20_i_wea_d_core_sct_pff = xt_rsc_1_20_i_wea_d_core_psct_pff & xt_rsc_1_20_i_dswt_pff;
  assign xt_rsc_1_20_i_dswt_pff = core_wen & xt_rsc_1_20_i_oswt_pff;
  assign xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_20_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_dp (
  clk, rst, xt_rsc_1_19_i_qa_d, xt_rsc_1_19_i_qa_d_mxwt, xt_rsc_1_19_i_biwt, xt_rsc_1_19_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_19_i_qa_d;
  output [31:0] xt_rsc_1_19_i_qa_d_mxwt;
  input xt_rsc_1_19_i_biwt;
  input xt_rsc_1_19_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_19_i_bcwt;
  reg [31:0] xt_rsc_1_19_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_19_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_19_i_qa_d, xt_rsc_1_19_i_qa_d_bfwt,
      xt_rsc_1_19_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_19_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_19_i_bcwt <= ~((~(xt_rsc_1_19_i_bcwt | xt_rsc_1_19_i_biwt)) | xt_rsc_1_19_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_19_i_biwt ) begin
      xt_rsc_1_19_i_qa_d_bfwt <= xt_rsc_1_19_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_19_i_oswt, xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_19_i_biwt, xt_rsc_1_19_i_bdwt, xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_19_i_wea_d_core_sct_pff, xt_rsc_1_19_i_wea_d_core_psct_pff, xt_rsc_1_19_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_19_i_oswt;
  input xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_19_i_biwt;
  output xt_rsc_1_19_i_bdwt;
  output xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_19_i_wea_d_core_sct_pff;
  input xt_rsc_1_19_i_wea_d_core_psct_pff;
  input xt_rsc_1_19_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_19_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_19_i_bdwt = xt_rsc_1_19_i_oswt & core_wen;
  assign xt_rsc_1_19_i_biwt = (~ core_wten) & xt_rsc_1_19_i_oswt;
  assign xt_rsc_1_19_i_wea_d_core_sct_pff = xt_rsc_1_19_i_wea_d_core_psct_pff & xt_rsc_1_19_i_dswt_pff;
  assign xt_rsc_1_19_i_dswt_pff = core_wen & xt_rsc_1_19_i_oswt_pff;
  assign xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_19_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_dp (
  clk, rst, xt_rsc_1_18_i_qa_d, xt_rsc_1_18_i_qa_d_mxwt, xt_rsc_1_18_i_biwt, xt_rsc_1_18_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_18_i_qa_d;
  output [31:0] xt_rsc_1_18_i_qa_d_mxwt;
  input xt_rsc_1_18_i_biwt;
  input xt_rsc_1_18_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_18_i_bcwt;
  reg [31:0] xt_rsc_1_18_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_18_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_18_i_qa_d, xt_rsc_1_18_i_qa_d_bfwt,
      xt_rsc_1_18_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_18_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_18_i_bcwt <= ~((~(xt_rsc_1_18_i_bcwt | xt_rsc_1_18_i_biwt)) | xt_rsc_1_18_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_18_i_biwt ) begin
      xt_rsc_1_18_i_qa_d_bfwt <= xt_rsc_1_18_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_18_i_oswt, xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_18_i_biwt, xt_rsc_1_18_i_bdwt, xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_18_i_wea_d_core_sct_pff, xt_rsc_1_18_i_wea_d_core_psct_pff, xt_rsc_1_18_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_18_i_oswt;
  input xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_18_i_biwt;
  output xt_rsc_1_18_i_bdwt;
  output xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_18_i_wea_d_core_sct_pff;
  input xt_rsc_1_18_i_wea_d_core_psct_pff;
  input xt_rsc_1_18_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_18_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_18_i_bdwt = xt_rsc_1_18_i_oswt & core_wen;
  assign xt_rsc_1_18_i_biwt = (~ core_wten) & xt_rsc_1_18_i_oswt;
  assign xt_rsc_1_18_i_wea_d_core_sct_pff = xt_rsc_1_18_i_wea_d_core_psct_pff & xt_rsc_1_18_i_dswt_pff;
  assign xt_rsc_1_18_i_dswt_pff = core_wen & xt_rsc_1_18_i_oswt_pff;
  assign xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_18_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_dp (
  clk, rst, xt_rsc_1_17_i_qa_d, xt_rsc_1_17_i_qa_d_mxwt, xt_rsc_1_17_i_biwt, xt_rsc_1_17_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_17_i_qa_d;
  output [31:0] xt_rsc_1_17_i_qa_d_mxwt;
  input xt_rsc_1_17_i_biwt;
  input xt_rsc_1_17_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_17_i_bcwt;
  reg [31:0] xt_rsc_1_17_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_17_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_17_i_qa_d, xt_rsc_1_17_i_qa_d_bfwt,
      xt_rsc_1_17_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_17_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_17_i_bcwt <= ~((~(xt_rsc_1_17_i_bcwt | xt_rsc_1_17_i_biwt)) | xt_rsc_1_17_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_17_i_biwt ) begin
      xt_rsc_1_17_i_qa_d_bfwt <= xt_rsc_1_17_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_17_i_oswt, xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_17_i_biwt, xt_rsc_1_17_i_bdwt, xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_17_i_wea_d_core_sct_pff, xt_rsc_1_17_i_wea_d_core_psct_pff, xt_rsc_1_17_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_17_i_oswt;
  input xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_17_i_biwt;
  output xt_rsc_1_17_i_bdwt;
  output xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_17_i_wea_d_core_sct_pff;
  input xt_rsc_1_17_i_wea_d_core_psct_pff;
  input xt_rsc_1_17_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_17_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_17_i_bdwt = xt_rsc_1_17_i_oswt & core_wen;
  assign xt_rsc_1_17_i_biwt = (~ core_wten) & xt_rsc_1_17_i_oswt;
  assign xt_rsc_1_17_i_wea_d_core_sct_pff = xt_rsc_1_17_i_wea_d_core_psct_pff & xt_rsc_1_17_i_dswt_pff;
  assign xt_rsc_1_17_i_dswt_pff = core_wen & xt_rsc_1_17_i_oswt_pff;
  assign xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_17_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_dp (
  clk, rst, xt_rsc_1_16_i_qa_d, xt_rsc_1_16_i_qa_d_mxwt, xt_rsc_1_16_i_biwt, xt_rsc_1_16_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_16_i_qa_d;
  output [31:0] xt_rsc_1_16_i_qa_d_mxwt;
  input xt_rsc_1_16_i_biwt;
  input xt_rsc_1_16_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_16_i_bcwt;
  reg [31:0] xt_rsc_1_16_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_16_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_16_i_qa_d, xt_rsc_1_16_i_qa_d_bfwt,
      xt_rsc_1_16_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_16_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_16_i_bcwt <= ~((~(xt_rsc_1_16_i_bcwt | xt_rsc_1_16_i_biwt)) | xt_rsc_1_16_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_16_i_biwt ) begin
      xt_rsc_1_16_i_qa_d_bfwt <= xt_rsc_1_16_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_16_i_oswt, xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_16_i_biwt, xt_rsc_1_16_i_bdwt, xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_16_i_wea_d_core_sct_pff, xt_rsc_1_16_i_wea_d_core_psct_pff, xt_rsc_1_16_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_16_i_oswt;
  input xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_16_i_biwt;
  output xt_rsc_1_16_i_bdwt;
  output xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_16_i_wea_d_core_sct_pff;
  input xt_rsc_1_16_i_wea_d_core_psct_pff;
  input xt_rsc_1_16_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_16_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_16_i_bdwt = xt_rsc_1_16_i_oswt & core_wen;
  assign xt_rsc_1_16_i_biwt = (~ core_wten) & xt_rsc_1_16_i_oswt;
  assign xt_rsc_1_16_i_wea_d_core_sct_pff = xt_rsc_1_16_i_wea_d_core_psct_pff & xt_rsc_1_16_i_dswt_pff;
  assign xt_rsc_1_16_i_dswt_pff = core_wen & xt_rsc_1_16_i_oswt_pff;
  assign xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_16_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_dp (
  clk, rst, xt_rsc_1_15_i_qa_d, xt_rsc_1_15_i_qa_d_mxwt, xt_rsc_1_15_i_biwt, xt_rsc_1_15_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_15_i_qa_d;
  output [31:0] xt_rsc_1_15_i_qa_d_mxwt;
  input xt_rsc_1_15_i_biwt;
  input xt_rsc_1_15_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_15_i_bcwt;
  reg [31:0] xt_rsc_1_15_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_15_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_15_i_qa_d, xt_rsc_1_15_i_qa_d_bfwt,
      xt_rsc_1_15_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_15_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_15_i_bcwt <= ~((~(xt_rsc_1_15_i_bcwt | xt_rsc_1_15_i_biwt)) | xt_rsc_1_15_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_15_i_biwt ) begin
      xt_rsc_1_15_i_qa_d_bfwt <= xt_rsc_1_15_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_15_i_oswt, xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_15_i_biwt, xt_rsc_1_15_i_bdwt, xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_15_i_wea_d_core_sct_pff, xt_rsc_1_15_i_wea_d_core_psct_pff, xt_rsc_1_15_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_15_i_oswt;
  input xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_15_i_biwt;
  output xt_rsc_1_15_i_bdwt;
  output xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_15_i_wea_d_core_sct_pff;
  input xt_rsc_1_15_i_wea_d_core_psct_pff;
  input xt_rsc_1_15_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_15_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_15_i_bdwt = xt_rsc_1_15_i_oswt & core_wen;
  assign xt_rsc_1_15_i_biwt = (~ core_wten) & xt_rsc_1_15_i_oswt;
  assign xt_rsc_1_15_i_wea_d_core_sct_pff = xt_rsc_1_15_i_wea_d_core_psct_pff & xt_rsc_1_15_i_dswt_pff;
  assign xt_rsc_1_15_i_dswt_pff = core_wen & xt_rsc_1_15_i_oswt_pff;
  assign xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_15_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_dp (
  clk, rst, xt_rsc_1_14_i_qa_d, xt_rsc_1_14_i_qa_d_mxwt, xt_rsc_1_14_i_biwt, xt_rsc_1_14_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_14_i_qa_d;
  output [31:0] xt_rsc_1_14_i_qa_d_mxwt;
  input xt_rsc_1_14_i_biwt;
  input xt_rsc_1_14_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_14_i_bcwt;
  reg [31:0] xt_rsc_1_14_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_14_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_14_i_qa_d, xt_rsc_1_14_i_qa_d_bfwt,
      xt_rsc_1_14_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_14_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_14_i_bcwt <= ~((~(xt_rsc_1_14_i_bcwt | xt_rsc_1_14_i_biwt)) | xt_rsc_1_14_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_14_i_biwt ) begin
      xt_rsc_1_14_i_qa_d_bfwt <= xt_rsc_1_14_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_14_i_oswt, xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_14_i_biwt, xt_rsc_1_14_i_bdwt, xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_14_i_wea_d_core_sct_pff, xt_rsc_1_14_i_wea_d_core_psct_pff, xt_rsc_1_14_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_14_i_oswt;
  input xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_14_i_biwt;
  output xt_rsc_1_14_i_bdwt;
  output xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_14_i_wea_d_core_sct_pff;
  input xt_rsc_1_14_i_wea_d_core_psct_pff;
  input xt_rsc_1_14_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_14_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_14_i_bdwt = xt_rsc_1_14_i_oswt & core_wen;
  assign xt_rsc_1_14_i_biwt = (~ core_wten) & xt_rsc_1_14_i_oswt;
  assign xt_rsc_1_14_i_wea_d_core_sct_pff = xt_rsc_1_14_i_wea_d_core_psct_pff & xt_rsc_1_14_i_dswt_pff;
  assign xt_rsc_1_14_i_dswt_pff = core_wen & xt_rsc_1_14_i_oswt_pff;
  assign xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_14_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_dp (
  clk, rst, xt_rsc_1_13_i_qa_d, xt_rsc_1_13_i_qa_d_mxwt, xt_rsc_1_13_i_biwt, xt_rsc_1_13_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_13_i_qa_d;
  output [31:0] xt_rsc_1_13_i_qa_d_mxwt;
  input xt_rsc_1_13_i_biwt;
  input xt_rsc_1_13_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_13_i_bcwt;
  reg [31:0] xt_rsc_1_13_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_13_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_13_i_qa_d, xt_rsc_1_13_i_qa_d_bfwt,
      xt_rsc_1_13_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_13_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_13_i_bcwt <= ~((~(xt_rsc_1_13_i_bcwt | xt_rsc_1_13_i_biwt)) | xt_rsc_1_13_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_13_i_biwt ) begin
      xt_rsc_1_13_i_qa_d_bfwt <= xt_rsc_1_13_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_13_i_oswt, xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_13_i_biwt, xt_rsc_1_13_i_bdwt, xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_13_i_wea_d_core_sct_pff, xt_rsc_1_13_i_wea_d_core_psct_pff, xt_rsc_1_13_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_13_i_oswt;
  input xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_13_i_biwt;
  output xt_rsc_1_13_i_bdwt;
  output xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_13_i_wea_d_core_sct_pff;
  input xt_rsc_1_13_i_wea_d_core_psct_pff;
  input xt_rsc_1_13_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_13_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_13_i_bdwt = xt_rsc_1_13_i_oswt & core_wen;
  assign xt_rsc_1_13_i_biwt = (~ core_wten) & xt_rsc_1_13_i_oswt;
  assign xt_rsc_1_13_i_wea_d_core_sct_pff = xt_rsc_1_13_i_wea_d_core_psct_pff & xt_rsc_1_13_i_dswt_pff;
  assign xt_rsc_1_13_i_dswt_pff = core_wen & xt_rsc_1_13_i_oswt_pff;
  assign xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_13_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_dp (
  clk, rst, xt_rsc_1_12_i_qa_d, xt_rsc_1_12_i_qa_d_mxwt, xt_rsc_1_12_i_biwt, xt_rsc_1_12_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_12_i_qa_d;
  output [31:0] xt_rsc_1_12_i_qa_d_mxwt;
  input xt_rsc_1_12_i_biwt;
  input xt_rsc_1_12_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_12_i_bcwt;
  reg [31:0] xt_rsc_1_12_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_12_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_12_i_qa_d, xt_rsc_1_12_i_qa_d_bfwt,
      xt_rsc_1_12_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_12_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_12_i_bcwt <= ~((~(xt_rsc_1_12_i_bcwt | xt_rsc_1_12_i_biwt)) | xt_rsc_1_12_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_12_i_biwt ) begin
      xt_rsc_1_12_i_qa_d_bfwt <= xt_rsc_1_12_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_12_i_oswt, xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_12_i_biwt, xt_rsc_1_12_i_bdwt, xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_12_i_wea_d_core_sct_pff, xt_rsc_1_12_i_wea_d_core_psct_pff, xt_rsc_1_12_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_12_i_oswt;
  input xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_12_i_biwt;
  output xt_rsc_1_12_i_bdwt;
  output xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_12_i_wea_d_core_sct_pff;
  input xt_rsc_1_12_i_wea_d_core_psct_pff;
  input xt_rsc_1_12_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_12_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_12_i_bdwt = xt_rsc_1_12_i_oswt & core_wen;
  assign xt_rsc_1_12_i_biwt = (~ core_wten) & xt_rsc_1_12_i_oswt;
  assign xt_rsc_1_12_i_wea_d_core_sct_pff = xt_rsc_1_12_i_wea_d_core_psct_pff & xt_rsc_1_12_i_dswt_pff;
  assign xt_rsc_1_12_i_dswt_pff = core_wen & xt_rsc_1_12_i_oswt_pff;
  assign xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_12_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_dp (
  clk, rst, xt_rsc_1_11_i_qa_d, xt_rsc_1_11_i_qa_d_mxwt, xt_rsc_1_11_i_biwt, xt_rsc_1_11_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_11_i_qa_d;
  output [31:0] xt_rsc_1_11_i_qa_d_mxwt;
  input xt_rsc_1_11_i_biwt;
  input xt_rsc_1_11_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_11_i_bcwt;
  reg [31:0] xt_rsc_1_11_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_11_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_11_i_qa_d, xt_rsc_1_11_i_qa_d_bfwt,
      xt_rsc_1_11_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_11_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_11_i_bcwt <= ~((~(xt_rsc_1_11_i_bcwt | xt_rsc_1_11_i_biwt)) | xt_rsc_1_11_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_11_i_biwt ) begin
      xt_rsc_1_11_i_qa_d_bfwt <= xt_rsc_1_11_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_11_i_oswt, xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_11_i_biwt, xt_rsc_1_11_i_bdwt, xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_11_i_wea_d_core_sct_pff, xt_rsc_1_11_i_wea_d_core_psct_pff, xt_rsc_1_11_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_11_i_oswt;
  input xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_11_i_biwt;
  output xt_rsc_1_11_i_bdwt;
  output xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_11_i_wea_d_core_sct_pff;
  input xt_rsc_1_11_i_wea_d_core_psct_pff;
  input xt_rsc_1_11_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_11_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_11_i_bdwt = xt_rsc_1_11_i_oswt & core_wen;
  assign xt_rsc_1_11_i_biwt = (~ core_wten) & xt_rsc_1_11_i_oswt;
  assign xt_rsc_1_11_i_wea_d_core_sct_pff = xt_rsc_1_11_i_wea_d_core_psct_pff & xt_rsc_1_11_i_dswt_pff;
  assign xt_rsc_1_11_i_dswt_pff = core_wen & xt_rsc_1_11_i_oswt_pff;
  assign xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_11_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_dp (
  clk, rst, xt_rsc_1_10_i_qa_d, xt_rsc_1_10_i_qa_d_mxwt, xt_rsc_1_10_i_biwt, xt_rsc_1_10_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_10_i_qa_d;
  output [31:0] xt_rsc_1_10_i_qa_d_mxwt;
  input xt_rsc_1_10_i_biwt;
  input xt_rsc_1_10_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_10_i_bcwt;
  reg [31:0] xt_rsc_1_10_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_10_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_10_i_qa_d, xt_rsc_1_10_i_qa_d_bfwt,
      xt_rsc_1_10_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_10_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_10_i_bcwt <= ~((~(xt_rsc_1_10_i_bcwt | xt_rsc_1_10_i_biwt)) | xt_rsc_1_10_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_10_i_biwt ) begin
      xt_rsc_1_10_i_qa_d_bfwt <= xt_rsc_1_10_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_10_i_oswt, xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_10_i_biwt, xt_rsc_1_10_i_bdwt, xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_10_i_wea_d_core_sct_pff, xt_rsc_1_10_i_wea_d_core_psct_pff, xt_rsc_1_10_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_10_i_oswt;
  input xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_10_i_biwt;
  output xt_rsc_1_10_i_bdwt;
  output xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_10_i_wea_d_core_sct_pff;
  input xt_rsc_1_10_i_wea_d_core_psct_pff;
  input xt_rsc_1_10_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_10_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_10_i_bdwt = xt_rsc_1_10_i_oswt & core_wen;
  assign xt_rsc_1_10_i_biwt = (~ core_wten) & xt_rsc_1_10_i_oswt;
  assign xt_rsc_1_10_i_wea_d_core_sct_pff = xt_rsc_1_10_i_wea_d_core_psct_pff & xt_rsc_1_10_i_dswt_pff;
  assign xt_rsc_1_10_i_dswt_pff = core_wen & xt_rsc_1_10_i_oswt_pff;
  assign xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_10_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_dp (
  clk, rst, xt_rsc_1_9_i_qa_d, xt_rsc_1_9_i_qa_d_mxwt, xt_rsc_1_9_i_biwt, xt_rsc_1_9_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_9_i_qa_d;
  output [31:0] xt_rsc_1_9_i_qa_d_mxwt;
  input xt_rsc_1_9_i_biwt;
  input xt_rsc_1_9_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_9_i_bcwt;
  reg [31:0] xt_rsc_1_9_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_9_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_9_i_qa_d, xt_rsc_1_9_i_qa_d_bfwt,
      xt_rsc_1_9_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_9_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_9_i_bcwt <= ~((~(xt_rsc_1_9_i_bcwt | xt_rsc_1_9_i_biwt)) | xt_rsc_1_9_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_9_i_biwt ) begin
      xt_rsc_1_9_i_qa_d_bfwt <= xt_rsc_1_9_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_9_i_oswt, xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_9_i_biwt, xt_rsc_1_9_i_bdwt, xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_9_i_wea_d_core_sct_pff, xt_rsc_1_9_i_wea_d_core_psct_pff, xt_rsc_1_9_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_9_i_oswt;
  input xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_9_i_biwt;
  output xt_rsc_1_9_i_bdwt;
  output xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_9_i_wea_d_core_sct_pff;
  input xt_rsc_1_9_i_wea_d_core_psct_pff;
  input xt_rsc_1_9_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_9_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_9_i_bdwt = xt_rsc_1_9_i_oswt & core_wen;
  assign xt_rsc_1_9_i_biwt = (~ core_wten) & xt_rsc_1_9_i_oswt;
  assign xt_rsc_1_9_i_wea_d_core_sct_pff = xt_rsc_1_9_i_wea_d_core_psct_pff & xt_rsc_1_9_i_dswt_pff;
  assign xt_rsc_1_9_i_dswt_pff = core_wen & xt_rsc_1_9_i_oswt_pff;
  assign xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_9_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_dp (
  clk, rst, xt_rsc_1_8_i_qa_d, xt_rsc_1_8_i_qa_d_mxwt, xt_rsc_1_8_i_biwt, xt_rsc_1_8_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_8_i_qa_d;
  output [31:0] xt_rsc_1_8_i_qa_d_mxwt;
  input xt_rsc_1_8_i_biwt;
  input xt_rsc_1_8_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_8_i_bcwt;
  reg [31:0] xt_rsc_1_8_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_8_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_8_i_qa_d, xt_rsc_1_8_i_qa_d_bfwt,
      xt_rsc_1_8_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_8_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_8_i_bcwt <= ~((~(xt_rsc_1_8_i_bcwt | xt_rsc_1_8_i_biwt)) | xt_rsc_1_8_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_8_i_biwt ) begin
      xt_rsc_1_8_i_qa_d_bfwt <= xt_rsc_1_8_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_8_i_oswt, xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_8_i_biwt, xt_rsc_1_8_i_bdwt, xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_8_i_wea_d_core_sct_pff, xt_rsc_1_8_i_wea_d_core_psct_pff, xt_rsc_1_8_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_8_i_oswt;
  input xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_8_i_biwt;
  output xt_rsc_1_8_i_bdwt;
  output xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_8_i_wea_d_core_sct_pff;
  input xt_rsc_1_8_i_wea_d_core_psct_pff;
  input xt_rsc_1_8_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_8_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_8_i_bdwt = xt_rsc_1_8_i_oswt & core_wen;
  assign xt_rsc_1_8_i_biwt = (~ core_wten) & xt_rsc_1_8_i_oswt;
  assign xt_rsc_1_8_i_wea_d_core_sct_pff = xt_rsc_1_8_i_wea_d_core_psct_pff & xt_rsc_1_8_i_dswt_pff;
  assign xt_rsc_1_8_i_dswt_pff = core_wen & xt_rsc_1_8_i_oswt_pff;
  assign xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_8_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_dp (
  clk, rst, xt_rsc_1_7_i_qa_d, xt_rsc_1_7_i_qa_d_mxwt, xt_rsc_1_7_i_biwt, xt_rsc_1_7_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_7_i_qa_d;
  output [31:0] xt_rsc_1_7_i_qa_d_mxwt;
  input xt_rsc_1_7_i_biwt;
  input xt_rsc_1_7_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_7_i_bcwt;
  reg [31:0] xt_rsc_1_7_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_7_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_7_i_qa_d, xt_rsc_1_7_i_qa_d_bfwt,
      xt_rsc_1_7_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_7_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_7_i_bcwt <= ~((~(xt_rsc_1_7_i_bcwt | xt_rsc_1_7_i_biwt)) | xt_rsc_1_7_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_7_i_biwt ) begin
      xt_rsc_1_7_i_qa_d_bfwt <= xt_rsc_1_7_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_7_i_oswt, xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_7_i_biwt, xt_rsc_1_7_i_bdwt, xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_7_i_wea_d_core_sct_pff, xt_rsc_1_7_i_wea_d_core_psct_pff, xt_rsc_1_7_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_7_i_oswt;
  input xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_7_i_biwt;
  output xt_rsc_1_7_i_bdwt;
  output xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_7_i_wea_d_core_sct_pff;
  input xt_rsc_1_7_i_wea_d_core_psct_pff;
  input xt_rsc_1_7_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_7_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_7_i_bdwt = xt_rsc_1_7_i_oswt & core_wen;
  assign xt_rsc_1_7_i_biwt = (~ core_wten) & xt_rsc_1_7_i_oswt;
  assign xt_rsc_1_7_i_wea_d_core_sct_pff = xt_rsc_1_7_i_wea_d_core_psct_pff & xt_rsc_1_7_i_dswt_pff;
  assign xt_rsc_1_7_i_dswt_pff = core_wen & xt_rsc_1_7_i_oswt_pff;
  assign xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_7_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_dp (
  clk, rst, xt_rsc_1_6_i_qa_d, xt_rsc_1_6_i_qa_d_mxwt, xt_rsc_1_6_i_biwt, xt_rsc_1_6_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_6_i_qa_d;
  output [31:0] xt_rsc_1_6_i_qa_d_mxwt;
  input xt_rsc_1_6_i_biwt;
  input xt_rsc_1_6_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_6_i_bcwt;
  reg [31:0] xt_rsc_1_6_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_6_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_6_i_qa_d, xt_rsc_1_6_i_qa_d_bfwt,
      xt_rsc_1_6_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_6_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_6_i_bcwt <= ~((~(xt_rsc_1_6_i_bcwt | xt_rsc_1_6_i_biwt)) | xt_rsc_1_6_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_6_i_biwt ) begin
      xt_rsc_1_6_i_qa_d_bfwt <= xt_rsc_1_6_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_6_i_oswt, xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_6_i_biwt, xt_rsc_1_6_i_bdwt, xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_6_i_wea_d_core_sct_pff, xt_rsc_1_6_i_wea_d_core_psct_pff, xt_rsc_1_6_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_6_i_oswt;
  input xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_6_i_biwt;
  output xt_rsc_1_6_i_bdwt;
  output xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_6_i_wea_d_core_sct_pff;
  input xt_rsc_1_6_i_wea_d_core_psct_pff;
  input xt_rsc_1_6_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_6_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_6_i_bdwt = xt_rsc_1_6_i_oswt & core_wen;
  assign xt_rsc_1_6_i_biwt = (~ core_wten) & xt_rsc_1_6_i_oswt;
  assign xt_rsc_1_6_i_wea_d_core_sct_pff = xt_rsc_1_6_i_wea_d_core_psct_pff & xt_rsc_1_6_i_dswt_pff;
  assign xt_rsc_1_6_i_dswt_pff = core_wen & xt_rsc_1_6_i_oswt_pff;
  assign xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_6_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_dp (
  clk, rst, xt_rsc_1_5_i_qa_d, xt_rsc_1_5_i_qa_d_mxwt, xt_rsc_1_5_i_biwt, xt_rsc_1_5_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_5_i_qa_d;
  output [31:0] xt_rsc_1_5_i_qa_d_mxwt;
  input xt_rsc_1_5_i_biwt;
  input xt_rsc_1_5_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_5_i_bcwt;
  reg [31:0] xt_rsc_1_5_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_5_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_5_i_qa_d, xt_rsc_1_5_i_qa_d_bfwt,
      xt_rsc_1_5_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_5_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_5_i_bcwt <= ~((~(xt_rsc_1_5_i_bcwt | xt_rsc_1_5_i_biwt)) | xt_rsc_1_5_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_5_i_biwt ) begin
      xt_rsc_1_5_i_qa_d_bfwt <= xt_rsc_1_5_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_5_i_oswt, xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_5_i_biwt, xt_rsc_1_5_i_bdwt, xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_5_i_wea_d_core_sct_pff, xt_rsc_1_5_i_wea_d_core_psct_pff, xt_rsc_1_5_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_5_i_oswt;
  input xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_5_i_biwt;
  output xt_rsc_1_5_i_bdwt;
  output xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_5_i_wea_d_core_sct_pff;
  input xt_rsc_1_5_i_wea_d_core_psct_pff;
  input xt_rsc_1_5_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_5_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_5_i_bdwt = xt_rsc_1_5_i_oswt & core_wen;
  assign xt_rsc_1_5_i_biwt = (~ core_wten) & xt_rsc_1_5_i_oswt;
  assign xt_rsc_1_5_i_wea_d_core_sct_pff = xt_rsc_1_5_i_wea_d_core_psct_pff & xt_rsc_1_5_i_dswt_pff;
  assign xt_rsc_1_5_i_dswt_pff = core_wen & xt_rsc_1_5_i_oswt_pff;
  assign xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_5_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_dp (
  clk, rst, xt_rsc_1_4_i_qa_d, xt_rsc_1_4_i_qa_d_mxwt, xt_rsc_1_4_i_biwt, xt_rsc_1_4_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_4_i_qa_d;
  output [31:0] xt_rsc_1_4_i_qa_d_mxwt;
  input xt_rsc_1_4_i_biwt;
  input xt_rsc_1_4_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_4_i_bcwt;
  reg [31:0] xt_rsc_1_4_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_4_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_4_i_qa_d, xt_rsc_1_4_i_qa_d_bfwt,
      xt_rsc_1_4_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_4_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_4_i_bcwt <= ~((~(xt_rsc_1_4_i_bcwt | xt_rsc_1_4_i_biwt)) | xt_rsc_1_4_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_4_i_biwt ) begin
      xt_rsc_1_4_i_qa_d_bfwt <= xt_rsc_1_4_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_4_i_oswt, xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_4_i_biwt, xt_rsc_1_4_i_bdwt, xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_4_i_wea_d_core_sct_pff, xt_rsc_1_4_i_wea_d_core_psct_pff, xt_rsc_1_4_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_4_i_oswt;
  input xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_4_i_biwt;
  output xt_rsc_1_4_i_bdwt;
  output xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_4_i_wea_d_core_sct_pff;
  input xt_rsc_1_4_i_wea_d_core_psct_pff;
  input xt_rsc_1_4_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_4_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_4_i_bdwt = xt_rsc_1_4_i_oswt & core_wen;
  assign xt_rsc_1_4_i_biwt = (~ core_wten) & xt_rsc_1_4_i_oswt;
  assign xt_rsc_1_4_i_wea_d_core_sct_pff = xt_rsc_1_4_i_wea_d_core_psct_pff & xt_rsc_1_4_i_dswt_pff;
  assign xt_rsc_1_4_i_dswt_pff = core_wen & xt_rsc_1_4_i_oswt_pff;
  assign xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_4_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_dp (
  clk, rst, xt_rsc_1_3_i_qa_d, xt_rsc_1_3_i_qa_d_mxwt, xt_rsc_1_3_i_biwt, xt_rsc_1_3_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_3_i_qa_d;
  output [31:0] xt_rsc_1_3_i_qa_d_mxwt;
  input xt_rsc_1_3_i_biwt;
  input xt_rsc_1_3_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_3_i_bcwt;
  reg [31:0] xt_rsc_1_3_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_3_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_3_i_qa_d, xt_rsc_1_3_i_qa_d_bfwt,
      xt_rsc_1_3_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_3_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_3_i_bcwt <= ~((~(xt_rsc_1_3_i_bcwt | xt_rsc_1_3_i_biwt)) | xt_rsc_1_3_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_3_i_biwt ) begin
      xt_rsc_1_3_i_qa_d_bfwt <= xt_rsc_1_3_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_3_i_oswt, xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_3_i_biwt, xt_rsc_1_3_i_bdwt, xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_3_i_wea_d_core_sct_pff, xt_rsc_1_3_i_wea_d_core_psct_pff, xt_rsc_1_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_3_i_oswt;
  input xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_3_i_biwt;
  output xt_rsc_1_3_i_bdwt;
  output xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_3_i_wea_d_core_sct_pff;
  input xt_rsc_1_3_i_wea_d_core_psct_pff;
  input xt_rsc_1_3_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_3_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_3_i_bdwt = xt_rsc_1_3_i_oswt & core_wen;
  assign xt_rsc_1_3_i_biwt = (~ core_wten) & xt_rsc_1_3_i_oswt;
  assign xt_rsc_1_3_i_wea_d_core_sct_pff = xt_rsc_1_3_i_wea_d_core_psct_pff & xt_rsc_1_3_i_dswt_pff;
  assign xt_rsc_1_3_i_dswt_pff = core_wen & xt_rsc_1_3_i_oswt_pff;
  assign xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_3_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_dp (
  clk, rst, xt_rsc_1_2_i_qa_d, xt_rsc_1_2_i_qa_d_mxwt, xt_rsc_1_2_i_biwt, xt_rsc_1_2_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_2_i_qa_d;
  output [31:0] xt_rsc_1_2_i_qa_d_mxwt;
  input xt_rsc_1_2_i_biwt;
  input xt_rsc_1_2_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_2_i_bcwt;
  reg [31:0] xt_rsc_1_2_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_2_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_2_i_qa_d, xt_rsc_1_2_i_qa_d_bfwt,
      xt_rsc_1_2_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_2_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_2_i_bcwt <= ~((~(xt_rsc_1_2_i_bcwt | xt_rsc_1_2_i_biwt)) | xt_rsc_1_2_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_2_i_biwt ) begin
      xt_rsc_1_2_i_qa_d_bfwt <= xt_rsc_1_2_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_2_i_oswt, xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_2_i_biwt, xt_rsc_1_2_i_bdwt, xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_2_i_wea_d_core_sct_pff, xt_rsc_1_2_i_wea_d_core_psct_pff, xt_rsc_1_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_2_i_oswt;
  input xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_2_i_biwt;
  output xt_rsc_1_2_i_bdwt;
  output xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_2_i_wea_d_core_sct_pff;
  input xt_rsc_1_2_i_wea_d_core_psct_pff;
  input xt_rsc_1_2_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_2_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_2_i_bdwt = xt_rsc_1_2_i_oswt & core_wen;
  assign xt_rsc_1_2_i_biwt = (~ core_wten) & xt_rsc_1_2_i_oswt;
  assign xt_rsc_1_2_i_wea_d_core_sct_pff = xt_rsc_1_2_i_wea_d_core_psct_pff & xt_rsc_1_2_i_dswt_pff;
  assign xt_rsc_1_2_i_dswt_pff = core_wen & xt_rsc_1_2_i_oswt_pff;
  assign xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_2_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_dp (
  clk, rst, xt_rsc_1_1_i_qa_d, xt_rsc_1_1_i_qa_d_mxwt, xt_rsc_1_1_i_biwt, xt_rsc_1_1_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_1_i_qa_d;
  output [31:0] xt_rsc_1_1_i_qa_d_mxwt;
  input xt_rsc_1_1_i_biwt;
  input xt_rsc_1_1_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_1_i_bcwt;
  reg [31:0] xt_rsc_1_1_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_1_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_1_i_qa_d, xt_rsc_1_1_i_qa_d_bfwt,
      xt_rsc_1_1_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_1_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_1_i_bcwt <= ~((~(xt_rsc_1_1_i_bcwt | xt_rsc_1_1_i_biwt)) | xt_rsc_1_1_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_1_i_biwt ) begin
      xt_rsc_1_1_i_qa_d_bfwt <= xt_rsc_1_1_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_1_i_oswt, xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_1_i_biwt, xt_rsc_1_1_i_bdwt, xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_1_i_wea_d_core_sct_pff, xt_rsc_1_1_i_wea_d_core_psct_pff, xt_rsc_1_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_1_i_oswt;
  input xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_1_i_biwt;
  output xt_rsc_1_1_i_bdwt;
  output xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_1_i_wea_d_core_sct_pff;
  input xt_rsc_1_1_i_wea_d_core_psct_pff;
  input xt_rsc_1_1_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_1_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_1_i_bdwt = xt_rsc_1_1_i_oswt & core_wen;
  assign xt_rsc_1_1_i_biwt = (~ core_wten) & xt_rsc_1_1_i_oswt;
  assign xt_rsc_1_1_i_wea_d_core_sct_pff = xt_rsc_1_1_i_wea_d_core_psct_pff & xt_rsc_1_1_i_dswt_pff;
  assign xt_rsc_1_1_i_dswt_pff = core_wen & xt_rsc_1_1_i_oswt_pff;
  assign xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_1_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_dp (
  clk, rst, xt_rsc_1_0_i_qa_d, xt_rsc_1_0_i_qa_d_mxwt, xt_rsc_1_0_i_biwt, xt_rsc_1_0_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_0_i_qa_d;
  output [31:0] xt_rsc_1_0_i_qa_d_mxwt;
  input xt_rsc_1_0_i_biwt;
  input xt_rsc_1_0_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_1_0_i_bcwt;
  reg [31:0] xt_rsc_1_0_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_0_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_1_0_i_qa_d, xt_rsc_1_0_i_qa_d_bfwt,
      xt_rsc_1_0_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_1_0_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_1_0_i_bcwt <= ~((~(xt_rsc_1_0_i_bcwt | xt_rsc_1_0_i_biwt)) | xt_rsc_1_0_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_1_0_i_biwt ) begin
      xt_rsc_1_0_i_qa_d_bfwt <= xt_rsc_1_0_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_ctrl (
  core_wen, core_wten, xt_rsc_1_0_i_oswt, xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_0_i_biwt, xt_rsc_1_0_i_bdwt, xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_1_0_i_wea_d_core_sct_pff, xt_rsc_1_0_i_wea_d_core_psct_pff, xt_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_1_0_i_oswt;
  input xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_0_i_biwt;
  output xt_rsc_1_0_i_bdwt;
  output xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_1_0_i_wea_d_core_sct_pff;
  input xt_rsc_1_0_i_wea_d_core_psct_pff;
  input xt_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_0_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_1_0_i_bdwt = xt_rsc_1_0_i_oswt & core_wen;
  assign xt_rsc_1_0_i_biwt = (~ core_wten) & xt_rsc_1_0_i_oswt;
  assign xt_rsc_1_0_i_wea_d_core_sct_pff = xt_rsc_1_0_i_wea_d_core_psct_pff & xt_rsc_1_0_i_dswt_pff;
  assign xt_rsc_1_0_i_dswt_pff = core_wen & xt_rsc_1_0_i_oswt_pff;
  assign xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_1_0_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_dp (
  clk, rst, xt_rsc_0_31_i_qa_d, xt_rsc_0_31_i_qa_d_mxwt, xt_rsc_0_31_i_biwt, xt_rsc_0_31_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_31_i_qa_d;
  output [31:0] xt_rsc_0_31_i_qa_d_mxwt;
  input xt_rsc_0_31_i_biwt;
  input xt_rsc_0_31_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_31_i_bcwt;
  reg [31:0] xt_rsc_0_31_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_31_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_31_i_qa_d, xt_rsc_0_31_i_qa_d_bfwt,
      xt_rsc_0_31_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_31_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_31_i_bcwt <= ~((~(xt_rsc_0_31_i_bcwt | xt_rsc_0_31_i_biwt)) | xt_rsc_0_31_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_31_i_biwt ) begin
      xt_rsc_0_31_i_qa_d_bfwt <= xt_rsc_0_31_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_31_i_oswt, xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_31_i_biwt, xt_rsc_0_31_i_bdwt, xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_31_i_wea_d_core_sct_pff, xt_rsc_0_31_i_wea_d_core_psct_pff, xt_rsc_0_31_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_31_i_oswt;
  input xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_31_i_biwt;
  output xt_rsc_0_31_i_bdwt;
  output xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_31_i_wea_d_core_sct_pff;
  input xt_rsc_0_31_i_wea_d_core_psct_pff;
  input xt_rsc_0_31_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_31_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_31_i_bdwt = xt_rsc_0_31_i_oswt & core_wen;
  assign xt_rsc_0_31_i_biwt = (~ core_wten) & xt_rsc_0_31_i_oswt;
  assign xt_rsc_0_31_i_wea_d_core_sct_pff = xt_rsc_0_31_i_wea_d_core_psct_pff & xt_rsc_0_31_i_dswt_pff;
  assign xt_rsc_0_31_i_dswt_pff = core_wen & xt_rsc_0_31_i_oswt_pff;
  assign xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_31_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_dp (
  clk, rst, xt_rsc_0_30_i_qa_d, xt_rsc_0_30_i_qa_d_mxwt, xt_rsc_0_30_i_biwt, xt_rsc_0_30_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_30_i_qa_d;
  output [31:0] xt_rsc_0_30_i_qa_d_mxwt;
  input xt_rsc_0_30_i_biwt;
  input xt_rsc_0_30_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_30_i_bcwt;
  reg [31:0] xt_rsc_0_30_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_30_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_30_i_qa_d, xt_rsc_0_30_i_qa_d_bfwt,
      xt_rsc_0_30_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_30_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_30_i_bcwt <= ~((~(xt_rsc_0_30_i_bcwt | xt_rsc_0_30_i_biwt)) | xt_rsc_0_30_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_30_i_biwt ) begin
      xt_rsc_0_30_i_qa_d_bfwt <= xt_rsc_0_30_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_30_i_oswt, xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_30_i_biwt, xt_rsc_0_30_i_bdwt, xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_30_i_wea_d_core_sct_pff, xt_rsc_0_30_i_wea_d_core_psct_pff, xt_rsc_0_30_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_30_i_oswt;
  input xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_30_i_biwt;
  output xt_rsc_0_30_i_bdwt;
  output xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_30_i_wea_d_core_sct_pff;
  input xt_rsc_0_30_i_wea_d_core_psct_pff;
  input xt_rsc_0_30_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_30_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_30_i_bdwt = xt_rsc_0_30_i_oswt & core_wen;
  assign xt_rsc_0_30_i_biwt = (~ core_wten) & xt_rsc_0_30_i_oswt;
  assign xt_rsc_0_30_i_wea_d_core_sct_pff = xt_rsc_0_30_i_wea_d_core_psct_pff & xt_rsc_0_30_i_dswt_pff;
  assign xt_rsc_0_30_i_dswt_pff = core_wen & xt_rsc_0_30_i_oswt_pff;
  assign xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_30_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_dp (
  clk, rst, xt_rsc_0_29_i_qa_d, xt_rsc_0_29_i_qa_d_mxwt, xt_rsc_0_29_i_biwt, xt_rsc_0_29_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_29_i_qa_d;
  output [31:0] xt_rsc_0_29_i_qa_d_mxwt;
  input xt_rsc_0_29_i_biwt;
  input xt_rsc_0_29_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_29_i_bcwt;
  reg [31:0] xt_rsc_0_29_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_29_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_29_i_qa_d, xt_rsc_0_29_i_qa_d_bfwt,
      xt_rsc_0_29_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_29_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_29_i_bcwt <= ~((~(xt_rsc_0_29_i_bcwt | xt_rsc_0_29_i_biwt)) | xt_rsc_0_29_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_29_i_biwt ) begin
      xt_rsc_0_29_i_qa_d_bfwt <= xt_rsc_0_29_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_29_i_oswt, xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_29_i_biwt, xt_rsc_0_29_i_bdwt, xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_29_i_wea_d_core_sct_pff, xt_rsc_0_29_i_wea_d_core_psct_pff, xt_rsc_0_29_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_29_i_oswt;
  input xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_29_i_biwt;
  output xt_rsc_0_29_i_bdwt;
  output xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_29_i_wea_d_core_sct_pff;
  input xt_rsc_0_29_i_wea_d_core_psct_pff;
  input xt_rsc_0_29_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_29_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_29_i_bdwt = xt_rsc_0_29_i_oswt & core_wen;
  assign xt_rsc_0_29_i_biwt = (~ core_wten) & xt_rsc_0_29_i_oswt;
  assign xt_rsc_0_29_i_wea_d_core_sct_pff = xt_rsc_0_29_i_wea_d_core_psct_pff & xt_rsc_0_29_i_dswt_pff;
  assign xt_rsc_0_29_i_dswt_pff = core_wen & xt_rsc_0_29_i_oswt_pff;
  assign xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_29_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_dp (
  clk, rst, xt_rsc_0_28_i_qa_d, xt_rsc_0_28_i_qa_d_mxwt, xt_rsc_0_28_i_biwt, xt_rsc_0_28_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_28_i_qa_d;
  output [31:0] xt_rsc_0_28_i_qa_d_mxwt;
  input xt_rsc_0_28_i_biwt;
  input xt_rsc_0_28_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_28_i_bcwt;
  reg [31:0] xt_rsc_0_28_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_28_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_28_i_qa_d, xt_rsc_0_28_i_qa_d_bfwt,
      xt_rsc_0_28_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_28_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_28_i_bcwt <= ~((~(xt_rsc_0_28_i_bcwt | xt_rsc_0_28_i_biwt)) | xt_rsc_0_28_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_28_i_biwt ) begin
      xt_rsc_0_28_i_qa_d_bfwt <= xt_rsc_0_28_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_28_i_oswt, xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_28_i_biwt, xt_rsc_0_28_i_bdwt, xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_28_i_wea_d_core_sct_pff, xt_rsc_0_28_i_wea_d_core_psct_pff, xt_rsc_0_28_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_28_i_oswt;
  input xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_28_i_biwt;
  output xt_rsc_0_28_i_bdwt;
  output xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_28_i_wea_d_core_sct_pff;
  input xt_rsc_0_28_i_wea_d_core_psct_pff;
  input xt_rsc_0_28_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_28_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_28_i_bdwt = xt_rsc_0_28_i_oswt & core_wen;
  assign xt_rsc_0_28_i_biwt = (~ core_wten) & xt_rsc_0_28_i_oswt;
  assign xt_rsc_0_28_i_wea_d_core_sct_pff = xt_rsc_0_28_i_wea_d_core_psct_pff & xt_rsc_0_28_i_dswt_pff;
  assign xt_rsc_0_28_i_dswt_pff = core_wen & xt_rsc_0_28_i_oswt_pff;
  assign xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_28_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_dp (
  clk, rst, xt_rsc_0_27_i_qa_d, xt_rsc_0_27_i_qa_d_mxwt, xt_rsc_0_27_i_biwt, xt_rsc_0_27_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_27_i_qa_d;
  output [31:0] xt_rsc_0_27_i_qa_d_mxwt;
  input xt_rsc_0_27_i_biwt;
  input xt_rsc_0_27_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_27_i_bcwt;
  reg [31:0] xt_rsc_0_27_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_27_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_27_i_qa_d, xt_rsc_0_27_i_qa_d_bfwt,
      xt_rsc_0_27_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_27_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_27_i_bcwt <= ~((~(xt_rsc_0_27_i_bcwt | xt_rsc_0_27_i_biwt)) | xt_rsc_0_27_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_27_i_biwt ) begin
      xt_rsc_0_27_i_qa_d_bfwt <= xt_rsc_0_27_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_27_i_oswt, xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_27_i_biwt, xt_rsc_0_27_i_bdwt, xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_27_i_wea_d_core_sct_pff, xt_rsc_0_27_i_wea_d_core_psct_pff, xt_rsc_0_27_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_27_i_oswt;
  input xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_27_i_biwt;
  output xt_rsc_0_27_i_bdwt;
  output xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_27_i_wea_d_core_sct_pff;
  input xt_rsc_0_27_i_wea_d_core_psct_pff;
  input xt_rsc_0_27_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_27_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_27_i_bdwt = xt_rsc_0_27_i_oswt & core_wen;
  assign xt_rsc_0_27_i_biwt = (~ core_wten) & xt_rsc_0_27_i_oswt;
  assign xt_rsc_0_27_i_wea_d_core_sct_pff = xt_rsc_0_27_i_wea_d_core_psct_pff & xt_rsc_0_27_i_dswt_pff;
  assign xt_rsc_0_27_i_dswt_pff = core_wen & xt_rsc_0_27_i_oswt_pff;
  assign xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_27_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_dp (
  clk, rst, xt_rsc_0_26_i_qa_d, xt_rsc_0_26_i_qa_d_mxwt, xt_rsc_0_26_i_biwt, xt_rsc_0_26_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_26_i_qa_d;
  output [31:0] xt_rsc_0_26_i_qa_d_mxwt;
  input xt_rsc_0_26_i_biwt;
  input xt_rsc_0_26_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_26_i_bcwt;
  reg [31:0] xt_rsc_0_26_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_26_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_26_i_qa_d, xt_rsc_0_26_i_qa_d_bfwt,
      xt_rsc_0_26_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_26_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_26_i_bcwt <= ~((~(xt_rsc_0_26_i_bcwt | xt_rsc_0_26_i_biwt)) | xt_rsc_0_26_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_26_i_biwt ) begin
      xt_rsc_0_26_i_qa_d_bfwt <= xt_rsc_0_26_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_26_i_oswt, xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_26_i_biwt, xt_rsc_0_26_i_bdwt, xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_26_i_wea_d_core_sct_pff, xt_rsc_0_26_i_wea_d_core_psct_pff, xt_rsc_0_26_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_26_i_oswt;
  input xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_26_i_biwt;
  output xt_rsc_0_26_i_bdwt;
  output xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_26_i_wea_d_core_sct_pff;
  input xt_rsc_0_26_i_wea_d_core_psct_pff;
  input xt_rsc_0_26_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_26_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_26_i_bdwt = xt_rsc_0_26_i_oswt & core_wen;
  assign xt_rsc_0_26_i_biwt = (~ core_wten) & xt_rsc_0_26_i_oswt;
  assign xt_rsc_0_26_i_wea_d_core_sct_pff = xt_rsc_0_26_i_wea_d_core_psct_pff & xt_rsc_0_26_i_dswt_pff;
  assign xt_rsc_0_26_i_dswt_pff = core_wen & xt_rsc_0_26_i_oswt_pff;
  assign xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_26_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_dp (
  clk, rst, xt_rsc_0_25_i_qa_d, xt_rsc_0_25_i_qa_d_mxwt, xt_rsc_0_25_i_biwt, xt_rsc_0_25_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_25_i_qa_d;
  output [31:0] xt_rsc_0_25_i_qa_d_mxwt;
  input xt_rsc_0_25_i_biwt;
  input xt_rsc_0_25_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_25_i_bcwt;
  reg [31:0] xt_rsc_0_25_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_25_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_25_i_qa_d, xt_rsc_0_25_i_qa_d_bfwt,
      xt_rsc_0_25_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_25_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_25_i_bcwt <= ~((~(xt_rsc_0_25_i_bcwt | xt_rsc_0_25_i_biwt)) | xt_rsc_0_25_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_25_i_biwt ) begin
      xt_rsc_0_25_i_qa_d_bfwt <= xt_rsc_0_25_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_25_i_oswt, xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_25_i_biwt, xt_rsc_0_25_i_bdwt, xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_25_i_wea_d_core_sct_pff, xt_rsc_0_25_i_wea_d_core_psct_pff, xt_rsc_0_25_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_25_i_oswt;
  input xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_25_i_biwt;
  output xt_rsc_0_25_i_bdwt;
  output xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_25_i_wea_d_core_sct_pff;
  input xt_rsc_0_25_i_wea_d_core_psct_pff;
  input xt_rsc_0_25_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_25_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_25_i_bdwt = xt_rsc_0_25_i_oswt & core_wen;
  assign xt_rsc_0_25_i_biwt = (~ core_wten) & xt_rsc_0_25_i_oswt;
  assign xt_rsc_0_25_i_wea_d_core_sct_pff = xt_rsc_0_25_i_wea_d_core_psct_pff & xt_rsc_0_25_i_dswt_pff;
  assign xt_rsc_0_25_i_dswt_pff = core_wen & xt_rsc_0_25_i_oswt_pff;
  assign xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_25_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_dp (
  clk, rst, xt_rsc_0_24_i_qa_d, xt_rsc_0_24_i_qa_d_mxwt, xt_rsc_0_24_i_biwt, xt_rsc_0_24_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_24_i_qa_d;
  output [31:0] xt_rsc_0_24_i_qa_d_mxwt;
  input xt_rsc_0_24_i_biwt;
  input xt_rsc_0_24_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_24_i_bcwt;
  reg [31:0] xt_rsc_0_24_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_24_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_24_i_qa_d, xt_rsc_0_24_i_qa_d_bfwt,
      xt_rsc_0_24_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_24_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_24_i_bcwt <= ~((~(xt_rsc_0_24_i_bcwt | xt_rsc_0_24_i_biwt)) | xt_rsc_0_24_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_24_i_biwt ) begin
      xt_rsc_0_24_i_qa_d_bfwt <= xt_rsc_0_24_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_24_i_oswt, xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_24_i_biwt, xt_rsc_0_24_i_bdwt, xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_24_i_wea_d_core_sct_pff, xt_rsc_0_24_i_wea_d_core_psct_pff, xt_rsc_0_24_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_24_i_oswt;
  input xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_24_i_biwt;
  output xt_rsc_0_24_i_bdwt;
  output xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_24_i_wea_d_core_sct_pff;
  input xt_rsc_0_24_i_wea_d_core_psct_pff;
  input xt_rsc_0_24_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_24_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_24_i_bdwt = xt_rsc_0_24_i_oswt & core_wen;
  assign xt_rsc_0_24_i_biwt = (~ core_wten) & xt_rsc_0_24_i_oswt;
  assign xt_rsc_0_24_i_wea_d_core_sct_pff = xt_rsc_0_24_i_wea_d_core_psct_pff & xt_rsc_0_24_i_dswt_pff;
  assign xt_rsc_0_24_i_dswt_pff = core_wen & xt_rsc_0_24_i_oswt_pff;
  assign xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_24_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_dp (
  clk, rst, xt_rsc_0_23_i_qa_d, xt_rsc_0_23_i_qa_d_mxwt, xt_rsc_0_23_i_biwt, xt_rsc_0_23_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_23_i_qa_d;
  output [31:0] xt_rsc_0_23_i_qa_d_mxwt;
  input xt_rsc_0_23_i_biwt;
  input xt_rsc_0_23_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_23_i_bcwt;
  reg [31:0] xt_rsc_0_23_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_23_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_23_i_qa_d, xt_rsc_0_23_i_qa_d_bfwt,
      xt_rsc_0_23_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_23_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_23_i_bcwt <= ~((~(xt_rsc_0_23_i_bcwt | xt_rsc_0_23_i_biwt)) | xt_rsc_0_23_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_23_i_biwt ) begin
      xt_rsc_0_23_i_qa_d_bfwt <= xt_rsc_0_23_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_23_i_oswt, xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_23_i_biwt, xt_rsc_0_23_i_bdwt, xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_23_i_wea_d_core_sct_pff, xt_rsc_0_23_i_wea_d_core_psct_pff, xt_rsc_0_23_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_23_i_oswt;
  input xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_23_i_biwt;
  output xt_rsc_0_23_i_bdwt;
  output xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_23_i_wea_d_core_sct_pff;
  input xt_rsc_0_23_i_wea_d_core_psct_pff;
  input xt_rsc_0_23_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_23_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_23_i_bdwt = xt_rsc_0_23_i_oswt & core_wen;
  assign xt_rsc_0_23_i_biwt = (~ core_wten) & xt_rsc_0_23_i_oswt;
  assign xt_rsc_0_23_i_wea_d_core_sct_pff = xt_rsc_0_23_i_wea_d_core_psct_pff & xt_rsc_0_23_i_dswt_pff;
  assign xt_rsc_0_23_i_dswt_pff = core_wen & xt_rsc_0_23_i_oswt_pff;
  assign xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_23_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_dp (
  clk, rst, xt_rsc_0_22_i_qa_d, xt_rsc_0_22_i_qa_d_mxwt, xt_rsc_0_22_i_biwt, xt_rsc_0_22_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_22_i_qa_d;
  output [31:0] xt_rsc_0_22_i_qa_d_mxwt;
  input xt_rsc_0_22_i_biwt;
  input xt_rsc_0_22_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_22_i_bcwt;
  reg [31:0] xt_rsc_0_22_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_22_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_22_i_qa_d, xt_rsc_0_22_i_qa_d_bfwt,
      xt_rsc_0_22_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_22_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_22_i_bcwt <= ~((~(xt_rsc_0_22_i_bcwt | xt_rsc_0_22_i_biwt)) | xt_rsc_0_22_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_22_i_biwt ) begin
      xt_rsc_0_22_i_qa_d_bfwt <= xt_rsc_0_22_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_22_i_oswt, xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_22_i_biwt, xt_rsc_0_22_i_bdwt, xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_22_i_wea_d_core_sct_pff, xt_rsc_0_22_i_wea_d_core_psct_pff, xt_rsc_0_22_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_22_i_oswt;
  input xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_22_i_biwt;
  output xt_rsc_0_22_i_bdwt;
  output xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_22_i_wea_d_core_sct_pff;
  input xt_rsc_0_22_i_wea_d_core_psct_pff;
  input xt_rsc_0_22_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_22_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_22_i_bdwt = xt_rsc_0_22_i_oswt & core_wen;
  assign xt_rsc_0_22_i_biwt = (~ core_wten) & xt_rsc_0_22_i_oswt;
  assign xt_rsc_0_22_i_wea_d_core_sct_pff = xt_rsc_0_22_i_wea_d_core_psct_pff & xt_rsc_0_22_i_dswt_pff;
  assign xt_rsc_0_22_i_dswt_pff = core_wen & xt_rsc_0_22_i_oswt_pff;
  assign xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_22_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_dp (
  clk, rst, xt_rsc_0_21_i_qa_d, xt_rsc_0_21_i_qa_d_mxwt, xt_rsc_0_21_i_biwt, xt_rsc_0_21_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_21_i_qa_d;
  output [31:0] xt_rsc_0_21_i_qa_d_mxwt;
  input xt_rsc_0_21_i_biwt;
  input xt_rsc_0_21_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_21_i_bcwt;
  reg [31:0] xt_rsc_0_21_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_21_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_21_i_qa_d, xt_rsc_0_21_i_qa_d_bfwt,
      xt_rsc_0_21_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_21_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_21_i_bcwt <= ~((~(xt_rsc_0_21_i_bcwt | xt_rsc_0_21_i_biwt)) | xt_rsc_0_21_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_21_i_biwt ) begin
      xt_rsc_0_21_i_qa_d_bfwt <= xt_rsc_0_21_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_21_i_oswt, xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_21_i_biwt, xt_rsc_0_21_i_bdwt, xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_21_i_wea_d_core_sct_pff, xt_rsc_0_21_i_wea_d_core_psct_pff, xt_rsc_0_21_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_21_i_oswt;
  input xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_21_i_biwt;
  output xt_rsc_0_21_i_bdwt;
  output xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_21_i_wea_d_core_sct_pff;
  input xt_rsc_0_21_i_wea_d_core_psct_pff;
  input xt_rsc_0_21_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_21_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_21_i_bdwt = xt_rsc_0_21_i_oswt & core_wen;
  assign xt_rsc_0_21_i_biwt = (~ core_wten) & xt_rsc_0_21_i_oswt;
  assign xt_rsc_0_21_i_wea_d_core_sct_pff = xt_rsc_0_21_i_wea_d_core_psct_pff & xt_rsc_0_21_i_dswt_pff;
  assign xt_rsc_0_21_i_dswt_pff = core_wen & xt_rsc_0_21_i_oswt_pff;
  assign xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_21_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_dp (
  clk, rst, xt_rsc_0_20_i_qa_d, xt_rsc_0_20_i_qa_d_mxwt, xt_rsc_0_20_i_biwt, xt_rsc_0_20_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_20_i_qa_d;
  output [31:0] xt_rsc_0_20_i_qa_d_mxwt;
  input xt_rsc_0_20_i_biwt;
  input xt_rsc_0_20_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_20_i_bcwt;
  reg [31:0] xt_rsc_0_20_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_20_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_20_i_qa_d, xt_rsc_0_20_i_qa_d_bfwt,
      xt_rsc_0_20_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_20_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_20_i_bcwt <= ~((~(xt_rsc_0_20_i_bcwt | xt_rsc_0_20_i_biwt)) | xt_rsc_0_20_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_20_i_biwt ) begin
      xt_rsc_0_20_i_qa_d_bfwt <= xt_rsc_0_20_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_20_i_oswt, xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_20_i_biwt, xt_rsc_0_20_i_bdwt, xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_20_i_wea_d_core_sct_pff, xt_rsc_0_20_i_wea_d_core_psct_pff, xt_rsc_0_20_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_20_i_oswt;
  input xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_20_i_biwt;
  output xt_rsc_0_20_i_bdwt;
  output xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_20_i_wea_d_core_sct_pff;
  input xt_rsc_0_20_i_wea_d_core_psct_pff;
  input xt_rsc_0_20_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_20_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_20_i_bdwt = xt_rsc_0_20_i_oswt & core_wen;
  assign xt_rsc_0_20_i_biwt = (~ core_wten) & xt_rsc_0_20_i_oswt;
  assign xt_rsc_0_20_i_wea_d_core_sct_pff = xt_rsc_0_20_i_wea_d_core_psct_pff & xt_rsc_0_20_i_dswt_pff;
  assign xt_rsc_0_20_i_dswt_pff = core_wen & xt_rsc_0_20_i_oswt_pff;
  assign xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_20_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_dp (
  clk, rst, xt_rsc_0_19_i_qa_d, xt_rsc_0_19_i_qa_d_mxwt, xt_rsc_0_19_i_biwt, xt_rsc_0_19_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_19_i_qa_d;
  output [31:0] xt_rsc_0_19_i_qa_d_mxwt;
  input xt_rsc_0_19_i_biwt;
  input xt_rsc_0_19_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_19_i_bcwt;
  reg [31:0] xt_rsc_0_19_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_19_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_19_i_qa_d, xt_rsc_0_19_i_qa_d_bfwt,
      xt_rsc_0_19_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_19_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_19_i_bcwt <= ~((~(xt_rsc_0_19_i_bcwt | xt_rsc_0_19_i_biwt)) | xt_rsc_0_19_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_19_i_biwt ) begin
      xt_rsc_0_19_i_qa_d_bfwt <= xt_rsc_0_19_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_19_i_oswt, xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_19_i_biwt, xt_rsc_0_19_i_bdwt, xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_19_i_wea_d_core_sct_pff, xt_rsc_0_19_i_wea_d_core_psct_pff, xt_rsc_0_19_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_19_i_oswt;
  input xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_19_i_biwt;
  output xt_rsc_0_19_i_bdwt;
  output xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_19_i_wea_d_core_sct_pff;
  input xt_rsc_0_19_i_wea_d_core_psct_pff;
  input xt_rsc_0_19_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_19_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_19_i_bdwt = xt_rsc_0_19_i_oswt & core_wen;
  assign xt_rsc_0_19_i_biwt = (~ core_wten) & xt_rsc_0_19_i_oswt;
  assign xt_rsc_0_19_i_wea_d_core_sct_pff = xt_rsc_0_19_i_wea_d_core_psct_pff & xt_rsc_0_19_i_dswt_pff;
  assign xt_rsc_0_19_i_dswt_pff = core_wen & xt_rsc_0_19_i_oswt_pff;
  assign xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_19_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_dp (
  clk, rst, xt_rsc_0_18_i_qa_d, xt_rsc_0_18_i_qa_d_mxwt, xt_rsc_0_18_i_biwt, xt_rsc_0_18_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_18_i_qa_d;
  output [31:0] xt_rsc_0_18_i_qa_d_mxwt;
  input xt_rsc_0_18_i_biwt;
  input xt_rsc_0_18_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_18_i_bcwt;
  reg [31:0] xt_rsc_0_18_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_18_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_18_i_qa_d, xt_rsc_0_18_i_qa_d_bfwt,
      xt_rsc_0_18_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_18_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_18_i_bcwt <= ~((~(xt_rsc_0_18_i_bcwt | xt_rsc_0_18_i_biwt)) | xt_rsc_0_18_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_18_i_biwt ) begin
      xt_rsc_0_18_i_qa_d_bfwt <= xt_rsc_0_18_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_18_i_oswt, xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_18_i_biwt, xt_rsc_0_18_i_bdwt, xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_18_i_wea_d_core_sct_pff, xt_rsc_0_18_i_wea_d_core_psct_pff, xt_rsc_0_18_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_18_i_oswt;
  input xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_18_i_biwt;
  output xt_rsc_0_18_i_bdwt;
  output xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_18_i_wea_d_core_sct_pff;
  input xt_rsc_0_18_i_wea_d_core_psct_pff;
  input xt_rsc_0_18_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_18_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_18_i_bdwt = xt_rsc_0_18_i_oswt & core_wen;
  assign xt_rsc_0_18_i_biwt = (~ core_wten) & xt_rsc_0_18_i_oswt;
  assign xt_rsc_0_18_i_wea_d_core_sct_pff = xt_rsc_0_18_i_wea_d_core_psct_pff & xt_rsc_0_18_i_dswt_pff;
  assign xt_rsc_0_18_i_dswt_pff = core_wen & xt_rsc_0_18_i_oswt_pff;
  assign xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_18_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_dp (
  clk, rst, xt_rsc_0_17_i_qa_d, xt_rsc_0_17_i_qa_d_mxwt, xt_rsc_0_17_i_biwt, xt_rsc_0_17_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_17_i_qa_d;
  output [31:0] xt_rsc_0_17_i_qa_d_mxwt;
  input xt_rsc_0_17_i_biwt;
  input xt_rsc_0_17_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_17_i_bcwt;
  reg [31:0] xt_rsc_0_17_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_17_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_17_i_qa_d, xt_rsc_0_17_i_qa_d_bfwt,
      xt_rsc_0_17_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_17_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_17_i_bcwt <= ~((~(xt_rsc_0_17_i_bcwt | xt_rsc_0_17_i_biwt)) | xt_rsc_0_17_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_17_i_biwt ) begin
      xt_rsc_0_17_i_qa_d_bfwt <= xt_rsc_0_17_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_17_i_oswt, xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_17_i_biwt, xt_rsc_0_17_i_bdwt, xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_17_i_wea_d_core_sct_pff, xt_rsc_0_17_i_wea_d_core_psct_pff, xt_rsc_0_17_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_17_i_oswt;
  input xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_17_i_biwt;
  output xt_rsc_0_17_i_bdwt;
  output xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_17_i_wea_d_core_sct_pff;
  input xt_rsc_0_17_i_wea_d_core_psct_pff;
  input xt_rsc_0_17_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_17_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_17_i_bdwt = xt_rsc_0_17_i_oswt & core_wen;
  assign xt_rsc_0_17_i_biwt = (~ core_wten) & xt_rsc_0_17_i_oswt;
  assign xt_rsc_0_17_i_wea_d_core_sct_pff = xt_rsc_0_17_i_wea_d_core_psct_pff & xt_rsc_0_17_i_dswt_pff;
  assign xt_rsc_0_17_i_dswt_pff = core_wen & xt_rsc_0_17_i_oswt_pff;
  assign xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_17_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_dp (
  clk, rst, xt_rsc_0_16_i_qa_d, xt_rsc_0_16_i_qa_d_mxwt, xt_rsc_0_16_i_biwt, xt_rsc_0_16_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_16_i_qa_d;
  output [31:0] xt_rsc_0_16_i_qa_d_mxwt;
  input xt_rsc_0_16_i_biwt;
  input xt_rsc_0_16_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_16_i_bcwt;
  reg [31:0] xt_rsc_0_16_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_16_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_16_i_qa_d, xt_rsc_0_16_i_qa_d_bfwt,
      xt_rsc_0_16_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_16_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_16_i_bcwt <= ~((~(xt_rsc_0_16_i_bcwt | xt_rsc_0_16_i_biwt)) | xt_rsc_0_16_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_16_i_biwt ) begin
      xt_rsc_0_16_i_qa_d_bfwt <= xt_rsc_0_16_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_16_i_oswt, xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_16_i_biwt, xt_rsc_0_16_i_bdwt, xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_16_i_wea_d_core_sct_pff, xt_rsc_0_16_i_wea_d_core_psct_pff, xt_rsc_0_16_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_16_i_oswt;
  input xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_16_i_biwt;
  output xt_rsc_0_16_i_bdwt;
  output xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_16_i_wea_d_core_sct_pff;
  input xt_rsc_0_16_i_wea_d_core_psct_pff;
  input xt_rsc_0_16_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_16_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_16_i_bdwt = xt_rsc_0_16_i_oswt & core_wen;
  assign xt_rsc_0_16_i_biwt = (~ core_wten) & xt_rsc_0_16_i_oswt;
  assign xt_rsc_0_16_i_wea_d_core_sct_pff = xt_rsc_0_16_i_wea_d_core_psct_pff & xt_rsc_0_16_i_dswt_pff;
  assign xt_rsc_0_16_i_dswt_pff = core_wen & xt_rsc_0_16_i_oswt_pff;
  assign xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_16_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_dp (
  clk, rst, xt_rsc_0_15_i_qa_d, xt_rsc_0_15_i_qa_d_mxwt, xt_rsc_0_15_i_biwt, xt_rsc_0_15_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_15_i_qa_d;
  output [31:0] xt_rsc_0_15_i_qa_d_mxwt;
  input xt_rsc_0_15_i_biwt;
  input xt_rsc_0_15_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_15_i_bcwt;
  reg [31:0] xt_rsc_0_15_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_15_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_15_i_qa_d, xt_rsc_0_15_i_qa_d_bfwt,
      xt_rsc_0_15_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_15_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_15_i_bcwt <= ~((~(xt_rsc_0_15_i_bcwt | xt_rsc_0_15_i_biwt)) | xt_rsc_0_15_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_15_i_biwt ) begin
      xt_rsc_0_15_i_qa_d_bfwt <= xt_rsc_0_15_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_15_i_oswt, xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_15_i_biwt, xt_rsc_0_15_i_bdwt, xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_15_i_wea_d_core_sct_pff, xt_rsc_0_15_i_wea_d_core_psct_pff, xt_rsc_0_15_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_15_i_oswt;
  input xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_15_i_biwt;
  output xt_rsc_0_15_i_bdwt;
  output xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_15_i_wea_d_core_sct_pff;
  input xt_rsc_0_15_i_wea_d_core_psct_pff;
  input xt_rsc_0_15_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_15_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_15_i_bdwt = xt_rsc_0_15_i_oswt & core_wen;
  assign xt_rsc_0_15_i_biwt = (~ core_wten) & xt_rsc_0_15_i_oswt;
  assign xt_rsc_0_15_i_wea_d_core_sct_pff = xt_rsc_0_15_i_wea_d_core_psct_pff & xt_rsc_0_15_i_dswt_pff;
  assign xt_rsc_0_15_i_dswt_pff = core_wen & xt_rsc_0_15_i_oswt_pff;
  assign xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_15_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_dp (
  clk, rst, xt_rsc_0_14_i_qa_d, xt_rsc_0_14_i_qa_d_mxwt, xt_rsc_0_14_i_biwt, xt_rsc_0_14_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_14_i_qa_d;
  output [31:0] xt_rsc_0_14_i_qa_d_mxwt;
  input xt_rsc_0_14_i_biwt;
  input xt_rsc_0_14_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_14_i_bcwt;
  reg [31:0] xt_rsc_0_14_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_14_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_14_i_qa_d, xt_rsc_0_14_i_qa_d_bfwt,
      xt_rsc_0_14_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_14_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_14_i_bcwt <= ~((~(xt_rsc_0_14_i_bcwt | xt_rsc_0_14_i_biwt)) | xt_rsc_0_14_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_14_i_biwt ) begin
      xt_rsc_0_14_i_qa_d_bfwt <= xt_rsc_0_14_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_14_i_oswt, xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_14_i_biwt, xt_rsc_0_14_i_bdwt, xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_14_i_wea_d_core_sct_pff, xt_rsc_0_14_i_wea_d_core_psct_pff, xt_rsc_0_14_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_14_i_oswt;
  input xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_14_i_biwt;
  output xt_rsc_0_14_i_bdwt;
  output xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_14_i_wea_d_core_sct_pff;
  input xt_rsc_0_14_i_wea_d_core_psct_pff;
  input xt_rsc_0_14_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_14_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_14_i_bdwt = xt_rsc_0_14_i_oswt & core_wen;
  assign xt_rsc_0_14_i_biwt = (~ core_wten) & xt_rsc_0_14_i_oswt;
  assign xt_rsc_0_14_i_wea_d_core_sct_pff = xt_rsc_0_14_i_wea_d_core_psct_pff & xt_rsc_0_14_i_dswt_pff;
  assign xt_rsc_0_14_i_dswt_pff = core_wen & xt_rsc_0_14_i_oswt_pff;
  assign xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_14_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_dp (
  clk, rst, xt_rsc_0_13_i_qa_d, xt_rsc_0_13_i_qa_d_mxwt, xt_rsc_0_13_i_biwt, xt_rsc_0_13_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_13_i_qa_d;
  output [31:0] xt_rsc_0_13_i_qa_d_mxwt;
  input xt_rsc_0_13_i_biwt;
  input xt_rsc_0_13_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_13_i_bcwt;
  reg [31:0] xt_rsc_0_13_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_13_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_13_i_qa_d, xt_rsc_0_13_i_qa_d_bfwt,
      xt_rsc_0_13_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_13_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_13_i_bcwt <= ~((~(xt_rsc_0_13_i_bcwt | xt_rsc_0_13_i_biwt)) | xt_rsc_0_13_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_13_i_biwt ) begin
      xt_rsc_0_13_i_qa_d_bfwt <= xt_rsc_0_13_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_13_i_oswt, xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_13_i_biwt, xt_rsc_0_13_i_bdwt, xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_13_i_wea_d_core_sct_pff, xt_rsc_0_13_i_wea_d_core_psct_pff, xt_rsc_0_13_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_13_i_oswt;
  input xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_13_i_biwt;
  output xt_rsc_0_13_i_bdwt;
  output xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_13_i_wea_d_core_sct_pff;
  input xt_rsc_0_13_i_wea_d_core_psct_pff;
  input xt_rsc_0_13_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_13_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_13_i_bdwt = xt_rsc_0_13_i_oswt & core_wen;
  assign xt_rsc_0_13_i_biwt = (~ core_wten) & xt_rsc_0_13_i_oswt;
  assign xt_rsc_0_13_i_wea_d_core_sct_pff = xt_rsc_0_13_i_wea_d_core_psct_pff & xt_rsc_0_13_i_dswt_pff;
  assign xt_rsc_0_13_i_dswt_pff = core_wen & xt_rsc_0_13_i_oswt_pff;
  assign xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_13_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_dp (
  clk, rst, xt_rsc_0_12_i_qa_d, xt_rsc_0_12_i_qa_d_mxwt, xt_rsc_0_12_i_biwt, xt_rsc_0_12_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_12_i_qa_d;
  output [31:0] xt_rsc_0_12_i_qa_d_mxwt;
  input xt_rsc_0_12_i_biwt;
  input xt_rsc_0_12_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_12_i_bcwt;
  reg [31:0] xt_rsc_0_12_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_12_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_12_i_qa_d, xt_rsc_0_12_i_qa_d_bfwt,
      xt_rsc_0_12_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_12_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_12_i_bcwt <= ~((~(xt_rsc_0_12_i_bcwt | xt_rsc_0_12_i_biwt)) | xt_rsc_0_12_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_12_i_biwt ) begin
      xt_rsc_0_12_i_qa_d_bfwt <= xt_rsc_0_12_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_12_i_oswt, xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_12_i_biwt, xt_rsc_0_12_i_bdwt, xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_12_i_wea_d_core_sct_pff, xt_rsc_0_12_i_wea_d_core_psct_pff, xt_rsc_0_12_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_12_i_oswt;
  input xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_12_i_biwt;
  output xt_rsc_0_12_i_bdwt;
  output xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_12_i_wea_d_core_sct_pff;
  input xt_rsc_0_12_i_wea_d_core_psct_pff;
  input xt_rsc_0_12_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_12_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_12_i_bdwt = xt_rsc_0_12_i_oswt & core_wen;
  assign xt_rsc_0_12_i_biwt = (~ core_wten) & xt_rsc_0_12_i_oswt;
  assign xt_rsc_0_12_i_wea_d_core_sct_pff = xt_rsc_0_12_i_wea_d_core_psct_pff & xt_rsc_0_12_i_dswt_pff;
  assign xt_rsc_0_12_i_dswt_pff = core_wen & xt_rsc_0_12_i_oswt_pff;
  assign xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_12_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_dp (
  clk, rst, xt_rsc_0_11_i_qa_d, xt_rsc_0_11_i_qa_d_mxwt, xt_rsc_0_11_i_biwt, xt_rsc_0_11_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_11_i_qa_d;
  output [31:0] xt_rsc_0_11_i_qa_d_mxwt;
  input xt_rsc_0_11_i_biwt;
  input xt_rsc_0_11_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_11_i_bcwt;
  reg [31:0] xt_rsc_0_11_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_11_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_11_i_qa_d, xt_rsc_0_11_i_qa_d_bfwt,
      xt_rsc_0_11_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_11_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_11_i_bcwt <= ~((~(xt_rsc_0_11_i_bcwt | xt_rsc_0_11_i_biwt)) | xt_rsc_0_11_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_11_i_biwt ) begin
      xt_rsc_0_11_i_qa_d_bfwt <= xt_rsc_0_11_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_11_i_oswt, xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_11_i_biwt, xt_rsc_0_11_i_bdwt, xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_11_i_wea_d_core_sct_pff, xt_rsc_0_11_i_wea_d_core_psct_pff, xt_rsc_0_11_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_11_i_oswt;
  input xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_11_i_biwt;
  output xt_rsc_0_11_i_bdwt;
  output xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_11_i_wea_d_core_sct_pff;
  input xt_rsc_0_11_i_wea_d_core_psct_pff;
  input xt_rsc_0_11_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_11_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_11_i_bdwt = xt_rsc_0_11_i_oswt & core_wen;
  assign xt_rsc_0_11_i_biwt = (~ core_wten) & xt_rsc_0_11_i_oswt;
  assign xt_rsc_0_11_i_wea_d_core_sct_pff = xt_rsc_0_11_i_wea_d_core_psct_pff & xt_rsc_0_11_i_dswt_pff;
  assign xt_rsc_0_11_i_dswt_pff = core_wen & xt_rsc_0_11_i_oswt_pff;
  assign xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_11_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_dp (
  clk, rst, xt_rsc_0_10_i_qa_d, xt_rsc_0_10_i_qa_d_mxwt, xt_rsc_0_10_i_biwt, xt_rsc_0_10_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_10_i_qa_d;
  output [31:0] xt_rsc_0_10_i_qa_d_mxwt;
  input xt_rsc_0_10_i_biwt;
  input xt_rsc_0_10_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_10_i_bcwt;
  reg [31:0] xt_rsc_0_10_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_10_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_10_i_qa_d, xt_rsc_0_10_i_qa_d_bfwt,
      xt_rsc_0_10_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_10_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_10_i_bcwt <= ~((~(xt_rsc_0_10_i_bcwt | xt_rsc_0_10_i_biwt)) | xt_rsc_0_10_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_10_i_biwt ) begin
      xt_rsc_0_10_i_qa_d_bfwt <= xt_rsc_0_10_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_10_i_oswt, xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_10_i_biwt, xt_rsc_0_10_i_bdwt, xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_10_i_wea_d_core_sct_pff, xt_rsc_0_10_i_wea_d_core_psct_pff, xt_rsc_0_10_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_10_i_oswt;
  input xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_10_i_biwt;
  output xt_rsc_0_10_i_bdwt;
  output xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_10_i_wea_d_core_sct_pff;
  input xt_rsc_0_10_i_wea_d_core_psct_pff;
  input xt_rsc_0_10_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_10_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_10_i_bdwt = xt_rsc_0_10_i_oswt & core_wen;
  assign xt_rsc_0_10_i_biwt = (~ core_wten) & xt_rsc_0_10_i_oswt;
  assign xt_rsc_0_10_i_wea_d_core_sct_pff = xt_rsc_0_10_i_wea_d_core_psct_pff & xt_rsc_0_10_i_dswt_pff;
  assign xt_rsc_0_10_i_dswt_pff = core_wen & xt_rsc_0_10_i_oswt_pff;
  assign xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_10_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_dp (
  clk, rst, xt_rsc_0_9_i_qa_d, xt_rsc_0_9_i_qa_d_mxwt, xt_rsc_0_9_i_biwt, xt_rsc_0_9_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_9_i_qa_d;
  output [31:0] xt_rsc_0_9_i_qa_d_mxwt;
  input xt_rsc_0_9_i_biwt;
  input xt_rsc_0_9_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_9_i_bcwt;
  reg [31:0] xt_rsc_0_9_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_9_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_9_i_qa_d, xt_rsc_0_9_i_qa_d_bfwt,
      xt_rsc_0_9_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_9_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_9_i_bcwt <= ~((~(xt_rsc_0_9_i_bcwt | xt_rsc_0_9_i_biwt)) | xt_rsc_0_9_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_9_i_biwt ) begin
      xt_rsc_0_9_i_qa_d_bfwt <= xt_rsc_0_9_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_9_i_oswt, xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_9_i_biwt, xt_rsc_0_9_i_bdwt, xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_9_i_wea_d_core_sct_pff, xt_rsc_0_9_i_wea_d_core_psct_pff, xt_rsc_0_9_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_9_i_oswt;
  input xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_9_i_biwt;
  output xt_rsc_0_9_i_bdwt;
  output xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_9_i_wea_d_core_sct_pff;
  input xt_rsc_0_9_i_wea_d_core_psct_pff;
  input xt_rsc_0_9_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_9_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_9_i_bdwt = xt_rsc_0_9_i_oswt & core_wen;
  assign xt_rsc_0_9_i_biwt = (~ core_wten) & xt_rsc_0_9_i_oswt;
  assign xt_rsc_0_9_i_wea_d_core_sct_pff = xt_rsc_0_9_i_wea_d_core_psct_pff & xt_rsc_0_9_i_dswt_pff;
  assign xt_rsc_0_9_i_dswt_pff = core_wen & xt_rsc_0_9_i_oswt_pff;
  assign xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_9_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_dp (
  clk, rst, xt_rsc_0_8_i_qa_d, xt_rsc_0_8_i_qa_d_mxwt, xt_rsc_0_8_i_biwt, xt_rsc_0_8_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_8_i_qa_d;
  output [31:0] xt_rsc_0_8_i_qa_d_mxwt;
  input xt_rsc_0_8_i_biwt;
  input xt_rsc_0_8_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_8_i_bcwt;
  reg [31:0] xt_rsc_0_8_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_8_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_8_i_qa_d, xt_rsc_0_8_i_qa_d_bfwt,
      xt_rsc_0_8_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_8_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_8_i_bcwt <= ~((~(xt_rsc_0_8_i_bcwt | xt_rsc_0_8_i_biwt)) | xt_rsc_0_8_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_8_i_biwt ) begin
      xt_rsc_0_8_i_qa_d_bfwt <= xt_rsc_0_8_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_8_i_oswt, xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_8_i_biwt, xt_rsc_0_8_i_bdwt, xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_8_i_wea_d_core_sct_pff, xt_rsc_0_8_i_wea_d_core_psct_pff, xt_rsc_0_8_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_8_i_oswt;
  input xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_8_i_biwt;
  output xt_rsc_0_8_i_bdwt;
  output xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_8_i_wea_d_core_sct_pff;
  input xt_rsc_0_8_i_wea_d_core_psct_pff;
  input xt_rsc_0_8_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_8_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_8_i_bdwt = xt_rsc_0_8_i_oswt & core_wen;
  assign xt_rsc_0_8_i_biwt = (~ core_wten) & xt_rsc_0_8_i_oswt;
  assign xt_rsc_0_8_i_wea_d_core_sct_pff = xt_rsc_0_8_i_wea_d_core_psct_pff & xt_rsc_0_8_i_dswt_pff;
  assign xt_rsc_0_8_i_dswt_pff = core_wen & xt_rsc_0_8_i_oswt_pff;
  assign xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_8_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_dp (
  clk, rst, xt_rsc_0_7_i_qa_d, xt_rsc_0_7_i_qa_d_mxwt, xt_rsc_0_7_i_biwt, xt_rsc_0_7_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_7_i_qa_d;
  output [31:0] xt_rsc_0_7_i_qa_d_mxwt;
  input xt_rsc_0_7_i_biwt;
  input xt_rsc_0_7_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_7_i_bcwt;
  reg [31:0] xt_rsc_0_7_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_7_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_7_i_qa_d, xt_rsc_0_7_i_qa_d_bfwt,
      xt_rsc_0_7_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_7_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_7_i_bcwt <= ~((~(xt_rsc_0_7_i_bcwt | xt_rsc_0_7_i_biwt)) | xt_rsc_0_7_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_7_i_biwt ) begin
      xt_rsc_0_7_i_qa_d_bfwt <= xt_rsc_0_7_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_7_i_oswt, xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_7_i_biwt, xt_rsc_0_7_i_bdwt, xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_7_i_wea_d_core_sct_pff, xt_rsc_0_7_i_wea_d_core_psct_pff, xt_rsc_0_7_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_7_i_oswt;
  input xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_7_i_biwt;
  output xt_rsc_0_7_i_bdwt;
  output xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_7_i_wea_d_core_sct_pff;
  input xt_rsc_0_7_i_wea_d_core_psct_pff;
  input xt_rsc_0_7_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_7_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_7_i_bdwt = xt_rsc_0_7_i_oswt & core_wen;
  assign xt_rsc_0_7_i_biwt = (~ core_wten) & xt_rsc_0_7_i_oswt;
  assign xt_rsc_0_7_i_wea_d_core_sct_pff = xt_rsc_0_7_i_wea_d_core_psct_pff & xt_rsc_0_7_i_dswt_pff;
  assign xt_rsc_0_7_i_dswt_pff = core_wen & xt_rsc_0_7_i_oswt_pff;
  assign xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_7_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_dp (
  clk, rst, xt_rsc_0_6_i_qa_d, xt_rsc_0_6_i_qa_d_mxwt, xt_rsc_0_6_i_biwt, xt_rsc_0_6_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_6_i_qa_d;
  output [31:0] xt_rsc_0_6_i_qa_d_mxwt;
  input xt_rsc_0_6_i_biwt;
  input xt_rsc_0_6_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_6_i_bcwt;
  reg [31:0] xt_rsc_0_6_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_6_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_6_i_qa_d, xt_rsc_0_6_i_qa_d_bfwt,
      xt_rsc_0_6_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_6_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_6_i_bcwt <= ~((~(xt_rsc_0_6_i_bcwt | xt_rsc_0_6_i_biwt)) | xt_rsc_0_6_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_6_i_biwt ) begin
      xt_rsc_0_6_i_qa_d_bfwt <= xt_rsc_0_6_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_6_i_oswt, xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_6_i_biwt, xt_rsc_0_6_i_bdwt, xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_6_i_wea_d_core_sct_pff, xt_rsc_0_6_i_wea_d_core_psct_pff, xt_rsc_0_6_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_6_i_oswt;
  input xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_6_i_biwt;
  output xt_rsc_0_6_i_bdwt;
  output xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_6_i_wea_d_core_sct_pff;
  input xt_rsc_0_6_i_wea_d_core_psct_pff;
  input xt_rsc_0_6_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_6_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_6_i_bdwt = xt_rsc_0_6_i_oswt & core_wen;
  assign xt_rsc_0_6_i_biwt = (~ core_wten) & xt_rsc_0_6_i_oswt;
  assign xt_rsc_0_6_i_wea_d_core_sct_pff = xt_rsc_0_6_i_wea_d_core_psct_pff & xt_rsc_0_6_i_dswt_pff;
  assign xt_rsc_0_6_i_dswt_pff = core_wen & xt_rsc_0_6_i_oswt_pff;
  assign xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_6_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_dp (
  clk, rst, xt_rsc_0_5_i_qa_d, xt_rsc_0_5_i_qa_d_mxwt, xt_rsc_0_5_i_biwt, xt_rsc_0_5_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_5_i_qa_d;
  output [31:0] xt_rsc_0_5_i_qa_d_mxwt;
  input xt_rsc_0_5_i_biwt;
  input xt_rsc_0_5_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_5_i_bcwt;
  reg [31:0] xt_rsc_0_5_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_5_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_5_i_qa_d, xt_rsc_0_5_i_qa_d_bfwt,
      xt_rsc_0_5_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_5_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_5_i_bcwt <= ~((~(xt_rsc_0_5_i_bcwt | xt_rsc_0_5_i_biwt)) | xt_rsc_0_5_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_5_i_biwt ) begin
      xt_rsc_0_5_i_qa_d_bfwt <= xt_rsc_0_5_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_5_i_oswt, xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_5_i_biwt, xt_rsc_0_5_i_bdwt, xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_5_i_wea_d_core_sct_pff, xt_rsc_0_5_i_wea_d_core_psct_pff, xt_rsc_0_5_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_5_i_oswt;
  input xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_5_i_biwt;
  output xt_rsc_0_5_i_bdwt;
  output xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_5_i_wea_d_core_sct_pff;
  input xt_rsc_0_5_i_wea_d_core_psct_pff;
  input xt_rsc_0_5_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_5_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_5_i_bdwt = xt_rsc_0_5_i_oswt & core_wen;
  assign xt_rsc_0_5_i_biwt = (~ core_wten) & xt_rsc_0_5_i_oswt;
  assign xt_rsc_0_5_i_wea_d_core_sct_pff = xt_rsc_0_5_i_wea_d_core_psct_pff & xt_rsc_0_5_i_dswt_pff;
  assign xt_rsc_0_5_i_dswt_pff = core_wen & xt_rsc_0_5_i_oswt_pff;
  assign xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_5_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_dp (
  clk, rst, xt_rsc_0_4_i_qa_d, xt_rsc_0_4_i_qa_d_mxwt, xt_rsc_0_4_i_biwt, xt_rsc_0_4_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_4_i_qa_d;
  output [31:0] xt_rsc_0_4_i_qa_d_mxwt;
  input xt_rsc_0_4_i_biwt;
  input xt_rsc_0_4_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_4_i_bcwt;
  reg [31:0] xt_rsc_0_4_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_4_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_4_i_qa_d, xt_rsc_0_4_i_qa_d_bfwt,
      xt_rsc_0_4_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_4_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_4_i_bcwt <= ~((~(xt_rsc_0_4_i_bcwt | xt_rsc_0_4_i_biwt)) | xt_rsc_0_4_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_4_i_biwt ) begin
      xt_rsc_0_4_i_qa_d_bfwt <= xt_rsc_0_4_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_4_i_oswt, xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_4_i_biwt, xt_rsc_0_4_i_bdwt, xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_4_i_wea_d_core_sct_pff, xt_rsc_0_4_i_wea_d_core_psct_pff, xt_rsc_0_4_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_4_i_oswt;
  input xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_4_i_biwt;
  output xt_rsc_0_4_i_bdwt;
  output xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_4_i_wea_d_core_sct_pff;
  input xt_rsc_0_4_i_wea_d_core_psct_pff;
  input xt_rsc_0_4_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_4_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_4_i_bdwt = xt_rsc_0_4_i_oswt & core_wen;
  assign xt_rsc_0_4_i_biwt = (~ core_wten) & xt_rsc_0_4_i_oswt;
  assign xt_rsc_0_4_i_wea_d_core_sct_pff = xt_rsc_0_4_i_wea_d_core_psct_pff & xt_rsc_0_4_i_dswt_pff;
  assign xt_rsc_0_4_i_dswt_pff = core_wen & xt_rsc_0_4_i_oswt_pff;
  assign xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_4_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_dp (
  clk, rst, xt_rsc_0_3_i_qa_d, xt_rsc_0_3_i_qa_d_mxwt, xt_rsc_0_3_i_biwt, xt_rsc_0_3_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_3_i_qa_d;
  output [31:0] xt_rsc_0_3_i_qa_d_mxwt;
  input xt_rsc_0_3_i_biwt;
  input xt_rsc_0_3_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_3_i_bcwt;
  reg [31:0] xt_rsc_0_3_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_3_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_3_i_qa_d, xt_rsc_0_3_i_qa_d_bfwt,
      xt_rsc_0_3_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_3_i_bcwt <= ~((~(xt_rsc_0_3_i_bcwt | xt_rsc_0_3_i_biwt)) | xt_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_3_i_biwt ) begin
      xt_rsc_0_3_i_qa_d_bfwt <= xt_rsc_0_3_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_3_i_oswt, xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_3_i_biwt, xt_rsc_0_3_i_bdwt, xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_3_i_wea_d_core_sct_pff, xt_rsc_0_3_i_wea_d_core_psct_pff, xt_rsc_0_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_3_i_oswt;
  input xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_3_i_biwt;
  output xt_rsc_0_3_i_bdwt;
  output xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_3_i_wea_d_core_sct_pff;
  input xt_rsc_0_3_i_wea_d_core_psct_pff;
  input xt_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_3_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_3_i_bdwt = xt_rsc_0_3_i_oswt & core_wen;
  assign xt_rsc_0_3_i_biwt = (~ core_wten) & xt_rsc_0_3_i_oswt;
  assign xt_rsc_0_3_i_wea_d_core_sct_pff = xt_rsc_0_3_i_wea_d_core_psct_pff & xt_rsc_0_3_i_dswt_pff;
  assign xt_rsc_0_3_i_dswt_pff = core_wen & xt_rsc_0_3_i_oswt_pff;
  assign xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_3_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_dp (
  clk, rst, xt_rsc_0_2_i_qa_d, xt_rsc_0_2_i_qa_d_mxwt, xt_rsc_0_2_i_biwt, xt_rsc_0_2_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_2_i_qa_d;
  output [31:0] xt_rsc_0_2_i_qa_d_mxwt;
  input xt_rsc_0_2_i_biwt;
  input xt_rsc_0_2_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_2_i_bcwt;
  reg [31:0] xt_rsc_0_2_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_2_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_2_i_qa_d, xt_rsc_0_2_i_qa_d_bfwt,
      xt_rsc_0_2_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_2_i_bcwt <= ~((~(xt_rsc_0_2_i_bcwt | xt_rsc_0_2_i_biwt)) | xt_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_2_i_biwt ) begin
      xt_rsc_0_2_i_qa_d_bfwt <= xt_rsc_0_2_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_2_i_oswt, xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_2_i_biwt, xt_rsc_0_2_i_bdwt, xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_2_i_wea_d_core_sct_pff, xt_rsc_0_2_i_wea_d_core_psct_pff, xt_rsc_0_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_2_i_oswt;
  input xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_2_i_biwt;
  output xt_rsc_0_2_i_bdwt;
  output xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_2_i_wea_d_core_sct_pff;
  input xt_rsc_0_2_i_wea_d_core_psct_pff;
  input xt_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_2_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_2_i_bdwt = xt_rsc_0_2_i_oswt & core_wen;
  assign xt_rsc_0_2_i_biwt = (~ core_wten) & xt_rsc_0_2_i_oswt;
  assign xt_rsc_0_2_i_wea_d_core_sct_pff = xt_rsc_0_2_i_wea_d_core_psct_pff & xt_rsc_0_2_i_dswt_pff;
  assign xt_rsc_0_2_i_dswt_pff = core_wen & xt_rsc_0_2_i_oswt_pff;
  assign xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_2_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_dp (
  clk, rst, xt_rsc_0_1_i_qa_d, xt_rsc_0_1_i_qa_d_mxwt, xt_rsc_0_1_i_biwt, xt_rsc_0_1_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_1_i_qa_d;
  output [31:0] xt_rsc_0_1_i_qa_d_mxwt;
  input xt_rsc_0_1_i_biwt;
  input xt_rsc_0_1_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_1_i_bcwt;
  reg [31:0] xt_rsc_0_1_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_1_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_1_i_qa_d, xt_rsc_0_1_i_qa_d_bfwt,
      xt_rsc_0_1_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_1_i_bcwt <= ~((~(xt_rsc_0_1_i_bcwt | xt_rsc_0_1_i_biwt)) | xt_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_1_i_biwt ) begin
      xt_rsc_0_1_i_qa_d_bfwt <= xt_rsc_0_1_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_ctrl (
  core_wen, core_wten, xt_rsc_0_1_i_oswt, xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_1_i_biwt, xt_rsc_0_1_i_bdwt, xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_1_i_wea_d_core_sct_pff, xt_rsc_0_1_i_wea_d_core_psct_pff, xt_rsc_0_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input xt_rsc_0_1_i_oswt;
  input xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_1_i_biwt;
  output xt_rsc_0_1_i_bdwt;
  output xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_1_i_wea_d_core_sct_pff;
  input xt_rsc_0_1_i_wea_d_core_psct_pff;
  input xt_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_1_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_1_i_bdwt = xt_rsc_0_1_i_oswt & core_wen;
  assign xt_rsc_0_1_i_biwt = (~ core_wten) & xt_rsc_0_1_i_oswt;
  assign xt_rsc_0_1_i_wea_d_core_sct_pff = xt_rsc_0_1_i_wea_d_core_psct_pff & xt_rsc_0_1_i_dswt_pff;
  assign xt_rsc_0_1_i_dswt_pff = core_wen & xt_rsc_0_1_i_oswt_pff;
  assign xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_1_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_dp (
  clk, rst, xt_rsc_0_0_i_qa_d, xt_rsc_0_0_i_qa_d_mxwt, xt_rsc_0_0_i_biwt, xt_rsc_0_0_i_bdwt
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_0_i_qa_d;
  output [31:0] xt_rsc_0_0_i_qa_d_mxwt;
  input xt_rsc_0_0_i_biwt;
  input xt_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg xt_rsc_0_0_i_bcwt;
  reg [31:0] xt_rsc_0_0_i_qa_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_0_i_qa_d_mxwt = MUX_v_32_2_2(xt_rsc_0_0_i_qa_d, xt_rsc_0_0_i_qa_d_bfwt,
      xt_rsc_0_0_i_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      xt_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      xt_rsc_0_0_i_bcwt <= ~((~(xt_rsc_0_0_i_bcwt | xt_rsc_0_0_i_biwt)) | xt_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( xt_rsc_0_0_i_biwt ) begin
      xt_rsc_0_0_i_qa_d_bfwt <= xt_rsc_0_0_i_qa_d;
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_ctrl (
  core_wen, xt_rsc_0_0_i_oswt, core_wten, xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_0_i_biwt, xt_rsc_0_0_i_bdwt, xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct,
      xt_rsc_0_0_i_wea_d_core_sct_pff, xt_rsc_0_0_i_wea_d_core_psct_pff, xt_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input xt_rsc_0_0_i_oswt;
  input core_wten;
  input xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_0_i_biwt;
  output xt_rsc_0_0_i_bdwt;
  output xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output xt_rsc_0_0_i_wea_d_core_sct_pff;
  input xt_rsc_0_0_i_wea_d_core_psct_pff;
  input xt_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_0_i_dswt_pff;


  // Interconnect Declarations for Component Instantiations 
  assign xt_rsc_0_0_i_bdwt = xt_rsc_0_0_i_oswt & core_wen;
  assign xt_rsc_0_0_i_biwt = (~ core_wten) & xt_rsc_0_0_i_oswt;
  assign xt_rsc_0_0_i_wea_d_core_sct_pff = xt_rsc_0_0_i_wea_d_core_psct_pff & xt_rsc_0_0_i_dswt_pff;
  assign xt_rsc_0_0_i_dswt_pff = core_wen & xt_rsc_0_0_i_oswt_pff;
  assign xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct = xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct
      & xt_rsc_0_0_i_dswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_wait_dp
// ------------------------------------------------------------------


module peaseNTT_core_wait_dp (
  yt_rsc_0_0_cgo_iro, yt_rsc_0_0_i_clken_d, yt_rsc_0_16_cgo_iro, yt_rsc_0_16_i_clken_d,
      yt_rsc_1_0_cgo_iro, yt_rsc_1_0_i_clken_d, yt_rsc_1_16_cgo_iro, yt_rsc_1_16_i_clken_d,
      ensig_cgo_iro, ensig_cgo_iro_17, core_wen, yt_rsc_0_0_cgo, yt_rsc_0_16_cgo,
      yt_rsc_1_0_cgo, yt_rsc_1_16_cgo, ensig_cgo, mult_t_mul_cmp_en, ensig_cgo_17,
      mult_z_mul_cmp_1_en
);
  input yt_rsc_0_0_cgo_iro;
  output yt_rsc_0_0_i_clken_d;
  input yt_rsc_0_16_cgo_iro;
  output yt_rsc_0_16_i_clken_d;
  input yt_rsc_1_0_cgo_iro;
  output yt_rsc_1_0_i_clken_d;
  input yt_rsc_1_16_cgo_iro;
  output yt_rsc_1_16_i_clken_d;
  input ensig_cgo_iro;
  input ensig_cgo_iro_17;
  input core_wen;
  input yt_rsc_0_0_cgo;
  input yt_rsc_0_16_cgo;
  input yt_rsc_1_0_cgo;
  input yt_rsc_1_16_cgo;
  input ensig_cgo;
  output mult_t_mul_cmp_en;
  input ensig_cgo_17;
  output mult_z_mul_cmp_1_en;



  // Interconnect Declarations for Component Instantiations 
  assign yt_rsc_0_0_i_clken_d = core_wen & (yt_rsc_0_0_cgo | yt_rsc_0_0_cgo_iro);
  assign yt_rsc_0_16_i_clken_d = core_wen & (yt_rsc_0_16_cgo | yt_rsc_0_16_cgo_iro);
  assign yt_rsc_1_0_i_clken_d = core_wen & (yt_rsc_1_0_cgo | yt_rsc_1_0_cgo_iro);
  assign yt_rsc_1_16_i_clken_d = core_wen & (yt_rsc_1_16_cgo | yt_rsc_1_16_cgo_iro);
  assign mult_t_mul_cmp_en = core_wen & (ensig_cgo | ensig_cgo_iro);
  assign mult_z_mul_cmp_1_en = core_wen & (ensig_cgo_17 | ensig_cgo_iro_17);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj (
  twiddle_h_rsc_triosy_0_0_lz, core_wten, twiddle_h_rsc_triosy_0_0_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_0_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_0_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_0_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_0_obj (
      .ld(twiddle_h_rsc_triosy_0_0_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_0_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj_twiddle_h_rsc_triosy_0_0_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj_twiddle_h_rsc_triosy_0_0_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_0_obj_iswt0(twiddle_h_rsc_triosy_0_0_obj_iswt0),
      .twiddle_h_rsc_triosy_0_0_obj_ld_core_sct(twiddle_h_rsc_triosy_0_0_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj (
  twiddle_h_rsc_triosy_0_1_lz, core_wten, twiddle_h_rsc_triosy_0_1_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_1_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_1_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_1_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_1_obj (
      .ld(twiddle_h_rsc_triosy_0_1_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_1_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj_twiddle_h_rsc_triosy_0_1_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj_twiddle_h_rsc_triosy_0_1_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_1_obj_iswt0(twiddle_h_rsc_triosy_0_1_obj_iswt0),
      .twiddle_h_rsc_triosy_0_1_obj_ld_core_sct(twiddle_h_rsc_triosy_0_1_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj (
  twiddle_h_rsc_triosy_0_2_lz, core_wten, twiddle_h_rsc_triosy_0_2_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_2_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_2_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_2_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_2_obj (
      .ld(twiddle_h_rsc_triosy_0_2_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_2_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj_twiddle_h_rsc_triosy_0_2_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj_twiddle_h_rsc_triosy_0_2_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_2_obj_iswt0(twiddle_h_rsc_triosy_0_2_obj_iswt0),
      .twiddle_h_rsc_triosy_0_2_obj_ld_core_sct(twiddle_h_rsc_triosy_0_2_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj (
  twiddle_h_rsc_triosy_0_3_lz, core_wten, twiddle_h_rsc_triosy_0_3_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_3_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_3_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_3_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_3_obj (
      .ld(twiddle_h_rsc_triosy_0_3_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_3_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj_twiddle_h_rsc_triosy_0_3_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj_twiddle_h_rsc_triosy_0_3_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_3_obj_iswt0(twiddle_h_rsc_triosy_0_3_obj_iswt0),
      .twiddle_h_rsc_triosy_0_3_obj_ld_core_sct(twiddle_h_rsc_triosy_0_3_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj (
  twiddle_h_rsc_triosy_0_4_lz, core_wten, twiddle_h_rsc_triosy_0_4_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_4_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_4_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_4_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_4_obj (
      .ld(twiddle_h_rsc_triosy_0_4_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_4_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj_twiddle_h_rsc_triosy_0_4_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj_twiddle_h_rsc_triosy_0_4_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_4_obj_iswt0(twiddle_h_rsc_triosy_0_4_obj_iswt0),
      .twiddle_h_rsc_triosy_0_4_obj_ld_core_sct(twiddle_h_rsc_triosy_0_4_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj (
  twiddle_h_rsc_triosy_0_5_lz, core_wten, twiddle_h_rsc_triosy_0_5_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_5_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_5_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_5_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_5_obj (
      .ld(twiddle_h_rsc_triosy_0_5_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_5_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj_twiddle_h_rsc_triosy_0_5_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj_twiddle_h_rsc_triosy_0_5_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_5_obj_iswt0(twiddle_h_rsc_triosy_0_5_obj_iswt0),
      .twiddle_h_rsc_triosy_0_5_obj_ld_core_sct(twiddle_h_rsc_triosy_0_5_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj (
  twiddle_h_rsc_triosy_0_6_lz, core_wten, twiddle_h_rsc_triosy_0_6_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_6_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_6_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_6_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_6_obj (
      .ld(twiddle_h_rsc_triosy_0_6_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_6_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj_twiddle_h_rsc_triosy_0_6_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj_twiddle_h_rsc_triosy_0_6_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_6_obj_iswt0(twiddle_h_rsc_triosy_0_6_obj_iswt0),
      .twiddle_h_rsc_triosy_0_6_obj_ld_core_sct(twiddle_h_rsc_triosy_0_6_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj (
  twiddle_h_rsc_triosy_0_7_lz, core_wten, twiddle_h_rsc_triosy_0_7_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_7_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_7_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_7_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_7_obj (
      .ld(twiddle_h_rsc_triosy_0_7_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_7_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj_twiddle_h_rsc_triosy_0_7_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj_twiddle_h_rsc_triosy_0_7_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_7_obj_iswt0(twiddle_h_rsc_triosy_0_7_obj_iswt0),
      .twiddle_h_rsc_triosy_0_7_obj_ld_core_sct(twiddle_h_rsc_triosy_0_7_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj (
  twiddle_h_rsc_triosy_0_8_lz, core_wten, twiddle_h_rsc_triosy_0_8_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_8_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_8_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_8_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_8_obj (
      .ld(twiddle_h_rsc_triosy_0_8_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_8_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj_twiddle_h_rsc_triosy_0_8_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj_twiddle_h_rsc_triosy_0_8_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_8_obj_iswt0(twiddle_h_rsc_triosy_0_8_obj_iswt0),
      .twiddle_h_rsc_triosy_0_8_obj_ld_core_sct(twiddle_h_rsc_triosy_0_8_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj (
  twiddle_h_rsc_triosy_0_9_lz, core_wten, twiddle_h_rsc_triosy_0_9_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_9_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_9_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_9_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_9_obj (
      .ld(twiddle_h_rsc_triosy_0_9_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_9_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj_twiddle_h_rsc_triosy_0_9_wait_ctrl peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj_twiddle_h_rsc_triosy_0_9_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_9_obj_iswt0(twiddle_h_rsc_triosy_0_9_obj_iswt0),
      .twiddle_h_rsc_triosy_0_9_obj_ld_core_sct(twiddle_h_rsc_triosy_0_9_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj (
  twiddle_h_rsc_triosy_0_10_lz, core_wten, twiddle_h_rsc_triosy_0_10_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_10_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_10_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_10_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_10_obj (
      .ld(twiddle_h_rsc_triosy_0_10_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_10_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj_twiddle_h_rsc_triosy_0_10_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj_twiddle_h_rsc_triosy_0_10_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_10_obj_iswt0(twiddle_h_rsc_triosy_0_10_obj_iswt0),
      .twiddle_h_rsc_triosy_0_10_obj_ld_core_sct(twiddle_h_rsc_triosy_0_10_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj (
  twiddle_h_rsc_triosy_0_11_lz, core_wten, twiddle_h_rsc_triosy_0_11_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_11_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_11_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_11_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_11_obj (
      .ld(twiddle_h_rsc_triosy_0_11_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_11_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj_twiddle_h_rsc_triosy_0_11_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj_twiddle_h_rsc_triosy_0_11_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_11_obj_iswt0(twiddle_h_rsc_triosy_0_11_obj_iswt0),
      .twiddle_h_rsc_triosy_0_11_obj_ld_core_sct(twiddle_h_rsc_triosy_0_11_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj (
  twiddle_h_rsc_triosy_0_12_lz, core_wten, twiddle_h_rsc_triosy_0_12_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_12_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_12_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_12_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_12_obj (
      .ld(twiddle_h_rsc_triosy_0_12_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_12_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj_twiddle_h_rsc_triosy_0_12_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj_twiddle_h_rsc_triosy_0_12_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_12_obj_iswt0(twiddle_h_rsc_triosy_0_12_obj_iswt0),
      .twiddle_h_rsc_triosy_0_12_obj_ld_core_sct(twiddle_h_rsc_triosy_0_12_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj (
  twiddle_h_rsc_triosy_0_13_lz, core_wten, twiddle_h_rsc_triosy_0_13_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_13_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_13_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_13_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_13_obj (
      .ld(twiddle_h_rsc_triosy_0_13_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_13_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj_twiddle_h_rsc_triosy_0_13_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj_twiddle_h_rsc_triosy_0_13_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_13_obj_iswt0(twiddle_h_rsc_triosy_0_13_obj_iswt0),
      .twiddle_h_rsc_triosy_0_13_obj_ld_core_sct(twiddle_h_rsc_triosy_0_13_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj (
  twiddle_h_rsc_triosy_0_14_lz, core_wten, twiddle_h_rsc_triosy_0_14_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_14_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_14_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_14_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_14_obj (
      .ld(twiddle_h_rsc_triosy_0_14_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_14_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj_twiddle_h_rsc_triosy_0_14_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj_twiddle_h_rsc_triosy_0_14_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_14_obj_iswt0(twiddle_h_rsc_triosy_0_14_obj_iswt0),
      .twiddle_h_rsc_triosy_0_14_obj_ld_core_sct(twiddle_h_rsc_triosy_0_14_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj (
  twiddle_h_rsc_triosy_0_15_lz, core_wten, twiddle_h_rsc_triosy_0_15_obj_iswt0
);
  output twiddle_h_rsc_triosy_0_15_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_0_15_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_0_15_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_0_15_obj (
      .ld(twiddle_h_rsc_triosy_0_15_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_0_15_lz)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj_twiddle_h_rsc_triosy_0_15_wait_ctrl
      peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj_twiddle_h_rsc_triosy_0_15_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_15_obj_iswt0(twiddle_h_rsc_triosy_0_15_obj_iswt0),
      .twiddle_h_rsc_triosy_0_15_obj_ld_core_sct(twiddle_h_rsc_triosy_0_15_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_0_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_0_obj (
  twiddle_rsc_triosy_0_0_lz, core_wten, twiddle_rsc_triosy_0_0_obj_iswt0
);
  output twiddle_rsc_triosy_0_0_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_0_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_0_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(twiddle_rsc_triosy_0_0_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_0_obj_twiddle_rsc_triosy_0_0_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_0_obj_twiddle_rsc_triosy_0_0_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_0_obj_iswt0(twiddle_rsc_triosy_0_0_obj_iswt0),
      .twiddle_rsc_triosy_0_0_obj_ld_core_sct(twiddle_rsc_triosy_0_0_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_1_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_1_obj (
  twiddle_rsc_triosy_0_1_lz, core_wten, twiddle_rsc_triosy_0_1_obj_iswt0
);
  output twiddle_rsc_triosy_0_1_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_1_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_1_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(twiddle_rsc_triosy_0_1_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_1_obj_twiddle_rsc_triosy_0_1_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_1_obj_twiddle_rsc_triosy_0_1_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_1_obj_iswt0(twiddle_rsc_triosy_0_1_obj_iswt0),
      .twiddle_rsc_triosy_0_1_obj_ld_core_sct(twiddle_rsc_triosy_0_1_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_2_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_2_obj (
  twiddle_rsc_triosy_0_2_lz, core_wten, twiddle_rsc_triosy_0_2_obj_iswt0
);
  output twiddle_rsc_triosy_0_2_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_2_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_2_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_2_obj (
      .ld(twiddle_rsc_triosy_0_2_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_2_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_2_obj_twiddle_rsc_triosy_0_2_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_2_obj_twiddle_rsc_triosy_0_2_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_2_obj_iswt0(twiddle_rsc_triosy_0_2_obj_iswt0),
      .twiddle_rsc_triosy_0_2_obj_ld_core_sct(twiddle_rsc_triosy_0_2_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_3_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_3_obj (
  twiddle_rsc_triosy_0_3_lz, core_wten, twiddle_rsc_triosy_0_3_obj_iswt0
);
  output twiddle_rsc_triosy_0_3_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_3_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_3_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_3_obj (
      .ld(twiddle_rsc_triosy_0_3_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_3_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_3_obj_twiddle_rsc_triosy_0_3_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_3_obj_twiddle_rsc_triosy_0_3_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_3_obj_iswt0(twiddle_rsc_triosy_0_3_obj_iswt0),
      .twiddle_rsc_triosy_0_3_obj_ld_core_sct(twiddle_rsc_triosy_0_3_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_4_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_4_obj (
  twiddle_rsc_triosy_0_4_lz, core_wten, twiddle_rsc_triosy_0_4_obj_iswt0
);
  output twiddle_rsc_triosy_0_4_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_4_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_4_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_4_obj (
      .ld(twiddle_rsc_triosy_0_4_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_4_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_4_obj_twiddle_rsc_triosy_0_4_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_4_obj_twiddle_rsc_triosy_0_4_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_4_obj_iswt0(twiddle_rsc_triosy_0_4_obj_iswt0),
      .twiddle_rsc_triosy_0_4_obj_ld_core_sct(twiddle_rsc_triosy_0_4_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_5_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_5_obj (
  twiddle_rsc_triosy_0_5_lz, core_wten, twiddle_rsc_triosy_0_5_obj_iswt0
);
  output twiddle_rsc_triosy_0_5_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_5_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_5_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_5_obj (
      .ld(twiddle_rsc_triosy_0_5_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_5_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_5_obj_twiddle_rsc_triosy_0_5_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_5_obj_twiddle_rsc_triosy_0_5_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_5_obj_iswt0(twiddle_rsc_triosy_0_5_obj_iswt0),
      .twiddle_rsc_triosy_0_5_obj_ld_core_sct(twiddle_rsc_triosy_0_5_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_6_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_6_obj (
  twiddle_rsc_triosy_0_6_lz, core_wten, twiddle_rsc_triosy_0_6_obj_iswt0
);
  output twiddle_rsc_triosy_0_6_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_6_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_6_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_6_obj (
      .ld(twiddle_rsc_triosy_0_6_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_6_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_6_obj_twiddle_rsc_triosy_0_6_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_6_obj_twiddle_rsc_triosy_0_6_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_6_obj_iswt0(twiddle_rsc_triosy_0_6_obj_iswt0),
      .twiddle_rsc_triosy_0_6_obj_ld_core_sct(twiddle_rsc_triosy_0_6_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_7_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_7_obj (
  twiddle_rsc_triosy_0_7_lz, core_wten, twiddle_rsc_triosy_0_7_obj_iswt0
);
  output twiddle_rsc_triosy_0_7_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_7_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_7_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_7_obj (
      .ld(twiddle_rsc_triosy_0_7_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_7_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_7_obj_twiddle_rsc_triosy_0_7_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_7_obj_twiddle_rsc_triosy_0_7_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_7_obj_iswt0(twiddle_rsc_triosy_0_7_obj_iswt0),
      .twiddle_rsc_triosy_0_7_obj_ld_core_sct(twiddle_rsc_triosy_0_7_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_8_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_8_obj (
  twiddle_rsc_triosy_0_8_lz, core_wten, twiddle_rsc_triosy_0_8_obj_iswt0
);
  output twiddle_rsc_triosy_0_8_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_8_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_8_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_8_obj (
      .ld(twiddle_rsc_triosy_0_8_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_8_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_8_obj_twiddle_rsc_triosy_0_8_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_8_obj_twiddle_rsc_triosy_0_8_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_8_obj_iswt0(twiddle_rsc_triosy_0_8_obj_iswt0),
      .twiddle_rsc_triosy_0_8_obj_ld_core_sct(twiddle_rsc_triosy_0_8_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_9_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_9_obj (
  twiddle_rsc_triosy_0_9_lz, core_wten, twiddle_rsc_triosy_0_9_obj_iswt0
);
  output twiddle_rsc_triosy_0_9_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_9_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_9_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_9_obj (
      .ld(twiddle_rsc_triosy_0_9_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_9_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_9_obj_twiddle_rsc_triosy_0_9_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_9_obj_twiddle_rsc_triosy_0_9_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_9_obj_iswt0(twiddle_rsc_triosy_0_9_obj_iswt0),
      .twiddle_rsc_triosy_0_9_obj_ld_core_sct(twiddle_rsc_triosy_0_9_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_10_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_10_obj (
  twiddle_rsc_triosy_0_10_lz, core_wten, twiddle_rsc_triosy_0_10_obj_iswt0
);
  output twiddle_rsc_triosy_0_10_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_10_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_10_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_10_obj (
      .ld(twiddle_rsc_triosy_0_10_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_10_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_10_obj_twiddle_rsc_triosy_0_10_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_10_obj_twiddle_rsc_triosy_0_10_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_10_obj_iswt0(twiddle_rsc_triosy_0_10_obj_iswt0),
      .twiddle_rsc_triosy_0_10_obj_ld_core_sct(twiddle_rsc_triosy_0_10_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_11_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_11_obj (
  twiddle_rsc_triosy_0_11_lz, core_wten, twiddle_rsc_triosy_0_11_obj_iswt0
);
  output twiddle_rsc_triosy_0_11_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_11_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_11_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_11_obj (
      .ld(twiddle_rsc_triosy_0_11_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_11_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_11_obj_twiddle_rsc_triosy_0_11_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_11_obj_twiddle_rsc_triosy_0_11_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_11_obj_iswt0(twiddle_rsc_triosy_0_11_obj_iswt0),
      .twiddle_rsc_triosy_0_11_obj_ld_core_sct(twiddle_rsc_triosy_0_11_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_12_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_12_obj (
  twiddle_rsc_triosy_0_12_lz, core_wten, twiddle_rsc_triosy_0_12_obj_iswt0
);
  output twiddle_rsc_triosy_0_12_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_12_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_12_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_12_obj (
      .ld(twiddle_rsc_triosy_0_12_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_12_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_12_obj_twiddle_rsc_triosy_0_12_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_12_obj_twiddle_rsc_triosy_0_12_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_12_obj_iswt0(twiddle_rsc_triosy_0_12_obj_iswt0),
      .twiddle_rsc_triosy_0_12_obj_ld_core_sct(twiddle_rsc_triosy_0_12_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_13_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_13_obj (
  twiddle_rsc_triosy_0_13_lz, core_wten, twiddle_rsc_triosy_0_13_obj_iswt0
);
  output twiddle_rsc_triosy_0_13_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_13_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_13_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_13_obj (
      .ld(twiddle_rsc_triosy_0_13_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_13_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_13_obj_twiddle_rsc_triosy_0_13_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_13_obj_twiddle_rsc_triosy_0_13_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_13_obj_iswt0(twiddle_rsc_triosy_0_13_obj_iswt0),
      .twiddle_rsc_triosy_0_13_obj_ld_core_sct(twiddle_rsc_triosy_0_13_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_14_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_14_obj (
  twiddle_rsc_triosy_0_14_lz, core_wten, twiddle_rsc_triosy_0_14_obj_iswt0
);
  output twiddle_rsc_triosy_0_14_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_14_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_14_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_14_obj (
      .ld(twiddle_rsc_triosy_0_14_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_14_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_14_obj_twiddle_rsc_triosy_0_14_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_14_obj_twiddle_rsc_triosy_0_14_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_14_obj_iswt0(twiddle_rsc_triosy_0_14_obj_iswt0),
      .twiddle_rsc_triosy_0_14_obj_ld_core_sct(twiddle_rsc_triosy_0_14_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_triosy_0_15_obj
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_triosy_0_15_obj (
  twiddle_rsc_triosy_0_15_lz, core_wten, twiddle_rsc_triosy_0_15_obj_iswt0
);
  output twiddle_rsc_triosy_0_15_lz;
  input core_wten;
  input twiddle_rsc_triosy_0_15_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_0_15_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_15_obj (
      .ld(twiddle_rsc_triosy_0_15_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_0_15_lz)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_15_obj_twiddle_rsc_triosy_0_15_wait_ctrl peaseNTT_core_twiddle_rsc_triosy_0_15_obj_twiddle_rsc_triosy_0_15_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_15_obj_iswt0(twiddle_rsc_triosy_0_15_obj_iswt0),
      .twiddle_rsc_triosy_0_15_obj_ld_core_sct(twiddle_rsc_triosy_0_15_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_r_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_r_rsc_triosy_obj (
  r_rsc_triosy_lz, core_wten, r_rsc_triosy_obj_iswt0
);
  output r_rsc_triosy_lz;
  input core_wten;
  input r_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire r_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(r_rsc_triosy_obj_ld_core_sct),
      .lz(r_rsc_triosy_lz)
    );
  peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl peaseNTT_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(r_rsc_triosy_obj_iswt0),
      .r_rsc_triosy_obj_ld_core_sct(r_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_p_rsc_triosy_obj
// ------------------------------------------------------------------


module peaseNTT_core_p_rsc_triosy_obj (
  p_rsc_triosy_lz, core_wten, p_rsc_triosy_obj_iswt0
);
  output p_rsc_triosy_lz;
  input core_wten;
  input p_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire p_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(p_rsc_triosy_obj_ld_core_sct),
      .lz(p_rsc_triosy_lz)
    );
  peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl peaseNTT_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(p_rsc_triosy_obj_iswt0),
      .p_rsc_triosy_obj_ld_core_sct(p_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_0_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_0_obj (
  xt_rsc_triosy_0_0_lz, core_wten, xt_rsc_triosy_0_0_obj_iswt0
);
  output xt_rsc_triosy_0_0_lz;
  input core_wten;
  input xt_rsc_triosy_0_0_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_0_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_0_obj (
      .ld(xt_rsc_triosy_0_0_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_0_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_0_obj_xt_rsc_triosy_0_0_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_0_obj_xt_rsc_triosy_0_0_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_0_obj_iswt0(xt_rsc_triosy_0_0_obj_iswt0),
      .xt_rsc_triosy_0_0_obj_ld_core_sct(xt_rsc_triosy_0_0_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_1_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_1_obj (
  xt_rsc_triosy_0_1_lz, core_wten, xt_rsc_triosy_0_1_obj_iswt0
);
  output xt_rsc_triosy_0_1_lz;
  input core_wten;
  input xt_rsc_triosy_0_1_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_1_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_1_obj (
      .ld(xt_rsc_triosy_0_1_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_1_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_1_obj_xt_rsc_triosy_0_1_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_1_obj_xt_rsc_triosy_0_1_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_1_obj_iswt0(xt_rsc_triosy_0_1_obj_iswt0),
      .xt_rsc_triosy_0_1_obj_ld_core_sct(xt_rsc_triosy_0_1_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_2_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_2_obj (
  xt_rsc_triosy_0_2_lz, core_wten, xt_rsc_triosy_0_2_obj_iswt0
);
  output xt_rsc_triosy_0_2_lz;
  input core_wten;
  input xt_rsc_triosy_0_2_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_2_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_2_obj (
      .ld(xt_rsc_triosy_0_2_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_2_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_2_obj_xt_rsc_triosy_0_2_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_2_obj_xt_rsc_triosy_0_2_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_2_obj_iswt0(xt_rsc_triosy_0_2_obj_iswt0),
      .xt_rsc_triosy_0_2_obj_ld_core_sct(xt_rsc_triosy_0_2_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_3_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_3_obj (
  xt_rsc_triosy_0_3_lz, core_wten, xt_rsc_triosy_0_3_obj_iswt0
);
  output xt_rsc_triosy_0_3_lz;
  input core_wten;
  input xt_rsc_triosy_0_3_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_3_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_3_obj (
      .ld(xt_rsc_triosy_0_3_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_3_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_3_obj_xt_rsc_triosy_0_3_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_3_obj_xt_rsc_triosy_0_3_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_3_obj_iswt0(xt_rsc_triosy_0_3_obj_iswt0),
      .xt_rsc_triosy_0_3_obj_ld_core_sct(xt_rsc_triosy_0_3_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_4_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_4_obj (
  xt_rsc_triosy_0_4_lz, core_wten, xt_rsc_triosy_0_4_obj_iswt0
);
  output xt_rsc_triosy_0_4_lz;
  input core_wten;
  input xt_rsc_triosy_0_4_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_4_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_4_obj (
      .ld(xt_rsc_triosy_0_4_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_4_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_4_obj_xt_rsc_triosy_0_4_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_4_obj_xt_rsc_triosy_0_4_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_4_obj_iswt0(xt_rsc_triosy_0_4_obj_iswt0),
      .xt_rsc_triosy_0_4_obj_ld_core_sct(xt_rsc_triosy_0_4_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_5_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_5_obj (
  xt_rsc_triosy_0_5_lz, core_wten, xt_rsc_triosy_0_5_obj_iswt0
);
  output xt_rsc_triosy_0_5_lz;
  input core_wten;
  input xt_rsc_triosy_0_5_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_5_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_5_obj (
      .ld(xt_rsc_triosy_0_5_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_5_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_5_obj_xt_rsc_triosy_0_5_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_5_obj_xt_rsc_triosy_0_5_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_5_obj_iswt0(xt_rsc_triosy_0_5_obj_iswt0),
      .xt_rsc_triosy_0_5_obj_ld_core_sct(xt_rsc_triosy_0_5_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_6_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_6_obj (
  xt_rsc_triosy_0_6_lz, core_wten, xt_rsc_triosy_0_6_obj_iswt0
);
  output xt_rsc_triosy_0_6_lz;
  input core_wten;
  input xt_rsc_triosy_0_6_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_6_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_6_obj (
      .ld(xt_rsc_triosy_0_6_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_6_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_6_obj_xt_rsc_triosy_0_6_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_6_obj_xt_rsc_triosy_0_6_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_6_obj_iswt0(xt_rsc_triosy_0_6_obj_iswt0),
      .xt_rsc_triosy_0_6_obj_ld_core_sct(xt_rsc_triosy_0_6_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_7_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_7_obj (
  xt_rsc_triosy_0_7_lz, core_wten, xt_rsc_triosy_0_7_obj_iswt0
);
  output xt_rsc_triosy_0_7_lz;
  input core_wten;
  input xt_rsc_triosy_0_7_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_7_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_7_obj (
      .ld(xt_rsc_triosy_0_7_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_7_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_7_obj_xt_rsc_triosy_0_7_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_7_obj_xt_rsc_triosy_0_7_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_7_obj_iswt0(xt_rsc_triosy_0_7_obj_iswt0),
      .xt_rsc_triosy_0_7_obj_ld_core_sct(xt_rsc_triosy_0_7_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_8_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_8_obj (
  xt_rsc_triosy_0_8_lz, core_wten, xt_rsc_triosy_0_8_obj_iswt0
);
  output xt_rsc_triosy_0_8_lz;
  input core_wten;
  input xt_rsc_triosy_0_8_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_8_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_8_obj (
      .ld(xt_rsc_triosy_0_8_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_8_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_8_obj_xt_rsc_triosy_0_8_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_8_obj_xt_rsc_triosy_0_8_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_8_obj_iswt0(xt_rsc_triosy_0_8_obj_iswt0),
      .xt_rsc_triosy_0_8_obj_ld_core_sct(xt_rsc_triosy_0_8_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_9_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_9_obj (
  xt_rsc_triosy_0_9_lz, core_wten, xt_rsc_triosy_0_9_obj_iswt0
);
  output xt_rsc_triosy_0_9_lz;
  input core_wten;
  input xt_rsc_triosy_0_9_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_9_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_9_obj (
      .ld(xt_rsc_triosy_0_9_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_9_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_9_obj_xt_rsc_triosy_0_9_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_9_obj_xt_rsc_triosy_0_9_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_9_obj_iswt0(xt_rsc_triosy_0_9_obj_iswt0),
      .xt_rsc_triosy_0_9_obj_ld_core_sct(xt_rsc_triosy_0_9_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_10_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_10_obj (
  xt_rsc_triosy_0_10_lz, core_wten, xt_rsc_triosy_0_10_obj_iswt0
);
  output xt_rsc_triosy_0_10_lz;
  input core_wten;
  input xt_rsc_triosy_0_10_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_10_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_10_obj (
      .ld(xt_rsc_triosy_0_10_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_10_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_10_obj_xt_rsc_triosy_0_10_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_10_obj_xt_rsc_triosy_0_10_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_10_obj_iswt0(xt_rsc_triosy_0_10_obj_iswt0),
      .xt_rsc_triosy_0_10_obj_ld_core_sct(xt_rsc_triosy_0_10_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_11_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_11_obj (
  xt_rsc_triosy_0_11_lz, core_wten, xt_rsc_triosy_0_11_obj_iswt0
);
  output xt_rsc_triosy_0_11_lz;
  input core_wten;
  input xt_rsc_triosy_0_11_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_11_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_11_obj (
      .ld(xt_rsc_triosy_0_11_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_11_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_11_obj_xt_rsc_triosy_0_11_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_11_obj_xt_rsc_triosy_0_11_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_11_obj_iswt0(xt_rsc_triosy_0_11_obj_iswt0),
      .xt_rsc_triosy_0_11_obj_ld_core_sct(xt_rsc_triosy_0_11_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_12_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_12_obj (
  xt_rsc_triosy_0_12_lz, core_wten, xt_rsc_triosy_0_12_obj_iswt0
);
  output xt_rsc_triosy_0_12_lz;
  input core_wten;
  input xt_rsc_triosy_0_12_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_12_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_12_obj (
      .ld(xt_rsc_triosy_0_12_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_12_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_12_obj_xt_rsc_triosy_0_12_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_12_obj_xt_rsc_triosy_0_12_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_12_obj_iswt0(xt_rsc_triosy_0_12_obj_iswt0),
      .xt_rsc_triosy_0_12_obj_ld_core_sct(xt_rsc_triosy_0_12_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_13_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_13_obj (
  xt_rsc_triosy_0_13_lz, core_wten, xt_rsc_triosy_0_13_obj_iswt0
);
  output xt_rsc_triosy_0_13_lz;
  input core_wten;
  input xt_rsc_triosy_0_13_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_13_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_13_obj (
      .ld(xt_rsc_triosy_0_13_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_13_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_13_obj_xt_rsc_triosy_0_13_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_13_obj_xt_rsc_triosy_0_13_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_13_obj_iswt0(xt_rsc_triosy_0_13_obj_iswt0),
      .xt_rsc_triosy_0_13_obj_ld_core_sct(xt_rsc_triosy_0_13_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_14_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_14_obj (
  xt_rsc_triosy_0_14_lz, core_wten, xt_rsc_triosy_0_14_obj_iswt0
);
  output xt_rsc_triosy_0_14_lz;
  input core_wten;
  input xt_rsc_triosy_0_14_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_14_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_14_obj (
      .ld(xt_rsc_triosy_0_14_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_14_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_14_obj_xt_rsc_triosy_0_14_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_14_obj_xt_rsc_triosy_0_14_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_14_obj_iswt0(xt_rsc_triosy_0_14_obj_iswt0),
      .xt_rsc_triosy_0_14_obj_ld_core_sct(xt_rsc_triosy_0_14_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_15_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_15_obj (
  xt_rsc_triosy_0_15_lz, core_wten, xt_rsc_triosy_0_15_obj_iswt0
);
  output xt_rsc_triosy_0_15_lz;
  input core_wten;
  input xt_rsc_triosy_0_15_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_15_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_15_obj (
      .ld(xt_rsc_triosy_0_15_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_15_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_15_obj_xt_rsc_triosy_0_15_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_15_obj_xt_rsc_triosy_0_15_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_15_obj_iswt0(xt_rsc_triosy_0_15_obj_iswt0),
      .xt_rsc_triosy_0_15_obj_ld_core_sct(xt_rsc_triosy_0_15_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_16_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_16_obj (
  xt_rsc_triosy_0_16_lz, core_wten, xt_rsc_triosy_0_16_obj_iswt0
);
  output xt_rsc_triosy_0_16_lz;
  input core_wten;
  input xt_rsc_triosy_0_16_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_16_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_16_obj (
      .ld(xt_rsc_triosy_0_16_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_16_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_16_obj_xt_rsc_triosy_0_16_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_16_obj_xt_rsc_triosy_0_16_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_16_obj_iswt0(xt_rsc_triosy_0_16_obj_iswt0),
      .xt_rsc_triosy_0_16_obj_ld_core_sct(xt_rsc_triosy_0_16_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_17_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_17_obj (
  xt_rsc_triosy_0_17_lz, core_wten, xt_rsc_triosy_0_17_obj_iswt0
);
  output xt_rsc_triosy_0_17_lz;
  input core_wten;
  input xt_rsc_triosy_0_17_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_17_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_17_obj (
      .ld(xt_rsc_triosy_0_17_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_17_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_17_obj_xt_rsc_triosy_0_17_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_17_obj_xt_rsc_triosy_0_17_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_17_obj_iswt0(xt_rsc_triosy_0_17_obj_iswt0),
      .xt_rsc_triosy_0_17_obj_ld_core_sct(xt_rsc_triosy_0_17_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_18_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_18_obj (
  xt_rsc_triosy_0_18_lz, core_wten, xt_rsc_triosy_0_18_obj_iswt0
);
  output xt_rsc_triosy_0_18_lz;
  input core_wten;
  input xt_rsc_triosy_0_18_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_18_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_18_obj (
      .ld(xt_rsc_triosy_0_18_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_18_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_18_obj_xt_rsc_triosy_0_18_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_18_obj_xt_rsc_triosy_0_18_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_18_obj_iswt0(xt_rsc_triosy_0_18_obj_iswt0),
      .xt_rsc_triosy_0_18_obj_ld_core_sct(xt_rsc_triosy_0_18_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_19_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_19_obj (
  xt_rsc_triosy_0_19_lz, core_wten, xt_rsc_triosy_0_19_obj_iswt0
);
  output xt_rsc_triosy_0_19_lz;
  input core_wten;
  input xt_rsc_triosy_0_19_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_19_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_19_obj (
      .ld(xt_rsc_triosy_0_19_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_19_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_19_obj_xt_rsc_triosy_0_19_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_19_obj_xt_rsc_triosy_0_19_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_19_obj_iswt0(xt_rsc_triosy_0_19_obj_iswt0),
      .xt_rsc_triosy_0_19_obj_ld_core_sct(xt_rsc_triosy_0_19_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_20_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_20_obj (
  xt_rsc_triosy_0_20_lz, core_wten, xt_rsc_triosy_0_20_obj_iswt0
);
  output xt_rsc_triosy_0_20_lz;
  input core_wten;
  input xt_rsc_triosy_0_20_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_20_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_20_obj (
      .ld(xt_rsc_triosy_0_20_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_20_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_20_obj_xt_rsc_triosy_0_20_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_20_obj_xt_rsc_triosy_0_20_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_20_obj_iswt0(xt_rsc_triosy_0_20_obj_iswt0),
      .xt_rsc_triosy_0_20_obj_ld_core_sct(xt_rsc_triosy_0_20_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_21_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_21_obj (
  xt_rsc_triosy_0_21_lz, core_wten, xt_rsc_triosy_0_21_obj_iswt0
);
  output xt_rsc_triosy_0_21_lz;
  input core_wten;
  input xt_rsc_triosy_0_21_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_21_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_21_obj (
      .ld(xt_rsc_triosy_0_21_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_21_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_21_obj_xt_rsc_triosy_0_21_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_21_obj_xt_rsc_triosy_0_21_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_21_obj_iswt0(xt_rsc_triosy_0_21_obj_iswt0),
      .xt_rsc_triosy_0_21_obj_ld_core_sct(xt_rsc_triosy_0_21_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_22_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_22_obj (
  xt_rsc_triosy_0_22_lz, core_wten, xt_rsc_triosy_0_22_obj_iswt0
);
  output xt_rsc_triosy_0_22_lz;
  input core_wten;
  input xt_rsc_triosy_0_22_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_22_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_22_obj (
      .ld(xt_rsc_triosy_0_22_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_22_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_22_obj_xt_rsc_triosy_0_22_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_22_obj_xt_rsc_triosy_0_22_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_22_obj_iswt0(xt_rsc_triosy_0_22_obj_iswt0),
      .xt_rsc_triosy_0_22_obj_ld_core_sct(xt_rsc_triosy_0_22_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_23_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_23_obj (
  xt_rsc_triosy_0_23_lz, core_wten, xt_rsc_triosy_0_23_obj_iswt0
);
  output xt_rsc_triosy_0_23_lz;
  input core_wten;
  input xt_rsc_triosy_0_23_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_23_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_23_obj (
      .ld(xt_rsc_triosy_0_23_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_23_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_23_obj_xt_rsc_triosy_0_23_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_23_obj_xt_rsc_triosy_0_23_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_23_obj_iswt0(xt_rsc_triosy_0_23_obj_iswt0),
      .xt_rsc_triosy_0_23_obj_ld_core_sct(xt_rsc_triosy_0_23_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_24_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_24_obj (
  xt_rsc_triosy_0_24_lz, core_wten, xt_rsc_triosy_0_24_obj_iswt0
);
  output xt_rsc_triosy_0_24_lz;
  input core_wten;
  input xt_rsc_triosy_0_24_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_24_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_24_obj (
      .ld(xt_rsc_triosy_0_24_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_24_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_24_obj_xt_rsc_triosy_0_24_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_24_obj_xt_rsc_triosy_0_24_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_24_obj_iswt0(xt_rsc_triosy_0_24_obj_iswt0),
      .xt_rsc_triosy_0_24_obj_ld_core_sct(xt_rsc_triosy_0_24_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_25_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_25_obj (
  xt_rsc_triosy_0_25_lz, core_wten, xt_rsc_triosy_0_25_obj_iswt0
);
  output xt_rsc_triosy_0_25_lz;
  input core_wten;
  input xt_rsc_triosy_0_25_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_25_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_25_obj (
      .ld(xt_rsc_triosy_0_25_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_25_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_25_obj_xt_rsc_triosy_0_25_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_25_obj_xt_rsc_triosy_0_25_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_25_obj_iswt0(xt_rsc_triosy_0_25_obj_iswt0),
      .xt_rsc_triosy_0_25_obj_ld_core_sct(xt_rsc_triosy_0_25_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_26_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_26_obj (
  xt_rsc_triosy_0_26_lz, core_wten, xt_rsc_triosy_0_26_obj_iswt0
);
  output xt_rsc_triosy_0_26_lz;
  input core_wten;
  input xt_rsc_triosy_0_26_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_26_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_26_obj (
      .ld(xt_rsc_triosy_0_26_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_26_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_26_obj_xt_rsc_triosy_0_26_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_26_obj_xt_rsc_triosy_0_26_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_26_obj_iswt0(xt_rsc_triosy_0_26_obj_iswt0),
      .xt_rsc_triosy_0_26_obj_ld_core_sct(xt_rsc_triosy_0_26_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_27_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_27_obj (
  xt_rsc_triosy_0_27_lz, core_wten, xt_rsc_triosy_0_27_obj_iswt0
);
  output xt_rsc_triosy_0_27_lz;
  input core_wten;
  input xt_rsc_triosy_0_27_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_27_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_27_obj (
      .ld(xt_rsc_triosy_0_27_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_27_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_27_obj_xt_rsc_triosy_0_27_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_27_obj_xt_rsc_triosy_0_27_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_27_obj_iswt0(xt_rsc_triosy_0_27_obj_iswt0),
      .xt_rsc_triosy_0_27_obj_ld_core_sct(xt_rsc_triosy_0_27_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_28_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_28_obj (
  xt_rsc_triosy_0_28_lz, core_wten, xt_rsc_triosy_0_28_obj_iswt0
);
  output xt_rsc_triosy_0_28_lz;
  input core_wten;
  input xt_rsc_triosy_0_28_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_28_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_28_obj (
      .ld(xt_rsc_triosy_0_28_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_28_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_28_obj_xt_rsc_triosy_0_28_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_28_obj_xt_rsc_triosy_0_28_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_28_obj_iswt0(xt_rsc_triosy_0_28_obj_iswt0),
      .xt_rsc_triosy_0_28_obj_ld_core_sct(xt_rsc_triosy_0_28_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_29_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_29_obj (
  xt_rsc_triosy_0_29_lz, core_wten, xt_rsc_triosy_0_29_obj_iswt0
);
  output xt_rsc_triosy_0_29_lz;
  input core_wten;
  input xt_rsc_triosy_0_29_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_29_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_29_obj (
      .ld(xt_rsc_triosy_0_29_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_29_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_29_obj_xt_rsc_triosy_0_29_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_29_obj_xt_rsc_triosy_0_29_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_29_obj_iswt0(xt_rsc_triosy_0_29_obj_iswt0),
      .xt_rsc_triosy_0_29_obj_ld_core_sct(xt_rsc_triosy_0_29_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_30_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_30_obj (
  xt_rsc_triosy_0_30_lz, core_wten, xt_rsc_triosy_0_30_obj_iswt0
);
  output xt_rsc_triosy_0_30_lz;
  input core_wten;
  input xt_rsc_triosy_0_30_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_30_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_30_obj (
      .ld(xt_rsc_triosy_0_30_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_30_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_30_obj_xt_rsc_triosy_0_30_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_30_obj_xt_rsc_triosy_0_30_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_30_obj_iswt0(xt_rsc_triosy_0_30_obj_iswt0),
      .xt_rsc_triosy_0_30_obj_ld_core_sct(xt_rsc_triosy_0_30_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_0_31_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_0_31_obj (
  xt_rsc_triosy_0_31_lz, core_wten, xt_rsc_triosy_0_31_obj_iswt0
);
  output xt_rsc_triosy_0_31_lz;
  input core_wten;
  input xt_rsc_triosy_0_31_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_0_31_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_31_obj (
      .ld(xt_rsc_triosy_0_31_obj_ld_core_sct),
      .lz(xt_rsc_triosy_0_31_lz)
    );
  peaseNTT_core_xt_rsc_triosy_0_31_obj_xt_rsc_triosy_0_31_wait_ctrl peaseNTT_core_xt_rsc_triosy_0_31_obj_xt_rsc_triosy_0_31_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_0_31_obj_iswt0(xt_rsc_triosy_0_31_obj_iswt0),
      .xt_rsc_triosy_0_31_obj_ld_core_sct(xt_rsc_triosy_0_31_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_0_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_0_obj (
  xt_rsc_triosy_1_0_lz, core_wten, xt_rsc_triosy_1_0_obj_iswt0
);
  output xt_rsc_triosy_1_0_lz;
  input core_wten;
  input xt_rsc_triosy_1_0_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_0_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_0_obj (
      .ld(xt_rsc_triosy_1_0_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_0_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_0_obj_xt_rsc_triosy_1_0_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_0_obj_xt_rsc_triosy_1_0_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_0_obj_iswt0(xt_rsc_triosy_1_0_obj_iswt0),
      .xt_rsc_triosy_1_0_obj_ld_core_sct(xt_rsc_triosy_1_0_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_1_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_1_obj (
  xt_rsc_triosy_1_1_lz, core_wten, xt_rsc_triosy_1_1_obj_iswt0
);
  output xt_rsc_triosy_1_1_lz;
  input core_wten;
  input xt_rsc_triosy_1_1_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_1_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_1_obj (
      .ld(xt_rsc_triosy_1_1_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_1_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_1_obj_xt_rsc_triosy_1_1_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_1_obj_xt_rsc_triosy_1_1_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_1_obj_iswt0(xt_rsc_triosy_1_1_obj_iswt0),
      .xt_rsc_triosy_1_1_obj_ld_core_sct(xt_rsc_triosy_1_1_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_2_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_2_obj (
  xt_rsc_triosy_1_2_lz, core_wten, xt_rsc_triosy_1_2_obj_iswt0
);
  output xt_rsc_triosy_1_2_lz;
  input core_wten;
  input xt_rsc_triosy_1_2_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_2_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_2_obj (
      .ld(xt_rsc_triosy_1_2_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_2_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_2_obj_xt_rsc_triosy_1_2_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_2_obj_xt_rsc_triosy_1_2_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_2_obj_iswt0(xt_rsc_triosy_1_2_obj_iswt0),
      .xt_rsc_triosy_1_2_obj_ld_core_sct(xt_rsc_triosy_1_2_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_3_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_3_obj (
  xt_rsc_triosy_1_3_lz, core_wten, xt_rsc_triosy_1_3_obj_iswt0
);
  output xt_rsc_triosy_1_3_lz;
  input core_wten;
  input xt_rsc_triosy_1_3_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_3_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_3_obj (
      .ld(xt_rsc_triosy_1_3_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_3_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_3_obj_xt_rsc_triosy_1_3_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_3_obj_xt_rsc_triosy_1_3_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_3_obj_iswt0(xt_rsc_triosy_1_3_obj_iswt0),
      .xt_rsc_triosy_1_3_obj_ld_core_sct(xt_rsc_triosy_1_3_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_4_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_4_obj (
  xt_rsc_triosy_1_4_lz, core_wten, xt_rsc_triosy_1_4_obj_iswt0
);
  output xt_rsc_triosy_1_4_lz;
  input core_wten;
  input xt_rsc_triosy_1_4_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_4_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_4_obj (
      .ld(xt_rsc_triosy_1_4_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_4_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_4_obj_xt_rsc_triosy_1_4_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_4_obj_xt_rsc_triosy_1_4_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_4_obj_iswt0(xt_rsc_triosy_1_4_obj_iswt0),
      .xt_rsc_triosy_1_4_obj_ld_core_sct(xt_rsc_triosy_1_4_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_5_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_5_obj (
  xt_rsc_triosy_1_5_lz, core_wten, xt_rsc_triosy_1_5_obj_iswt0
);
  output xt_rsc_triosy_1_5_lz;
  input core_wten;
  input xt_rsc_triosy_1_5_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_5_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_5_obj (
      .ld(xt_rsc_triosy_1_5_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_5_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_5_obj_xt_rsc_triosy_1_5_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_5_obj_xt_rsc_triosy_1_5_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_5_obj_iswt0(xt_rsc_triosy_1_5_obj_iswt0),
      .xt_rsc_triosy_1_5_obj_ld_core_sct(xt_rsc_triosy_1_5_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_6_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_6_obj (
  xt_rsc_triosy_1_6_lz, core_wten, xt_rsc_triosy_1_6_obj_iswt0
);
  output xt_rsc_triosy_1_6_lz;
  input core_wten;
  input xt_rsc_triosy_1_6_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_6_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_6_obj (
      .ld(xt_rsc_triosy_1_6_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_6_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_6_obj_xt_rsc_triosy_1_6_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_6_obj_xt_rsc_triosy_1_6_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_6_obj_iswt0(xt_rsc_triosy_1_6_obj_iswt0),
      .xt_rsc_triosy_1_6_obj_ld_core_sct(xt_rsc_triosy_1_6_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_7_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_7_obj (
  xt_rsc_triosy_1_7_lz, core_wten, xt_rsc_triosy_1_7_obj_iswt0
);
  output xt_rsc_triosy_1_7_lz;
  input core_wten;
  input xt_rsc_triosy_1_7_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_7_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_7_obj (
      .ld(xt_rsc_triosy_1_7_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_7_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_7_obj_xt_rsc_triosy_1_7_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_7_obj_xt_rsc_triosy_1_7_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_7_obj_iswt0(xt_rsc_triosy_1_7_obj_iswt0),
      .xt_rsc_triosy_1_7_obj_ld_core_sct(xt_rsc_triosy_1_7_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_8_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_8_obj (
  xt_rsc_triosy_1_8_lz, core_wten, xt_rsc_triosy_1_8_obj_iswt0
);
  output xt_rsc_triosy_1_8_lz;
  input core_wten;
  input xt_rsc_triosy_1_8_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_8_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_8_obj (
      .ld(xt_rsc_triosy_1_8_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_8_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_8_obj_xt_rsc_triosy_1_8_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_8_obj_xt_rsc_triosy_1_8_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_8_obj_iswt0(xt_rsc_triosy_1_8_obj_iswt0),
      .xt_rsc_triosy_1_8_obj_ld_core_sct(xt_rsc_triosy_1_8_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_9_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_9_obj (
  xt_rsc_triosy_1_9_lz, core_wten, xt_rsc_triosy_1_9_obj_iswt0
);
  output xt_rsc_triosy_1_9_lz;
  input core_wten;
  input xt_rsc_triosy_1_9_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_9_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_9_obj (
      .ld(xt_rsc_triosy_1_9_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_9_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_9_obj_xt_rsc_triosy_1_9_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_9_obj_xt_rsc_triosy_1_9_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_9_obj_iswt0(xt_rsc_triosy_1_9_obj_iswt0),
      .xt_rsc_triosy_1_9_obj_ld_core_sct(xt_rsc_triosy_1_9_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_10_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_10_obj (
  xt_rsc_triosy_1_10_lz, core_wten, xt_rsc_triosy_1_10_obj_iswt0
);
  output xt_rsc_triosy_1_10_lz;
  input core_wten;
  input xt_rsc_triosy_1_10_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_10_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_10_obj (
      .ld(xt_rsc_triosy_1_10_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_10_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_10_obj_xt_rsc_triosy_1_10_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_10_obj_xt_rsc_triosy_1_10_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_10_obj_iswt0(xt_rsc_triosy_1_10_obj_iswt0),
      .xt_rsc_triosy_1_10_obj_ld_core_sct(xt_rsc_triosy_1_10_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_11_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_11_obj (
  xt_rsc_triosy_1_11_lz, core_wten, xt_rsc_triosy_1_11_obj_iswt0
);
  output xt_rsc_triosy_1_11_lz;
  input core_wten;
  input xt_rsc_triosy_1_11_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_11_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_11_obj (
      .ld(xt_rsc_triosy_1_11_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_11_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_11_obj_xt_rsc_triosy_1_11_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_11_obj_xt_rsc_triosy_1_11_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_11_obj_iswt0(xt_rsc_triosy_1_11_obj_iswt0),
      .xt_rsc_triosy_1_11_obj_ld_core_sct(xt_rsc_triosy_1_11_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_12_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_12_obj (
  xt_rsc_triosy_1_12_lz, core_wten, xt_rsc_triosy_1_12_obj_iswt0
);
  output xt_rsc_triosy_1_12_lz;
  input core_wten;
  input xt_rsc_triosy_1_12_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_12_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_12_obj (
      .ld(xt_rsc_triosy_1_12_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_12_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_12_obj_xt_rsc_triosy_1_12_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_12_obj_xt_rsc_triosy_1_12_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_12_obj_iswt0(xt_rsc_triosy_1_12_obj_iswt0),
      .xt_rsc_triosy_1_12_obj_ld_core_sct(xt_rsc_triosy_1_12_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_13_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_13_obj (
  xt_rsc_triosy_1_13_lz, core_wten, xt_rsc_triosy_1_13_obj_iswt0
);
  output xt_rsc_triosy_1_13_lz;
  input core_wten;
  input xt_rsc_triosy_1_13_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_13_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_13_obj (
      .ld(xt_rsc_triosy_1_13_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_13_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_13_obj_xt_rsc_triosy_1_13_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_13_obj_xt_rsc_triosy_1_13_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_13_obj_iswt0(xt_rsc_triosy_1_13_obj_iswt0),
      .xt_rsc_triosy_1_13_obj_ld_core_sct(xt_rsc_triosy_1_13_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_14_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_14_obj (
  xt_rsc_triosy_1_14_lz, core_wten, xt_rsc_triosy_1_14_obj_iswt0
);
  output xt_rsc_triosy_1_14_lz;
  input core_wten;
  input xt_rsc_triosy_1_14_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_14_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_14_obj (
      .ld(xt_rsc_triosy_1_14_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_14_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_14_obj_xt_rsc_triosy_1_14_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_14_obj_xt_rsc_triosy_1_14_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_14_obj_iswt0(xt_rsc_triosy_1_14_obj_iswt0),
      .xt_rsc_triosy_1_14_obj_ld_core_sct(xt_rsc_triosy_1_14_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_15_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_15_obj (
  xt_rsc_triosy_1_15_lz, core_wten, xt_rsc_triosy_1_15_obj_iswt0
);
  output xt_rsc_triosy_1_15_lz;
  input core_wten;
  input xt_rsc_triosy_1_15_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_15_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_15_obj (
      .ld(xt_rsc_triosy_1_15_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_15_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_15_obj_xt_rsc_triosy_1_15_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_15_obj_xt_rsc_triosy_1_15_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_15_obj_iswt0(xt_rsc_triosy_1_15_obj_iswt0),
      .xt_rsc_triosy_1_15_obj_ld_core_sct(xt_rsc_triosy_1_15_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_16_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_16_obj (
  xt_rsc_triosy_1_16_lz, core_wten, xt_rsc_triosy_1_16_obj_iswt0
);
  output xt_rsc_triosy_1_16_lz;
  input core_wten;
  input xt_rsc_triosy_1_16_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_16_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_16_obj (
      .ld(xt_rsc_triosy_1_16_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_16_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_16_obj_xt_rsc_triosy_1_16_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_16_obj_xt_rsc_triosy_1_16_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_16_obj_iswt0(xt_rsc_triosy_1_16_obj_iswt0),
      .xt_rsc_triosy_1_16_obj_ld_core_sct(xt_rsc_triosy_1_16_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_17_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_17_obj (
  xt_rsc_triosy_1_17_lz, core_wten, xt_rsc_triosy_1_17_obj_iswt0
);
  output xt_rsc_triosy_1_17_lz;
  input core_wten;
  input xt_rsc_triosy_1_17_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_17_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_17_obj (
      .ld(xt_rsc_triosy_1_17_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_17_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_17_obj_xt_rsc_triosy_1_17_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_17_obj_xt_rsc_triosy_1_17_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_17_obj_iswt0(xt_rsc_triosy_1_17_obj_iswt0),
      .xt_rsc_triosy_1_17_obj_ld_core_sct(xt_rsc_triosy_1_17_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_18_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_18_obj (
  xt_rsc_triosy_1_18_lz, core_wten, xt_rsc_triosy_1_18_obj_iswt0
);
  output xt_rsc_triosy_1_18_lz;
  input core_wten;
  input xt_rsc_triosy_1_18_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_18_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_18_obj (
      .ld(xt_rsc_triosy_1_18_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_18_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_18_obj_xt_rsc_triosy_1_18_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_18_obj_xt_rsc_triosy_1_18_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_18_obj_iswt0(xt_rsc_triosy_1_18_obj_iswt0),
      .xt_rsc_triosy_1_18_obj_ld_core_sct(xt_rsc_triosy_1_18_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_19_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_19_obj (
  xt_rsc_triosy_1_19_lz, core_wten, xt_rsc_triosy_1_19_obj_iswt0
);
  output xt_rsc_triosy_1_19_lz;
  input core_wten;
  input xt_rsc_triosy_1_19_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_19_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_19_obj (
      .ld(xt_rsc_triosy_1_19_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_19_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_19_obj_xt_rsc_triosy_1_19_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_19_obj_xt_rsc_triosy_1_19_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_19_obj_iswt0(xt_rsc_triosy_1_19_obj_iswt0),
      .xt_rsc_triosy_1_19_obj_ld_core_sct(xt_rsc_triosy_1_19_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_20_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_20_obj (
  xt_rsc_triosy_1_20_lz, core_wten, xt_rsc_triosy_1_20_obj_iswt0
);
  output xt_rsc_triosy_1_20_lz;
  input core_wten;
  input xt_rsc_triosy_1_20_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_20_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_20_obj (
      .ld(xt_rsc_triosy_1_20_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_20_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_20_obj_xt_rsc_triosy_1_20_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_20_obj_xt_rsc_triosy_1_20_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_20_obj_iswt0(xt_rsc_triosy_1_20_obj_iswt0),
      .xt_rsc_triosy_1_20_obj_ld_core_sct(xt_rsc_triosy_1_20_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_21_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_21_obj (
  xt_rsc_triosy_1_21_lz, core_wten, xt_rsc_triosy_1_21_obj_iswt0
);
  output xt_rsc_triosy_1_21_lz;
  input core_wten;
  input xt_rsc_triosy_1_21_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_21_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_21_obj (
      .ld(xt_rsc_triosy_1_21_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_21_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_21_obj_xt_rsc_triosy_1_21_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_21_obj_xt_rsc_triosy_1_21_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_21_obj_iswt0(xt_rsc_triosy_1_21_obj_iswt0),
      .xt_rsc_triosy_1_21_obj_ld_core_sct(xt_rsc_triosy_1_21_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_22_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_22_obj (
  xt_rsc_triosy_1_22_lz, core_wten, xt_rsc_triosy_1_22_obj_iswt0
);
  output xt_rsc_triosy_1_22_lz;
  input core_wten;
  input xt_rsc_triosy_1_22_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_22_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_22_obj (
      .ld(xt_rsc_triosy_1_22_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_22_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_22_obj_xt_rsc_triosy_1_22_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_22_obj_xt_rsc_triosy_1_22_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_22_obj_iswt0(xt_rsc_triosy_1_22_obj_iswt0),
      .xt_rsc_triosy_1_22_obj_ld_core_sct(xt_rsc_triosy_1_22_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_23_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_23_obj (
  xt_rsc_triosy_1_23_lz, core_wten, xt_rsc_triosy_1_23_obj_iswt0
);
  output xt_rsc_triosy_1_23_lz;
  input core_wten;
  input xt_rsc_triosy_1_23_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_23_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_23_obj (
      .ld(xt_rsc_triosy_1_23_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_23_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_23_obj_xt_rsc_triosy_1_23_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_23_obj_xt_rsc_triosy_1_23_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_23_obj_iswt0(xt_rsc_triosy_1_23_obj_iswt0),
      .xt_rsc_triosy_1_23_obj_ld_core_sct(xt_rsc_triosy_1_23_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_24_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_24_obj (
  xt_rsc_triosy_1_24_lz, core_wten, xt_rsc_triosy_1_24_obj_iswt0
);
  output xt_rsc_triosy_1_24_lz;
  input core_wten;
  input xt_rsc_triosy_1_24_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_24_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_24_obj (
      .ld(xt_rsc_triosy_1_24_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_24_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_24_obj_xt_rsc_triosy_1_24_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_24_obj_xt_rsc_triosy_1_24_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_24_obj_iswt0(xt_rsc_triosy_1_24_obj_iswt0),
      .xt_rsc_triosy_1_24_obj_ld_core_sct(xt_rsc_triosy_1_24_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_25_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_25_obj (
  xt_rsc_triosy_1_25_lz, core_wten, xt_rsc_triosy_1_25_obj_iswt0
);
  output xt_rsc_triosy_1_25_lz;
  input core_wten;
  input xt_rsc_triosy_1_25_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_25_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_25_obj (
      .ld(xt_rsc_triosy_1_25_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_25_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_25_obj_xt_rsc_triosy_1_25_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_25_obj_xt_rsc_triosy_1_25_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_25_obj_iswt0(xt_rsc_triosy_1_25_obj_iswt0),
      .xt_rsc_triosy_1_25_obj_ld_core_sct(xt_rsc_triosy_1_25_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_26_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_26_obj (
  xt_rsc_triosy_1_26_lz, core_wten, xt_rsc_triosy_1_26_obj_iswt0
);
  output xt_rsc_triosy_1_26_lz;
  input core_wten;
  input xt_rsc_triosy_1_26_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_26_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_26_obj (
      .ld(xt_rsc_triosy_1_26_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_26_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_26_obj_xt_rsc_triosy_1_26_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_26_obj_xt_rsc_triosy_1_26_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_26_obj_iswt0(xt_rsc_triosy_1_26_obj_iswt0),
      .xt_rsc_triosy_1_26_obj_ld_core_sct(xt_rsc_triosy_1_26_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_27_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_27_obj (
  xt_rsc_triosy_1_27_lz, core_wten, xt_rsc_triosy_1_27_obj_iswt0
);
  output xt_rsc_triosy_1_27_lz;
  input core_wten;
  input xt_rsc_triosy_1_27_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_27_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_27_obj (
      .ld(xt_rsc_triosy_1_27_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_27_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_27_obj_xt_rsc_triosy_1_27_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_27_obj_xt_rsc_triosy_1_27_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_27_obj_iswt0(xt_rsc_triosy_1_27_obj_iswt0),
      .xt_rsc_triosy_1_27_obj_ld_core_sct(xt_rsc_triosy_1_27_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_28_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_28_obj (
  xt_rsc_triosy_1_28_lz, core_wten, xt_rsc_triosy_1_28_obj_iswt0
);
  output xt_rsc_triosy_1_28_lz;
  input core_wten;
  input xt_rsc_triosy_1_28_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_28_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_28_obj (
      .ld(xt_rsc_triosy_1_28_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_28_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_28_obj_xt_rsc_triosy_1_28_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_28_obj_xt_rsc_triosy_1_28_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_28_obj_iswt0(xt_rsc_triosy_1_28_obj_iswt0),
      .xt_rsc_triosy_1_28_obj_ld_core_sct(xt_rsc_triosy_1_28_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_29_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_29_obj (
  xt_rsc_triosy_1_29_lz, core_wten, xt_rsc_triosy_1_29_obj_iswt0
);
  output xt_rsc_triosy_1_29_lz;
  input core_wten;
  input xt_rsc_triosy_1_29_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_29_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_29_obj (
      .ld(xt_rsc_triosy_1_29_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_29_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_29_obj_xt_rsc_triosy_1_29_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_29_obj_xt_rsc_triosy_1_29_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_29_obj_iswt0(xt_rsc_triosy_1_29_obj_iswt0),
      .xt_rsc_triosy_1_29_obj_ld_core_sct(xt_rsc_triosy_1_29_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_30_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_30_obj (
  xt_rsc_triosy_1_30_lz, core_wten, xt_rsc_triosy_1_30_obj_iswt0
);
  output xt_rsc_triosy_1_30_lz;
  input core_wten;
  input xt_rsc_triosy_1_30_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_30_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_30_obj (
      .ld(xt_rsc_triosy_1_30_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_30_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_30_obj_xt_rsc_triosy_1_30_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_30_obj_xt_rsc_triosy_1_30_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_30_obj_iswt0(xt_rsc_triosy_1_30_obj_iswt0),
      .xt_rsc_triosy_1_30_obj_ld_core_sct(xt_rsc_triosy_1_30_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_triosy_1_31_obj
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_triosy_1_31_obj (
  xt_rsc_triosy_1_31_lz, core_wten, xt_rsc_triosy_1_31_obj_iswt0
);
  output xt_rsc_triosy_1_31_lz;
  input core_wten;
  input xt_rsc_triosy_1_31_obj_iswt0;


  // Interconnect Declarations
  wire xt_rsc_triosy_1_31_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_1_31_obj (
      .ld(xt_rsc_triosy_1_31_obj_ld_core_sct),
      .lz(xt_rsc_triosy_1_31_lz)
    );
  peaseNTT_core_xt_rsc_triosy_1_31_obj_xt_rsc_triosy_1_31_wait_ctrl peaseNTT_core_xt_rsc_triosy_1_31_obj_xt_rsc_triosy_1_31_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .xt_rsc_triosy_1_31_obj_iswt0(xt_rsc_triosy_1_31_obj_iswt0),
      .xt_rsc_triosy_1_31_obj_ld_core_sct(xt_rsc_triosy_1_31_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_15_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_15_i (
  clk, rst, twiddle_h_rsc_0_15_s_tdone, twiddle_h_rsc_0_15_tr_write_done, twiddle_h_rsc_0_15_RREADY,
      twiddle_h_rsc_0_15_RVALID, twiddle_h_rsc_0_15_RUSER, twiddle_h_rsc_0_15_RLAST,
      twiddle_h_rsc_0_15_RRESP, twiddle_h_rsc_0_15_RDATA, twiddle_h_rsc_0_15_RID,
      twiddle_h_rsc_0_15_ARREADY, twiddle_h_rsc_0_15_ARVALID, twiddle_h_rsc_0_15_ARUSER,
      twiddle_h_rsc_0_15_ARREGION, twiddle_h_rsc_0_15_ARQOS, twiddle_h_rsc_0_15_ARPROT,
      twiddle_h_rsc_0_15_ARCACHE, twiddle_h_rsc_0_15_ARLOCK, twiddle_h_rsc_0_15_ARBURST,
      twiddle_h_rsc_0_15_ARSIZE, twiddle_h_rsc_0_15_ARLEN, twiddle_h_rsc_0_15_ARADDR,
      twiddle_h_rsc_0_15_ARID, twiddle_h_rsc_0_15_BREADY, twiddle_h_rsc_0_15_BVALID,
      twiddle_h_rsc_0_15_BUSER, twiddle_h_rsc_0_15_BRESP, twiddle_h_rsc_0_15_BID,
      twiddle_h_rsc_0_15_WREADY, twiddle_h_rsc_0_15_WVALID, twiddle_h_rsc_0_15_WUSER,
      twiddle_h_rsc_0_15_WLAST, twiddle_h_rsc_0_15_WSTRB, twiddle_h_rsc_0_15_WDATA,
      twiddle_h_rsc_0_15_AWREADY, twiddle_h_rsc_0_15_AWVALID, twiddle_h_rsc_0_15_AWUSER,
      twiddle_h_rsc_0_15_AWREGION, twiddle_h_rsc_0_15_AWQOS, twiddle_h_rsc_0_15_AWPROT,
      twiddle_h_rsc_0_15_AWCACHE, twiddle_h_rsc_0_15_AWLOCK, twiddle_h_rsc_0_15_AWBURST,
      twiddle_h_rsc_0_15_AWSIZE, twiddle_h_rsc_0_15_AWLEN, twiddle_h_rsc_0_15_AWADDR,
      twiddle_h_rsc_0_15_AWID, core_wen, twiddle_h_rsc_0_15_i_oswt, twiddle_h_rsc_0_15_i_wen_comp,
      twiddle_h_rsc_0_15_i_s_raddr_core, twiddle_h_rsc_0_15_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_15_s_tdone;
  input twiddle_h_rsc_0_15_tr_write_done;
  input twiddle_h_rsc_0_15_RREADY;
  output twiddle_h_rsc_0_15_RVALID;
  output twiddle_h_rsc_0_15_RUSER;
  output twiddle_h_rsc_0_15_RLAST;
  output [1:0] twiddle_h_rsc_0_15_RRESP;
  output [31:0] twiddle_h_rsc_0_15_RDATA;
  output twiddle_h_rsc_0_15_RID;
  output twiddle_h_rsc_0_15_ARREADY;
  input twiddle_h_rsc_0_15_ARVALID;
  input twiddle_h_rsc_0_15_ARUSER;
  input [3:0] twiddle_h_rsc_0_15_ARREGION;
  input [3:0] twiddle_h_rsc_0_15_ARQOS;
  input [2:0] twiddle_h_rsc_0_15_ARPROT;
  input [3:0] twiddle_h_rsc_0_15_ARCACHE;
  input twiddle_h_rsc_0_15_ARLOCK;
  input [1:0] twiddle_h_rsc_0_15_ARBURST;
  input [2:0] twiddle_h_rsc_0_15_ARSIZE;
  input [7:0] twiddle_h_rsc_0_15_ARLEN;
  input [11:0] twiddle_h_rsc_0_15_ARADDR;
  input twiddle_h_rsc_0_15_ARID;
  input twiddle_h_rsc_0_15_BREADY;
  output twiddle_h_rsc_0_15_BVALID;
  output twiddle_h_rsc_0_15_BUSER;
  output [1:0] twiddle_h_rsc_0_15_BRESP;
  output twiddle_h_rsc_0_15_BID;
  output twiddle_h_rsc_0_15_WREADY;
  input twiddle_h_rsc_0_15_WVALID;
  input twiddle_h_rsc_0_15_WUSER;
  input twiddle_h_rsc_0_15_WLAST;
  input [3:0] twiddle_h_rsc_0_15_WSTRB;
  input [31:0] twiddle_h_rsc_0_15_WDATA;
  output twiddle_h_rsc_0_15_AWREADY;
  input twiddle_h_rsc_0_15_AWVALID;
  input twiddle_h_rsc_0_15_AWUSER;
  input [3:0] twiddle_h_rsc_0_15_AWREGION;
  input [3:0] twiddle_h_rsc_0_15_AWQOS;
  input [2:0] twiddle_h_rsc_0_15_AWPROT;
  input [3:0] twiddle_h_rsc_0_15_AWCACHE;
  input twiddle_h_rsc_0_15_AWLOCK;
  input [1:0] twiddle_h_rsc_0_15_AWBURST;
  input [2:0] twiddle_h_rsc_0_15_AWSIZE;
  input [7:0] twiddle_h_rsc_0_15_AWLEN;
  input [11:0] twiddle_h_rsc_0_15_AWADDR;
  input twiddle_h_rsc_0_15_AWID;
  input core_wen;
  input twiddle_h_rsc_0_15_i_oswt;
  output twiddle_h_rsc_0_15_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_15_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_15_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_15_i_biwt;
  wire twiddle_h_rsc_0_15_i_bdwt;
  wire twiddle_h_rsc_0_15_i_bcwt;
  wire twiddle_h_rsc_0_15_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_15_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_15_i_s_din;
  wire twiddle_h_rsc_0_15_i_s_rrdy;
  wire twiddle_h_rsc_0_15_i_s_wrdy;
  wire twiddle_h_rsc_0_15_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp_inst_twiddle_h_rsc_0_15_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp_inst_twiddle_h_rsc_0_15_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_15_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_15_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_15_AWID),
      .AWADDR(twiddle_h_rsc_0_15_AWADDR),
      .AWLEN(twiddle_h_rsc_0_15_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_15_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_15_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_15_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_15_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_15_AWPROT),
      .AWQOS(twiddle_h_rsc_0_15_AWQOS),
      .AWREGION(twiddle_h_rsc_0_15_AWREGION),
      .AWUSER(twiddle_h_rsc_0_15_AWUSER),
      .AWVALID(twiddle_h_rsc_0_15_AWVALID),
      .AWREADY(twiddle_h_rsc_0_15_AWREADY),
      .WDATA(twiddle_h_rsc_0_15_WDATA),
      .WSTRB(twiddle_h_rsc_0_15_WSTRB),
      .WLAST(twiddle_h_rsc_0_15_WLAST),
      .WUSER(twiddle_h_rsc_0_15_WUSER),
      .WVALID(twiddle_h_rsc_0_15_WVALID),
      .WREADY(twiddle_h_rsc_0_15_WREADY),
      .BID(twiddle_h_rsc_0_15_BID),
      .BRESP(twiddle_h_rsc_0_15_BRESP),
      .BUSER(twiddle_h_rsc_0_15_BUSER),
      .BVALID(twiddle_h_rsc_0_15_BVALID),
      .BREADY(twiddle_h_rsc_0_15_BREADY),
      .ARID(twiddle_h_rsc_0_15_ARID),
      .ARADDR(twiddle_h_rsc_0_15_ARADDR),
      .ARLEN(twiddle_h_rsc_0_15_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_15_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_15_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_15_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_15_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_15_ARPROT),
      .ARQOS(twiddle_h_rsc_0_15_ARQOS),
      .ARREGION(twiddle_h_rsc_0_15_ARREGION),
      .ARUSER(twiddle_h_rsc_0_15_ARUSER),
      .ARVALID(twiddle_h_rsc_0_15_ARVALID),
      .ARREADY(twiddle_h_rsc_0_15_ARREADY),
      .RID(twiddle_h_rsc_0_15_RID),
      .RDATA(twiddle_h_rsc_0_15_RDATA),
      .RRESP(twiddle_h_rsc_0_15_RRESP),
      .RLAST(twiddle_h_rsc_0_15_RLAST),
      .RUSER(twiddle_h_rsc_0_15_RUSER),
      .RVALID(twiddle_h_rsc_0_15_RVALID),
      .RREADY(twiddle_h_rsc_0_15_RREADY),
      .s_re(twiddle_h_rsc_0_15_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_15_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_15_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_15_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_15_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_15_is_idle),
      .tr_write_done(twiddle_h_rsc_0_15_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_15_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_15_i_oswt(twiddle_h_rsc_0_15_i_oswt),
      .twiddle_h_rsc_0_15_i_biwt(twiddle_h_rsc_0_15_i_biwt),
      .twiddle_h_rsc_0_15_i_bdwt(twiddle_h_rsc_0_15_i_bdwt),
      .twiddle_h_rsc_0_15_i_bcwt(twiddle_h_rsc_0_15_i_bcwt),
      .twiddle_h_rsc_0_15_i_s_re_core_sct(twiddle_h_rsc_0_15_i_s_re_core_sct),
      .twiddle_h_rsc_0_15_i_s_rrdy(twiddle_h_rsc_0_15_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_15_i_oswt(twiddle_h_rsc_0_15_i_oswt),
      .twiddle_h_rsc_0_15_i_wen_comp(twiddle_h_rsc_0_15_i_wen_comp),
      .twiddle_h_rsc_0_15_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_15_i_twiddle_h_rsc_0_15_wait_dp_inst_twiddle_h_rsc_0_15_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_15_i_s_din_mxwt(twiddle_h_rsc_0_15_i_s_din_mxwt),
      .twiddle_h_rsc_0_15_i_biwt(twiddle_h_rsc_0_15_i_biwt),
      .twiddle_h_rsc_0_15_i_bdwt(twiddle_h_rsc_0_15_i_bdwt),
      .twiddle_h_rsc_0_15_i_bcwt(twiddle_h_rsc_0_15_i_bcwt),
      .twiddle_h_rsc_0_15_i_s_raddr(twiddle_h_rsc_0_15_i_s_raddr),
      .twiddle_h_rsc_0_15_i_s_raddr_core_sct(twiddle_h_rsc_0_15_i_s_re_core_sct),
      .twiddle_h_rsc_0_15_i_s_din(twiddle_h_rsc_0_15_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_14_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_14_i (
  clk, rst, twiddle_h_rsc_0_14_s_tdone, twiddle_h_rsc_0_14_tr_write_done, twiddle_h_rsc_0_14_RREADY,
      twiddle_h_rsc_0_14_RVALID, twiddle_h_rsc_0_14_RUSER, twiddle_h_rsc_0_14_RLAST,
      twiddle_h_rsc_0_14_RRESP, twiddle_h_rsc_0_14_RDATA, twiddle_h_rsc_0_14_RID,
      twiddle_h_rsc_0_14_ARREADY, twiddle_h_rsc_0_14_ARVALID, twiddle_h_rsc_0_14_ARUSER,
      twiddle_h_rsc_0_14_ARREGION, twiddle_h_rsc_0_14_ARQOS, twiddle_h_rsc_0_14_ARPROT,
      twiddle_h_rsc_0_14_ARCACHE, twiddle_h_rsc_0_14_ARLOCK, twiddle_h_rsc_0_14_ARBURST,
      twiddle_h_rsc_0_14_ARSIZE, twiddle_h_rsc_0_14_ARLEN, twiddle_h_rsc_0_14_ARADDR,
      twiddle_h_rsc_0_14_ARID, twiddle_h_rsc_0_14_BREADY, twiddle_h_rsc_0_14_BVALID,
      twiddle_h_rsc_0_14_BUSER, twiddle_h_rsc_0_14_BRESP, twiddle_h_rsc_0_14_BID,
      twiddle_h_rsc_0_14_WREADY, twiddle_h_rsc_0_14_WVALID, twiddle_h_rsc_0_14_WUSER,
      twiddle_h_rsc_0_14_WLAST, twiddle_h_rsc_0_14_WSTRB, twiddle_h_rsc_0_14_WDATA,
      twiddle_h_rsc_0_14_AWREADY, twiddle_h_rsc_0_14_AWVALID, twiddle_h_rsc_0_14_AWUSER,
      twiddle_h_rsc_0_14_AWREGION, twiddle_h_rsc_0_14_AWQOS, twiddle_h_rsc_0_14_AWPROT,
      twiddle_h_rsc_0_14_AWCACHE, twiddle_h_rsc_0_14_AWLOCK, twiddle_h_rsc_0_14_AWBURST,
      twiddle_h_rsc_0_14_AWSIZE, twiddle_h_rsc_0_14_AWLEN, twiddle_h_rsc_0_14_AWADDR,
      twiddle_h_rsc_0_14_AWID, core_wen, twiddle_h_rsc_0_14_i_oswt, twiddle_h_rsc_0_14_i_wen_comp,
      twiddle_h_rsc_0_14_i_s_raddr_core, twiddle_h_rsc_0_14_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_14_s_tdone;
  input twiddle_h_rsc_0_14_tr_write_done;
  input twiddle_h_rsc_0_14_RREADY;
  output twiddle_h_rsc_0_14_RVALID;
  output twiddle_h_rsc_0_14_RUSER;
  output twiddle_h_rsc_0_14_RLAST;
  output [1:0] twiddle_h_rsc_0_14_RRESP;
  output [31:0] twiddle_h_rsc_0_14_RDATA;
  output twiddle_h_rsc_0_14_RID;
  output twiddle_h_rsc_0_14_ARREADY;
  input twiddle_h_rsc_0_14_ARVALID;
  input twiddle_h_rsc_0_14_ARUSER;
  input [3:0] twiddle_h_rsc_0_14_ARREGION;
  input [3:0] twiddle_h_rsc_0_14_ARQOS;
  input [2:0] twiddle_h_rsc_0_14_ARPROT;
  input [3:0] twiddle_h_rsc_0_14_ARCACHE;
  input twiddle_h_rsc_0_14_ARLOCK;
  input [1:0] twiddle_h_rsc_0_14_ARBURST;
  input [2:0] twiddle_h_rsc_0_14_ARSIZE;
  input [7:0] twiddle_h_rsc_0_14_ARLEN;
  input [11:0] twiddle_h_rsc_0_14_ARADDR;
  input twiddle_h_rsc_0_14_ARID;
  input twiddle_h_rsc_0_14_BREADY;
  output twiddle_h_rsc_0_14_BVALID;
  output twiddle_h_rsc_0_14_BUSER;
  output [1:0] twiddle_h_rsc_0_14_BRESP;
  output twiddle_h_rsc_0_14_BID;
  output twiddle_h_rsc_0_14_WREADY;
  input twiddle_h_rsc_0_14_WVALID;
  input twiddle_h_rsc_0_14_WUSER;
  input twiddle_h_rsc_0_14_WLAST;
  input [3:0] twiddle_h_rsc_0_14_WSTRB;
  input [31:0] twiddle_h_rsc_0_14_WDATA;
  output twiddle_h_rsc_0_14_AWREADY;
  input twiddle_h_rsc_0_14_AWVALID;
  input twiddle_h_rsc_0_14_AWUSER;
  input [3:0] twiddle_h_rsc_0_14_AWREGION;
  input [3:0] twiddle_h_rsc_0_14_AWQOS;
  input [2:0] twiddle_h_rsc_0_14_AWPROT;
  input [3:0] twiddle_h_rsc_0_14_AWCACHE;
  input twiddle_h_rsc_0_14_AWLOCK;
  input [1:0] twiddle_h_rsc_0_14_AWBURST;
  input [2:0] twiddle_h_rsc_0_14_AWSIZE;
  input [7:0] twiddle_h_rsc_0_14_AWLEN;
  input [11:0] twiddle_h_rsc_0_14_AWADDR;
  input twiddle_h_rsc_0_14_AWID;
  input core_wen;
  input twiddle_h_rsc_0_14_i_oswt;
  output twiddle_h_rsc_0_14_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_14_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_14_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_14_i_biwt;
  wire twiddle_h_rsc_0_14_i_bdwt;
  wire twiddle_h_rsc_0_14_i_bcwt;
  wire twiddle_h_rsc_0_14_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_14_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_14_i_s_din;
  wire twiddle_h_rsc_0_14_i_s_rrdy;
  wire twiddle_h_rsc_0_14_i_s_wrdy;
  wire twiddle_h_rsc_0_14_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp_inst_twiddle_h_rsc_0_14_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp_inst_twiddle_h_rsc_0_14_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_14_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_14_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_14_AWID),
      .AWADDR(twiddle_h_rsc_0_14_AWADDR),
      .AWLEN(twiddle_h_rsc_0_14_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_14_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_14_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_14_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_14_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_14_AWPROT),
      .AWQOS(twiddle_h_rsc_0_14_AWQOS),
      .AWREGION(twiddle_h_rsc_0_14_AWREGION),
      .AWUSER(twiddle_h_rsc_0_14_AWUSER),
      .AWVALID(twiddle_h_rsc_0_14_AWVALID),
      .AWREADY(twiddle_h_rsc_0_14_AWREADY),
      .WDATA(twiddle_h_rsc_0_14_WDATA),
      .WSTRB(twiddle_h_rsc_0_14_WSTRB),
      .WLAST(twiddle_h_rsc_0_14_WLAST),
      .WUSER(twiddle_h_rsc_0_14_WUSER),
      .WVALID(twiddle_h_rsc_0_14_WVALID),
      .WREADY(twiddle_h_rsc_0_14_WREADY),
      .BID(twiddle_h_rsc_0_14_BID),
      .BRESP(twiddle_h_rsc_0_14_BRESP),
      .BUSER(twiddle_h_rsc_0_14_BUSER),
      .BVALID(twiddle_h_rsc_0_14_BVALID),
      .BREADY(twiddle_h_rsc_0_14_BREADY),
      .ARID(twiddle_h_rsc_0_14_ARID),
      .ARADDR(twiddle_h_rsc_0_14_ARADDR),
      .ARLEN(twiddle_h_rsc_0_14_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_14_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_14_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_14_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_14_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_14_ARPROT),
      .ARQOS(twiddle_h_rsc_0_14_ARQOS),
      .ARREGION(twiddle_h_rsc_0_14_ARREGION),
      .ARUSER(twiddle_h_rsc_0_14_ARUSER),
      .ARVALID(twiddle_h_rsc_0_14_ARVALID),
      .ARREADY(twiddle_h_rsc_0_14_ARREADY),
      .RID(twiddle_h_rsc_0_14_RID),
      .RDATA(twiddle_h_rsc_0_14_RDATA),
      .RRESP(twiddle_h_rsc_0_14_RRESP),
      .RLAST(twiddle_h_rsc_0_14_RLAST),
      .RUSER(twiddle_h_rsc_0_14_RUSER),
      .RVALID(twiddle_h_rsc_0_14_RVALID),
      .RREADY(twiddle_h_rsc_0_14_RREADY),
      .s_re(twiddle_h_rsc_0_14_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_14_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_14_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_14_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_14_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_14_is_idle),
      .tr_write_done(twiddle_h_rsc_0_14_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_14_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_14_i_oswt(twiddle_h_rsc_0_14_i_oswt),
      .twiddle_h_rsc_0_14_i_biwt(twiddle_h_rsc_0_14_i_biwt),
      .twiddle_h_rsc_0_14_i_bdwt(twiddle_h_rsc_0_14_i_bdwt),
      .twiddle_h_rsc_0_14_i_bcwt(twiddle_h_rsc_0_14_i_bcwt),
      .twiddle_h_rsc_0_14_i_s_re_core_sct(twiddle_h_rsc_0_14_i_s_re_core_sct),
      .twiddle_h_rsc_0_14_i_s_rrdy(twiddle_h_rsc_0_14_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_14_i_oswt(twiddle_h_rsc_0_14_i_oswt),
      .twiddle_h_rsc_0_14_i_wen_comp(twiddle_h_rsc_0_14_i_wen_comp),
      .twiddle_h_rsc_0_14_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_14_i_twiddle_h_rsc_0_14_wait_dp_inst_twiddle_h_rsc_0_14_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_14_i_s_din_mxwt(twiddle_h_rsc_0_14_i_s_din_mxwt),
      .twiddle_h_rsc_0_14_i_biwt(twiddle_h_rsc_0_14_i_biwt),
      .twiddle_h_rsc_0_14_i_bdwt(twiddle_h_rsc_0_14_i_bdwt),
      .twiddle_h_rsc_0_14_i_bcwt(twiddle_h_rsc_0_14_i_bcwt),
      .twiddle_h_rsc_0_14_i_s_raddr(twiddle_h_rsc_0_14_i_s_raddr),
      .twiddle_h_rsc_0_14_i_s_raddr_core_sct(twiddle_h_rsc_0_14_i_s_re_core_sct),
      .twiddle_h_rsc_0_14_i_s_din(twiddle_h_rsc_0_14_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_13_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_13_i (
  clk, rst, twiddle_h_rsc_0_13_s_tdone, twiddle_h_rsc_0_13_tr_write_done, twiddle_h_rsc_0_13_RREADY,
      twiddle_h_rsc_0_13_RVALID, twiddle_h_rsc_0_13_RUSER, twiddle_h_rsc_0_13_RLAST,
      twiddle_h_rsc_0_13_RRESP, twiddle_h_rsc_0_13_RDATA, twiddle_h_rsc_0_13_RID,
      twiddle_h_rsc_0_13_ARREADY, twiddle_h_rsc_0_13_ARVALID, twiddle_h_rsc_0_13_ARUSER,
      twiddle_h_rsc_0_13_ARREGION, twiddle_h_rsc_0_13_ARQOS, twiddle_h_rsc_0_13_ARPROT,
      twiddle_h_rsc_0_13_ARCACHE, twiddle_h_rsc_0_13_ARLOCK, twiddle_h_rsc_0_13_ARBURST,
      twiddle_h_rsc_0_13_ARSIZE, twiddle_h_rsc_0_13_ARLEN, twiddle_h_rsc_0_13_ARADDR,
      twiddle_h_rsc_0_13_ARID, twiddle_h_rsc_0_13_BREADY, twiddle_h_rsc_0_13_BVALID,
      twiddle_h_rsc_0_13_BUSER, twiddle_h_rsc_0_13_BRESP, twiddle_h_rsc_0_13_BID,
      twiddle_h_rsc_0_13_WREADY, twiddle_h_rsc_0_13_WVALID, twiddle_h_rsc_0_13_WUSER,
      twiddle_h_rsc_0_13_WLAST, twiddle_h_rsc_0_13_WSTRB, twiddle_h_rsc_0_13_WDATA,
      twiddle_h_rsc_0_13_AWREADY, twiddle_h_rsc_0_13_AWVALID, twiddle_h_rsc_0_13_AWUSER,
      twiddle_h_rsc_0_13_AWREGION, twiddle_h_rsc_0_13_AWQOS, twiddle_h_rsc_0_13_AWPROT,
      twiddle_h_rsc_0_13_AWCACHE, twiddle_h_rsc_0_13_AWLOCK, twiddle_h_rsc_0_13_AWBURST,
      twiddle_h_rsc_0_13_AWSIZE, twiddle_h_rsc_0_13_AWLEN, twiddle_h_rsc_0_13_AWADDR,
      twiddle_h_rsc_0_13_AWID, core_wen, twiddle_h_rsc_0_13_i_oswt, twiddle_h_rsc_0_13_i_wen_comp,
      twiddle_h_rsc_0_13_i_s_raddr_core, twiddle_h_rsc_0_13_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_13_s_tdone;
  input twiddle_h_rsc_0_13_tr_write_done;
  input twiddle_h_rsc_0_13_RREADY;
  output twiddle_h_rsc_0_13_RVALID;
  output twiddle_h_rsc_0_13_RUSER;
  output twiddle_h_rsc_0_13_RLAST;
  output [1:0] twiddle_h_rsc_0_13_RRESP;
  output [31:0] twiddle_h_rsc_0_13_RDATA;
  output twiddle_h_rsc_0_13_RID;
  output twiddle_h_rsc_0_13_ARREADY;
  input twiddle_h_rsc_0_13_ARVALID;
  input twiddle_h_rsc_0_13_ARUSER;
  input [3:0] twiddle_h_rsc_0_13_ARREGION;
  input [3:0] twiddle_h_rsc_0_13_ARQOS;
  input [2:0] twiddle_h_rsc_0_13_ARPROT;
  input [3:0] twiddle_h_rsc_0_13_ARCACHE;
  input twiddle_h_rsc_0_13_ARLOCK;
  input [1:0] twiddle_h_rsc_0_13_ARBURST;
  input [2:0] twiddle_h_rsc_0_13_ARSIZE;
  input [7:0] twiddle_h_rsc_0_13_ARLEN;
  input [11:0] twiddle_h_rsc_0_13_ARADDR;
  input twiddle_h_rsc_0_13_ARID;
  input twiddle_h_rsc_0_13_BREADY;
  output twiddle_h_rsc_0_13_BVALID;
  output twiddle_h_rsc_0_13_BUSER;
  output [1:0] twiddle_h_rsc_0_13_BRESP;
  output twiddle_h_rsc_0_13_BID;
  output twiddle_h_rsc_0_13_WREADY;
  input twiddle_h_rsc_0_13_WVALID;
  input twiddle_h_rsc_0_13_WUSER;
  input twiddle_h_rsc_0_13_WLAST;
  input [3:0] twiddle_h_rsc_0_13_WSTRB;
  input [31:0] twiddle_h_rsc_0_13_WDATA;
  output twiddle_h_rsc_0_13_AWREADY;
  input twiddle_h_rsc_0_13_AWVALID;
  input twiddle_h_rsc_0_13_AWUSER;
  input [3:0] twiddle_h_rsc_0_13_AWREGION;
  input [3:0] twiddle_h_rsc_0_13_AWQOS;
  input [2:0] twiddle_h_rsc_0_13_AWPROT;
  input [3:0] twiddle_h_rsc_0_13_AWCACHE;
  input twiddle_h_rsc_0_13_AWLOCK;
  input [1:0] twiddle_h_rsc_0_13_AWBURST;
  input [2:0] twiddle_h_rsc_0_13_AWSIZE;
  input [7:0] twiddle_h_rsc_0_13_AWLEN;
  input [11:0] twiddle_h_rsc_0_13_AWADDR;
  input twiddle_h_rsc_0_13_AWID;
  input core_wen;
  input twiddle_h_rsc_0_13_i_oswt;
  output twiddle_h_rsc_0_13_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_13_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_13_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_13_i_biwt;
  wire twiddle_h_rsc_0_13_i_bdwt;
  wire twiddle_h_rsc_0_13_i_bcwt;
  wire twiddle_h_rsc_0_13_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_13_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_13_i_s_din;
  wire twiddle_h_rsc_0_13_i_s_rrdy;
  wire twiddle_h_rsc_0_13_i_s_wrdy;
  wire twiddle_h_rsc_0_13_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp_inst_twiddle_h_rsc_0_13_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp_inst_twiddle_h_rsc_0_13_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_13_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_13_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_13_AWID),
      .AWADDR(twiddle_h_rsc_0_13_AWADDR),
      .AWLEN(twiddle_h_rsc_0_13_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_13_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_13_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_13_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_13_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_13_AWPROT),
      .AWQOS(twiddle_h_rsc_0_13_AWQOS),
      .AWREGION(twiddle_h_rsc_0_13_AWREGION),
      .AWUSER(twiddle_h_rsc_0_13_AWUSER),
      .AWVALID(twiddle_h_rsc_0_13_AWVALID),
      .AWREADY(twiddle_h_rsc_0_13_AWREADY),
      .WDATA(twiddle_h_rsc_0_13_WDATA),
      .WSTRB(twiddle_h_rsc_0_13_WSTRB),
      .WLAST(twiddle_h_rsc_0_13_WLAST),
      .WUSER(twiddle_h_rsc_0_13_WUSER),
      .WVALID(twiddle_h_rsc_0_13_WVALID),
      .WREADY(twiddle_h_rsc_0_13_WREADY),
      .BID(twiddle_h_rsc_0_13_BID),
      .BRESP(twiddle_h_rsc_0_13_BRESP),
      .BUSER(twiddle_h_rsc_0_13_BUSER),
      .BVALID(twiddle_h_rsc_0_13_BVALID),
      .BREADY(twiddle_h_rsc_0_13_BREADY),
      .ARID(twiddle_h_rsc_0_13_ARID),
      .ARADDR(twiddle_h_rsc_0_13_ARADDR),
      .ARLEN(twiddle_h_rsc_0_13_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_13_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_13_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_13_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_13_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_13_ARPROT),
      .ARQOS(twiddle_h_rsc_0_13_ARQOS),
      .ARREGION(twiddle_h_rsc_0_13_ARREGION),
      .ARUSER(twiddle_h_rsc_0_13_ARUSER),
      .ARVALID(twiddle_h_rsc_0_13_ARVALID),
      .ARREADY(twiddle_h_rsc_0_13_ARREADY),
      .RID(twiddle_h_rsc_0_13_RID),
      .RDATA(twiddle_h_rsc_0_13_RDATA),
      .RRESP(twiddle_h_rsc_0_13_RRESP),
      .RLAST(twiddle_h_rsc_0_13_RLAST),
      .RUSER(twiddle_h_rsc_0_13_RUSER),
      .RVALID(twiddle_h_rsc_0_13_RVALID),
      .RREADY(twiddle_h_rsc_0_13_RREADY),
      .s_re(twiddle_h_rsc_0_13_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_13_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_13_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_13_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_13_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_13_is_idle),
      .tr_write_done(twiddle_h_rsc_0_13_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_13_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_13_i_oswt(twiddle_h_rsc_0_13_i_oswt),
      .twiddle_h_rsc_0_13_i_biwt(twiddle_h_rsc_0_13_i_biwt),
      .twiddle_h_rsc_0_13_i_bdwt(twiddle_h_rsc_0_13_i_bdwt),
      .twiddle_h_rsc_0_13_i_bcwt(twiddle_h_rsc_0_13_i_bcwt),
      .twiddle_h_rsc_0_13_i_s_re_core_sct(twiddle_h_rsc_0_13_i_s_re_core_sct),
      .twiddle_h_rsc_0_13_i_s_rrdy(twiddle_h_rsc_0_13_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_13_i_oswt(twiddle_h_rsc_0_13_i_oswt),
      .twiddle_h_rsc_0_13_i_wen_comp(twiddle_h_rsc_0_13_i_wen_comp),
      .twiddle_h_rsc_0_13_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_13_i_twiddle_h_rsc_0_13_wait_dp_inst_twiddle_h_rsc_0_13_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_13_i_s_din_mxwt(twiddle_h_rsc_0_13_i_s_din_mxwt),
      .twiddle_h_rsc_0_13_i_biwt(twiddle_h_rsc_0_13_i_biwt),
      .twiddle_h_rsc_0_13_i_bdwt(twiddle_h_rsc_0_13_i_bdwt),
      .twiddle_h_rsc_0_13_i_bcwt(twiddle_h_rsc_0_13_i_bcwt),
      .twiddle_h_rsc_0_13_i_s_raddr(twiddle_h_rsc_0_13_i_s_raddr),
      .twiddle_h_rsc_0_13_i_s_raddr_core_sct(twiddle_h_rsc_0_13_i_s_re_core_sct),
      .twiddle_h_rsc_0_13_i_s_din(twiddle_h_rsc_0_13_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_12_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_12_i (
  clk, rst, twiddle_h_rsc_0_12_s_tdone, twiddle_h_rsc_0_12_tr_write_done, twiddle_h_rsc_0_12_RREADY,
      twiddle_h_rsc_0_12_RVALID, twiddle_h_rsc_0_12_RUSER, twiddle_h_rsc_0_12_RLAST,
      twiddle_h_rsc_0_12_RRESP, twiddle_h_rsc_0_12_RDATA, twiddle_h_rsc_0_12_RID,
      twiddle_h_rsc_0_12_ARREADY, twiddle_h_rsc_0_12_ARVALID, twiddle_h_rsc_0_12_ARUSER,
      twiddle_h_rsc_0_12_ARREGION, twiddle_h_rsc_0_12_ARQOS, twiddle_h_rsc_0_12_ARPROT,
      twiddle_h_rsc_0_12_ARCACHE, twiddle_h_rsc_0_12_ARLOCK, twiddle_h_rsc_0_12_ARBURST,
      twiddle_h_rsc_0_12_ARSIZE, twiddle_h_rsc_0_12_ARLEN, twiddle_h_rsc_0_12_ARADDR,
      twiddle_h_rsc_0_12_ARID, twiddle_h_rsc_0_12_BREADY, twiddle_h_rsc_0_12_BVALID,
      twiddle_h_rsc_0_12_BUSER, twiddle_h_rsc_0_12_BRESP, twiddle_h_rsc_0_12_BID,
      twiddle_h_rsc_0_12_WREADY, twiddle_h_rsc_0_12_WVALID, twiddle_h_rsc_0_12_WUSER,
      twiddle_h_rsc_0_12_WLAST, twiddle_h_rsc_0_12_WSTRB, twiddle_h_rsc_0_12_WDATA,
      twiddle_h_rsc_0_12_AWREADY, twiddle_h_rsc_0_12_AWVALID, twiddle_h_rsc_0_12_AWUSER,
      twiddle_h_rsc_0_12_AWREGION, twiddle_h_rsc_0_12_AWQOS, twiddle_h_rsc_0_12_AWPROT,
      twiddle_h_rsc_0_12_AWCACHE, twiddle_h_rsc_0_12_AWLOCK, twiddle_h_rsc_0_12_AWBURST,
      twiddle_h_rsc_0_12_AWSIZE, twiddle_h_rsc_0_12_AWLEN, twiddle_h_rsc_0_12_AWADDR,
      twiddle_h_rsc_0_12_AWID, core_wen, twiddle_h_rsc_0_12_i_oswt, twiddle_h_rsc_0_12_i_wen_comp,
      twiddle_h_rsc_0_12_i_s_raddr_core, twiddle_h_rsc_0_12_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_12_s_tdone;
  input twiddle_h_rsc_0_12_tr_write_done;
  input twiddle_h_rsc_0_12_RREADY;
  output twiddle_h_rsc_0_12_RVALID;
  output twiddle_h_rsc_0_12_RUSER;
  output twiddle_h_rsc_0_12_RLAST;
  output [1:0] twiddle_h_rsc_0_12_RRESP;
  output [31:0] twiddle_h_rsc_0_12_RDATA;
  output twiddle_h_rsc_0_12_RID;
  output twiddle_h_rsc_0_12_ARREADY;
  input twiddle_h_rsc_0_12_ARVALID;
  input twiddle_h_rsc_0_12_ARUSER;
  input [3:0] twiddle_h_rsc_0_12_ARREGION;
  input [3:0] twiddle_h_rsc_0_12_ARQOS;
  input [2:0] twiddle_h_rsc_0_12_ARPROT;
  input [3:0] twiddle_h_rsc_0_12_ARCACHE;
  input twiddle_h_rsc_0_12_ARLOCK;
  input [1:0] twiddle_h_rsc_0_12_ARBURST;
  input [2:0] twiddle_h_rsc_0_12_ARSIZE;
  input [7:0] twiddle_h_rsc_0_12_ARLEN;
  input [11:0] twiddle_h_rsc_0_12_ARADDR;
  input twiddle_h_rsc_0_12_ARID;
  input twiddle_h_rsc_0_12_BREADY;
  output twiddle_h_rsc_0_12_BVALID;
  output twiddle_h_rsc_0_12_BUSER;
  output [1:0] twiddle_h_rsc_0_12_BRESP;
  output twiddle_h_rsc_0_12_BID;
  output twiddle_h_rsc_0_12_WREADY;
  input twiddle_h_rsc_0_12_WVALID;
  input twiddle_h_rsc_0_12_WUSER;
  input twiddle_h_rsc_0_12_WLAST;
  input [3:0] twiddle_h_rsc_0_12_WSTRB;
  input [31:0] twiddle_h_rsc_0_12_WDATA;
  output twiddle_h_rsc_0_12_AWREADY;
  input twiddle_h_rsc_0_12_AWVALID;
  input twiddle_h_rsc_0_12_AWUSER;
  input [3:0] twiddle_h_rsc_0_12_AWREGION;
  input [3:0] twiddle_h_rsc_0_12_AWQOS;
  input [2:0] twiddle_h_rsc_0_12_AWPROT;
  input [3:0] twiddle_h_rsc_0_12_AWCACHE;
  input twiddle_h_rsc_0_12_AWLOCK;
  input [1:0] twiddle_h_rsc_0_12_AWBURST;
  input [2:0] twiddle_h_rsc_0_12_AWSIZE;
  input [7:0] twiddle_h_rsc_0_12_AWLEN;
  input [11:0] twiddle_h_rsc_0_12_AWADDR;
  input twiddle_h_rsc_0_12_AWID;
  input core_wen;
  input twiddle_h_rsc_0_12_i_oswt;
  output twiddle_h_rsc_0_12_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_12_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_12_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_12_i_biwt;
  wire twiddle_h_rsc_0_12_i_bdwt;
  wire twiddle_h_rsc_0_12_i_bcwt;
  wire twiddle_h_rsc_0_12_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_12_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_12_i_s_din;
  wire twiddle_h_rsc_0_12_i_s_rrdy;
  wire twiddle_h_rsc_0_12_i_s_wrdy;
  wire twiddle_h_rsc_0_12_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp_inst_twiddle_h_rsc_0_12_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp_inst_twiddle_h_rsc_0_12_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_12_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_12_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_12_AWID),
      .AWADDR(twiddle_h_rsc_0_12_AWADDR),
      .AWLEN(twiddle_h_rsc_0_12_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_12_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_12_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_12_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_12_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_12_AWPROT),
      .AWQOS(twiddle_h_rsc_0_12_AWQOS),
      .AWREGION(twiddle_h_rsc_0_12_AWREGION),
      .AWUSER(twiddle_h_rsc_0_12_AWUSER),
      .AWVALID(twiddle_h_rsc_0_12_AWVALID),
      .AWREADY(twiddle_h_rsc_0_12_AWREADY),
      .WDATA(twiddle_h_rsc_0_12_WDATA),
      .WSTRB(twiddle_h_rsc_0_12_WSTRB),
      .WLAST(twiddle_h_rsc_0_12_WLAST),
      .WUSER(twiddle_h_rsc_0_12_WUSER),
      .WVALID(twiddle_h_rsc_0_12_WVALID),
      .WREADY(twiddle_h_rsc_0_12_WREADY),
      .BID(twiddle_h_rsc_0_12_BID),
      .BRESP(twiddle_h_rsc_0_12_BRESP),
      .BUSER(twiddle_h_rsc_0_12_BUSER),
      .BVALID(twiddle_h_rsc_0_12_BVALID),
      .BREADY(twiddle_h_rsc_0_12_BREADY),
      .ARID(twiddle_h_rsc_0_12_ARID),
      .ARADDR(twiddle_h_rsc_0_12_ARADDR),
      .ARLEN(twiddle_h_rsc_0_12_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_12_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_12_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_12_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_12_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_12_ARPROT),
      .ARQOS(twiddle_h_rsc_0_12_ARQOS),
      .ARREGION(twiddle_h_rsc_0_12_ARREGION),
      .ARUSER(twiddle_h_rsc_0_12_ARUSER),
      .ARVALID(twiddle_h_rsc_0_12_ARVALID),
      .ARREADY(twiddle_h_rsc_0_12_ARREADY),
      .RID(twiddle_h_rsc_0_12_RID),
      .RDATA(twiddle_h_rsc_0_12_RDATA),
      .RRESP(twiddle_h_rsc_0_12_RRESP),
      .RLAST(twiddle_h_rsc_0_12_RLAST),
      .RUSER(twiddle_h_rsc_0_12_RUSER),
      .RVALID(twiddle_h_rsc_0_12_RVALID),
      .RREADY(twiddle_h_rsc_0_12_RREADY),
      .s_re(twiddle_h_rsc_0_12_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_12_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_12_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_12_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_12_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_12_is_idle),
      .tr_write_done(twiddle_h_rsc_0_12_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_12_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_12_i_oswt(twiddle_h_rsc_0_12_i_oswt),
      .twiddle_h_rsc_0_12_i_biwt(twiddle_h_rsc_0_12_i_biwt),
      .twiddle_h_rsc_0_12_i_bdwt(twiddle_h_rsc_0_12_i_bdwt),
      .twiddle_h_rsc_0_12_i_bcwt(twiddle_h_rsc_0_12_i_bcwt),
      .twiddle_h_rsc_0_12_i_s_re_core_sct(twiddle_h_rsc_0_12_i_s_re_core_sct),
      .twiddle_h_rsc_0_12_i_s_rrdy(twiddle_h_rsc_0_12_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_12_i_oswt(twiddle_h_rsc_0_12_i_oswt),
      .twiddle_h_rsc_0_12_i_wen_comp(twiddle_h_rsc_0_12_i_wen_comp),
      .twiddle_h_rsc_0_12_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_12_i_twiddle_h_rsc_0_12_wait_dp_inst_twiddle_h_rsc_0_12_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_12_i_s_din_mxwt(twiddle_h_rsc_0_12_i_s_din_mxwt),
      .twiddle_h_rsc_0_12_i_biwt(twiddle_h_rsc_0_12_i_biwt),
      .twiddle_h_rsc_0_12_i_bdwt(twiddle_h_rsc_0_12_i_bdwt),
      .twiddle_h_rsc_0_12_i_bcwt(twiddle_h_rsc_0_12_i_bcwt),
      .twiddle_h_rsc_0_12_i_s_raddr(twiddle_h_rsc_0_12_i_s_raddr),
      .twiddle_h_rsc_0_12_i_s_raddr_core_sct(twiddle_h_rsc_0_12_i_s_re_core_sct),
      .twiddle_h_rsc_0_12_i_s_din(twiddle_h_rsc_0_12_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_11_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_11_i (
  clk, rst, twiddle_h_rsc_0_11_s_tdone, twiddle_h_rsc_0_11_tr_write_done, twiddle_h_rsc_0_11_RREADY,
      twiddle_h_rsc_0_11_RVALID, twiddle_h_rsc_0_11_RUSER, twiddle_h_rsc_0_11_RLAST,
      twiddle_h_rsc_0_11_RRESP, twiddle_h_rsc_0_11_RDATA, twiddle_h_rsc_0_11_RID,
      twiddle_h_rsc_0_11_ARREADY, twiddle_h_rsc_0_11_ARVALID, twiddle_h_rsc_0_11_ARUSER,
      twiddle_h_rsc_0_11_ARREGION, twiddle_h_rsc_0_11_ARQOS, twiddle_h_rsc_0_11_ARPROT,
      twiddle_h_rsc_0_11_ARCACHE, twiddle_h_rsc_0_11_ARLOCK, twiddle_h_rsc_0_11_ARBURST,
      twiddle_h_rsc_0_11_ARSIZE, twiddle_h_rsc_0_11_ARLEN, twiddle_h_rsc_0_11_ARADDR,
      twiddle_h_rsc_0_11_ARID, twiddle_h_rsc_0_11_BREADY, twiddle_h_rsc_0_11_BVALID,
      twiddle_h_rsc_0_11_BUSER, twiddle_h_rsc_0_11_BRESP, twiddle_h_rsc_0_11_BID,
      twiddle_h_rsc_0_11_WREADY, twiddle_h_rsc_0_11_WVALID, twiddle_h_rsc_0_11_WUSER,
      twiddle_h_rsc_0_11_WLAST, twiddle_h_rsc_0_11_WSTRB, twiddle_h_rsc_0_11_WDATA,
      twiddle_h_rsc_0_11_AWREADY, twiddle_h_rsc_0_11_AWVALID, twiddle_h_rsc_0_11_AWUSER,
      twiddle_h_rsc_0_11_AWREGION, twiddle_h_rsc_0_11_AWQOS, twiddle_h_rsc_0_11_AWPROT,
      twiddle_h_rsc_0_11_AWCACHE, twiddle_h_rsc_0_11_AWLOCK, twiddle_h_rsc_0_11_AWBURST,
      twiddle_h_rsc_0_11_AWSIZE, twiddle_h_rsc_0_11_AWLEN, twiddle_h_rsc_0_11_AWADDR,
      twiddle_h_rsc_0_11_AWID, core_wen, twiddle_h_rsc_0_11_i_oswt, twiddle_h_rsc_0_11_i_wen_comp,
      twiddle_h_rsc_0_11_i_s_raddr_core, twiddle_h_rsc_0_11_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_11_s_tdone;
  input twiddle_h_rsc_0_11_tr_write_done;
  input twiddle_h_rsc_0_11_RREADY;
  output twiddle_h_rsc_0_11_RVALID;
  output twiddle_h_rsc_0_11_RUSER;
  output twiddle_h_rsc_0_11_RLAST;
  output [1:0] twiddle_h_rsc_0_11_RRESP;
  output [31:0] twiddle_h_rsc_0_11_RDATA;
  output twiddle_h_rsc_0_11_RID;
  output twiddle_h_rsc_0_11_ARREADY;
  input twiddle_h_rsc_0_11_ARVALID;
  input twiddle_h_rsc_0_11_ARUSER;
  input [3:0] twiddle_h_rsc_0_11_ARREGION;
  input [3:0] twiddle_h_rsc_0_11_ARQOS;
  input [2:0] twiddle_h_rsc_0_11_ARPROT;
  input [3:0] twiddle_h_rsc_0_11_ARCACHE;
  input twiddle_h_rsc_0_11_ARLOCK;
  input [1:0] twiddle_h_rsc_0_11_ARBURST;
  input [2:0] twiddle_h_rsc_0_11_ARSIZE;
  input [7:0] twiddle_h_rsc_0_11_ARLEN;
  input [11:0] twiddle_h_rsc_0_11_ARADDR;
  input twiddle_h_rsc_0_11_ARID;
  input twiddle_h_rsc_0_11_BREADY;
  output twiddle_h_rsc_0_11_BVALID;
  output twiddle_h_rsc_0_11_BUSER;
  output [1:0] twiddle_h_rsc_0_11_BRESP;
  output twiddle_h_rsc_0_11_BID;
  output twiddle_h_rsc_0_11_WREADY;
  input twiddle_h_rsc_0_11_WVALID;
  input twiddle_h_rsc_0_11_WUSER;
  input twiddle_h_rsc_0_11_WLAST;
  input [3:0] twiddle_h_rsc_0_11_WSTRB;
  input [31:0] twiddle_h_rsc_0_11_WDATA;
  output twiddle_h_rsc_0_11_AWREADY;
  input twiddle_h_rsc_0_11_AWVALID;
  input twiddle_h_rsc_0_11_AWUSER;
  input [3:0] twiddle_h_rsc_0_11_AWREGION;
  input [3:0] twiddle_h_rsc_0_11_AWQOS;
  input [2:0] twiddle_h_rsc_0_11_AWPROT;
  input [3:0] twiddle_h_rsc_0_11_AWCACHE;
  input twiddle_h_rsc_0_11_AWLOCK;
  input [1:0] twiddle_h_rsc_0_11_AWBURST;
  input [2:0] twiddle_h_rsc_0_11_AWSIZE;
  input [7:0] twiddle_h_rsc_0_11_AWLEN;
  input [11:0] twiddle_h_rsc_0_11_AWADDR;
  input twiddle_h_rsc_0_11_AWID;
  input core_wen;
  input twiddle_h_rsc_0_11_i_oswt;
  output twiddle_h_rsc_0_11_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_11_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_11_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_11_i_biwt;
  wire twiddle_h_rsc_0_11_i_bdwt;
  wire twiddle_h_rsc_0_11_i_bcwt;
  wire twiddle_h_rsc_0_11_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_11_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_11_i_s_din;
  wire twiddle_h_rsc_0_11_i_s_rrdy;
  wire twiddle_h_rsc_0_11_i_s_wrdy;
  wire twiddle_h_rsc_0_11_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp_inst_twiddle_h_rsc_0_11_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp_inst_twiddle_h_rsc_0_11_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_11_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_11_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_11_AWID),
      .AWADDR(twiddle_h_rsc_0_11_AWADDR),
      .AWLEN(twiddle_h_rsc_0_11_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_11_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_11_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_11_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_11_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_11_AWPROT),
      .AWQOS(twiddle_h_rsc_0_11_AWQOS),
      .AWREGION(twiddle_h_rsc_0_11_AWREGION),
      .AWUSER(twiddle_h_rsc_0_11_AWUSER),
      .AWVALID(twiddle_h_rsc_0_11_AWVALID),
      .AWREADY(twiddle_h_rsc_0_11_AWREADY),
      .WDATA(twiddle_h_rsc_0_11_WDATA),
      .WSTRB(twiddle_h_rsc_0_11_WSTRB),
      .WLAST(twiddle_h_rsc_0_11_WLAST),
      .WUSER(twiddle_h_rsc_0_11_WUSER),
      .WVALID(twiddle_h_rsc_0_11_WVALID),
      .WREADY(twiddle_h_rsc_0_11_WREADY),
      .BID(twiddle_h_rsc_0_11_BID),
      .BRESP(twiddle_h_rsc_0_11_BRESP),
      .BUSER(twiddle_h_rsc_0_11_BUSER),
      .BVALID(twiddle_h_rsc_0_11_BVALID),
      .BREADY(twiddle_h_rsc_0_11_BREADY),
      .ARID(twiddle_h_rsc_0_11_ARID),
      .ARADDR(twiddle_h_rsc_0_11_ARADDR),
      .ARLEN(twiddle_h_rsc_0_11_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_11_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_11_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_11_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_11_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_11_ARPROT),
      .ARQOS(twiddle_h_rsc_0_11_ARQOS),
      .ARREGION(twiddle_h_rsc_0_11_ARREGION),
      .ARUSER(twiddle_h_rsc_0_11_ARUSER),
      .ARVALID(twiddle_h_rsc_0_11_ARVALID),
      .ARREADY(twiddle_h_rsc_0_11_ARREADY),
      .RID(twiddle_h_rsc_0_11_RID),
      .RDATA(twiddle_h_rsc_0_11_RDATA),
      .RRESP(twiddle_h_rsc_0_11_RRESP),
      .RLAST(twiddle_h_rsc_0_11_RLAST),
      .RUSER(twiddle_h_rsc_0_11_RUSER),
      .RVALID(twiddle_h_rsc_0_11_RVALID),
      .RREADY(twiddle_h_rsc_0_11_RREADY),
      .s_re(twiddle_h_rsc_0_11_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_11_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_11_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_11_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_11_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_11_is_idle),
      .tr_write_done(twiddle_h_rsc_0_11_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_11_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_11_i_oswt(twiddle_h_rsc_0_11_i_oswt),
      .twiddle_h_rsc_0_11_i_biwt(twiddle_h_rsc_0_11_i_biwt),
      .twiddle_h_rsc_0_11_i_bdwt(twiddle_h_rsc_0_11_i_bdwt),
      .twiddle_h_rsc_0_11_i_bcwt(twiddle_h_rsc_0_11_i_bcwt),
      .twiddle_h_rsc_0_11_i_s_re_core_sct(twiddle_h_rsc_0_11_i_s_re_core_sct),
      .twiddle_h_rsc_0_11_i_s_rrdy(twiddle_h_rsc_0_11_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_11_i_oswt(twiddle_h_rsc_0_11_i_oswt),
      .twiddle_h_rsc_0_11_i_wen_comp(twiddle_h_rsc_0_11_i_wen_comp),
      .twiddle_h_rsc_0_11_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_11_i_twiddle_h_rsc_0_11_wait_dp_inst_twiddle_h_rsc_0_11_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_11_i_s_din_mxwt(twiddle_h_rsc_0_11_i_s_din_mxwt),
      .twiddle_h_rsc_0_11_i_biwt(twiddle_h_rsc_0_11_i_biwt),
      .twiddle_h_rsc_0_11_i_bdwt(twiddle_h_rsc_0_11_i_bdwt),
      .twiddle_h_rsc_0_11_i_bcwt(twiddle_h_rsc_0_11_i_bcwt),
      .twiddle_h_rsc_0_11_i_s_raddr(twiddle_h_rsc_0_11_i_s_raddr),
      .twiddle_h_rsc_0_11_i_s_raddr_core_sct(twiddle_h_rsc_0_11_i_s_re_core_sct),
      .twiddle_h_rsc_0_11_i_s_din(twiddle_h_rsc_0_11_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_10_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_10_i (
  clk, rst, twiddle_h_rsc_0_10_s_tdone, twiddle_h_rsc_0_10_tr_write_done, twiddle_h_rsc_0_10_RREADY,
      twiddle_h_rsc_0_10_RVALID, twiddle_h_rsc_0_10_RUSER, twiddle_h_rsc_0_10_RLAST,
      twiddle_h_rsc_0_10_RRESP, twiddle_h_rsc_0_10_RDATA, twiddle_h_rsc_0_10_RID,
      twiddle_h_rsc_0_10_ARREADY, twiddle_h_rsc_0_10_ARVALID, twiddle_h_rsc_0_10_ARUSER,
      twiddle_h_rsc_0_10_ARREGION, twiddle_h_rsc_0_10_ARQOS, twiddle_h_rsc_0_10_ARPROT,
      twiddle_h_rsc_0_10_ARCACHE, twiddle_h_rsc_0_10_ARLOCK, twiddle_h_rsc_0_10_ARBURST,
      twiddle_h_rsc_0_10_ARSIZE, twiddle_h_rsc_0_10_ARLEN, twiddle_h_rsc_0_10_ARADDR,
      twiddle_h_rsc_0_10_ARID, twiddle_h_rsc_0_10_BREADY, twiddle_h_rsc_0_10_BVALID,
      twiddle_h_rsc_0_10_BUSER, twiddle_h_rsc_0_10_BRESP, twiddle_h_rsc_0_10_BID,
      twiddle_h_rsc_0_10_WREADY, twiddle_h_rsc_0_10_WVALID, twiddle_h_rsc_0_10_WUSER,
      twiddle_h_rsc_0_10_WLAST, twiddle_h_rsc_0_10_WSTRB, twiddle_h_rsc_0_10_WDATA,
      twiddle_h_rsc_0_10_AWREADY, twiddle_h_rsc_0_10_AWVALID, twiddle_h_rsc_0_10_AWUSER,
      twiddle_h_rsc_0_10_AWREGION, twiddle_h_rsc_0_10_AWQOS, twiddle_h_rsc_0_10_AWPROT,
      twiddle_h_rsc_0_10_AWCACHE, twiddle_h_rsc_0_10_AWLOCK, twiddle_h_rsc_0_10_AWBURST,
      twiddle_h_rsc_0_10_AWSIZE, twiddle_h_rsc_0_10_AWLEN, twiddle_h_rsc_0_10_AWADDR,
      twiddle_h_rsc_0_10_AWID, core_wen, twiddle_h_rsc_0_10_i_oswt, twiddle_h_rsc_0_10_i_wen_comp,
      twiddle_h_rsc_0_10_i_s_raddr_core, twiddle_h_rsc_0_10_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_10_s_tdone;
  input twiddle_h_rsc_0_10_tr_write_done;
  input twiddle_h_rsc_0_10_RREADY;
  output twiddle_h_rsc_0_10_RVALID;
  output twiddle_h_rsc_0_10_RUSER;
  output twiddle_h_rsc_0_10_RLAST;
  output [1:0] twiddle_h_rsc_0_10_RRESP;
  output [31:0] twiddle_h_rsc_0_10_RDATA;
  output twiddle_h_rsc_0_10_RID;
  output twiddle_h_rsc_0_10_ARREADY;
  input twiddle_h_rsc_0_10_ARVALID;
  input twiddle_h_rsc_0_10_ARUSER;
  input [3:0] twiddle_h_rsc_0_10_ARREGION;
  input [3:0] twiddle_h_rsc_0_10_ARQOS;
  input [2:0] twiddle_h_rsc_0_10_ARPROT;
  input [3:0] twiddle_h_rsc_0_10_ARCACHE;
  input twiddle_h_rsc_0_10_ARLOCK;
  input [1:0] twiddle_h_rsc_0_10_ARBURST;
  input [2:0] twiddle_h_rsc_0_10_ARSIZE;
  input [7:0] twiddle_h_rsc_0_10_ARLEN;
  input [11:0] twiddle_h_rsc_0_10_ARADDR;
  input twiddle_h_rsc_0_10_ARID;
  input twiddle_h_rsc_0_10_BREADY;
  output twiddle_h_rsc_0_10_BVALID;
  output twiddle_h_rsc_0_10_BUSER;
  output [1:0] twiddle_h_rsc_0_10_BRESP;
  output twiddle_h_rsc_0_10_BID;
  output twiddle_h_rsc_0_10_WREADY;
  input twiddle_h_rsc_0_10_WVALID;
  input twiddle_h_rsc_0_10_WUSER;
  input twiddle_h_rsc_0_10_WLAST;
  input [3:0] twiddle_h_rsc_0_10_WSTRB;
  input [31:0] twiddle_h_rsc_0_10_WDATA;
  output twiddle_h_rsc_0_10_AWREADY;
  input twiddle_h_rsc_0_10_AWVALID;
  input twiddle_h_rsc_0_10_AWUSER;
  input [3:0] twiddle_h_rsc_0_10_AWREGION;
  input [3:0] twiddle_h_rsc_0_10_AWQOS;
  input [2:0] twiddle_h_rsc_0_10_AWPROT;
  input [3:0] twiddle_h_rsc_0_10_AWCACHE;
  input twiddle_h_rsc_0_10_AWLOCK;
  input [1:0] twiddle_h_rsc_0_10_AWBURST;
  input [2:0] twiddle_h_rsc_0_10_AWSIZE;
  input [7:0] twiddle_h_rsc_0_10_AWLEN;
  input [11:0] twiddle_h_rsc_0_10_AWADDR;
  input twiddle_h_rsc_0_10_AWID;
  input core_wen;
  input twiddle_h_rsc_0_10_i_oswt;
  output twiddle_h_rsc_0_10_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_10_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_10_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_10_i_biwt;
  wire twiddle_h_rsc_0_10_i_bdwt;
  wire twiddle_h_rsc_0_10_i_bcwt;
  wire twiddle_h_rsc_0_10_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_10_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_10_i_s_din;
  wire twiddle_h_rsc_0_10_i_s_rrdy;
  wire twiddle_h_rsc_0_10_i_s_wrdy;
  wire twiddle_h_rsc_0_10_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp_inst_twiddle_h_rsc_0_10_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp_inst_twiddle_h_rsc_0_10_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_10_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_10_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_10_AWID),
      .AWADDR(twiddle_h_rsc_0_10_AWADDR),
      .AWLEN(twiddle_h_rsc_0_10_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_10_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_10_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_10_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_10_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_10_AWPROT),
      .AWQOS(twiddle_h_rsc_0_10_AWQOS),
      .AWREGION(twiddle_h_rsc_0_10_AWREGION),
      .AWUSER(twiddle_h_rsc_0_10_AWUSER),
      .AWVALID(twiddle_h_rsc_0_10_AWVALID),
      .AWREADY(twiddle_h_rsc_0_10_AWREADY),
      .WDATA(twiddle_h_rsc_0_10_WDATA),
      .WSTRB(twiddle_h_rsc_0_10_WSTRB),
      .WLAST(twiddle_h_rsc_0_10_WLAST),
      .WUSER(twiddle_h_rsc_0_10_WUSER),
      .WVALID(twiddle_h_rsc_0_10_WVALID),
      .WREADY(twiddle_h_rsc_0_10_WREADY),
      .BID(twiddle_h_rsc_0_10_BID),
      .BRESP(twiddle_h_rsc_0_10_BRESP),
      .BUSER(twiddle_h_rsc_0_10_BUSER),
      .BVALID(twiddle_h_rsc_0_10_BVALID),
      .BREADY(twiddle_h_rsc_0_10_BREADY),
      .ARID(twiddle_h_rsc_0_10_ARID),
      .ARADDR(twiddle_h_rsc_0_10_ARADDR),
      .ARLEN(twiddle_h_rsc_0_10_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_10_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_10_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_10_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_10_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_10_ARPROT),
      .ARQOS(twiddle_h_rsc_0_10_ARQOS),
      .ARREGION(twiddle_h_rsc_0_10_ARREGION),
      .ARUSER(twiddle_h_rsc_0_10_ARUSER),
      .ARVALID(twiddle_h_rsc_0_10_ARVALID),
      .ARREADY(twiddle_h_rsc_0_10_ARREADY),
      .RID(twiddle_h_rsc_0_10_RID),
      .RDATA(twiddle_h_rsc_0_10_RDATA),
      .RRESP(twiddle_h_rsc_0_10_RRESP),
      .RLAST(twiddle_h_rsc_0_10_RLAST),
      .RUSER(twiddle_h_rsc_0_10_RUSER),
      .RVALID(twiddle_h_rsc_0_10_RVALID),
      .RREADY(twiddle_h_rsc_0_10_RREADY),
      .s_re(twiddle_h_rsc_0_10_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_10_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_10_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_10_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_10_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_10_is_idle),
      .tr_write_done(twiddle_h_rsc_0_10_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_10_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_10_i_oswt(twiddle_h_rsc_0_10_i_oswt),
      .twiddle_h_rsc_0_10_i_biwt(twiddle_h_rsc_0_10_i_biwt),
      .twiddle_h_rsc_0_10_i_bdwt(twiddle_h_rsc_0_10_i_bdwt),
      .twiddle_h_rsc_0_10_i_bcwt(twiddle_h_rsc_0_10_i_bcwt),
      .twiddle_h_rsc_0_10_i_s_re_core_sct(twiddle_h_rsc_0_10_i_s_re_core_sct),
      .twiddle_h_rsc_0_10_i_s_rrdy(twiddle_h_rsc_0_10_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_10_i_oswt(twiddle_h_rsc_0_10_i_oswt),
      .twiddle_h_rsc_0_10_i_wen_comp(twiddle_h_rsc_0_10_i_wen_comp),
      .twiddle_h_rsc_0_10_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_10_i_twiddle_h_rsc_0_10_wait_dp_inst_twiddle_h_rsc_0_10_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_10_i_s_din_mxwt(twiddle_h_rsc_0_10_i_s_din_mxwt),
      .twiddle_h_rsc_0_10_i_biwt(twiddle_h_rsc_0_10_i_biwt),
      .twiddle_h_rsc_0_10_i_bdwt(twiddle_h_rsc_0_10_i_bdwt),
      .twiddle_h_rsc_0_10_i_bcwt(twiddle_h_rsc_0_10_i_bcwt),
      .twiddle_h_rsc_0_10_i_s_raddr(twiddle_h_rsc_0_10_i_s_raddr),
      .twiddle_h_rsc_0_10_i_s_raddr_core_sct(twiddle_h_rsc_0_10_i_s_re_core_sct),
      .twiddle_h_rsc_0_10_i_s_din(twiddle_h_rsc_0_10_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_9_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_9_i (
  clk, rst, twiddle_h_rsc_0_9_s_tdone, twiddle_h_rsc_0_9_tr_write_done, twiddle_h_rsc_0_9_RREADY,
      twiddle_h_rsc_0_9_RVALID, twiddle_h_rsc_0_9_RUSER, twiddle_h_rsc_0_9_RLAST,
      twiddle_h_rsc_0_9_RRESP, twiddle_h_rsc_0_9_RDATA, twiddle_h_rsc_0_9_RID, twiddle_h_rsc_0_9_ARREADY,
      twiddle_h_rsc_0_9_ARVALID, twiddle_h_rsc_0_9_ARUSER, twiddle_h_rsc_0_9_ARREGION,
      twiddle_h_rsc_0_9_ARQOS, twiddle_h_rsc_0_9_ARPROT, twiddle_h_rsc_0_9_ARCACHE,
      twiddle_h_rsc_0_9_ARLOCK, twiddle_h_rsc_0_9_ARBURST, twiddle_h_rsc_0_9_ARSIZE,
      twiddle_h_rsc_0_9_ARLEN, twiddle_h_rsc_0_9_ARADDR, twiddle_h_rsc_0_9_ARID,
      twiddle_h_rsc_0_9_BREADY, twiddle_h_rsc_0_9_BVALID, twiddle_h_rsc_0_9_BUSER,
      twiddle_h_rsc_0_9_BRESP, twiddle_h_rsc_0_9_BID, twiddle_h_rsc_0_9_WREADY, twiddle_h_rsc_0_9_WVALID,
      twiddle_h_rsc_0_9_WUSER, twiddle_h_rsc_0_9_WLAST, twiddle_h_rsc_0_9_WSTRB,
      twiddle_h_rsc_0_9_WDATA, twiddle_h_rsc_0_9_AWREADY, twiddle_h_rsc_0_9_AWVALID,
      twiddle_h_rsc_0_9_AWUSER, twiddle_h_rsc_0_9_AWREGION, twiddle_h_rsc_0_9_AWQOS,
      twiddle_h_rsc_0_9_AWPROT, twiddle_h_rsc_0_9_AWCACHE, twiddle_h_rsc_0_9_AWLOCK,
      twiddle_h_rsc_0_9_AWBURST, twiddle_h_rsc_0_9_AWSIZE, twiddle_h_rsc_0_9_AWLEN,
      twiddle_h_rsc_0_9_AWADDR, twiddle_h_rsc_0_9_AWID, core_wen, twiddle_h_rsc_0_9_i_oswt,
      twiddle_h_rsc_0_9_i_wen_comp, twiddle_h_rsc_0_9_i_s_raddr_core, twiddle_h_rsc_0_9_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_9_s_tdone;
  input twiddle_h_rsc_0_9_tr_write_done;
  input twiddle_h_rsc_0_9_RREADY;
  output twiddle_h_rsc_0_9_RVALID;
  output twiddle_h_rsc_0_9_RUSER;
  output twiddle_h_rsc_0_9_RLAST;
  output [1:0] twiddle_h_rsc_0_9_RRESP;
  output [31:0] twiddle_h_rsc_0_9_RDATA;
  output twiddle_h_rsc_0_9_RID;
  output twiddle_h_rsc_0_9_ARREADY;
  input twiddle_h_rsc_0_9_ARVALID;
  input twiddle_h_rsc_0_9_ARUSER;
  input [3:0] twiddle_h_rsc_0_9_ARREGION;
  input [3:0] twiddle_h_rsc_0_9_ARQOS;
  input [2:0] twiddle_h_rsc_0_9_ARPROT;
  input [3:0] twiddle_h_rsc_0_9_ARCACHE;
  input twiddle_h_rsc_0_9_ARLOCK;
  input [1:0] twiddle_h_rsc_0_9_ARBURST;
  input [2:0] twiddle_h_rsc_0_9_ARSIZE;
  input [7:0] twiddle_h_rsc_0_9_ARLEN;
  input [11:0] twiddle_h_rsc_0_9_ARADDR;
  input twiddle_h_rsc_0_9_ARID;
  input twiddle_h_rsc_0_9_BREADY;
  output twiddle_h_rsc_0_9_BVALID;
  output twiddle_h_rsc_0_9_BUSER;
  output [1:0] twiddle_h_rsc_0_9_BRESP;
  output twiddle_h_rsc_0_9_BID;
  output twiddle_h_rsc_0_9_WREADY;
  input twiddle_h_rsc_0_9_WVALID;
  input twiddle_h_rsc_0_9_WUSER;
  input twiddle_h_rsc_0_9_WLAST;
  input [3:0] twiddle_h_rsc_0_9_WSTRB;
  input [31:0] twiddle_h_rsc_0_9_WDATA;
  output twiddle_h_rsc_0_9_AWREADY;
  input twiddle_h_rsc_0_9_AWVALID;
  input twiddle_h_rsc_0_9_AWUSER;
  input [3:0] twiddle_h_rsc_0_9_AWREGION;
  input [3:0] twiddle_h_rsc_0_9_AWQOS;
  input [2:0] twiddle_h_rsc_0_9_AWPROT;
  input [3:0] twiddle_h_rsc_0_9_AWCACHE;
  input twiddle_h_rsc_0_9_AWLOCK;
  input [1:0] twiddle_h_rsc_0_9_AWBURST;
  input [2:0] twiddle_h_rsc_0_9_AWSIZE;
  input [7:0] twiddle_h_rsc_0_9_AWLEN;
  input [11:0] twiddle_h_rsc_0_9_AWADDR;
  input twiddle_h_rsc_0_9_AWID;
  input core_wen;
  input twiddle_h_rsc_0_9_i_oswt;
  output twiddle_h_rsc_0_9_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_9_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_9_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_9_i_biwt;
  wire twiddle_h_rsc_0_9_i_bdwt;
  wire twiddle_h_rsc_0_9_i_bcwt;
  wire twiddle_h_rsc_0_9_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_9_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_9_i_s_din;
  wire twiddle_h_rsc_0_9_i_s_rrdy;
  wire twiddle_h_rsc_0_9_i_s_wrdy;
  wire twiddle_h_rsc_0_9_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp_inst_twiddle_h_rsc_0_9_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp_inst_twiddle_h_rsc_0_9_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_9_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_9_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_9_AWID),
      .AWADDR(twiddle_h_rsc_0_9_AWADDR),
      .AWLEN(twiddle_h_rsc_0_9_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_9_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_9_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_9_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_9_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_9_AWPROT),
      .AWQOS(twiddle_h_rsc_0_9_AWQOS),
      .AWREGION(twiddle_h_rsc_0_9_AWREGION),
      .AWUSER(twiddle_h_rsc_0_9_AWUSER),
      .AWVALID(twiddle_h_rsc_0_9_AWVALID),
      .AWREADY(twiddle_h_rsc_0_9_AWREADY),
      .WDATA(twiddle_h_rsc_0_9_WDATA),
      .WSTRB(twiddle_h_rsc_0_9_WSTRB),
      .WLAST(twiddle_h_rsc_0_9_WLAST),
      .WUSER(twiddle_h_rsc_0_9_WUSER),
      .WVALID(twiddle_h_rsc_0_9_WVALID),
      .WREADY(twiddle_h_rsc_0_9_WREADY),
      .BID(twiddle_h_rsc_0_9_BID),
      .BRESP(twiddle_h_rsc_0_9_BRESP),
      .BUSER(twiddle_h_rsc_0_9_BUSER),
      .BVALID(twiddle_h_rsc_0_9_BVALID),
      .BREADY(twiddle_h_rsc_0_9_BREADY),
      .ARID(twiddle_h_rsc_0_9_ARID),
      .ARADDR(twiddle_h_rsc_0_9_ARADDR),
      .ARLEN(twiddle_h_rsc_0_9_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_9_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_9_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_9_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_9_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_9_ARPROT),
      .ARQOS(twiddle_h_rsc_0_9_ARQOS),
      .ARREGION(twiddle_h_rsc_0_9_ARREGION),
      .ARUSER(twiddle_h_rsc_0_9_ARUSER),
      .ARVALID(twiddle_h_rsc_0_9_ARVALID),
      .ARREADY(twiddle_h_rsc_0_9_ARREADY),
      .RID(twiddle_h_rsc_0_9_RID),
      .RDATA(twiddle_h_rsc_0_9_RDATA),
      .RRESP(twiddle_h_rsc_0_9_RRESP),
      .RLAST(twiddle_h_rsc_0_9_RLAST),
      .RUSER(twiddle_h_rsc_0_9_RUSER),
      .RVALID(twiddle_h_rsc_0_9_RVALID),
      .RREADY(twiddle_h_rsc_0_9_RREADY),
      .s_re(twiddle_h_rsc_0_9_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_9_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_9_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_9_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_9_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_9_is_idle),
      .tr_write_done(twiddle_h_rsc_0_9_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_9_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_9_i_oswt(twiddle_h_rsc_0_9_i_oswt),
      .twiddle_h_rsc_0_9_i_biwt(twiddle_h_rsc_0_9_i_biwt),
      .twiddle_h_rsc_0_9_i_bdwt(twiddle_h_rsc_0_9_i_bdwt),
      .twiddle_h_rsc_0_9_i_bcwt(twiddle_h_rsc_0_9_i_bcwt),
      .twiddle_h_rsc_0_9_i_s_re_core_sct(twiddle_h_rsc_0_9_i_s_re_core_sct),
      .twiddle_h_rsc_0_9_i_s_rrdy(twiddle_h_rsc_0_9_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_9_i_oswt(twiddle_h_rsc_0_9_i_oswt),
      .twiddle_h_rsc_0_9_i_wen_comp(twiddle_h_rsc_0_9_i_wen_comp),
      .twiddle_h_rsc_0_9_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_9_i_twiddle_h_rsc_0_9_wait_dp_inst_twiddle_h_rsc_0_9_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_9_i_s_din_mxwt(twiddle_h_rsc_0_9_i_s_din_mxwt),
      .twiddle_h_rsc_0_9_i_biwt(twiddle_h_rsc_0_9_i_biwt),
      .twiddle_h_rsc_0_9_i_bdwt(twiddle_h_rsc_0_9_i_bdwt),
      .twiddle_h_rsc_0_9_i_bcwt(twiddle_h_rsc_0_9_i_bcwt),
      .twiddle_h_rsc_0_9_i_s_raddr(twiddle_h_rsc_0_9_i_s_raddr),
      .twiddle_h_rsc_0_9_i_s_raddr_core_sct(twiddle_h_rsc_0_9_i_s_re_core_sct),
      .twiddle_h_rsc_0_9_i_s_din(twiddle_h_rsc_0_9_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_8_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_8_i (
  clk, rst, twiddle_h_rsc_0_8_s_tdone, twiddle_h_rsc_0_8_tr_write_done, twiddle_h_rsc_0_8_RREADY,
      twiddle_h_rsc_0_8_RVALID, twiddle_h_rsc_0_8_RUSER, twiddle_h_rsc_0_8_RLAST,
      twiddle_h_rsc_0_8_RRESP, twiddle_h_rsc_0_8_RDATA, twiddle_h_rsc_0_8_RID, twiddle_h_rsc_0_8_ARREADY,
      twiddle_h_rsc_0_8_ARVALID, twiddle_h_rsc_0_8_ARUSER, twiddle_h_rsc_0_8_ARREGION,
      twiddle_h_rsc_0_8_ARQOS, twiddle_h_rsc_0_8_ARPROT, twiddle_h_rsc_0_8_ARCACHE,
      twiddle_h_rsc_0_8_ARLOCK, twiddle_h_rsc_0_8_ARBURST, twiddle_h_rsc_0_8_ARSIZE,
      twiddle_h_rsc_0_8_ARLEN, twiddle_h_rsc_0_8_ARADDR, twiddle_h_rsc_0_8_ARID,
      twiddle_h_rsc_0_8_BREADY, twiddle_h_rsc_0_8_BVALID, twiddle_h_rsc_0_8_BUSER,
      twiddle_h_rsc_0_8_BRESP, twiddle_h_rsc_0_8_BID, twiddle_h_rsc_0_8_WREADY, twiddle_h_rsc_0_8_WVALID,
      twiddle_h_rsc_0_8_WUSER, twiddle_h_rsc_0_8_WLAST, twiddle_h_rsc_0_8_WSTRB,
      twiddle_h_rsc_0_8_WDATA, twiddle_h_rsc_0_8_AWREADY, twiddle_h_rsc_0_8_AWVALID,
      twiddle_h_rsc_0_8_AWUSER, twiddle_h_rsc_0_8_AWREGION, twiddle_h_rsc_0_8_AWQOS,
      twiddle_h_rsc_0_8_AWPROT, twiddle_h_rsc_0_8_AWCACHE, twiddle_h_rsc_0_8_AWLOCK,
      twiddle_h_rsc_0_8_AWBURST, twiddle_h_rsc_0_8_AWSIZE, twiddle_h_rsc_0_8_AWLEN,
      twiddle_h_rsc_0_8_AWADDR, twiddle_h_rsc_0_8_AWID, core_wen, twiddle_h_rsc_0_8_i_oswt,
      twiddle_h_rsc_0_8_i_wen_comp, twiddle_h_rsc_0_8_i_s_raddr_core, twiddle_h_rsc_0_8_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_8_s_tdone;
  input twiddle_h_rsc_0_8_tr_write_done;
  input twiddle_h_rsc_0_8_RREADY;
  output twiddle_h_rsc_0_8_RVALID;
  output twiddle_h_rsc_0_8_RUSER;
  output twiddle_h_rsc_0_8_RLAST;
  output [1:0] twiddle_h_rsc_0_8_RRESP;
  output [31:0] twiddle_h_rsc_0_8_RDATA;
  output twiddle_h_rsc_0_8_RID;
  output twiddle_h_rsc_0_8_ARREADY;
  input twiddle_h_rsc_0_8_ARVALID;
  input twiddle_h_rsc_0_8_ARUSER;
  input [3:0] twiddle_h_rsc_0_8_ARREGION;
  input [3:0] twiddle_h_rsc_0_8_ARQOS;
  input [2:0] twiddle_h_rsc_0_8_ARPROT;
  input [3:0] twiddle_h_rsc_0_8_ARCACHE;
  input twiddle_h_rsc_0_8_ARLOCK;
  input [1:0] twiddle_h_rsc_0_8_ARBURST;
  input [2:0] twiddle_h_rsc_0_8_ARSIZE;
  input [7:0] twiddle_h_rsc_0_8_ARLEN;
  input [11:0] twiddle_h_rsc_0_8_ARADDR;
  input twiddle_h_rsc_0_8_ARID;
  input twiddle_h_rsc_0_8_BREADY;
  output twiddle_h_rsc_0_8_BVALID;
  output twiddle_h_rsc_0_8_BUSER;
  output [1:0] twiddle_h_rsc_0_8_BRESP;
  output twiddle_h_rsc_0_8_BID;
  output twiddle_h_rsc_0_8_WREADY;
  input twiddle_h_rsc_0_8_WVALID;
  input twiddle_h_rsc_0_8_WUSER;
  input twiddle_h_rsc_0_8_WLAST;
  input [3:0] twiddle_h_rsc_0_8_WSTRB;
  input [31:0] twiddle_h_rsc_0_8_WDATA;
  output twiddle_h_rsc_0_8_AWREADY;
  input twiddle_h_rsc_0_8_AWVALID;
  input twiddle_h_rsc_0_8_AWUSER;
  input [3:0] twiddle_h_rsc_0_8_AWREGION;
  input [3:0] twiddle_h_rsc_0_8_AWQOS;
  input [2:0] twiddle_h_rsc_0_8_AWPROT;
  input [3:0] twiddle_h_rsc_0_8_AWCACHE;
  input twiddle_h_rsc_0_8_AWLOCK;
  input [1:0] twiddle_h_rsc_0_8_AWBURST;
  input [2:0] twiddle_h_rsc_0_8_AWSIZE;
  input [7:0] twiddle_h_rsc_0_8_AWLEN;
  input [11:0] twiddle_h_rsc_0_8_AWADDR;
  input twiddle_h_rsc_0_8_AWID;
  input core_wen;
  input twiddle_h_rsc_0_8_i_oswt;
  output twiddle_h_rsc_0_8_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_8_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_8_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_8_i_biwt;
  wire twiddle_h_rsc_0_8_i_bdwt;
  wire twiddle_h_rsc_0_8_i_bcwt;
  wire twiddle_h_rsc_0_8_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_8_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_8_i_s_din;
  wire twiddle_h_rsc_0_8_i_s_rrdy;
  wire twiddle_h_rsc_0_8_i_s_wrdy;
  wire twiddle_h_rsc_0_8_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp_inst_twiddle_h_rsc_0_8_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp_inst_twiddle_h_rsc_0_8_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_8_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_8_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_8_AWID),
      .AWADDR(twiddle_h_rsc_0_8_AWADDR),
      .AWLEN(twiddle_h_rsc_0_8_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_8_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_8_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_8_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_8_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_8_AWPROT),
      .AWQOS(twiddle_h_rsc_0_8_AWQOS),
      .AWREGION(twiddle_h_rsc_0_8_AWREGION),
      .AWUSER(twiddle_h_rsc_0_8_AWUSER),
      .AWVALID(twiddle_h_rsc_0_8_AWVALID),
      .AWREADY(twiddle_h_rsc_0_8_AWREADY),
      .WDATA(twiddle_h_rsc_0_8_WDATA),
      .WSTRB(twiddle_h_rsc_0_8_WSTRB),
      .WLAST(twiddle_h_rsc_0_8_WLAST),
      .WUSER(twiddle_h_rsc_0_8_WUSER),
      .WVALID(twiddle_h_rsc_0_8_WVALID),
      .WREADY(twiddle_h_rsc_0_8_WREADY),
      .BID(twiddle_h_rsc_0_8_BID),
      .BRESP(twiddle_h_rsc_0_8_BRESP),
      .BUSER(twiddle_h_rsc_0_8_BUSER),
      .BVALID(twiddle_h_rsc_0_8_BVALID),
      .BREADY(twiddle_h_rsc_0_8_BREADY),
      .ARID(twiddle_h_rsc_0_8_ARID),
      .ARADDR(twiddle_h_rsc_0_8_ARADDR),
      .ARLEN(twiddle_h_rsc_0_8_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_8_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_8_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_8_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_8_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_8_ARPROT),
      .ARQOS(twiddle_h_rsc_0_8_ARQOS),
      .ARREGION(twiddle_h_rsc_0_8_ARREGION),
      .ARUSER(twiddle_h_rsc_0_8_ARUSER),
      .ARVALID(twiddle_h_rsc_0_8_ARVALID),
      .ARREADY(twiddle_h_rsc_0_8_ARREADY),
      .RID(twiddle_h_rsc_0_8_RID),
      .RDATA(twiddle_h_rsc_0_8_RDATA),
      .RRESP(twiddle_h_rsc_0_8_RRESP),
      .RLAST(twiddle_h_rsc_0_8_RLAST),
      .RUSER(twiddle_h_rsc_0_8_RUSER),
      .RVALID(twiddle_h_rsc_0_8_RVALID),
      .RREADY(twiddle_h_rsc_0_8_RREADY),
      .s_re(twiddle_h_rsc_0_8_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_8_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_8_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_8_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_8_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_8_is_idle),
      .tr_write_done(twiddle_h_rsc_0_8_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_8_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_8_i_oswt(twiddle_h_rsc_0_8_i_oswt),
      .twiddle_h_rsc_0_8_i_biwt(twiddle_h_rsc_0_8_i_biwt),
      .twiddle_h_rsc_0_8_i_bdwt(twiddle_h_rsc_0_8_i_bdwt),
      .twiddle_h_rsc_0_8_i_bcwt(twiddle_h_rsc_0_8_i_bcwt),
      .twiddle_h_rsc_0_8_i_s_re_core_sct(twiddle_h_rsc_0_8_i_s_re_core_sct),
      .twiddle_h_rsc_0_8_i_s_rrdy(twiddle_h_rsc_0_8_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_8_i_oswt(twiddle_h_rsc_0_8_i_oswt),
      .twiddle_h_rsc_0_8_i_wen_comp(twiddle_h_rsc_0_8_i_wen_comp),
      .twiddle_h_rsc_0_8_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_8_i_twiddle_h_rsc_0_8_wait_dp_inst_twiddle_h_rsc_0_8_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_8_i_s_din_mxwt(twiddle_h_rsc_0_8_i_s_din_mxwt),
      .twiddle_h_rsc_0_8_i_biwt(twiddle_h_rsc_0_8_i_biwt),
      .twiddle_h_rsc_0_8_i_bdwt(twiddle_h_rsc_0_8_i_bdwt),
      .twiddle_h_rsc_0_8_i_bcwt(twiddle_h_rsc_0_8_i_bcwt),
      .twiddle_h_rsc_0_8_i_s_raddr(twiddle_h_rsc_0_8_i_s_raddr),
      .twiddle_h_rsc_0_8_i_s_raddr_core_sct(twiddle_h_rsc_0_8_i_s_re_core_sct),
      .twiddle_h_rsc_0_8_i_s_din(twiddle_h_rsc_0_8_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_7_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_7_i (
  clk, rst, twiddle_h_rsc_0_7_s_tdone, twiddle_h_rsc_0_7_tr_write_done, twiddle_h_rsc_0_7_RREADY,
      twiddle_h_rsc_0_7_RVALID, twiddle_h_rsc_0_7_RUSER, twiddle_h_rsc_0_7_RLAST,
      twiddle_h_rsc_0_7_RRESP, twiddle_h_rsc_0_7_RDATA, twiddle_h_rsc_0_7_RID, twiddle_h_rsc_0_7_ARREADY,
      twiddle_h_rsc_0_7_ARVALID, twiddle_h_rsc_0_7_ARUSER, twiddle_h_rsc_0_7_ARREGION,
      twiddle_h_rsc_0_7_ARQOS, twiddle_h_rsc_0_7_ARPROT, twiddle_h_rsc_0_7_ARCACHE,
      twiddle_h_rsc_0_7_ARLOCK, twiddle_h_rsc_0_7_ARBURST, twiddle_h_rsc_0_7_ARSIZE,
      twiddle_h_rsc_0_7_ARLEN, twiddle_h_rsc_0_7_ARADDR, twiddle_h_rsc_0_7_ARID,
      twiddle_h_rsc_0_7_BREADY, twiddle_h_rsc_0_7_BVALID, twiddle_h_rsc_0_7_BUSER,
      twiddle_h_rsc_0_7_BRESP, twiddle_h_rsc_0_7_BID, twiddle_h_rsc_0_7_WREADY, twiddle_h_rsc_0_7_WVALID,
      twiddle_h_rsc_0_7_WUSER, twiddle_h_rsc_0_7_WLAST, twiddle_h_rsc_0_7_WSTRB,
      twiddle_h_rsc_0_7_WDATA, twiddle_h_rsc_0_7_AWREADY, twiddle_h_rsc_0_7_AWVALID,
      twiddle_h_rsc_0_7_AWUSER, twiddle_h_rsc_0_7_AWREGION, twiddle_h_rsc_0_7_AWQOS,
      twiddle_h_rsc_0_7_AWPROT, twiddle_h_rsc_0_7_AWCACHE, twiddle_h_rsc_0_7_AWLOCK,
      twiddle_h_rsc_0_7_AWBURST, twiddle_h_rsc_0_7_AWSIZE, twiddle_h_rsc_0_7_AWLEN,
      twiddle_h_rsc_0_7_AWADDR, twiddle_h_rsc_0_7_AWID, core_wen, twiddle_h_rsc_0_7_i_oswt,
      twiddle_h_rsc_0_7_i_wen_comp, twiddle_h_rsc_0_7_i_s_raddr_core, twiddle_h_rsc_0_7_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_7_s_tdone;
  input twiddle_h_rsc_0_7_tr_write_done;
  input twiddle_h_rsc_0_7_RREADY;
  output twiddle_h_rsc_0_7_RVALID;
  output twiddle_h_rsc_0_7_RUSER;
  output twiddle_h_rsc_0_7_RLAST;
  output [1:0] twiddle_h_rsc_0_7_RRESP;
  output [31:0] twiddle_h_rsc_0_7_RDATA;
  output twiddle_h_rsc_0_7_RID;
  output twiddle_h_rsc_0_7_ARREADY;
  input twiddle_h_rsc_0_7_ARVALID;
  input twiddle_h_rsc_0_7_ARUSER;
  input [3:0] twiddle_h_rsc_0_7_ARREGION;
  input [3:0] twiddle_h_rsc_0_7_ARQOS;
  input [2:0] twiddle_h_rsc_0_7_ARPROT;
  input [3:0] twiddle_h_rsc_0_7_ARCACHE;
  input twiddle_h_rsc_0_7_ARLOCK;
  input [1:0] twiddle_h_rsc_0_7_ARBURST;
  input [2:0] twiddle_h_rsc_0_7_ARSIZE;
  input [7:0] twiddle_h_rsc_0_7_ARLEN;
  input [11:0] twiddle_h_rsc_0_7_ARADDR;
  input twiddle_h_rsc_0_7_ARID;
  input twiddle_h_rsc_0_7_BREADY;
  output twiddle_h_rsc_0_7_BVALID;
  output twiddle_h_rsc_0_7_BUSER;
  output [1:0] twiddle_h_rsc_0_7_BRESP;
  output twiddle_h_rsc_0_7_BID;
  output twiddle_h_rsc_0_7_WREADY;
  input twiddle_h_rsc_0_7_WVALID;
  input twiddle_h_rsc_0_7_WUSER;
  input twiddle_h_rsc_0_7_WLAST;
  input [3:0] twiddle_h_rsc_0_7_WSTRB;
  input [31:0] twiddle_h_rsc_0_7_WDATA;
  output twiddle_h_rsc_0_7_AWREADY;
  input twiddle_h_rsc_0_7_AWVALID;
  input twiddle_h_rsc_0_7_AWUSER;
  input [3:0] twiddle_h_rsc_0_7_AWREGION;
  input [3:0] twiddle_h_rsc_0_7_AWQOS;
  input [2:0] twiddle_h_rsc_0_7_AWPROT;
  input [3:0] twiddle_h_rsc_0_7_AWCACHE;
  input twiddle_h_rsc_0_7_AWLOCK;
  input [1:0] twiddle_h_rsc_0_7_AWBURST;
  input [2:0] twiddle_h_rsc_0_7_AWSIZE;
  input [7:0] twiddle_h_rsc_0_7_AWLEN;
  input [11:0] twiddle_h_rsc_0_7_AWADDR;
  input twiddle_h_rsc_0_7_AWID;
  input core_wen;
  input twiddle_h_rsc_0_7_i_oswt;
  output twiddle_h_rsc_0_7_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_7_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_7_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_7_i_biwt;
  wire twiddle_h_rsc_0_7_i_bdwt;
  wire twiddle_h_rsc_0_7_i_bcwt;
  wire twiddle_h_rsc_0_7_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_7_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_7_i_s_din;
  wire twiddle_h_rsc_0_7_i_s_rrdy;
  wire twiddle_h_rsc_0_7_i_s_wrdy;
  wire twiddle_h_rsc_0_7_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp_inst_twiddle_h_rsc_0_7_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp_inst_twiddle_h_rsc_0_7_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_7_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_7_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_7_AWID),
      .AWADDR(twiddle_h_rsc_0_7_AWADDR),
      .AWLEN(twiddle_h_rsc_0_7_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_7_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_7_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_7_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_7_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_7_AWPROT),
      .AWQOS(twiddle_h_rsc_0_7_AWQOS),
      .AWREGION(twiddle_h_rsc_0_7_AWREGION),
      .AWUSER(twiddle_h_rsc_0_7_AWUSER),
      .AWVALID(twiddle_h_rsc_0_7_AWVALID),
      .AWREADY(twiddle_h_rsc_0_7_AWREADY),
      .WDATA(twiddle_h_rsc_0_7_WDATA),
      .WSTRB(twiddle_h_rsc_0_7_WSTRB),
      .WLAST(twiddle_h_rsc_0_7_WLAST),
      .WUSER(twiddle_h_rsc_0_7_WUSER),
      .WVALID(twiddle_h_rsc_0_7_WVALID),
      .WREADY(twiddle_h_rsc_0_7_WREADY),
      .BID(twiddle_h_rsc_0_7_BID),
      .BRESP(twiddle_h_rsc_0_7_BRESP),
      .BUSER(twiddle_h_rsc_0_7_BUSER),
      .BVALID(twiddle_h_rsc_0_7_BVALID),
      .BREADY(twiddle_h_rsc_0_7_BREADY),
      .ARID(twiddle_h_rsc_0_7_ARID),
      .ARADDR(twiddle_h_rsc_0_7_ARADDR),
      .ARLEN(twiddle_h_rsc_0_7_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_7_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_7_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_7_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_7_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_7_ARPROT),
      .ARQOS(twiddle_h_rsc_0_7_ARQOS),
      .ARREGION(twiddle_h_rsc_0_7_ARREGION),
      .ARUSER(twiddle_h_rsc_0_7_ARUSER),
      .ARVALID(twiddle_h_rsc_0_7_ARVALID),
      .ARREADY(twiddle_h_rsc_0_7_ARREADY),
      .RID(twiddle_h_rsc_0_7_RID),
      .RDATA(twiddle_h_rsc_0_7_RDATA),
      .RRESP(twiddle_h_rsc_0_7_RRESP),
      .RLAST(twiddle_h_rsc_0_7_RLAST),
      .RUSER(twiddle_h_rsc_0_7_RUSER),
      .RVALID(twiddle_h_rsc_0_7_RVALID),
      .RREADY(twiddle_h_rsc_0_7_RREADY),
      .s_re(twiddle_h_rsc_0_7_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_7_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_7_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_7_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_7_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_7_is_idle),
      .tr_write_done(twiddle_h_rsc_0_7_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_7_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_7_i_oswt(twiddle_h_rsc_0_7_i_oswt),
      .twiddle_h_rsc_0_7_i_biwt(twiddle_h_rsc_0_7_i_biwt),
      .twiddle_h_rsc_0_7_i_bdwt(twiddle_h_rsc_0_7_i_bdwt),
      .twiddle_h_rsc_0_7_i_bcwt(twiddle_h_rsc_0_7_i_bcwt),
      .twiddle_h_rsc_0_7_i_s_re_core_sct(twiddle_h_rsc_0_7_i_s_re_core_sct),
      .twiddle_h_rsc_0_7_i_s_rrdy(twiddle_h_rsc_0_7_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_7_i_oswt(twiddle_h_rsc_0_7_i_oswt),
      .twiddle_h_rsc_0_7_i_wen_comp(twiddle_h_rsc_0_7_i_wen_comp),
      .twiddle_h_rsc_0_7_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_7_i_twiddle_h_rsc_0_7_wait_dp_inst_twiddle_h_rsc_0_7_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_7_i_s_din_mxwt(twiddle_h_rsc_0_7_i_s_din_mxwt),
      .twiddle_h_rsc_0_7_i_biwt(twiddle_h_rsc_0_7_i_biwt),
      .twiddle_h_rsc_0_7_i_bdwt(twiddle_h_rsc_0_7_i_bdwt),
      .twiddle_h_rsc_0_7_i_bcwt(twiddle_h_rsc_0_7_i_bcwt),
      .twiddle_h_rsc_0_7_i_s_raddr(twiddle_h_rsc_0_7_i_s_raddr),
      .twiddle_h_rsc_0_7_i_s_raddr_core_sct(twiddle_h_rsc_0_7_i_s_re_core_sct),
      .twiddle_h_rsc_0_7_i_s_din(twiddle_h_rsc_0_7_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_6_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_6_i (
  clk, rst, twiddle_h_rsc_0_6_s_tdone, twiddle_h_rsc_0_6_tr_write_done, twiddle_h_rsc_0_6_RREADY,
      twiddle_h_rsc_0_6_RVALID, twiddle_h_rsc_0_6_RUSER, twiddle_h_rsc_0_6_RLAST,
      twiddle_h_rsc_0_6_RRESP, twiddle_h_rsc_0_6_RDATA, twiddle_h_rsc_0_6_RID, twiddle_h_rsc_0_6_ARREADY,
      twiddle_h_rsc_0_6_ARVALID, twiddle_h_rsc_0_6_ARUSER, twiddle_h_rsc_0_6_ARREGION,
      twiddle_h_rsc_0_6_ARQOS, twiddle_h_rsc_0_6_ARPROT, twiddle_h_rsc_0_6_ARCACHE,
      twiddle_h_rsc_0_6_ARLOCK, twiddle_h_rsc_0_6_ARBURST, twiddle_h_rsc_0_6_ARSIZE,
      twiddle_h_rsc_0_6_ARLEN, twiddle_h_rsc_0_6_ARADDR, twiddle_h_rsc_0_6_ARID,
      twiddle_h_rsc_0_6_BREADY, twiddle_h_rsc_0_6_BVALID, twiddle_h_rsc_0_6_BUSER,
      twiddle_h_rsc_0_6_BRESP, twiddle_h_rsc_0_6_BID, twiddle_h_rsc_0_6_WREADY, twiddle_h_rsc_0_6_WVALID,
      twiddle_h_rsc_0_6_WUSER, twiddle_h_rsc_0_6_WLAST, twiddle_h_rsc_0_6_WSTRB,
      twiddle_h_rsc_0_6_WDATA, twiddle_h_rsc_0_6_AWREADY, twiddle_h_rsc_0_6_AWVALID,
      twiddle_h_rsc_0_6_AWUSER, twiddle_h_rsc_0_6_AWREGION, twiddle_h_rsc_0_6_AWQOS,
      twiddle_h_rsc_0_6_AWPROT, twiddle_h_rsc_0_6_AWCACHE, twiddle_h_rsc_0_6_AWLOCK,
      twiddle_h_rsc_0_6_AWBURST, twiddle_h_rsc_0_6_AWSIZE, twiddle_h_rsc_0_6_AWLEN,
      twiddle_h_rsc_0_6_AWADDR, twiddle_h_rsc_0_6_AWID, core_wen, twiddle_h_rsc_0_6_i_oswt,
      twiddle_h_rsc_0_6_i_wen_comp, twiddle_h_rsc_0_6_i_s_raddr_core, twiddle_h_rsc_0_6_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_6_s_tdone;
  input twiddle_h_rsc_0_6_tr_write_done;
  input twiddle_h_rsc_0_6_RREADY;
  output twiddle_h_rsc_0_6_RVALID;
  output twiddle_h_rsc_0_6_RUSER;
  output twiddle_h_rsc_0_6_RLAST;
  output [1:0] twiddle_h_rsc_0_6_RRESP;
  output [31:0] twiddle_h_rsc_0_6_RDATA;
  output twiddle_h_rsc_0_6_RID;
  output twiddle_h_rsc_0_6_ARREADY;
  input twiddle_h_rsc_0_6_ARVALID;
  input twiddle_h_rsc_0_6_ARUSER;
  input [3:0] twiddle_h_rsc_0_6_ARREGION;
  input [3:0] twiddle_h_rsc_0_6_ARQOS;
  input [2:0] twiddle_h_rsc_0_6_ARPROT;
  input [3:0] twiddle_h_rsc_0_6_ARCACHE;
  input twiddle_h_rsc_0_6_ARLOCK;
  input [1:0] twiddle_h_rsc_0_6_ARBURST;
  input [2:0] twiddle_h_rsc_0_6_ARSIZE;
  input [7:0] twiddle_h_rsc_0_6_ARLEN;
  input [11:0] twiddle_h_rsc_0_6_ARADDR;
  input twiddle_h_rsc_0_6_ARID;
  input twiddle_h_rsc_0_6_BREADY;
  output twiddle_h_rsc_0_6_BVALID;
  output twiddle_h_rsc_0_6_BUSER;
  output [1:0] twiddle_h_rsc_0_6_BRESP;
  output twiddle_h_rsc_0_6_BID;
  output twiddle_h_rsc_0_6_WREADY;
  input twiddle_h_rsc_0_6_WVALID;
  input twiddle_h_rsc_0_6_WUSER;
  input twiddle_h_rsc_0_6_WLAST;
  input [3:0] twiddle_h_rsc_0_6_WSTRB;
  input [31:0] twiddle_h_rsc_0_6_WDATA;
  output twiddle_h_rsc_0_6_AWREADY;
  input twiddle_h_rsc_0_6_AWVALID;
  input twiddle_h_rsc_0_6_AWUSER;
  input [3:0] twiddle_h_rsc_0_6_AWREGION;
  input [3:0] twiddle_h_rsc_0_6_AWQOS;
  input [2:0] twiddle_h_rsc_0_6_AWPROT;
  input [3:0] twiddle_h_rsc_0_6_AWCACHE;
  input twiddle_h_rsc_0_6_AWLOCK;
  input [1:0] twiddle_h_rsc_0_6_AWBURST;
  input [2:0] twiddle_h_rsc_0_6_AWSIZE;
  input [7:0] twiddle_h_rsc_0_6_AWLEN;
  input [11:0] twiddle_h_rsc_0_6_AWADDR;
  input twiddle_h_rsc_0_6_AWID;
  input core_wen;
  input twiddle_h_rsc_0_6_i_oswt;
  output twiddle_h_rsc_0_6_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_6_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_6_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_6_i_biwt;
  wire twiddle_h_rsc_0_6_i_bdwt;
  wire twiddle_h_rsc_0_6_i_bcwt;
  wire twiddle_h_rsc_0_6_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_6_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_6_i_s_din;
  wire twiddle_h_rsc_0_6_i_s_rrdy;
  wire twiddle_h_rsc_0_6_i_s_wrdy;
  wire twiddle_h_rsc_0_6_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp_inst_twiddle_h_rsc_0_6_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp_inst_twiddle_h_rsc_0_6_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_6_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_6_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_6_AWID),
      .AWADDR(twiddle_h_rsc_0_6_AWADDR),
      .AWLEN(twiddle_h_rsc_0_6_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_6_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_6_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_6_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_6_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_6_AWPROT),
      .AWQOS(twiddle_h_rsc_0_6_AWQOS),
      .AWREGION(twiddle_h_rsc_0_6_AWREGION),
      .AWUSER(twiddle_h_rsc_0_6_AWUSER),
      .AWVALID(twiddle_h_rsc_0_6_AWVALID),
      .AWREADY(twiddle_h_rsc_0_6_AWREADY),
      .WDATA(twiddle_h_rsc_0_6_WDATA),
      .WSTRB(twiddle_h_rsc_0_6_WSTRB),
      .WLAST(twiddle_h_rsc_0_6_WLAST),
      .WUSER(twiddle_h_rsc_0_6_WUSER),
      .WVALID(twiddle_h_rsc_0_6_WVALID),
      .WREADY(twiddle_h_rsc_0_6_WREADY),
      .BID(twiddle_h_rsc_0_6_BID),
      .BRESP(twiddle_h_rsc_0_6_BRESP),
      .BUSER(twiddle_h_rsc_0_6_BUSER),
      .BVALID(twiddle_h_rsc_0_6_BVALID),
      .BREADY(twiddle_h_rsc_0_6_BREADY),
      .ARID(twiddle_h_rsc_0_6_ARID),
      .ARADDR(twiddle_h_rsc_0_6_ARADDR),
      .ARLEN(twiddle_h_rsc_0_6_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_6_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_6_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_6_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_6_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_6_ARPROT),
      .ARQOS(twiddle_h_rsc_0_6_ARQOS),
      .ARREGION(twiddle_h_rsc_0_6_ARREGION),
      .ARUSER(twiddle_h_rsc_0_6_ARUSER),
      .ARVALID(twiddle_h_rsc_0_6_ARVALID),
      .ARREADY(twiddle_h_rsc_0_6_ARREADY),
      .RID(twiddle_h_rsc_0_6_RID),
      .RDATA(twiddle_h_rsc_0_6_RDATA),
      .RRESP(twiddle_h_rsc_0_6_RRESP),
      .RLAST(twiddle_h_rsc_0_6_RLAST),
      .RUSER(twiddle_h_rsc_0_6_RUSER),
      .RVALID(twiddle_h_rsc_0_6_RVALID),
      .RREADY(twiddle_h_rsc_0_6_RREADY),
      .s_re(twiddle_h_rsc_0_6_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_6_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_6_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_6_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_6_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_6_is_idle),
      .tr_write_done(twiddle_h_rsc_0_6_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_6_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_6_i_oswt(twiddle_h_rsc_0_6_i_oswt),
      .twiddle_h_rsc_0_6_i_biwt(twiddle_h_rsc_0_6_i_biwt),
      .twiddle_h_rsc_0_6_i_bdwt(twiddle_h_rsc_0_6_i_bdwt),
      .twiddle_h_rsc_0_6_i_bcwt(twiddle_h_rsc_0_6_i_bcwt),
      .twiddle_h_rsc_0_6_i_s_re_core_sct(twiddle_h_rsc_0_6_i_s_re_core_sct),
      .twiddle_h_rsc_0_6_i_s_rrdy(twiddle_h_rsc_0_6_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_6_i_oswt(twiddle_h_rsc_0_6_i_oswt),
      .twiddle_h_rsc_0_6_i_wen_comp(twiddle_h_rsc_0_6_i_wen_comp),
      .twiddle_h_rsc_0_6_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_6_i_twiddle_h_rsc_0_6_wait_dp_inst_twiddle_h_rsc_0_6_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_6_i_s_din_mxwt(twiddle_h_rsc_0_6_i_s_din_mxwt),
      .twiddle_h_rsc_0_6_i_biwt(twiddle_h_rsc_0_6_i_biwt),
      .twiddle_h_rsc_0_6_i_bdwt(twiddle_h_rsc_0_6_i_bdwt),
      .twiddle_h_rsc_0_6_i_bcwt(twiddle_h_rsc_0_6_i_bcwt),
      .twiddle_h_rsc_0_6_i_s_raddr(twiddle_h_rsc_0_6_i_s_raddr),
      .twiddle_h_rsc_0_6_i_s_raddr_core_sct(twiddle_h_rsc_0_6_i_s_re_core_sct),
      .twiddle_h_rsc_0_6_i_s_din(twiddle_h_rsc_0_6_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_5_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_5_i (
  clk, rst, twiddle_h_rsc_0_5_s_tdone, twiddle_h_rsc_0_5_tr_write_done, twiddle_h_rsc_0_5_RREADY,
      twiddle_h_rsc_0_5_RVALID, twiddle_h_rsc_0_5_RUSER, twiddle_h_rsc_0_5_RLAST,
      twiddle_h_rsc_0_5_RRESP, twiddle_h_rsc_0_5_RDATA, twiddle_h_rsc_0_5_RID, twiddle_h_rsc_0_5_ARREADY,
      twiddle_h_rsc_0_5_ARVALID, twiddle_h_rsc_0_5_ARUSER, twiddle_h_rsc_0_5_ARREGION,
      twiddle_h_rsc_0_5_ARQOS, twiddle_h_rsc_0_5_ARPROT, twiddle_h_rsc_0_5_ARCACHE,
      twiddle_h_rsc_0_5_ARLOCK, twiddle_h_rsc_0_5_ARBURST, twiddle_h_rsc_0_5_ARSIZE,
      twiddle_h_rsc_0_5_ARLEN, twiddle_h_rsc_0_5_ARADDR, twiddle_h_rsc_0_5_ARID,
      twiddle_h_rsc_0_5_BREADY, twiddle_h_rsc_0_5_BVALID, twiddle_h_rsc_0_5_BUSER,
      twiddle_h_rsc_0_5_BRESP, twiddle_h_rsc_0_5_BID, twiddle_h_rsc_0_5_WREADY, twiddle_h_rsc_0_5_WVALID,
      twiddle_h_rsc_0_5_WUSER, twiddle_h_rsc_0_5_WLAST, twiddle_h_rsc_0_5_WSTRB,
      twiddle_h_rsc_0_5_WDATA, twiddle_h_rsc_0_5_AWREADY, twiddle_h_rsc_0_5_AWVALID,
      twiddle_h_rsc_0_5_AWUSER, twiddle_h_rsc_0_5_AWREGION, twiddle_h_rsc_0_5_AWQOS,
      twiddle_h_rsc_0_5_AWPROT, twiddle_h_rsc_0_5_AWCACHE, twiddle_h_rsc_0_5_AWLOCK,
      twiddle_h_rsc_0_5_AWBURST, twiddle_h_rsc_0_5_AWSIZE, twiddle_h_rsc_0_5_AWLEN,
      twiddle_h_rsc_0_5_AWADDR, twiddle_h_rsc_0_5_AWID, core_wen, twiddle_h_rsc_0_5_i_oswt,
      twiddle_h_rsc_0_5_i_wen_comp, twiddle_h_rsc_0_5_i_s_raddr_core, twiddle_h_rsc_0_5_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_5_s_tdone;
  input twiddle_h_rsc_0_5_tr_write_done;
  input twiddle_h_rsc_0_5_RREADY;
  output twiddle_h_rsc_0_5_RVALID;
  output twiddle_h_rsc_0_5_RUSER;
  output twiddle_h_rsc_0_5_RLAST;
  output [1:0] twiddle_h_rsc_0_5_RRESP;
  output [31:0] twiddle_h_rsc_0_5_RDATA;
  output twiddle_h_rsc_0_5_RID;
  output twiddle_h_rsc_0_5_ARREADY;
  input twiddle_h_rsc_0_5_ARVALID;
  input twiddle_h_rsc_0_5_ARUSER;
  input [3:0] twiddle_h_rsc_0_5_ARREGION;
  input [3:0] twiddle_h_rsc_0_5_ARQOS;
  input [2:0] twiddle_h_rsc_0_5_ARPROT;
  input [3:0] twiddle_h_rsc_0_5_ARCACHE;
  input twiddle_h_rsc_0_5_ARLOCK;
  input [1:0] twiddle_h_rsc_0_5_ARBURST;
  input [2:0] twiddle_h_rsc_0_5_ARSIZE;
  input [7:0] twiddle_h_rsc_0_5_ARLEN;
  input [11:0] twiddle_h_rsc_0_5_ARADDR;
  input twiddle_h_rsc_0_5_ARID;
  input twiddle_h_rsc_0_5_BREADY;
  output twiddle_h_rsc_0_5_BVALID;
  output twiddle_h_rsc_0_5_BUSER;
  output [1:0] twiddle_h_rsc_0_5_BRESP;
  output twiddle_h_rsc_0_5_BID;
  output twiddle_h_rsc_0_5_WREADY;
  input twiddle_h_rsc_0_5_WVALID;
  input twiddle_h_rsc_0_5_WUSER;
  input twiddle_h_rsc_0_5_WLAST;
  input [3:0] twiddle_h_rsc_0_5_WSTRB;
  input [31:0] twiddle_h_rsc_0_5_WDATA;
  output twiddle_h_rsc_0_5_AWREADY;
  input twiddle_h_rsc_0_5_AWVALID;
  input twiddle_h_rsc_0_5_AWUSER;
  input [3:0] twiddle_h_rsc_0_5_AWREGION;
  input [3:0] twiddle_h_rsc_0_5_AWQOS;
  input [2:0] twiddle_h_rsc_0_5_AWPROT;
  input [3:0] twiddle_h_rsc_0_5_AWCACHE;
  input twiddle_h_rsc_0_5_AWLOCK;
  input [1:0] twiddle_h_rsc_0_5_AWBURST;
  input [2:0] twiddle_h_rsc_0_5_AWSIZE;
  input [7:0] twiddle_h_rsc_0_5_AWLEN;
  input [11:0] twiddle_h_rsc_0_5_AWADDR;
  input twiddle_h_rsc_0_5_AWID;
  input core_wen;
  input twiddle_h_rsc_0_5_i_oswt;
  output twiddle_h_rsc_0_5_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_5_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_5_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_5_i_biwt;
  wire twiddle_h_rsc_0_5_i_bdwt;
  wire twiddle_h_rsc_0_5_i_bcwt;
  wire twiddle_h_rsc_0_5_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_5_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_5_i_s_din;
  wire twiddle_h_rsc_0_5_i_s_rrdy;
  wire twiddle_h_rsc_0_5_i_s_wrdy;
  wire twiddle_h_rsc_0_5_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp_inst_twiddle_h_rsc_0_5_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp_inst_twiddle_h_rsc_0_5_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_5_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_5_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_5_AWID),
      .AWADDR(twiddle_h_rsc_0_5_AWADDR),
      .AWLEN(twiddle_h_rsc_0_5_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_5_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_5_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_5_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_5_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_5_AWPROT),
      .AWQOS(twiddle_h_rsc_0_5_AWQOS),
      .AWREGION(twiddle_h_rsc_0_5_AWREGION),
      .AWUSER(twiddle_h_rsc_0_5_AWUSER),
      .AWVALID(twiddle_h_rsc_0_5_AWVALID),
      .AWREADY(twiddle_h_rsc_0_5_AWREADY),
      .WDATA(twiddle_h_rsc_0_5_WDATA),
      .WSTRB(twiddle_h_rsc_0_5_WSTRB),
      .WLAST(twiddle_h_rsc_0_5_WLAST),
      .WUSER(twiddle_h_rsc_0_5_WUSER),
      .WVALID(twiddle_h_rsc_0_5_WVALID),
      .WREADY(twiddle_h_rsc_0_5_WREADY),
      .BID(twiddle_h_rsc_0_5_BID),
      .BRESP(twiddle_h_rsc_0_5_BRESP),
      .BUSER(twiddle_h_rsc_0_5_BUSER),
      .BVALID(twiddle_h_rsc_0_5_BVALID),
      .BREADY(twiddle_h_rsc_0_5_BREADY),
      .ARID(twiddle_h_rsc_0_5_ARID),
      .ARADDR(twiddle_h_rsc_0_5_ARADDR),
      .ARLEN(twiddle_h_rsc_0_5_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_5_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_5_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_5_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_5_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_5_ARPROT),
      .ARQOS(twiddle_h_rsc_0_5_ARQOS),
      .ARREGION(twiddle_h_rsc_0_5_ARREGION),
      .ARUSER(twiddle_h_rsc_0_5_ARUSER),
      .ARVALID(twiddle_h_rsc_0_5_ARVALID),
      .ARREADY(twiddle_h_rsc_0_5_ARREADY),
      .RID(twiddle_h_rsc_0_5_RID),
      .RDATA(twiddle_h_rsc_0_5_RDATA),
      .RRESP(twiddle_h_rsc_0_5_RRESP),
      .RLAST(twiddle_h_rsc_0_5_RLAST),
      .RUSER(twiddle_h_rsc_0_5_RUSER),
      .RVALID(twiddle_h_rsc_0_5_RVALID),
      .RREADY(twiddle_h_rsc_0_5_RREADY),
      .s_re(twiddle_h_rsc_0_5_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_5_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_5_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_5_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_5_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_5_is_idle),
      .tr_write_done(twiddle_h_rsc_0_5_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_5_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_5_i_oswt(twiddle_h_rsc_0_5_i_oswt),
      .twiddle_h_rsc_0_5_i_biwt(twiddle_h_rsc_0_5_i_biwt),
      .twiddle_h_rsc_0_5_i_bdwt(twiddle_h_rsc_0_5_i_bdwt),
      .twiddle_h_rsc_0_5_i_bcwt(twiddle_h_rsc_0_5_i_bcwt),
      .twiddle_h_rsc_0_5_i_s_re_core_sct(twiddle_h_rsc_0_5_i_s_re_core_sct),
      .twiddle_h_rsc_0_5_i_s_rrdy(twiddle_h_rsc_0_5_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_5_i_oswt(twiddle_h_rsc_0_5_i_oswt),
      .twiddle_h_rsc_0_5_i_wen_comp(twiddle_h_rsc_0_5_i_wen_comp),
      .twiddle_h_rsc_0_5_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_5_i_twiddle_h_rsc_0_5_wait_dp_inst_twiddle_h_rsc_0_5_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_5_i_s_din_mxwt(twiddle_h_rsc_0_5_i_s_din_mxwt),
      .twiddle_h_rsc_0_5_i_biwt(twiddle_h_rsc_0_5_i_biwt),
      .twiddle_h_rsc_0_5_i_bdwt(twiddle_h_rsc_0_5_i_bdwt),
      .twiddle_h_rsc_0_5_i_bcwt(twiddle_h_rsc_0_5_i_bcwt),
      .twiddle_h_rsc_0_5_i_s_raddr(twiddle_h_rsc_0_5_i_s_raddr),
      .twiddle_h_rsc_0_5_i_s_raddr_core_sct(twiddle_h_rsc_0_5_i_s_re_core_sct),
      .twiddle_h_rsc_0_5_i_s_din(twiddle_h_rsc_0_5_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_4_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_4_i (
  clk, rst, twiddle_h_rsc_0_4_s_tdone, twiddle_h_rsc_0_4_tr_write_done, twiddle_h_rsc_0_4_RREADY,
      twiddle_h_rsc_0_4_RVALID, twiddle_h_rsc_0_4_RUSER, twiddle_h_rsc_0_4_RLAST,
      twiddle_h_rsc_0_4_RRESP, twiddle_h_rsc_0_4_RDATA, twiddle_h_rsc_0_4_RID, twiddle_h_rsc_0_4_ARREADY,
      twiddle_h_rsc_0_4_ARVALID, twiddle_h_rsc_0_4_ARUSER, twiddle_h_rsc_0_4_ARREGION,
      twiddle_h_rsc_0_4_ARQOS, twiddle_h_rsc_0_4_ARPROT, twiddle_h_rsc_0_4_ARCACHE,
      twiddle_h_rsc_0_4_ARLOCK, twiddle_h_rsc_0_4_ARBURST, twiddle_h_rsc_0_4_ARSIZE,
      twiddle_h_rsc_0_4_ARLEN, twiddle_h_rsc_0_4_ARADDR, twiddle_h_rsc_0_4_ARID,
      twiddle_h_rsc_0_4_BREADY, twiddle_h_rsc_0_4_BVALID, twiddle_h_rsc_0_4_BUSER,
      twiddle_h_rsc_0_4_BRESP, twiddle_h_rsc_0_4_BID, twiddle_h_rsc_0_4_WREADY, twiddle_h_rsc_0_4_WVALID,
      twiddle_h_rsc_0_4_WUSER, twiddle_h_rsc_0_4_WLAST, twiddle_h_rsc_0_4_WSTRB,
      twiddle_h_rsc_0_4_WDATA, twiddle_h_rsc_0_4_AWREADY, twiddle_h_rsc_0_4_AWVALID,
      twiddle_h_rsc_0_4_AWUSER, twiddle_h_rsc_0_4_AWREGION, twiddle_h_rsc_0_4_AWQOS,
      twiddle_h_rsc_0_4_AWPROT, twiddle_h_rsc_0_4_AWCACHE, twiddle_h_rsc_0_4_AWLOCK,
      twiddle_h_rsc_0_4_AWBURST, twiddle_h_rsc_0_4_AWSIZE, twiddle_h_rsc_0_4_AWLEN,
      twiddle_h_rsc_0_4_AWADDR, twiddle_h_rsc_0_4_AWID, core_wen, twiddle_h_rsc_0_4_i_oswt,
      twiddle_h_rsc_0_4_i_wen_comp, twiddle_h_rsc_0_4_i_s_raddr_core, twiddle_h_rsc_0_4_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_4_s_tdone;
  input twiddle_h_rsc_0_4_tr_write_done;
  input twiddle_h_rsc_0_4_RREADY;
  output twiddle_h_rsc_0_4_RVALID;
  output twiddle_h_rsc_0_4_RUSER;
  output twiddle_h_rsc_0_4_RLAST;
  output [1:0] twiddle_h_rsc_0_4_RRESP;
  output [31:0] twiddle_h_rsc_0_4_RDATA;
  output twiddle_h_rsc_0_4_RID;
  output twiddle_h_rsc_0_4_ARREADY;
  input twiddle_h_rsc_0_4_ARVALID;
  input twiddle_h_rsc_0_4_ARUSER;
  input [3:0] twiddle_h_rsc_0_4_ARREGION;
  input [3:0] twiddle_h_rsc_0_4_ARQOS;
  input [2:0] twiddle_h_rsc_0_4_ARPROT;
  input [3:0] twiddle_h_rsc_0_4_ARCACHE;
  input twiddle_h_rsc_0_4_ARLOCK;
  input [1:0] twiddle_h_rsc_0_4_ARBURST;
  input [2:0] twiddle_h_rsc_0_4_ARSIZE;
  input [7:0] twiddle_h_rsc_0_4_ARLEN;
  input [11:0] twiddle_h_rsc_0_4_ARADDR;
  input twiddle_h_rsc_0_4_ARID;
  input twiddle_h_rsc_0_4_BREADY;
  output twiddle_h_rsc_0_4_BVALID;
  output twiddle_h_rsc_0_4_BUSER;
  output [1:0] twiddle_h_rsc_0_4_BRESP;
  output twiddle_h_rsc_0_4_BID;
  output twiddle_h_rsc_0_4_WREADY;
  input twiddle_h_rsc_0_4_WVALID;
  input twiddle_h_rsc_0_4_WUSER;
  input twiddle_h_rsc_0_4_WLAST;
  input [3:0] twiddle_h_rsc_0_4_WSTRB;
  input [31:0] twiddle_h_rsc_0_4_WDATA;
  output twiddle_h_rsc_0_4_AWREADY;
  input twiddle_h_rsc_0_4_AWVALID;
  input twiddle_h_rsc_0_4_AWUSER;
  input [3:0] twiddle_h_rsc_0_4_AWREGION;
  input [3:0] twiddle_h_rsc_0_4_AWQOS;
  input [2:0] twiddle_h_rsc_0_4_AWPROT;
  input [3:0] twiddle_h_rsc_0_4_AWCACHE;
  input twiddle_h_rsc_0_4_AWLOCK;
  input [1:0] twiddle_h_rsc_0_4_AWBURST;
  input [2:0] twiddle_h_rsc_0_4_AWSIZE;
  input [7:0] twiddle_h_rsc_0_4_AWLEN;
  input [11:0] twiddle_h_rsc_0_4_AWADDR;
  input twiddle_h_rsc_0_4_AWID;
  input core_wen;
  input twiddle_h_rsc_0_4_i_oswt;
  output twiddle_h_rsc_0_4_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_4_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_4_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_4_i_biwt;
  wire twiddle_h_rsc_0_4_i_bdwt;
  wire twiddle_h_rsc_0_4_i_bcwt;
  wire twiddle_h_rsc_0_4_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_4_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_4_i_s_din;
  wire twiddle_h_rsc_0_4_i_s_rrdy;
  wire twiddle_h_rsc_0_4_i_s_wrdy;
  wire twiddle_h_rsc_0_4_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp_inst_twiddle_h_rsc_0_4_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp_inst_twiddle_h_rsc_0_4_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_4_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_4_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_4_AWID),
      .AWADDR(twiddle_h_rsc_0_4_AWADDR),
      .AWLEN(twiddle_h_rsc_0_4_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_4_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_4_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_4_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_4_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_4_AWPROT),
      .AWQOS(twiddle_h_rsc_0_4_AWQOS),
      .AWREGION(twiddle_h_rsc_0_4_AWREGION),
      .AWUSER(twiddle_h_rsc_0_4_AWUSER),
      .AWVALID(twiddle_h_rsc_0_4_AWVALID),
      .AWREADY(twiddle_h_rsc_0_4_AWREADY),
      .WDATA(twiddle_h_rsc_0_4_WDATA),
      .WSTRB(twiddle_h_rsc_0_4_WSTRB),
      .WLAST(twiddle_h_rsc_0_4_WLAST),
      .WUSER(twiddle_h_rsc_0_4_WUSER),
      .WVALID(twiddle_h_rsc_0_4_WVALID),
      .WREADY(twiddle_h_rsc_0_4_WREADY),
      .BID(twiddle_h_rsc_0_4_BID),
      .BRESP(twiddle_h_rsc_0_4_BRESP),
      .BUSER(twiddle_h_rsc_0_4_BUSER),
      .BVALID(twiddle_h_rsc_0_4_BVALID),
      .BREADY(twiddle_h_rsc_0_4_BREADY),
      .ARID(twiddle_h_rsc_0_4_ARID),
      .ARADDR(twiddle_h_rsc_0_4_ARADDR),
      .ARLEN(twiddle_h_rsc_0_4_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_4_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_4_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_4_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_4_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_4_ARPROT),
      .ARQOS(twiddle_h_rsc_0_4_ARQOS),
      .ARREGION(twiddle_h_rsc_0_4_ARREGION),
      .ARUSER(twiddle_h_rsc_0_4_ARUSER),
      .ARVALID(twiddle_h_rsc_0_4_ARVALID),
      .ARREADY(twiddle_h_rsc_0_4_ARREADY),
      .RID(twiddle_h_rsc_0_4_RID),
      .RDATA(twiddle_h_rsc_0_4_RDATA),
      .RRESP(twiddle_h_rsc_0_4_RRESP),
      .RLAST(twiddle_h_rsc_0_4_RLAST),
      .RUSER(twiddle_h_rsc_0_4_RUSER),
      .RVALID(twiddle_h_rsc_0_4_RVALID),
      .RREADY(twiddle_h_rsc_0_4_RREADY),
      .s_re(twiddle_h_rsc_0_4_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_4_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_4_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_4_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_4_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_4_is_idle),
      .tr_write_done(twiddle_h_rsc_0_4_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_4_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_4_i_oswt(twiddle_h_rsc_0_4_i_oswt),
      .twiddle_h_rsc_0_4_i_biwt(twiddle_h_rsc_0_4_i_biwt),
      .twiddle_h_rsc_0_4_i_bdwt(twiddle_h_rsc_0_4_i_bdwt),
      .twiddle_h_rsc_0_4_i_bcwt(twiddle_h_rsc_0_4_i_bcwt),
      .twiddle_h_rsc_0_4_i_s_re_core_sct(twiddle_h_rsc_0_4_i_s_re_core_sct),
      .twiddle_h_rsc_0_4_i_s_rrdy(twiddle_h_rsc_0_4_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_4_i_oswt(twiddle_h_rsc_0_4_i_oswt),
      .twiddle_h_rsc_0_4_i_wen_comp(twiddle_h_rsc_0_4_i_wen_comp),
      .twiddle_h_rsc_0_4_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_4_i_twiddle_h_rsc_0_4_wait_dp_inst_twiddle_h_rsc_0_4_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_4_i_s_din_mxwt(twiddle_h_rsc_0_4_i_s_din_mxwt),
      .twiddle_h_rsc_0_4_i_biwt(twiddle_h_rsc_0_4_i_biwt),
      .twiddle_h_rsc_0_4_i_bdwt(twiddle_h_rsc_0_4_i_bdwt),
      .twiddle_h_rsc_0_4_i_bcwt(twiddle_h_rsc_0_4_i_bcwt),
      .twiddle_h_rsc_0_4_i_s_raddr(twiddle_h_rsc_0_4_i_s_raddr),
      .twiddle_h_rsc_0_4_i_s_raddr_core_sct(twiddle_h_rsc_0_4_i_s_re_core_sct),
      .twiddle_h_rsc_0_4_i_s_din(twiddle_h_rsc_0_4_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_3_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_3_i (
  clk, rst, twiddle_h_rsc_0_3_s_tdone, twiddle_h_rsc_0_3_tr_write_done, twiddle_h_rsc_0_3_RREADY,
      twiddle_h_rsc_0_3_RVALID, twiddle_h_rsc_0_3_RUSER, twiddle_h_rsc_0_3_RLAST,
      twiddle_h_rsc_0_3_RRESP, twiddle_h_rsc_0_3_RDATA, twiddle_h_rsc_0_3_RID, twiddle_h_rsc_0_3_ARREADY,
      twiddle_h_rsc_0_3_ARVALID, twiddle_h_rsc_0_3_ARUSER, twiddle_h_rsc_0_3_ARREGION,
      twiddle_h_rsc_0_3_ARQOS, twiddle_h_rsc_0_3_ARPROT, twiddle_h_rsc_0_3_ARCACHE,
      twiddle_h_rsc_0_3_ARLOCK, twiddle_h_rsc_0_3_ARBURST, twiddle_h_rsc_0_3_ARSIZE,
      twiddle_h_rsc_0_3_ARLEN, twiddle_h_rsc_0_3_ARADDR, twiddle_h_rsc_0_3_ARID,
      twiddle_h_rsc_0_3_BREADY, twiddle_h_rsc_0_3_BVALID, twiddle_h_rsc_0_3_BUSER,
      twiddle_h_rsc_0_3_BRESP, twiddle_h_rsc_0_3_BID, twiddle_h_rsc_0_3_WREADY, twiddle_h_rsc_0_3_WVALID,
      twiddle_h_rsc_0_3_WUSER, twiddle_h_rsc_0_3_WLAST, twiddle_h_rsc_0_3_WSTRB,
      twiddle_h_rsc_0_3_WDATA, twiddle_h_rsc_0_3_AWREADY, twiddle_h_rsc_0_3_AWVALID,
      twiddle_h_rsc_0_3_AWUSER, twiddle_h_rsc_0_3_AWREGION, twiddle_h_rsc_0_3_AWQOS,
      twiddle_h_rsc_0_3_AWPROT, twiddle_h_rsc_0_3_AWCACHE, twiddle_h_rsc_0_3_AWLOCK,
      twiddle_h_rsc_0_3_AWBURST, twiddle_h_rsc_0_3_AWSIZE, twiddle_h_rsc_0_3_AWLEN,
      twiddle_h_rsc_0_3_AWADDR, twiddle_h_rsc_0_3_AWID, core_wen, twiddle_h_rsc_0_3_i_oswt,
      twiddle_h_rsc_0_3_i_wen_comp, twiddle_h_rsc_0_3_i_s_raddr_core, twiddle_h_rsc_0_3_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_3_s_tdone;
  input twiddle_h_rsc_0_3_tr_write_done;
  input twiddle_h_rsc_0_3_RREADY;
  output twiddle_h_rsc_0_3_RVALID;
  output twiddle_h_rsc_0_3_RUSER;
  output twiddle_h_rsc_0_3_RLAST;
  output [1:0] twiddle_h_rsc_0_3_RRESP;
  output [31:0] twiddle_h_rsc_0_3_RDATA;
  output twiddle_h_rsc_0_3_RID;
  output twiddle_h_rsc_0_3_ARREADY;
  input twiddle_h_rsc_0_3_ARVALID;
  input twiddle_h_rsc_0_3_ARUSER;
  input [3:0] twiddle_h_rsc_0_3_ARREGION;
  input [3:0] twiddle_h_rsc_0_3_ARQOS;
  input [2:0] twiddle_h_rsc_0_3_ARPROT;
  input [3:0] twiddle_h_rsc_0_3_ARCACHE;
  input twiddle_h_rsc_0_3_ARLOCK;
  input [1:0] twiddle_h_rsc_0_3_ARBURST;
  input [2:0] twiddle_h_rsc_0_3_ARSIZE;
  input [7:0] twiddle_h_rsc_0_3_ARLEN;
  input [11:0] twiddle_h_rsc_0_3_ARADDR;
  input twiddle_h_rsc_0_3_ARID;
  input twiddle_h_rsc_0_3_BREADY;
  output twiddle_h_rsc_0_3_BVALID;
  output twiddle_h_rsc_0_3_BUSER;
  output [1:0] twiddle_h_rsc_0_3_BRESP;
  output twiddle_h_rsc_0_3_BID;
  output twiddle_h_rsc_0_3_WREADY;
  input twiddle_h_rsc_0_3_WVALID;
  input twiddle_h_rsc_0_3_WUSER;
  input twiddle_h_rsc_0_3_WLAST;
  input [3:0] twiddle_h_rsc_0_3_WSTRB;
  input [31:0] twiddle_h_rsc_0_3_WDATA;
  output twiddle_h_rsc_0_3_AWREADY;
  input twiddle_h_rsc_0_3_AWVALID;
  input twiddle_h_rsc_0_3_AWUSER;
  input [3:0] twiddle_h_rsc_0_3_AWREGION;
  input [3:0] twiddle_h_rsc_0_3_AWQOS;
  input [2:0] twiddle_h_rsc_0_3_AWPROT;
  input [3:0] twiddle_h_rsc_0_3_AWCACHE;
  input twiddle_h_rsc_0_3_AWLOCK;
  input [1:0] twiddle_h_rsc_0_3_AWBURST;
  input [2:0] twiddle_h_rsc_0_3_AWSIZE;
  input [7:0] twiddle_h_rsc_0_3_AWLEN;
  input [11:0] twiddle_h_rsc_0_3_AWADDR;
  input twiddle_h_rsc_0_3_AWID;
  input core_wen;
  input twiddle_h_rsc_0_3_i_oswt;
  output twiddle_h_rsc_0_3_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_3_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_3_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_3_i_biwt;
  wire twiddle_h_rsc_0_3_i_bdwt;
  wire twiddle_h_rsc_0_3_i_bcwt;
  wire twiddle_h_rsc_0_3_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_3_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_3_i_s_din;
  wire twiddle_h_rsc_0_3_i_s_rrdy;
  wire twiddle_h_rsc_0_3_i_s_wrdy;
  wire twiddle_h_rsc_0_3_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp_inst_twiddle_h_rsc_0_3_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp_inst_twiddle_h_rsc_0_3_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_3_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_3_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_3_AWID),
      .AWADDR(twiddle_h_rsc_0_3_AWADDR),
      .AWLEN(twiddle_h_rsc_0_3_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_3_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_3_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_3_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_3_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_3_AWPROT),
      .AWQOS(twiddle_h_rsc_0_3_AWQOS),
      .AWREGION(twiddle_h_rsc_0_3_AWREGION),
      .AWUSER(twiddle_h_rsc_0_3_AWUSER),
      .AWVALID(twiddle_h_rsc_0_3_AWVALID),
      .AWREADY(twiddle_h_rsc_0_3_AWREADY),
      .WDATA(twiddle_h_rsc_0_3_WDATA),
      .WSTRB(twiddle_h_rsc_0_3_WSTRB),
      .WLAST(twiddle_h_rsc_0_3_WLAST),
      .WUSER(twiddle_h_rsc_0_3_WUSER),
      .WVALID(twiddle_h_rsc_0_3_WVALID),
      .WREADY(twiddle_h_rsc_0_3_WREADY),
      .BID(twiddle_h_rsc_0_3_BID),
      .BRESP(twiddle_h_rsc_0_3_BRESP),
      .BUSER(twiddle_h_rsc_0_3_BUSER),
      .BVALID(twiddle_h_rsc_0_3_BVALID),
      .BREADY(twiddle_h_rsc_0_3_BREADY),
      .ARID(twiddle_h_rsc_0_3_ARID),
      .ARADDR(twiddle_h_rsc_0_3_ARADDR),
      .ARLEN(twiddle_h_rsc_0_3_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_3_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_3_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_3_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_3_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_3_ARPROT),
      .ARQOS(twiddle_h_rsc_0_3_ARQOS),
      .ARREGION(twiddle_h_rsc_0_3_ARREGION),
      .ARUSER(twiddle_h_rsc_0_3_ARUSER),
      .ARVALID(twiddle_h_rsc_0_3_ARVALID),
      .ARREADY(twiddle_h_rsc_0_3_ARREADY),
      .RID(twiddle_h_rsc_0_3_RID),
      .RDATA(twiddle_h_rsc_0_3_RDATA),
      .RRESP(twiddle_h_rsc_0_3_RRESP),
      .RLAST(twiddle_h_rsc_0_3_RLAST),
      .RUSER(twiddle_h_rsc_0_3_RUSER),
      .RVALID(twiddle_h_rsc_0_3_RVALID),
      .RREADY(twiddle_h_rsc_0_3_RREADY),
      .s_re(twiddle_h_rsc_0_3_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_3_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_3_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_3_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_3_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_3_is_idle),
      .tr_write_done(twiddle_h_rsc_0_3_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_3_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_3_i_oswt(twiddle_h_rsc_0_3_i_oswt),
      .twiddle_h_rsc_0_3_i_biwt(twiddle_h_rsc_0_3_i_biwt),
      .twiddle_h_rsc_0_3_i_bdwt(twiddle_h_rsc_0_3_i_bdwt),
      .twiddle_h_rsc_0_3_i_bcwt(twiddle_h_rsc_0_3_i_bcwt),
      .twiddle_h_rsc_0_3_i_s_re_core_sct(twiddle_h_rsc_0_3_i_s_re_core_sct),
      .twiddle_h_rsc_0_3_i_s_rrdy(twiddle_h_rsc_0_3_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_3_i_oswt(twiddle_h_rsc_0_3_i_oswt),
      .twiddle_h_rsc_0_3_i_wen_comp(twiddle_h_rsc_0_3_i_wen_comp),
      .twiddle_h_rsc_0_3_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_3_i_twiddle_h_rsc_0_3_wait_dp_inst_twiddle_h_rsc_0_3_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_3_i_s_din_mxwt(twiddle_h_rsc_0_3_i_s_din_mxwt),
      .twiddle_h_rsc_0_3_i_biwt(twiddle_h_rsc_0_3_i_biwt),
      .twiddle_h_rsc_0_3_i_bdwt(twiddle_h_rsc_0_3_i_bdwt),
      .twiddle_h_rsc_0_3_i_bcwt(twiddle_h_rsc_0_3_i_bcwt),
      .twiddle_h_rsc_0_3_i_s_raddr(twiddle_h_rsc_0_3_i_s_raddr),
      .twiddle_h_rsc_0_3_i_s_raddr_core_sct(twiddle_h_rsc_0_3_i_s_re_core_sct),
      .twiddle_h_rsc_0_3_i_s_din(twiddle_h_rsc_0_3_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_2_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_2_i (
  clk, rst, twiddle_h_rsc_0_2_s_tdone, twiddle_h_rsc_0_2_tr_write_done, twiddle_h_rsc_0_2_RREADY,
      twiddle_h_rsc_0_2_RVALID, twiddle_h_rsc_0_2_RUSER, twiddle_h_rsc_0_2_RLAST,
      twiddle_h_rsc_0_2_RRESP, twiddle_h_rsc_0_2_RDATA, twiddle_h_rsc_0_2_RID, twiddle_h_rsc_0_2_ARREADY,
      twiddle_h_rsc_0_2_ARVALID, twiddle_h_rsc_0_2_ARUSER, twiddle_h_rsc_0_2_ARREGION,
      twiddle_h_rsc_0_2_ARQOS, twiddle_h_rsc_0_2_ARPROT, twiddle_h_rsc_0_2_ARCACHE,
      twiddle_h_rsc_0_2_ARLOCK, twiddle_h_rsc_0_2_ARBURST, twiddle_h_rsc_0_2_ARSIZE,
      twiddle_h_rsc_0_2_ARLEN, twiddle_h_rsc_0_2_ARADDR, twiddle_h_rsc_0_2_ARID,
      twiddle_h_rsc_0_2_BREADY, twiddle_h_rsc_0_2_BVALID, twiddle_h_rsc_0_2_BUSER,
      twiddle_h_rsc_0_2_BRESP, twiddle_h_rsc_0_2_BID, twiddle_h_rsc_0_2_WREADY, twiddle_h_rsc_0_2_WVALID,
      twiddle_h_rsc_0_2_WUSER, twiddle_h_rsc_0_2_WLAST, twiddle_h_rsc_0_2_WSTRB,
      twiddle_h_rsc_0_2_WDATA, twiddle_h_rsc_0_2_AWREADY, twiddle_h_rsc_0_2_AWVALID,
      twiddle_h_rsc_0_2_AWUSER, twiddle_h_rsc_0_2_AWREGION, twiddle_h_rsc_0_2_AWQOS,
      twiddle_h_rsc_0_2_AWPROT, twiddle_h_rsc_0_2_AWCACHE, twiddle_h_rsc_0_2_AWLOCK,
      twiddle_h_rsc_0_2_AWBURST, twiddle_h_rsc_0_2_AWSIZE, twiddle_h_rsc_0_2_AWLEN,
      twiddle_h_rsc_0_2_AWADDR, twiddle_h_rsc_0_2_AWID, core_wen, twiddle_h_rsc_0_2_i_oswt,
      twiddle_h_rsc_0_2_i_wen_comp, twiddle_h_rsc_0_2_i_s_raddr_core, twiddle_h_rsc_0_2_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_2_s_tdone;
  input twiddle_h_rsc_0_2_tr_write_done;
  input twiddle_h_rsc_0_2_RREADY;
  output twiddle_h_rsc_0_2_RVALID;
  output twiddle_h_rsc_0_2_RUSER;
  output twiddle_h_rsc_0_2_RLAST;
  output [1:0] twiddle_h_rsc_0_2_RRESP;
  output [31:0] twiddle_h_rsc_0_2_RDATA;
  output twiddle_h_rsc_0_2_RID;
  output twiddle_h_rsc_0_2_ARREADY;
  input twiddle_h_rsc_0_2_ARVALID;
  input twiddle_h_rsc_0_2_ARUSER;
  input [3:0] twiddle_h_rsc_0_2_ARREGION;
  input [3:0] twiddle_h_rsc_0_2_ARQOS;
  input [2:0] twiddle_h_rsc_0_2_ARPROT;
  input [3:0] twiddle_h_rsc_0_2_ARCACHE;
  input twiddle_h_rsc_0_2_ARLOCK;
  input [1:0] twiddle_h_rsc_0_2_ARBURST;
  input [2:0] twiddle_h_rsc_0_2_ARSIZE;
  input [7:0] twiddle_h_rsc_0_2_ARLEN;
  input [11:0] twiddle_h_rsc_0_2_ARADDR;
  input twiddle_h_rsc_0_2_ARID;
  input twiddle_h_rsc_0_2_BREADY;
  output twiddle_h_rsc_0_2_BVALID;
  output twiddle_h_rsc_0_2_BUSER;
  output [1:0] twiddle_h_rsc_0_2_BRESP;
  output twiddle_h_rsc_0_2_BID;
  output twiddle_h_rsc_0_2_WREADY;
  input twiddle_h_rsc_0_2_WVALID;
  input twiddle_h_rsc_0_2_WUSER;
  input twiddle_h_rsc_0_2_WLAST;
  input [3:0] twiddle_h_rsc_0_2_WSTRB;
  input [31:0] twiddle_h_rsc_0_2_WDATA;
  output twiddle_h_rsc_0_2_AWREADY;
  input twiddle_h_rsc_0_2_AWVALID;
  input twiddle_h_rsc_0_2_AWUSER;
  input [3:0] twiddle_h_rsc_0_2_AWREGION;
  input [3:0] twiddle_h_rsc_0_2_AWQOS;
  input [2:0] twiddle_h_rsc_0_2_AWPROT;
  input [3:0] twiddle_h_rsc_0_2_AWCACHE;
  input twiddle_h_rsc_0_2_AWLOCK;
  input [1:0] twiddle_h_rsc_0_2_AWBURST;
  input [2:0] twiddle_h_rsc_0_2_AWSIZE;
  input [7:0] twiddle_h_rsc_0_2_AWLEN;
  input [11:0] twiddle_h_rsc_0_2_AWADDR;
  input twiddle_h_rsc_0_2_AWID;
  input core_wen;
  input twiddle_h_rsc_0_2_i_oswt;
  output twiddle_h_rsc_0_2_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_2_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_2_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_2_i_biwt;
  wire twiddle_h_rsc_0_2_i_bdwt;
  wire twiddle_h_rsc_0_2_i_bcwt;
  wire twiddle_h_rsc_0_2_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_2_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_2_i_s_din;
  wire twiddle_h_rsc_0_2_i_s_rrdy;
  wire twiddle_h_rsc_0_2_i_s_wrdy;
  wire twiddle_h_rsc_0_2_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp_inst_twiddle_h_rsc_0_2_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp_inst_twiddle_h_rsc_0_2_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_2_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_2_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_2_AWID),
      .AWADDR(twiddle_h_rsc_0_2_AWADDR),
      .AWLEN(twiddle_h_rsc_0_2_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_2_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_2_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_2_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_2_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_2_AWPROT),
      .AWQOS(twiddle_h_rsc_0_2_AWQOS),
      .AWREGION(twiddle_h_rsc_0_2_AWREGION),
      .AWUSER(twiddle_h_rsc_0_2_AWUSER),
      .AWVALID(twiddle_h_rsc_0_2_AWVALID),
      .AWREADY(twiddle_h_rsc_0_2_AWREADY),
      .WDATA(twiddle_h_rsc_0_2_WDATA),
      .WSTRB(twiddle_h_rsc_0_2_WSTRB),
      .WLAST(twiddle_h_rsc_0_2_WLAST),
      .WUSER(twiddle_h_rsc_0_2_WUSER),
      .WVALID(twiddle_h_rsc_0_2_WVALID),
      .WREADY(twiddle_h_rsc_0_2_WREADY),
      .BID(twiddle_h_rsc_0_2_BID),
      .BRESP(twiddle_h_rsc_0_2_BRESP),
      .BUSER(twiddle_h_rsc_0_2_BUSER),
      .BVALID(twiddle_h_rsc_0_2_BVALID),
      .BREADY(twiddle_h_rsc_0_2_BREADY),
      .ARID(twiddle_h_rsc_0_2_ARID),
      .ARADDR(twiddle_h_rsc_0_2_ARADDR),
      .ARLEN(twiddle_h_rsc_0_2_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_2_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_2_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_2_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_2_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_2_ARPROT),
      .ARQOS(twiddle_h_rsc_0_2_ARQOS),
      .ARREGION(twiddle_h_rsc_0_2_ARREGION),
      .ARUSER(twiddle_h_rsc_0_2_ARUSER),
      .ARVALID(twiddle_h_rsc_0_2_ARVALID),
      .ARREADY(twiddle_h_rsc_0_2_ARREADY),
      .RID(twiddle_h_rsc_0_2_RID),
      .RDATA(twiddle_h_rsc_0_2_RDATA),
      .RRESP(twiddle_h_rsc_0_2_RRESP),
      .RLAST(twiddle_h_rsc_0_2_RLAST),
      .RUSER(twiddle_h_rsc_0_2_RUSER),
      .RVALID(twiddle_h_rsc_0_2_RVALID),
      .RREADY(twiddle_h_rsc_0_2_RREADY),
      .s_re(twiddle_h_rsc_0_2_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_2_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_2_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_2_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_2_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_2_is_idle),
      .tr_write_done(twiddle_h_rsc_0_2_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_2_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_2_i_oswt(twiddle_h_rsc_0_2_i_oswt),
      .twiddle_h_rsc_0_2_i_biwt(twiddle_h_rsc_0_2_i_biwt),
      .twiddle_h_rsc_0_2_i_bdwt(twiddle_h_rsc_0_2_i_bdwt),
      .twiddle_h_rsc_0_2_i_bcwt(twiddle_h_rsc_0_2_i_bcwt),
      .twiddle_h_rsc_0_2_i_s_re_core_sct(twiddle_h_rsc_0_2_i_s_re_core_sct),
      .twiddle_h_rsc_0_2_i_s_rrdy(twiddle_h_rsc_0_2_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_2_i_oswt(twiddle_h_rsc_0_2_i_oswt),
      .twiddle_h_rsc_0_2_i_wen_comp(twiddle_h_rsc_0_2_i_wen_comp),
      .twiddle_h_rsc_0_2_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_2_i_twiddle_h_rsc_0_2_wait_dp_inst_twiddle_h_rsc_0_2_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_2_i_s_din_mxwt(twiddle_h_rsc_0_2_i_s_din_mxwt),
      .twiddle_h_rsc_0_2_i_biwt(twiddle_h_rsc_0_2_i_biwt),
      .twiddle_h_rsc_0_2_i_bdwt(twiddle_h_rsc_0_2_i_bdwt),
      .twiddle_h_rsc_0_2_i_bcwt(twiddle_h_rsc_0_2_i_bcwt),
      .twiddle_h_rsc_0_2_i_s_raddr(twiddle_h_rsc_0_2_i_s_raddr),
      .twiddle_h_rsc_0_2_i_s_raddr_core_sct(twiddle_h_rsc_0_2_i_s_re_core_sct),
      .twiddle_h_rsc_0_2_i_s_din(twiddle_h_rsc_0_2_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_1_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_1_i (
  clk, rst, twiddle_h_rsc_0_1_s_tdone, twiddle_h_rsc_0_1_tr_write_done, twiddle_h_rsc_0_1_RREADY,
      twiddle_h_rsc_0_1_RVALID, twiddle_h_rsc_0_1_RUSER, twiddle_h_rsc_0_1_RLAST,
      twiddle_h_rsc_0_1_RRESP, twiddle_h_rsc_0_1_RDATA, twiddle_h_rsc_0_1_RID, twiddle_h_rsc_0_1_ARREADY,
      twiddle_h_rsc_0_1_ARVALID, twiddle_h_rsc_0_1_ARUSER, twiddle_h_rsc_0_1_ARREGION,
      twiddle_h_rsc_0_1_ARQOS, twiddle_h_rsc_0_1_ARPROT, twiddle_h_rsc_0_1_ARCACHE,
      twiddle_h_rsc_0_1_ARLOCK, twiddle_h_rsc_0_1_ARBURST, twiddle_h_rsc_0_1_ARSIZE,
      twiddle_h_rsc_0_1_ARLEN, twiddle_h_rsc_0_1_ARADDR, twiddle_h_rsc_0_1_ARID,
      twiddle_h_rsc_0_1_BREADY, twiddle_h_rsc_0_1_BVALID, twiddle_h_rsc_0_1_BUSER,
      twiddle_h_rsc_0_1_BRESP, twiddle_h_rsc_0_1_BID, twiddle_h_rsc_0_1_WREADY, twiddle_h_rsc_0_1_WVALID,
      twiddle_h_rsc_0_1_WUSER, twiddle_h_rsc_0_1_WLAST, twiddle_h_rsc_0_1_WSTRB,
      twiddle_h_rsc_0_1_WDATA, twiddle_h_rsc_0_1_AWREADY, twiddle_h_rsc_0_1_AWVALID,
      twiddle_h_rsc_0_1_AWUSER, twiddle_h_rsc_0_1_AWREGION, twiddle_h_rsc_0_1_AWQOS,
      twiddle_h_rsc_0_1_AWPROT, twiddle_h_rsc_0_1_AWCACHE, twiddle_h_rsc_0_1_AWLOCK,
      twiddle_h_rsc_0_1_AWBURST, twiddle_h_rsc_0_1_AWSIZE, twiddle_h_rsc_0_1_AWLEN,
      twiddle_h_rsc_0_1_AWADDR, twiddle_h_rsc_0_1_AWID, core_wen, twiddle_h_rsc_0_1_i_oswt,
      twiddle_h_rsc_0_1_i_wen_comp, twiddle_h_rsc_0_1_i_s_raddr_core, twiddle_h_rsc_0_1_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_1_s_tdone;
  input twiddle_h_rsc_0_1_tr_write_done;
  input twiddle_h_rsc_0_1_RREADY;
  output twiddle_h_rsc_0_1_RVALID;
  output twiddle_h_rsc_0_1_RUSER;
  output twiddle_h_rsc_0_1_RLAST;
  output [1:0] twiddle_h_rsc_0_1_RRESP;
  output [31:0] twiddle_h_rsc_0_1_RDATA;
  output twiddle_h_rsc_0_1_RID;
  output twiddle_h_rsc_0_1_ARREADY;
  input twiddle_h_rsc_0_1_ARVALID;
  input twiddle_h_rsc_0_1_ARUSER;
  input [3:0] twiddle_h_rsc_0_1_ARREGION;
  input [3:0] twiddle_h_rsc_0_1_ARQOS;
  input [2:0] twiddle_h_rsc_0_1_ARPROT;
  input [3:0] twiddle_h_rsc_0_1_ARCACHE;
  input twiddle_h_rsc_0_1_ARLOCK;
  input [1:0] twiddle_h_rsc_0_1_ARBURST;
  input [2:0] twiddle_h_rsc_0_1_ARSIZE;
  input [7:0] twiddle_h_rsc_0_1_ARLEN;
  input [11:0] twiddle_h_rsc_0_1_ARADDR;
  input twiddle_h_rsc_0_1_ARID;
  input twiddle_h_rsc_0_1_BREADY;
  output twiddle_h_rsc_0_1_BVALID;
  output twiddle_h_rsc_0_1_BUSER;
  output [1:0] twiddle_h_rsc_0_1_BRESP;
  output twiddle_h_rsc_0_1_BID;
  output twiddle_h_rsc_0_1_WREADY;
  input twiddle_h_rsc_0_1_WVALID;
  input twiddle_h_rsc_0_1_WUSER;
  input twiddle_h_rsc_0_1_WLAST;
  input [3:0] twiddle_h_rsc_0_1_WSTRB;
  input [31:0] twiddle_h_rsc_0_1_WDATA;
  output twiddle_h_rsc_0_1_AWREADY;
  input twiddle_h_rsc_0_1_AWVALID;
  input twiddle_h_rsc_0_1_AWUSER;
  input [3:0] twiddle_h_rsc_0_1_AWREGION;
  input [3:0] twiddle_h_rsc_0_1_AWQOS;
  input [2:0] twiddle_h_rsc_0_1_AWPROT;
  input [3:0] twiddle_h_rsc_0_1_AWCACHE;
  input twiddle_h_rsc_0_1_AWLOCK;
  input [1:0] twiddle_h_rsc_0_1_AWBURST;
  input [2:0] twiddle_h_rsc_0_1_AWSIZE;
  input [7:0] twiddle_h_rsc_0_1_AWLEN;
  input [11:0] twiddle_h_rsc_0_1_AWADDR;
  input twiddle_h_rsc_0_1_AWID;
  input core_wen;
  input twiddle_h_rsc_0_1_i_oswt;
  output twiddle_h_rsc_0_1_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_1_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_1_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_1_i_biwt;
  wire twiddle_h_rsc_0_1_i_bdwt;
  wire twiddle_h_rsc_0_1_i_bcwt;
  wire twiddle_h_rsc_0_1_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_1_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_1_i_s_din;
  wire twiddle_h_rsc_0_1_i_s_rrdy;
  wire twiddle_h_rsc_0_1_i_s_wrdy;
  wire twiddle_h_rsc_0_1_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp_inst_twiddle_h_rsc_0_1_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp_inst_twiddle_h_rsc_0_1_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_1_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_1_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_1_AWID),
      .AWADDR(twiddle_h_rsc_0_1_AWADDR),
      .AWLEN(twiddle_h_rsc_0_1_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_1_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_1_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_1_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_1_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_1_AWPROT),
      .AWQOS(twiddle_h_rsc_0_1_AWQOS),
      .AWREGION(twiddle_h_rsc_0_1_AWREGION),
      .AWUSER(twiddle_h_rsc_0_1_AWUSER),
      .AWVALID(twiddle_h_rsc_0_1_AWVALID),
      .AWREADY(twiddle_h_rsc_0_1_AWREADY),
      .WDATA(twiddle_h_rsc_0_1_WDATA),
      .WSTRB(twiddle_h_rsc_0_1_WSTRB),
      .WLAST(twiddle_h_rsc_0_1_WLAST),
      .WUSER(twiddle_h_rsc_0_1_WUSER),
      .WVALID(twiddle_h_rsc_0_1_WVALID),
      .WREADY(twiddle_h_rsc_0_1_WREADY),
      .BID(twiddle_h_rsc_0_1_BID),
      .BRESP(twiddle_h_rsc_0_1_BRESP),
      .BUSER(twiddle_h_rsc_0_1_BUSER),
      .BVALID(twiddle_h_rsc_0_1_BVALID),
      .BREADY(twiddle_h_rsc_0_1_BREADY),
      .ARID(twiddle_h_rsc_0_1_ARID),
      .ARADDR(twiddle_h_rsc_0_1_ARADDR),
      .ARLEN(twiddle_h_rsc_0_1_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_1_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_1_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_1_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_1_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_1_ARPROT),
      .ARQOS(twiddle_h_rsc_0_1_ARQOS),
      .ARREGION(twiddle_h_rsc_0_1_ARREGION),
      .ARUSER(twiddle_h_rsc_0_1_ARUSER),
      .ARVALID(twiddle_h_rsc_0_1_ARVALID),
      .ARREADY(twiddle_h_rsc_0_1_ARREADY),
      .RID(twiddle_h_rsc_0_1_RID),
      .RDATA(twiddle_h_rsc_0_1_RDATA),
      .RRESP(twiddle_h_rsc_0_1_RRESP),
      .RLAST(twiddle_h_rsc_0_1_RLAST),
      .RUSER(twiddle_h_rsc_0_1_RUSER),
      .RVALID(twiddle_h_rsc_0_1_RVALID),
      .RREADY(twiddle_h_rsc_0_1_RREADY),
      .s_re(twiddle_h_rsc_0_1_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_1_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_1_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_1_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_1_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_1_is_idle),
      .tr_write_done(twiddle_h_rsc_0_1_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_1_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_1_i_oswt(twiddle_h_rsc_0_1_i_oswt),
      .twiddle_h_rsc_0_1_i_biwt(twiddle_h_rsc_0_1_i_biwt),
      .twiddle_h_rsc_0_1_i_bdwt(twiddle_h_rsc_0_1_i_bdwt),
      .twiddle_h_rsc_0_1_i_bcwt(twiddle_h_rsc_0_1_i_bcwt),
      .twiddle_h_rsc_0_1_i_s_re_core_sct(twiddle_h_rsc_0_1_i_s_re_core_sct),
      .twiddle_h_rsc_0_1_i_s_rrdy(twiddle_h_rsc_0_1_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_1_i_oswt(twiddle_h_rsc_0_1_i_oswt),
      .twiddle_h_rsc_0_1_i_wen_comp(twiddle_h_rsc_0_1_i_wen_comp),
      .twiddle_h_rsc_0_1_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_1_i_twiddle_h_rsc_0_1_wait_dp_inst_twiddle_h_rsc_0_1_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_1_i_s_din_mxwt(twiddle_h_rsc_0_1_i_s_din_mxwt),
      .twiddle_h_rsc_0_1_i_biwt(twiddle_h_rsc_0_1_i_biwt),
      .twiddle_h_rsc_0_1_i_bdwt(twiddle_h_rsc_0_1_i_bdwt),
      .twiddle_h_rsc_0_1_i_bcwt(twiddle_h_rsc_0_1_i_bcwt),
      .twiddle_h_rsc_0_1_i_s_raddr(twiddle_h_rsc_0_1_i_s_raddr),
      .twiddle_h_rsc_0_1_i_s_raddr_core_sct(twiddle_h_rsc_0_1_i_s_re_core_sct),
      .twiddle_h_rsc_0_1_i_s_din(twiddle_h_rsc_0_1_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_h_rsc_0_0_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_h_rsc_0_0_i (
  clk, rst, twiddle_h_rsc_0_0_s_tdone, twiddle_h_rsc_0_0_tr_write_done, twiddle_h_rsc_0_0_RREADY,
      twiddle_h_rsc_0_0_RVALID, twiddle_h_rsc_0_0_RUSER, twiddle_h_rsc_0_0_RLAST,
      twiddle_h_rsc_0_0_RRESP, twiddle_h_rsc_0_0_RDATA, twiddle_h_rsc_0_0_RID, twiddle_h_rsc_0_0_ARREADY,
      twiddle_h_rsc_0_0_ARVALID, twiddle_h_rsc_0_0_ARUSER, twiddle_h_rsc_0_0_ARREGION,
      twiddle_h_rsc_0_0_ARQOS, twiddle_h_rsc_0_0_ARPROT, twiddle_h_rsc_0_0_ARCACHE,
      twiddle_h_rsc_0_0_ARLOCK, twiddle_h_rsc_0_0_ARBURST, twiddle_h_rsc_0_0_ARSIZE,
      twiddle_h_rsc_0_0_ARLEN, twiddle_h_rsc_0_0_ARADDR, twiddle_h_rsc_0_0_ARID,
      twiddle_h_rsc_0_0_BREADY, twiddle_h_rsc_0_0_BVALID, twiddle_h_rsc_0_0_BUSER,
      twiddle_h_rsc_0_0_BRESP, twiddle_h_rsc_0_0_BID, twiddle_h_rsc_0_0_WREADY, twiddle_h_rsc_0_0_WVALID,
      twiddle_h_rsc_0_0_WUSER, twiddle_h_rsc_0_0_WLAST, twiddle_h_rsc_0_0_WSTRB,
      twiddle_h_rsc_0_0_WDATA, twiddle_h_rsc_0_0_AWREADY, twiddle_h_rsc_0_0_AWVALID,
      twiddle_h_rsc_0_0_AWUSER, twiddle_h_rsc_0_0_AWREGION, twiddle_h_rsc_0_0_AWQOS,
      twiddle_h_rsc_0_0_AWPROT, twiddle_h_rsc_0_0_AWCACHE, twiddle_h_rsc_0_0_AWLOCK,
      twiddle_h_rsc_0_0_AWBURST, twiddle_h_rsc_0_0_AWSIZE, twiddle_h_rsc_0_0_AWLEN,
      twiddle_h_rsc_0_0_AWADDR, twiddle_h_rsc_0_0_AWID, core_wen, twiddle_h_rsc_0_0_i_oswt,
      twiddle_h_rsc_0_0_i_wen_comp, twiddle_h_rsc_0_0_i_s_raddr_core, twiddle_h_rsc_0_0_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_0_0_s_tdone;
  input twiddle_h_rsc_0_0_tr_write_done;
  input twiddle_h_rsc_0_0_RREADY;
  output twiddle_h_rsc_0_0_RVALID;
  output twiddle_h_rsc_0_0_RUSER;
  output twiddle_h_rsc_0_0_RLAST;
  output [1:0] twiddle_h_rsc_0_0_RRESP;
  output [31:0] twiddle_h_rsc_0_0_RDATA;
  output twiddle_h_rsc_0_0_RID;
  output twiddle_h_rsc_0_0_ARREADY;
  input twiddle_h_rsc_0_0_ARVALID;
  input twiddle_h_rsc_0_0_ARUSER;
  input [3:0] twiddle_h_rsc_0_0_ARREGION;
  input [3:0] twiddle_h_rsc_0_0_ARQOS;
  input [2:0] twiddle_h_rsc_0_0_ARPROT;
  input [3:0] twiddle_h_rsc_0_0_ARCACHE;
  input twiddle_h_rsc_0_0_ARLOCK;
  input [1:0] twiddle_h_rsc_0_0_ARBURST;
  input [2:0] twiddle_h_rsc_0_0_ARSIZE;
  input [7:0] twiddle_h_rsc_0_0_ARLEN;
  input [11:0] twiddle_h_rsc_0_0_ARADDR;
  input twiddle_h_rsc_0_0_ARID;
  input twiddle_h_rsc_0_0_BREADY;
  output twiddle_h_rsc_0_0_BVALID;
  output twiddle_h_rsc_0_0_BUSER;
  output [1:0] twiddle_h_rsc_0_0_BRESP;
  output twiddle_h_rsc_0_0_BID;
  output twiddle_h_rsc_0_0_WREADY;
  input twiddle_h_rsc_0_0_WVALID;
  input twiddle_h_rsc_0_0_WUSER;
  input twiddle_h_rsc_0_0_WLAST;
  input [3:0] twiddle_h_rsc_0_0_WSTRB;
  input [31:0] twiddle_h_rsc_0_0_WDATA;
  output twiddle_h_rsc_0_0_AWREADY;
  input twiddle_h_rsc_0_0_AWVALID;
  input twiddle_h_rsc_0_0_AWUSER;
  input [3:0] twiddle_h_rsc_0_0_AWREGION;
  input [3:0] twiddle_h_rsc_0_0_AWQOS;
  input [2:0] twiddle_h_rsc_0_0_AWPROT;
  input [3:0] twiddle_h_rsc_0_0_AWCACHE;
  input twiddle_h_rsc_0_0_AWLOCK;
  input [1:0] twiddle_h_rsc_0_0_AWBURST;
  input [2:0] twiddle_h_rsc_0_0_AWSIZE;
  input [7:0] twiddle_h_rsc_0_0_AWLEN;
  input [11:0] twiddle_h_rsc_0_0_AWADDR;
  input twiddle_h_rsc_0_0_AWID;
  input core_wen;
  input twiddle_h_rsc_0_0_i_oswt;
  output twiddle_h_rsc_0_0_i_wen_comp;
  input [5:0] twiddle_h_rsc_0_0_i_s_raddr_core;
  output [31:0] twiddle_h_rsc_0_0_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsc_0_0_i_biwt;
  wire twiddle_h_rsc_0_0_i_bdwt;
  wire twiddle_h_rsc_0_0_i_bcwt;
  wire twiddle_h_rsc_0_0_i_s_re_core_sct;
  wire [5:0] twiddle_h_rsc_0_0_i_s_raddr;
  wire [31:0] twiddle_h_rsc_0_0_i_s_din;
  wire twiddle_h_rsc_0_0_i_s_rrdy;
  wire twiddle_h_rsc_0_0_i_s_wrdy;
  wire twiddle_h_rsc_0_0_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp_inst_twiddle_h_rsc_0_0_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp_inst_twiddle_h_rsc_0_0_i_s_raddr_core
      = {1'b0 , (twiddle_h_rsc_0_0_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsc_0_0_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_0_0_AWID),
      .AWADDR(twiddle_h_rsc_0_0_AWADDR),
      .AWLEN(twiddle_h_rsc_0_0_AWLEN),
      .AWSIZE(twiddle_h_rsc_0_0_AWSIZE),
      .AWBURST(twiddle_h_rsc_0_0_AWBURST),
      .AWLOCK(twiddle_h_rsc_0_0_AWLOCK),
      .AWCACHE(twiddle_h_rsc_0_0_AWCACHE),
      .AWPROT(twiddle_h_rsc_0_0_AWPROT),
      .AWQOS(twiddle_h_rsc_0_0_AWQOS),
      .AWREGION(twiddle_h_rsc_0_0_AWREGION),
      .AWUSER(twiddle_h_rsc_0_0_AWUSER),
      .AWVALID(twiddle_h_rsc_0_0_AWVALID),
      .AWREADY(twiddle_h_rsc_0_0_AWREADY),
      .WDATA(twiddle_h_rsc_0_0_WDATA),
      .WSTRB(twiddle_h_rsc_0_0_WSTRB),
      .WLAST(twiddle_h_rsc_0_0_WLAST),
      .WUSER(twiddle_h_rsc_0_0_WUSER),
      .WVALID(twiddle_h_rsc_0_0_WVALID),
      .WREADY(twiddle_h_rsc_0_0_WREADY),
      .BID(twiddle_h_rsc_0_0_BID),
      .BRESP(twiddle_h_rsc_0_0_BRESP),
      .BUSER(twiddle_h_rsc_0_0_BUSER),
      .BVALID(twiddle_h_rsc_0_0_BVALID),
      .BREADY(twiddle_h_rsc_0_0_BREADY),
      .ARID(twiddle_h_rsc_0_0_ARID),
      .ARADDR(twiddle_h_rsc_0_0_ARADDR),
      .ARLEN(twiddle_h_rsc_0_0_ARLEN),
      .ARSIZE(twiddle_h_rsc_0_0_ARSIZE),
      .ARBURST(twiddle_h_rsc_0_0_ARBURST),
      .ARLOCK(twiddle_h_rsc_0_0_ARLOCK),
      .ARCACHE(twiddle_h_rsc_0_0_ARCACHE),
      .ARPROT(twiddle_h_rsc_0_0_ARPROT),
      .ARQOS(twiddle_h_rsc_0_0_ARQOS),
      .ARREGION(twiddle_h_rsc_0_0_ARREGION),
      .ARUSER(twiddle_h_rsc_0_0_ARUSER),
      .ARVALID(twiddle_h_rsc_0_0_ARVALID),
      .ARREADY(twiddle_h_rsc_0_0_ARREADY),
      .RID(twiddle_h_rsc_0_0_RID),
      .RDATA(twiddle_h_rsc_0_0_RDATA),
      .RRESP(twiddle_h_rsc_0_0_RRESP),
      .RLAST(twiddle_h_rsc_0_0_RLAST),
      .RUSER(twiddle_h_rsc_0_0_RUSER),
      .RVALID(twiddle_h_rsc_0_0_RVALID),
      .RREADY(twiddle_h_rsc_0_0_RREADY),
      .s_re(twiddle_h_rsc_0_0_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsc_0_0_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_h_rsc_0_0_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsc_0_0_i_s_rrdy),
      .s_wrdy(twiddle_h_rsc_0_0_i_s_wrdy),
      .is_idle(twiddle_h_rsc_0_0_is_idle),
      .tr_write_done(twiddle_h_rsc_0_0_tr_write_done),
      .s_tdone(twiddle_h_rsc_0_0_s_tdone)
    );
  peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_ctrl peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsc_0_0_i_oswt(twiddle_h_rsc_0_0_i_oswt),
      .twiddle_h_rsc_0_0_i_biwt(twiddle_h_rsc_0_0_i_biwt),
      .twiddle_h_rsc_0_0_i_bdwt(twiddle_h_rsc_0_0_i_bdwt),
      .twiddle_h_rsc_0_0_i_bcwt(twiddle_h_rsc_0_0_i_bcwt),
      .twiddle_h_rsc_0_0_i_s_re_core_sct(twiddle_h_rsc_0_0_i_s_re_core_sct),
      .twiddle_h_rsc_0_0_i_s_rrdy(twiddle_h_rsc_0_0_i_s_rrdy)
    );
  peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_0_i_oswt(twiddle_h_rsc_0_0_i_oswt),
      .twiddle_h_rsc_0_0_i_wen_comp(twiddle_h_rsc_0_0_i_wen_comp),
      .twiddle_h_rsc_0_0_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_0_i_twiddle_h_rsc_0_0_wait_dp_inst_twiddle_h_rsc_0_0_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_0_i_s_din_mxwt(twiddle_h_rsc_0_0_i_s_din_mxwt),
      .twiddle_h_rsc_0_0_i_biwt(twiddle_h_rsc_0_0_i_biwt),
      .twiddle_h_rsc_0_0_i_bdwt(twiddle_h_rsc_0_0_i_bdwt),
      .twiddle_h_rsc_0_0_i_bcwt(twiddle_h_rsc_0_0_i_bcwt),
      .twiddle_h_rsc_0_0_i_s_raddr(twiddle_h_rsc_0_0_i_s_raddr),
      .twiddle_h_rsc_0_0_i_s_raddr_core_sct(twiddle_h_rsc_0_0_i_s_re_core_sct),
      .twiddle_h_rsc_0_0_i_s_din(twiddle_h_rsc_0_0_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_15_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_15_i (
  clk, rst, twiddle_rsc_0_15_s_tdone, twiddle_rsc_0_15_tr_write_done, twiddle_rsc_0_15_RREADY,
      twiddle_rsc_0_15_RVALID, twiddle_rsc_0_15_RUSER, twiddle_rsc_0_15_RLAST, twiddle_rsc_0_15_RRESP,
      twiddle_rsc_0_15_RDATA, twiddle_rsc_0_15_RID, twiddle_rsc_0_15_ARREADY, twiddle_rsc_0_15_ARVALID,
      twiddle_rsc_0_15_ARUSER, twiddle_rsc_0_15_ARREGION, twiddle_rsc_0_15_ARQOS,
      twiddle_rsc_0_15_ARPROT, twiddle_rsc_0_15_ARCACHE, twiddle_rsc_0_15_ARLOCK,
      twiddle_rsc_0_15_ARBURST, twiddle_rsc_0_15_ARSIZE, twiddle_rsc_0_15_ARLEN,
      twiddle_rsc_0_15_ARADDR, twiddle_rsc_0_15_ARID, twiddle_rsc_0_15_BREADY, twiddle_rsc_0_15_BVALID,
      twiddle_rsc_0_15_BUSER, twiddle_rsc_0_15_BRESP, twiddle_rsc_0_15_BID, twiddle_rsc_0_15_WREADY,
      twiddle_rsc_0_15_WVALID, twiddle_rsc_0_15_WUSER, twiddle_rsc_0_15_WLAST, twiddle_rsc_0_15_WSTRB,
      twiddle_rsc_0_15_WDATA, twiddle_rsc_0_15_AWREADY, twiddle_rsc_0_15_AWVALID,
      twiddle_rsc_0_15_AWUSER, twiddle_rsc_0_15_AWREGION, twiddle_rsc_0_15_AWQOS,
      twiddle_rsc_0_15_AWPROT, twiddle_rsc_0_15_AWCACHE, twiddle_rsc_0_15_AWLOCK,
      twiddle_rsc_0_15_AWBURST, twiddle_rsc_0_15_AWSIZE, twiddle_rsc_0_15_AWLEN,
      twiddle_rsc_0_15_AWADDR, twiddle_rsc_0_15_AWID, core_wen, twiddle_rsc_0_15_i_oswt,
      twiddle_rsc_0_15_i_wen_comp, twiddle_rsc_0_15_i_s_raddr_core, twiddle_rsc_0_15_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_15_s_tdone;
  input twiddle_rsc_0_15_tr_write_done;
  input twiddle_rsc_0_15_RREADY;
  output twiddle_rsc_0_15_RVALID;
  output twiddle_rsc_0_15_RUSER;
  output twiddle_rsc_0_15_RLAST;
  output [1:0] twiddle_rsc_0_15_RRESP;
  output [31:0] twiddle_rsc_0_15_RDATA;
  output twiddle_rsc_0_15_RID;
  output twiddle_rsc_0_15_ARREADY;
  input twiddle_rsc_0_15_ARVALID;
  input twiddle_rsc_0_15_ARUSER;
  input [3:0] twiddle_rsc_0_15_ARREGION;
  input [3:0] twiddle_rsc_0_15_ARQOS;
  input [2:0] twiddle_rsc_0_15_ARPROT;
  input [3:0] twiddle_rsc_0_15_ARCACHE;
  input twiddle_rsc_0_15_ARLOCK;
  input [1:0] twiddle_rsc_0_15_ARBURST;
  input [2:0] twiddle_rsc_0_15_ARSIZE;
  input [7:0] twiddle_rsc_0_15_ARLEN;
  input [11:0] twiddle_rsc_0_15_ARADDR;
  input twiddle_rsc_0_15_ARID;
  input twiddle_rsc_0_15_BREADY;
  output twiddle_rsc_0_15_BVALID;
  output twiddle_rsc_0_15_BUSER;
  output [1:0] twiddle_rsc_0_15_BRESP;
  output twiddle_rsc_0_15_BID;
  output twiddle_rsc_0_15_WREADY;
  input twiddle_rsc_0_15_WVALID;
  input twiddle_rsc_0_15_WUSER;
  input twiddle_rsc_0_15_WLAST;
  input [3:0] twiddle_rsc_0_15_WSTRB;
  input [31:0] twiddle_rsc_0_15_WDATA;
  output twiddle_rsc_0_15_AWREADY;
  input twiddle_rsc_0_15_AWVALID;
  input twiddle_rsc_0_15_AWUSER;
  input [3:0] twiddle_rsc_0_15_AWREGION;
  input [3:0] twiddle_rsc_0_15_AWQOS;
  input [2:0] twiddle_rsc_0_15_AWPROT;
  input [3:0] twiddle_rsc_0_15_AWCACHE;
  input twiddle_rsc_0_15_AWLOCK;
  input [1:0] twiddle_rsc_0_15_AWBURST;
  input [2:0] twiddle_rsc_0_15_AWSIZE;
  input [7:0] twiddle_rsc_0_15_AWLEN;
  input [11:0] twiddle_rsc_0_15_AWADDR;
  input twiddle_rsc_0_15_AWID;
  input core_wen;
  input twiddle_rsc_0_15_i_oswt;
  output twiddle_rsc_0_15_i_wen_comp;
  input [5:0] twiddle_rsc_0_15_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_15_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_15_i_biwt;
  wire twiddle_rsc_0_15_i_bdwt;
  wire twiddle_rsc_0_15_i_bcwt;
  wire twiddle_rsc_0_15_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_15_i_s_raddr;
  wire [31:0] twiddle_rsc_0_15_i_s_din;
  wire twiddle_rsc_0_15_i_s_rrdy;
  wire twiddle_rsc_0_15_i_s_wrdy;
  wire twiddle_rsc_0_15_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp_inst_twiddle_rsc_0_15_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp_inst_twiddle_rsc_0_15_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_15_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_15_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_15_AWID),
      .AWADDR(twiddle_rsc_0_15_AWADDR),
      .AWLEN(twiddle_rsc_0_15_AWLEN),
      .AWSIZE(twiddle_rsc_0_15_AWSIZE),
      .AWBURST(twiddle_rsc_0_15_AWBURST),
      .AWLOCK(twiddle_rsc_0_15_AWLOCK),
      .AWCACHE(twiddle_rsc_0_15_AWCACHE),
      .AWPROT(twiddle_rsc_0_15_AWPROT),
      .AWQOS(twiddle_rsc_0_15_AWQOS),
      .AWREGION(twiddle_rsc_0_15_AWREGION),
      .AWUSER(twiddle_rsc_0_15_AWUSER),
      .AWVALID(twiddle_rsc_0_15_AWVALID),
      .AWREADY(twiddle_rsc_0_15_AWREADY),
      .WDATA(twiddle_rsc_0_15_WDATA),
      .WSTRB(twiddle_rsc_0_15_WSTRB),
      .WLAST(twiddle_rsc_0_15_WLAST),
      .WUSER(twiddle_rsc_0_15_WUSER),
      .WVALID(twiddle_rsc_0_15_WVALID),
      .WREADY(twiddle_rsc_0_15_WREADY),
      .BID(twiddle_rsc_0_15_BID),
      .BRESP(twiddle_rsc_0_15_BRESP),
      .BUSER(twiddle_rsc_0_15_BUSER),
      .BVALID(twiddle_rsc_0_15_BVALID),
      .BREADY(twiddle_rsc_0_15_BREADY),
      .ARID(twiddle_rsc_0_15_ARID),
      .ARADDR(twiddle_rsc_0_15_ARADDR),
      .ARLEN(twiddle_rsc_0_15_ARLEN),
      .ARSIZE(twiddle_rsc_0_15_ARSIZE),
      .ARBURST(twiddle_rsc_0_15_ARBURST),
      .ARLOCK(twiddle_rsc_0_15_ARLOCK),
      .ARCACHE(twiddle_rsc_0_15_ARCACHE),
      .ARPROT(twiddle_rsc_0_15_ARPROT),
      .ARQOS(twiddle_rsc_0_15_ARQOS),
      .ARREGION(twiddle_rsc_0_15_ARREGION),
      .ARUSER(twiddle_rsc_0_15_ARUSER),
      .ARVALID(twiddle_rsc_0_15_ARVALID),
      .ARREADY(twiddle_rsc_0_15_ARREADY),
      .RID(twiddle_rsc_0_15_RID),
      .RDATA(twiddle_rsc_0_15_RDATA),
      .RRESP(twiddle_rsc_0_15_RRESP),
      .RLAST(twiddle_rsc_0_15_RLAST),
      .RUSER(twiddle_rsc_0_15_RUSER),
      .RVALID(twiddle_rsc_0_15_RVALID),
      .RREADY(twiddle_rsc_0_15_RREADY),
      .s_re(twiddle_rsc_0_15_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_15_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_15_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_15_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_15_i_s_wrdy),
      .is_idle(twiddle_rsc_0_15_is_idle),
      .tr_write_done(twiddle_rsc_0_15_tr_write_done),
      .s_tdone(twiddle_rsc_0_15_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_ctrl peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_15_i_oswt(twiddle_rsc_0_15_i_oswt),
      .twiddle_rsc_0_15_i_biwt(twiddle_rsc_0_15_i_biwt),
      .twiddle_rsc_0_15_i_bdwt(twiddle_rsc_0_15_i_bdwt),
      .twiddle_rsc_0_15_i_bcwt(twiddle_rsc_0_15_i_bcwt),
      .twiddle_rsc_0_15_i_s_re_core_sct(twiddle_rsc_0_15_i_s_re_core_sct),
      .twiddle_rsc_0_15_i_s_rrdy(twiddle_rsc_0_15_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_15_i_oswt(twiddle_rsc_0_15_i_oswt),
      .twiddle_rsc_0_15_i_wen_comp(twiddle_rsc_0_15_i_wen_comp),
      .twiddle_rsc_0_15_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_15_i_twiddle_rsc_0_15_wait_dp_inst_twiddle_rsc_0_15_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_15_i_s_din_mxwt(twiddle_rsc_0_15_i_s_din_mxwt),
      .twiddle_rsc_0_15_i_biwt(twiddle_rsc_0_15_i_biwt),
      .twiddle_rsc_0_15_i_bdwt(twiddle_rsc_0_15_i_bdwt),
      .twiddle_rsc_0_15_i_bcwt(twiddle_rsc_0_15_i_bcwt),
      .twiddle_rsc_0_15_i_s_raddr(twiddle_rsc_0_15_i_s_raddr),
      .twiddle_rsc_0_15_i_s_raddr_core_sct(twiddle_rsc_0_15_i_s_re_core_sct),
      .twiddle_rsc_0_15_i_s_din(twiddle_rsc_0_15_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_14_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_14_i (
  clk, rst, twiddle_rsc_0_14_s_tdone, twiddle_rsc_0_14_tr_write_done, twiddle_rsc_0_14_RREADY,
      twiddle_rsc_0_14_RVALID, twiddle_rsc_0_14_RUSER, twiddle_rsc_0_14_RLAST, twiddle_rsc_0_14_RRESP,
      twiddle_rsc_0_14_RDATA, twiddle_rsc_0_14_RID, twiddle_rsc_0_14_ARREADY, twiddle_rsc_0_14_ARVALID,
      twiddle_rsc_0_14_ARUSER, twiddle_rsc_0_14_ARREGION, twiddle_rsc_0_14_ARQOS,
      twiddle_rsc_0_14_ARPROT, twiddle_rsc_0_14_ARCACHE, twiddle_rsc_0_14_ARLOCK,
      twiddle_rsc_0_14_ARBURST, twiddle_rsc_0_14_ARSIZE, twiddle_rsc_0_14_ARLEN,
      twiddle_rsc_0_14_ARADDR, twiddle_rsc_0_14_ARID, twiddle_rsc_0_14_BREADY, twiddle_rsc_0_14_BVALID,
      twiddle_rsc_0_14_BUSER, twiddle_rsc_0_14_BRESP, twiddle_rsc_0_14_BID, twiddle_rsc_0_14_WREADY,
      twiddle_rsc_0_14_WVALID, twiddle_rsc_0_14_WUSER, twiddle_rsc_0_14_WLAST, twiddle_rsc_0_14_WSTRB,
      twiddle_rsc_0_14_WDATA, twiddle_rsc_0_14_AWREADY, twiddle_rsc_0_14_AWVALID,
      twiddle_rsc_0_14_AWUSER, twiddle_rsc_0_14_AWREGION, twiddle_rsc_0_14_AWQOS,
      twiddle_rsc_0_14_AWPROT, twiddle_rsc_0_14_AWCACHE, twiddle_rsc_0_14_AWLOCK,
      twiddle_rsc_0_14_AWBURST, twiddle_rsc_0_14_AWSIZE, twiddle_rsc_0_14_AWLEN,
      twiddle_rsc_0_14_AWADDR, twiddle_rsc_0_14_AWID, core_wen, twiddle_rsc_0_14_i_oswt,
      twiddle_rsc_0_14_i_wen_comp, twiddle_rsc_0_14_i_s_raddr_core, twiddle_rsc_0_14_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_14_s_tdone;
  input twiddle_rsc_0_14_tr_write_done;
  input twiddle_rsc_0_14_RREADY;
  output twiddle_rsc_0_14_RVALID;
  output twiddle_rsc_0_14_RUSER;
  output twiddle_rsc_0_14_RLAST;
  output [1:0] twiddle_rsc_0_14_RRESP;
  output [31:0] twiddle_rsc_0_14_RDATA;
  output twiddle_rsc_0_14_RID;
  output twiddle_rsc_0_14_ARREADY;
  input twiddle_rsc_0_14_ARVALID;
  input twiddle_rsc_0_14_ARUSER;
  input [3:0] twiddle_rsc_0_14_ARREGION;
  input [3:0] twiddle_rsc_0_14_ARQOS;
  input [2:0] twiddle_rsc_0_14_ARPROT;
  input [3:0] twiddle_rsc_0_14_ARCACHE;
  input twiddle_rsc_0_14_ARLOCK;
  input [1:0] twiddle_rsc_0_14_ARBURST;
  input [2:0] twiddle_rsc_0_14_ARSIZE;
  input [7:0] twiddle_rsc_0_14_ARLEN;
  input [11:0] twiddle_rsc_0_14_ARADDR;
  input twiddle_rsc_0_14_ARID;
  input twiddle_rsc_0_14_BREADY;
  output twiddle_rsc_0_14_BVALID;
  output twiddle_rsc_0_14_BUSER;
  output [1:0] twiddle_rsc_0_14_BRESP;
  output twiddle_rsc_0_14_BID;
  output twiddle_rsc_0_14_WREADY;
  input twiddle_rsc_0_14_WVALID;
  input twiddle_rsc_0_14_WUSER;
  input twiddle_rsc_0_14_WLAST;
  input [3:0] twiddle_rsc_0_14_WSTRB;
  input [31:0] twiddle_rsc_0_14_WDATA;
  output twiddle_rsc_0_14_AWREADY;
  input twiddle_rsc_0_14_AWVALID;
  input twiddle_rsc_0_14_AWUSER;
  input [3:0] twiddle_rsc_0_14_AWREGION;
  input [3:0] twiddle_rsc_0_14_AWQOS;
  input [2:0] twiddle_rsc_0_14_AWPROT;
  input [3:0] twiddle_rsc_0_14_AWCACHE;
  input twiddle_rsc_0_14_AWLOCK;
  input [1:0] twiddle_rsc_0_14_AWBURST;
  input [2:0] twiddle_rsc_0_14_AWSIZE;
  input [7:0] twiddle_rsc_0_14_AWLEN;
  input [11:0] twiddle_rsc_0_14_AWADDR;
  input twiddle_rsc_0_14_AWID;
  input core_wen;
  input twiddle_rsc_0_14_i_oswt;
  output twiddle_rsc_0_14_i_wen_comp;
  input [5:0] twiddle_rsc_0_14_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_14_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_14_i_biwt;
  wire twiddle_rsc_0_14_i_bdwt;
  wire twiddle_rsc_0_14_i_bcwt;
  wire twiddle_rsc_0_14_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_14_i_s_raddr;
  wire [31:0] twiddle_rsc_0_14_i_s_din;
  wire twiddle_rsc_0_14_i_s_rrdy;
  wire twiddle_rsc_0_14_i_s_wrdy;
  wire twiddle_rsc_0_14_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp_inst_twiddle_rsc_0_14_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp_inst_twiddle_rsc_0_14_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_14_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_14_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_14_AWID),
      .AWADDR(twiddle_rsc_0_14_AWADDR),
      .AWLEN(twiddle_rsc_0_14_AWLEN),
      .AWSIZE(twiddle_rsc_0_14_AWSIZE),
      .AWBURST(twiddle_rsc_0_14_AWBURST),
      .AWLOCK(twiddle_rsc_0_14_AWLOCK),
      .AWCACHE(twiddle_rsc_0_14_AWCACHE),
      .AWPROT(twiddle_rsc_0_14_AWPROT),
      .AWQOS(twiddle_rsc_0_14_AWQOS),
      .AWREGION(twiddle_rsc_0_14_AWREGION),
      .AWUSER(twiddle_rsc_0_14_AWUSER),
      .AWVALID(twiddle_rsc_0_14_AWVALID),
      .AWREADY(twiddle_rsc_0_14_AWREADY),
      .WDATA(twiddle_rsc_0_14_WDATA),
      .WSTRB(twiddle_rsc_0_14_WSTRB),
      .WLAST(twiddle_rsc_0_14_WLAST),
      .WUSER(twiddle_rsc_0_14_WUSER),
      .WVALID(twiddle_rsc_0_14_WVALID),
      .WREADY(twiddle_rsc_0_14_WREADY),
      .BID(twiddle_rsc_0_14_BID),
      .BRESP(twiddle_rsc_0_14_BRESP),
      .BUSER(twiddle_rsc_0_14_BUSER),
      .BVALID(twiddle_rsc_0_14_BVALID),
      .BREADY(twiddle_rsc_0_14_BREADY),
      .ARID(twiddle_rsc_0_14_ARID),
      .ARADDR(twiddle_rsc_0_14_ARADDR),
      .ARLEN(twiddle_rsc_0_14_ARLEN),
      .ARSIZE(twiddle_rsc_0_14_ARSIZE),
      .ARBURST(twiddle_rsc_0_14_ARBURST),
      .ARLOCK(twiddle_rsc_0_14_ARLOCK),
      .ARCACHE(twiddle_rsc_0_14_ARCACHE),
      .ARPROT(twiddle_rsc_0_14_ARPROT),
      .ARQOS(twiddle_rsc_0_14_ARQOS),
      .ARREGION(twiddle_rsc_0_14_ARREGION),
      .ARUSER(twiddle_rsc_0_14_ARUSER),
      .ARVALID(twiddle_rsc_0_14_ARVALID),
      .ARREADY(twiddle_rsc_0_14_ARREADY),
      .RID(twiddle_rsc_0_14_RID),
      .RDATA(twiddle_rsc_0_14_RDATA),
      .RRESP(twiddle_rsc_0_14_RRESP),
      .RLAST(twiddle_rsc_0_14_RLAST),
      .RUSER(twiddle_rsc_0_14_RUSER),
      .RVALID(twiddle_rsc_0_14_RVALID),
      .RREADY(twiddle_rsc_0_14_RREADY),
      .s_re(twiddle_rsc_0_14_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_14_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_14_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_14_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_14_i_s_wrdy),
      .is_idle(twiddle_rsc_0_14_is_idle),
      .tr_write_done(twiddle_rsc_0_14_tr_write_done),
      .s_tdone(twiddle_rsc_0_14_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_ctrl peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_14_i_oswt(twiddle_rsc_0_14_i_oswt),
      .twiddle_rsc_0_14_i_biwt(twiddle_rsc_0_14_i_biwt),
      .twiddle_rsc_0_14_i_bdwt(twiddle_rsc_0_14_i_bdwt),
      .twiddle_rsc_0_14_i_bcwt(twiddle_rsc_0_14_i_bcwt),
      .twiddle_rsc_0_14_i_s_re_core_sct(twiddle_rsc_0_14_i_s_re_core_sct),
      .twiddle_rsc_0_14_i_s_rrdy(twiddle_rsc_0_14_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_14_i_oswt(twiddle_rsc_0_14_i_oswt),
      .twiddle_rsc_0_14_i_wen_comp(twiddle_rsc_0_14_i_wen_comp),
      .twiddle_rsc_0_14_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_14_i_twiddle_rsc_0_14_wait_dp_inst_twiddle_rsc_0_14_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_14_i_s_din_mxwt(twiddle_rsc_0_14_i_s_din_mxwt),
      .twiddle_rsc_0_14_i_biwt(twiddle_rsc_0_14_i_biwt),
      .twiddle_rsc_0_14_i_bdwt(twiddle_rsc_0_14_i_bdwt),
      .twiddle_rsc_0_14_i_bcwt(twiddle_rsc_0_14_i_bcwt),
      .twiddle_rsc_0_14_i_s_raddr(twiddle_rsc_0_14_i_s_raddr),
      .twiddle_rsc_0_14_i_s_raddr_core_sct(twiddle_rsc_0_14_i_s_re_core_sct),
      .twiddle_rsc_0_14_i_s_din(twiddle_rsc_0_14_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_13_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_13_i (
  clk, rst, twiddle_rsc_0_13_s_tdone, twiddle_rsc_0_13_tr_write_done, twiddle_rsc_0_13_RREADY,
      twiddle_rsc_0_13_RVALID, twiddle_rsc_0_13_RUSER, twiddle_rsc_0_13_RLAST, twiddle_rsc_0_13_RRESP,
      twiddle_rsc_0_13_RDATA, twiddle_rsc_0_13_RID, twiddle_rsc_0_13_ARREADY, twiddle_rsc_0_13_ARVALID,
      twiddle_rsc_0_13_ARUSER, twiddle_rsc_0_13_ARREGION, twiddle_rsc_0_13_ARQOS,
      twiddle_rsc_0_13_ARPROT, twiddle_rsc_0_13_ARCACHE, twiddle_rsc_0_13_ARLOCK,
      twiddle_rsc_0_13_ARBURST, twiddle_rsc_0_13_ARSIZE, twiddle_rsc_0_13_ARLEN,
      twiddle_rsc_0_13_ARADDR, twiddle_rsc_0_13_ARID, twiddle_rsc_0_13_BREADY, twiddle_rsc_0_13_BVALID,
      twiddle_rsc_0_13_BUSER, twiddle_rsc_0_13_BRESP, twiddle_rsc_0_13_BID, twiddle_rsc_0_13_WREADY,
      twiddle_rsc_0_13_WVALID, twiddle_rsc_0_13_WUSER, twiddle_rsc_0_13_WLAST, twiddle_rsc_0_13_WSTRB,
      twiddle_rsc_0_13_WDATA, twiddle_rsc_0_13_AWREADY, twiddle_rsc_0_13_AWVALID,
      twiddle_rsc_0_13_AWUSER, twiddle_rsc_0_13_AWREGION, twiddle_rsc_0_13_AWQOS,
      twiddle_rsc_0_13_AWPROT, twiddle_rsc_0_13_AWCACHE, twiddle_rsc_0_13_AWLOCK,
      twiddle_rsc_0_13_AWBURST, twiddle_rsc_0_13_AWSIZE, twiddle_rsc_0_13_AWLEN,
      twiddle_rsc_0_13_AWADDR, twiddle_rsc_0_13_AWID, core_wen, twiddle_rsc_0_13_i_oswt,
      twiddle_rsc_0_13_i_wen_comp, twiddle_rsc_0_13_i_s_raddr_core, twiddle_rsc_0_13_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_13_s_tdone;
  input twiddle_rsc_0_13_tr_write_done;
  input twiddle_rsc_0_13_RREADY;
  output twiddle_rsc_0_13_RVALID;
  output twiddle_rsc_0_13_RUSER;
  output twiddle_rsc_0_13_RLAST;
  output [1:0] twiddle_rsc_0_13_RRESP;
  output [31:0] twiddle_rsc_0_13_RDATA;
  output twiddle_rsc_0_13_RID;
  output twiddle_rsc_0_13_ARREADY;
  input twiddle_rsc_0_13_ARVALID;
  input twiddle_rsc_0_13_ARUSER;
  input [3:0] twiddle_rsc_0_13_ARREGION;
  input [3:0] twiddle_rsc_0_13_ARQOS;
  input [2:0] twiddle_rsc_0_13_ARPROT;
  input [3:0] twiddle_rsc_0_13_ARCACHE;
  input twiddle_rsc_0_13_ARLOCK;
  input [1:0] twiddle_rsc_0_13_ARBURST;
  input [2:0] twiddle_rsc_0_13_ARSIZE;
  input [7:0] twiddle_rsc_0_13_ARLEN;
  input [11:0] twiddle_rsc_0_13_ARADDR;
  input twiddle_rsc_0_13_ARID;
  input twiddle_rsc_0_13_BREADY;
  output twiddle_rsc_0_13_BVALID;
  output twiddle_rsc_0_13_BUSER;
  output [1:0] twiddle_rsc_0_13_BRESP;
  output twiddle_rsc_0_13_BID;
  output twiddle_rsc_0_13_WREADY;
  input twiddle_rsc_0_13_WVALID;
  input twiddle_rsc_0_13_WUSER;
  input twiddle_rsc_0_13_WLAST;
  input [3:0] twiddle_rsc_0_13_WSTRB;
  input [31:0] twiddle_rsc_0_13_WDATA;
  output twiddle_rsc_0_13_AWREADY;
  input twiddle_rsc_0_13_AWVALID;
  input twiddle_rsc_0_13_AWUSER;
  input [3:0] twiddle_rsc_0_13_AWREGION;
  input [3:0] twiddle_rsc_0_13_AWQOS;
  input [2:0] twiddle_rsc_0_13_AWPROT;
  input [3:0] twiddle_rsc_0_13_AWCACHE;
  input twiddle_rsc_0_13_AWLOCK;
  input [1:0] twiddle_rsc_0_13_AWBURST;
  input [2:0] twiddle_rsc_0_13_AWSIZE;
  input [7:0] twiddle_rsc_0_13_AWLEN;
  input [11:0] twiddle_rsc_0_13_AWADDR;
  input twiddle_rsc_0_13_AWID;
  input core_wen;
  input twiddle_rsc_0_13_i_oswt;
  output twiddle_rsc_0_13_i_wen_comp;
  input [5:0] twiddle_rsc_0_13_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_13_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_13_i_biwt;
  wire twiddle_rsc_0_13_i_bdwt;
  wire twiddle_rsc_0_13_i_bcwt;
  wire twiddle_rsc_0_13_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_13_i_s_raddr;
  wire [31:0] twiddle_rsc_0_13_i_s_din;
  wire twiddle_rsc_0_13_i_s_rrdy;
  wire twiddle_rsc_0_13_i_s_wrdy;
  wire twiddle_rsc_0_13_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp_inst_twiddle_rsc_0_13_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp_inst_twiddle_rsc_0_13_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_13_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_13_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_13_AWID),
      .AWADDR(twiddle_rsc_0_13_AWADDR),
      .AWLEN(twiddle_rsc_0_13_AWLEN),
      .AWSIZE(twiddle_rsc_0_13_AWSIZE),
      .AWBURST(twiddle_rsc_0_13_AWBURST),
      .AWLOCK(twiddle_rsc_0_13_AWLOCK),
      .AWCACHE(twiddle_rsc_0_13_AWCACHE),
      .AWPROT(twiddle_rsc_0_13_AWPROT),
      .AWQOS(twiddle_rsc_0_13_AWQOS),
      .AWREGION(twiddle_rsc_0_13_AWREGION),
      .AWUSER(twiddle_rsc_0_13_AWUSER),
      .AWVALID(twiddle_rsc_0_13_AWVALID),
      .AWREADY(twiddle_rsc_0_13_AWREADY),
      .WDATA(twiddle_rsc_0_13_WDATA),
      .WSTRB(twiddle_rsc_0_13_WSTRB),
      .WLAST(twiddle_rsc_0_13_WLAST),
      .WUSER(twiddle_rsc_0_13_WUSER),
      .WVALID(twiddle_rsc_0_13_WVALID),
      .WREADY(twiddle_rsc_0_13_WREADY),
      .BID(twiddle_rsc_0_13_BID),
      .BRESP(twiddle_rsc_0_13_BRESP),
      .BUSER(twiddle_rsc_0_13_BUSER),
      .BVALID(twiddle_rsc_0_13_BVALID),
      .BREADY(twiddle_rsc_0_13_BREADY),
      .ARID(twiddle_rsc_0_13_ARID),
      .ARADDR(twiddle_rsc_0_13_ARADDR),
      .ARLEN(twiddle_rsc_0_13_ARLEN),
      .ARSIZE(twiddle_rsc_0_13_ARSIZE),
      .ARBURST(twiddle_rsc_0_13_ARBURST),
      .ARLOCK(twiddle_rsc_0_13_ARLOCK),
      .ARCACHE(twiddle_rsc_0_13_ARCACHE),
      .ARPROT(twiddle_rsc_0_13_ARPROT),
      .ARQOS(twiddle_rsc_0_13_ARQOS),
      .ARREGION(twiddle_rsc_0_13_ARREGION),
      .ARUSER(twiddle_rsc_0_13_ARUSER),
      .ARVALID(twiddle_rsc_0_13_ARVALID),
      .ARREADY(twiddle_rsc_0_13_ARREADY),
      .RID(twiddle_rsc_0_13_RID),
      .RDATA(twiddle_rsc_0_13_RDATA),
      .RRESP(twiddle_rsc_0_13_RRESP),
      .RLAST(twiddle_rsc_0_13_RLAST),
      .RUSER(twiddle_rsc_0_13_RUSER),
      .RVALID(twiddle_rsc_0_13_RVALID),
      .RREADY(twiddle_rsc_0_13_RREADY),
      .s_re(twiddle_rsc_0_13_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_13_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_13_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_13_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_13_i_s_wrdy),
      .is_idle(twiddle_rsc_0_13_is_idle),
      .tr_write_done(twiddle_rsc_0_13_tr_write_done),
      .s_tdone(twiddle_rsc_0_13_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_ctrl peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_13_i_oswt(twiddle_rsc_0_13_i_oswt),
      .twiddle_rsc_0_13_i_biwt(twiddle_rsc_0_13_i_biwt),
      .twiddle_rsc_0_13_i_bdwt(twiddle_rsc_0_13_i_bdwt),
      .twiddle_rsc_0_13_i_bcwt(twiddle_rsc_0_13_i_bcwt),
      .twiddle_rsc_0_13_i_s_re_core_sct(twiddle_rsc_0_13_i_s_re_core_sct),
      .twiddle_rsc_0_13_i_s_rrdy(twiddle_rsc_0_13_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_13_i_oswt(twiddle_rsc_0_13_i_oswt),
      .twiddle_rsc_0_13_i_wen_comp(twiddle_rsc_0_13_i_wen_comp),
      .twiddle_rsc_0_13_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_13_i_twiddle_rsc_0_13_wait_dp_inst_twiddle_rsc_0_13_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_13_i_s_din_mxwt(twiddle_rsc_0_13_i_s_din_mxwt),
      .twiddle_rsc_0_13_i_biwt(twiddle_rsc_0_13_i_biwt),
      .twiddle_rsc_0_13_i_bdwt(twiddle_rsc_0_13_i_bdwt),
      .twiddle_rsc_0_13_i_bcwt(twiddle_rsc_0_13_i_bcwt),
      .twiddle_rsc_0_13_i_s_raddr(twiddle_rsc_0_13_i_s_raddr),
      .twiddle_rsc_0_13_i_s_raddr_core_sct(twiddle_rsc_0_13_i_s_re_core_sct),
      .twiddle_rsc_0_13_i_s_din(twiddle_rsc_0_13_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_12_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_12_i (
  clk, rst, twiddle_rsc_0_12_s_tdone, twiddle_rsc_0_12_tr_write_done, twiddle_rsc_0_12_RREADY,
      twiddle_rsc_0_12_RVALID, twiddle_rsc_0_12_RUSER, twiddle_rsc_0_12_RLAST, twiddle_rsc_0_12_RRESP,
      twiddle_rsc_0_12_RDATA, twiddle_rsc_0_12_RID, twiddle_rsc_0_12_ARREADY, twiddle_rsc_0_12_ARVALID,
      twiddle_rsc_0_12_ARUSER, twiddle_rsc_0_12_ARREGION, twiddle_rsc_0_12_ARQOS,
      twiddle_rsc_0_12_ARPROT, twiddle_rsc_0_12_ARCACHE, twiddle_rsc_0_12_ARLOCK,
      twiddle_rsc_0_12_ARBURST, twiddle_rsc_0_12_ARSIZE, twiddle_rsc_0_12_ARLEN,
      twiddle_rsc_0_12_ARADDR, twiddle_rsc_0_12_ARID, twiddle_rsc_0_12_BREADY, twiddle_rsc_0_12_BVALID,
      twiddle_rsc_0_12_BUSER, twiddle_rsc_0_12_BRESP, twiddle_rsc_0_12_BID, twiddle_rsc_0_12_WREADY,
      twiddle_rsc_0_12_WVALID, twiddle_rsc_0_12_WUSER, twiddle_rsc_0_12_WLAST, twiddle_rsc_0_12_WSTRB,
      twiddle_rsc_0_12_WDATA, twiddle_rsc_0_12_AWREADY, twiddle_rsc_0_12_AWVALID,
      twiddle_rsc_0_12_AWUSER, twiddle_rsc_0_12_AWREGION, twiddle_rsc_0_12_AWQOS,
      twiddle_rsc_0_12_AWPROT, twiddle_rsc_0_12_AWCACHE, twiddle_rsc_0_12_AWLOCK,
      twiddle_rsc_0_12_AWBURST, twiddle_rsc_0_12_AWSIZE, twiddle_rsc_0_12_AWLEN,
      twiddle_rsc_0_12_AWADDR, twiddle_rsc_0_12_AWID, core_wen, twiddle_rsc_0_12_i_oswt,
      twiddle_rsc_0_12_i_wen_comp, twiddle_rsc_0_12_i_s_raddr_core, twiddle_rsc_0_12_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_12_s_tdone;
  input twiddle_rsc_0_12_tr_write_done;
  input twiddle_rsc_0_12_RREADY;
  output twiddle_rsc_0_12_RVALID;
  output twiddle_rsc_0_12_RUSER;
  output twiddle_rsc_0_12_RLAST;
  output [1:0] twiddle_rsc_0_12_RRESP;
  output [31:0] twiddle_rsc_0_12_RDATA;
  output twiddle_rsc_0_12_RID;
  output twiddle_rsc_0_12_ARREADY;
  input twiddle_rsc_0_12_ARVALID;
  input twiddle_rsc_0_12_ARUSER;
  input [3:0] twiddle_rsc_0_12_ARREGION;
  input [3:0] twiddle_rsc_0_12_ARQOS;
  input [2:0] twiddle_rsc_0_12_ARPROT;
  input [3:0] twiddle_rsc_0_12_ARCACHE;
  input twiddle_rsc_0_12_ARLOCK;
  input [1:0] twiddle_rsc_0_12_ARBURST;
  input [2:0] twiddle_rsc_0_12_ARSIZE;
  input [7:0] twiddle_rsc_0_12_ARLEN;
  input [11:0] twiddle_rsc_0_12_ARADDR;
  input twiddle_rsc_0_12_ARID;
  input twiddle_rsc_0_12_BREADY;
  output twiddle_rsc_0_12_BVALID;
  output twiddle_rsc_0_12_BUSER;
  output [1:0] twiddle_rsc_0_12_BRESP;
  output twiddle_rsc_0_12_BID;
  output twiddle_rsc_0_12_WREADY;
  input twiddle_rsc_0_12_WVALID;
  input twiddle_rsc_0_12_WUSER;
  input twiddle_rsc_0_12_WLAST;
  input [3:0] twiddle_rsc_0_12_WSTRB;
  input [31:0] twiddle_rsc_0_12_WDATA;
  output twiddle_rsc_0_12_AWREADY;
  input twiddle_rsc_0_12_AWVALID;
  input twiddle_rsc_0_12_AWUSER;
  input [3:0] twiddle_rsc_0_12_AWREGION;
  input [3:0] twiddle_rsc_0_12_AWQOS;
  input [2:0] twiddle_rsc_0_12_AWPROT;
  input [3:0] twiddle_rsc_0_12_AWCACHE;
  input twiddle_rsc_0_12_AWLOCK;
  input [1:0] twiddle_rsc_0_12_AWBURST;
  input [2:0] twiddle_rsc_0_12_AWSIZE;
  input [7:0] twiddle_rsc_0_12_AWLEN;
  input [11:0] twiddle_rsc_0_12_AWADDR;
  input twiddle_rsc_0_12_AWID;
  input core_wen;
  input twiddle_rsc_0_12_i_oswt;
  output twiddle_rsc_0_12_i_wen_comp;
  input [5:0] twiddle_rsc_0_12_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_12_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_12_i_biwt;
  wire twiddle_rsc_0_12_i_bdwt;
  wire twiddle_rsc_0_12_i_bcwt;
  wire twiddle_rsc_0_12_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_12_i_s_raddr;
  wire [31:0] twiddle_rsc_0_12_i_s_din;
  wire twiddle_rsc_0_12_i_s_rrdy;
  wire twiddle_rsc_0_12_i_s_wrdy;
  wire twiddle_rsc_0_12_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp_inst_twiddle_rsc_0_12_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp_inst_twiddle_rsc_0_12_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_12_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_12_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_12_AWID),
      .AWADDR(twiddle_rsc_0_12_AWADDR),
      .AWLEN(twiddle_rsc_0_12_AWLEN),
      .AWSIZE(twiddle_rsc_0_12_AWSIZE),
      .AWBURST(twiddle_rsc_0_12_AWBURST),
      .AWLOCK(twiddle_rsc_0_12_AWLOCK),
      .AWCACHE(twiddle_rsc_0_12_AWCACHE),
      .AWPROT(twiddle_rsc_0_12_AWPROT),
      .AWQOS(twiddle_rsc_0_12_AWQOS),
      .AWREGION(twiddle_rsc_0_12_AWREGION),
      .AWUSER(twiddle_rsc_0_12_AWUSER),
      .AWVALID(twiddle_rsc_0_12_AWVALID),
      .AWREADY(twiddle_rsc_0_12_AWREADY),
      .WDATA(twiddle_rsc_0_12_WDATA),
      .WSTRB(twiddle_rsc_0_12_WSTRB),
      .WLAST(twiddle_rsc_0_12_WLAST),
      .WUSER(twiddle_rsc_0_12_WUSER),
      .WVALID(twiddle_rsc_0_12_WVALID),
      .WREADY(twiddle_rsc_0_12_WREADY),
      .BID(twiddle_rsc_0_12_BID),
      .BRESP(twiddle_rsc_0_12_BRESP),
      .BUSER(twiddle_rsc_0_12_BUSER),
      .BVALID(twiddle_rsc_0_12_BVALID),
      .BREADY(twiddle_rsc_0_12_BREADY),
      .ARID(twiddle_rsc_0_12_ARID),
      .ARADDR(twiddle_rsc_0_12_ARADDR),
      .ARLEN(twiddle_rsc_0_12_ARLEN),
      .ARSIZE(twiddle_rsc_0_12_ARSIZE),
      .ARBURST(twiddle_rsc_0_12_ARBURST),
      .ARLOCK(twiddle_rsc_0_12_ARLOCK),
      .ARCACHE(twiddle_rsc_0_12_ARCACHE),
      .ARPROT(twiddle_rsc_0_12_ARPROT),
      .ARQOS(twiddle_rsc_0_12_ARQOS),
      .ARREGION(twiddle_rsc_0_12_ARREGION),
      .ARUSER(twiddle_rsc_0_12_ARUSER),
      .ARVALID(twiddle_rsc_0_12_ARVALID),
      .ARREADY(twiddle_rsc_0_12_ARREADY),
      .RID(twiddle_rsc_0_12_RID),
      .RDATA(twiddle_rsc_0_12_RDATA),
      .RRESP(twiddle_rsc_0_12_RRESP),
      .RLAST(twiddle_rsc_0_12_RLAST),
      .RUSER(twiddle_rsc_0_12_RUSER),
      .RVALID(twiddle_rsc_0_12_RVALID),
      .RREADY(twiddle_rsc_0_12_RREADY),
      .s_re(twiddle_rsc_0_12_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_12_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_12_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_12_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_12_i_s_wrdy),
      .is_idle(twiddle_rsc_0_12_is_idle),
      .tr_write_done(twiddle_rsc_0_12_tr_write_done),
      .s_tdone(twiddle_rsc_0_12_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_ctrl peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_12_i_oswt(twiddle_rsc_0_12_i_oswt),
      .twiddle_rsc_0_12_i_biwt(twiddle_rsc_0_12_i_biwt),
      .twiddle_rsc_0_12_i_bdwt(twiddle_rsc_0_12_i_bdwt),
      .twiddle_rsc_0_12_i_bcwt(twiddle_rsc_0_12_i_bcwt),
      .twiddle_rsc_0_12_i_s_re_core_sct(twiddle_rsc_0_12_i_s_re_core_sct),
      .twiddle_rsc_0_12_i_s_rrdy(twiddle_rsc_0_12_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_12_i_oswt(twiddle_rsc_0_12_i_oswt),
      .twiddle_rsc_0_12_i_wen_comp(twiddle_rsc_0_12_i_wen_comp),
      .twiddle_rsc_0_12_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_12_i_twiddle_rsc_0_12_wait_dp_inst_twiddle_rsc_0_12_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_12_i_s_din_mxwt(twiddle_rsc_0_12_i_s_din_mxwt),
      .twiddle_rsc_0_12_i_biwt(twiddle_rsc_0_12_i_biwt),
      .twiddle_rsc_0_12_i_bdwt(twiddle_rsc_0_12_i_bdwt),
      .twiddle_rsc_0_12_i_bcwt(twiddle_rsc_0_12_i_bcwt),
      .twiddle_rsc_0_12_i_s_raddr(twiddle_rsc_0_12_i_s_raddr),
      .twiddle_rsc_0_12_i_s_raddr_core_sct(twiddle_rsc_0_12_i_s_re_core_sct),
      .twiddle_rsc_0_12_i_s_din(twiddle_rsc_0_12_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_11_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_11_i (
  clk, rst, twiddle_rsc_0_11_s_tdone, twiddle_rsc_0_11_tr_write_done, twiddle_rsc_0_11_RREADY,
      twiddle_rsc_0_11_RVALID, twiddle_rsc_0_11_RUSER, twiddle_rsc_0_11_RLAST, twiddle_rsc_0_11_RRESP,
      twiddle_rsc_0_11_RDATA, twiddle_rsc_0_11_RID, twiddle_rsc_0_11_ARREADY, twiddle_rsc_0_11_ARVALID,
      twiddle_rsc_0_11_ARUSER, twiddle_rsc_0_11_ARREGION, twiddle_rsc_0_11_ARQOS,
      twiddle_rsc_0_11_ARPROT, twiddle_rsc_0_11_ARCACHE, twiddle_rsc_0_11_ARLOCK,
      twiddle_rsc_0_11_ARBURST, twiddle_rsc_0_11_ARSIZE, twiddle_rsc_0_11_ARLEN,
      twiddle_rsc_0_11_ARADDR, twiddle_rsc_0_11_ARID, twiddle_rsc_0_11_BREADY, twiddle_rsc_0_11_BVALID,
      twiddle_rsc_0_11_BUSER, twiddle_rsc_0_11_BRESP, twiddle_rsc_0_11_BID, twiddle_rsc_0_11_WREADY,
      twiddle_rsc_0_11_WVALID, twiddle_rsc_0_11_WUSER, twiddle_rsc_0_11_WLAST, twiddle_rsc_0_11_WSTRB,
      twiddle_rsc_0_11_WDATA, twiddle_rsc_0_11_AWREADY, twiddle_rsc_0_11_AWVALID,
      twiddle_rsc_0_11_AWUSER, twiddle_rsc_0_11_AWREGION, twiddle_rsc_0_11_AWQOS,
      twiddle_rsc_0_11_AWPROT, twiddle_rsc_0_11_AWCACHE, twiddle_rsc_0_11_AWLOCK,
      twiddle_rsc_0_11_AWBURST, twiddle_rsc_0_11_AWSIZE, twiddle_rsc_0_11_AWLEN,
      twiddle_rsc_0_11_AWADDR, twiddle_rsc_0_11_AWID, core_wen, twiddle_rsc_0_11_i_oswt,
      twiddle_rsc_0_11_i_wen_comp, twiddle_rsc_0_11_i_s_raddr_core, twiddle_rsc_0_11_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_11_s_tdone;
  input twiddle_rsc_0_11_tr_write_done;
  input twiddle_rsc_0_11_RREADY;
  output twiddle_rsc_0_11_RVALID;
  output twiddle_rsc_0_11_RUSER;
  output twiddle_rsc_0_11_RLAST;
  output [1:0] twiddle_rsc_0_11_RRESP;
  output [31:0] twiddle_rsc_0_11_RDATA;
  output twiddle_rsc_0_11_RID;
  output twiddle_rsc_0_11_ARREADY;
  input twiddle_rsc_0_11_ARVALID;
  input twiddle_rsc_0_11_ARUSER;
  input [3:0] twiddle_rsc_0_11_ARREGION;
  input [3:0] twiddle_rsc_0_11_ARQOS;
  input [2:0] twiddle_rsc_0_11_ARPROT;
  input [3:0] twiddle_rsc_0_11_ARCACHE;
  input twiddle_rsc_0_11_ARLOCK;
  input [1:0] twiddle_rsc_0_11_ARBURST;
  input [2:0] twiddle_rsc_0_11_ARSIZE;
  input [7:0] twiddle_rsc_0_11_ARLEN;
  input [11:0] twiddle_rsc_0_11_ARADDR;
  input twiddle_rsc_0_11_ARID;
  input twiddle_rsc_0_11_BREADY;
  output twiddle_rsc_0_11_BVALID;
  output twiddle_rsc_0_11_BUSER;
  output [1:0] twiddle_rsc_0_11_BRESP;
  output twiddle_rsc_0_11_BID;
  output twiddle_rsc_0_11_WREADY;
  input twiddle_rsc_0_11_WVALID;
  input twiddle_rsc_0_11_WUSER;
  input twiddle_rsc_0_11_WLAST;
  input [3:0] twiddle_rsc_0_11_WSTRB;
  input [31:0] twiddle_rsc_0_11_WDATA;
  output twiddle_rsc_0_11_AWREADY;
  input twiddle_rsc_0_11_AWVALID;
  input twiddle_rsc_0_11_AWUSER;
  input [3:0] twiddle_rsc_0_11_AWREGION;
  input [3:0] twiddle_rsc_0_11_AWQOS;
  input [2:0] twiddle_rsc_0_11_AWPROT;
  input [3:0] twiddle_rsc_0_11_AWCACHE;
  input twiddle_rsc_0_11_AWLOCK;
  input [1:0] twiddle_rsc_0_11_AWBURST;
  input [2:0] twiddle_rsc_0_11_AWSIZE;
  input [7:0] twiddle_rsc_0_11_AWLEN;
  input [11:0] twiddle_rsc_0_11_AWADDR;
  input twiddle_rsc_0_11_AWID;
  input core_wen;
  input twiddle_rsc_0_11_i_oswt;
  output twiddle_rsc_0_11_i_wen_comp;
  input [5:0] twiddle_rsc_0_11_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_11_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_11_i_biwt;
  wire twiddle_rsc_0_11_i_bdwt;
  wire twiddle_rsc_0_11_i_bcwt;
  wire twiddle_rsc_0_11_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_11_i_s_raddr;
  wire [31:0] twiddle_rsc_0_11_i_s_din;
  wire twiddle_rsc_0_11_i_s_rrdy;
  wire twiddle_rsc_0_11_i_s_wrdy;
  wire twiddle_rsc_0_11_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp_inst_twiddle_rsc_0_11_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp_inst_twiddle_rsc_0_11_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_11_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_11_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_11_AWID),
      .AWADDR(twiddle_rsc_0_11_AWADDR),
      .AWLEN(twiddle_rsc_0_11_AWLEN),
      .AWSIZE(twiddle_rsc_0_11_AWSIZE),
      .AWBURST(twiddle_rsc_0_11_AWBURST),
      .AWLOCK(twiddle_rsc_0_11_AWLOCK),
      .AWCACHE(twiddle_rsc_0_11_AWCACHE),
      .AWPROT(twiddle_rsc_0_11_AWPROT),
      .AWQOS(twiddle_rsc_0_11_AWQOS),
      .AWREGION(twiddle_rsc_0_11_AWREGION),
      .AWUSER(twiddle_rsc_0_11_AWUSER),
      .AWVALID(twiddle_rsc_0_11_AWVALID),
      .AWREADY(twiddle_rsc_0_11_AWREADY),
      .WDATA(twiddle_rsc_0_11_WDATA),
      .WSTRB(twiddle_rsc_0_11_WSTRB),
      .WLAST(twiddle_rsc_0_11_WLAST),
      .WUSER(twiddle_rsc_0_11_WUSER),
      .WVALID(twiddle_rsc_0_11_WVALID),
      .WREADY(twiddle_rsc_0_11_WREADY),
      .BID(twiddle_rsc_0_11_BID),
      .BRESP(twiddle_rsc_0_11_BRESP),
      .BUSER(twiddle_rsc_0_11_BUSER),
      .BVALID(twiddle_rsc_0_11_BVALID),
      .BREADY(twiddle_rsc_0_11_BREADY),
      .ARID(twiddle_rsc_0_11_ARID),
      .ARADDR(twiddle_rsc_0_11_ARADDR),
      .ARLEN(twiddle_rsc_0_11_ARLEN),
      .ARSIZE(twiddle_rsc_0_11_ARSIZE),
      .ARBURST(twiddle_rsc_0_11_ARBURST),
      .ARLOCK(twiddle_rsc_0_11_ARLOCK),
      .ARCACHE(twiddle_rsc_0_11_ARCACHE),
      .ARPROT(twiddle_rsc_0_11_ARPROT),
      .ARQOS(twiddle_rsc_0_11_ARQOS),
      .ARREGION(twiddle_rsc_0_11_ARREGION),
      .ARUSER(twiddle_rsc_0_11_ARUSER),
      .ARVALID(twiddle_rsc_0_11_ARVALID),
      .ARREADY(twiddle_rsc_0_11_ARREADY),
      .RID(twiddle_rsc_0_11_RID),
      .RDATA(twiddle_rsc_0_11_RDATA),
      .RRESP(twiddle_rsc_0_11_RRESP),
      .RLAST(twiddle_rsc_0_11_RLAST),
      .RUSER(twiddle_rsc_0_11_RUSER),
      .RVALID(twiddle_rsc_0_11_RVALID),
      .RREADY(twiddle_rsc_0_11_RREADY),
      .s_re(twiddle_rsc_0_11_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_11_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_11_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_11_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_11_i_s_wrdy),
      .is_idle(twiddle_rsc_0_11_is_idle),
      .tr_write_done(twiddle_rsc_0_11_tr_write_done),
      .s_tdone(twiddle_rsc_0_11_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_ctrl peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_11_i_oswt(twiddle_rsc_0_11_i_oswt),
      .twiddle_rsc_0_11_i_biwt(twiddle_rsc_0_11_i_biwt),
      .twiddle_rsc_0_11_i_bdwt(twiddle_rsc_0_11_i_bdwt),
      .twiddle_rsc_0_11_i_bcwt(twiddle_rsc_0_11_i_bcwt),
      .twiddle_rsc_0_11_i_s_re_core_sct(twiddle_rsc_0_11_i_s_re_core_sct),
      .twiddle_rsc_0_11_i_s_rrdy(twiddle_rsc_0_11_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_11_i_oswt(twiddle_rsc_0_11_i_oswt),
      .twiddle_rsc_0_11_i_wen_comp(twiddle_rsc_0_11_i_wen_comp),
      .twiddle_rsc_0_11_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_11_i_twiddle_rsc_0_11_wait_dp_inst_twiddle_rsc_0_11_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_11_i_s_din_mxwt(twiddle_rsc_0_11_i_s_din_mxwt),
      .twiddle_rsc_0_11_i_biwt(twiddle_rsc_0_11_i_biwt),
      .twiddle_rsc_0_11_i_bdwt(twiddle_rsc_0_11_i_bdwt),
      .twiddle_rsc_0_11_i_bcwt(twiddle_rsc_0_11_i_bcwt),
      .twiddle_rsc_0_11_i_s_raddr(twiddle_rsc_0_11_i_s_raddr),
      .twiddle_rsc_0_11_i_s_raddr_core_sct(twiddle_rsc_0_11_i_s_re_core_sct),
      .twiddle_rsc_0_11_i_s_din(twiddle_rsc_0_11_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_10_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_10_i (
  clk, rst, twiddle_rsc_0_10_s_tdone, twiddle_rsc_0_10_tr_write_done, twiddle_rsc_0_10_RREADY,
      twiddle_rsc_0_10_RVALID, twiddle_rsc_0_10_RUSER, twiddle_rsc_0_10_RLAST, twiddle_rsc_0_10_RRESP,
      twiddle_rsc_0_10_RDATA, twiddle_rsc_0_10_RID, twiddle_rsc_0_10_ARREADY, twiddle_rsc_0_10_ARVALID,
      twiddle_rsc_0_10_ARUSER, twiddle_rsc_0_10_ARREGION, twiddle_rsc_0_10_ARQOS,
      twiddle_rsc_0_10_ARPROT, twiddle_rsc_0_10_ARCACHE, twiddle_rsc_0_10_ARLOCK,
      twiddle_rsc_0_10_ARBURST, twiddle_rsc_0_10_ARSIZE, twiddle_rsc_0_10_ARLEN,
      twiddle_rsc_0_10_ARADDR, twiddle_rsc_0_10_ARID, twiddle_rsc_0_10_BREADY, twiddle_rsc_0_10_BVALID,
      twiddle_rsc_0_10_BUSER, twiddle_rsc_0_10_BRESP, twiddle_rsc_0_10_BID, twiddle_rsc_0_10_WREADY,
      twiddle_rsc_0_10_WVALID, twiddle_rsc_0_10_WUSER, twiddle_rsc_0_10_WLAST, twiddle_rsc_0_10_WSTRB,
      twiddle_rsc_0_10_WDATA, twiddle_rsc_0_10_AWREADY, twiddle_rsc_0_10_AWVALID,
      twiddle_rsc_0_10_AWUSER, twiddle_rsc_0_10_AWREGION, twiddle_rsc_0_10_AWQOS,
      twiddle_rsc_0_10_AWPROT, twiddle_rsc_0_10_AWCACHE, twiddle_rsc_0_10_AWLOCK,
      twiddle_rsc_0_10_AWBURST, twiddle_rsc_0_10_AWSIZE, twiddle_rsc_0_10_AWLEN,
      twiddle_rsc_0_10_AWADDR, twiddle_rsc_0_10_AWID, core_wen, twiddle_rsc_0_10_i_oswt,
      twiddle_rsc_0_10_i_wen_comp, twiddle_rsc_0_10_i_s_raddr_core, twiddle_rsc_0_10_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_10_s_tdone;
  input twiddle_rsc_0_10_tr_write_done;
  input twiddle_rsc_0_10_RREADY;
  output twiddle_rsc_0_10_RVALID;
  output twiddle_rsc_0_10_RUSER;
  output twiddle_rsc_0_10_RLAST;
  output [1:0] twiddle_rsc_0_10_RRESP;
  output [31:0] twiddle_rsc_0_10_RDATA;
  output twiddle_rsc_0_10_RID;
  output twiddle_rsc_0_10_ARREADY;
  input twiddle_rsc_0_10_ARVALID;
  input twiddle_rsc_0_10_ARUSER;
  input [3:0] twiddle_rsc_0_10_ARREGION;
  input [3:0] twiddle_rsc_0_10_ARQOS;
  input [2:0] twiddle_rsc_0_10_ARPROT;
  input [3:0] twiddle_rsc_0_10_ARCACHE;
  input twiddle_rsc_0_10_ARLOCK;
  input [1:0] twiddle_rsc_0_10_ARBURST;
  input [2:0] twiddle_rsc_0_10_ARSIZE;
  input [7:0] twiddle_rsc_0_10_ARLEN;
  input [11:0] twiddle_rsc_0_10_ARADDR;
  input twiddle_rsc_0_10_ARID;
  input twiddle_rsc_0_10_BREADY;
  output twiddle_rsc_0_10_BVALID;
  output twiddle_rsc_0_10_BUSER;
  output [1:0] twiddle_rsc_0_10_BRESP;
  output twiddle_rsc_0_10_BID;
  output twiddle_rsc_0_10_WREADY;
  input twiddle_rsc_0_10_WVALID;
  input twiddle_rsc_0_10_WUSER;
  input twiddle_rsc_0_10_WLAST;
  input [3:0] twiddle_rsc_0_10_WSTRB;
  input [31:0] twiddle_rsc_0_10_WDATA;
  output twiddle_rsc_0_10_AWREADY;
  input twiddle_rsc_0_10_AWVALID;
  input twiddle_rsc_0_10_AWUSER;
  input [3:0] twiddle_rsc_0_10_AWREGION;
  input [3:0] twiddle_rsc_0_10_AWQOS;
  input [2:0] twiddle_rsc_0_10_AWPROT;
  input [3:0] twiddle_rsc_0_10_AWCACHE;
  input twiddle_rsc_0_10_AWLOCK;
  input [1:0] twiddle_rsc_0_10_AWBURST;
  input [2:0] twiddle_rsc_0_10_AWSIZE;
  input [7:0] twiddle_rsc_0_10_AWLEN;
  input [11:0] twiddle_rsc_0_10_AWADDR;
  input twiddle_rsc_0_10_AWID;
  input core_wen;
  input twiddle_rsc_0_10_i_oswt;
  output twiddle_rsc_0_10_i_wen_comp;
  input [5:0] twiddle_rsc_0_10_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_10_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_10_i_biwt;
  wire twiddle_rsc_0_10_i_bdwt;
  wire twiddle_rsc_0_10_i_bcwt;
  wire twiddle_rsc_0_10_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_10_i_s_raddr;
  wire [31:0] twiddle_rsc_0_10_i_s_din;
  wire twiddle_rsc_0_10_i_s_rrdy;
  wire twiddle_rsc_0_10_i_s_wrdy;
  wire twiddle_rsc_0_10_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp_inst_twiddle_rsc_0_10_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp_inst_twiddle_rsc_0_10_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_10_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_10_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_10_AWID),
      .AWADDR(twiddle_rsc_0_10_AWADDR),
      .AWLEN(twiddle_rsc_0_10_AWLEN),
      .AWSIZE(twiddle_rsc_0_10_AWSIZE),
      .AWBURST(twiddle_rsc_0_10_AWBURST),
      .AWLOCK(twiddle_rsc_0_10_AWLOCK),
      .AWCACHE(twiddle_rsc_0_10_AWCACHE),
      .AWPROT(twiddle_rsc_0_10_AWPROT),
      .AWQOS(twiddle_rsc_0_10_AWQOS),
      .AWREGION(twiddle_rsc_0_10_AWREGION),
      .AWUSER(twiddle_rsc_0_10_AWUSER),
      .AWVALID(twiddle_rsc_0_10_AWVALID),
      .AWREADY(twiddle_rsc_0_10_AWREADY),
      .WDATA(twiddle_rsc_0_10_WDATA),
      .WSTRB(twiddle_rsc_0_10_WSTRB),
      .WLAST(twiddle_rsc_0_10_WLAST),
      .WUSER(twiddle_rsc_0_10_WUSER),
      .WVALID(twiddle_rsc_0_10_WVALID),
      .WREADY(twiddle_rsc_0_10_WREADY),
      .BID(twiddle_rsc_0_10_BID),
      .BRESP(twiddle_rsc_0_10_BRESP),
      .BUSER(twiddle_rsc_0_10_BUSER),
      .BVALID(twiddle_rsc_0_10_BVALID),
      .BREADY(twiddle_rsc_0_10_BREADY),
      .ARID(twiddle_rsc_0_10_ARID),
      .ARADDR(twiddle_rsc_0_10_ARADDR),
      .ARLEN(twiddle_rsc_0_10_ARLEN),
      .ARSIZE(twiddle_rsc_0_10_ARSIZE),
      .ARBURST(twiddle_rsc_0_10_ARBURST),
      .ARLOCK(twiddle_rsc_0_10_ARLOCK),
      .ARCACHE(twiddle_rsc_0_10_ARCACHE),
      .ARPROT(twiddle_rsc_0_10_ARPROT),
      .ARQOS(twiddle_rsc_0_10_ARQOS),
      .ARREGION(twiddle_rsc_0_10_ARREGION),
      .ARUSER(twiddle_rsc_0_10_ARUSER),
      .ARVALID(twiddle_rsc_0_10_ARVALID),
      .ARREADY(twiddle_rsc_0_10_ARREADY),
      .RID(twiddle_rsc_0_10_RID),
      .RDATA(twiddle_rsc_0_10_RDATA),
      .RRESP(twiddle_rsc_0_10_RRESP),
      .RLAST(twiddle_rsc_0_10_RLAST),
      .RUSER(twiddle_rsc_0_10_RUSER),
      .RVALID(twiddle_rsc_0_10_RVALID),
      .RREADY(twiddle_rsc_0_10_RREADY),
      .s_re(twiddle_rsc_0_10_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_10_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_10_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_10_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_10_i_s_wrdy),
      .is_idle(twiddle_rsc_0_10_is_idle),
      .tr_write_done(twiddle_rsc_0_10_tr_write_done),
      .s_tdone(twiddle_rsc_0_10_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_ctrl peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_10_i_oswt(twiddle_rsc_0_10_i_oswt),
      .twiddle_rsc_0_10_i_biwt(twiddle_rsc_0_10_i_biwt),
      .twiddle_rsc_0_10_i_bdwt(twiddle_rsc_0_10_i_bdwt),
      .twiddle_rsc_0_10_i_bcwt(twiddle_rsc_0_10_i_bcwt),
      .twiddle_rsc_0_10_i_s_re_core_sct(twiddle_rsc_0_10_i_s_re_core_sct),
      .twiddle_rsc_0_10_i_s_rrdy(twiddle_rsc_0_10_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_10_i_oswt(twiddle_rsc_0_10_i_oswt),
      .twiddle_rsc_0_10_i_wen_comp(twiddle_rsc_0_10_i_wen_comp),
      .twiddle_rsc_0_10_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_10_i_twiddle_rsc_0_10_wait_dp_inst_twiddle_rsc_0_10_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_10_i_s_din_mxwt(twiddle_rsc_0_10_i_s_din_mxwt),
      .twiddle_rsc_0_10_i_biwt(twiddle_rsc_0_10_i_biwt),
      .twiddle_rsc_0_10_i_bdwt(twiddle_rsc_0_10_i_bdwt),
      .twiddle_rsc_0_10_i_bcwt(twiddle_rsc_0_10_i_bcwt),
      .twiddle_rsc_0_10_i_s_raddr(twiddle_rsc_0_10_i_s_raddr),
      .twiddle_rsc_0_10_i_s_raddr_core_sct(twiddle_rsc_0_10_i_s_re_core_sct),
      .twiddle_rsc_0_10_i_s_din(twiddle_rsc_0_10_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_9_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_9_i (
  clk, rst, twiddle_rsc_0_9_s_tdone, twiddle_rsc_0_9_tr_write_done, twiddle_rsc_0_9_RREADY,
      twiddle_rsc_0_9_RVALID, twiddle_rsc_0_9_RUSER, twiddle_rsc_0_9_RLAST, twiddle_rsc_0_9_RRESP,
      twiddle_rsc_0_9_RDATA, twiddle_rsc_0_9_RID, twiddle_rsc_0_9_ARREADY, twiddle_rsc_0_9_ARVALID,
      twiddle_rsc_0_9_ARUSER, twiddle_rsc_0_9_ARREGION, twiddle_rsc_0_9_ARQOS, twiddle_rsc_0_9_ARPROT,
      twiddle_rsc_0_9_ARCACHE, twiddle_rsc_0_9_ARLOCK, twiddle_rsc_0_9_ARBURST, twiddle_rsc_0_9_ARSIZE,
      twiddle_rsc_0_9_ARLEN, twiddle_rsc_0_9_ARADDR, twiddle_rsc_0_9_ARID, twiddle_rsc_0_9_BREADY,
      twiddle_rsc_0_9_BVALID, twiddle_rsc_0_9_BUSER, twiddle_rsc_0_9_BRESP, twiddle_rsc_0_9_BID,
      twiddle_rsc_0_9_WREADY, twiddle_rsc_0_9_WVALID, twiddle_rsc_0_9_WUSER, twiddle_rsc_0_9_WLAST,
      twiddle_rsc_0_9_WSTRB, twiddle_rsc_0_9_WDATA, twiddle_rsc_0_9_AWREADY, twiddle_rsc_0_9_AWVALID,
      twiddle_rsc_0_9_AWUSER, twiddle_rsc_0_9_AWREGION, twiddle_rsc_0_9_AWQOS, twiddle_rsc_0_9_AWPROT,
      twiddle_rsc_0_9_AWCACHE, twiddle_rsc_0_9_AWLOCK, twiddle_rsc_0_9_AWBURST, twiddle_rsc_0_9_AWSIZE,
      twiddle_rsc_0_9_AWLEN, twiddle_rsc_0_9_AWADDR, twiddle_rsc_0_9_AWID, core_wen,
      twiddle_rsc_0_9_i_oswt, twiddle_rsc_0_9_i_wen_comp, twiddle_rsc_0_9_i_s_raddr_core,
      twiddle_rsc_0_9_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_9_s_tdone;
  input twiddle_rsc_0_9_tr_write_done;
  input twiddle_rsc_0_9_RREADY;
  output twiddle_rsc_0_9_RVALID;
  output twiddle_rsc_0_9_RUSER;
  output twiddle_rsc_0_9_RLAST;
  output [1:0] twiddle_rsc_0_9_RRESP;
  output [31:0] twiddle_rsc_0_9_RDATA;
  output twiddle_rsc_0_9_RID;
  output twiddle_rsc_0_9_ARREADY;
  input twiddle_rsc_0_9_ARVALID;
  input twiddle_rsc_0_9_ARUSER;
  input [3:0] twiddle_rsc_0_9_ARREGION;
  input [3:0] twiddle_rsc_0_9_ARQOS;
  input [2:0] twiddle_rsc_0_9_ARPROT;
  input [3:0] twiddle_rsc_0_9_ARCACHE;
  input twiddle_rsc_0_9_ARLOCK;
  input [1:0] twiddle_rsc_0_9_ARBURST;
  input [2:0] twiddle_rsc_0_9_ARSIZE;
  input [7:0] twiddle_rsc_0_9_ARLEN;
  input [11:0] twiddle_rsc_0_9_ARADDR;
  input twiddle_rsc_0_9_ARID;
  input twiddle_rsc_0_9_BREADY;
  output twiddle_rsc_0_9_BVALID;
  output twiddle_rsc_0_9_BUSER;
  output [1:0] twiddle_rsc_0_9_BRESP;
  output twiddle_rsc_0_9_BID;
  output twiddle_rsc_0_9_WREADY;
  input twiddle_rsc_0_9_WVALID;
  input twiddle_rsc_0_9_WUSER;
  input twiddle_rsc_0_9_WLAST;
  input [3:0] twiddle_rsc_0_9_WSTRB;
  input [31:0] twiddle_rsc_0_9_WDATA;
  output twiddle_rsc_0_9_AWREADY;
  input twiddle_rsc_0_9_AWVALID;
  input twiddle_rsc_0_9_AWUSER;
  input [3:0] twiddle_rsc_0_9_AWREGION;
  input [3:0] twiddle_rsc_0_9_AWQOS;
  input [2:0] twiddle_rsc_0_9_AWPROT;
  input [3:0] twiddle_rsc_0_9_AWCACHE;
  input twiddle_rsc_0_9_AWLOCK;
  input [1:0] twiddle_rsc_0_9_AWBURST;
  input [2:0] twiddle_rsc_0_9_AWSIZE;
  input [7:0] twiddle_rsc_0_9_AWLEN;
  input [11:0] twiddle_rsc_0_9_AWADDR;
  input twiddle_rsc_0_9_AWID;
  input core_wen;
  input twiddle_rsc_0_9_i_oswt;
  output twiddle_rsc_0_9_i_wen_comp;
  input [5:0] twiddle_rsc_0_9_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_9_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_9_i_biwt;
  wire twiddle_rsc_0_9_i_bdwt;
  wire twiddle_rsc_0_9_i_bcwt;
  wire twiddle_rsc_0_9_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_9_i_s_raddr;
  wire [31:0] twiddle_rsc_0_9_i_s_din;
  wire twiddle_rsc_0_9_i_s_rrdy;
  wire twiddle_rsc_0_9_i_s_wrdy;
  wire twiddle_rsc_0_9_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp_inst_twiddle_rsc_0_9_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp_inst_twiddle_rsc_0_9_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_9_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_9_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_9_AWID),
      .AWADDR(twiddle_rsc_0_9_AWADDR),
      .AWLEN(twiddle_rsc_0_9_AWLEN),
      .AWSIZE(twiddle_rsc_0_9_AWSIZE),
      .AWBURST(twiddle_rsc_0_9_AWBURST),
      .AWLOCK(twiddle_rsc_0_9_AWLOCK),
      .AWCACHE(twiddle_rsc_0_9_AWCACHE),
      .AWPROT(twiddle_rsc_0_9_AWPROT),
      .AWQOS(twiddle_rsc_0_9_AWQOS),
      .AWREGION(twiddle_rsc_0_9_AWREGION),
      .AWUSER(twiddle_rsc_0_9_AWUSER),
      .AWVALID(twiddle_rsc_0_9_AWVALID),
      .AWREADY(twiddle_rsc_0_9_AWREADY),
      .WDATA(twiddle_rsc_0_9_WDATA),
      .WSTRB(twiddle_rsc_0_9_WSTRB),
      .WLAST(twiddle_rsc_0_9_WLAST),
      .WUSER(twiddle_rsc_0_9_WUSER),
      .WVALID(twiddle_rsc_0_9_WVALID),
      .WREADY(twiddle_rsc_0_9_WREADY),
      .BID(twiddle_rsc_0_9_BID),
      .BRESP(twiddle_rsc_0_9_BRESP),
      .BUSER(twiddle_rsc_0_9_BUSER),
      .BVALID(twiddle_rsc_0_9_BVALID),
      .BREADY(twiddle_rsc_0_9_BREADY),
      .ARID(twiddle_rsc_0_9_ARID),
      .ARADDR(twiddle_rsc_0_9_ARADDR),
      .ARLEN(twiddle_rsc_0_9_ARLEN),
      .ARSIZE(twiddle_rsc_0_9_ARSIZE),
      .ARBURST(twiddle_rsc_0_9_ARBURST),
      .ARLOCK(twiddle_rsc_0_9_ARLOCK),
      .ARCACHE(twiddle_rsc_0_9_ARCACHE),
      .ARPROT(twiddle_rsc_0_9_ARPROT),
      .ARQOS(twiddle_rsc_0_9_ARQOS),
      .ARREGION(twiddle_rsc_0_9_ARREGION),
      .ARUSER(twiddle_rsc_0_9_ARUSER),
      .ARVALID(twiddle_rsc_0_9_ARVALID),
      .ARREADY(twiddle_rsc_0_9_ARREADY),
      .RID(twiddle_rsc_0_9_RID),
      .RDATA(twiddle_rsc_0_9_RDATA),
      .RRESP(twiddle_rsc_0_9_RRESP),
      .RLAST(twiddle_rsc_0_9_RLAST),
      .RUSER(twiddle_rsc_0_9_RUSER),
      .RVALID(twiddle_rsc_0_9_RVALID),
      .RREADY(twiddle_rsc_0_9_RREADY),
      .s_re(twiddle_rsc_0_9_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_9_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_9_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_9_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_9_i_s_wrdy),
      .is_idle(twiddle_rsc_0_9_is_idle),
      .tr_write_done(twiddle_rsc_0_9_tr_write_done),
      .s_tdone(twiddle_rsc_0_9_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_ctrl peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_9_i_oswt(twiddle_rsc_0_9_i_oswt),
      .twiddle_rsc_0_9_i_biwt(twiddle_rsc_0_9_i_biwt),
      .twiddle_rsc_0_9_i_bdwt(twiddle_rsc_0_9_i_bdwt),
      .twiddle_rsc_0_9_i_bcwt(twiddle_rsc_0_9_i_bcwt),
      .twiddle_rsc_0_9_i_s_re_core_sct(twiddle_rsc_0_9_i_s_re_core_sct),
      .twiddle_rsc_0_9_i_s_rrdy(twiddle_rsc_0_9_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_9_i_oswt(twiddle_rsc_0_9_i_oswt),
      .twiddle_rsc_0_9_i_wen_comp(twiddle_rsc_0_9_i_wen_comp),
      .twiddle_rsc_0_9_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_9_i_twiddle_rsc_0_9_wait_dp_inst_twiddle_rsc_0_9_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_9_i_s_din_mxwt(twiddle_rsc_0_9_i_s_din_mxwt),
      .twiddle_rsc_0_9_i_biwt(twiddle_rsc_0_9_i_biwt),
      .twiddle_rsc_0_9_i_bdwt(twiddle_rsc_0_9_i_bdwt),
      .twiddle_rsc_0_9_i_bcwt(twiddle_rsc_0_9_i_bcwt),
      .twiddle_rsc_0_9_i_s_raddr(twiddle_rsc_0_9_i_s_raddr),
      .twiddle_rsc_0_9_i_s_raddr_core_sct(twiddle_rsc_0_9_i_s_re_core_sct),
      .twiddle_rsc_0_9_i_s_din(twiddle_rsc_0_9_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_8_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_8_i (
  clk, rst, twiddle_rsc_0_8_s_tdone, twiddle_rsc_0_8_tr_write_done, twiddle_rsc_0_8_RREADY,
      twiddle_rsc_0_8_RVALID, twiddle_rsc_0_8_RUSER, twiddle_rsc_0_8_RLAST, twiddle_rsc_0_8_RRESP,
      twiddle_rsc_0_8_RDATA, twiddle_rsc_0_8_RID, twiddle_rsc_0_8_ARREADY, twiddle_rsc_0_8_ARVALID,
      twiddle_rsc_0_8_ARUSER, twiddle_rsc_0_8_ARREGION, twiddle_rsc_0_8_ARQOS, twiddle_rsc_0_8_ARPROT,
      twiddle_rsc_0_8_ARCACHE, twiddle_rsc_0_8_ARLOCK, twiddle_rsc_0_8_ARBURST, twiddle_rsc_0_8_ARSIZE,
      twiddle_rsc_0_8_ARLEN, twiddle_rsc_0_8_ARADDR, twiddle_rsc_0_8_ARID, twiddle_rsc_0_8_BREADY,
      twiddle_rsc_0_8_BVALID, twiddle_rsc_0_8_BUSER, twiddle_rsc_0_8_BRESP, twiddle_rsc_0_8_BID,
      twiddle_rsc_0_8_WREADY, twiddle_rsc_0_8_WVALID, twiddle_rsc_0_8_WUSER, twiddle_rsc_0_8_WLAST,
      twiddle_rsc_0_8_WSTRB, twiddle_rsc_0_8_WDATA, twiddle_rsc_0_8_AWREADY, twiddle_rsc_0_8_AWVALID,
      twiddle_rsc_0_8_AWUSER, twiddle_rsc_0_8_AWREGION, twiddle_rsc_0_8_AWQOS, twiddle_rsc_0_8_AWPROT,
      twiddle_rsc_0_8_AWCACHE, twiddle_rsc_0_8_AWLOCK, twiddle_rsc_0_8_AWBURST, twiddle_rsc_0_8_AWSIZE,
      twiddle_rsc_0_8_AWLEN, twiddle_rsc_0_8_AWADDR, twiddle_rsc_0_8_AWID, core_wen,
      twiddle_rsc_0_8_i_oswt, twiddle_rsc_0_8_i_wen_comp, twiddle_rsc_0_8_i_s_raddr_core,
      twiddle_rsc_0_8_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_8_s_tdone;
  input twiddle_rsc_0_8_tr_write_done;
  input twiddle_rsc_0_8_RREADY;
  output twiddle_rsc_0_8_RVALID;
  output twiddle_rsc_0_8_RUSER;
  output twiddle_rsc_0_8_RLAST;
  output [1:0] twiddle_rsc_0_8_RRESP;
  output [31:0] twiddle_rsc_0_8_RDATA;
  output twiddle_rsc_0_8_RID;
  output twiddle_rsc_0_8_ARREADY;
  input twiddle_rsc_0_8_ARVALID;
  input twiddle_rsc_0_8_ARUSER;
  input [3:0] twiddle_rsc_0_8_ARREGION;
  input [3:0] twiddle_rsc_0_8_ARQOS;
  input [2:0] twiddle_rsc_0_8_ARPROT;
  input [3:0] twiddle_rsc_0_8_ARCACHE;
  input twiddle_rsc_0_8_ARLOCK;
  input [1:0] twiddle_rsc_0_8_ARBURST;
  input [2:0] twiddle_rsc_0_8_ARSIZE;
  input [7:0] twiddle_rsc_0_8_ARLEN;
  input [11:0] twiddle_rsc_0_8_ARADDR;
  input twiddle_rsc_0_8_ARID;
  input twiddle_rsc_0_8_BREADY;
  output twiddle_rsc_0_8_BVALID;
  output twiddle_rsc_0_8_BUSER;
  output [1:0] twiddle_rsc_0_8_BRESP;
  output twiddle_rsc_0_8_BID;
  output twiddle_rsc_0_8_WREADY;
  input twiddle_rsc_0_8_WVALID;
  input twiddle_rsc_0_8_WUSER;
  input twiddle_rsc_0_8_WLAST;
  input [3:0] twiddle_rsc_0_8_WSTRB;
  input [31:0] twiddle_rsc_0_8_WDATA;
  output twiddle_rsc_0_8_AWREADY;
  input twiddle_rsc_0_8_AWVALID;
  input twiddle_rsc_0_8_AWUSER;
  input [3:0] twiddle_rsc_0_8_AWREGION;
  input [3:0] twiddle_rsc_0_8_AWQOS;
  input [2:0] twiddle_rsc_0_8_AWPROT;
  input [3:0] twiddle_rsc_0_8_AWCACHE;
  input twiddle_rsc_0_8_AWLOCK;
  input [1:0] twiddle_rsc_0_8_AWBURST;
  input [2:0] twiddle_rsc_0_8_AWSIZE;
  input [7:0] twiddle_rsc_0_8_AWLEN;
  input [11:0] twiddle_rsc_0_8_AWADDR;
  input twiddle_rsc_0_8_AWID;
  input core_wen;
  input twiddle_rsc_0_8_i_oswt;
  output twiddle_rsc_0_8_i_wen_comp;
  input [5:0] twiddle_rsc_0_8_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_8_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_8_i_biwt;
  wire twiddle_rsc_0_8_i_bdwt;
  wire twiddle_rsc_0_8_i_bcwt;
  wire twiddle_rsc_0_8_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_8_i_s_raddr;
  wire [31:0] twiddle_rsc_0_8_i_s_din;
  wire twiddle_rsc_0_8_i_s_rrdy;
  wire twiddle_rsc_0_8_i_s_wrdy;
  wire twiddle_rsc_0_8_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp_inst_twiddle_rsc_0_8_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp_inst_twiddle_rsc_0_8_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_8_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_8_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_8_AWID),
      .AWADDR(twiddle_rsc_0_8_AWADDR),
      .AWLEN(twiddle_rsc_0_8_AWLEN),
      .AWSIZE(twiddle_rsc_0_8_AWSIZE),
      .AWBURST(twiddle_rsc_0_8_AWBURST),
      .AWLOCK(twiddle_rsc_0_8_AWLOCK),
      .AWCACHE(twiddle_rsc_0_8_AWCACHE),
      .AWPROT(twiddle_rsc_0_8_AWPROT),
      .AWQOS(twiddle_rsc_0_8_AWQOS),
      .AWREGION(twiddle_rsc_0_8_AWREGION),
      .AWUSER(twiddle_rsc_0_8_AWUSER),
      .AWVALID(twiddle_rsc_0_8_AWVALID),
      .AWREADY(twiddle_rsc_0_8_AWREADY),
      .WDATA(twiddle_rsc_0_8_WDATA),
      .WSTRB(twiddle_rsc_0_8_WSTRB),
      .WLAST(twiddle_rsc_0_8_WLAST),
      .WUSER(twiddle_rsc_0_8_WUSER),
      .WVALID(twiddle_rsc_0_8_WVALID),
      .WREADY(twiddle_rsc_0_8_WREADY),
      .BID(twiddle_rsc_0_8_BID),
      .BRESP(twiddle_rsc_0_8_BRESP),
      .BUSER(twiddle_rsc_0_8_BUSER),
      .BVALID(twiddle_rsc_0_8_BVALID),
      .BREADY(twiddle_rsc_0_8_BREADY),
      .ARID(twiddle_rsc_0_8_ARID),
      .ARADDR(twiddle_rsc_0_8_ARADDR),
      .ARLEN(twiddle_rsc_0_8_ARLEN),
      .ARSIZE(twiddle_rsc_0_8_ARSIZE),
      .ARBURST(twiddle_rsc_0_8_ARBURST),
      .ARLOCK(twiddle_rsc_0_8_ARLOCK),
      .ARCACHE(twiddle_rsc_0_8_ARCACHE),
      .ARPROT(twiddle_rsc_0_8_ARPROT),
      .ARQOS(twiddle_rsc_0_8_ARQOS),
      .ARREGION(twiddle_rsc_0_8_ARREGION),
      .ARUSER(twiddle_rsc_0_8_ARUSER),
      .ARVALID(twiddle_rsc_0_8_ARVALID),
      .ARREADY(twiddle_rsc_0_8_ARREADY),
      .RID(twiddle_rsc_0_8_RID),
      .RDATA(twiddle_rsc_0_8_RDATA),
      .RRESP(twiddle_rsc_0_8_RRESP),
      .RLAST(twiddle_rsc_0_8_RLAST),
      .RUSER(twiddle_rsc_0_8_RUSER),
      .RVALID(twiddle_rsc_0_8_RVALID),
      .RREADY(twiddle_rsc_0_8_RREADY),
      .s_re(twiddle_rsc_0_8_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_8_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_8_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_8_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_8_i_s_wrdy),
      .is_idle(twiddle_rsc_0_8_is_idle),
      .tr_write_done(twiddle_rsc_0_8_tr_write_done),
      .s_tdone(twiddle_rsc_0_8_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_ctrl peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_8_i_oswt(twiddle_rsc_0_8_i_oswt),
      .twiddle_rsc_0_8_i_biwt(twiddle_rsc_0_8_i_biwt),
      .twiddle_rsc_0_8_i_bdwt(twiddle_rsc_0_8_i_bdwt),
      .twiddle_rsc_0_8_i_bcwt(twiddle_rsc_0_8_i_bcwt),
      .twiddle_rsc_0_8_i_s_re_core_sct(twiddle_rsc_0_8_i_s_re_core_sct),
      .twiddle_rsc_0_8_i_s_rrdy(twiddle_rsc_0_8_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_8_i_oswt(twiddle_rsc_0_8_i_oswt),
      .twiddle_rsc_0_8_i_wen_comp(twiddle_rsc_0_8_i_wen_comp),
      .twiddle_rsc_0_8_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_8_i_twiddle_rsc_0_8_wait_dp_inst_twiddle_rsc_0_8_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_8_i_s_din_mxwt(twiddle_rsc_0_8_i_s_din_mxwt),
      .twiddle_rsc_0_8_i_biwt(twiddle_rsc_0_8_i_biwt),
      .twiddle_rsc_0_8_i_bdwt(twiddle_rsc_0_8_i_bdwt),
      .twiddle_rsc_0_8_i_bcwt(twiddle_rsc_0_8_i_bcwt),
      .twiddle_rsc_0_8_i_s_raddr(twiddle_rsc_0_8_i_s_raddr),
      .twiddle_rsc_0_8_i_s_raddr_core_sct(twiddle_rsc_0_8_i_s_re_core_sct),
      .twiddle_rsc_0_8_i_s_din(twiddle_rsc_0_8_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_7_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_7_i (
  clk, rst, twiddle_rsc_0_7_s_tdone, twiddle_rsc_0_7_tr_write_done, twiddle_rsc_0_7_RREADY,
      twiddle_rsc_0_7_RVALID, twiddle_rsc_0_7_RUSER, twiddle_rsc_0_7_RLAST, twiddle_rsc_0_7_RRESP,
      twiddle_rsc_0_7_RDATA, twiddle_rsc_0_7_RID, twiddle_rsc_0_7_ARREADY, twiddle_rsc_0_7_ARVALID,
      twiddle_rsc_0_7_ARUSER, twiddle_rsc_0_7_ARREGION, twiddle_rsc_0_7_ARQOS, twiddle_rsc_0_7_ARPROT,
      twiddle_rsc_0_7_ARCACHE, twiddle_rsc_0_7_ARLOCK, twiddle_rsc_0_7_ARBURST, twiddle_rsc_0_7_ARSIZE,
      twiddle_rsc_0_7_ARLEN, twiddle_rsc_0_7_ARADDR, twiddle_rsc_0_7_ARID, twiddle_rsc_0_7_BREADY,
      twiddle_rsc_0_7_BVALID, twiddle_rsc_0_7_BUSER, twiddle_rsc_0_7_BRESP, twiddle_rsc_0_7_BID,
      twiddle_rsc_0_7_WREADY, twiddle_rsc_0_7_WVALID, twiddle_rsc_0_7_WUSER, twiddle_rsc_0_7_WLAST,
      twiddle_rsc_0_7_WSTRB, twiddle_rsc_0_7_WDATA, twiddle_rsc_0_7_AWREADY, twiddle_rsc_0_7_AWVALID,
      twiddle_rsc_0_7_AWUSER, twiddle_rsc_0_7_AWREGION, twiddle_rsc_0_7_AWQOS, twiddle_rsc_0_7_AWPROT,
      twiddle_rsc_0_7_AWCACHE, twiddle_rsc_0_7_AWLOCK, twiddle_rsc_0_7_AWBURST, twiddle_rsc_0_7_AWSIZE,
      twiddle_rsc_0_7_AWLEN, twiddle_rsc_0_7_AWADDR, twiddle_rsc_0_7_AWID, core_wen,
      twiddle_rsc_0_7_i_oswt, twiddle_rsc_0_7_i_wen_comp, twiddle_rsc_0_7_i_s_raddr_core,
      twiddle_rsc_0_7_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_7_s_tdone;
  input twiddle_rsc_0_7_tr_write_done;
  input twiddle_rsc_0_7_RREADY;
  output twiddle_rsc_0_7_RVALID;
  output twiddle_rsc_0_7_RUSER;
  output twiddle_rsc_0_7_RLAST;
  output [1:0] twiddle_rsc_0_7_RRESP;
  output [31:0] twiddle_rsc_0_7_RDATA;
  output twiddle_rsc_0_7_RID;
  output twiddle_rsc_0_7_ARREADY;
  input twiddle_rsc_0_7_ARVALID;
  input twiddle_rsc_0_7_ARUSER;
  input [3:0] twiddle_rsc_0_7_ARREGION;
  input [3:0] twiddle_rsc_0_7_ARQOS;
  input [2:0] twiddle_rsc_0_7_ARPROT;
  input [3:0] twiddle_rsc_0_7_ARCACHE;
  input twiddle_rsc_0_7_ARLOCK;
  input [1:0] twiddle_rsc_0_7_ARBURST;
  input [2:0] twiddle_rsc_0_7_ARSIZE;
  input [7:0] twiddle_rsc_0_7_ARLEN;
  input [11:0] twiddle_rsc_0_7_ARADDR;
  input twiddle_rsc_0_7_ARID;
  input twiddle_rsc_0_7_BREADY;
  output twiddle_rsc_0_7_BVALID;
  output twiddle_rsc_0_7_BUSER;
  output [1:0] twiddle_rsc_0_7_BRESP;
  output twiddle_rsc_0_7_BID;
  output twiddle_rsc_0_7_WREADY;
  input twiddle_rsc_0_7_WVALID;
  input twiddle_rsc_0_7_WUSER;
  input twiddle_rsc_0_7_WLAST;
  input [3:0] twiddle_rsc_0_7_WSTRB;
  input [31:0] twiddle_rsc_0_7_WDATA;
  output twiddle_rsc_0_7_AWREADY;
  input twiddle_rsc_0_7_AWVALID;
  input twiddle_rsc_0_7_AWUSER;
  input [3:0] twiddle_rsc_0_7_AWREGION;
  input [3:0] twiddle_rsc_0_7_AWQOS;
  input [2:0] twiddle_rsc_0_7_AWPROT;
  input [3:0] twiddle_rsc_0_7_AWCACHE;
  input twiddle_rsc_0_7_AWLOCK;
  input [1:0] twiddle_rsc_0_7_AWBURST;
  input [2:0] twiddle_rsc_0_7_AWSIZE;
  input [7:0] twiddle_rsc_0_7_AWLEN;
  input [11:0] twiddle_rsc_0_7_AWADDR;
  input twiddle_rsc_0_7_AWID;
  input core_wen;
  input twiddle_rsc_0_7_i_oswt;
  output twiddle_rsc_0_7_i_wen_comp;
  input [5:0] twiddle_rsc_0_7_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_7_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_7_i_biwt;
  wire twiddle_rsc_0_7_i_bdwt;
  wire twiddle_rsc_0_7_i_bcwt;
  wire twiddle_rsc_0_7_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_7_i_s_raddr;
  wire [31:0] twiddle_rsc_0_7_i_s_din;
  wire twiddle_rsc_0_7_i_s_rrdy;
  wire twiddle_rsc_0_7_i_s_wrdy;
  wire twiddle_rsc_0_7_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp_inst_twiddle_rsc_0_7_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp_inst_twiddle_rsc_0_7_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_7_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_7_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_7_AWID),
      .AWADDR(twiddle_rsc_0_7_AWADDR),
      .AWLEN(twiddle_rsc_0_7_AWLEN),
      .AWSIZE(twiddle_rsc_0_7_AWSIZE),
      .AWBURST(twiddle_rsc_0_7_AWBURST),
      .AWLOCK(twiddle_rsc_0_7_AWLOCK),
      .AWCACHE(twiddle_rsc_0_7_AWCACHE),
      .AWPROT(twiddle_rsc_0_7_AWPROT),
      .AWQOS(twiddle_rsc_0_7_AWQOS),
      .AWREGION(twiddle_rsc_0_7_AWREGION),
      .AWUSER(twiddle_rsc_0_7_AWUSER),
      .AWVALID(twiddle_rsc_0_7_AWVALID),
      .AWREADY(twiddle_rsc_0_7_AWREADY),
      .WDATA(twiddle_rsc_0_7_WDATA),
      .WSTRB(twiddle_rsc_0_7_WSTRB),
      .WLAST(twiddle_rsc_0_7_WLAST),
      .WUSER(twiddle_rsc_0_7_WUSER),
      .WVALID(twiddle_rsc_0_7_WVALID),
      .WREADY(twiddle_rsc_0_7_WREADY),
      .BID(twiddle_rsc_0_7_BID),
      .BRESP(twiddle_rsc_0_7_BRESP),
      .BUSER(twiddle_rsc_0_7_BUSER),
      .BVALID(twiddle_rsc_0_7_BVALID),
      .BREADY(twiddle_rsc_0_7_BREADY),
      .ARID(twiddle_rsc_0_7_ARID),
      .ARADDR(twiddle_rsc_0_7_ARADDR),
      .ARLEN(twiddle_rsc_0_7_ARLEN),
      .ARSIZE(twiddle_rsc_0_7_ARSIZE),
      .ARBURST(twiddle_rsc_0_7_ARBURST),
      .ARLOCK(twiddle_rsc_0_7_ARLOCK),
      .ARCACHE(twiddle_rsc_0_7_ARCACHE),
      .ARPROT(twiddle_rsc_0_7_ARPROT),
      .ARQOS(twiddle_rsc_0_7_ARQOS),
      .ARREGION(twiddle_rsc_0_7_ARREGION),
      .ARUSER(twiddle_rsc_0_7_ARUSER),
      .ARVALID(twiddle_rsc_0_7_ARVALID),
      .ARREADY(twiddle_rsc_0_7_ARREADY),
      .RID(twiddle_rsc_0_7_RID),
      .RDATA(twiddle_rsc_0_7_RDATA),
      .RRESP(twiddle_rsc_0_7_RRESP),
      .RLAST(twiddle_rsc_0_7_RLAST),
      .RUSER(twiddle_rsc_0_7_RUSER),
      .RVALID(twiddle_rsc_0_7_RVALID),
      .RREADY(twiddle_rsc_0_7_RREADY),
      .s_re(twiddle_rsc_0_7_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_7_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_7_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_7_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_7_i_s_wrdy),
      .is_idle(twiddle_rsc_0_7_is_idle),
      .tr_write_done(twiddle_rsc_0_7_tr_write_done),
      .s_tdone(twiddle_rsc_0_7_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_ctrl peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_7_i_oswt(twiddle_rsc_0_7_i_oswt),
      .twiddle_rsc_0_7_i_biwt(twiddle_rsc_0_7_i_biwt),
      .twiddle_rsc_0_7_i_bdwt(twiddle_rsc_0_7_i_bdwt),
      .twiddle_rsc_0_7_i_bcwt(twiddle_rsc_0_7_i_bcwt),
      .twiddle_rsc_0_7_i_s_re_core_sct(twiddle_rsc_0_7_i_s_re_core_sct),
      .twiddle_rsc_0_7_i_s_rrdy(twiddle_rsc_0_7_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_7_i_oswt(twiddle_rsc_0_7_i_oswt),
      .twiddle_rsc_0_7_i_wen_comp(twiddle_rsc_0_7_i_wen_comp),
      .twiddle_rsc_0_7_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_7_i_twiddle_rsc_0_7_wait_dp_inst_twiddle_rsc_0_7_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_7_i_s_din_mxwt(twiddle_rsc_0_7_i_s_din_mxwt),
      .twiddle_rsc_0_7_i_biwt(twiddle_rsc_0_7_i_biwt),
      .twiddle_rsc_0_7_i_bdwt(twiddle_rsc_0_7_i_bdwt),
      .twiddle_rsc_0_7_i_bcwt(twiddle_rsc_0_7_i_bcwt),
      .twiddle_rsc_0_7_i_s_raddr(twiddle_rsc_0_7_i_s_raddr),
      .twiddle_rsc_0_7_i_s_raddr_core_sct(twiddle_rsc_0_7_i_s_re_core_sct),
      .twiddle_rsc_0_7_i_s_din(twiddle_rsc_0_7_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_6_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_6_i (
  clk, rst, twiddle_rsc_0_6_s_tdone, twiddle_rsc_0_6_tr_write_done, twiddle_rsc_0_6_RREADY,
      twiddle_rsc_0_6_RVALID, twiddle_rsc_0_6_RUSER, twiddle_rsc_0_6_RLAST, twiddle_rsc_0_6_RRESP,
      twiddle_rsc_0_6_RDATA, twiddle_rsc_0_6_RID, twiddle_rsc_0_6_ARREADY, twiddle_rsc_0_6_ARVALID,
      twiddle_rsc_0_6_ARUSER, twiddle_rsc_0_6_ARREGION, twiddle_rsc_0_6_ARQOS, twiddle_rsc_0_6_ARPROT,
      twiddle_rsc_0_6_ARCACHE, twiddle_rsc_0_6_ARLOCK, twiddle_rsc_0_6_ARBURST, twiddle_rsc_0_6_ARSIZE,
      twiddle_rsc_0_6_ARLEN, twiddle_rsc_0_6_ARADDR, twiddle_rsc_0_6_ARID, twiddle_rsc_0_6_BREADY,
      twiddle_rsc_0_6_BVALID, twiddle_rsc_0_6_BUSER, twiddle_rsc_0_6_BRESP, twiddle_rsc_0_6_BID,
      twiddle_rsc_0_6_WREADY, twiddle_rsc_0_6_WVALID, twiddle_rsc_0_6_WUSER, twiddle_rsc_0_6_WLAST,
      twiddle_rsc_0_6_WSTRB, twiddle_rsc_0_6_WDATA, twiddle_rsc_0_6_AWREADY, twiddle_rsc_0_6_AWVALID,
      twiddle_rsc_0_6_AWUSER, twiddle_rsc_0_6_AWREGION, twiddle_rsc_0_6_AWQOS, twiddle_rsc_0_6_AWPROT,
      twiddle_rsc_0_6_AWCACHE, twiddle_rsc_0_6_AWLOCK, twiddle_rsc_0_6_AWBURST, twiddle_rsc_0_6_AWSIZE,
      twiddle_rsc_0_6_AWLEN, twiddle_rsc_0_6_AWADDR, twiddle_rsc_0_6_AWID, core_wen,
      twiddle_rsc_0_6_i_oswt, twiddle_rsc_0_6_i_wen_comp, twiddle_rsc_0_6_i_s_raddr_core,
      twiddle_rsc_0_6_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_6_s_tdone;
  input twiddle_rsc_0_6_tr_write_done;
  input twiddle_rsc_0_6_RREADY;
  output twiddle_rsc_0_6_RVALID;
  output twiddle_rsc_0_6_RUSER;
  output twiddle_rsc_0_6_RLAST;
  output [1:0] twiddle_rsc_0_6_RRESP;
  output [31:0] twiddle_rsc_0_6_RDATA;
  output twiddle_rsc_0_6_RID;
  output twiddle_rsc_0_6_ARREADY;
  input twiddle_rsc_0_6_ARVALID;
  input twiddle_rsc_0_6_ARUSER;
  input [3:0] twiddle_rsc_0_6_ARREGION;
  input [3:0] twiddle_rsc_0_6_ARQOS;
  input [2:0] twiddle_rsc_0_6_ARPROT;
  input [3:0] twiddle_rsc_0_6_ARCACHE;
  input twiddle_rsc_0_6_ARLOCK;
  input [1:0] twiddle_rsc_0_6_ARBURST;
  input [2:0] twiddle_rsc_0_6_ARSIZE;
  input [7:0] twiddle_rsc_0_6_ARLEN;
  input [11:0] twiddle_rsc_0_6_ARADDR;
  input twiddle_rsc_0_6_ARID;
  input twiddle_rsc_0_6_BREADY;
  output twiddle_rsc_0_6_BVALID;
  output twiddle_rsc_0_6_BUSER;
  output [1:0] twiddle_rsc_0_6_BRESP;
  output twiddle_rsc_0_6_BID;
  output twiddle_rsc_0_6_WREADY;
  input twiddle_rsc_0_6_WVALID;
  input twiddle_rsc_0_6_WUSER;
  input twiddle_rsc_0_6_WLAST;
  input [3:0] twiddle_rsc_0_6_WSTRB;
  input [31:0] twiddle_rsc_0_6_WDATA;
  output twiddle_rsc_0_6_AWREADY;
  input twiddle_rsc_0_6_AWVALID;
  input twiddle_rsc_0_6_AWUSER;
  input [3:0] twiddle_rsc_0_6_AWREGION;
  input [3:0] twiddle_rsc_0_6_AWQOS;
  input [2:0] twiddle_rsc_0_6_AWPROT;
  input [3:0] twiddle_rsc_0_6_AWCACHE;
  input twiddle_rsc_0_6_AWLOCK;
  input [1:0] twiddle_rsc_0_6_AWBURST;
  input [2:0] twiddle_rsc_0_6_AWSIZE;
  input [7:0] twiddle_rsc_0_6_AWLEN;
  input [11:0] twiddle_rsc_0_6_AWADDR;
  input twiddle_rsc_0_6_AWID;
  input core_wen;
  input twiddle_rsc_0_6_i_oswt;
  output twiddle_rsc_0_6_i_wen_comp;
  input [5:0] twiddle_rsc_0_6_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_6_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_6_i_biwt;
  wire twiddle_rsc_0_6_i_bdwt;
  wire twiddle_rsc_0_6_i_bcwt;
  wire twiddle_rsc_0_6_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_6_i_s_raddr;
  wire [31:0] twiddle_rsc_0_6_i_s_din;
  wire twiddle_rsc_0_6_i_s_rrdy;
  wire twiddle_rsc_0_6_i_s_wrdy;
  wire twiddle_rsc_0_6_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp_inst_twiddle_rsc_0_6_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp_inst_twiddle_rsc_0_6_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_6_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_6_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_6_AWID),
      .AWADDR(twiddle_rsc_0_6_AWADDR),
      .AWLEN(twiddle_rsc_0_6_AWLEN),
      .AWSIZE(twiddle_rsc_0_6_AWSIZE),
      .AWBURST(twiddle_rsc_0_6_AWBURST),
      .AWLOCK(twiddle_rsc_0_6_AWLOCK),
      .AWCACHE(twiddle_rsc_0_6_AWCACHE),
      .AWPROT(twiddle_rsc_0_6_AWPROT),
      .AWQOS(twiddle_rsc_0_6_AWQOS),
      .AWREGION(twiddle_rsc_0_6_AWREGION),
      .AWUSER(twiddle_rsc_0_6_AWUSER),
      .AWVALID(twiddle_rsc_0_6_AWVALID),
      .AWREADY(twiddle_rsc_0_6_AWREADY),
      .WDATA(twiddle_rsc_0_6_WDATA),
      .WSTRB(twiddle_rsc_0_6_WSTRB),
      .WLAST(twiddle_rsc_0_6_WLAST),
      .WUSER(twiddle_rsc_0_6_WUSER),
      .WVALID(twiddle_rsc_0_6_WVALID),
      .WREADY(twiddle_rsc_0_6_WREADY),
      .BID(twiddle_rsc_0_6_BID),
      .BRESP(twiddle_rsc_0_6_BRESP),
      .BUSER(twiddle_rsc_0_6_BUSER),
      .BVALID(twiddle_rsc_0_6_BVALID),
      .BREADY(twiddle_rsc_0_6_BREADY),
      .ARID(twiddle_rsc_0_6_ARID),
      .ARADDR(twiddle_rsc_0_6_ARADDR),
      .ARLEN(twiddle_rsc_0_6_ARLEN),
      .ARSIZE(twiddle_rsc_0_6_ARSIZE),
      .ARBURST(twiddle_rsc_0_6_ARBURST),
      .ARLOCK(twiddle_rsc_0_6_ARLOCK),
      .ARCACHE(twiddle_rsc_0_6_ARCACHE),
      .ARPROT(twiddle_rsc_0_6_ARPROT),
      .ARQOS(twiddle_rsc_0_6_ARQOS),
      .ARREGION(twiddle_rsc_0_6_ARREGION),
      .ARUSER(twiddle_rsc_0_6_ARUSER),
      .ARVALID(twiddle_rsc_0_6_ARVALID),
      .ARREADY(twiddle_rsc_0_6_ARREADY),
      .RID(twiddle_rsc_0_6_RID),
      .RDATA(twiddle_rsc_0_6_RDATA),
      .RRESP(twiddle_rsc_0_6_RRESP),
      .RLAST(twiddle_rsc_0_6_RLAST),
      .RUSER(twiddle_rsc_0_6_RUSER),
      .RVALID(twiddle_rsc_0_6_RVALID),
      .RREADY(twiddle_rsc_0_6_RREADY),
      .s_re(twiddle_rsc_0_6_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_6_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_6_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_6_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_6_i_s_wrdy),
      .is_idle(twiddle_rsc_0_6_is_idle),
      .tr_write_done(twiddle_rsc_0_6_tr_write_done),
      .s_tdone(twiddle_rsc_0_6_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_ctrl peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_6_i_oswt(twiddle_rsc_0_6_i_oswt),
      .twiddle_rsc_0_6_i_biwt(twiddle_rsc_0_6_i_biwt),
      .twiddle_rsc_0_6_i_bdwt(twiddle_rsc_0_6_i_bdwt),
      .twiddle_rsc_0_6_i_bcwt(twiddle_rsc_0_6_i_bcwt),
      .twiddle_rsc_0_6_i_s_re_core_sct(twiddle_rsc_0_6_i_s_re_core_sct),
      .twiddle_rsc_0_6_i_s_rrdy(twiddle_rsc_0_6_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_6_i_oswt(twiddle_rsc_0_6_i_oswt),
      .twiddle_rsc_0_6_i_wen_comp(twiddle_rsc_0_6_i_wen_comp),
      .twiddle_rsc_0_6_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_6_i_twiddle_rsc_0_6_wait_dp_inst_twiddle_rsc_0_6_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_6_i_s_din_mxwt(twiddle_rsc_0_6_i_s_din_mxwt),
      .twiddle_rsc_0_6_i_biwt(twiddle_rsc_0_6_i_biwt),
      .twiddle_rsc_0_6_i_bdwt(twiddle_rsc_0_6_i_bdwt),
      .twiddle_rsc_0_6_i_bcwt(twiddle_rsc_0_6_i_bcwt),
      .twiddle_rsc_0_6_i_s_raddr(twiddle_rsc_0_6_i_s_raddr),
      .twiddle_rsc_0_6_i_s_raddr_core_sct(twiddle_rsc_0_6_i_s_re_core_sct),
      .twiddle_rsc_0_6_i_s_din(twiddle_rsc_0_6_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_5_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_5_i (
  clk, rst, twiddle_rsc_0_5_s_tdone, twiddle_rsc_0_5_tr_write_done, twiddle_rsc_0_5_RREADY,
      twiddle_rsc_0_5_RVALID, twiddle_rsc_0_5_RUSER, twiddle_rsc_0_5_RLAST, twiddle_rsc_0_5_RRESP,
      twiddle_rsc_0_5_RDATA, twiddle_rsc_0_5_RID, twiddle_rsc_0_5_ARREADY, twiddle_rsc_0_5_ARVALID,
      twiddle_rsc_0_5_ARUSER, twiddle_rsc_0_5_ARREGION, twiddle_rsc_0_5_ARQOS, twiddle_rsc_0_5_ARPROT,
      twiddle_rsc_0_5_ARCACHE, twiddle_rsc_0_5_ARLOCK, twiddle_rsc_0_5_ARBURST, twiddle_rsc_0_5_ARSIZE,
      twiddle_rsc_0_5_ARLEN, twiddle_rsc_0_5_ARADDR, twiddle_rsc_0_5_ARID, twiddle_rsc_0_5_BREADY,
      twiddle_rsc_0_5_BVALID, twiddle_rsc_0_5_BUSER, twiddle_rsc_0_5_BRESP, twiddle_rsc_0_5_BID,
      twiddle_rsc_0_5_WREADY, twiddle_rsc_0_5_WVALID, twiddle_rsc_0_5_WUSER, twiddle_rsc_0_5_WLAST,
      twiddle_rsc_0_5_WSTRB, twiddle_rsc_0_5_WDATA, twiddle_rsc_0_5_AWREADY, twiddle_rsc_0_5_AWVALID,
      twiddle_rsc_0_5_AWUSER, twiddle_rsc_0_5_AWREGION, twiddle_rsc_0_5_AWQOS, twiddle_rsc_0_5_AWPROT,
      twiddle_rsc_0_5_AWCACHE, twiddle_rsc_0_5_AWLOCK, twiddle_rsc_0_5_AWBURST, twiddle_rsc_0_5_AWSIZE,
      twiddle_rsc_0_5_AWLEN, twiddle_rsc_0_5_AWADDR, twiddle_rsc_0_5_AWID, core_wen,
      twiddle_rsc_0_5_i_oswt, twiddle_rsc_0_5_i_wen_comp, twiddle_rsc_0_5_i_s_raddr_core,
      twiddle_rsc_0_5_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_5_s_tdone;
  input twiddle_rsc_0_5_tr_write_done;
  input twiddle_rsc_0_5_RREADY;
  output twiddle_rsc_0_5_RVALID;
  output twiddle_rsc_0_5_RUSER;
  output twiddle_rsc_0_5_RLAST;
  output [1:0] twiddle_rsc_0_5_RRESP;
  output [31:0] twiddle_rsc_0_5_RDATA;
  output twiddle_rsc_0_5_RID;
  output twiddle_rsc_0_5_ARREADY;
  input twiddle_rsc_0_5_ARVALID;
  input twiddle_rsc_0_5_ARUSER;
  input [3:0] twiddle_rsc_0_5_ARREGION;
  input [3:0] twiddle_rsc_0_5_ARQOS;
  input [2:0] twiddle_rsc_0_5_ARPROT;
  input [3:0] twiddle_rsc_0_5_ARCACHE;
  input twiddle_rsc_0_5_ARLOCK;
  input [1:0] twiddle_rsc_0_5_ARBURST;
  input [2:0] twiddle_rsc_0_5_ARSIZE;
  input [7:0] twiddle_rsc_0_5_ARLEN;
  input [11:0] twiddle_rsc_0_5_ARADDR;
  input twiddle_rsc_0_5_ARID;
  input twiddle_rsc_0_5_BREADY;
  output twiddle_rsc_0_5_BVALID;
  output twiddle_rsc_0_5_BUSER;
  output [1:0] twiddle_rsc_0_5_BRESP;
  output twiddle_rsc_0_5_BID;
  output twiddle_rsc_0_5_WREADY;
  input twiddle_rsc_0_5_WVALID;
  input twiddle_rsc_0_5_WUSER;
  input twiddle_rsc_0_5_WLAST;
  input [3:0] twiddle_rsc_0_5_WSTRB;
  input [31:0] twiddle_rsc_0_5_WDATA;
  output twiddle_rsc_0_5_AWREADY;
  input twiddle_rsc_0_5_AWVALID;
  input twiddle_rsc_0_5_AWUSER;
  input [3:0] twiddle_rsc_0_5_AWREGION;
  input [3:0] twiddle_rsc_0_5_AWQOS;
  input [2:0] twiddle_rsc_0_5_AWPROT;
  input [3:0] twiddle_rsc_0_5_AWCACHE;
  input twiddle_rsc_0_5_AWLOCK;
  input [1:0] twiddle_rsc_0_5_AWBURST;
  input [2:0] twiddle_rsc_0_5_AWSIZE;
  input [7:0] twiddle_rsc_0_5_AWLEN;
  input [11:0] twiddle_rsc_0_5_AWADDR;
  input twiddle_rsc_0_5_AWID;
  input core_wen;
  input twiddle_rsc_0_5_i_oswt;
  output twiddle_rsc_0_5_i_wen_comp;
  input [5:0] twiddle_rsc_0_5_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_5_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_5_i_biwt;
  wire twiddle_rsc_0_5_i_bdwt;
  wire twiddle_rsc_0_5_i_bcwt;
  wire twiddle_rsc_0_5_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_5_i_s_raddr;
  wire [31:0] twiddle_rsc_0_5_i_s_din;
  wire twiddle_rsc_0_5_i_s_rrdy;
  wire twiddle_rsc_0_5_i_s_wrdy;
  wire twiddle_rsc_0_5_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp_inst_twiddle_rsc_0_5_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp_inst_twiddle_rsc_0_5_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_5_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_5_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_5_AWID),
      .AWADDR(twiddle_rsc_0_5_AWADDR),
      .AWLEN(twiddle_rsc_0_5_AWLEN),
      .AWSIZE(twiddle_rsc_0_5_AWSIZE),
      .AWBURST(twiddle_rsc_0_5_AWBURST),
      .AWLOCK(twiddle_rsc_0_5_AWLOCK),
      .AWCACHE(twiddle_rsc_0_5_AWCACHE),
      .AWPROT(twiddle_rsc_0_5_AWPROT),
      .AWQOS(twiddle_rsc_0_5_AWQOS),
      .AWREGION(twiddle_rsc_0_5_AWREGION),
      .AWUSER(twiddle_rsc_0_5_AWUSER),
      .AWVALID(twiddle_rsc_0_5_AWVALID),
      .AWREADY(twiddle_rsc_0_5_AWREADY),
      .WDATA(twiddle_rsc_0_5_WDATA),
      .WSTRB(twiddle_rsc_0_5_WSTRB),
      .WLAST(twiddle_rsc_0_5_WLAST),
      .WUSER(twiddle_rsc_0_5_WUSER),
      .WVALID(twiddle_rsc_0_5_WVALID),
      .WREADY(twiddle_rsc_0_5_WREADY),
      .BID(twiddle_rsc_0_5_BID),
      .BRESP(twiddle_rsc_0_5_BRESP),
      .BUSER(twiddle_rsc_0_5_BUSER),
      .BVALID(twiddle_rsc_0_5_BVALID),
      .BREADY(twiddle_rsc_0_5_BREADY),
      .ARID(twiddle_rsc_0_5_ARID),
      .ARADDR(twiddle_rsc_0_5_ARADDR),
      .ARLEN(twiddle_rsc_0_5_ARLEN),
      .ARSIZE(twiddle_rsc_0_5_ARSIZE),
      .ARBURST(twiddle_rsc_0_5_ARBURST),
      .ARLOCK(twiddle_rsc_0_5_ARLOCK),
      .ARCACHE(twiddle_rsc_0_5_ARCACHE),
      .ARPROT(twiddle_rsc_0_5_ARPROT),
      .ARQOS(twiddle_rsc_0_5_ARQOS),
      .ARREGION(twiddle_rsc_0_5_ARREGION),
      .ARUSER(twiddle_rsc_0_5_ARUSER),
      .ARVALID(twiddle_rsc_0_5_ARVALID),
      .ARREADY(twiddle_rsc_0_5_ARREADY),
      .RID(twiddle_rsc_0_5_RID),
      .RDATA(twiddle_rsc_0_5_RDATA),
      .RRESP(twiddle_rsc_0_5_RRESP),
      .RLAST(twiddle_rsc_0_5_RLAST),
      .RUSER(twiddle_rsc_0_5_RUSER),
      .RVALID(twiddle_rsc_0_5_RVALID),
      .RREADY(twiddle_rsc_0_5_RREADY),
      .s_re(twiddle_rsc_0_5_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_5_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_5_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_5_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_5_i_s_wrdy),
      .is_idle(twiddle_rsc_0_5_is_idle),
      .tr_write_done(twiddle_rsc_0_5_tr_write_done),
      .s_tdone(twiddle_rsc_0_5_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_ctrl peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_5_i_oswt(twiddle_rsc_0_5_i_oswt),
      .twiddle_rsc_0_5_i_biwt(twiddle_rsc_0_5_i_biwt),
      .twiddle_rsc_0_5_i_bdwt(twiddle_rsc_0_5_i_bdwt),
      .twiddle_rsc_0_5_i_bcwt(twiddle_rsc_0_5_i_bcwt),
      .twiddle_rsc_0_5_i_s_re_core_sct(twiddle_rsc_0_5_i_s_re_core_sct),
      .twiddle_rsc_0_5_i_s_rrdy(twiddle_rsc_0_5_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_5_i_oswt(twiddle_rsc_0_5_i_oswt),
      .twiddle_rsc_0_5_i_wen_comp(twiddle_rsc_0_5_i_wen_comp),
      .twiddle_rsc_0_5_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_5_i_twiddle_rsc_0_5_wait_dp_inst_twiddle_rsc_0_5_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_5_i_s_din_mxwt(twiddle_rsc_0_5_i_s_din_mxwt),
      .twiddle_rsc_0_5_i_biwt(twiddle_rsc_0_5_i_biwt),
      .twiddle_rsc_0_5_i_bdwt(twiddle_rsc_0_5_i_bdwt),
      .twiddle_rsc_0_5_i_bcwt(twiddle_rsc_0_5_i_bcwt),
      .twiddle_rsc_0_5_i_s_raddr(twiddle_rsc_0_5_i_s_raddr),
      .twiddle_rsc_0_5_i_s_raddr_core_sct(twiddle_rsc_0_5_i_s_re_core_sct),
      .twiddle_rsc_0_5_i_s_din(twiddle_rsc_0_5_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_4_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_4_i (
  clk, rst, twiddle_rsc_0_4_s_tdone, twiddle_rsc_0_4_tr_write_done, twiddle_rsc_0_4_RREADY,
      twiddle_rsc_0_4_RVALID, twiddle_rsc_0_4_RUSER, twiddle_rsc_0_4_RLAST, twiddle_rsc_0_4_RRESP,
      twiddle_rsc_0_4_RDATA, twiddle_rsc_0_4_RID, twiddle_rsc_0_4_ARREADY, twiddle_rsc_0_4_ARVALID,
      twiddle_rsc_0_4_ARUSER, twiddle_rsc_0_4_ARREGION, twiddle_rsc_0_4_ARQOS, twiddle_rsc_0_4_ARPROT,
      twiddle_rsc_0_4_ARCACHE, twiddle_rsc_0_4_ARLOCK, twiddle_rsc_0_4_ARBURST, twiddle_rsc_0_4_ARSIZE,
      twiddle_rsc_0_4_ARLEN, twiddle_rsc_0_4_ARADDR, twiddle_rsc_0_4_ARID, twiddle_rsc_0_4_BREADY,
      twiddle_rsc_0_4_BVALID, twiddle_rsc_0_4_BUSER, twiddle_rsc_0_4_BRESP, twiddle_rsc_0_4_BID,
      twiddle_rsc_0_4_WREADY, twiddle_rsc_0_4_WVALID, twiddle_rsc_0_4_WUSER, twiddle_rsc_0_4_WLAST,
      twiddle_rsc_0_4_WSTRB, twiddle_rsc_0_4_WDATA, twiddle_rsc_0_4_AWREADY, twiddle_rsc_0_4_AWVALID,
      twiddle_rsc_0_4_AWUSER, twiddle_rsc_0_4_AWREGION, twiddle_rsc_0_4_AWQOS, twiddle_rsc_0_4_AWPROT,
      twiddle_rsc_0_4_AWCACHE, twiddle_rsc_0_4_AWLOCK, twiddle_rsc_0_4_AWBURST, twiddle_rsc_0_4_AWSIZE,
      twiddle_rsc_0_4_AWLEN, twiddle_rsc_0_4_AWADDR, twiddle_rsc_0_4_AWID, core_wen,
      twiddle_rsc_0_4_i_oswt, twiddle_rsc_0_4_i_wen_comp, twiddle_rsc_0_4_i_s_raddr_core,
      twiddle_rsc_0_4_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_4_s_tdone;
  input twiddle_rsc_0_4_tr_write_done;
  input twiddle_rsc_0_4_RREADY;
  output twiddle_rsc_0_4_RVALID;
  output twiddle_rsc_0_4_RUSER;
  output twiddle_rsc_0_4_RLAST;
  output [1:0] twiddle_rsc_0_4_RRESP;
  output [31:0] twiddle_rsc_0_4_RDATA;
  output twiddle_rsc_0_4_RID;
  output twiddle_rsc_0_4_ARREADY;
  input twiddle_rsc_0_4_ARVALID;
  input twiddle_rsc_0_4_ARUSER;
  input [3:0] twiddle_rsc_0_4_ARREGION;
  input [3:0] twiddle_rsc_0_4_ARQOS;
  input [2:0] twiddle_rsc_0_4_ARPROT;
  input [3:0] twiddle_rsc_0_4_ARCACHE;
  input twiddle_rsc_0_4_ARLOCK;
  input [1:0] twiddle_rsc_0_4_ARBURST;
  input [2:0] twiddle_rsc_0_4_ARSIZE;
  input [7:0] twiddle_rsc_0_4_ARLEN;
  input [11:0] twiddle_rsc_0_4_ARADDR;
  input twiddle_rsc_0_4_ARID;
  input twiddle_rsc_0_4_BREADY;
  output twiddle_rsc_0_4_BVALID;
  output twiddle_rsc_0_4_BUSER;
  output [1:0] twiddle_rsc_0_4_BRESP;
  output twiddle_rsc_0_4_BID;
  output twiddle_rsc_0_4_WREADY;
  input twiddle_rsc_0_4_WVALID;
  input twiddle_rsc_0_4_WUSER;
  input twiddle_rsc_0_4_WLAST;
  input [3:0] twiddle_rsc_0_4_WSTRB;
  input [31:0] twiddle_rsc_0_4_WDATA;
  output twiddle_rsc_0_4_AWREADY;
  input twiddle_rsc_0_4_AWVALID;
  input twiddle_rsc_0_4_AWUSER;
  input [3:0] twiddle_rsc_0_4_AWREGION;
  input [3:0] twiddle_rsc_0_4_AWQOS;
  input [2:0] twiddle_rsc_0_4_AWPROT;
  input [3:0] twiddle_rsc_0_4_AWCACHE;
  input twiddle_rsc_0_4_AWLOCK;
  input [1:0] twiddle_rsc_0_4_AWBURST;
  input [2:0] twiddle_rsc_0_4_AWSIZE;
  input [7:0] twiddle_rsc_0_4_AWLEN;
  input [11:0] twiddle_rsc_0_4_AWADDR;
  input twiddle_rsc_0_4_AWID;
  input core_wen;
  input twiddle_rsc_0_4_i_oswt;
  output twiddle_rsc_0_4_i_wen_comp;
  input [5:0] twiddle_rsc_0_4_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_4_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_4_i_biwt;
  wire twiddle_rsc_0_4_i_bdwt;
  wire twiddle_rsc_0_4_i_bcwt;
  wire twiddle_rsc_0_4_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_4_i_s_raddr;
  wire [31:0] twiddle_rsc_0_4_i_s_din;
  wire twiddle_rsc_0_4_i_s_rrdy;
  wire twiddle_rsc_0_4_i_s_wrdy;
  wire twiddle_rsc_0_4_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp_inst_twiddle_rsc_0_4_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp_inst_twiddle_rsc_0_4_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_4_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_4_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_4_AWID),
      .AWADDR(twiddle_rsc_0_4_AWADDR),
      .AWLEN(twiddle_rsc_0_4_AWLEN),
      .AWSIZE(twiddle_rsc_0_4_AWSIZE),
      .AWBURST(twiddle_rsc_0_4_AWBURST),
      .AWLOCK(twiddle_rsc_0_4_AWLOCK),
      .AWCACHE(twiddle_rsc_0_4_AWCACHE),
      .AWPROT(twiddle_rsc_0_4_AWPROT),
      .AWQOS(twiddle_rsc_0_4_AWQOS),
      .AWREGION(twiddle_rsc_0_4_AWREGION),
      .AWUSER(twiddle_rsc_0_4_AWUSER),
      .AWVALID(twiddle_rsc_0_4_AWVALID),
      .AWREADY(twiddle_rsc_0_4_AWREADY),
      .WDATA(twiddle_rsc_0_4_WDATA),
      .WSTRB(twiddle_rsc_0_4_WSTRB),
      .WLAST(twiddle_rsc_0_4_WLAST),
      .WUSER(twiddle_rsc_0_4_WUSER),
      .WVALID(twiddle_rsc_0_4_WVALID),
      .WREADY(twiddle_rsc_0_4_WREADY),
      .BID(twiddle_rsc_0_4_BID),
      .BRESP(twiddle_rsc_0_4_BRESP),
      .BUSER(twiddle_rsc_0_4_BUSER),
      .BVALID(twiddle_rsc_0_4_BVALID),
      .BREADY(twiddle_rsc_0_4_BREADY),
      .ARID(twiddle_rsc_0_4_ARID),
      .ARADDR(twiddle_rsc_0_4_ARADDR),
      .ARLEN(twiddle_rsc_0_4_ARLEN),
      .ARSIZE(twiddle_rsc_0_4_ARSIZE),
      .ARBURST(twiddle_rsc_0_4_ARBURST),
      .ARLOCK(twiddle_rsc_0_4_ARLOCK),
      .ARCACHE(twiddle_rsc_0_4_ARCACHE),
      .ARPROT(twiddle_rsc_0_4_ARPROT),
      .ARQOS(twiddle_rsc_0_4_ARQOS),
      .ARREGION(twiddle_rsc_0_4_ARREGION),
      .ARUSER(twiddle_rsc_0_4_ARUSER),
      .ARVALID(twiddle_rsc_0_4_ARVALID),
      .ARREADY(twiddle_rsc_0_4_ARREADY),
      .RID(twiddle_rsc_0_4_RID),
      .RDATA(twiddle_rsc_0_4_RDATA),
      .RRESP(twiddle_rsc_0_4_RRESP),
      .RLAST(twiddle_rsc_0_4_RLAST),
      .RUSER(twiddle_rsc_0_4_RUSER),
      .RVALID(twiddle_rsc_0_4_RVALID),
      .RREADY(twiddle_rsc_0_4_RREADY),
      .s_re(twiddle_rsc_0_4_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_4_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_4_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_4_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_4_i_s_wrdy),
      .is_idle(twiddle_rsc_0_4_is_idle),
      .tr_write_done(twiddle_rsc_0_4_tr_write_done),
      .s_tdone(twiddle_rsc_0_4_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_ctrl peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_4_i_oswt(twiddle_rsc_0_4_i_oswt),
      .twiddle_rsc_0_4_i_biwt(twiddle_rsc_0_4_i_biwt),
      .twiddle_rsc_0_4_i_bdwt(twiddle_rsc_0_4_i_bdwt),
      .twiddle_rsc_0_4_i_bcwt(twiddle_rsc_0_4_i_bcwt),
      .twiddle_rsc_0_4_i_s_re_core_sct(twiddle_rsc_0_4_i_s_re_core_sct),
      .twiddle_rsc_0_4_i_s_rrdy(twiddle_rsc_0_4_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_4_i_oswt(twiddle_rsc_0_4_i_oswt),
      .twiddle_rsc_0_4_i_wen_comp(twiddle_rsc_0_4_i_wen_comp),
      .twiddle_rsc_0_4_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_4_i_twiddle_rsc_0_4_wait_dp_inst_twiddle_rsc_0_4_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_4_i_s_din_mxwt(twiddle_rsc_0_4_i_s_din_mxwt),
      .twiddle_rsc_0_4_i_biwt(twiddle_rsc_0_4_i_biwt),
      .twiddle_rsc_0_4_i_bdwt(twiddle_rsc_0_4_i_bdwt),
      .twiddle_rsc_0_4_i_bcwt(twiddle_rsc_0_4_i_bcwt),
      .twiddle_rsc_0_4_i_s_raddr(twiddle_rsc_0_4_i_s_raddr),
      .twiddle_rsc_0_4_i_s_raddr_core_sct(twiddle_rsc_0_4_i_s_re_core_sct),
      .twiddle_rsc_0_4_i_s_din(twiddle_rsc_0_4_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_3_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_3_i (
  clk, rst, twiddle_rsc_0_3_s_tdone, twiddle_rsc_0_3_tr_write_done, twiddle_rsc_0_3_RREADY,
      twiddle_rsc_0_3_RVALID, twiddle_rsc_0_3_RUSER, twiddle_rsc_0_3_RLAST, twiddle_rsc_0_3_RRESP,
      twiddle_rsc_0_3_RDATA, twiddle_rsc_0_3_RID, twiddle_rsc_0_3_ARREADY, twiddle_rsc_0_3_ARVALID,
      twiddle_rsc_0_3_ARUSER, twiddle_rsc_0_3_ARREGION, twiddle_rsc_0_3_ARQOS, twiddle_rsc_0_3_ARPROT,
      twiddle_rsc_0_3_ARCACHE, twiddle_rsc_0_3_ARLOCK, twiddle_rsc_0_3_ARBURST, twiddle_rsc_0_3_ARSIZE,
      twiddle_rsc_0_3_ARLEN, twiddle_rsc_0_3_ARADDR, twiddle_rsc_0_3_ARID, twiddle_rsc_0_3_BREADY,
      twiddle_rsc_0_3_BVALID, twiddle_rsc_0_3_BUSER, twiddle_rsc_0_3_BRESP, twiddle_rsc_0_3_BID,
      twiddle_rsc_0_3_WREADY, twiddle_rsc_0_3_WVALID, twiddle_rsc_0_3_WUSER, twiddle_rsc_0_3_WLAST,
      twiddle_rsc_0_3_WSTRB, twiddle_rsc_0_3_WDATA, twiddle_rsc_0_3_AWREADY, twiddle_rsc_0_3_AWVALID,
      twiddle_rsc_0_3_AWUSER, twiddle_rsc_0_3_AWREGION, twiddle_rsc_0_3_AWQOS, twiddle_rsc_0_3_AWPROT,
      twiddle_rsc_0_3_AWCACHE, twiddle_rsc_0_3_AWLOCK, twiddle_rsc_0_3_AWBURST, twiddle_rsc_0_3_AWSIZE,
      twiddle_rsc_0_3_AWLEN, twiddle_rsc_0_3_AWADDR, twiddle_rsc_0_3_AWID, core_wen,
      twiddle_rsc_0_3_i_oswt, twiddle_rsc_0_3_i_wen_comp, twiddle_rsc_0_3_i_s_raddr_core,
      twiddle_rsc_0_3_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_3_s_tdone;
  input twiddle_rsc_0_3_tr_write_done;
  input twiddle_rsc_0_3_RREADY;
  output twiddle_rsc_0_3_RVALID;
  output twiddle_rsc_0_3_RUSER;
  output twiddle_rsc_0_3_RLAST;
  output [1:0] twiddle_rsc_0_3_RRESP;
  output [31:0] twiddle_rsc_0_3_RDATA;
  output twiddle_rsc_0_3_RID;
  output twiddle_rsc_0_3_ARREADY;
  input twiddle_rsc_0_3_ARVALID;
  input twiddle_rsc_0_3_ARUSER;
  input [3:0] twiddle_rsc_0_3_ARREGION;
  input [3:0] twiddle_rsc_0_3_ARQOS;
  input [2:0] twiddle_rsc_0_3_ARPROT;
  input [3:0] twiddle_rsc_0_3_ARCACHE;
  input twiddle_rsc_0_3_ARLOCK;
  input [1:0] twiddle_rsc_0_3_ARBURST;
  input [2:0] twiddle_rsc_0_3_ARSIZE;
  input [7:0] twiddle_rsc_0_3_ARLEN;
  input [11:0] twiddle_rsc_0_3_ARADDR;
  input twiddle_rsc_0_3_ARID;
  input twiddle_rsc_0_3_BREADY;
  output twiddle_rsc_0_3_BVALID;
  output twiddle_rsc_0_3_BUSER;
  output [1:0] twiddle_rsc_0_3_BRESP;
  output twiddle_rsc_0_3_BID;
  output twiddle_rsc_0_3_WREADY;
  input twiddle_rsc_0_3_WVALID;
  input twiddle_rsc_0_3_WUSER;
  input twiddle_rsc_0_3_WLAST;
  input [3:0] twiddle_rsc_0_3_WSTRB;
  input [31:0] twiddle_rsc_0_3_WDATA;
  output twiddle_rsc_0_3_AWREADY;
  input twiddle_rsc_0_3_AWVALID;
  input twiddle_rsc_0_3_AWUSER;
  input [3:0] twiddle_rsc_0_3_AWREGION;
  input [3:0] twiddle_rsc_0_3_AWQOS;
  input [2:0] twiddle_rsc_0_3_AWPROT;
  input [3:0] twiddle_rsc_0_3_AWCACHE;
  input twiddle_rsc_0_3_AWLOCK;
  input [1:0] twiddle_rsc_0_3_AWBURST;
  input [2:0] twiddle_rsc_0_3_AWSIZE;
  input [7:0] twiddle_rsc_0_3_AWLEN;
  input [11:0] twiddle_rsc_0_3_AWADDR;
  input twiddle_rsc_0_3_AWID;
  input core_wen;
  input twiddle_rsc_0_3_i_oswt;
  output twiddle_rsc_0_3_i_wen_comp;
  input [5:0] twiddle_rsc_0_3_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_3_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_3_i_biwt;
  wire twiddle_rsc_0_3_i_bdwt;
  wire twiddle_rsc_0_3_i_bcwt;
  wire twiddle_rsc_0_3_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_3_i_s_raddr;
  wire [31:0] twiddle_rsc_0_3_i_s_din;
  wire twiddle_rsc_0_3_i_s_rrdy;
  wire twiddle_rsc_0_3_i_s_wrdy;
  wire twiddle_rsc_0_3_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp_inst_twiddle_rsc_0_3_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp_inst_twiddle_rsc_0_3_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_3_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_3_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_3_AWID),
      .AWADDR(twiddle_rsc_0_3_AWADDR),
      .AWLEN(twiddle_rsc_0_3_AWLEN),
      .AWSIZE(twiddle_rsc_0_3_AWSIZE),
      .AWBURST(twiddle_rsc_0_3_AWBURST),
      .AWLOCK(twiddle_rsc_0_3_AWLOCK),
      .AWCACHE(twiddle_rsc_0_3_AWCACHE),
      .AWPROT(twiddle_rsc_0_3_AWPROT),
      .AWQOS(twiddle_rsc_0_3_AWQOS),
      .AWREGION(twiddle_rsc_0_3_AWREGION),
      .AWUSER(twiddle_rsc_0_3_AWUSER),
      .AWVALID(twiddle_rsc_0_3_AWVALID),
      .AWREADY(twiddle_rsc_0_3_AWREADY),
      .WDATA(twiddle_rsc_0_3_WDATA),
      .WSTRB(twiddle_rsc_0_3_WSTRB),
      .WLAST(twiddle_rsc_0_3_WLAST),
      .WUSER(twiddle_rsc_0_3_WUSER),
      .WVALID(twiddle_rsc_0_3_WVALID),
      .WREADY(twiddle_rsc_0_3_WREADY),
      .BID(twiddle_rsc_0_3_BID),
      .BRESP(twiddle_rsc_0_3_BRESP),
      .BUSER(twiddle_rsc_0_3_BUSER),
      .BVALID(twiddle_rsc_0_3_BVALID),
      .BREADY(twiddle_rsc_0_3_BREADY),
      .ARID(twiddle_rsc_0_3_ARID),
      .ARADDR(twiddle_rsc_0_3_ARADDR),
      .ARLEN(twiddle_rsc_0_3_ARLEN),
      .ARSIZE(twiddle_rsc_0_3_ARSIZE),
      .ARBURST(twiddle_rsc_0_3_ARBURST),
      .ARLOCK(twiddle_rsc_0_3_ARLOCK),
      .ARCACHE(twiddle_rsc_0_3_ARCACHE),
      .ARPROT(twiddle_rsc_0_3_ARPROT),
      .ARQOS(twiddle_rsc_0_3_ARQOS),
      .ARREGION(twiddle_rsc_0_3_ARREGION),
      .ARUSER(twiddle_rsc_0_3_ARUSER),
      .ARVALID(twiddle_rsc_0_3_ARVALID),
      .ARREADY(twiddle_rsc_0_3_ARREADY),
      .RID(twiddle_rsc_0_3_RID),
      .RDATA(twiddle_rsc_0_3_RDATA),
      .RRESP(twiddle_rsc_0_3_RRESP),
      .RLAST(twiddle_rsc_0_3_RLAST),
      .RUSER(twiddle_rsc_0_3_RUSER),
      .RVALID(twiddle_rsc_0_3_RVALID),
      .RREADY(twiddle_rsc_0_3_RREADY),
      .s_re(twiddle_rsc_0_3_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_3_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_3_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_3_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_3_i_s_wrdy),
      .is_idle(twiddle_rsc_0_3_is_idle),
      .tr_write_done(twiddle_rsc_0_3_tr_write_done),
      .s_tdone(twiddle_rsc_0_3_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_ctrl peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_3_i_oswt(twiddle_rsc_0_3_i_oswt),
      .twiddle_rsc_0_3_i_biwt(twiddle_rsc_0_3_i_biwt),
      .twiddle_rsc_0_3_i_bdwt(twiddle_rsc_0_3_i_bdwt),
      .twiddle_rsc_0_3_i_bcwt(twiddle_rsc_0_3_i_bcwt),
      .twiddle_rsc_0_3_i_s_re_core_sct(twiddle_rsc_0_3_i_s_re_core_sct),
      .twiddle_rsc_0_3_i_s_rrdy(twiddle_rsc_0_3_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_3_i_oswt(twiddle_rsc_0_3_i_oswt),
      .twiddle_rsc_0_3_i_wen_comp(twiddle_rsc_0_3_i_wen_comp),
      .twiddle_rsc_0_3_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_3_i_twiddle_rsc_0_3_wait_dp_inst_twiddle_rsc_0_3_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_3_i_s_din_mxwt(twiddle_rsc_0_3_i_s_din_mxwt),
      .twiddle_rsc_0_3_i_biwt(twiddle_rsc_0_3_i_biwt),
      .twiddle_rsc_0_3_i_bdwt(twiddle_rsc_0_3_i_bdwt),
      .twiddle_rsc_0_3_i_bcwt(twiddle_rsc_0_3_i_bcwt),
      .twiddle_rsc_0_3_i_s_raddr(twiddle_rsc_0_3_i_s_raddr),
      .twiddle_rsc_0_3_i_s_raddr_core_sct(twiddle_rsc_0_3_i_s_re_core_sct),
      .twiddle_rsc_0_3_i_s_din(twiddle_rsc_0_3_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_2_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_2_i (
  clk, rst, twiddle_rsc_0_2_s_tdone, twiddle_rsc_0_2_tr_write_done, twiddle_rsc_0_2_RREADY,
      twiddle_rsc_0_2_RVALID, twiddle_rsc_0_2_RUSER, twiddle_rsc_0_2_RLAST, twiddle_rsc_0_2_RRESP,
      twiddle_rsc_0_2_RDATA, twiddle_rsc_0_2_RID, twiddle_rsc_0_2_ARREADY, twiddle_rsc_0_2_ARVALID,
      twiddle_rsc_0_2_ARUSER, twiddle_rsc_0_2_ARREGION, twiddle_rsc_0_2_ARQOS, twiddle_rsc_0_2_ARPROT,
      twiddle_rsc_0_2_ARCACHE, twiddle_rsc_0_2_ARLOCK, twiddle_rsc_0_2_ARBURST, twiddle_rsc_0_2_ARSIZE,
      twiddle_rsc_0_2_ARLEN, twiddle_rsc_0_2_ARADDR, twiddle_rsc_0_2_ARID, twiddle_rsc_0_2_BREADY,
      twiddle_rsc_0_2_BVALID, twiddle_rsc_0_2_BUSER, twiddle_rsc_0_2_BRESP, twiddle_rsc_0_2_BID,
      twiddle_rsc_0_2_WREADY, twiddle_rsc_0_2_WVALID, twiddle_rsc_0_2_WUSER, twiddle_rsc_0_2_WLAST,
      twiddle_rsc_0_2_WSTRB, twiddle_rsc_0_2_WDATA, twiddle_rsc_0_2_AWREADY, twiddle_rsc_0_2_AWVALID,
      twiddle_rsc_0_2_AWUSER, twiddle_rsc_0_2_AWREGION, twiddle_rsc_0_2_AWQOS, twiddle_rsc_0_2_AWPROT,
      twiddle_rsc_0_2_AWCACHE, twiddle_rsc_0_2_AWLOCK, twiddle_rsc_0_2_AWBURST, twiddle_rsc_0_2_AWSIZE,
      twiddle_rsc_0_2_AWLEN, twiddle_rsc_0_2_AWADDR, twiddle_rsc_0_2_AWID, core_wen,
      twiddle_rsc_0_2_i_oswt, twiddle_rsc_0_2_i_wen_comp, twiddle_rsc_0_2_i_s_raddr_core,
      twiddle_rsc_0_2_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_2_s_tdone;
  input twiddle_rsc_0_2_tr_write_done;
  input twiddle_rsc_0_2_RREADY;
  output twiddle_rsc_0_2_RVALID;
  output twiddle_rsc_0_2_RUSER;
  output twiddle_rsc_0_2_RLAST;
  output [1:0] twiddle_rsc_0_2_RRESP;
  output [31:0] twiddle_rsc_0_2_RDATA;
  output twiddle_rsc_0_2_RID;
  output twiddle_rsc_0_2_ARREADY;
  input twiddle_rsc_0_2_ARVALID;
  input twiddle_rsc_0_2_ARUSER;
  input [3:0] twiddle_rsc_0_2_ARREGION;
  input [3:0] twiddle_rsc_0_2_ARQOS;
  input [2:0] twiddle_rsc_0_2_ARPROT;
  input [3:0] twiddle_rsc_0_2_ARCACHE;
  input twiddle_rsc_0_2_ARLOCK;
  input [1:0] twiddle_rsc_0_2_ARBURST;
  input [2:0] twiddle_rsc_0_2_ARSIZE;
  input [7:0] twiddle_rsc_0_2_ARLEN;
  input [11:0] twiddle_rsc_0_2_ARADDR;
  input twiddle_rsc_0_2_ARID;
  input twiddle_rsc_0_2_BREADY;
  output twiddle_rsc_0_2_BVALID;
  output twiddle_rsc_0_2_BUSER;
  output [1:0] twiddle_rsc_0_2_BRESP;
  output twiddle_rsc_0_2_BID;
  output twiddle_rsc_0_2_WREADY;
  input twiddle_rsc_0_2_WVALID;
  input twiddle_rsc_0_2_WUSER;
  input twiddle_rsc_0_2_WLAST;
  input [3:0] twiddle_rsc_0_2_WSTRB;
  input [31:0] twiddle_rsc_0_2_WDATA;
  output twiddle_rsc_0_2_AWREADY;
  input twiddle_rsc_0_2_AWVALID;
  input twiddle_rsc_0_2_AWUSER;
  input [3:0] twiddle_rsc_0_2_AWREGION;
  input [3:0] twiddle_rsc_0_2_AWQOS;
  input [2:0] twiddle_rsc_0_2_AWPROT;
  input [3:0] twiddle_rsc_0_2_AWCACHE;
  input twiddle_rsc_0_2_AWLOCK;
  input [1:0] twiddle_rsc_0_2_AWBURST;
  input [2:0] twiddle_rsc_0_2_AWSIZE;
  input [7:0] twiddle_rsc_0_2_AWLEN;
  input [11:0] twiddle_rsc_0_2_AWADDR;
  input twiddle_rsc_0_2_AWID;
  input core_wen;
  input twiddle_rsc_0_2_i_oswt;
  output twiddle_rsc_0_2_i_wen_comp;
  input [5:0] twiddle_rsc_0_2_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_2_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_2_i_biwt;
  wire twiddle_rsc_0_2_i_bdwt;
  wire twiddle_rsc_0_2_i_bcwt;
  wire twiddle_rsc_0_2_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_2_i_s_raddr;
  wire [31:0] twiddle_rsc_0_2_i_s_din;
  wire twiddle_rsc_0_2_i_s_rrdy;
  wire twiddle_rsc_0_2_i_s_wrdy;
  wire twiddle_rsc_0_2_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp_inst_twiddle_rsc_0_2_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp_inst_twiddle_rsc_0_2_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_2_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_2_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_2_AWID),
      .AWADDR(twiddle_rsc_0_2_AWADDR),
      .AWLEN(twiddle_rsc_0_2_AWLEN),
      .AWSIZE(twiddle_rsc_0_2_AWSIZE),
      .AWBURST(twiddle_rsc_0_2_AWBURST),
      .AWLOCK(twiddle_rsc_0_2_AWLOCK),
      .AWCACHE(twiddle_rsc_0_2_AWCACHE),
      .AWPROT(twiddle_rsc_0_2_AWPROT),
      .AWQOS(twiddle_rsc_0_2_AWQOS),
      .AWREGION(twiddle_rsc_0_2_AWREGION),
      .AWUSER(twiddle_rsc_0_2_AWUSER),
      .AWVALID(twiddle_rsc_0_2_AWVALID),
      .AWREADY(twiddle_rsc_0_2_AWREADY),
      .WDATA(twiddle_rsc_0_2_WDATA),
      .WSTRB(twiddle_rsc_0_2_WSTRB),
      .WLAST(twiddle_rsc_0_2_WLAST),
      .WUSER(twiddle_rsc_0_2_WUSER),
      .WVALID(twiddle_rsc_0_2_WVALID),
      .WREADY(twiddle_rsc_0_2_WREADY),
      .BID(twiddle_rsc_0_2_BID),
      .BRESP(twiddle_rsc_0_2_BRESP),
      .BUSER(twiddle_rsc_0_2_BUSER),
      .BVALID(twiddle_rsc_0_2_BVALID),
      .BREADY(twiddle_rsc_0_2_BREADY),
      .ARID(twiddle_rsc_0_2_ARID),
      .ARADDR(twiddle_rsc_0_2_ARADDR),
      .ARLEN(twiddle_rsc_0_2_ARLEN),
      .ARSIZE(twiddle_rsc_0_2_ARSIZE),
      .ARBURST(twiddle_rsc_0_2_ARBURST),
      .ARLOCK(twiddle_rsc_0_2_ARLOCK),
      .ARCACHE(twiddle_rsc_0_2_ARCACHE),
      .ARPROT(twiddle_rsc_0_2_ARPROT),
      .ARQOS(twiddle_rsc_0_2_ARQOS),
      .ARREGION(twiddle_rsc_0_2_ARREGION),
      .ARUSER(twiddle_rsc_0_2_ARUSER),
      .ARVALID(twiddle_rsc_0_2_ARVALID),
      .ARREADY(twiddle_rsc_0_2_ARREADY),
      .RID(twiddle_rsc_0_2_RID),
      .RDATA(twiddle_rsc_0_2_RDATA),
      .RRESP(twiddle_rsc_0_2_RRESP),
      .RLAST(twiddle_rsc_0_2_RLAST),
      .RUSER(twiddle_rsc_0_2_RUSER),
      .RVALID(twiddle_rsc_0_2_RVALID),
      .RREADY(twiddle_rsc_0_2_RREADY),
      .s_re(twiddle_rsc_0_2_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_2_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_2_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_2_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_2_i_s_wrdy),
      .is_idle(twiddle_rsc_0_2_is_idle),
      .tr_write_done(twiddle_rsc_0_2_tr_write_done),
      .s_tdone(twiddle_rsc_0_2_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_ctrl peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_2_i_oswt(twiddle_rsc_0_2_i_oswt),
      .twiddle_rsc_0_2_i_biwt(twiddle_rsc_0_2_i_biwt),
      .twiddle_rsc_0_2_i_bdwt(twiddle_rsc_0_2_i_bdwt),
      .twiddle_rsc_0_2_i_bcwt(twiddle_rsc_0_2_i_bcwt),
      .twiddle_rsc_0_2_i_s_re_core_sct(twiddle_rsc_0_2_i_s_re_core_sct),
      .twiddle_rsc_0_2_i_s_rrdy(twiddle_rsc_0_2_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_2_i_oswt(twiddle_rsc_0_2_i_oswt),
      .twiddle_rsc_0_2_i_wen_comp(twiddle_rsc_0_2_i_wen_comp),
      .twiddle_rsc_0_2_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_2_i_twiddle_rsc_0_2_wait_dp_inst_twiddle_rsc_0_2_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_2_i_s_din_mxwt(twiddle_rsc_0_2_i_s_din_mxwt),
      .twiddle_rsc_0_2_i_biwt(twiddle_rsc_0_2_i_biwt),
      .twiddle_rsc_0_2_i_bdwt(twiddle_rsc_0_2_i_bdwt),
      .twiddle_rsc_0_2_i_bcwt(twiddle_rsc_0_2_i_bcwt),
      .twiddle_rsc_0_2_i_s_raddr(twiddle_rsc_0_2_i_s_raddr),
      .twiddle_rsc_0_2_i_s_raddr_core_sct(twiddle_rsc_0_2_i_s_re_core_sct),
      .twiddle_rsc_0_2_i_s_din(twiddle_rsc_0_2_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_1_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_1_i (
  clk, rst, twiddle_rsc_0_1_s_tdone, twiddle_rsc_0_1_tr_write_done, twiddle_rsc_0_1_RREADY,
      twiddle_rsc_0_1_RVALID, twiddle_rsc_0_1_RUSER, twiddle_rsc_0_1_RLAST, twiddle_rsc_0_1_RRESP,
      twiddle_rsc_0_1_RDATA, twiddle_rsc_0_1_RID, twiddle_rsc_0_1_ARREADY, twiddle_rsc_0_1_ARVALID,
      twiddle_rsc_0_1_ARUSER, twiddle_rsc_0_1_ARREGION, twiddle_rsc_0_1_ARQOS, twiddle_rsc_0_1_ARPROT,
      twiddle_rsc_0_1_ARCACHE, twiddle_rsc_0_1_ARLOCK, twiddle_rsc_0_1_ARBURST, twiddle_rsc_0_1_ARSIZE,
      twiddle_rsc_0_1_ARLEN, twiddle_rsc_0_1_ARADDR, twiddle_rsc_0_1_ARID, twiddle_rsc_0_1_BREADY,
      twiddle_rsc_0_1_BVALID, twiddle_rsc_0_1_BUSER, twiddle_rsc_0_1_BRESP, twiddle_rsc_0_1_BID,
      twiddle_rsc_0_1_WREADY, twiddle_rsc_0_1_WVALID, twiddle_rsc_0_1_WUSER, twiddle_rsc_0_1_WLAST,
      twiddle_rsc_0_1_WSTRB, twiddle_rsc_0_1_WDATA, twiddle_rsc_0_1_AWREADY, twiddle_rsc_0_1_AWVALID,
      twiddle_rsc_0_1_AWUSER, twiddle_rsc_0_1_AWREGION, twiddle_rsc_0_1_AWQOS, twiddle_rsc_0_1_AWPROT,
      twiddle_rsc_0_1_AWCACHE, twiddle_rsc_0_1_AWLOCK, twiddle_rsc_0_1_AWBURST, twiddle_rsc_0_1_AWSIZE,
      twiddle_rsc_0_1_AWLEN, twiddle_rsc_0_1_AWADDR, twiddle_rsc_0_1_AWID, core_wen,
      twiddle_rsc_0_1_i_oswt, twiddle_rsc_0_1_i_wen_comp, twiddle_rsc_0_1_i_s_raddr_core,
      twiddle_rsc_0_1_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_1_s_tdone;
  input twiddle_rsc_0_1_tr_write_done;
  input twiddle_rsc_0_1_RREADY;
  output twiddle_rsc_0_1_RVALID;
  output twiddle_rsc_0_1_RUSER;
  output twiddle_rsc_0_1_RLAST;
  output [1:0] twiddle_rsc_0_1_RRESP;
  output [31:0] twiddle_rsc_0_1_RDATA;
  output twiddle_rsc_0_1_RID;
  output twiddle_rsc_0_1_ARREADY;
  input twiddle_rsc_0_1_ARVALID;
  input twiddle_rsc_0_1_ARUSER;
  input [3:0] twiddle_rsc_0_1_ARREGION;
  input [3:0] twiddle_rsc_0_1_ARQOS;
  input [2:0] twiddle_rsc_0_1_ARPROT;
  input [3:0] twiddle_rsc_0_1_ARCACHE;
  input twiddle_rsc_0_1_ARLOCK;
  input [1:0] twiddle_rsc_0_1_ARBURST;
  input [2:0] twiddle_rsc_0_1_ARSIZE;
  input [7:0] twiddle_rsc_0_1_ARLEN;
  input [11:0] twiddle_rsc_0_1_ARADDR;
  input twiddle_rsc_0_1_ARID;
  input twiddle_rsc_0_1_BREADY;
  output twiddle_rsc_0_1_BVALID;
  output twiddle_rsc_0_1_BUSER;
  output [1:0] twiddle_rsc_0_1_BRESP;
  output twiddle_rsc_0_1_BID;
  output twiddle_rsc_0_1_WREADY;
  input twiddle_rsc_0_1_WVALID;
  input twiddle_rsc_0_1_WUSER;
  input twiddle_rsc_0_1_WLAST;
  input [3:0] twiddle_rsc_0_1_WSTRB;
  input [31:0] twiddle_rsc_0_1_WDATA;
  output twiddle_rsc_0_1_AWREADY;
  input twiddle_rsc_0_1_AWVALID;
  input twiddle_rsc_0_1_AWUSER;
  input [3:0] twiddle_rsc_0_1_AWREGION;
  input [3:0] twiddle_rsc_0_1_AWQOS;
  input [2:0] twiddle_rsc_0_1_AWPROT;
  input [3:0] twiddle_rsc_0_1_AWCACHE;
  input twiddle_rsc_0_1_AWLOCK;
  input [1:0] twiddle_rsc_0_1_AWBURST;
  input [2:0] twiddle_rsc_0_1_AWSIZE;
  input [7:0] twiddle_rsc_0_1_AWLEN;
  input [11:0] twiddle_rsc_0_1_AWADDR;
  input twiddle_rsc_0_1_AWID;
  input core_wen;
  input twiddle_rsc_0_1_i_oswt;
  output twiddle_rsc_0_1_i_wen_comp;
  input [5:0] twiddle_rsc_0_1_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_1_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_1_i_biwt;
  wire twiddle_rsc_0_1_i_bdwt;
  wire twiddle_rsc_0_1_i_bcwt;
  wire twiddle_rsc_0_1_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_1_i_s_raddr;
  wire [31:0] twiddle_rsc_0_1_i_s_din;
  wire twiddle_rsc_0_1_i_s_rrdy;
  wire twiddle_rsc_0_1_i_s_wrdy;
  wire twiddle_rsc_0_1_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp_inst_twiddle_rsc_0_1_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp_inst_twiddle_rsc_0_1_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_1_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_1_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_1_AWID),
      .AWADDR(twiddle_rsc_0_1_AWADDR),
      .AWLEN(twiddle_rsc_0_1_AWLEN),
      .AWSIZE(twiddle_rsc_0_1_AWSIZE),
      .AWBURST(twiddle_rsc_0_1_AWBURST),
      .AWLOCK(twiddle_rsc_0_1_AWLOCK),
      .AWCACHE(twiddle_rsc_0_1_AWCACHE),
      .AWPROT(twiddle_rsc_0_1_AWPROT),
      .AWQOS(twiddle_rsc_0_1_AWQOS),
      .AWREGION(twiddle_rsc_0_1_AWREGION),
      .AWUSER(twiddle_rsc_0_1_AWUSER),
      .AWVALID(twiddle_rsc_0_1_AWVALID),
      .AWREADY(twiddle_rsc_0_1_AWREADY),
      .WDATA(twiddle_rsc_0_1_WDATA),
      .WSTRB(twiddle_rsc_0_1_WSTRB),
      .WLAST(twiddle_rsc_0_1_WLAST),
      .WUSER(twiddle_rsc_0_1_WUSER),
      .WVALID(twiddle_rsc_0_1_WVALID),
      .WREADY(twiddle_rsc_0_1_WREADY),
      .BID(twiddle_rsc_0_1_BID),
      .BRESP(twiddle_rsc_0_1_BRESP),
      .BUSER(twiddle_rsc_0_1_BUSER),
      .BVALID(twiddle_rsc_0_1_BVALID),
      .BREADY(twiddle_rsc_0_1_BREADY),
      .ARID(twiddle_rsc_0_1_ARID),
      .ARADDR(twiddle_rsc_0_1_ARADDR),
      .ARLEN(twiddle_rsc_0_1_ARLEN),
      .ARSIZE(twiddle_rsc_0_1_ARSIZE),
      .ARBURST(twiddle_rsc_0_1_ARBURST),
      .ARLOCK(twiddle_rsc_0_1_ARLOCK),
      .ARCACHE(twiddle_rsc_0_1_ARCACHE),
      .ARPROT(twiddle_rsc_0_1_ARPROT),
      .ARQOS(twiddle_rsc_0_1_ARQOS),
      .ARREGION(twiddle_rsc_0_1_ARREGION),
      .ARUSER(twiddle_rsc_0_1_ARUSER),
      .ARVALID(twiddle_rsc_0_1_ARVALID),
      .ARREADY(twiddle_rsc_0_1_ARREADY),
      .RID(twiddle_rsc_0_1_RID),
      .RDATA(twiddle_rsc_0_1_RDATA),
      .RRESP(twiddle_rsc_0_1_RRESP),
      .RLAST(twiddle_rsc_0_1_RLAST),
      .RUSER(twiddle_rsc_0_1_RUSER),
      .RVALID(twiddle_rsc_0_1_RVALID),
      .RREADY(twiddle_rsc_0_1_RREADY),
      .s_re(twiddle_rsc_0_1_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_1_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_1_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_1_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_1_i_s_wrdy),
      .is_idle(twiddle_rsc_0_1_is_idle),
      .tr_write_done(twiddle_rsc_0_1_tr_write_done),
      .s_tdone(twiddle_rsc_0_1_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_ctrl peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_1_i_oswt(twiddle_rsc_0_1_i_oswt),
      .twiddle_rsc_0_1_i_biwt(twiddle_rsc_0_1_i_biwt),
      .twiddle_rsc_0_1_i_bdwt(twiddle_rsc_0_1_i_bdwt),
      .twiddle_rsc_0_1_i_bcwt(twiddle_rsc_0_1_i_bcwt),
      .twiddle_rsc_0_1_i_s_re_core_sct(twiddle_rsc_0_1_i_s_re_core_sct),
      .twiddle_rsc_0_1_i_s_rrdy(twiddle_rsc_0_1_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_1_i_oswt(twiddle_rsc_0_1_i_oswt),
      .twiddle_rsc_0_1_i_wen_comp(twiddle_rsc_0_1_i_wen_comp),
      .twiddle_rsc_0_1_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_1_i_twiddle_rsc_0_1_wait_dp_inst_twiddle_rsc_0_1_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_1_i_s_din_mxwt(twiddle_rsc_0_1_i_s_din_mxwt),
      .twiddle_rsc_0_1_i_biwt(twiddle_rsc_0_1_i_biwt),
      .twiddle_rsc_0_1_i_bdwt(twiddle_rsc_0_1_i_bdwt),
      .twiddle_rsc_0_1_i_bcwt(twiddle_rsc_0_1_i_bcwt),
      .twiddle_rsc_0_1_i_s_raddr(twiddle_rsc_0_1_i_s_raddr),
      .twiddle_rsc_0_1_i_s_raddr_core_sct(twiddle_rsc_0_1_i_s_re_core_sct),
      .twiddle_rsc_0_1_i_s_din(twiddle_rsc_0_1_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_twiddle_rsc_0_0_i
// ------------------------------------------------------------------


module peaseNTT_core_twiddle_rsc_0_0_i (
  clk, rst, twiddle_rsc_0_0_s_tdone, twiddle_rsc_0_0_tr_write_done, twiddle_rsc_0_0_RREADY,
      twiddle_rsc_0_0_RVALID, twiddle_rsc_0_0_RUSER, twiddle_rsc_0_0_RLAST, twiddle_rsc_0_0_RRESP,
      twiddle_rsc_0_0_RDATA, twiddle_rsc_0_0_RID, twiddle_rsc_0_0_ARREADY, twiddle_rsc_0_0_ARVALID,
      twiddle_rsc_0_0_ARUSER, twiddle_rsc_0_0_ARREGION, twiddle_rsc_0_0_ARQOS, twiddle_rsc_0_0_ARPROT,
      twiddle_rsc_0_0_ARCACHE, twiddle_rsc_0_0_ARLOCK, twiddle_rsc_0_0_ARBURST, twiddle_rsc_0_0_ARSIZE,
      twiddle_rsc_0_0_ARLEN, twiddle_rsc_0_0_ARADDR, twiddle_rsc_0_0_ARID, twiddle_rsc_0_0_BREADY,
      twiddle_rsc_0_0_BVALID, twiddle_rsc_0_0_BUSER, twiddle_rsc_0_0_BRESP, twiddle_rsc_0_0_BID,
      twiddle_rsc_0_0_WREADY, twiddle_rsc_0_0_WVALID, twiddle_rsc_0_0_WUSER, twiddle_rsc_0_0_WLAST,
      twiddle_rsc_0_0_WSTRB, twiddle_rsc_0_0_WDATA, twiddle_rsc_0_0_AWREADY, twiddle_rsc_0_0_AWVALID,
      twiddle_rsc_0_0_AWUSER, twiddle_rsc_0_0_AWREGION, twiddle_rsc_0_0_AWQOS, twiddle_rsc_0_0_AWPROT,
      twiddle_rsc_0_0_AWCACHE, twiddle_rsc_0_0_AWLOCK, twiddle_rsc_0_0_AWBURST, twiddle_rsc_0_0_AWSIZE,
      twiddle_rsc_0_0_AWLEN, twiddle_rsc_0_0_AWADDR, twiddle_rsc_0_0_AWID, core_wen,
      twiddle_rsc_0_0_i_oswt, twiddle_rsc_0_0_i_wen_comp, twiddle_rsc_0_0_i_s_raddr_core,
      twiddle_rsc_0_0_i_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_0_0_s_tdone;
  input twiddle_rsc_0_0_tr_write_done;
  input twiddle_rsc_0_0_RREADY;
  output twiddle_rsc_0_0_RVALID;
  output twiddle_rsc_0_0_RUSER;
  output twiddle_rsc_0_0_RLAST;
  output [1:0] twiddle_rsc_0_0_RRESP;
  output [31:0] twiddle_rsc_0_0_RDATA;
  output twiddle_rsc_0_0_RID;
  output twiddle_rsc_0_0_ARREADY;
  input twiddle_rsc_0_0_ARVALID;
  input twiddle_rsc_0_0_ARUSER;
  input [3:0] twiddle_rsc_0_0_ARREGION;
  input [3:0] twiddle_rsc_0_0_ARQOS;
  input [2:0] twiddle_rsc_0_0_ARPROT;
  input [3:0] twiddle_rsc_0_0_ARCACHE;
  input twiddle_rsc_0_0_ARLOCK;
  input [1:0] twiddle_rsc_0_0_ARBURST;
  input [2:0] twiddle_rsc_0_0_ARSIZE;
  input [7:0] twiddle_rsc_0_0_ARLEN;
  input [11:0] twiddle_rsc_0_0_ARADDR;
  input twiddle_rsc_0_0_ARID;
  input twiddle_rsc_0_0_BREADY;
  output twiddle_rsc_0_0_BVALID;
  output twiddle_rsc_0_0_BUSER;
  output [1:0] twiddle_rsc_0_0_BRESP;
  output twiddle_rsc_0_0_BID;
  output twiddle_rsc_0_0_WREADY;
  input twiddle_rsc_0_0_WVALID;
  input twiddle_rsc_0_0_WUSER;
  input twiddle_rsc_0_0_WLAST;
  input [3:0] twiddle_rsc_0_0_WSTRB;
  input [31:0] twiddle_rsc_0_0_WDATA;
  output twiddle_rsc_0_0_AWREADY;
  input twiddle_rsc_0_0_AWVALID;
  input twiddle_rsc_0_0_AWUSER;
  input [3:0] twiddle_rsc_0_0_AWREGION;
  input [3:0] twiddle_rsc_0_0_AWQOS;
  input [2:0] twiddle_rsc_0_0_AWPROT;
  input [3:0] twiddle_rsc_0_0_AWCACHE;
  input twiddle_rsc_0_0_AWLOCK;
  input [1:0] twiddle_rsc_0_0_AWBURST;
  input [2:0] twiddle_rsc_0_0_AWSIZE;
  input [7:0] twiddle_rsc_0_0_AWLEN;
  input [11:0] twiddle_rsc_0_0_AWADDR;
  input twiddle_rsc_0_0_AWID;
  input core_wen;
  input twiddle_rsc_0_0_i_oswt;
  output twiddle_rsc_0_0_i_wen_comp;
  input [5:0] twiddle_rsc_0_0_i_s_raddr_core;
  output [31:0] twiddle_rsc_0_0_i_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsc_0_0_i_biwt;
  wire twiddle_rsc_0_0_i_bdwt;
  wire twiddle_rsc_0_0_i_bcwt;
  wire twiddle_rsc_0_0_i_s_re_core_sct;
  wire [5:0] twiddle_rsc_0_0_i_s_raddr;
  wire [31:0] twiddle_rsc_0_0_i_s_din;
  wire twiddle_rsc_0_0_i_s_rrdy;
  wire twiddle_rsc_0_0_i_s_wrdy;
  wire twiddle_rsc_0_0_is_idle;


  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp_inst_twiddle_rsc_0_0_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp_inst_twiddle_rsc_0_0_i_s_raddr_core
      = {1'b0 , (twiddle_rsc_0_0_i_s_raddr_core[4:0])};
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd64),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd6),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsc_0_0_i (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_0_0_AWID),
      .AWADDR(twiddle_rsc_0_0_AWADDR),
      .AWLEN(twiddle_rsc_0_0_AWLEN),
      .AWSIZE(twiddle_rsc_0_0_AWSIZE),
      .AWBURST(twiddle_rsc_0_0_AWBURST),
      .AWLOCK(twiddle_rsc_0_0_AWLOCK),
      .AWCACHE(twiddle_rsc_0_0_AWCACHE),
      .AWPROT(twiddle_rsc_0_0_AWPROT),
      .AWQOS(twiddle_rsc_0_0_AWQOS),
      .AWREGION(twiddle_rsc_0_0_AWREGION),
      .AWUSER(twiddle_rsc_0_0_AWUSER),
      .AWVALID(twiddle_rsc_0_0_AWVALID),
      .AWREADY(twiddle_rsc_0_0_AWREADY),
      .WDATA(twiddle_rsc_0_0_WDATA),
      .WSTRB(twiddle_rsc_0_0_WSTRB),
      .WLAST(twiddle_rsc_0_0_WLAST),
      .WUSER(twiddle_rsc_0_0_WUSER),
      .WVALID(twiddle_rsc_0_0_WVALID),
      .WREADY(twiddle_rsc_0_0_WREADY),
      .BID(twiddle_rsc_0_0_BID),
      .BRESP(twiddle_rsc_0_0_BRESP),
      .BUSER(twiddle_rsc_0_0_BUSER),
      .BVALID(twiddle_rsc_0_0_BVALID),
      .BREADY(twiddle_rsc_0_0_BREADY),
      .ARID(twiddle_rsc_0_0_ARID),
      .ARADDR(twiddle_rsc_0_0_ARADDR),
      .ARLEN(twiddle_rsc_0_0_ARLEN),
      .ARSIZE(twiddle_rsc_0_0_ARSIZE),
      .ARBURST(twiddle_rsc_0_0_ARBURST),
      .ARLOCK(twiddle_rsc_0_0_ARLOCK),
      .ARCACHE(twiddle_rsc_0_0_ARCACHE),
      .ARPROT(twiddle_rsc_0_0_ARPROT),
      .ARQOS(twiddle_rsc_0_0_ARQOS),
      .ARREGION(twiddle_rsc_0_0_ARREGION),
      .ARUSER(twiddle_rsc_0_0_ARUSER),
      .ARVALID(twiddle_rsc_0_0_ARVALID),
      .ARREADY(twiddle_rsc_0_0_ARREADY),
      .RID(twiddle_rsc_0_0_RID),
      .RDATA(twiddle_rsc_0_0_RDATA),
      .RRESP(twiddle_rsc_0_0_RRESP),
      .RLAST(twiddle_rsc_0_0_RLAST),
      .RUSER(twiddle_rsc_0_0_RUSER),
      .RVALID(twiddle_rsc_0_0_RVALID),
      .RREADY(twiddle_rsc_0_0_RREADY),
      .s_re(twiddle_rsc_0_0_i_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsc_0_0_i_s_raddr),
      .s_waddr(6'b000000),
      .s_din(twiddle_rsc_0_0_i_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsc_0_0_i_s_rrdy),
      .s_wrdy(twiddle_rsc_0_0_i_s_wrdy),
      .is_idle(twiddle_rsc_0_0_is_idle),
      .tr_write_done(twiddle_rsc_0_0_tr_write_done),
      .s_tdone(twiddle_rsc_0_0_s_tdone)
    );
  peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_ctrl peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsc_0_0_i_oswt(twiddle_rsc_0_0_i_oswt),
      .twiddle_rsc_0_0_i_biwt(twiddle_rsc_0_0_i_biwt),
      .twiddle_rsc_0_0_i_bdwt(twiddle_rsc_0_0_i_bdwt),
      .twiddle_rsc_0_0_i_bcwt(twiddle_rsc_0_0_i_bcwt),
      .twiddle_rsc_0_0_i_s_re_core_sct(twiddle_rsc_0_0_i_s_re_core_sct),
      .twiddle_rsc_0_0_i_s_rrdy(twiddle_rsc_0_0_i_s_rrdy)
    );
  peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_0_i_oswt(twiddle_rsc_0_0_i_oswt),
      .twiddle_rsc_0_0_i_wen_comp(twiddle_rsc_0_0_i_wen_comp),
      .twiddle_rsc_0_0_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_0_i_twiddle_rsc_0_0_wait_dp_inst_twiddle_rsc_0_0_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_0_i_s_din_mxwt(twiddle_rsc_0_0_i_s_din_mxwt),
      .twiddle_rsc_0_0_i_biwt(twiddle_rsc_0_0_i_biwt),
      .twiddle_rsc_0_0_i_bdwt(twiddle_rsc_0_0_i_bdwt),
      .twiddle_rsc_0_0_i_bcwt(twiddle_rsc_0_0_i_bcwt),
      .twiddle_rsc_0_0_i_s_raddr(twiddle_rsc_0_0_i_s_raddr),
      .twiddle_rsc_0_0_i_s_raddr_core_sct(twiddle_rsc_0_0_i_s_re_core_sct),
      .twiddle_rsc_0_0_i_s_din(twiddle_rsc_0_0_i_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_31_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_31_i_1 (
  clk, rst, xt_rsc_1_31_i_qa_d, xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_31_i_oswt, xt_rsc_1_31_i_qa_d_mxwt, xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_31_i_wea_d_pff, xt_rsc_1_31_i_wea_d_core_psct_pff, xt_rsc_1_31_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_31_i_qa_d;
  output xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_31_i_oswt;
  output [31:0] xt_rsc_1_31_i_qa_d_mxwt;
  input xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_31_i_wea_d_pff;
  input xt_rsc_1_31_i_wea_d_core_psct_pff;
  input xt_rsc_1_31_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_31_i_biwt;
  wire xt_rsc_1_31_i_bdwt;
  wire xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_31_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_ctrl peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_31_i_oswt(xt_rsc_1_31_i_oswt),
      .xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_31_i_biwt(xt_rsc_1_31_i_biwt),
      .xt_rsc_1_31_i_bdwt(xt_rsc_1_31_i_bdwt),
      .xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_31_i_wea_d_core_sct_pff(xt_rsc_1_31_i_wea_d_core_sct_iff),
      .xt_rsc_1_31_i_wea_d_core_psct_pff(xt_rsc_1_31_i_wea_d_core_psct_pff),
      .xt_rsc_1_31_i_oswt_pff(xt_rsc_1_31_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_dp peaseNTT_core_xt_rsc_1_31_i_1_xt_rsc_1_31_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_31_i_qa_d(xt_rsc_1_31_i_qa_d),
      .xt_rsc_1_31_i_qa_d_mxwt(xt_rsc_1_31_i_qa_d_mxwt),
      .xt_rsc_1_31_i_biwt(xt_rsc_1_31_i_biwt),
      .xt_rsc_1_31_i_bdwt(xt_rsc_1_31_i_bdwt)
    );
  assign xt_rsc_1_31_i_wea_d_pff = xt_rsc_1_31_i_wea_d_core_sct_iff;
  assign xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_30_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_30_i_1 (
  clk, rst, xt_rsc_1_30_i_qa_d, xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_30_i_oswt, xt_rsc_1_30_i_qa_d_mxwt, xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_30_i_wea_d_pff, xt_rsc_1_30_i_wea_d_core_psct_pff, xt_rsc_1_30_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_30_i_qa_d;
  output xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_30_i_oswt;
  output [31:0] xt_rsc_1_30_i_qa_d_mxwt;
  input xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_30_i_wea_d_pff;
  input xt_rsc_1_30_i_wea_d_core_psct_pff;
  input xt_rsc_1_30_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_30_i_biwt;
  wire xt_rsc_1_30_i_bdwt;
  wire xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_30_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_ctrl peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_30_i_oswt(xt_rsc_1_30_i_oswt),
      .xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_30_i_biwt(xt_rsc_1_30_i_biwt),
      .xt_rsc_1_30_i_bdwt(xt_rsc_1_30_i_bdwt),
      .xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_30_i_wea_d_core_sct_pff(xt_rsc_1_30_i_wea_d_core_sct_iff),
      .xt_rsc_1_30_i_wea_d_core_psct_pff(xt_rsc_1_30_i_wea_d_core_psct_pff),
      .xt_rsc_1_30_i_oswt_pff(xt_rsc_1_30_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_dp peaseNTT_core_xt_rsc_1_30_i_1_xt_rsc_1_30_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_30_i_qa_d(xt_rsc_1_30_i_qa_d),
      .xt_rsc_1_30_i_qa_d_mxwt(xt_rsc_1_30_i_qa_d_mxwt),
      .xt_rsc_1_30_i_biwt(xt_rsc_1_30_i_biwt),
      .xt_rsc_1_30_i_bdwt(xt_rsc_1_30_i_bdwt)
    );
  assign xt_rsc_1_30_i_wea_d_pff = xt_rsc_1_30_i_wea_d_core_sct_iff;
  assign xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_29_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_29_i_1 (
  clk, rst, xt_rsc_1_29_i_qa_d, xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_29_i_oswt, xt_rsc_1_29_i_qa_d_mxwt, xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_29_i_wea_d_pff, xt_rsc_1_29_i_wea_d_core_psct_pff, xt_rsc_1_29_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_29_i_qa_d;
  output xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_29_i_oswt;
  output [31:0] xt_rsc_1_29_i_qa_d_mxwt;
  input xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_29_i_wea_d_pff;
  input xt_rsc_1_29_i_wea_d_core_psct_pff;
  input xt_rsc_1_29_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_29_i_biwt;
  wire xt_rsc_1_29_i_bdwt;
  wire xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_29_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_ctrl peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_29_i_oswt(xt_rsc_1_29_i_oswt),
      .xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_29_i_biwt(xt_rsc_1_29_i_biwt),
      .xt_rsc_1_29_i_bdwt(xt_rsc_1_29_i_bdwt),
      .xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_29_i_wea_d_core_sct_pff(xt_rsc_1_29_i_wea_d_core_sct_iff),
      .xt_rsc_1_29_i_wea_d_core_psct_pff(xt_rsc_1_29_i_wea_d_core_psct_pff),
      .xt_rsc_1_29_i_oswt_pff(xt_rsc_1_29_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_dp peaseNTT_core_xt_rsc_1_29_i_1_xt_rsc_1_29_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_29_i_qa_d(xt_rsc_1_29_i_qa_d),
      .xt_rsc_1_29_i_qa_d_mxwt(xt_rsc_1_29_i_qa_d_mxwt),
      .xt_rsc_1_29_i_biwt(xt_rsc_1_29_i_biwt),
      .xt_rsc_1_29_i_bdwt(xt_rsc_1_29_i_bdwt)
    );
  assign xt_rsc_1_29_i_wea_d_pff = xt_rsc_1_29_i_wea_d_core_sct_iff;
  assign xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_28_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_28_i_1 (
  clk, rst, xt_rsc_1_28_i_qa_d, xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_28_i_oswt, xt_rsc_1_28_i_qa_d_mxwt, xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_28_i_wea_d_pff, xt_rsc_1_28_i_wea_d_core_psct_pff, xt_rsc_1_28_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_28_i_qa_d;
  output xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_28_i_oswt;
  output [31:0] xt_rsc_1_28_i_qa_d_mxwt;
  input xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_28_i_wea_d_pff;
  input xt_rsc_1_28_i_wea_d_core_psct_pff;
  input xt_rsc_1_28_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_28_i_biwt;
  wire xt_rsc_1_28_i_bdwt;
  wire xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_28_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_ctrl peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_28_i_oswt(xt_rsc_1_28_i_oswt),
      .xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_28_i_biwt(xt_rsc_1_28_i_biwt),
      .xt_rsc_1_28_i_bdwt(xt_rsc_1_28_i_bdwt),
      .xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_28_i_wea_d_core_sct_pff(xt_rsc_1_28_i_wea_d_core_sct_iff),
      .xt_rsc_1_28_i_wea_d_core_psct_pff(xt_rsc_1_28_i_wea_d_core_psct_pff),
      .xt_rsc_1_28_i_oswt_pff(xt_rsc_1_28_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_dp peaseNTT_core_xt_rsc_1_28_i_1_xt_rsc_1_28_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_28_i_qa_d(xt_rsc_1_28_i_qa_d),
      .xt_rsc_1_28_i_qa_d_mxwt(xt_rsc_1_28_i_qa_d_mxwt),
      .xt_rsc_1_28_i_biwt(xt_rsc_1_28_i_biwt),
      .xt_rsc_1_28_i_bdwt(xt_rsc_1_28_i_bdwt)
    );
  assign xt_rsc_1_28_i_wea_d_pff = xt_rsc_1_28_i_wea_d_core_sct_iff;
  assign xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_27_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_27_i_1 (
  clk, rst, xt_rsc_1_27_i_qa_d, xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_27_i_oswt, xt_rsc_1_27_i_qa_d_mxwt, xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_27_i_wea_d_pff, xt_rsc_1_27_i_wea_d_core_psct_pff, xt_rsc_1_27_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_27_i_qa_d;
  output xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_27_i_oswt;
  output [31:0] xt_rsc_1_27_i_qa_d_mxwt;
  input xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_27_i_wea_d_pff;
  input xt_rsc_1_27_i_wea_d_core_psct_pff;
  input xt_rsc_1_27_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_27_i_biwt;
  wire xt_rsc_1_27_i_bdwt;
  wire xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_27_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_ctrl peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_27_i_oswt(xt_rsc_1_27_i_oswt),
      .xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_27_i_biwt(xt_rsc_1_27_i_biwt),
      .xt_rsc_1_27_i_bdwt(xt_rsc_1_27_i_bdwt),
      .xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_27_i_wea_d_core_sct_pff(xt_rsc_1_27_i_wea_d_core_sct_iff),
      .xt_rsc_1_27_i_wea_d_core_psct_pff(xt_rsc_1_27_i_wea_d_core_psct_pff),
      .xt_rsc_1_27_i_oswt_pff(xt_rsc_1_27_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_dp peaseNTT_core_xt_rsc_1_27_i_1_xt_rsc_1_27_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_27_i_qa_d(xt_rsc_1_27_i_qa_d),
      .xt_rsc_1_27_i_qa_d_mxwt(xt_rsc_1_27_i_qa_d_mxwt),
      .xt_rsc_1_27_i_biwt(xt_rsc_1_27_i_biwt),
      .xt_rsc_1_27_i_bdwt(xt_rsc_1_27_i_bdwt)
    );
  assign xt_rsc_1_27_i_wea_d_pff = xt_rsc_1_27_i_wea_d_core_sct_iff;
  assign xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_26_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_26_i_1 (
  clk, rst, xt_rsc_1_26_i_qa_d, xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_26_i_oswt, xt_rsc_1_26_i_qa_d_mxwt, xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_26_i_wea_d_pff, xt_rsc_1_26_i_wea_d_core_psct_pff, xt_rsc_1_26_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_26_i_qa_d;
  output xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_26_i_oswt;
  output [31:0] xt_rsc_1_26_i_qa_d_mxwt;
  input xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_26_i_wea_d_pff;
  input xt_rsc_1_26_i_wea_d_core_psct_pff;
  input xt_rsc_1_26_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_26_i_biwt;
  wire xt_rsc_1_26_i_bdwt;
  wire xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_26_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_ctrl peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_26_i_oswt(xt_rsc_1_26_i_oswt),
      .xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_26_i_biwt(xt_rsc_1_26_i_biwt),
      .xt_rsc_1_26_i_bdwt(xt_rsc_1_26_i_bdwt),
      .xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_26_i_wea_d_core_sct_pff(xt_rsc_1_26_i_wea_d_core_sct_iff),
      .xt_rsc_1_26_i_wea_d_core_psct_pff(xt_rsc_1_26_i_wea_d_core_psct_pff),
      .xt_rsc_1_26_i_oswt_pff(xt_rsc_1_26_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_dp peaseNTT_core_xt_rsc_1_26_i_1_xt_rsc_1_26_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_26_i_qa_d(xt_rsc_1_26_i_qa_d),
      .xt_rsc_1_26_i_qa_d_mxwt(xt_rsc_1_26_i_qa_d_mxwt),
      .xt_rsc_1_26_i_biwt(xt_rsc_1_26_i_biwt),
      .xt_rsc_1_26_i_bdwt(xt_rsc_1_26_i_bdwt)
    );
  assign xt_rsc_1_26_i_wea_d_pff = xt_rsc_1_26_i_wea_d_core_sct_iff;
  assign xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_25_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_25_i_1 (
  clk, rst, xt_rsc_1_25_i_qa_d, xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_25_i_oswt, xt_rsc_1_25_i_qa_d_mxwt, xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_25_i_wea_d_pff, xt_rsc_1_25_i_wea_d_core_psct_pff, xt_rsc_1_25_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_25_i_qa_d;
  output xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_25_i_oswt;
  output [31:0] xt_rsc_1_25_i_qa_d_mxwt;
  input xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_25_i_wea_d_pff;
  input xt_rsc_1_25_i_wea_d_core_psct_pff;
  input xt_rsc_1_25_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_25_i_biwt;
  wire xt_rsc_1_25_i_bdwt;
  wire xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_25_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_ctrl peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_25_i_oswt(xt_rsc_1_25_i_oswt),
      .xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_25_i_biwt(xt_rsc_1_25_i_biwt),
      .xt_rsc_1_25_i_bdwt(xt_rsc_1_25_i_bdwt),
      .xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_25_i_wea_d_core_sct_pff(xt_rsc_1_25_i_wea_d_core_sct_iff),
      .xt_rsc_1_25_i_wea_d_core_psct_pff(xt_rsc_1_25_i_wea_d_core_psct_pff),
      .xt_rsc_1_25_i_oswt_pff(xt_rsc_1_25_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_dp peaseNTT_core_xt_rsc_1_25_i_1_xt_rsc_1_25_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_25_i_qa_d(xt_rsc_1_25_i_qa_d),
      .xt_rsc_1_25_i_qa_d_mxwt(xt_rsc_1_25_i_qa_d_mxwt),
      .xt_rsc_1_25_i_biwt(xt_rsc_1_25_i_biwt),
      .xt_rsc_1_25_i_bdwt(xt_rsc_1_25_i_bdwt)
    );
  assign xt_rsc_1_25_i_wea_d_pff = xt_rsc_1_25_i_wea_d_core_sct_iff;
  assign xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_24_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_24_i_1 (
  clk, rst, xt_rsc_1_24_i_qa_d, xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_24_i_oswt, xt_rsc_1_24_i_qa_d_mxwt, xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_24_i_wea_d_pff, xt_rsc_1_24_i_wea_d_core_psct_pff, xt_rsc_1_24_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_24_i_qa_d;
  output xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_24_i_oswt;
  output [31:0] xt_rsc_1_24_i_qa_d_mxwt;
  input xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_24_i_wea_d_pff;
  input xt_rsc_1_24_i_wea_d_core_psct_pff;
  input xt_rsc_1_24_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_24_i_biwt;
  wire xt_rsc_1_24_i_bdwt;
  wire xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_24_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_ctrl peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_24_i_oswt(xt_rsc_1_24_i_oswt),
      .xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_24_i_biwt(xt_rsc_1_24_i_biwt),
      .xt_rsc_1_24_i_bdwt(xt_rsc_1_24_i_bdwt),
      .xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_24_i_wea_d_core_sct_pff(xt_rsc_1_24_i_wea_d_core_sct_iff),
      .xt_rsc_1_24_i_wea_d_core_psct_pff(xt_rsc_1_24_i_wea_d_core_psct_pff),
      .xt_rsc_1_24_i_oswt_pff(xt_rsc_1_24_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_dp peaseNTT_core_xt_rsc_1_24_i_1_xt_rsc_1_24_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_24_i_qa_d(xt_rsc_1_24_i_qa_d),
      .xt_rsc_1_24_i_qa_d_mxwt(xt_rsc_1_24_i_qa_d_mxwt),
      .xt_rsc_1_24_i_biwt(xt_rsc_1_24_i_biwt),
      .xt_rsc_1_24_i_bdwt(xt_rsc_1_24_i_bdwt)
    );
  assign xt_rsc_1_24_i_wea_d_pff = xt_rsc_1_24_i_wea_d_core_sct_iff;
  assign xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_23_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_23_i_1 (
  clk, rst, xt_rsc_1_23_i_qa_d, xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_23_i_oswt, xt_rsc_1_23_i_qa_d_mxwt, xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_23_i_wea_d_pff, xt_rsc_1_23_i_wea_d_core_psct_pff, xt_rsc_1_23_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_23_i_qa_d;
  output xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_23_i_oswt;
  output [31:0] xt_rsc_1_23_i_qa_d_mxwt;
  input xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_23_i_wea_d_pff;
  input xt_rsc_1_23_i_wea_d_core_psct_pff;
  input xt_rsc_1_23_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_23_i_biwt;
  wire xt_rsc_1_23_i_bdwt;
  wire xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_23_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_ctrl peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_23_i_oswt(xt_rsc_1_23_i_oswt),
      .xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_23_i_biwt(xt_rsc_1_23_i_biwt),
      .xt_rsc_1_23_i_bdwt(xt_rsc_1_23_i_bdwt),
      .xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_23_i_wea_d_core_sct_pff(xt_rsc_1_23_i_wea_d_core_sct_iff),
      .xt_rsc_1_23_i_wea_d_core_psct_pff(xt_rsc_1_23_i_wea_d_core_psct_pff),
      .xt_rsc_1_23_i_oswt_pff(xt_rsc_1_23_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_dp peaseNTT_core_xt_rsc_1_23_i_1_xt_rsc_1_23_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_23_i_qa_d(xt_rsc_1_23_i_qa_d),
      .xt_rsc_1_23_i_qa_d_mxwt(xt_rsc_1_23_i_qa_d_mxwt),
      .xt_rsc_1_23_i_biwt(xt_rsc_1_23_i_biwt),
      .xt_rsc_1_23_i_bdwt(xt_rsc_1_23_i_bdwt)
    );
  assign xt_rsc_1_23_i_wea_d_pff = xt_rsc_1_23_i_wea_d_core_sct_iff;
  assign xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_22_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_22_i_1 (
  clk, rst, xt_rsc_1_22_i_qa_d, xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_22_i_oswt, xt_rsc_1_22_i_qa_d_mxwt, xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_22_i_wea_d_pff, xt_rsc_1_22_i_wea_d_core_psct_pff, xt_rsc_1_22_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_22_i_qa_d;
  output xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_22_i_oswt;
  output [31:0] xt_rsc_1_22_i_qa_d_mxwt;
  input xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_22_i_wea_d_pff;
  input xt_rsc_1_22_i_wea_d_core_psct_pff;
  input xt_rsc_1_22_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_22_i_biwt;
  wire xt_rsc_1_22_i_bdwt;
  wire xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_22_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_ctrl peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_22_i_oswt(xt_rsc_1_22_i_oswt),
      .xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_22_i_biwt(xt_rsc_1_22_i_biwt),
      .xt_rsc_1_22_i_bdwt(xt_rsc_1_22_i_bdwt),
      .xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_22_i_wea_d_core_sct_pff(xt_rsc_1_22_i_wea_d_core_sct_iff),
      .xt_rsc_1_22_i_wea_d_core_psct_pff(xt_rsc_1_22_i_wea_d_core_psct_pff),
      .xt_rsc_1_22_i_oswt_pff(xt_rsc_1_22_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_dp peaseNTT_core_xt_rsc_1_22_i_1_xt_rsc_1_22_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_22_i_qa_d(xt_rsc_1_22_i_qa_d),
      .xt_rsc_1_22_i_qa_d_mxwt(xt_rsc_1_22_i_qa_d_mxwt),
      .xt_rsc_1_22_i_biwt(xt_rsc_1_22_i_biwt),
      .xt_rsc_1_22_i_bdwt(xt_rsc_1_22_i_bdwt)
    );
  assign xt_rsc_1_22_i_wea_d_pff = xt_rsc_1_22_i_wea_d_core_sct_iff;
  assign xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_21_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_21_i_1 (
  clk, rst, xt_rsc_1_21_i_qa_d, xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_21_i_oswt, xt_rsc_1_21_i_qa_d_mxwt, xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_21_i_wea_d_pff, xt_rsc_1_21_i_wea_d_core_psct_pff, xt_rsc_1_21_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_21_i_qa_d;
  output xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_21_i_oswt;
  output [31:0] xt_rsc_1_21_i_qa_d_mxwt;
  input xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_21_i_wea_d_pff;
  input xt_rsc_1_21_i_wea_d_core_psct_pff;
  input xt_rsc_1_21_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_21_i_biwt;
  wire xt_rsc_1_21_i_bdwt;
  wire xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_21_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_ctrl peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_21_i_oswt(xt_rsc_1_21_i_oswt),
      .xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_21_i_biwt(xt_rsc_1_21_i_biwt),
      .xt_rsc_1_21_i_bdwt(xt_rsc_1_21_i_bdwt),
      .xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_21_i_wea_d_core_sct_pff(xt_rsc_1_21_i_wea_d_core_sct_iff),
      .xt_rsc_1_21_i_wea_d_core_psct_pff(xt_rsc_1_21_i_wea_d_core_psct_pff),
      .xt_rsc_1_21_i_oswt_pff(xt_rsc_1_21_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_dp peaseNTT_core_xt_rsc_1_21_i_1_xt_rsc_1_21_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_21_i_qa_d(xt_rsc_1_21_i_qa_d),
      .xt_rsc_1_21_i_qa_d_mxwt(xt_rsc_1_21_i_qa_d_mxwt),
      .xt_rsc_1_21_i_biwt(xt_rsc_1_21_i_biwt),
      .xt_rsc_1_21_i_bdwt(xt_rsc_1_21_i_bdwt)
    );
  assign xt_rsc_1_21_i_wea_d_pff = xt_rsc_1_21_i_wea_d_core_sct_iff;
  assign xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_20_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_20_i_1 (
  clk, rst, xt_rsc_1_20_i_qa_d, xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_20_i_oswt, xt_rsc_1_20_i_qa_d_mxwt, xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_20_i_wea_d_pff, xt_rsc_1_20_i_wea_d_core_psct_pff, xt_rsc_1_20_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_20_i_qa_d;
  output xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_20_i_oswt;
  output [31:0] xt_rsc_1_20_i_qa_d_mxwt;
  input xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_20_i_wea_d_pff;
  input xt_rsc_1_20_i_wea_d_core_psct_pff;
  input xt_rsc_1_20_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_20_i_biwt;
  wire xt_rsc_1_20_i_bdwt;
  wire xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_20_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_ctrl peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_20_i_oswt(xt_rsc_1_20_i_oswt),
      .xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_20_i_biwt(xt_rsc_1_20_i_biwt),
      .xt_rsc_1_20_i_bdwt(xt_rsc_1_20_i_bdwt),
      .xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_20_i_wea_d_core_sct_pff(xt_rsc_1_20_i_wea_d_core_sct_iff),
      .xt_rsc_1_20_i_wea_d_core_psct_pff(xt_rsc_1_20_i_wea_d_core_psct_pff),
      .xt_rsc_1_20_i_oswt_pff(xt_rsc_1_20_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_dp peaseNTT_core_xt_rsc_1_20_i_1_xt_rsc_1_20_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_20_i_qa_d(xt_rsc_1_20_i_qa_d),
      .xt_rsc_1_20_i_qa_d_mxwt(xt_rsc_1_20_i_qa_d_mxwt),
      .xt_rsc_1_20_i_biwt(xt_rsc_1_20_i_biwt),
      .xt_rsc_1_20_i_bdwt(xt_rsc_1_20_i_bdwt)
    );
  assign xt_rsc_1_20_i_wea_d_pff = xt_rsc_1_20_i_wea_d_core_sct_iff;
  assign xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_19_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_19_i_1 (
  clk, rst, xt_rsc_1_19_i_qa_d, xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_19_i_oswt, xt_rsc_1_19_i_qa_d_mxwt, xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_19_i_wea_d_pff, xt_rsc_1_19_i_wea_d_core_psct_pff, xt_rsc_1_19_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_19_i_qa_d;
  output xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_19_i_oswt;
  output [31:0] xt_rsc_1_19_i_qa_d_mxwt;
  input xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_19_i_wea_d_pff;
  input xt_rsc_1_19_i_wea_d_core_psct_pff;
  input xt_rsc_1_19_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_19_i_biwt;
  wire xt_rsc_1_19_i_bdwt;
  wire xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_19_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_ctrl peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_19_i_oswt(xt_rsc_1_19_i_oswt),
      .xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_19_i_biwt(xt_rsc_1_19_i_biwt),
      .xt_rsc_1_19_i_bdwt(xt_rsc_1_19_i_bdwt),
      .xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_19_i_wea_d_core_sct_pff(xt_rsc_1_19_i_wea_d_core_sct_iff),
      .xt_rsc_1_19_i_wea_d_core_psct_pff(xt_rsc_1_19_i_wea_d_core_psct_pff),
      .xt_rsc_1_19_i_oswt_pff(xt_rsc_1_19_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_dp peaseNTT_core_xt_rsc_1_19_i_1_xt_rsc_1_19_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_19_i_qa_d(xt_rsc_1_19_i_qa_d),
      .xt_rsc_1_19_i_qa_d_mxwt(xt_rsc_1_19_i_qa_d_mxwt),
      .xt_rsc_1_19_i_biwt(xt_rsc_1_19_i_biwt),
      .xt_rsc_1_19_i_bdwt(xt_rsc_1_19_i_bdwt)
    );
  assign xt_rsc_1_19_i_wea_d_pff = xt_rsc_1_19_i_wea_d_core_sct_iff;
  assign xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_18_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_18_i_1 (
  clk, rst, xt_rsc_1_18_i_qa_d, xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_18_i_oswt, xt_rsc_1_18_i_qa_d_mxwt, xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_18_i_wea_d_pff, xt_rsc_1_18_i_wea_d_core_psct_pff, xt_rsc_1_18_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_18_i_qa_d;
  output xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_18_i_oswt;
  output [31:0] xt_rsc_1_18_i_qa_d_mxwt;
  input xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_18_i_wea_d_pff;
  input xt_rsc_1_18_i_wea_d_core_psct_pff;
  input xt_rsc_1_18_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_18_i_biwt;
  wire xt_rsc_1_18_i_bdwt;
  wire xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_18_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_ctrl peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_18_i_oswt(xt_rsc_1_18_i_oswt),
      .xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_18_i_biwt(xt_rsc_1_18_i_biwt),
      .xt_rsc_1_18_i_bdwt(xt_rsc_1_18_i_bdwt),
      .xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_18_i_wea_d_core_sct_pff(xt_rsc_1_18_i_wea_d_core_sct_iff),
      .xt_rsc_1_18_i_wea_d_core_psct_pff(xt_rsc_1_18_i_wea_d_core_psct_pff),
      .xt_rsc_1_18_i_oswt_pff(xt_rsc_1_18_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_dp peaseNTT_core_xt_rsc_1_18_i_1_xt_rsc_1_18_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_18_i_qa_d(xt_rsc_1_18_i_qa_d),
      .xt_rsc_1_18_i_qa_d_mxwt(xt_rsc_1_18_i_qa_d_mxwt),
      .xt_rsc_1_18_i_biwt(xt_rsc_1_18_i_biwt),
      .xt_rsc_1_18_i_bdwt(xt_rsc_1_18_i_bdwt)
    );
  assign xt_rsc_1_18_i_wea_d_pff = xt_rsc_1_18_i_wea_d_core_sct_iff;
  assign xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_17_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_17_i_1 (
  clk, rst, xt_rsc_1_17_i_qa_d, xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_17_i_oswt, xt_rsc_1_17_i_qa_d_mxwt, xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_17_i_wea_d_pff, xt_rsc_1_17_i_wea_d_core_psct_pff, xt_rsc_1_17_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_17_i_qa_d;
  output xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_17_i_oswt;
  output [31:0] xt_rsc_1_17_i_qa_d_mxwt;
  input xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_17_i_wea_d_pff;
  input xt_rsc_1_17_i_wea_d_core_psct_pff;
  input xt_rsc_1_17_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_17_i_biwt;
  wire xt_rsc_1_17_i_bdwt;
  wire xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_17_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_ctrl peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_17_i_oswt(xt_rsc_1_17_i_oswt),
      .xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_17_i_biwt(xt_rsc_1_17_i_biwt),
      .xt_rsc_1_17_i_bdwt(xt_rsc_1_17_i_bdwt),
      .xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_17_i_wea_d_core_sct_pff(xt_rsc_1_17_i_wea_d_core_sct_iff),
      .xt_rsc_1_17_i_wea_d_core_psct_pff(xt_rsc_1_17_i_wea_d_core_psct_pff),
      .xt_rsc_1_17_i_oswt_pff(xt_rsc_1_17_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_dp peaseNTT_core_xt_rsc_1_17_i_1_xt_rsc_1_17_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_17_i_qa_d(xt_rsc_1_17_i_qa_d),
      .xt_rsc_1_17_i_qa_d_mxwt(xt_rsc_1_17_i_qa_d_mxwt),
      .xt_rsc_1_17_i_biwt(xt_rsc_1_17_i_biwt),
      .xt_rsc_1_17_i_bdwt(xt_rsc_1_17_i_bdwt)
    );
  assign xt_rsc_1_17_i_wea_d_pff = xt_rsc_1_17_i_wea_d_core_sct_iff;
  assign xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_16_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_16_i_1 (
  clk, rst, xt_rsc_1_16_i_qa_d, xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_16_i_oswt, xt_rsc_1_16_i_qa_d_mxwt, xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_16_i_wea_d_pff, xt_rsc_1_16_i_wea_d_core_psct_pff, xt_rsc_1_16_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_16_i_qa_d;
  output xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_16_i_oswt;
  output [31:0] xt_rsc_1_16_i_qa_d_mxwt;
  input xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_16_i_wea_d_pff;
  input xt_rsc_1_16_i_wea_d_core_psct_pff;
  input xt_rsc_1_16_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_16_i_biwt;
  wire xt_rsc_1_16_i_bdwt;
  wire xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_16_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_ctrl peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_16_i_oswt(xt_rsc_1_16_i_oswt),
      .xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_16_i_biwt(xt_rsc_1_16_i_biwt),
      .xt_rsc_1_16_i_bdwt(xt_rsc_1_16_i_bdwt),
      .xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_16_i_wea_d_core_sct_pff(xt_rsc_1_16_i_wea_d_core_sct_iff),
      .xt_rsc_1_16_i_wea_d_core_psct_pff(xt_rsc_1_16_i_wea_d_core_psct_pff),
      .xt_rsc_1_16_i_oswt_pff(xt_rsc_1_16_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_dp peaseNTT_core_xt_rsc_1_16_i_1_xt_rsc_1_16_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_16_i_qa_d(xt_rsc_1_16_i_qa_d),
      .xt_rsc_1_16_i_qa_d_mxwt(xt_rsc_1_16_i_qa_d_mxwt),
      .xt_rsc_1_16_i_biwt(xt_rsc_1_16_i_biwt),
      .xt_rsc_1_16_i_bdwt(xt_rsc_1_16_i_bdwt)
    );
  assign xt_rsc_1_16_i_wea_d_pff = xt_rsc_1_16_i_wea_d_core_sct_iff;
  assign xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_15_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_15_i_1 (
  clk, rst, xt_rsc_1_15_i_qa_d, xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_15_i_oswt, xt_rsc_1_15_i_qa_d_mxwt, xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_15_i_wea_d_pff, xt_rsc_1_15_i_wea_d_core_psct_pff, xt_rsc_1_15_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_15_i_qa_d;
  output xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_15_i_oswt;
  output [31:0] xt_rsc_1_15_i_qa_d_mxwt;
  input xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_15_i_wea_d_pff;
  input xt_rsc_1_15_i_wea_d_core_psct_pff;
  input xt_rsc_1_15_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_15_i_biwt;
  wire xt_rsc_1_15_i_bdwt;
  wire xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_15_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_ctrl peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_15_i_oswt(xt_rsc_1_15_i_oswt),
      .xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_15_i_biwt(xt_rsc_1_15_i_biwt),
      .xt_rsc_1_15_i_bdwt(xt_rsc_1_15_i_bdwt),
      .xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_15_i_wea_d_core_sct_pff(xt_rsc_1_15_i_wea_d_core_sct_iff),
      .xt_rsc_1_15_i_wea_d_core_psct_pff(xt_rsc_1_15_i_wea_d_core_psct_pff),
      .xt_rsc_1_15_i_oswt_pff(xt_rsc_1_15_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_dp peaseNTT_core_xt_rsc_1_15_i_1_xt_rsc_1_15_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_15_i_qa_d(xt_rsc_1_15_i_qa_d),
      .xt_rsc_1_15_i_qa_d_mxwt(xt_rsc_1_15_i_qa_d_mxwt),
      .xt_rsc_1_15_i_biwt(xt_rsc_1_15_i_biwt),
      .xt_rsc_1_15_i_bdwt(xt_rsc_1_15_i_bdwt)
    );
  assign xt_rsc_1_15_i_wea_d_pff = xt_rsc_1_15_i_wea_d_core_sct_iff;
  assign xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_14_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_14_i_1 (
  clk, rst, xt_rsc_1_14_i_qa_d, xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_14_i_oswt, xt_rsc_1_14_i_qa_d_mxwt, xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_14_i_wea_d_pff, xt_rsc_1_14_i_wea_d_core_psct_pff, xt_rsc_1_14_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_14_i_qa_d;
  output xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_14_i_oswt;
  output [31:0] xt_rsc_1_14_i_qa_d_mxwt;
  input xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_14_i_wea_d_pff;
  input xt_rsc_1_14_i_wea_d_core_psct_pff;
  input xt_rsc_1_14_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_14_i_biwt;
  wire xt_rsc_1_14_i_bdwt;
  wire xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_14_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_ctrl peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_14_i_oswt(xt_rsc_1_14_i_oswt),
      .xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_14_i_biwt(xt_rsc_1_14_i_biwt),
      .xt_rsc_1_14_i_bdwt(xt_rsc_1_14_i_bdwt),
      .xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_14_i_wea_d_core_sct_pff(xt_rsc_1_14_i_wea_d_core_sct_iff),
      .xt_rsc_1_14_i_wea_d_core_psct_pff(xt_rsc_1_14_i_wea_d_core_psct_pff),
      .xt_rsc_1_14_i_oswt_pff(xt_rsc_1_14_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_dp peaseNTT_core_xt_rsc_1_14_i_1_xt_rsc_1_14_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_14_i_qa_d(xt_rsc_1_14_i_qa_d),
      .xt_rsc_1_14_i_qa_d_mxwt(xt_rsc_1_14_i_qa_d_mxwt),
      .xt_rsc_1_14_i_biwt(xt_rsc_1_14_i_biwt),
      .xt_rsc_1_14_i_bdwt(xt_rsc_1_14_i_bdwt)
    );
  assign xt_rsc_1_14_i_wea_d_pff = xt_rsc_1_14_i_wea_d_core_sct_iff;
  assign xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_13_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_13_i_1 (
  clk, rst, xt_rsc_1_13_i_qa_d, xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_13_i_oswt, xt_rsc_1_13_i_qa_d_mxwt, xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_13_i_wea_d_pff, xt_rsc_1_13_i_wea_d_core_psct_pff, xt_rsc_1_13_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_13_i_qa_d;
  output xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_13_i_oswt;
  output [31:0] xt_rsc_1_13_i_qa_d_mxwt;
  input xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_13_i_wea_d_pff;
  input xt_rsc_1_13_i_wea_d_core_psct_pff;
  input xt_rsc_1_13_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_13_i_biwt;
  wire xt_rsc_1_13_i_bdwt;
  wire xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_13_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_ctrl peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_13_i_oswt(xt_rsc_1_13_i_oswt),
      .xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_13_i_biwt(xt_rsc_1_13_i_biwt),
      .xt_rsc_1_13_i_bdwt(xt_rsc_1_13_i_bdwt),
      .xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_13_i_wea_d_core_sct_pff(xt_rsc_1_13_i_wea_d_core_sct_iff),
      .xt_rsc_1_13_i_wea_d_core_psct_pff(xt_rsc_1_13_i_wea_d_core_psct_pff),
      .xt_rsc_1_13_i_oswt_pff(xt_rsc_1_13_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_dp peaseNTT_core_xt_rsc_1_13_i_1_xt_rsc_1_13_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_13_i_qa_d(xt_rsc_1_13_i_qa_d),
      .xt_rsc_1_13_i_qa_d_mxwt(xt_rsc_1_13_i_qa_d_mxwt),
      .xt_rsc_1_13_i_biwt(xt_rsc_1_13_i_biwt),
      .xt_rsc_1_13_i_bdwt(xt_rsc_1_13_i_bdwt)
    );
  assign xt_rsc_1_13_i_wea_d_pff = xt_rsc_1_13_i_wea_d_core_sct_iff;
  assign xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_12_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_12_i_1 (
  clk, rst, xt_rsc_1_12_i_qa_d, xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_12_i_oswt, xt_rsc_1_12_i_qa_d_mxwt, xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_12_i_wea_d_pff, xt_rsc_1_12_i_wea_d_core_psct_pff, xt_rsc_1_12_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_12_i_qa_d;
  output xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_12_i_oswt;
  output [31:0] xt_rsc_1_12_i_qa_d_mxwt;
  input xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_12_i_wea_d_pff;
  input xt_rsc_1_12_i_wea_d_core_psct_pff;
  input xt_rsc_1_12_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_12_i_biwt;
  wire xt_rsc_1_12_i_bdwt;
  wire xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_12_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_ctrl peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_12_i_oswt(xt_rsc_1_12_i_oswt),
      .xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_12_i_biwt(xt_rsc_1_12_i_biwt),
      .xt_rsc_1_12_i_bdwt(xt_rsc_1_12_i_bdwt),
      .xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_12_i_wea_d_core_sct_pff(xt_rsc_1_12_i_wea_d_core_sct_iff),
      .xt_rsc_1_12_i_wea_d_core_psct_pff(xt_rsc_1_12_i_wea_d_core_psct_pff),
      .xt_rsc_1_12_i_oswt_pff(xt_rsc_1_12_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_dp peaseNTT_core_xt_rsc_1_12_i_1_xt_rsc_1_12_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_12_i_qa_d(xt_rsc_1_12_i_qa_d),
      .xt_rsc_1_12_i_qa_d_mxwt(xt_rsc_1_12_i_qa_d_mxwt),
      .xt_rsc_1_12_i_biwt(xt_rsc_1_12_i_biwt),
      .xt_rsc_1_12_i_bdwt(xt_rsc_1_12_i_bdwt)
    );
  assign xt_rsc_1_12_i_wea_d_pff = xt_rsc_1_12_i_wea_d_core_sct_iff;
  assign xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_11_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_11_i_1 (
  clk, rst, xt_rsc_1_11_i_qa_d, xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_11_i_oswt, xt_rsc_1_11_i_qa_d_mxwt, xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_11_i_wea_d_pff, xt_rsc_1_11_i_wea_d_core_psct_pff, xt_rsc_1_11_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_11_i_qa_d;
  output xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_11_i_oswt;
  output [31:0] xt_rsc_1_11_i_qa_d_mxwt;
  input xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_11_i_wea_d_pff;
  input xt_rsc_1_11_i_wea_d_core_psct_pff;
  input xt_rsc_1_11_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_11_i_biwt;
  wire xt_rsc_1_11_i_bdwt;
  wire xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_11_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_ctrl peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_11_i_oswt(xt_rsc_1_11_i_oswt),
      .xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_11_i_biwt(xt_rsc_1_11_i_biwt),
      .xt_rsc_1_11_i_bdwt(xt_rsc_1_11_i_bdwt),
      .xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_11_i_wea_d_core_sct_pff(xt_rsc_1_11_i_wea_d_core_sct_iff),
      .xt_rsc_1_11_i_wea_d_core_psct_pff(xt_rsc_1_11_i_wea_d_core_psct_pff),
      .xt_rsc_1_11_i_oswt_pff(xt_rsc_1_11_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_dp peaseNTT_core_xt_rsc_1_11_i_1_xt_rsc_1_11_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_11_i_qa_d(xt_rsc_1_11_i_qa_d),
      .xt_rsc_1_11_i_qa_d_mxwt(xt_rsc_1_11_i_qa_d_mxwt),
      .xt_rsc_1_11_i_biwt(xt_rsc_1_11_i_biwt),
      .xt_rsc_1_11_i_bdwt(xt_rsc_1_11_i_bdwt)
    );
  assign xt_rsc_1_11_i_wea_d_pff = xt_rsc_1_11_i_wea_d_core_sct_iff;
  assign xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_10_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_10_i_1 (
  clk, rst, xt_rsc_1_10_i_qa_d, xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_10_i_oswt, xt_rsc_1_10_i_qa_d_mxwt, xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_10_i_wea_d_pff, xt_rsc_1_10_i_wea_d_core_psct_pff, xt_rsc_1_10_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_10_i_qa_d;
  output xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_10_i_oswt;
  output [31:0] xt_rsc_1_10_i_qa_d_mxwt;
  input xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_10_i_wea_d_pff;
  input xt_rsc_1_10_i_wea_d_core_psct_pff;
  input xt_rsc_1_10_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_10_i_biwt;
  wire xt_rsc_1_10_i_bdwt;
  wire xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_10_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_ctrl peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_10_i_oswt(xt_rsc_1_10_i_oswt),
      .xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_10_i_biwt(xt_rsc_1_10_i_biwt),
      .xt_rsc_1_10_i_bdwt(xt_rsc_1_10_i_bdwt),
      .xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_10_i_wea_d_core_sct_pff(xt_rsc_1_10_i_wea_d_core_sct_iff),
      .xt_rsc_1_10_i_wea_d_core_psct_pff(xt_rsc_1_10_i_wea_d_core_psct_pff),
      .xt_rsc_1_10_i_oswt_pff(xt_rsc_1_10_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_dp peaseNTT_core_xt_rsc_1_10_i_1_xt_rsc_1_10_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_10_i_qa_d(xt_rsc_1_10_i_qa_d),
      .xt_rsc_1_10_i_qa_d_mxwt(xt_rsc_1_10_i_qa_d_mxwt),
      .xt_rsc_1_10_i_biwt(xt_rsc_1_10_i_biwt),
      .xt_rsc_1_10_i_bdwt(xt_rsc_1_10_i_bdwt)
    );
  assign xt_rsc_1_10_i_wea_d_pff = xt_rsc_1_10_i_wea_d_core_sct_iff;
  assign xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_9_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_9_i_1 (
  clk, rst, xt_rsc_1_9_i_qa_d, xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_9_i_oswt, xt_rsc_1_9_i_qa_d_mxwt, xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_9_i_wea_d_pff, xt_rsc_1_9_i_wea_d_core_psct_pff, xt_rsc_1_9_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_9_i_qa_d;
  output xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_9_i_oswt;
  output [31:0] xt_rsc_1_9_i_qa_d_mxwt;
  input xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_9_i_wea_d_pff;
  input xt_rsc_1_9_i_wea_d_core_psct_pff;
  input xt_rsc_1_9_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_9_i_biwt;
  wire xt_rsc_1_9_i_bdwt;
  wire xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_9_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_ctrl peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_9_i_oswt(xt_rsc_1_9_i_oswt),
      .xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_9_i_biwt(xt_rsc_1_9_i_biwt),
      .xt_rsc_1_9_i_bdwt(xt_rsc_1_9_i_bdwt),
      .xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_9_i_wea_d_core_sct_pff(xt_rsc_1_9_i_wea_d_core_sct_iff),
      .xt_rsc_1_9_i_wea_d_core_psct_pff(xt_rsc_1_9_i_wea_d_core_psct_pff),
      .xt_rsc_1_9_i_oswt_pff(xt_rsc_1_9_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_dp peaseNTT_core_xt_rsc_1_9_i_1_xt_rsc_1_9_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_9_i_qa_d(xt_rsc_1_9_i_qa_d),
      .xt_rsc_1_9_i_qa_d_mxwt(xt_rsc_1_9_i_qa_d_mxwt),
      .xt_rsc_1_9_i_biwt(xt_rsc_1_9_i_biwt),
      .xt_rsc_1_9_i_bdwt(xt_rsc_1_9_i_bdwt)
    );
  assign xt_rsc_1_9_i_wea_d_pff = xt_rsc_1_9_i_wea_d_core_sct_iff;
  assign xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_8_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_8_i_1 (
  clk, rst, xt_rsc_1_8_i_qa_d, xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_8_i_oswt, xt_rsc_1_8_i_qa_d_mxwt, xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_8_i_wea_d_pff, xt_rsc_1_8_i_wea_d_core_psct_pff, xt_rsc_1_8_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_8_i_qa_d;
  output xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_8_i_oswt;
  output [31:0] xt_rsc_1_8_i_qa_d_mxwt;
  input xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_8_i_wea_d_pff;
  input xt_rsc_1_8_i_wea_d_core_psct_pff;
  input xt_rsc_1_8_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_8_i_biwt;
  wire xt_rsc_1_8_i_bdwt;
  wire xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_8_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_ctrl peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_8_i_oswt(xt_rsc_1_8_i_oswt),
      .xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_8_i_biwt(xt_rsc_1_8_i_biwt),
      .xt_rsc_1_8_i_bdwt(xt_rsc_1_8_i_bdwt),
      .xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_8_i_wea_d_core_sct_pff(xt_rsc_1_8_i_wea_d_core_sct_iff),
      .xt_rsc_1_8_i_wea_d_core_psct_pff(xt_rsc_1_8_i_wea_d_core_psct_pff),
      .xt_rsc_1_8_i_oswt_pff(xt_rsc_1_8_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_dp peaseNTT_core_xt_rsc_1_8_i_1_xt_rsc_1_8_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_8_i_qa_d(xt_rsc_1_8_i_qa_d),
      .xt_rsc_1_8_i_qa_d_mxwt(xt_rsc_1_8_i_qa_d_mxwt),
      .xt_rsc_1_8_i_biwt(xt_rsc_1_8_i_biwt),
      .xt_rsc_1_8_i_bdwt(xt_rsc_1_8_i_bdwt)
    );
  assign xt_rsc_1_8_i_wea_d_pff = xt_rsc_1_8_i_wea_d_core_sct_iff;
  assign xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_7_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_7_i_1 (
  clk, rst, xt_rsc_1_7_i_qa_d, xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_7_i_oswt, xt_rsc_1_7_i_qa_d_mxwt, xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_7_i_wea_d_pff, xt_rsc_1_7_i_wea_d_core_psct_pff, xt_rsc_1_7_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_7_i_qa_d;
  output xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_7_i_oswt;
  output [31:0] xt_rsc_1_7_i_qa_d_mxwt;
  input xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_7_i_wea_d_pff;
  input xt_rsc_1_7_i_wea_d_core_psct_pff;
  input xt_rsc_1_7_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_7_i_biwt;
  wire xt_rsc_1_7_i_bdwt;
  wire xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_7_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_ctrl peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_7_i_oswt(xt_rsc_1_7_i_oswt),
      .xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_7_i_biwt(xt_rsc_1_7_i_biwt),
      .xt_rsc_1_7_i_bdwt(xt_rsc_1_7_i_bdwt),
      .xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_7_i_wea_d_core_sct_pff(xt_rsc_1_7_i_wea_d_core_sct_iff),
      .xt_rsc_1_7_i_wea_d_core_psct_pff(xt_rsc_1_7_i_wea_d_core_psct_pff),
      .xt_rsc_1_7_i_oswt_pff(xt_rsc_1_7_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_dp peaseNTT_core_xt_rsc_1_7_i_1_xt_rsc_1_7_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_7_i_qa_d(xt_rsc_1_7_i_qa_d),
      .xt_rsc_1_7_i_qa_d_mxwt(xt_rsc_1_7_i_qa_d_mxwt),
      .xt_rsc_1_7_i_biwt(xt_rsc_1_7_i_biwt),
      .xt_rsc_1_7_i_bdwt(xt_rsc_1_7_i_bdwt)
    );
  assign xt_rsc_1_7_i_wea_d_pff = xt_rsc_1_7_i_wea_d_core_sct_iff;
  assign xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_6_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_6_i_1 (
  clk, rst, xt_rsc_1_6_i_qa_d, xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_6_i_oswt, xt_rsc_1_6_i_qa_d_mxwt, xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_6_i_wea_d_pff, xt_rsc_1_6_i_wea_d_core_psct_pff, xt_rsc_1_6_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_6_i_qa_d;
  output xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_6_i_oswt;
  output [31:0] xt_rsc_1_6_i_qa_d_mxwt;
  input xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_6_i_wea_d_pff;
  input xt_rsc_1_6_i_wea_d_core_psct_pff;
  input xt_rsc_1_6_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_6_i_biwt;
  wire xt_rsc_1_6_i_bdwt;
  wire xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_6_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_ctrl peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_6_i_oswt(xt_rsc_1_6_i_oswt),
      .xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_6_i_biwt(xt_rsc_1_6_i_biwt),
      .xt_rsc_1_6_i_bdwt(xt_rsc_1_6_i_bdwt),
      .xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_6_i_wea_d_core_sct_pff(xt_rsc_1_6_i_wea_d_core_sct_iff),
      .xt_rsc_1_6_i_wea_d_core_psct_pff(xt_rsc_1_6_i_wea_d_core_psct_pff),
      .xt_rsc_1_6_i_oswt_pff(xt_rsc_1_6_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_dp peaseNTT_core_xt_rsc_1_6_i_1_xt_rsc_1_6_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_6_i_qa_d(xt_rsc_1_6_i_qa_d),
      .xt_rsc_1_6_i_qa_d_mxwt(xt_rsc_1_6_i_qa_d_mxwt),
      .xt_rsc_1_6_i_biwt(xt_rsc_1_6_i_biwt),
      .xt_rsc_1_6_i_bdwt(xt_rsc_1_6_i_bdwt)
    );
  assign xt_rsc_1_6_i_wea_d_pff = xt_rsc_1_6_i_wea_d_core_sct_iff;
  assign xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_5_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_5_i_1 (
  clk, rst, xt_rsc_1_5_i_qa_d, xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_5_i_oswt, xt_rsc_1_5_i_qa_d_mxwt, xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_5_i_wea_d_pff, xt_rsc_1_5_i_wea_d_core_psct_pff, xt_rsc_1_5_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_5_i_qa_d;
  output xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_5_i_oswt;
  output [31:0] xt_rsc_1_5_i_qa_d_mxwt;
  input xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_5_i_wea_d_pff;
  input xt_rsc_1_5_i_wea_d_core_psct_pff;
  input xt_rsc_1_5_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_5_i_biwt;
  wire xt_rsc_1_5_i_bdwt;
  wire xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_5_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_ctrl peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_5_i_oswt(xt_rsc_1_5_i_oswt),
      .xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_5_i_biwt(xt_rsc_1_5_i_biwt),
      .xt_rsc_1_5_i_bdwt(xt_rsc_1_5_i_bdwt),
      .xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_5_i_wea_d_core_sct_pff(xt_rsc_1_5_i_wea_d_core_sct_iff),
      .xt_rsc_1_5_i_wea_d_core_psct_pff(xt_rsc_1_5_i_wea_d_core_psct_pff),
      .xt_rsc_1_5_i_oswt_pff(xt_rsc_1_5_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_dp peaseNTT_core_xt_rsc_1_5_i_1_xt_rsc_1_5_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_5_i_qa_d(xt_rsc_1_5_i_qa_d),
      .xt_rsc_1_5_i_qa_d_mxwt(xt_rsc_1_5_i_qa_d_mxwt),
      .xt_rsc_1_5_i_biwt(xt_rsc_1_5_i_biwt),
      .xt_rsc_1_5_i_bdwt(xt_rsc_1_5_i_bdwt)
    );
  assign xt_rsc_1_5_i_wea_d_pff = xt_rsc_1_5_i_wea_d_core_sct_iff;
  assign xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_4_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_4_i_1 (
  clk, rst, xt_rsc_1_4_i_qa_d, xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_4_i_oswt, xt_rsc_1_4_i_qa_d_mxwt, xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_4_i_wea_d_pff, xt_rsc_1_4_i_wea_d_core_psct_pff, xt_rsc_1_4_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_4_i_qa_d;
  output xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_4_i_oswt;
  output [31:0] xt_rsc_1_4_i_qa_d_mxwt;
  input xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_4_i_wea_d_pff;
  input xt_rsc_1_4_i_wea_d_core_psct_pff;
  input xt_rsc_1_4_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_4_i_biwt;
  wire xt_rsc_1_4_i_bdwt;
  wire xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_4_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_ctrl peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_4_i_oswt(xt_rsc_1_4_i_oswt),
      .xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_4_i_biwt(xt_rsc_1_4_i_biwt),
      .xt_rsc_1_4_i_bdwt(xt_rsc_1_4_i_bdwt),
      .xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_4_i_wea_d_core_sct_pff(xt_rsc_1_4_i_wea_d_core_sct_iff),
      .xt_rsc_1_4_i_wea_d_core_psct_pff(xt_rsc_1_4_i_wea_d_core_psct_pff),
      .xt_rsc_1_4_i_oswt_pff(xt_rsc_1_4_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_dp peaseNTT_core_xt_rsc_1_4_i_1_xt_rsc_1_4_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_4_i_qa_d(xt_rsc_1_4_i_qa_d),
      .xt_rsc_1_4_i_qa_d_mxwt(xt_rsc_1_4_i_qa_d_mxwt),
      .xt_rsc_1_4_i_biwt(xt_rsc_1_4_i_biwt),
      .xt_rsc_1_4_i_bdwt(xt_rsc_1_4_i_bdwt)
    );
  assign xt_rsc_1_4_i_wea_d_pff = xt_rsc_1_4_i_wea_d_core_sct_iff;
  assign xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_3_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_3_i_1 (
  clk, rst, xt_rsc_1_3_i_qa_d, xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_3_i_oswt, xt_rsc_1_3_i_qa_d_mxwt, xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_3_i_wea_d_pff, xt_rsc_1_3_i_wea_d_core_psct_pff, xt_rsc_1_3_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_3_i_qa_d;
  output xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_3_i_oswt;
  output [31:0] xt_rsc_1_3_i_qa_d_mxwt;
  input xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_3_i_wea_d_pff;
  input xt_rsc_1_3_i_wea_d_core_psct_pff;
  input xt_rsc_1_3_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_3_i_biwt;
  wire xt_rsc_1_3_i_bdwt;
  wire xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_3_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_ctrl peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_3_i_oswt(xt_rsc_1_3_i_oswt),
      .xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_3_i_biwt(xt_rsc_1_3_i_biwt),
      .xt_rsc_1_3_i_bdwt(xt_rsc_1_3_i_bdwt),
      .xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_3_i_wea_d_core_sct_pff(xt_rsc_1_3_i_wea_d_core_sct_iff),
      .xt_rsc_1_3_i_wea_d_core_psct_pff(xt_rsc_1_3_i_wea_d_core_psct_pff),
      .xt_rsc_1_3_i_oswt_pff(xt_rsc_1_3_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_dp peaseNTT_core_xt_rsc_1_3_i_1_xt_rsc_1_3_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_3_i_qa_d(xt_rsc_1_3_i_qa_d),
      .xt_rsc_1_3_i_qa_d_mxwt(xt_rsc_1_3_i_qa_d_mxwt),
      .xt_rsc_1_3_i_biwt(xt_rsc_1_3_i_biwt),
      .xt_rsc_1_3_i_bdwt(xt_rsc_1_3_i_bdwt)
    );
  assign xt_rsc_1_3_i_wea_d_pff = xt_rsc_1_3_i_wea_d_core_sct_iff;
  assign xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_2_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_2_i_1 (
  clk, rst, xt_rsc_1_2_i_qa_d, xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_2_i_oswt, xt_rsc_1_2_i_qa_d_mxwt, xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_2_i_wea_d_pff, xt_rsc_1_2_i_wea_d_core_psct_pff, xt_rsc_1_2_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_2_i_qa_d;
  output xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_2_i_oswt;
  output [31:0] xt_rsc_1_2_i_qa_d_mxwt;
  input xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_2_i_wea_d_pff;
  input xt_rsc_1_2_i_wea_d_core_psct_pff;
  input xt_rsc_1_2_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_2_i_biwt;
  wire xt_rsc_1_2_i_bdwt;
  wire xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_2_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_ctrl peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_2_i_oswt(xt_rsc_1_2_i_oswt),
      .xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_2_i_biwt(xt_rsc_1_2_i_biwt),
      .xt_rsc_1_2_i_bdwt(xt_rsc_1_2_i_bdwt),
      .xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_2_i_wea_d_core_sct_pff(xt_rsc_1_2_i_wea_d_core_sct_iff),
      .xt_rsc_1_2_i_wea_d_core_psct_pff(xt_rsc_1_2_i_wea_d_core_psct_pff),
      .xt_rsc_1_2_i_oswt_pff(xt_rsc_1_2_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_dp peaseNTT_core_xt_rsc_1_2_i_1_xt_rsc_1_2_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_2_i_qa_d(xt_rsc_1_2_i_qa_d),
      .xt_rsc_1_2_i_qa_d_mxwt(xt_rsc_1_2_i_qa_d_mxwt),
      .xt_rsc_1_2_i_biwt(xt_rsc_1_2_i_biwt),
      .xt_rsc_1_2_i_bdwt(xt_rsc_1_2_i_bdwt)
    );
  assign xt_rsc_1_2_i_wea_d_pff = xt_rsc_1_2_i_wea_d_core_sct_iff;
  assign xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_1_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_1_i_1 (
  clk, rst, xt_rsc_1_1_i_qa_d, xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_1_i_oswt, xt_rsc_1_1_i_qa_d_mxwt, xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_1_i_wea_d_pff, xt_rsc_1_1_i_wea_d_core_psct_pff, xt_rsc_1_1_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_1_i_qa_d;
  output xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_1_i_oswt;
  output [31:0] xt_rsc_1_1_i_qa_d_mxwt;
  input xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_1_i_wea_d_pff;
  input xt_rsc_1_1_i_wea_d_core_psct_pff;
  input xt_rsc_1_1_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_1_i_biwt;
  wire xt_rsc_1_1_i_bdwt;
  wire xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_1_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_ctrl peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_1_i_oswt(xt_rsc_1_1_i_oswt),
      .xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_1_i_biwt(xt_rsc_1_1_i_biwt),
      .xt_rsc_1_1_i_bdwt(xt_rsc_1_1_i_bdwt),
      .xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_1_i_wea_d_core_sct_pff(xt_rsc_1_1_i_wea_d_core_sct_iff),
      .xt_rsc_1_1_i_wea_d_core_psct_pff(xt_rsc_1_1_i_wea_d_core_psct_pff),
      .xt_rsc_1_1_i_oswt_pff(xt_rsc_1_1_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_dp peaseNTT_core_xt_rsc_1_1_i_1_xt_rsc_1_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_1_i_qa_d(xt_rsc_1_1_i_qa_d),
      .xt_rsc_1_1_i_qa_d_mxwt(xt_rsc_1_1_i_qa_d_mxwt),
      .xt_rsc_1_1_i_biwt(xt_rsc_1_1_i_biwt),
      .xt_rsc_1_1_i_bdwt(xt_rsc_1_1_i_bdwt)
    );
  assign xt_rsc_1_1_i_wea_d_pff = xt_rsc_1_1_i_wea_d_core_sct_iff;
  assign xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_1_0_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_1_0_i_1 (
  clk, rst, xt_rsc_1_0_i_qa_d, xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_1_0_i_oswt, xt_rsc_1_0_i_qa_d_mxwt, xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_1_0_i_wea_d_pff, xt_rsc_1_0_i_wea_d_core_psct_pff, xt_rsc_1_0_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_1_0_i_qa_d;
  output xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_1_0_i_oswt;
  output [31:0] xt_rsc_1_0_i_qa_d_mxwt;
  input xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_1_0_i_wea_d_pff;
  input xt_rsc_1_0_i_wea_d_core_psct_pff;
  input xt_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_1_0_i_biwt;
  wire xt_rsc_1_0_i_bdwt;
  wire xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_1_0_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_ctrl peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_0_i_oswt(xt_rsc_1_0_i_oswt),
      .xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_1_0_i_biwt(xt_rsc_1_0_i_biwt),
      .xt_rsc_1_0_i_bdwt(xt_rsc_1_0_i_bdwt),
      .xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_1_0_i_wea_d_core_sct_pff(xt_rsc_1_0_i_wea_d_core_sct_iff),
      .xt_rsc_1_0_i_wea_d_core_psct_pff(xt_rsc_1_0_i_wea_d_core_psct_pff),
      .xt_rsc_1_0_i_oswt_pff(xt_rsc_1_0_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_dp peaseNTT_core_xt_rsc_1_0_i_1_xt_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_0_i_qa_d(xt_rsc_1_0_i_qa_d),
      .xt_rsc_1_0_i_qa_d_mxwt(xt_rsc_1_0_i_qa_d_mxwt),
      .xt_rsc_1_0_i_biwt(xt_rsc_1_0_i_biwt),
      .xt_rsc_1_0_i_bdwt(xt_rsc_1_0_i_bdwt)
    );
  assign xt_rsc_1_0_i_wea_d_pff = xt_rsc_1_0_i_wea_d_core_sct_iff;
  assign xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_31_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_31_i_1 (
  clk, rst, xt_rsc_0_31_i_qa_d, xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_31_i_oswt, xt_rsc_0_31_i_qa_d_mxwt, xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_31_i_wea_d_pff, xt_rsc_0_31_i_wea_d_core_psct_pff, xt_rsc_0_31_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_31_i_qa_d;
  output xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_31_i_oswt;
  output [31:0] xt_rsc_0_31_i_qa_d_mxwt;
  input xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_31_i_wea_d_pff;
  input xt_rsc_0_31_i_wea_d_core_psct_pff;
  input xt_rsc_0_31_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_31_i_biwt;
  wire xt_rsc_0_31_i_bdwt;
  wire xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_31_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_ctrl peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_31_i_oswt(xt_rsc_0_31_i_oswt),
      .xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_31_i_biwt(xt_rsc_0_31_i_biwt),
      .xt_rsc_0_31_i_bdwt(xt_rsc_0_31_i_bdwt),
      .xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_31_i_wea_d_core_sct_pff(xt_rsc_0_31_i_wea_d_core_sct_iff),
      .xt_rsc_0_31_i_wea_d_core_psct_pff(xt_rsc_0_31_i_wea_d_core_psct_pff),
      .xt_rsc_0_31_i_oswt_pff(xt_rsc_0_31_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_dp peaseNTT_core_xt_rsc_0_31_i_1_xt_rsc_0_31_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_31_i_qa_d(xt_rsc_0_31_i_qa_d),
      .xt_rsc_0_31_i_qa_d_mxwt(xt_rsc_0_31_i_qa_d_mxwt),
      .xt_rsc_0_31_i_biwt(xt_rsc_0_31_i_biwt),
      .xt_rsc_0_31_i_bdwt(xt_rsc_0_31_i_bdwt)
    );
  assign xt_rsc_0_31_i_wea_d_pff = xt_rsc_0_31_i_wea_d_core_sct_iff;
  assign xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_30_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_30_i_1 (
  clk, rst, xt_rsc_0_30_i_qa_d, xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_30_i_oswt, xt_rsc_0_30_i_qa_d_mxwt, xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_30_i_wea_d_pff, xt_rsc_0_30_i_wea_d_core_psct_pff, xt_rsc_0_30_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_30_i_qa_d;
  output xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_30_i_oswt;
  output [31:0] xt_rsc_0_30_i_qa_d_mxwt;
  input xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_30_i_wea_d_pff;
  input xt_rsc_0_30_i_wea_d_core_psct_pff;
  input xt_rsc_0_30_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_30_i_biwt;
  wire xt_rsc_0_30_i_bdwt;
  wire xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_30_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_ctrl peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_30_i_oswt(xt_rsc_0_30_i_oswt),
      .xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_30_i_biwt(xt_rsc_0_30_i_biwt),
      .xt_rsc_0_30_i_bdwt(xt_rsc_0_30_i_bdwt),
      .xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_30_i_wea_d_core_sct_pff(xt_rsc_0_30_i_wea_d_core_sct_iff),
      .xt_rsc_0_30_i_wea_d_core_psct_pff(xt_rsc_0_30_i_wea_d_core_psct_pff),
      .xt_rsc_0_30_i_oswt_pff(xt_rsc_0_30_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_dp peaseNTT_core_xt_rsc_0_30_i_1_xt_rsc_0_30_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_30_i_qa_d(xt_rsc_0_30_i_qa_d),
      .xt_rsc_0_30_i_qa_d_mxwt(xt_rsc_0_30_i_qa_d_mxwt),
      .xt_rsc_0_30_i_biwt(xt_rsc_0_30_i_biwt),
      .xt_rsc_0_30_i_bdwt(xt_rsc_0_30_i_bdwt)
    );
  assign xt_rsc_0_30_i_wea_d_pff = xt_rsc_0_30_i_wea_d_core_sct_iff;
  assign xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_29_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_29_i_1 (
  clk, rst, xt_rsc_0_29_i_qa_d, xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_29_i_oswt, xt_rsc_0_29_i_qa_d_mxwt, xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_29_i_wea_d_pff, xt_rsc_0_29_i_wea_d_core_psct_pff, xt_rsc_0_29_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_29_i_qa_d;
  output xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_29_i_oswt;
  output [31:0] xt_rsc_0_29_i_qa_d_mxwt;
  input xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_29_i_wea_d_pff;
  input xt_rsc_0_29_i_wea_d_core_psct_pff;
  input xt_rsc_0_29_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_29_i_biwt;
  wire xt_rsc_0_29_i_bdwt;
  wire xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_29_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_ctrl peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_29_i_oswt(xt_rsc_0_29_i_oswt),
      .xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_29_i_biwt(xt_rsc_0_29_i_biwt),
      .xt_rsc_0_29_i_bdwt(xt_rsc_0_29_i_bdwt),
      .xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_29_i_wea_d_core_sct_pff(xt_rsc_0_29_i_wea_d_core_sct_iff),
      .xt_rsc_0_29_i_wea_d_core_psct_pff(xt_rsc_0_29_i_wea_d_core_psct_pff),
      .xt_rsc_0_29_i_oswt_pff(xt_rsc_0_29_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_dp peaseNTT_core_xt_rsc_0_29_i_1_xt_rsc_0_29_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_29_i_qa_d(xt_rsc_0_29_i_qa_d),
      .xt_rsc_0_29_i_qa_d_mxwt(xt_rsc_0_29_i_qa_d_mxwt),
      .xt_rsc_0_29_i_biwt(xt_rsc_0_29_i_biwt),
      .xt_rsc_0_29_i_bdwt(xt_rsc_0_29_i_bdwt)
    );
  assign xt_rsc_0_29_i_wea_d_pff = xt_rsc_0_29_i_wea_d_core_sct_iff;
  assign xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_28_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_28_i_1 (
  clk, rst, xt_rsc_0_28_i_qa_d, xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_28_i_oswt, xt_rsc_0_28_i_qa_d_mxwt, xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_28_i_wea_d_pff, xt_rsc_0_28_i_wea_d_core_psct_pff, xt_rsc_0_28_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_28_i_qa_d;
  output xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_28_i_oswt;
  output [31:0] xt_rsc_0_28_i_qa_d_mxwt;
  input xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_28_i_wea_d_pff;
  input xt_rsc_0_28_i_wea_d_core_psct_pff;
  input xt_rsc_0_28_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_28_i_biwt;
  wire xt_rsc_0_28_i_bdwt;
  wire xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_28_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_ctrl peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_28_i_oswt(xt_rsc_0_28_i_oswt),
      .xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_28_i_biwt(xt_rsc_0_28_i_biwt),
      .xt_rsc_0_28_i_bdwt(xt_rsc_0_28_i_bdwt),
      .xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_28_i_wea_d_core_sct_pff(xt_rsc_0_28_i_wea_d_core_sct_iff),
      .xt_rsc_0_28_i_wea_d_core_psct_pff(xt_rsc_0_28_i_wea_d_core_psct_pff),
      .xt_rsc_0_28_i_oswt_pff(xt_rsc_0_28_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_dp peaseNTT_core_xt_rsc_0_28_i_1_xt_rsc_0_28_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_28_i_qa_d(xt_rsc_0_28_i_qa_d),
      .xt_rsc_0_28_i_qa_d_mxwt(xt_rsc_0_28_i_qa_d_mxwt),
      .xt_rsc_0_28_i_biwt(xt_rsc_0_28_i_biwt),
      .xt_rsc_0_28_i_bdwt(xt_rsc_0_28_i_bdwt)
    );
  assign xt_rsc_0_28_i_wea_d_pff = xt_rsc_0_28_i_wea_d_core_sct_iff;
  assign xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_27_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_27_i_1 (
  clk, rst, xt_rsc_0_27_i_qa_d, xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_27_i_oswt, xt_rsc_0_27_i_qa_d_mxwt, xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_27_i_wea_d_pff, xt_rsc_0_27_i_wea_d_core_psct_pff, xt_rsc_0_27_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_27_i_qa_d;
  output xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_27_i_oswt;
  output [31:0] xt_rsc_0_27_i_qa_d_mxwt;
  input xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_27_i_wea_d_pff;
  input xt_rsc_0_27_i_wea_d_core_psct_pff;
  input xt_rsc_0_27_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_27_i_biwt;
  wire xt_rsc_0_27_i_bdwt;
  wire xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_27_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_ctrl peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_27_i_oswt(xt_rsc_0_27_i_oswt),
      .xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_27_i_biwt(xt_rsc_0_27_i_biwt),
      .xt_rsc_0_27_i_bdwt(xt_rsc_0_27_i_bdwt),
      .xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_27_i_wea_d_core_sct_pff(xt_rsc_0_27_i_wea_d_core_sct_iff),
      .xt_rsc_0_27_i_wea_d_core_psct_pff(xt_rsc_0_27_i_wea_d_core_psct_pff),
      .xt_rsc_0_27_i_oswt_pff(xt_rsc_0_27_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_dp peaseNTT_core_xt_rsc_0_27_i_1_xt_rsc_0_27_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_27_i_qa_d(xt_rsc_0_27_i_qa_d),
      .xt_rsc_0_27_i_qa_d_mxwt(xt_rsc_0_27_i_qa_d_mxwt),
      .xt_rsc_0_27_i_biwt(xt_rsc_0_27_i_biwt),
      .xt_rsc_0_27_i_bdwt(xt_rsc_0_27_i_bdwt)
    );
  assign xt_rsc_0_27_i_wea_d_pff = xt_rsc_0_27_i_wea_d_core_sct_iff;
  assign xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_26_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_26_i_1 (
  clk, rst, xt_rsc_0_26_i_qa_d, xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_26_i_oswt, xt_rsc_0_26_i_qa_d_mxwt, xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_26_i_wea_d_pff, xt_rsc_0_26_i_wea_d_core_psct_pff, xt_rsc_0_26_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_26_i_qa_d;
  output xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_26_i_oswt;
  output [31:0] xt_rsc_0_26_i_qa_d_mxwt;
  input xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_26_i_wea_d_pff;
  input xt_rsc_0_26_i_wea_d_core_psct_pff;
  input xt_rsc_0_26_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_26_i_biwt;
  wire xt_rsc_0_26_i_bdwt;
  wire xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_26_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_ctrl peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_26_i_oswt(xt_rsc_0_26_i_oswt),
      .xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_26_i_biwt(xt_rsc_0_26_i_biwt),
      .xt_rsc_0_26_i_bdwt(xt_rsc_0_26_i_bdwt),
      .xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_26_i_wea_d_core_sct_pff(xt_rsc_0_26_i_wea_d_core_sct_iff),
      .xt_rsc_0_26_i_wea_d_core_psct_pff(xt_rsc_0_26_i_wea_d_core_psct_pff),
      .xt_rsc_0_26_i_oswt_pff(xt_rsc_0_26_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_dp peaseNTT_core_xt_rsc_0_26_i_1_xt_rsc_0_26_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_26_i_qa_d(xt_rsc_0_26_i_qa_d),
      .xt_rsc_0_26_i_qa_d_mxwt(xt_rsc_0_26_i_qa_d_mxwt),
      .xt_rsc_0_26_i_biwt(xt_rsc_0_26_i_biwt),
      .xt_rsc_0_26_i_bdwt(xt_rsc_0_26_i_bdwt)
    );
  assign xt_rsc_0_26_i_wea_d_pff = xt_rsc_0_26_i_wea_d_core_sct_iff;
  assign xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_25_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_25_i_1 (
  clk, rst, xt_rsc_0_25_i_qa_d, xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_25_i_oswt, xt_rsc_0_25_i_qa_d_mxwt, xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_25_i_wea_d_pff, xt_rsc_0_25_i_wea_d_core_psct_pff, xt_rsc_0_25_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_25_i_qa_d;
  output xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_25_i_oswt;
  output [31:0] xt_rsc_0_25_i_qa_d_mxwt;
  input xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_25_i_wea_d_pff;
  input xt_rsc_0_25_i_wea_d_core_psct_pff;
  input xt_rsc_0_25_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_25_i_biwt;
  wire xt_rsc_0_25_i_bdwt;
  wire xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_25_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_ctrl peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_25_i_oswt(xt_rsc_0_25_i_oswt),
      .xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_25_i_biwt(xt_rsc_0_25_i_biwt),
      .xt_rsc_0_25_i_bdwt(xt_rsc_0_25_i_bdwt),
      .xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_25_i_wea_d_core_sct_pff(xt_rsc_0_25_i_wea_d_core_sct_iff),
      .xt_rsc_0_25_i_wea_d_core_psct_pff(xt_rsc_0_25_i_wea_d_core_psct_pff),
      .xt_rsc_0_25_i_oswt_pff(xt_rsc_0_25_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_dp peaseNTT_core_xt_rsc_0_25_i_1_xt_rsc_0_25_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_25_i_qa_d(xt_rsc_0_25_i_qa_d),
      .xt_rsc_0_25_i_qa_d_mxwt(xt_rsc_0_25_i_qa_d_mxwt),
      .xt_rsc_0_25_i_biwt(xt_rsc_0_25_i_biwt),
      .xt_rsc_0_25_i_bdwt(xt_rsc_0_25_i_bdwt)
    );
  assign xt_rsc_0_25_i_wea_d_pff = xt_rsc_0_25_i_wea_d_core_sct_iff;
  assign xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_24_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_24_i_1 (
  clk, rst, xt_rsc_0_24_i_qa_d, xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_24_i_oswt, xt_rsc_0_24_i_qa_d_mxwt, xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_24_i_wea_d_pff, xt_rsc_0_24_i_wea_d_core_psct_pff, xt_rsc_0_24_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_24_i_qa_d;
  output xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_24_i_oswt;
  output [31:0] xt_rsc_0_24_i_qa_d_mxwt;
  input xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_24_i_wea_d_pff;
  input xt_rsc_0_24_i_wea_d_core_psct_pff;
  input xt_rsc_0_24_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_24_i_biwt;
  wire xt_rsc_0_24_i_bdwt;
  wire xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_24_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_ctrl peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_24_i_oswt(xt_rsc_0_24_i_oswt),
      .xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_24_i_biwt(xt_rsc_0_24_i_biwt),
      .xt_rsc_0_24_i_bdwt(xt_rsc_0_24_i_bdwt),
      .xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_24_i_wea_d_core_sct_pff(xt_rsc_0_24_i_wea_d_core_sct_iff),
      .xt_rsc_0_24_i_wea_d_core_psct_pff(xt_rsc_0_24_i_wea_d_core_psct_pff),
      .xt_rsc_0_24_i_oswt_pff(xt_rsc_0_24_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_dp peaseNTT_core_xt_rsc_0_24_i_1_xt_rsc_0_24_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_24_i_qa_d(xt_rsc_0_24_i_qa_d),
      .xt_rsc_0_24_i_qa_d_mxwt(xt_rsc_0_24_i_qa_d_mxwt),
      .xt_rsc_0_24_i_biwt(xt_rsc_0_24_i_biwt),
      .xt_rsc_0_24_i_bdwt(xt_rsc_0_24_i_bdwt)
    );
  assign xt_rsc_0_24_i_wea_d_pff = xt_rsc_0_24_i_wea_d_core_sct_iff;
  assign xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_23_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_23_i_1 (
  clk, rst, xt_rsc_0_23_i_qa_d, xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_23_i_oswt, xt_rsc_0_23_i_qa_d_mxwt, xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_23_i_wea_d_pff, xt_rsc_0_23_i_wea_d_core_psct_pff, xt_rsc_0_23_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_23_i_qa_d;
  output xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_23_i_oswt;
  output [31:0] xt_rsc_0_23_i_qa_d_mxwt;
  input xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_23_i_wea_d_pff;
  input xt_rsc_0_23_i_wea_d_core_psct_pff;
  input xt_rsc_0_23_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_23_i_biwt;
  wire xt_rsc_0_23_i_bdwt;
  wire xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_23_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_ctrl peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_23_i_oswt(xt_rsc_0_23_i_oswt),
      .xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_23_i_biwt(xt_rsc_0_23_i_biwt),
      .xt_rsc_0_23_i_bdwt(xt_rsc_0_23_i_bdwt),
      .xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_23_i_wea_d_core_sct_pff(xt_rsc_0_23_i_wea_d_core_sct_iff),
      .xt_rsc_0_23_i_wea_d_core_psct_pff(xt_rsc_0_23_i_wea_d_core_psct_pff),
      .xt_rsc_0_23_i_oswt_pff(xt_rsc_0_23_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_dp peaseNTT_core_xt_rsc_0_23_i_1_xt_rsc_0_23_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_23_i_qa_d(xt_rsc_0_23_i_qa_d),
      .xt_rsc_0_23_i_qa_d_mxwt(xt_rsc_0_23_i_qa_d_mxwt),
      .xt_rsc_0_23_i_biwt(xt_rsc_0_23_i_biwt),
      .xt_rsc_0_23_i_bdwt(xt_rsc_0_23_i_bdwt)
    );
  assign xt_rsc_0_23_i_wea_d_pff = xt_rsc_0_23_i_wea_d_core_sct_iff;
  assign xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_22_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_22_i_1 (
  clk, rst, xt_rsc_0_22_i_qa_d, xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_22_i_oswt, xt_rsc_0_22_i_qa_d_mxwt, xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_22_i_wea_d_pff, xt_rsc_0_22_i_wea_d_core_psct_pff, xt_rsc_0_22_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_22_i_qa_d;
  output xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_22_i_oswt;
  output [31:0] xt_rsc_0_22_i_qa_d_mxwt;
  input xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_22_i_wea_d_pff;
  input xt_rsc_0_22_i_wea_d_core_psct_pff;
  input xt_rsc_0_22_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_22_i_biwt;
  wire xt_rsc_0_22_i_bdwt;
  wire xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_22_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_ctrl peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_22_i_oswt(xt_rsc_0_22_i_oswt),
      .xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_22_i_biwt(xt_rsc_0_22_i_biwt),
      .xt_rsc_0_22_i_bdwt(xt_rsc_0_22_i_bdwt),
      .xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_22_i_wea_d_core_sct_pff(xt_rsc_0_22_i_wea_d_core_sct_iff),
      .xt_rsc_0_22_i_wea_d_core_psct_pff(xt_rsc_0_22_i_wea_d_core_psct_pff),
      .xt_rsc_0_22_i_oswt_pff(xt_rsc_0_22_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_dp peaseNTT_core_xt_rsc_0_22_i_1_xt_rsc_0_22_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_22_i_qa_d(xt_rsc_0_22_i_qa_d),
      .xt_rsc_0_22_i_qa_d_mxwt(xt_rsc_0_22_i_qa_d_mxwt),
      .xt_rsc_0_22_i_biwt(xt_rsc_0_22_i_biwt),
      .xt_rsc_0_22_i_bdwt(xt_rsc_0_22_i_bdwt)
    );
  assign xt_rsc_0_22_i_wea_d_pff = xt_rsc_0_22_i_wea_d_core_sct_iff;
  assign xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_21_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_21_i_1 (
  clk, rst, xt_rsc_0_21_i_qa_d, xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_21_i_oswt, xt_rsc_0_21_i_qa_d_mxwt, xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_21_i_wea_d_pff, xt_rsc_0_21_i_wea_d_core_psct_pff, xt_rsc_0_21_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_21_i_qa_d;
  output xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_21_i_oswt;
  output [31:0] xt_rsc_0_21_i_qa_d_mxwt;
  input xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_21_i_wea_d_pff;
  input xt_rsc_0_21_i_wea_d_core_psct_pff;
  input xt_rsc_0_21_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_21_i_biwt;
  wire xt_rsc_0_21_i_bdwt;
  wire xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_21_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_ctrl peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_21_i_oswt(xt_rsc_0_21_i_oswt),
      .xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_21_i_biwt(xt_rsc_0_21_i_biwt),
      .xt_rsc_0_21_i_bdwt(xt_rsc_0_21_i_bdwt),
      .xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_21_i_wea_d_core_sct_pff(xt_rsc_0_21_i_wea_d_core_sct_iff),
      .xt_rsc_0_21_i_wea_d_core_psct_pff(xt_rsc_0_21_i_wea_d_core_psct_pff),
      .xt_rsc_0_21_i_oswt_pff(xt_rsc_0_21_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_dp peaseNTT_core_xt_rsc_0_21_i_1_xt_rsc_0_21_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_21_i_qa_d(xt_rsc_0_21_i_qa_d),
      .xt_rsc_0_21_i_qa_d_mxwt(xt_rsc_0_21_i_qa_d_mxwt),
      .xt_rsc_0_21_i_biwt(xt_rsc_0_21_i_biwt),
      .xt_rsc_0_21_i_bdwt(xt_rsc_0_21_i_bdwt)
    );
  assign xt_rsc_0_21_i_wea_d_pff = xt_rsc_0_21_i_wea_d_core_sct_iff;
  assign xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_20_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_20_i_1 (
  clk, rst, xt_rsc_0_20_i_qa_d, xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_20_i_oswt, xt_rsc_0_20_i_qa_d_mxwt, xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_20_i_wea_d_pff, xt_rsc_0_20_i_wea_d_core_psct_pff, xt_rsc_0_20_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_20_i_qa_d;
  output xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_20_i_oswt;
  output [31:0] xt_rsc_0_20_i_qa_d_mxwt;
  input xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_20_i_wea_d_pff;
  input xt_rsc_0_20_i_wea_d_core_psct_pff;
  input xt_rsc_0_20_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_20_i_biwt;
  wire xt_rsc_0_20_i_bdwt;
  wire xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_20_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_ctrl peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_20_i_oswt(xt_rsc_0_20_i_oswt),
      .xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_20_i_biwt(xt_rsc_0_20_i_biwt),
      .xt_rsc_0_20_i_bdwt(xt_rsc_0_20_i_bdwt),
      .xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_20_i_wea_d_core_sct_pff(xt_rsc_0_20_i_wea_d_core_sct_iff),
      .xt_rsc_0_20_i_wea_d_core_psct_pff(xt_rsc_0_20_i_wea_d_core_psct_pff),
      .xt_rsc_0_20_i_oswt_pff(xt_rsc_0_20_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_dp peaseNTT_core_xt_rsc_0_20_i_1_xt_rsc_0_20_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_20_i_qa_d(xt_rsc_0_20_i_qa_d),
      .xt_rsc_0_20_i_qa_d_mxwt(xt_rsc_0_20_i_qa_d_mxwt),
      .xt_rsc_0_20_i_biwt(xt_rsc_0_20_i_biwt),
      .xt_rsc_0_20_i_bdwt(xt_rsc_0_20_i_bdwt)
    );
  assign xt_rsc_0_20_i_wea_d_pff = xt_rsc_0_20_i_wea_d_core_sct_iff;
  assign xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_19_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_19_i_1 (
  clk, rst, xt_rsc_0_19_i_qa_d, xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_19_i_oswt, xt_rsc_0_19_i_qa_d_mxwt, xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_19_i_wea_d_pff, xt_rsc_0_19_i_wea_d_core_psct_pff, xt_rsc_0_19_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_19_i_qa_d;
  output xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_19_i_oswt;
  output [31:0] xt_rsc_0_19_i_qa_d_mxwt;
  input xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_19_i_wea_d_pff;
  input xt_rsc_0_19_i_wea_d_core_psct_pff;
  input xt_rsc_0_19_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_19_i_biwt;
  wire xt_rsc_0_19_i_bdwt;
  wire xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_19_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_ctrl peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_19_i_oswt(xt_rsc_0_19_i_oswt),
      .xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_19_i_biwt(xt_rsc_0_19_i_biwt),
      .xt_rsc_0_19_i_bdwt(xt_rsc_0_19_i_bdwt),
      .xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_19_i_wea_d_core_sct_pff(xt_rsc_0_19_i_wea_d_core_sct_iff),
      .xt_rsc_0_19_i_wea_d_core_psct_pff(xt_rsc_0_19_i_wea_d_core_psct_pff),
      .xt_rsc_0_19_i_oswt_pff(xt_rsc_0_19_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_dp peaseNTT_core_xt_rsc_0_19_i_1_xt_rsc_0_19_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_19_i_qa_d(xt_rsc_0_19_i_qa_d),
      .xt_rsc_0_19_i_qa_d_mxwt(xt_rsc_0_19_i_qa_d_mxwt),
      .xt_rsc_0_19_i_biwt(xt_rsc_0_19_i_biwt),
      .xt_rsc_0_19_i_bdwt(xt_rsc_0_19_i_bdwt)
    );
  assign xt_rsc_0_19_i_wea_d_pff = xt_rsc_0_19_i_wea_d_core_sct_iff;
  assign xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_18_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_18_i_1 (
  clk, rst, xt_rsc_0_18_i_qa_d, xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_18_i_oswt, xt_rsc_0_18_i_qa_d_mxwt, xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_18_i_wea_d_pff, xt_rsc_0_18_i_wea_d_core_psct_pff, xt_rsc_0_18_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_18_i_qa_d;
  output xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_18_i_oswt;
  output [31:0] xt_rsc_0_18_i_qa_d_mxwt;
  input xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_18_i_wea_d_pff;
  input xt_rsc_0_18_i_wea_d_core_psct_pff;
  input xt_rsc_0_18_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_18_i_biwt;
  wire xt_rsc_0_18_i_bdwt;
  wire xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_18_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_ctrl peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_18_i_oswt(xt_rsc_0_18_i_oswt),
      .xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_18_i_biwt(xt_rsc_0_18_i_biwt),
      .xt_rsc_0_18_i_bdwt(xt_rsc_0_18_i_bdwt),
      .xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_18_i_wea_d_core_sct_pff(xt_rsc_0_18_i_wea_d_core_sct_iff),
      .xt_rsc_0_18_i_wea_d_core_psct_pff(xt_rsc_0_18_i_wea_d_core_psct_pff),
      .xt_rsc_0_18_i_oswt_pff(xt_rsc_0_18_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_dp peaseNTT_core_xt_rsc_0_18_i_1_xt_rsc_0_18_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_18_i_qa_d(xt_rsc_0_18_i_qa_d),
      .xt_rsc_0_18_i_qa_d_mxwt(xt_rsc_0_18_i_qa_d_mxwt),
      .xt_rsc_0_18_i_biwt(xt_rsc_0_18_i_biwt),
      .xt_rsc_0_18_i_bdwt(xt_rsc_0_18_i_bdwt)
    );
  assign xt_rsc_0_18_i_wea_d_pff = xt_rsc_0_18_i_wea_d_core_sct_iff;
  assign xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_17_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_17_i_1 (
  clk, rst, xt_rsc_0_17_i_qa_d, xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_17_i_oswt, xt_rsc_0_17_i_qa_d_mxwt, xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_17_i_wea_d_pff, xt_rsc_0_17_i_wea_d_core_psct_pff, xt_rsc_0_17_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_17_i_qa_d;
  output xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_17_i_oswt;
  output [31:0] xt_rsc_0_17_i_qa_d_mxwt;
  input xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_17_i_wea_d_pff;
  input xt_rsc_0_17_i_wea_d_core_psct_pff;
  input xt_rsc_0_17_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_17_i_biwt;
  wire xt_rsc_0_17_i_bdwt;
  wire xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_17_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_ctrl peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_17_i_oswt(xt_rsc_0_17_i_oswt),
      .xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_17_i_biwt(xt_rsc_0_17_i_biwt),
      .xt_rsc_0_17_i_bdwt(xt_rsc_0_17_i_bdwt),
      .xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_17_i_wea_d_core_sct_pff(xt_rsc_0_17_i_wea_d_core_sct_iff),
      .xt_rsc_0_17_i_wea_d_core_psct_pff(xt_rsc_0_17_i_wea_d_core_psct_pff),
      .xt_rsc_0_17_i_oswt_pff(xt_rsc_0_17_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_dp peaseNTT_core_xt_rsc_0_17_i_1_xt_rsc_0_17_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_17_i_qa_d(xt_rsc_0_17_i_qa_d),
      .xt_rsc_0_17_i_qa_d_mxwt(xt_rsc_0_17_i_qa_d_mxwt),
      .xt_rsc_0_17_i_biwt(xt_rsc_0_17_i_biwt),
      .xt_rsc_0_17_i_bdwt(xt_rsc_0_17_i_bdwt)
    );
  assign xt_rsc_0_17_i_wea_d_pff = xt_rsc_0_17_i_wea_d_core_sct_iff;
  assign xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_16_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_16_i_1 (
  clk, rst, xt_rsc_0_16_i_qa_d, xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_16_i_oswt, xt_rsc_0_16_i_qa_d_mxwt, xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_16_i_wea_d_pff, xt_rsc_0_16_i_wea_d_core_psct_pff, xt_rsc_0_16_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_16_i_qa_d;
  output xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_16_i_oswt;
  output [31:0] xt_rsc_0_16_i_qa_d_mxwt;
  input xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_16_i_wea_d_pff;
  input xt_rsc_0_16_i_wea_d_core_psct_pff;
  input xt_rsc_0_16_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_16_i_biwt;
  wire xt_rsc_0_16_i_bdwt;
  wire xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_16_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_ctrl peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_16_i_oswt(xt_rsc_0_16_i_oswt),
      .xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_16_i_biwt(xt_rsc_0_16_i_biwt),
      .xt_rsc_0_16_i_bdwt(xt_rsc_0_16_i_bdwt),
      .xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_16_i_wea_d_core_sct_pff(xt_rsc_0_16_i_wea_d_core_sct_iff),
      .xt_rsc_0_16_i_wea_d_core_psct_pff(xt_rsc_0_16_i_wea_d_core_psct_pff),
      .xt_rsc_0_16_i_oswt_pff(xt_rsc_0_16_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_dp peaseNTT_core_xt_rsc_0_16_i_1_xt_rsc_0_16_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_16_i_qa_d(xt_rsc_0_16_i_qa_d),
      .xt_rsc_0_16_i_qa_d_mxwt(xt_rsc_0_16_i_qa_d_mxwt),
      .xt_rsc_0_16_i_biwt(xt_rsc_0_16_i_biwt),
      .xt_rsc_0_16_i_bdwt(xt_rsc_0_16_i_bdwt)
    );
  assign xt_rsc_0_16_i_wea_d_pff = xt_rsc_0_16_i_wea_d_core_sct_iff;
  assign xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_15_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_15_i_1 (
  clk, rst, xt_rsc_0_15_i_qa_d, xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_15_i_oswt, xt_rsc_0_15_i_qa_d_mxwt, xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_15_i_wea_d_pff, xt_rsc_0_15_i_wea_d_core_psct_pff, xt_rsc_0_15_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_15_i_qa_d;
  output xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_15_i_oswt;
  output [31:0] xt_rsc_0_15_i_qa_d_mxwt;
  input xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_15_i_wea_d_pff;
  input xt_rsc_0_15_i_wea_d_core_psct_pff;
  input xt_rsc_0_15_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_15_i_biwt;
  wire xt_rsc_0_15_i_bdwt;
  wire xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_15_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_ctrl peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_15_i_oswt(xt_rsc_0_15_i_oswt),
      .xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_15_i_biwt(xt_rsc_0_15_i_biwt),
      .xt_rsc_0_15_i_bdwt(xt_rsc_0_15_i_bdwt),
      .xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_15_i_wea_d_core_sct_pff(xt_rsc_0_15_i_wea_d_core_sct_iff),
      .xt_rsc_0_15_i_wea_d_core_psct_pff(xt_rsc_0_15_i_wea_d_core_psct_pff),
      .xt_rsc_0_15_i_oswt_pff(xt_rsc_0_15_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_dp peaseNTT_core_xt_rsc_0_15_i_1_xt_rsc_0_15_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_15_i_qa_d(xt_rsc_0_15_i_qa_d),
      .xt_rsc_0_15_i_qa_d_mxwt(xt_rsc_0_15_i_qa_d_mxwt),
      .xt_rsc_0_15_i_biwt(xt_rsc_0_15_i_biwt),
      .xt_rsc_0_15_i_bdwt(xt_rsc_0_15_i_bdwt)
    );
  assign xt_rsc_0_15_i_wea_d_pff = xt_rsc_0_15_i_wea_d_core_sct_iff;
  assign xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_14_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_14_i_1 (
  clk, rst, xt_rsc_0_14_i_qa_d, xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_14_i_oswt, xt_rsc_0_14_i_qa_d_mxwt, xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_14_i_wea_d_pff, xt_rsc_0_14_i_wea_d_core_psct_pff, xt_rsc_0_14_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_14_i_qa_d;
  output xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_14_i_oswt;
  output [31:0] xt_rsc_0_14_i_qa_d_mxwt;
  input xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_14_i_wea_d_pff;
  input xt_rsc_0_14_i_wea_d_core_psct_pff;
  input xt_rsc_0_14_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_14_i_biwt;
  wire xt_rsc_0_14_i_bdwt;
  wire xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_14_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_ctrl peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_14_i_oswt(xt_rsc_0_14_i_oswt),
      .xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_14_i_biwt(xt_rsc_0_14_i_biwt),
      .xt_rsc_0_14_i_bdwt(xt_rsc_0_14_i_bdwt),
      .xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_14_i_wea_d_core_sct_pff(xt_rsc_0_14_i_wea_d_core_sct_iff),
      .xt_rsc_0_14_i_wea_d_core_psct_pff(xt_rsc_0_14_i_wea_d_core_psct_pff),
      .xt_rsc_0_14_i_oswt_pff(xt_rsc_0_14_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_dp peaseNTT_core_xt_rsc_0_14_i_1_xt_rsc_0_14_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_14_i_qa_d(xt_rsc_0_14_i_qa_d),
      .xt_rsc_0_14_i_qa_d_mxwt(xt_rsc_0_14_i_qa_d_mxwt),
      .xt_rsc_0_14_i_biwt(xt_rsc_0_14_i_biwt),
      .xt_rsc_0_14_i_bdwt(xt_rsc_0_14_i_bdwt)
    );
  assign xt_rsc_0_14_i_wea_d_pff = xt_rsc_0_14_i_wea_d_core_sct_iff;
  assign xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_13_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_13_i_1 (
  clk, rst, xt_rsc_0_13_i_qa_d, xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_13_i_oswt, xt_rsc_0_13_i_qa_d_mxwt, xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_13_i_wea_d_pff, xt_rsc_0_13_i_wea_d_core_psct_pff, xt_rsc_0_13_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_13_i_qa_d;
  output xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_13_i_oswt;
  output [31:0] xt_rsc_0_13_i_qa_d_mxwt;
  input xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_13_i_wea_d_pff;
  input xt_rsc_0_13_i_wea_d_core_psct_pff;
  input xt_rsc_0_13_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_13_i_biwt;
  wire xt_rsc_0_13_i_bdwt;
  wire xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_13_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_ctrl peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_13_i_oswt(xt_rsc_0_13_i_oswt),
      .xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_13_i_biwt(xt_rsc_0_13_i_biwt),
      .xt_rsc_0_13_i_bdwt(xt_rsc_0_13_i_bdwt),
      .xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_13_i_wea_d_core_sct_pff(xt_rsc_0_13_i_wea_d_core_sct_iff),
      .xt_rsc_0_13_i_wea_d_core_psct_pff(xt_rsc_0_13_i_wea_d_core_psct_pff),
      .xt_rsc_0_13_i_oswt_pff(xt_rsc_0_13_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_dp peaseNTT_core_xt_rsc_0_13_i_1_xt_rsc_0_13_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_13_i_qa_d(xt_rsc_0_13_i_qa_d),
      .xt_rsc_0_13_i_qa_d_mxwt(xt_rsc_0_13_i_qa_d_mxwt),
      .xt_rsc_0_13_i_biwt(xt_rsc_0_13_i_biwt),
      .xt_rsc_0_13_i_bdwt(xt_rsc_0_13_i_bdwt)
    );
  assign xt_rsc_0_13_i_wea_d_pff = xt_rsc_0_13_i_wea_d_core_sct_iff;
  assign xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_12_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_12_i_1 (
  clk, rst, xt_rsc_0_12_i_qa_d, xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_12_i_oswt, xt_rsc_0_12_i_qa_d_mxwt, xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_12_i_wea_d_pff, xt_rsc_0_12_i_wea_d_core_psct_pff, xt_rsc_0_12_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_12_i_qa_d;
  output xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_12_i_oswt;
  output [31:0] xt_rsc_0_12_i_qa_d_mxwt;
  input xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_12_i_wea_d_pff;
  input xt_rsc_0_12_i_wea_d_core_psct_pff;
  input xt_rsc_0_12_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_12_i_biwt;
  wire xt_rsc_0_12_i_bdwt;
  wire xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_12_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_ctrl peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_12_i_oswt(xt_rsc_0_12_i_oswt),
      .xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_12_i_biwt(xt_rsc_0_12_i_biwt),
      .xt_rsc_0_12_i_bdwt(xt_rsc_0_12_i_bdwt),
      .xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_12_i_wea_d_core_sct_pff(xt_rsc_0_12_i_wea_d_core_sct_iff),
      .xt_rsc_0_12_i_wea_d_core_psct_pff(xt_rsc_0_12_i_wea_d_core_psct_pff),
      .xt_rsc_0_12_i_oswt_pff(xt_rsc_0_12_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_dp peaseNTT_core_xt_rsc_0_12_i_1_xt_rsc_0_12_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_12_i_qa_d(xt_rsc_0_12_i_qa_d),
      .xt_rsc_0_12_i_qa_d_mxwt(xt_rsc_0_12_i_qa_d_mxwt),
      .xt_rsc_0_12_i_biwt(xt_rsc_0_12_i_biwt),
      .xt_rsc_0_12_i_bdwt(xt_rsc_0_12_i_bdwt)
    );
  assign xt_rsc_0_12_i_wea_d_pff = xt_rsc_0_12_i_wea_d_core_sct_iff;
  assign xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_11_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_11_i_1 (
  clk, rst, xt_rsc_0_11_i_qa_d, xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_11_i_oswt, xt_rsc_0_11_i_qa_d_mxwt, xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_11_i_wea_d_pff, xt_rsc_0_11_i_wea_d_core_psct_pff, xt_rsc_0_11_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_11_i_qa_d;
  output xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_11_i_oswt;
  output [31:0] xt_rsc_0_11_i_qa_d_mxwt;
  input xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_11_i_wea_d_pff;
  input xt_rsc_0_11_i_wea_d_core_psct_pff;
  input xt_rsc_0_11_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_11_i_biwt;
  wire xt_rsc_0_11_i_bdwt;
  wire xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_11_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_ctrl peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_11_i_oswt(xt_rsc_0_11_i_oswt),
      .xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_11_i_biwt(xt_rsc_0_11_i_biwt),
      .xt_rsc_0_11_i_bdwt(xt_rsc_0_11_i_bdwt),
      .xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_11_i_wea_d_core_sct_pff(xt_rsc_0_11_i_wea_d_core_sct_iff),
      .xt_rsc_0_11_i_wea_d_core_psct_pff(xt_rsc_0_11_i_wea_d_core_psct_pff),
      .xt_rsc_0_11_i_oswt_pff(xt_rsc_0_11_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_dp peaseNTT_core_xt_rsc_0_11_i_1_xt_rsc_0_11_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_11_i_qa_d(xt_rsc_0_11_i_qa_d),
      .xt_rsc_0_11_i_qa_d_mxwt(xt_rsc_0_11_i_qa_d_mxwt),
      .xt_rsc_0_11_i_biwt(xt_rsc_0_11_i_biwt),
      .xt_rsc_0_11_i_bdwt(xt_rsc_0_11_i_bdwt)
    );
  assign xt_rsc_0_11_i_wea_d_pff = xt_rsc_0_11_i_wea_d_core_sct_iff;
  assign xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_10_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_10_i_1 (
  clk, rst, xt_rsc_0_10_i_qa_d, xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_10_i_oswt, xt_rsc_0_10_i_qa_d_mxwt, xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_10_i_wea_d_pff, xt_rsc_0_10_i_wea_d_core_psct_pff, xt_rsc_0_10_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_10_i_qa_d;
  output xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_10_i_oswt;
  output [31:0] xt_rsc_0_10_i_qa_d_mxwt;
  input xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_10_i_wea_d_pff;
  input xt_rsc_0_10_i_wea_d_core_psct_pff;
  input xt_rsc_0_10_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_10_i_biwt;
  wire xt_rsc_0_10_i_bdwt;
  wire xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_10_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_ctrl peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_10_i_oswt(xt_rsc_0_10_i_oswt),
      .xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_10_i_biwt(xt_rsc_0_10_i_biwt),
      .xt_rsc_0_10_i_bdwt(xt_rsc_0_10_i_bdwt),
      .xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_10_i_wea_d_core_sct_pff(xt_rsc_0_10_i_wea_d_core_sct_iff),
      .xt_rsc_0_10_i_wea_d_core_psct_pff(xt_rsc_0_10_i_wea_d_core_psct_pff),
      .xt_rsc_0_10_i_oswt_pff(xt_rsc_0_10_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_dp peaseNTT_core_xt_rsc_0_10_i_1_xt_rsc_0_10_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_10_i_qa_d(xt_rsc_0_10_i_qa_d),
      .xt_rsc_0_10_i_qa_d_mxwt(xt_rsc_0_10_i_qa_d_mxwt),
      .xt_rsc_0_10_i_biwt(xt_rsc_0_10_i_biwt),
      .xt_rsc_0_10_i_bdwt(xt_rsc_0_10_i_bdwt)
    );
  assign xt_rsc_0_10_i_wea_d_pff = xt_rsc_0_10_i_wea_d_core_sct_iff;
  assign xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_9_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_9_i_1 (
  clk, rst, xt_rsc_0_9_i_qa_d, xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_9_i_oswt, xt_rsc_0_9_i_qa_d_mxwt, xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_9_i_wea_d_pff, xt_rsc_0_9_i_wea_d_core_psct_pff, xt_rsc_0_9_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_9_i_qa_d;
  output xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_9_i_oswt;
  output [31:0] xt_rsc_0_9_i_qa_d_mxwt;
  input xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_9_i_wea_d_pff;
  input xt_rsc_0_9_i_wea_d_core_psct_pff;
  input xt_rsc_0_9_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_9_i_biwt;
  wire xt_rsc_0_9_i_bdwt;
  wire xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_9_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_ctrl peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_9_i_oswt(xt_rsc_0_9_i_oswt),
      .xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_9_i_biwt(xt_rsc_0_9_i_biwt),
      .xt_rsc_0_9_i_bdwt(xt_rsc_0_9_i_bdwt),
      .xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_9_i_wea_d_core_sct_pff(xt_rsc_0_9_i_wea_d_core_sct_iff),
      .xt_rsc_0_9_i_wea_d_core_psct_pff(xt_rsc_0_9_i_wea_d_core_psct_pff),
      .xt_rsc_0_9_i_oswt_pff(xt_rsc_0_9_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_dp peaseNTT_core_xt_rsc_0_9_i_1_xt_rsc_0_9_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_9_i_qa_d(xt_rsc_0_9_i_qa_d),
      .xt_rsc_0_9_i_qa_d_mxwt(xt_rsc_0_9_i_qa_d_mxwt),
      .xt_rsc_0_9_i_biwt(xt_rsc_0_9_i_biwt),
      .xt_rsc_0_9_i_bdwt(xt_rsc_0_9_i_bdwt)
    );
  assign xt_rsc_0_9_i_wea_d_pff = xt_rsc_0_9_i_wea_d_core_sct_iff;
  assign xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_8_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_8_i_1 (
  clk, rst, xt_rsc_0_8_i_qa_d, xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_8_i_oswt, xt_rsc_0_8_i_qa_d_mxwt, xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_8_i_wea_d_pff, xt_rsc_0_8_i_wea_d_core_psct_pff, xt_rsc_0_8_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_8_i_qa_d;
  output xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_8_i_oswt;
  output [31:0] xt_rsc_0_8_i_qa_d_mxwt;
  input xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_8_i_wea_d_pff;
  input xt_rsc_0_8_i_wea_d_core_psct_pff;
  input xt_rsc_0_8_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_8_i_biwt;
  wire xt_rsc_0_8_i_bdwt;
  wire xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_8_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_ctrl peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_8_i_oswt(xt_rsc_0_8_i_oswt),
      .xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_8_i_biwt(xt_rsc_0_8_i_biwt),
      .xt_rsc_0_8_i_bdwt(xt_rsc_0_8_i_bdwt),
      .xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_8_i_wea_d_core_sct_pff(xt_rsc_0_8_i_wea_d_core_sct_iff),
      .xt_rsc_0_8_i_wea_d_core_psct_pff(xt_rsc_0_8_i_wea_d_core_psct_pff),
      .xt_rsc_0_8_i_oswt_pff(xt_rsc_0_8_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_dp peaseNTT_core_xt_rsc_0_8_i_1_xt_rsc_0_8_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_8_i_qa_d(xt_rsc_0_8_i_qa_d),
      .xt_rsc_0_8_i_qa_d_mxwt(xt_rsc_0_8_i_qa_d_mxwt),
      .xt_rsc_0_8_i_biwt(xt_rsc_0_8_i_biwt),
      .xt_rsc_0_8_i_bdwt(xt_rsc_0_8_i_bdwt)
    );
  assign xt_rsc_0_8_i_wea_d_pff = xt_rsc_0_8_i_wea_d_core_sct_iff;
  assign xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_7_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_7_i_1 (
  clk, rst, xt_rsc_0_7_i_qa_d, xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_7_i_oswt, xt_rsc_0_7_i_qa_d_mxwt, xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_7_i_wea_d_pff, xt_rsc_0_7_i_wea_d_core_psct_pff, xt_rsc_0_7_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_7_i_qa_d;
  output xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_7_i_oswt;
  output [31:0] xt_rsc_0_7_i_qa_d_mxwt;
  input xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_7_i_wea_d_pff;
  input xt_rsc_0_7_i_wea_d_core_psct_pff;
  input xt_rsc_0_7_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_7_i_biwt;
  wire xt_rsc_0_7_i_bdwt;
  wire xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_7_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_ctrl peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_7_i_oswt(xt_rsc_0_7_i_oswt),
      .xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_7_i_biwt(xt_rsc_0_7_i_biwt),
      .xt_rsc_0_7_i_bdwt(xt_rsc_0_7_i_bdwt),
      .xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_7_i_wea_d_core_sct_pff(xt_rsc_0_7_i_wea_d_core_sct_iff),
      .xt_rsc_0_7_i_wea_d_core_psct_pff(xt_rsc_0_7_i_wea_d_core_psct_pff),
      .xt_rsc_0_7_i_oswt_pff(xt_rsc_0_7_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_dp peaseNTT_core_xt_rsc_0_7_i_1_xt_rsc_0_7_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_7_i_qa_d(xt_rsc_0_7_i_qa_d),
      .xt_rsc_0_7_i_qa_d_mxwt(xt_rsc_0_7_i_qa_d_mxwt),
      .xt_rsc_0_7_i_biwt(xt_rsc_0_7_i_biwt),
      .xt_rsc_0_7_i_bdwt(xt_rsc_0_7_i_bdwt)
    );
  assign xt_rsc_0_7_i_wea_d_pff = xt_rsc_0_7_i_wea_d_core_sct_iff;
  assign xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_6_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_6_i_1 (
  clk, rst, xt_rsc_0_6_i_qa_d, xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_6_i_oswt, xt_rsc_0_6_i_qa_d_mxwt, xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_6_i_wea_d_pff, xt_rsc_0_6_i_wea_d_core_psct_pff, xt_rsc_0_6_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_6_i_qa_d;
  output xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_6_i_oswt;
  output [31:0] xt_rsc_0_6_i_qa_d_mxwt;
  input xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_6_i_wea_d_pff;
  input xt_rsc_0_6_i_wea_d_core_psct_pff;
  input xt_rsc_0_6_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_6_i_biwt;
  wire xt_rsc_0_6_i_bdwt;
  wire xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_6_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_ctrl peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_6_i_oswt(xt_rsc_0_6_i_oswt),
      .xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_6_i_biwt(xt_rsc_0_6_i_biwt),
      .xt_rsc_0_6_i_bdwt(xt_rsc_0_6_i_bdwt),
      .xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_6_i_wea_d_core_sct_pff(xt_rsc_0_6_i_wea_d_core_sct_iff),
      .xt_rsc_0_6_i_wea_d_core_psct_pff(xt_rsc_0_6_i_wea_d_core_psct_pff),
      .xt_rsc_0_6_i_oswt_pff(xt_rsc_0_6_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_dp peaseNTT_core_xt_rsc_0_6_i_1_xt_rsc_0_6_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_6_i_qa_d(xt_rsc_0_6_i_qa_d),
      .xt_rsc_0_6_i_qa_d_mxwt(xt_rsc_0_6_i_qa_d_mxwt),
      .xt_rsc_0_6_i_biwt(xt_rsc_0_6_i_biwt),
      .xt_rsc_0_6_i_bdwt(xt_rsc_0_6_i_bdwt)
    );
  assign xt_rsc_0_6_i_wea_d_pff = xt_rsc_0_6_i_wea_d_core_sct_iff;
  assign xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_5_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_5_i_1 (
  clk, rst, xt_rsc_0_5_i_qa_d, xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_5_i_oswt, xt_rsc_0_5_i_qa_d_mxwt, xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_5_i_wea_d_pff, xt_rsc_0_5_i_wea_d_core_psct_pff, xt_rsc_0_5_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_5_i_qa_d;
  output xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_5_i_oswt;
  output [31:0] xt_rsc_0_5_i_qa_d_mxwt;
  input xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_5_i_wea_d_pff;
  input xt_rsc_0_5_i_wea_d_core_psct_pff;
  input xt_rsc_0_5_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_5_i_biwt;
  wire xt_rsc_0_5_i_bdwt;
  wire xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_5_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_ctrl peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_5_i_oswt(xt_rsc_0_5_i_oswt),
      .xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_5_i_biwt(xt_rsc_0_5_i_biwt),
      .xt_rsc_0_5_i_bdwt(xt_rsc_0_5_i_bdwt),
      .xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_5_i_wea_d_core_sct_pff(xt_rsc_0_5_i_wea_d_core_sct_iff),
      .xt_rsc_0_5_i_wea_d_core_psct_pff(xt_rsc_0_5_i_wea_d_core_psct_pff),
      .xt_rsc_0_5_i_oswt_pff(xt_rsc_0_5_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_dp peaseNTT_core_xt_rsc_0_5_i_1_xt_rsc_0_5_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_5_i_qa_d(xt_rsc_0_5_i_qa_d),
      .xt_rsc_0_5_i_qa_d_mxwt(xt_rsc_0_5_i_qa_d_mxwt),
      .xt_rsc_0_5_i_biwt(xt_rsc_0_5_i_biwt),
      .xt_rsc_0_5_i_bdwt(xt_rsc_0_5_i_bdwt)
    );
  assign xt_rsc_0_5_i_wea_d_pff = xt_rsc_0_5_i_wea_d_core_sct_iff;
  assign xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_4_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_4_i_1 (
  clk, rst, xt_rsc_0_4_i_qa_d, xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_4_i_oswt, xt_rsc_0_4_i_qa_d_mxwt, xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_4_i_wea_d_pff, xt_rsc_0_4_i_wea_d_core_psct_pff, xt_rsc_0_4_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_4_i_qa_d;
  output xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_4_i_oswt;
  output [31:0] xt_rsc_0_4_i_qa_d_mxwt;
  input xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_4_i_wea_d_pff;
  input xt_rsc_0_4_i_wea_d_core_psct_pff;
  input xt_rsc_0_4_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_4_i_biwt;
  wire xt_rsc_0_4_i_bdwt;
  wire xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_4_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_ctrl peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_4_i_oswt(xt_rsc_0_4_i_oswt),
      .xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_4_i_biwt(xt_rsc_0_4_i_biwt),
      .xt_rsc_0_4_i_bdwt(xt_rsc_0_4_i_bdwt),
      .xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_4_i_wea_d_core_sct_pff(xt_rsc_0_4_i_wea_d_core_sct_iff),
      .xt_rsc_0_4_i_wea_d_core_psct_pff(xt_rsc_0_4_i_wea_d_core_psct_pff),
      .xt_rsc_0_4_i_oswt_pff(xt_rsc_0_4_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_dp peaseNTT_core_xt_rsc_0_4_i_1_xt_rsc_0_4_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_4_i_qa_d(xt_rsc_0_4_i_qa_d),
      .xt_rsc_0_4_i_qa_d_mxwt(xt_rsc_0_4_i_qa_d_mxwt),
      .xt_rsc_0_4_i_biwt(xt_rsc_0_4_i_biwt),
      .xt_rsc_0_4_i_bdwt(xt_rsc_0_4_i_bdwt)
    );
  assign xt_rsc_0_4_i_wea_d_pff = xt_rsc_0_4_i_wea_d_core_sct_iff;
  assign xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_3_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_3_i_1 (
  clk, rst, xt_rsc_0_3_i_qa_d, xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_3_i_oswt, xt_rsc_0_3_i_qa_d_mxwt, xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_3_i_wea_d_pff, xt_rsc_0_3_i_wea_d_core_psct_pff, xt_rsc_0_3_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_3_i_qa_d;
  output xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_3_i_oswt;
  output [31:0] xt_rsc_0_3_i_qa_d_mxwt;
  input xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_3_i_wea_d_pff;
  input xt_rsc_0_3_i_wea_d_core_psct_pff;
  input xt_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_3_i_biwt;
  wire xt_rsc_0_3_i_bdwt;
  wire xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_3_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_ctrl peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_3_i_oswt(xt_rsc_0_3_i_oswt),
      .xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_3_i_biwt(xt_rsc_0_3_i_biwt),
      .xt_rsc_0_3_i_bdwt(xt_rsc_0_3_i_bdwt),
      .xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_3_i_wea_d_core_sct_pff(xt_rsc_0_3_i_wea_d_core_sct_iff),
      .xt_rsc_0_3_i_wea_d_core_psct_pff(xt_rsc_0_3_i_wea_d_core_psct_pff),
      .xt_rsc_0_3_i_oswt_pff(xt_rsc_0_3_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_dp peaseNTT_core_xt_rsc_0_3_i_1_xt_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_3_i_qa_d(xt_rsc_0_3_i_qa_d),
      .xt_rsc_0_3_i_qa_d_mxwt(xt_rsc_0_3_i_qa_d_mxwt),
      .xt_rsc_0_3_i_biwt(xt_rsc_0_3_i_biwt),
      .xt_rsc_0_3_i_bdwt(xt_rsc_0_3_i_bdwt)
    );
  assign xt_rsc_0_3_i_wea_d_pff = xt_rsc_0_3_i_wea_d_core_sct_iff;
  assign xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_2_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_2_i_1 (
  clk, rst, xt_rsc_0_2_i_qa_d, xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_2_i_oswt, xt_rsc_0_2_i_qa_d_mxwt, xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_2_i_wea_d_pff, xt_rsc_0_2_i_wea_d_core_psct_pff, xt_rsc_0_2_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_2_i_qa_d;
  output xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_2_i_oswt;
  output [31:0] xt_rsc_0_2_i_qa_d_mxwt;
  input xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_2_i_wea_d_pff;
  input xt_rsc_0_2_i_wea_d_core_psct_pff;
  input xt_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_2_i_biwt;
  wire xt_rsc_0_2_i_bdwt;
  wire xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_2_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_ctrl peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_2_i_oswt(xt_rsc_0_2_i_oswt),
      .xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_2_i_biwt(xt_rsc_0_2_i_biwt),
      .xt_rsc_0_2_i_bdwt(xt_rsc_0_2_i_bdwt),
      .xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_2_i_wea_d_core_sct_pff(xt_rsc_0_2_i_wea_d_core_sct_iff),
      .xt_rsc_0_2_i_wea_d_core_psct_pff(xt_rsc_0_2_i_wea_d_core_psct_pff),
      .xt_rsc_0_2_i_oswt_pff(xt_rsc_0_2_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_dp peaseNTT_core_xt_rsc_0_2_i_1_xt_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_2_i_qa_d(xt_rsc_0_2_i_qa_d),
      .xt_rsc_0_2_i_qa_d_mxwt(xt_rsc_0_2_i_qa_d_mxwt),
      .xt_rsc_0_2_i_biwt(xt_rsc_0_2_i_biwt),
      .xt_rsc_0_2_i_bdwt(xt_rsc_0_2_i_bdwt)
    );
  assign xt_rsc_0_2_i_wea_d_pff = xt_rsc_0_2_i_wea_d_core_sct_iff;
  assign xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_1_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_1_i_1 (
  clk, rst, xt_rsc_0_1_i_qa_d, xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      core_wten, xt_rsc_0_1_i_oswt, xt_rsc_0_1_i_qa_d_mxwt, xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_1_i_wea_d_pff, xt_rsc_0_1_i_wea_d_core_psct_pff, xt_rsc_0_1_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_1_i_qa_d;
  output xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input core_wten;
  input xt_rsc_0_1_i_oswt;
  output [31:0] xt_rsc_0_1_i_qa_d_mxwt;
  input xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_1_i_wea_d_pff;
  input xt_rsc_0_1_i_wea_d_core_psct_pff;
  input xt_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_1_i_biwt;
  wire xt_rsc_0_1_i_bdwt;
  wire xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_1_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_ctrl peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_1_i_oswt(xt_rsc_0_1_i_oswt),
      .xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_1_i_biwt(xt_rsc_0_1_i_biwt),
      .xt_rsc_0_1_i_bdwt(xt_rsc_0_1_i_bdwt),
      .xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_1_i_wea_d_core_sct_pff(xt_rsc_0_1_i_wea_d_core_sct_iff),
      .xt_rsc_0_1_i_wea_d_core_psct_pff(xt_rsc_0_1_i_wea_d_core_psct_pff),
      .xt_rsc_0_1_i_oswt_pff(xt_rsc_0_1_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_dp peaseNTT_core_xt_rsc_0_1_i_1_xt_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_1_i_qa_d(xt_rsc_0_1_i_qa_d),
      .xt_rsc_0_1_i_qa_d_mxwt(xt_rsc_0_1_i_qa_d_mxwt),
      .xt_rsc_0_1_i_biwt(xt_rsc_0_1_i_biwt),
      .xt_rsc_0_1_i_bdwt(xt_rsc_0_1_i_bdwt)
    );
  assign xt_rsc_0_1_i_wea_d_pff = xt_rsc_0_1_i_wea_d_core_sct_iff;
  assign xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core_xt_rsc_0_0_i_1
// ------------------------------------------------------------------


module peaseNTT_core_xt_rsc_0_0_i_1 (
  clk, rst, xt_rsc_0_0_i_qa_d, xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d, core_wen,
      xt_rsc_0_0_i_oswt, core_wten, xt_rsc_0_0_i_qa_d_mxwt, xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct,
      xt_rsc_0_0_i_wea_d_pff, xt_rsc_0_0_i_wea_d_core_psct_pff, xt_rsc_0_0_i_oswt_pff
);
  input clk;
  input rst;
  input [31:0] xt_rsc_0_0_i_qa_d;
  output xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input core_wen;
  input xt_rsc_0_0_i_oswt;
  input core_wten;
  output [31:0] xt_rsc_0_0_i_qa_d_mxwt;
  input xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct;
  output xt_rsc_0_0_i_wea_d_pff;
  input xt_rsc_0_0_i_wea_d_core_psct_pff;
  input xt_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire xt_rsc_0_0_i_biwt;
  wire xt_rsc_0_0_i_bdwt;
  wire xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire xt_rsc_0_0_i_wea_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_ctrl peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .xt_rsc_0_0_i_oswt(xt_rsc_0_0_i_oswt),
      .core_wten(core_wten),
      .xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .xt_rsc_0_0_i_biwt(xt_rsc_0_0_i_biwt),
      .xt_rsc_0_0_i_bdwt(xt_rsc_0_0_i_bdwt),
      .xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct(xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .xt_rsc_0_0_i_wea_d_core_sct_pff(xt_rsc_0_0_i_wea_d_core_sct_iff),
      .xt_rsc_0_0_i_wea_d_core_psct_pff(xt_rsc_0_0_i_wea_d_core_psct_pff),
      .xt_rsc_0_0_i_oswt_pff(xt_rsc_0_0_i_oswt_pff)
    );
  peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_dp peaseNTT_core_xt_rsc_0_0_i_1_xt_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_0_i_qa_d(xt_rsc_0_0_i_qa_d),
      .xt_rsc_0_0_i_qa_d_mxwt(xt_rsc_0_0_i_qa_d_mxwt),
      .xt_rsc_0_0_i_biwt(xt_rsc_0_0_i_biwt),
      .xt_rsc_0_0_i_bdwt(xt_rsc_0_0_i_bdwt)
    );
  assign xt_rsc_0_0_i_wea_d_pff = xt_rsc_0_0_i_wea_d_core_sct_iff;
  assign xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_sct;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT_core
// ------------------------------------------------------------------


module peaseNTT_core (
  clk, rst, xt_rsc_triosy_0_0_lz, xt_rsc_triosy_0_1_lz, xt_rsc_triosy_0_2_lz, xt_rsc_triosy_0_3_lz,
      xt_rsc_triosy_0_4_lz, xt_rsc_triosy_0_5_lz, xt_rsc_triosy_0_6_lz, xt_rsc_triosy_0_7_lz,
      xt_rsc_triosy_0_8_lz, xt_rsc_triosy_0_9_lz, xt_rsc_triosy_0_10_lz, xt_rsc_triosy_0_11_lz,
      xt_rsc_triosy_0_12_lz, xt_rsc_triosy_0_13_lz, xt_rsc_triosy_0_14_lz, xt_rsc_triosy_0_15_lz,
      xt_rsc_triosy_0_16_lz, xt_rsc_triosy_0_17_lz, xt_rsc_triosy_0_18_lz, xt_rsc_triosy_0_19_lz,
      xt_rsc_triosy_0_20_lz, xt_rsc_triosy_0_21_lz, xt_rsc_triosy_0_22_lz, xt_rsc_triosy_0_23_lz,
      xt_rsc_triosy_0_24_lz, xt_rsc_triosy_0_25_lz, xt_rsc_triosy_0_26_lz, xt_rsc_triosy_0_27_lz,
      xt_rsc_triosy_0_28_lz, xt_rsc_triosy_0_29_lz, xt_rsc_triosy_0_30_lz, xt_rsc_triosy_0_31_lz,
      xt_rsc_triosy_1_0_lz, xt_rsc_triosy_1_1_lz, xt_rsc_triosy_1_2_lz, xt_rsc_triosy_1_3_lz,
      xt_rsc_triosy_1_4_lz, xt_rsc_triosy_1_5_lz, xt_rsc_triosy_1_6_lz, xt_rsc_triosy_1_7_lz,
      xt_rsc_triosy_1_8_lz, xt_rsc_triosy_1_9_lz, xt_rsc_triosy_1_10_lz, xt_rsc_triosy_1_11_lz,
      xt_rsc_triosy_1_12_lz, xt_rsc_triosy_1_13_lz, xt_rsc_triosy_1_14_lz, xt_rsc_triosy_1_15_lz,
      xt_rsc_triosy_1_16_lz, xt_rsc_triosy_1_17_lz, xt_rsc_triosy_1_18_lz, xt_rsc_triosy_1_19_lz,
      xt_rsc_triosy_1_20_lz, xt_rsc_triosy_1_21_lz, xt_rsc_triosy_1_22_lz, xt_rsc_triosy_1_23_lz,
      xt_rsc_triosy_1_24_lz, xt_rsc_triosy_1_25_lz, xt_rsc_triosy_1_26_lz, xt_rsc_triosy_1_27_lz,
      xt_rsc_triosy_1_28_lz, xt_rsc_triosy_1_29_lz, xt_rsc_triosy_1_30_lz, xt_rsc_triosy_1_31_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_triosy_lz, twiddle_rsc_0_0_s_tdone, twiddle_rsc_0_0_tr_write_done,
      twiddle_rsc_0_0_RREADY, twiddle_rsc_0_0_RVALID, twiddle_rsc_0_0_RUSER, twiddle_rsc_0_0_RLAST,
      twiddle_rsc_0_0_RRESP, twiddle_rsc_0_0_RDATA, twiddle_rsc_0_0_RID, twiddle_rsc_0_0_ARREADY,
      twiddle_rsc_0_0_ARVALID, twiddle_rsc_0_0_ARUSER, twiddle_rsc_0_0_ARREGION,
      twiddle_rsc_0_0_ARQOS, twiddle_rsc_0_0_ARPROT, twiddle_rsc_0_0_ARCACHE, twiddle_rsc_0_0_ARLOCK,
      twiddle_rsc_0_0_ARBURST, twiddle_rsc_0_0_ARSIZE, twiddle_rsc_0_0_ARLEN, twiddle_rsc_0_0_ARADDR,
      twiddle_rsc_0_0_ARID, twiddle_rsc_0_0_BREADY, twiddle_rsc_0_0_BVALID, twiddle_rsc_0_0_BUSER,
      twiddle_rsc_0_0_BRESP, twiddle_rsc_0_0_BID, twiddle_rsc_0_0_WREADY, twiddle_rsc_0_0_WVALID,
      twiddle_rsc_0_0_WUSER, twiddle_rsc_0_0_WLAST, twiddle_rsc_0_0_WSTRB, twiddle_rsc_0_0_WDATA,
      twiddle_rsc_0_0_AWREADY, twiddle_rsc_0_0_AWVALID, twiddle_rsc_0_0_AWUSER, twiddle_rsc_0_0_AWREGION,
      twiddle_rsc_0_0_AWQOS, twiddle_rsc_0_0_AWPROT, twiddle_rsc_0_0_AWCACHE, twiddle_rsc_0_0_AWLOCK,
      twiddle_rsc_0_0_AWBURST, twiddle_rsc_0_0_AWSIZE, twiddle_rsc_0_0_AWLEN, twiddle_rsc_0_0_AWADDR,
      twiddle_rsc_0_0_AWID, twiddle_rsc_triosy_0_0_lz, twiddle_rsc_0_1_s_tdone, twiddle_rsc_0_1_tr_write_done,
      twiddle_rsc_0_1_RREADY, twiddle_rsc_0_1_RVALID, twiddle_rsc_0_1_RUSER, twiddle_rsc_0_1_RLAST,
      twiddle_rsc_0_1_RRESP, twiddle_rsc_0_1_RDATA, twiddle_rsc_0_1_RID, twiddle_rsc_0_1_ARREADY,
      twiddle_rsc_0_1_ARVALID, twiddle_rsc_0_1_ARUSER, twiddle_rsc_0_1_ARREGION,
      twiddle_rsc_0_1_ARQOS, twiddle_rsc_0_1_ARPROT, twiddle_rsc_0_1_ARCACHE, twiddle_rsc_0_1_ARLOCK,
      twiddle_rsc_0_1_ARBURST, twiddle_rsc_0_1_ARSIZE, twiddle_rsc_0_1_ARLEN, twiddle_rsc_0_1_ARADDR,
      twiddle_rsc_0_1_ARID, twiddle_rsc_0_1_BREADY, twiddle_rsc_0_1_BVALID, twiddle_rsc_0_1_BUSER,
      twiddle_rsc_0_1_BRESP, twiddle_rsc_0_1_BID, twiddle_rsc_0_1_WREADY, twiddle_rsc_0_1_WVALID,
      twiddle_rsc_0_1_WUSER, twiddle_rsc_0_1_WLAST, twiddle_rsc_0_1_WSTRB, twiddle_rsc_0_1_WDATA,
      twiddle_rsc_0_1_AWREADY, twiddle_rsc_0_1_AWVALID, twiddle_rsc_0_1_AWUSER, twiddle_rsc_0_1_AWREGION,
      twiddle_rsc_0_1_AWQOS, twiddle_rsc_0_1_AWPROT, twiddle_rsc_0_1_AWCACHE, twiddle_rsc_0_1_AWLOCK,
      twiddle_rsc_0_1_AWBURST, twiddle_rsc_0_1_AWSIZE, twiddle_rsc_0_1_AWLEN, twiddle_rsc_0_1_AWADDR,
      twiddle_rsc_0_1_AWID, twiddle_rsc_triosy_0_1_lz, twiddle_rsc_0_2_s_tdone, twiddle_rsc_0_2_tr_write_done,
      twiddle_rsc_0_2_RREADY, twiddle_rsc_0_2_RVALID, twiddle_rsc_0_2_RUSER, twiddle_rsc_0_2_RLAST,
      twiddle_rsc_0_2_RRESP, twiddle_rsc_0_2_RDATA, twiddle_rsc_0_2_RID, twiddle_rsc_0_2_ARREADY,
      twiddle_rsc_0_2_ARVALID, twiddle_rsc_0_2_ARUSER, twiddle_rsc_0_2_ARREGION,
      twiddle_rsc_0_2_ARQOS, twiddle_rsc_0_2_ARPROT, twiddle_rsc_0_2_ARCACHE, twiddle_rsc_0_2_ARLOCK,
      twiddle_rsc_0_2_ARBURST, twiddle_rsc_0_2_ARSIZE, twiddle_rsc_0_2_ARLEN, twiddle_rsc_0_2_ARADDR,
      twiddle_rsc_0_2_ARID, twiddle_rsc_0_2_BREADY, twiddle_rsc_0_2_BVALID, twiddle_rsc_0_2_BUSER,
      twiddle_rsc_0_2_BRESP, twiddle_rsc_0_2_BID, twiddle_rsc_0_2_WREADY, twiddle_rsc_0_2_WVALID,
      twiddle_rsc_0_2_WUSER, twiddle_rsc_0_2_WLAST, twiddle_rsc_0_2_WSTRB, twiddle_rsc_0_2_WDATA,
      twiddle_rsc_0_2_AWREADY, twiddle_rsc_0_2_AWVALID, twiddle_rsc_0_2_AWUSER, twiddle_rsc_0_2_AWREGION,
      twiddle_rsc_0_2_AWQOS, twiddle_rsc_0_2_AWPROT, twiddle_rsc_0_2_AWCACHE, twiddle_rsc_0_2_AWLOCK,
      twiddle_rsc_0_2_AWBURST, twiddle_rsc_0_2_AWSIZE, twiddle_rsc_0_2_AWLEN, twiddle_rsc_0_2_AWADDR,
      twiddle_rsc_0_2_AWID, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_0_3_s_tdone, twiddle_rsc_0_3_tr_write_done,
      twiddle_rsc_0_3_RREADY, twiddle_rsc_0_3_RVALID, twiddle_rsc_0_3_RUSER, twiddle_rsc_0_3_RLAST,
      twiddle_rsc_0_3_RRESP, twiddle_rsc_0_3_RDATA, twiddle_rsc_0_3_RID, twiddle_rsc_0_3_ARREADY,
      twiddle_rsc_0_3_ARVALID, twiddle_rsc_0_3_ARUSER, twiddle_rsc_0_3_ARREGION,
      twiddle_rsc_0_3_ARQOS, twiddle_rsc_0_3_ARPROT, twiddle_rsc_0_3_ARCACHE, twiddle_rsc_0_3_ARLOCK,
      twiddle_rsc_0_3_ARBURST, twiddle_rsc_0_3_ARSIZE, twiddle_rsc_0_3_ARLEN, twiddle_rsc_0_3_ARADDR,
      twiddle_rsc_0_3_ARID, twiddle_rsc_0_3_BREADY, twiddle_rsc_0_3_BVALID, twiddle_rsc_0_3_BUSER,
      twiddle_rsc_0_3_BRESP, twiddle_rsc_0_3_BID, twiddle_rsc_0_3_WREADY, twiddle_rsc_0_3_WVALID,
      twiddle_rsc_0_3_WUSER, twiddle_rsc_0_3_WLAST, twiddle_rsc_0_3_WSTRB, twiddle_rsc_0_3_WDATA,
      twiddle_rsc_0_3_AWREADY, twiddle_rsc_0_3_AWVALID, twiddle_rsc_0_3_AWUSER, twiddle_rsc_0_3_AWREGION,
      twiddle_rsc_0_3_AWQOS, twiddle_rsc_0_3_AWPROT, twiddle_rsc_0_3_AWCACHE, twiddle_rsc_0_3_AWLOCK,
      twiddle_rsc_0_3_AWBURST, twiddle_rsc_0_3_AWSIZE, twiddle_rsc_0_3_AWLEN, twiddle_rsc_0_3_AWADDR,
      twiddle_rsc_0_3_AWID, twiddle_rsc_triosy_0_3_lz, twiddle_rsc_0_4_s_tdone, twiddle_rsc_0_4_tr_write_done,
      twiddle_rsc_0_4_RREADY, twiddle_rsc_0_4_RVALID, twiddle_rsc_0_4_RUSER, twiddle_rsc_0_4_RLAST,
      twiddle_rsc_0_4_RRESP, twiddle_rsc_0_4_RDATA, twiddle_rsc_0_4_RID, twiddle_rsc_0_4_ARREADY,
      twiddle_rsc_0_4_ARVALID, twiddle_rsc_0_4_ARUSER, twiddle_rsc_0_4_ARREGION,
      twiddle_rsc_0_4_ARQOS, twiddle_rsc_0_4_ARPROT, twiddle_rsc_0_4_ARCACHE, twiddle_rsc_0_4_ARLOCK,
      twiddle_rsc_0_4_ARBURST, twiddle_rsc_0_4_ARSIZE, twiddle_rsc_0_4_ARLEN, twiddle_rsc_0_4_ARADDR,
      twiddle_rsc_0_4_ARID, twiddle_rsc_0_4_BREADY, twiddle_rsc_0_4_BVALID, twiddle_rsc_0_4_BUSER,
      twiddle_rsc_0_4_BRESP, twiddle_rsc_0_4_BID, twiddle_rsc_0_4_WREADY, twiddle_rsc_0_4_WVALID,
      twiddle_rsc_0_4_WUSER, twiddle_rsc_0_4_WLAST, twiddle_rsc_0_4_WSTRB, twiddle_rsc_0_4_WDATA,
      twiddle_rsc_0_4_AWREADY, twiddle_rsc_0_4_AWVALID, twiddle_rsc_0_4_AWUSER, twiddle_rsc_0_4_AWREGION,
      twiddle_rsc_0_4_AWQOS, twiddle_rsc_0_4_AWPROT, twiddle_rsc_0_4_AWCACHE, twiddle_rsc_0_4_AWLOCK,
      twiddle_rsc_0_4_AWBURST, twiddle_rsc_0_4_AWSIZE, twiddle_rsc_0_4_AWLEN, twiddle_rsc_0_4_AWADDR,
      twiddle_rsc_0_4_AWID, twiddle_rsc_triosy_0_4_lz, twiddle_rsc_0_5_s_tdone, twiddle_rsc_0_5_tr_write_done,
      twiddle_rsc_0_5_RREADY, twiddle_rsc_0_5_RVALID, twiddle_rsc_0_5_RUSER, twiddle_rsc_0_5_RLAST,
      twiddle_rsc_0_5_RRESP, twiddle_rsc_0_5_RDATA, twiddle_rsc_0_5_RID, twiddle_rsc_0_5_ARREADY,
      twiddle_rsc_0_5_ARVALID, twiddle_rsc_0_5_ARUSER, twiddle_rsc_0_5_ARREGION,
      twiddle_rsc_0_5_ARQOS, twiddle_rsc_0_5_ARPROT, twiddle_rsc_0_5_ARCACHE, twiddle_rsc_0_5_ARLOCK,
      twiddle_rsc_0_5_ARBURST, twiddle_rsc_0_5_ARSIZE, twiddle_rsc_0_5_ARLEN, twiddle_rsc_0_5_ARADDR,
      twiddle_rsc_0_5_ARID, twiddle_rsc_0_5_BREADY, twiddle_rsc_0_5_BVALID, twiddle_rsc_0_5_BUSER,
      twiddle_rsc_0_5_BRESP, twiddle_rsc_0_5_BID, twiddle_rsc_0_5_WREADY, twiddle_rsc_0_5_WVALID,
      twiddle_rsc_0_5_WUSER, twiddle_rsc_0_5_WLAST, twiddle_rsc_0_5_WSTRB, twiddle_rsc_0_5_WDATA,
      twiddle_rsc_0_5_AWREADY, twiddle_rsc_0_5_AWVALID, twiddle_rsc_0_5_AWUSER, twiddle_rsc_0_5_AWREGION,
      twiddle_rsc_0_5_AWQOS, twiddle_rsc_0_5_AWPROT, twiddle_rsc_0_5_AWCACHE, twiddle_rsc_0_5_AWLOCK,
      twiddle_rsc_0_5_AWBURST, twiddle_rsc_0_5_AWSIZE, twiddle_rsc_0_5_AWLEN, twiddle_rsc_0_5_AWADDR,
      twiddle_rsc_0_5_AWID, twiddle_rsc_triosy_0_5_lz, twiddle_rsc_0_6_s_tdone, twiddle_rsc_0_6_tr_write_done,
      twiddle_rsc_0_6_RREADY, twiddle_rsc_0_6_RVALID, twiddle_rsc_0_6_RUSER, twiddle_rsc_0_6_RLAST,
      twiddle_rsc_0_6_RRESP, twiddle_rsc_0_6_RDATA, twiddle_rsc_0_6_RID, twiddle_rsc_0_6_ARREADY,
      twiddle_rsc_0_6_ARVALID, twiddle_rsc_0_6_ARUSER, twiddle_rsc_0_6_ARREGION,
      twiddle_rsc_0_6_ARQOS, twiddle_rsc_0_6_ARPROT, twiddle_rsc_0_6_ARCACHE, twiddle_rsc_0_6_ARLOCK,
      twiddle_rsc_0_6_ARBURST, twiddle_rsc_0_6_ARSIZE, twiddle_rsc_0_6_ARLEN, twiddle_rsc_0_6_ARADDR,
      twiddle_rsc_0_6_ARID, twiddle_rsc_0_6_BREADY, twiddle_rsc_0_6_BVALID, twiddle_rsc_0_6_BUSER,
      twiddle_rsc_0_6_BRESP, twiddle_rsc_0_6_BID, twiddle_rsc_0_6_WREADY, twiddle_rsc_0_6_WVALID,
      twiddle_rsc_0_6_WUSER, twiddle_rsc_0_6_WLAST, twiddle_rsc_0_6_WSTRB, twiddle_rsc_0_6_WDATA,
      twiddle_rsc_0_6_AWREADY, twiddle_rsc_0_6_AWVALID, twiddle_rsc_0_6_AWUSER, twiddle_rsc_0_6_AWREGION,
      twiddle_rsc_0_6_AWQOS, twiddle_rsc_0_6_AWPROT, twiddle_rsc_0_6_AWCACHE, twiddle_rsc_0_6_AWLOCK,
      twiddle_rsc_0_6_AWBURST, twiddle_rsc_0_6_AWSIZE, twiddle_rsc_0_6_AWLEN, twiddle_rsc_0_6_AWADDR,
      twiddle_rsc_0_6_AWID, twiddle_rsc_triosy_0_6_lz, twiddle_rsc_0_7_s_tdone, twiddle_rsc_0_7_tr_write_done,
      twiddle_rsc_0_7_RREADY, twiddle_rsc_0_7_RVALID, twiddle_rsc_0_7_RUSER, twiddle_rsc_0_7_RLAST,
      twiddle_rsc_0_7_RRESP, twiddle_rsc_0_7_RDATA, twiddle_rsc_0_7_RID, twiddle_rsc_0_7_ARREADY,
      twiddle_rsc_0_7_ARVALID, twiddle_rsc_0_7_ARUSER, twiddle_rsc_0_7_ARREGION,
      twiddle_rsc_0_7_ARQOS, twiddle_rsc_0_7_ARPROT, twiddle_rsc_0_7_ARCACHE, twiddle_rsc_0_7_ARLOCK,
      twiddle_rsc_0_7_ARBURST, twiddle_rsc_0_7_ARSIZE, twiddle_rsc_0_7_ARLEN, twiddle_rsc_0_7_ARADDR,
      twiddle_rsc_0_7_ARID, twiddle_rsc_0_7_BREADY, twiddle_rsc_0_7_BVALID, twiddle_rsc_0_7_BUSER,
      twiddle_rsc_0_7_BRESP, twiddle_rsc_0_7_BID, twiddle_rsc_0_7_WREADY, twiddle_rsc_0_7_WVALID,
      twiddle_rsc_0_7_WUSER, twiddle_rsc_0_7_WLAST, twiddle_rsc_0_7_WSTRB, twiddle_rsc_0_7_WDATA,
      twiddle_rsc_0_7_AWREADY, twiddle_rsc_0_7_AWVALID, twiddle_rsc_0_7_AWUSER, twiddle_rsc_0_7_AWREGION,
      twiddle_rsc_0_7_AWQOS, twiddle_rsc_0_7_AWPROT, twiddle_rsc_0_7_AWCACHE, twiddle_rsc_0_7_AWLOCK,
      twiddle_rsc_0_7_AWBURST, twiddle_rsc_0_7_AWSIZE, twiddle_rsc_0_7_AWLEN, twiddle_rsc_0_7_AWADDR,
      twiddle_rsc_0_7_AWID, twiddle_rsc_triosy_0_7_lz, twiddle_rsc_0_8_s_tdone, twiddle_rsc_0_8_tr_write_done,
      twiddle_rsc_0_8_RREADY, twiddle_rsc_0_8_RVALID, twiddle_rsc_0_8_RUSER, twiddle_rsc_0_8_RLAST,
      twiddle_rsc_0_8_RRESP, twiddle_rsc_0_8_RDATA, twiddle_rsc_0_8_RID, twiddle_rsc_0_8_ARREADY,
      twiddle_rsc_0_8_ARVALID, twiddle_rsc_0_8_ARUSER, twiddle_rsc_0_8_ARREGION,
      twiddle_rsc_0_8_ARQOS, twiddle_rsc_0_8_ARPROT, twiddle_rsc_0_8_ARCACHE, twiddle_rsc_0_8_ARLOCK,
      twiddle_rsc_0_8_ARBURST, twiddle_rsc_0_8_ARSIZE, twiddle_rsc_0_8_ARLEN, twiddle_rsc_0_8_ARADDR,
      twiddle_rsc_0_8_ARID, twiddle_rsc_0_8_BREADY, twiddle_rsc_0_8_BVALID, twiddle_rsc_0_8_BUSER,
      twiddle_rsc_0_8_BRESP, twiddle_rsc_0_8_BID, twiddle_rsc_0_8_WREADY, twiddle_rsc_0_8_WVALID,
      twiddle_rsc_0_8_WUSER, twiddle_rsc_0_8_WLAST, twiddle_rsc_0_8_WSTRB, twiddle_rsc_0_8_WDATA,
      twiddle_rsc_0_8_AWREADY, twiddle_rsc_0_8_AWVALID, twiddle_rsc_0_8_AWUSER, twiddle_rsc_0_8_AWREGION,
      twiddle_rsc_0_8_AWQOS, twiddle_rsc_0_8_AWPROT, twiddle_rsc_0_8_AWCACHE, twiddle_rsc_0_8_AWLOCK,
      twiddle_rsc_0_8_AWBURST, twiddle_rsc_0_8_AWSIZE, twiddle_rsc_0_8_AWLEN, twiddle_rsc_0_8_AWADDR,
      twiddle_rsc_0_8_AWID, twiddle_rsc_triosy_0_8_lz, twiddle_rsc_0_9_s_tdone, twiddle_rsc_0_9_tr_write_done,
      twiddle_rsc_0_9_RREADY, twiddle_rsc_0_9_RVALID, twiddle_rsc_0_9_RUSER, twiddle_rsc_0_9_RLAST,
      twiddle_rsc_0_9_RRESP, twiddle_rsc_0_9_RDATA, twiddle_rsc_0_9_RID, twiddle_rsc_0_9_ARREADY,
      twiddle_rsc_0_9_ARVALID, twiddle_rsc_0_9_ARUSER, twiddle_rsc_0_9_ARREGION,
      twiddle_rsc_0_9_ARQOS, twiddle_rsc_0_9_ARPROT, twiddle_rsc_0_9_ARCACHE, twiddle_rsc_0_9_ARLOCK,
      twiddle_rsc_0_9_ARBURST, twiddle_rsc_0_9_ARSIZE, twiddle_rsc_0_9_ARLEN, twiddle_rsc_0_9_ARADDR,
      twiddle_rsc_0_9_ARID, twiddle_rsc_0_9_BREADY, twiddle_rsc_0_9_BVALID, twiddle_rsc_0_9_BUSER,
      twiddle_rsc_0_9_BRESP, twiddle_rsc_0_9_BID, twiddle_rsc_0_9_WREADY, twiddle_rsc_0_9_WVALID,
      twiddle_rsc_0_9_WUSER, twiddle_rsc_0_9_WLAST, twiddle_rsc_0_9_WSTRB, twiddle_rsc_0_9_WDATA,
      twiddle_rsc_0_9_AWREADY, twiddle_rsc_0_9_AWVALID, twiddle_rsc_0_9_AWUSER, twiddle_rsc_0_9_AWREGION,
      twiddle_rsc_0_9_AWQOS, twiddle_rsc_0_9_AWPROT, twiddle_rsc_0_9_AWCACHE, twiddle_rsc_0_9_AWLOCK,
      twiddle_rsc_0_9_AWBURST, twiddle_rsc_0_9_AWSIZE, twiddle_rsc_0_9_AWLEN, twiddle_rsc_0_9_AWADDR,
      twiddle_rsc_0_9_AWID, twiddle_rsc_triosy_0_9_lz, twiddle_rsc_0_10_s_tdone,
      twiddle_rsc_0_10_tr_write_done, twiddle_rsc_0_10_RREADY, twiddle_rsc_0_10_RVALID,
      twiddle_rsc_0_10_RUSER, twiddle_rsc_0_10_RLAST, twiddle_rsc_0_10_RRESP, twiddle_rsc_0_10_RDATA,
      twiddle_rsc_0_10_RID, twiddle_rsc_0_10_ARREADY, twiddle_rsc_0_10_ARVALID, twiddle_rsc_0_10_ARUSER,
      twiddle_rsc_0_10_ARREGION, twiddle_rsc_0_10_ARQOS, twiddle_rsc_0_10_ARPROT,
      twiddle_rsc_0_10_ARCACHE, twiddle_rsc_0_10_ARLOCK, twiddle_rsc_0_10_ARBURST,
      twiddle_rsc_0_10_ARSIZE, twiddle_rsc_0_10_ARLEN, twiddle_rsc_0_10_ARADDR, twiddle_rsc_0_10_ARID,
      twiddle_rsc_0_10_BREADY, twiddle_rsc_0_10_BVALID, twiddle_rsc_0_10_BUSER, twiddle_rsc_0_10_BRESP,
      twiddle_rsc_0_10_BID, twiddle_rsc_0_10_WREADY, twiddle_rsc_0_10_WVALID, twiddle_rsc_0_10_WUSER,
      twiddle_rsc_0_10_WLAST, twiddle_rsc_0_10_WSTRB, twiddle_rsc_0_10_WDATA, twiddle_rsc_0_10_AWREADY,
      twiddle_rsc_0_10_AWVALID, twiddle_rsc_0_10_AWUSER, twiddle_rsc_0_10_AWREGION,
      twiddle_rsc_0_10_AWQOS, twiddle_rsc_0_10_AWPROT, twiddle_rsc_0_10_AWCACHE,
      twiddle_rsc_0_10_AWLOCK, twiddle_rsc_0_10_AWBURST, twiddle_rsc_0_10_AWSIZE,
      twiddle_rsc_0_10_AWLEN, twiddle_rsc_0_10_AWADDR, twiddle_rsc_0_10_AWID, twiddle_rsc_triosy_0_10_lz,
      twiddle_rsc_0_11_s_tdone, twiddle_rsc_0_11_tr_write_done, twiddle_rsc_0_11_RREADY,
      twiddle_rsc_0_11_RVALID, twiddle_rsc_0_11_RUSER, twiddle_rsc_0_11_RLAST, twiddle_rsc_0_11_RRESP,
      twiddle_rsc_0_11_RDATA, twiddle_rsc_0_11_RID, twiddle_rsc_0_11_ARREADY, twiddle_rsc_0_11_ARVALID,
      twiddle_rsc_0_11_ARUSER, twiddle_rsc_0_11_ARREGION, twiddle_rsc_0_11_ARQOS,
      twiddle_rsc_0_11_ARPROT, twiddle_rsc_0_11_ARCACHE, twiddle_rsc_0_11_ARLOCK,
      twiddle_rsc_0_11_ARBURST, twiddle_rsc_0_11_ARSIZE, twiddle_rsc_0_11_ARLEN,
      twiddle_rsc_0_11_ARADDR, twiddle_rsc_0_11_ARID, twiddle_rsc_0_11_BREADY, twiddle_rsc_0_11_BVALID,
      twiddle_rsc_0_11_BUSER, twiddle_rsc_0_11_BRESP, twiddle_rsc_0_11_BID, twiddle_rsc_0_11_WREADY,
      twiddle_rsc_0_11_WVALID, twiddle_rsc_0_11_WUSER, twiddle_rsc_0_11_WLAST, twiddle_rsc_0_11_WSTRB,
      twiddle_rsc_0_11_WDATA, twiddle_rsc_0_11_AWREADY, twiddle_rsc_0_11_AWVALID,
      twiddle_rsc_0_11_AWUSER, twiddle_rsc_0_11_AWREGION, twiddle_rsc_0_11_AWQOS,
      twiddle_rsc_0_11_AWPROT, twiddle_rsc_0_11_AWCACHE, twiddle_rsc_0_11_AWLOCK,
      twiddle_rsc_0_11_AWBURST, twiddle_rsc_0_11_AWSIZE, twiddle_rsc_0_11_AWLEN,
      twiddle_rsc_0_11_AWADDR, twiddle_rsc_0_11_AWID, twiddle_rsc_triosy_0_11_lz,
      twiddle_rsc_0_12_s_tdone, twiddle_rsc_0_12_tr_write_done, twiddle_rsc_0_12_RREADY,
      twiddle_rsc_0_12_RVALID, twiddle_rsc_0_12_RUSER, twiddle_rsc_0_12_RLAST, twiddle_rsc_0_12_RRESP,
      twiddle_rsc_0_12_RDATA, twiddle_rsc_0_12_RID, twiddle_rsc_0_12_ARREADY, twiddle_rsc_0_12_ARVALID,
      twiddle_rsc_0_12_ARUSER, twiddle_rsc_0_12_ARREGION, twiddle_rsc_0_12_ARQOS,
      twiddle_rsc_0_12_ARPROT, twiddle_rsc_0_12_ARCACHE, twiddle_rsc_0_12_ARLOCK,
      twiddle_rsc_0_12_ARBURST, twiddle_rsc_0_12_ARSIZE, twiddle_rsc_0_12_ARLEN,
      twiddle_rsc_0_12_ARADDR, twiddle_rsc_0_12_ARID, twiddle_rsc_0_12_BREADY, twiddle_rsc_0_12_BVALID,
      twiddle_rsc_0_12_BUSER, twiddle_rsc_0_12_BRESP, twiddle_rsc_0_12_BID, twiddle_rsc_0_12_WREADY,
      twiddle_rsc_0_12_WVALID, twiddle_rsc_0_12_WUSER, twiddle_rsc_0_12_WLAST, twiddle_rsc_0_12_WSTRB,
      twiddle_rsc_0_12_WDATA, twiddle_rsc_0_12_AWREADY, twiddle_rsc_0_12_AWVALID,
      twiddle_rsc_0_12_AWUSER, twiddle_rsc_0_12_AWREGION, twiddle_rsc_0_12_AWQOS,
      twiddle_rsc_0_12_AWPROT, twiddle_rsc_0_12_AWCACHE, twiddle_rsc_0_12_AWLOCK,
      twiddle_rsc_0_12_AWBURST, twiddle_rsc_0_12_AWSIZE, twiddle_rsc_0_12_AWLEN,
      twiddle_rsc_0_12_AWADDR, twiddle_rsc_0_12_AWID, twiddle_rsc_triosy_0_12_lz,
      twiddle_rsc_0_13_s_tdone, twiddle_rsc_0_13_tr_write_done, twiddle_rsc_0_13_RREADY,
      twiddle_rsc_0_13_RVALID, twiddle_rsc_0_13_RUSER, twiddle_rsc_0_13_RLAST, twiddle_rsc_0_13_RRESP,
      twiddle_rsc_0_13_RDATA, twiddle_rsc_0_13_RID, twiddle_rsc_0_13_ARREADY, twiddle_rsc_0_13_ARVALID,
      twiddle_rsc_0_13_ARUSER, twiddle_rsc_0_13_ARREGION, twiddle_rsc_0_13_ARQOS,
      twiddle_rsc_0_13_ARPROT, twiddle_rsc_0_13_ARCACHE, twiddle_rsc_0_13_ARLOCK,
      twiddle_rsc_0_13_ARBURST, twiddle_rsc_0_13_ARSIZE, twiddle_rsc_0_13_ARLEN,
      twiddle_rsc_0_13_ARADDR, twiddle_rsc_0_13_ARID, twiddle_rsc_0_13_BREADY, twiddle_rsc_0_13_BVALID,
      twiddle_rsc_0_13_BUSER, twiddle_rsc_0_13_BRESP, twiddle_rsc_0_13_BID, twiddle_rsc_0_13_WREADY,
      twiddle_rsc_0_13_WVALID, twiddle_rsc_0_13_WUSER, twiddle_rsc_0_13_WLAST, twiddle_rsc_0_13_WSTRB,
      twiddle_rsc_0_13_WDATA, twiddle_rsc_0_13_AWREADY, twiddle_rsc_0_13_AWVALID,
      twiddle_rsc_0_13_AWUSER, twiddle_rsc_0_13_AWREGION, twiddle_rsc_0_13_AWQOS,
      twiddle_rsc_0_13_AWPROT, twiddle_rsc_0_13_AWCACHE, twiddle_rsc_0_13_AWLOCK,
      twiddle_rsc_0_13_AWBURST, twiddle_rsc_0_13_AWSIZE, twiddle_rsc_0_13_AWLEN,
      twiddle_rsc_0_13_AWADDR, twiddle_rsc_0_13_AWID, twiddle_rsc_triosy_0_13_lz,
      twiddle_rsc_0_14_s_tdone, twiddle_rsc_0_14_tr_write_done, twiddle_rsc_0_14_RREADY,
      twiddle_rsc_0_14_RVALID, twiddle_rsc_0_14_RUSER, twiddle_rsc_0_14_RLAST, twiddle_rsc_0_14_RRESP,
      twiddle_rsc_0_14_RDATA, twiddle_rsc_0_14_RID, twiddle_rsc_0_14_ARREADY, twiddle_rsc_0_14_ARVALID,
      twiddle_rsc_0_14_ARUSER, twiddle_rsc_0_14_ARREGION, twiddle_rsc_0_14_ARQOS,
      twiddle_rsc_0_14_ARPROT, twiddle_rsc_0_14_ARCACHE, twiddle_rsc_0_14_ARLOCK,
      twiddle_rsc_0_14_ARBURST, twiddle_rsc_0_14_ARSIZE, twiddle_rsc_0_14_ARLEN,
      twiddle_rsc_0_14_ARADDR, twiddle_rsc_0_14_ARID, twiddle_rsc_0_14_BREADY, twiddle_rsc_0_14_BVALID,
      twiddle_rsc_0_14_BUSER, twiddle_rsc_0_14_BRESP, twiddle_rsc_0_14_BID, twiddle_rsc_0_14_WREADY,
      twiddle_rsc_0_14_WVALID, twiddle_rsc_0_14_WUSER, twiddle_rsc_0_14_WLAST, twiddle_rsc_0_14_WSTRB,
      twiddle_rsc_0_14_WDATA, twiddle_rsc_0_14_AWREADY, twiddle_rsc_0_14_AWVALID,
      twiddle_rsc_0_14_AWUSER, twiddle_rsc_0_14_AWREGION, twiddle_rsc_0_14_AWQOS,
      twiddle_rsc_0_14_AWPROT, twiddle_rsc_0_14_AWCACHE, twiddle_rsc_0_14_AWLOCK,
      twiddle_rsc_0_14_AWBURST, twiddle_rsc_0_14_AWSIZE, twiddle_rsc_0_14_AWLEN,
      twiddle_rsc_0_14_AWADDR, twiddle_rsc_0_14_AWID, twiddle_rsc_triosy_0_14_lz,
      twiddle_rsc_0_15_s_tdone, twiddle_rsc_0_15_tr_write_done, twiddle_rsc_0_15_RREADY,
      twiddle_rsc_0_15_RVALID, twiddle_rsc_0_15_RUSER, twiddle_rsc_0_15_RLAST, twiddle_rsc_0_15_RRESP,
      twiddle_rsc_0_15_RDATA, twiddle_rsc_0_15_RID, twiddle_rsc_0_15_ARREADY, twiddle_rsc_0_15_ARVALID,
      twiddle_rsc_0_15_ARUSER, twiddle_rsc_0_15_ARREGION, twiddle_rsc_0_15_ARQOS,
      twiddle_rsc_0_15_ARPROT, twiddle_rsc_0_15_ARCACHE, twiddle_rsc_0_15_ARLOCK,
      twiddle_rsc_0_15_ARBURST, twiddle_rsc_0_15_ARSIZE, twiddle_rsc_0_15_ARLEN,
      twiddle_rsc_0_15_ARADDR, twiddle_rsc_0_15_ARID, twiddle_rsc_0_15_BREADY, twiddle_rsc_0_15_BVALID,
      twiddle_rsc_0_15_BUSER, twiddle_rsc_0_15_BRESP, twiddle_rsc_0_15_BID, twiddle_rsc_0_15_WREADY,
      twiddle_rsc_0_15_WVALID, twiddle_rsc_0_15_WUSER, twiddle_rsc_0_15_WLAST, twiddle_rsc_0_15_WSTRB,
      twiddle_rsc_0_15_WDATA, twiddle_rsc_0_15_AWREADY, twiddle_rsc_0_15_AWVALID,
      twiddle_rsc_0_15_AWUSER, twiddle_rsc_0_15_AWREGION, twiddle_rsc_0_15_AWQOS,
      twiddle_rsc_0_15_AWPROT, twiddle_rsc_0_15_AWCACHE, twiddle_rsc_0_15_AWLOCK,
      twiddle_rsc_0_15_AWBURST, twiddle_rsc_0_15_AWSIZE, twiddle_rsc_0_15_AWLEN,
      twiddle_rsc_0_15_AWADDR, twiddle_rsc_0_15_AWID, twiddle_rsc_triosy_0_15_lz,
      twiddle_h_rsc_0_0_s_tdone, twiddle_h_rsc_0_0_tr_write_done, twiddle_h_rsc_0_0_RREADY,
      twiddle_h_rsc_0_0_RVALID, twiddle_h_rsc_0_0_RUSER, twiddle_h_rsc_0_0_RLAST,
      twiddle_h_rsc_0_0_RRESP, twiddle_h_rsc_0_0_RDATA, twiddle_h_rsc_0_0_RID, twiddle_h_rsc_0_0_ARREADY,
      twiddle_h_rsc_0_0_ARVALID, twiddle_h_rsc_0_0_ARUSER, twiddle_h_rsc_0_0_ARREGION,
      twiddle_h_rsc_0_0_ARQOS, twiddle_h_rsc_0_0_ARPROT, twiddle_h_rsc_0_0_ARCACHE,
      twiddle_h_rsc_0_0_ARLOCK, twiddle_h_rsc_0_0_ARBURST, twiddle_h_rsc_0_0_ARSIZE,
      twiddle_h_rsc_0_0_ARLEN, twiddle_h_rsc_0_0_ARADDR, twiddle_h_rsc_0_0_ARID,
      twiddle_h_rsc_0_0_BREADY, twiddle_h_rsc_0_0_BVALID, twiddle_h_rsc_0_0_BUSER,
      twiddle_h_rsc_0_0_BRESP, twiddle_h_rsc_0_0_BID, twiddle_h_rsc_0_0_WREADY, twiddle_h_rsc_0_0_WVALID,
      twiddle_h_rsc_0_0_WUSER, twiddle_h_rsc_0_0_WLAST, twiddle_h_rsc_0_0_WSTRB,
      twiddle_h_rsc_0_0_WDATA, twiddle_h_rsc_0_0_AWREADY, twiddle_h_rsc_0_0_AWVALID,
      twiddle_h_rsc_0_0_AWUSER, twiddle_h_rsc_0_0_AWREGION, twiddle_h_rsc_0_0_AWQOS,
      twiddle_h_rsc_0_0_AWPROT, twiddle_h_rsc_0_0_AWCACHE, twiddle_h_rsc_0_0_AWLOCK,
      twiddle_h_rsc_0_0_AWBURST, twiddle_h_rsc_0_0_AWSIZE, twiddle_h_rsc_0_0_AWLEN,
      twiddle_h_rsc_0_0_AWADDR, twiddle_h_rsc_0_0_AWID, twiddle_h_rsc_triosy_0_0_lz,
      twiddle_h_rsc_0_1_s_tdone, twiddle_h_rsc_0_1_tr_write_done, twiddle_h_rsc_0_1_RREADY,
      twiddle_h_rsc_0_1_RVALID, twiddle_h_rsc_0_1_RUSER, twiddle_h_rsc_0_1_RLAST,
      twiddle_h_rsc_0_1_RRESP, twiddle_h_rsc_0_1_RDATA, twiddle_h_rsc_0_1_RID, twiddle_h_rsc_0_1_ARREADY,
      twiddle_h_rsc_0_1_ARVALID, twiddle_h_rsc_0_1_ARUSER, twiddle_h_rsc_0_1_ARREGION,
      twiddle_h_rsc_0_1_ARQOS, twiddle_h_rsc_0_1_ARPROT, twiddle_h_rsc_0_1_ARCACHE,
      twiddle_h_rsc_0_1_ARLOCK, twiddle_h_rsc_0_1_ARBURST, twiddle_h_rsc_0_1_ARSIZE,
      twiddle_h_rsc_0_1_ARLEN, twiddle_h_rsc_0_1_ARADDR, twiddle_h_rsc_0_1_ARID,
      twiddle_h_rsc_0_1_BREADY, twiddle_h_rsc_0_1_BVALID, twiddle_h_rsc_0_1_BUSER,
      twiddle_h_rsc_0_1_BRESP, twiddle_h_rsc_0_1_BID, twiddle_h_rsc_0_1_WREADY, twiddle_h_rsc_0_1_WVALID,
      twiddle_h_rsc_0_1_WUSER, twiddle_h_rsc_0_1_WLAST, twiddle_h_rsc_0_1_WSTRB,
      twiddle_h_rsc_0_1_WDATA, twiddle_h_rsc_0_1_AWREADY, twiddle_h_rsc_0_1_AWVALID,
      twiddle_h_rsc_0_1_AWUSER, twiddle_h_rsc_0_1_AWREGION, twiddle_h_rsc_0_1_AWQOS,
      twiddle_h_rsc_0_1_AWPROT, twiddle_h_rsc_0_1_AWCACHE, twiddle_h_rsc_0_1_AWLOCK,
      twiddle_h_rsc_0_1_AWBURST, twiddle_h_rsc_0_1_AWSIZE, twiddle_h_rsc_0_1_AWLEN,
      twiddle_h_rsc_0_1_AWADDR, twiddle_h_rsc_0_1_AWID, twiddle_h_rsc_triosy_0_1_lz,
      twiddle_h_rsc_0_2_s_tdone, twiddle_h_rsc_0_2_tr_write_done, twiddle_h_rsc_0_2_RREADY,
      twiddle_h_rsc_0_2_RVALID, twiddle_h_rsc_0_2_RUSER, twiddle_h_rsc_0_2_RLAST,
      twiddle_h_rsc_0_2_RRESP, twiddle_h_rsc_0_2_RDATA, twiddle_h_rsc_0_2_RID, twiddle_h_rsc_0_2_ARREADY,
      twiddle_h_rsc_0_2_ARVALID, twiddle_h_rsc_0_2_ARUSER, twiddle_h_rsc_0_2_ARREGION,
      twiddle_h_rsc_0_2_ARQOS, twiddle_h_rsc_0_2_ARPROT, twiddle_h_rsc_0_2_ARCACHE,
      twiddle_h_rsc_0_2_ARLOCK, twiddle_h_rsc_0_2_ARBURST, twiddle_h_rsc_0_2_ARSIZE,
      twiddle_h_rsc_0_2_ARLEN, twiddle_h_rsc_0_2_ARADDR, twiddle_h_rsc_0_2_ARID,
      twiddle_h_rsc_0_2_BREADY, twiddle_h_rsc_0_2_BVALID, twiddle_h_rsc_0_2_BUSER,
      twiddle_h_rsc_0_2_BRESP, twiddle_h_rsc_0_2_BID, twiddle_h_rsc_0_2_WREADY, twiddle_h_rsc_0_2_WVALID,
      twiddle_h_rsc_0_2_WUSER, twiddle_h_rsc_0_2_WLAST, twiddle_h_rsc_0_2_WSTRB,
      twiddle_h_rsc_0_2_WDATA, twiddle_h_rsc_0_2_AWREADY, twiddle_h_rsc_0_2_AWVALID,
      twiddle_h_rsc_0_2_AWUSER, twiddle_h_rsc_0_2_AWREGION, twiddle_h_rsc_0_2_AWQOS,
      twiddle_h_rsc_0_2_AWPROT, twiddle_h_rsc_0_2_AWCACHE, twiddle_h_rsc_0_2_AWLOCK,
      twiddle_h_rsc_0_2_AWBURST, twiddle_h_rsc_0_2_AWSIZE, twiddle_h_rsc_0_2_AWLEN,
      twiddle_h_rsc_0_2_AWADDR, twiddle_h_rsc_0_2_AWID, twiddle_h_rsc_triosy_0_2_lz,
      twiddle_h_rsc_0_3_s_tdone, twiddle_h_rsc_0_3_tr_write_done, twiddle_h_rsc_0_3_RREADY,
      twiddle_h_rsc_0_3_RVALID, twiddle_h_rsc_0_3_RUSER, twiddle_h_rsc_0_3_RLAST,
      twiddle_h_rsc_0_3_RRESP, twiddle_h_rsc_0_3_RDATA, twiddle_h_rsc_0_3_RID, twiddle_h_rsc_0_3_ARREADY,
      twiddle_h_rsc_0_3_ARVALID, twiddle_h_rsc_0_3_ARUSER, twiddle_h_rsc_0_3_ARREGION,
      twiddle_h_rsc_0_3_ARQOS, twiddle_h_rsc_0_3_ARPROT, twiddle_h_rsc_0_3_ARCACHE,
      twiddle_h_rsc_0_3_ARLOCK, twiddle_h_rsc_0_3_ARBURST, twiddle_h_rsc_0_3_ARSIZE,
      twiddle_h_rsc_0_3_ARLEN, twiddle_h_rsc_0_3_ARADDR, twiddle_h_rsc_0_3_ARID,
      twiddle_h_rsc_0_3_BREADY, twiddle_h_rsc_0_3_BVALID, twiddle_h_rsc_0_3_BUSER,
      twiddle_h_rsc_0_3_BRESP, twiddle_h_rsc_0_3_BID, twiddle_h_rsc_0_3_WREADY, twiddle_h_rsc_0_3_WVALID,
      twiddle_h_rsc_0_3_WUSER, twiddle_h_rsc_0_3_WLAST, twiddle_h_rsc_0_3_WSTRB,
      twiddle_h_rsc_0_3_WDATA, twiddle_h_rsc_0_3_AWREADY, twiddle_h_rsc_0_3_AWVALID,
      twiddle_h_rsc_0_3_AWUSER, twiddle_h_rsc_0_3_AWREGION, twiddle_h_rsc_0_3_AWQOS,
      twiddle_h_rsc_0_3_AWPROT, twiddle_h_rsc_0_3_AWCACHE, twiddle_h_rsc_0_3_AWLOCK,
      twiddle_h_rsc_0_3_AWBURST, twiddle_h_rsc_0_3_AWSIZE, twiddle_h_rsc_0_3_AWLEN,
      twiddle_h_rsc_0_3_AWADDR, twiddle_h_rsc_0_3_AWID, twiddle_h_rsc_triosy_0_3_lz,
      twiddle_h_rsc_0_4_s_tdone, twiddle_h_rsc_0_4_tr_write_done, twiddle_h_rsc_0_4_RREADY,
      twiddle_h_rsc_0_4_RVALID, twiddle_h_rsc_0_4_RUSER, twiddle_h_rsc_0_4_RLAST,
      twiddle_h_rsc_0_4_RRESP, twiddle_h_rsc_0_4_RDATA, twiddle_h_rsc_0_4_RID, twiddle_h_rsc_0_4_ARREADY,
      twiddle_h_rsc_0_4_ARVALID, twiddle_h_rsc_0_4_ARUSER, twiddle_h_rsc_0_4_ARREGION,
      twiddle_h_rsc_0_4_ARQOS, twiddle_h_rsc_0_4_ARPROT, twiddle_h_rsc_0_4_ARCACHE,
      twiddle_h_rsc_0_4_ARLOCK, twiddle_h_rsc_0_4_ARBURST, twiddle_h_rsc_0_4_ARSIZE,
      twiddle_h_rsc_0_4_ARLEN, twiddle_h_rsc_0_4_ARADDR, twiddle_h_rsc_0_4_ARID,
      twiddle_h_rsc_0_4_BREADY, twiddle_h_rsc_0_4_BVALID, twiddle_h_rsc_0_4_BUSER,
      twiddle_h_rsc_0_4_BRESP, twiddle_h_rsc_0_4_BID, twiddle_h_rsc_0_4_WREADY, twiddle_h_rsc_0_4_WVALID,
      twiddle_h_rsc_0_4_WUSER, twiddle_h_rsc_0_4_WLAST, twiddle_h_rsc_0_4_WSTRB,
      twiddle_h_rsc_0_4_WDATA, twiddle_h_rsc_0_4_AWREADY, twiddle_h_rsc_0_4_AWVALID,
      twiddle_h_rsc_0_4_AWUSER, twiddle_h_rsc_0_4_AWREGION, twiddle_h_rsc_0_4_AWQOS,
      twiddle_h_rsc_0_4_AWPROT, twiddle_h_rsc_0_4_AWCACHE, twiddle_h_rsc_0_4_AWLOCK,
      twiddle_h_rsc_0_4_AWBURST, twiddle_h_rsc_0_4_AWSIZE, twiddle_h_rsc_0_4_AWLEN,
      twiddle_h_rsc_0_4_AWADDR, twiddle_h_rsc_0_4_AWID, twiddle_h_rsc_triosy_0_4_lz,
      twiddle_h_rsc_0_5_s_tdone, twiddle_h_rsc_0_5_tr_write_done, twiddle_h_rsc_0_5_RREADY,
      twiddle_h_rsc_0_5_RVALID, twiddle_h_rsc_0_5_RUSER, twiddle_h_rsc_0_5_RLAST,
      twiddle_h_rsc_0_5_RRESP, twiddle_h_rsc_0_5_RDATA, twiddle_h_rsc_0_5_RID, twiddle_h_rsc_0_5_ARREADY,
      twiddle_h_rsc_0_5_ARVALID, twiddle_h_rsc_0_5_ARUSER, twiddle_h_rsc_0_5_ARREGION,
      twiddle_h_rsc_0_5_ARQOS, twiddle_h_rsc_0_5_ARPROT, twiddle_h_rsc_0_5_ARCACHE,
      twiddle_h_rsc_0_5_ARLOCK, twiddle_h_rsc_0_5_ARBURST, twiddle_h_rsc_0_5_ARSIZE,
      twiddle_h_rsc_0_5_ARLEN, twiddle_h_rsc_0_5_ARADDR, twiddle_h_rsc_0_5_ARID,
      twiddle_h_rsc_0_5_BREADY, twiddle_h_rsc_0_5_BVALID, twiddle_h_rsc_0_5_BUSER,
      twiddle_h_rsc_0_5_BRESP, twiddle_h_rsc_0_5_BID, twiddle_h_rsc_0_5_WREADY, twiddle_h_rsc_0_5_WVALID,
      twiddle_h_rsc_0_5_WUSER, twiddle_h_rsc_0_5_WLAST, twiddle_h_rsc_0_5_WSTRB,
      twiddle_h_rsc_0_5_WDATA, twiddle_h_rsc_0_5_AWREADY, twiddle_h_rsc_0_5_AWVALID,
      twiddle_h_rsc_0_5_AWUSER, twiddle_h_rsc_0_5_AWREGION, twiddle_h_rsc_0_5_AWQOS,
      twiddle_h_rsc_0_5_AWPROT, twiddle_h_rsc_0_5_AWCACHE, twiddle_h_rsc_0_5_AWLOCK,
      twiddle_h_rsc_0_5_AWBURST, twiddle_h_rsc_0_5_AWSIZE, twiddle_h_rsc_0_5_AWLEN,
      twiddle_h_rsc_0_5_AWADDR, twiddle_h_rsc_0_5_AWID, twiddle_h_rsc_triosy_0_5_lz,
      twiddle_h_rsc_0_6_s_tdone, twiddle_h_rsc_0_6_tr_write_done, twiddle_h_rsc_0_6_RREADY,
      twiddle_h_rsc_0_6_RVALID, twiddle_h_rsc_0_6_RUSER, twiddle_h_rsc_0_6_RLAST,
      twiddle_h_rsc_0_6_RRESP, twiddle_h_rsc_0_6_RDATA, twiddle_h_rsc_0_6_RID, twiddle_h_rsc_0_6_ARREADY,
      twiddle_h_rsc_0_6_ARVALID, twiddle_h_rsc_0_6_ARUSER, twiddle_h_rsc_0_6_ARREGION,
      twiddle_h_rsc_0_6_ARQOS, twiddle_h_rsc_0_6_ARPROT, twiddle_h_rsc_0_6_ARCACHE,
      twiddle_h_rsc_0_6_ARLOCK, twiddle_h_rsc_0_6_ARBURST, twiddle_h_rsc_0_6_ARSIZE,
      twiddle_h_rsc_0_6_ARLEN, twiddle_h_rsc_0_6_ARADDR, twiddle_h_rsc_0_6_ARID,
      twiddle_h_rsc_0_6_BREADY, twiddle_h_rsc_0_6_BVALID, twiddle_h_rsc_0_6_BUSER,
      twiddle_h_rsc_0_6_BRESP, twiddle_h_rsc_0_6_BID, twiddle_h_rsc_0_6_WREADY, twiddle_h_rsc_0_6_WVALID,
      twiddle_h_rsc_0_6_WUSER, twiddle_h_rsc_0_6_WLAST, twiddle_h_rsc_0_6_WSTRB,
      twiddle_h_rsc_0_6_WDATA, twiddle_h_rsc_0_6_AWREADY, twiddle_h_rsc_0_6_AWVALID,
      twiddle_h_rsc_0_6_AWUSER, twiddle_h_rsc_0_6_AWREGION, twiddle_h_rsc_0_6_AWQOS,
      twiddle_h_rsc_0_6_AWPROT, twiddle_h_rsc_0_6_AWCACHE, twiddle_h_rsc_0_6_AWLOCK,
      twiddle_h_rsc_0_6_AWBURST, twiddle_h_rsc_0_6_AWSIZE, twiddle_h_rsc_0_6_AWLEN,
      twiddle_h_rsc_0_6_AWADDR, twiddle_h_rsc_0_6_AWID, twiddle_h_rsc_triosy_0_6_lz,
      twiddle_h_rsc_0_7_s_tdone, twiddle_h_rsc_0_7_tr_write_done, twiddle_h_rsc_0_7_RREADY,
      twiddle_h_rsc_0_7_RVALID, twiddle_h_rsc_0_7_RUSER, twiddle_h_rsc_0_7_RLAST,
      twiddle_h_rsc_0_7_RRESP, twiddle_h_rsc_0_7_RDATA, twiddle_h_rsc_0_7_RID, twiddle_h_rsc_0_7_ARREADY,
      twiddle_h_rsc_0_7_ARVALID, twiddle_h_rsc_0_7_ARUSER, twiddle_h_rsc_0_7_ARREGION,
      twiddle_h_rsc_0_7_ARQOS, twiddle_h_rsc_0_7_ARPROT, twiddle_h_rsc_0_7_ARCACHE,
      twiddle_h_rsc_0_7_ARLOCK, twiddle_h_rsc_0_7_ARBURST, twiddle_h_rsc_0_7_ARSIZE,
      twiddle_h_rsc_0_7_ARLEN, twiddle_h_rsc_0_7_ARADDR, twiddle_h_rsc_0_7_ARID,
      twiddle_h_rsc_0_7_BREADY, twiddle_h_rsc_0_7_BVALID, twiddle_h_rsc_0_7_BUSER,
      twiddle_h_rsc_0_7_BRESP, twiddle_h_rsc_0_7_BID, twiddle_h_rsc_0_7_WREADY, twiddle_h_rsc_0_7_WVALID,
      twiddle_h_rsc_0_7_WUSER, twiddle_h_rsc_0_7_WLAST, twiddle_h_rsc_0_7_WSTRB,
      twiddle_h_rsc_0_7_WDATA, twiddle_h_rsc_0_7_AWREADY, twiddle_h_rsc_0_7_AWVALID,
      twiddle_h_rsc_0_7_AWUSER, twiddle_h_rsc_0_7_AWREGION, twiddle_h_rsc_0_7_AWQOS,
      twiddle_h_rsc_0_7_AWPROT, twiddle_h_rsc_0_7_AWCACHE, twiddle_h_rsc_0_7_AWLOCK,
      twiddle_h_rsc_0_7_AWBURST, twiddle_h_rsc_0_7_AWSIZE, twiddle_h_rsc_0_7_AWLEN,
      twiddle_h_rsc_0_7_AWADDR, twiddle_h_rsc_0_7_AWID, twiddle_h_rsc_triosy_0_7_lz,
      twiddle_h_rsc_0_8_s_tdone, twiddle_h_rsc_0_8_tr_write_done, twiddle_h_rsc_0_8_RREADY,
      twiddle_h_rsc_0_8_RVALID, twiddle_h_rsc_0_8_RUSER, twiddle_h_rsc_0_8_RLAST,
      twiddle_h_rsc_0_8_RRESP, twiddle_h_rsc_0_8_RDATA, twiddle_h_rsc_0_8_RID, twiddle_h_rsc_0_8_ARREADY,
      twiddle_h_rsc_0_8_ARVALID, twiddle_h_rsc_0_8_ARUSER, twiddle_h_rsc_0_8_ARREGION,
      twiddle_h_rsc_0_8_ARQOS, twiddle_h_rsc_0_8_ARPROT, twiddle_h_rsc_0_8_ARCACHE,
      twiddle_h_rsc_0_8_ARLOCK, twiddle_h_rsc_0_8_ARBURST, twiddle_h_rsc_0_8_ARSIZE,
      twiddle_h_rsc_0_8_ARLEN, twiddle_h_rsc_0_8_ARADDR, twiddle_h_rsc_0_8_ARID,
      twiddle_h_rsc_0_8_BREADY, twiddle_h_rsc_0_8_BVALID, twiddle_h_rsc_0_8_BUSER,
      twiddle_h_rsc_0_8_BRESP, twiddle_h_rsc_0_8_BID, twiddle_h_rsc_0_8_WREADY, twiddle_h_rsc_0_8_WVALID,
      twiddle_h_rsc_0_8_WUSER, twiddle_h_rsc_0_8_WLAST, twiddle_h_rsc_0_8_WSTRB,
      twiddle_h_rsc_0_8_WDATA, twiddle_h_rsc_0_8_AWREADY, twiddle_h_rsc_0_8_AWVALID,
      twiddle_h_rsc_0_8_AWUSER, twiddle_h_rsc_0_8_AWREGION, twiddle_h_rsc_0_8_AWQOS,
      twiddle_h_rsc_0_8_AWPROT, twiddle_h_rsc_0_8_AWCACHE, twiddle_h_rsc_0_8_AWLOCK,
      twiddle_h_rsc_0_8_AWBURST, twiddle_h_rsc_0_8_AWSIZE, twiddle_h_rsc_0_8_AWLEN,
      twiddle_h_rsc_0_8_AWADDR, twiddle_h_rsc_0_8_AWID, twiddle_h_rsc_triosy_0_8_lz,
      twiddle_h_rsc_0_9_s_tdone, twiddle_h_rsc_0_9_tr_write_done, twiddle_h_rsc_0_9_RREADY,
      twiddle_h_rsc_0_9_RVALID, twiddle_h_rsc_0_9_RUSER, twiddle_h_rsc_0_9_RLAST,
      twiddle_h_rsc_0_9_RRESP, twiddle_h_rsc_0_9_RDATA, twiddle_h_rsc_0_9_RID, twiddle_h_rsc_0_9_ARREADY,
      twiddle_h_rsc_0_9_ARVALID, twiddle_h_rsc_0_9_ARUSER, twiddle_h_rsc_0_9_ARREGION,
      twiddle_h_rsc_0_9_ARQOS, twiddle_h_rsc_0_9_ARPROT, twiddle_h_rsc_0_9_ARCACHE,
      twiddle_h_rsc_0_9_ARLOCK, twiddle_h_rsc_0_9_ARBURST, twiddle_h_rsc_0_9_ARSIZE,
      twiddle_h_rsc_0_9_ARLEN, twiddle_h_rsc_0_9_ARADDR, twiddle_h_rsc_0_9_ARID,
      twiddle_h_rsc_0_9_BREADY, twiddle_h_rsc_0_9_BVALID, twiddle_h_rsc_0_9_BUSER,
      twiddle_h_rsc_0_9_BRESP, twiddle_h_rsc_0_9_BID, twiddle_h_rsc_0_9_WREADY, twiddle_h_rsc_0_9_WVALID,
      twiddle_h_rsc_0_9_WUSER, twiddle_h_rsc_0_9_WLAST, twiddle_h_rsc_0_9_WSTRB,
      twiddle_h_rsc_0_9_WDATA, twiddle_h_rsc_0_9_AWREADY, twiddle_h_rsc_0_9_AWVALID,
      twiddle_h_rsc_0_9_AWUSER, twiddle_h_rsc_0_9_AWREGION, twiddle_h_rsc_0_9_AWQOS,
      twiddle_h_rsc_0_9_AWPROT, twiddle_h_rsc_0_9_AWCACHE, twiddle_h_rsc_0_9_AWLOCK,
      twiddle_h_rsc_0_9_AWBURST, twiddle_h_rsc_0_9_AWSIZE, twiddle_h_rsc_0_9_AWLEN,
      twiddle_h_rsc_0_9_AWADDR, twiddle_h_rsc_0_9_AWID, twiddle_h_rsc_triosy_0_9_lz,
      twiddle_h_rsc_0_10_s_tdone, twiddle_h_rsc_0_10_tr_write_done, twiddle_h_rsc_0_10_RREADY,
      twiddle_h_rsc_0_10_RVALID, twiddle_h_rsc_0_10_RUSER, twiddle_h_rsc_0_10_RLAST,
      twiddle_h_rsc_0_10_RRESP, twiddle_h_rsc_0_10_RDATA, twiddle_h_rsc_0_10_RID,
      twiddle_h_rsc_0_10_ARREADY, twiddle_h_rsc_0_10_ARVALID, twiddle_h_rsc_0_10_ARUSER,
      twiddle_h_rsc_0_10_ARREGION, twiddle_h_rsc_0_10_ARQOS, twiddle_h_rsc_0_10_ARPROT,
      twiddle_h_rsc_0_10_ARCACHE, twiddle_h_rsc_0_10_ARLOCK, twiddle_h_rsc_0_10_ARBURST,
      twiddle_h_rsc_0_10_ARSIZE, twiddle_h_rsc_0_10_ARLEN, twiddle_h_rsc_0_10_ARADDR,
      twiddle_h_rsc_0_10_ARID, twiddle_h_rsc_0_10_BREADY, twiddle_h_rsc_0_10_BVALID,
      twiddle_h_rsc_0_10_BUSER, twiddle_h_rsc_0_10_BRESP, twiddle_h_rsc_0_10_BID,
      twiddle_h_rsc_0_10_WREADY, twiddle_h_rsc_0_10_WVALID, twiddle_h_rsc_0_10_WUSER,
      twiddle_h_rsc_0_10_WLAST, twiddle_h_rsc_0_10_WSTRB, twiddle_h_rsc_0_10_WDATA,
      twiddle_h_rsc_0_10_AWREADY, twiddle_h_rsc_0_10_AWVALID, twiddle_h_rsc_0_10_AWUSER,
      twiddle_h_rsc_0_10_AWREGION, twiddle_h_rsc_0_10_AWQOS, twiddle_h_rsc_0_10_AWPROT,
      twiddle_h_rsc_0_10_AWCACHE, twiddle_h_rsc_0_10_AWLOCK, twiddle_h_rsc_0_10_AWBURST,
      twiddle_h_rsc_0_10_AWSIZE, twiddle_h_rsc_0_10_AWLEN, twiddle_h_rsc_0_10_AWADDR,
      twiddle_h_rsc_0_10_AWID, twiddle_h_rsc_triosy_0_10_lz, twiddle_h_rsc_0_11_s_tdone,
      twiddle_h_rsc_0_11_tr_write_done, twiddle_h_rsc_0_11_RREADY, twiddle_h_rsc_0_11_RVALID,
      twiddle_h_rsc_0_11_RUSER, twiddle_h_rsc_0_11_RLAST, twiddle_h_rsc_0_11_RRESP,
      twiddle_h_rsc_0_11_RDATA, twiddle_h_rsc_0_11_RID, twiddle_h_rsc_0_11_ARREADY,
      twiddle_h_rsc_0_11_ARVALID, twiddle_h_rsc_0_11_ARUSER, twiddle_h_rsc_0_11_ARREGION,
      twiddle_h_rsc_0_11_ARQOS, twiddle_h_rsc_0_11_ARPROT, twiddle_h_rsc_0_11_ARCACHE,
      twiddle_h_rsc_0_11_ARLOCK, twiddle_h_rsc_0_11_ARBURST, twiddle_h_rsc_0_11_ARSIZE,
      twiddle_h_rsc_0_11_ARLEN, twiddle_h_rsc_0_11_ARADDR, twiddle_h_rsc_0_11_ARID,
      twiddle_h_rsc_0_11_BREADY, twiddle_h_rsc_0_11_BVALID, twiddle_h_rsc_0_11_BUSER,
      twiddle_h_rsc_0_11_BRESP, twiddle_h_rsc_0_11_BID, twiddle_h_rsc_0_11_WREADY,
      twiddle_h_rsc_0_11_WVALID, twiddle_h_rsc_0_11_WUSER, twiddle_h_rsc_0_11_WLAST,
      twiddle_h_rsc_0_11_WSTRB, twiddle_h_rsc_0_11_WDATA, twiddle_h_rsc_0_11_AWREADY,
      twiddle_h_rsc_0_11_AWVALID, twiddle_h_rsc_0_11_AWUSER, twiddle_h_rsc_0_11_AWREGION,
      twiddle_h_rsc_0_11_AWQOS, twiddle_h_rsc_0_11_AWPROT, twiddle_h_rsc_0_11_AWCACHE,
      twiddle_h_rsc_0_11_AWLOCK, twiddle_h_rsc_0_11_AWBURST, twiddle_h_rsc_0_11_AWSIZE,
      twiddle_h_rsc_0_11_AWLEN, twiddle_h_rsc_0_11_AWADDR, twiddle_h_rsc_0_11_AWID,
      twiddle_h_rsc_triosy_0_11_lz, twiddle_h_rsc_0_12_s_tdone, twiddle_h_rsc_0_12_tr_write_done,
      twiddle_h_rsc_0_12_RREADY, twiddle_h_rsc_0_12_RVALID, twiddle_h_rsc_0_12_RUSER,
      twiddle_h_rsc_0_12_RLAST, twiddle_h_rsc_0_12_RRESP, twiddle_h_rsc_0_12_RDATA,
      twiddle_h_rsc_0_12_RID, twiddle_h_rsc_0_12_ARREADY, twiddle_h_rsc_0_12_ARVALID,
      twiddle_h_rsc_0_12_ARUSER, twiddle_h_rsc_0_12_ARREGION, twiddle_h_rsc_0_12_ARQOS,
      twiddle_h_rsc_0_12_ARPROT, twiddle_h_rsc_0_12_ARCACHE, twiddle_h_rsc_0_12_ARLOCK,
      twiddle_h_rsc_0_12_ARBURST, twiddle_h_rsc_0_12_ARSIZE, twiddle_h_rsc_0_12_ARLEN,
      twiddle_h_rsc_0_12_ARADDR, twiddle_h_rsc_0_12_ARID, twiddle_h_rsc_0_12_BREADY,
      twiddle_h_rsc_0_12_BVALID, twiddle_h_rsc_0_12_BUSER, twiddle_h_rsc_0_12_BRESP,
      twiddle_h_rsc_0_12_BID, twiddle_h_rsc_0_12_WREADY, twiddle_h_rsc_0_12_WVALID,
      twiddle_h_rsc_0_12_WUSER, twiddle_h_rsc_0_12_WLAST, twiddle_h_rsc_0_12_WSTRB,
      twiddle_h_rsc_0_12_WDATA, twiddle_h_rsc_0_12_AWREADY, twiddle_h_rsc_0_12_AWVALID,
      twiddle_h_rsc_0_12_AWUSER, twiddle_h_rsc_0_12_AWREGION, twiddle_h_rsc_0_12_AWQOS,
      twiddle_h_rsc_0_12_AWPROT, twiddle_h_rsc_0_12_AWCACHE, twiddle_h_rsc_0_12_AWLOCK,
      twiddle_h_rsc_0_12_AWBURST, twiddle_h_rsc_0_12_AWSIZE, twiddle_h_rsc_0_12_AWLEN,
      twiddle_h_rsc_0_12_AWADDR, twiddle_h_rsc_0_12_AWID, twiddle_h_rsc_triosy_0_12_lz,
      twiddle_h_rsc_0_13_s_tdone, twiddle_h_rsc_0_13_tr_write_done, twiddle_h_rsc_0_13_RREADY,
      twiddle_h_rsc_0_13_RVALID, twiddle_h_rsc_0_13_RUSER, twiddle_h_rsc_0_13_RLAST,
      twiddle_h_rsc_0_13_RRESP, twiddle_h_rsc_0_13_RDATA, twiddle_h_rsc_0_13_RID,
      twiddle_h_rsc_0_13_ARREADY, twiddle_h_rsc_0_13_ARVALID, twiddle_h_rsc_0_13_ARUSER,
      twiddle_h_rsc_0_13_ARREGION, twiddle_h_rsc_0_13_ARQOS, twiddle_h_rsc_0_13_ARPROT,
      twiddle_h_rsc_0_13_ARCACHE, twiddle_h_rsc_0_13_ARLOCK, twiddle_h_rsc_0_13_ARBURST,
      twiddle_h_rsc_0_13_ARSIZE, twiddle_h_rsc_0_13_ARLEN, twiddle_h_rsc_0_13_ARADDR,
      twiddle_h_rsc_0_13_ARID, twiddle_h_rsc_0_13_BREADY, twiddle_h_rsc_0_13_BVALID,
      twiddle_h_rsc_0_13_BUSER, twiddle_h_rsc_0_13_BRESP, twiddle_h_rsc_0_13_BID,
      twiddle_h_rsc_0_13_WREADY, twiddle_h_rsc_0_13_WVALID, twiddle_h_rsc_0_13_WUSER,
      twiddle_h_rsc_0_13_WLAST, twiddle_h_rsc_0_13_WSTRB, twiddle_h_rsc_0_13_WDATA,
      twiddle_h_rsc_0_13_AWREADY, twiddle_h_rsc_0_13_AWVALID, twiddle_h_rsc_0_13_AWUSER,
      twiddle_h_rsc_0_13_AWREGION, twiddle_h_rsc_0_13_AWQOS, twiddle_h_rsc_0_13_AWPROT,
      twiddle_h_rsc_0_13_AWCACHE, twiddle_h_rsc_0_13_AWLOCK, twiddle_h_rsc_0_13_AWBURST,
      twiddle_h_rsc_0_13_AWSIZE, twiddle_h_rsc_0_13_AWLEN, twiddle_h_rsc_0_13_AWADDR,
      twiddle_h_rsc_0_13_AWID, twiddle_h_rsc_triosy_0_13_lz, twiddle_h_rsc_0_14_s_tdone,
      twiddle_h_rsc_0_14_tr_write_done, twiddle_h_rsc_0_14_RREADY, twiddle_h_rsc_0_14_RVALID,
      twiddle_h_rsc_0_14_RUSER, twiddle_h_rsc_0_14_RLAST, twiddle_h_rsc_0_14_RRESP,
      twiddle_h_rsc_0_14_RDATA, twiddle_h_rsc_0_14_RID, twiddle_h_rsc_0_14_ARREADY,
      twiddle_h_rsc_0_14_ARVALID, twiddle_h_rsc_0_14_ARUSER, twiddle_h_rsc_0_14_ARREGION,
      twiddle_h_rsc_0_14_ARQOS, twiddle_h_rsc_0_14_ARPROT, twiddle_h_rsc_0_14_ARCACHE,
      twiddle_h_rsc_0_14_ARLOCK, twiddle_h_rsc_0_14_ARBURST, twiddle_h_rsc_0_14_ARSIZE,
      twiddle_h_rsc_0_14_ARLEN, twiddle_h_rsc_0_14_ARADDR, twiddle_h_rsc_0_14_ARID,
      twiddle_h_rsc_0_14_BREADY, twiddle_h_rsc_0_14_BVALID, twiddle_h_rsc_0_14_BUSER,
      twiddle_h_rsc_0_14_BRESP, twiddle_h_rsc_0_14_BID, twiddle_h_rsc_0_14_WREADY,
      twiddle_h_rsc_0_14_WVALID, twiddle_h_rsc_0_14_WUSER, twiddle_h_rsc_0_14_WLAST,
      twiddle_h_rsc_0_14_WSTRB, twiddle_h_rsc_0_14_WDATA, twiddle_h_rsc_0_14_AWREADY,
      twiddle_h_rsc_0_14_AWVALID, twiddle_h_rsc_0_14_AWUSER, twiddle_h_rsc_0_14_AWREGION,
      twiddle_h_rsc_0_14_AWQOS, twiddle_h_rsc_0_14_AWPROT, twiddle_h_rsc_0_14_AWCACHE,
      twiddle_h_rsc_0_14_AWLOCK, twiddle_h_rsc_0_14_AWBURST, twiddle_h_rsc_0_14_AWSIZE,
      twiddle_h_rsc_0_14_AWLEN, twiddle_h_rsc_0_14_AWADDR, twiddle_h_rsc_0_14_AWID,
      twiddle_h_rsc_triosy_0_14_lz, twiddle_h_rsc_0_15_s_tdone, twiddle_h_rsc_0_15_tr_write_done,
      twiddle_h_rsc_0_15_RREADY, twiddle_h_rsc_0_15_RVALID, twiddle_h_rsc_0_15_RUSER,
      twiddle_h_rsc_0_15_RLAST, twiddle_h_rsc_0_15_RRESP, twiddle_h_rsc_0_15_RDATA,
      twiddle_h_rsc_0_15_RID, twiddle_h_rsc_0_15_ARREADY, twiddle_h_rsc_0_15_ARVALID,
      twiddle_h_rsc_0_15_ARUSER, twiddle_h_rsc_0_15_ARREGION, twiddle_h_rsc_0_15_ARQOS,
      twiddle_h_rsc_0_15_ARPROT, twiddle_h_rsc_0_15_ARCACHE, twiddle_h_rsc_0_15_ARLOCK,
      twiddle_h_rsc_0_15_ARBURST, twiddle_h_rsc_0_15_ARSIZE, twiddle_h_rsc_0_15_ARLEN,
      twiddle_h_rsc_0_15_ARADDR, twiddle_h_rsc_0_15_ARID, twiddle_h_rsc_0_15_BREADY,
      twiddle_h_rsc_0_15_BVALID, twiddle_h_rsc_0_15_BUSER, twiddle_h_rsc_0_15_BRESP,
      twiddle_h_rsc_0_15_BID, twiddle_h_rsc_0_15_WREADY, twiddle_h_rsc_0_15_WVALID,
      twiddle_h_rsc_0_15_WUSER, twiddle_h_rsc_0_15_WLAST, twiddle_h_rsc_0_15_WSTRB,
      twiddle_h_rsc_0_15_WDATA, twiddle_h_rsc_0_15_AWREADY, twiddle_h_rsc_0_15_AWVALID,
      twiddle_h_rsc_0_15_AWUSER, twiddle_h_rsc_0_15_AWREGION, twiddle_h_rsc_0_15_AWQOS,
      twiddle_h_rsc_0_15_AWPROT, twiddle_h_rsc_0_15_AWCACHE, twiddle_h_rsc_0_15_AWLOCK,
      twiddle_h_rsc_0_15_AWBURST, twiddle_h_rsc_0_15_AWSIZE, twiddle_h_rsc_0_15_AWLEN,
      twiddle_h_rsc_0_15_AWADDR, twiddle_h_rsc_0_15_AWID, twiddle_h_rsc_triosy_0_15_lz,
      yt_rsc_0_0_i_clken_d, yt_rsc_0_0_i_qa_d, yt_rsc_0_1_i_qa_d, yt_rsc_0_2_i_qa_d,
      yt_rsc_0_3_i_qa_d, yt_rsc_0_4_i_qa_d, yt_rsc_0_5_i_qa_d, yt_rsc_0_6_i_qa_d,
      yt_rsc_0_7_i_qa_d, yt_rsc_0_8_i_qa_d, yt_rsc_0_9_i_qa_d, yt_rsc_0_10_i_qa_d,
      yt_rsc_0_11_i_qa_d, yt_rsc_0_12_i_qa_d, yt_rsc_0_13_i_qa_d, yt_rsc_0_14_i_qa_d,
      yt_rsc_0_15_i_qa_d, yt_rsc_0_16_i_clken_d, yt_rsc_0_16_i_qa_d, yt_rsc_0_17_i_qa_d,
      yt_rsc_0_18_i_qa_d, yt_rsc_0_19_i_qa_d, yt_rsc_0_20_i_qa_d, yt_rsc_0_21_i_qa_d,
      yt_rsc_0_22_i_qa_d, yt_rsc_0_23_i_qa_d, yt_rsc_0_24_i_qa_d, yt_rsc_0_25_i_qa_d,
      yt_rsc_0_26_i_qa_d, yt_rsc_0_27_i_qa_d, yt_rsc_0_28_i_qa_d, yt_rsc_0_29_i_qa_d,
      yt_rsc_0_30_i_qa_d, yt_rsc_0_31_i_qa_d, yt_rsc_1_0_i_clken_d, yt_rsc_1_0_i_da_d,
      yt_rsc_1_0_i_qa_d, yt_rsc_1_1_i_da_d, yt_rsc_1_1_i_qa_d, yt_rsc_1_2_i_da_d,
      yt_rsc_1_2_i_qa_d, yt_rsc_1_3_i_da_d, yt_rsc_1_3_i_qa_d, yt_rsc_1_4_i_da_d,
      yt_rsc_1_4_i_qa_d, yt_rsc_1_5_i_da_d, yt_rsc_1_5_i_qa_d, yt_rsc_1_6_i_da_d,
      yt_rsc_1_6_i_qa_d, yt_rsc_1_7_i_da_d, yt_rsc_1_7_i_qa_d, yt_rsc_1_8_i_da_d,
      yt_rsc_1_8_i_qa_d, yt_rsc_1_9_i_da_d, yt_rsc_1_9_i_qa_d, yt_rsc_1_10_i_da_d,
      yt_rsc_1_10_i_qa_d, yt_rsc_1_11_i_da_d, yt_rsc_1_11_i_qa_d, yt_rsc_1_12_i_da_d,
      yt_rsc_1_12_i_qa_d, yt_rsc_1_13_i_da_d, yt_rsc_1_13_i_qa_d, yt_rsc_1_14_i_da_d,
      yt_rsc_1_14_i_qa_d, yt_rsc_1_15_i_da_d, yt_rsc_1_15_i_qa_d, yt_rsc_1_16_i_clken_d,
      yt_rsc_1_16_i_da_d, yt_rsc_1_16_i_qa_d, yt_rsc_1_17_i_da_d, yt_rsc_1_17_i_qa_d,
      yt_rsc_1_18_i_da_d, yt_rsc_1_18_i_qa_d, yt_rsc_1_19_i_da_d, yt_rsc_1_19_i_qa_d,
      yt_rsc_1_20_i_da_d, yt_rsc_1_20_i_qa_d, yt_rsc_1_21_i_da_d, yt_rsc_1_21_i_qa_d,
      yt_rsc_1_22_i_da_d, yt_rsc_1_22_i_qa_d, yt_rsc_1_23_i_da_d, yt_rsc_1_23_i_qa_d,
      yt_rsc_1_24_i_da_d, yt_rsc_1_24_i_qa_d, yt_rsc_1_25_i_da_d, yt_rsc_1_25_i_qa_d,
      yt_rsc_1_26_i_da_d, yt_rsc_1_26_i_qa_d, yt_rsc_1_27_i_da_d, yt_rsc_1_27_i_qa_d,
      yt_rsc_1_28_i_da_d, yt_rsc_1_28_i_qa_d, yt_rsc_1_29_i_da_d, yt_rsc_1_29_i_qa_d,
      yt_rsc_1_30_i_da_d, yt_rsc_1_30_i_qa_d, yt_rsc_1_31_i_da_d, yt_rsc_1_31_i_qa_d,
      xt_rsc_0_0_i_qa_d, xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_1_i_qa_d,
      xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_2_i_qa_d, xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_3_i_qa_d, xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_4_i_qa_d,
      xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_5_i_qa_d, xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_6_i_qa_d, xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_7_i_qa_d,
      xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_8_i_qa_d, xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_9_i_qa_d, xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_10_i_qa_d,
      xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_11_i_qa_d, xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_12_i_qa_d, xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_13_i_qa_d,
      xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_14_i_qa_d, xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_15_i_qa_d, xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_16_i_qa_d,
      xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_17_i_qa_d, xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_18_i_qa_d, xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_19_i_qa_d,
      xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_20_i_qa_d, xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_21_i_qa_d, xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_22_i_qa_d,
      xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_23_i_qa_d, xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_24_i_qa_d, xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_25_i_qa_d,
      xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_26_i_qa_d, xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_27_i_qa_d, xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_28_i_qa_d,
      xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_29_i_qa_d, xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_30_i_qa_d, xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_0_31_i_qa_d,
      xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_0_i_qa_d, xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_1_i_qa_d, xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_2_i_qa_d,
      xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_3_i_qa_d, xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_4_i_qa_d, xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_5_i_qa_d,
      xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_6_i_qa_d, xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_7_i_qa_d, xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_8_i_qa_d,
      xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_9_i_qa_d, xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_10_i_qa_d, xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_11_i_qa_d,
      xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_12_i_qa_d, xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_13_i_qa_d, xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_14_i_qa_d,
      xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_15_i_qa_d, xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_16_i_qa_d, xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_17_i_qa_d,
      xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_18_i_qa_d, xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_19_i_qa_d, xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_20_i_qa_d,
      xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_21_i_qa_d, xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_22_i_qa_d, xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_23_i_qa_d,
      xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_24_i_qa_d, xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_25_i_qa_d, xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_26_i_qa_d,
      xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_27_i_qa_d, xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_28_i_qa_d, xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_29_i_qa_d,
      xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d, xt_rsc_1_30_i_qa_d, xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      xt_rsc_1_31_i_qa_d, xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d, yt_rsc_0_0_i_adra_d_pff,
      yt_rsc_0_0_i_da_d_pff, yt_rsc_0_0_i_wea_d_pff, yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff,
      yt_rsc_0_1_i_da_d_pff, yt_rsc_0_2_i_da_d_pff, yt_rsc_0_3_i_da_d_pff, yt_rsc_0_4_i_da_d_pff,
      yt_rsc_0_5_i_da_d_pff, yt_rsc_0_6_i_da_d_pff, yt_rsc_0_7_i_da_d_pff, yt_rsc_0_8_i_da_d_pff,
      yt_rsc_0_9_i_da_d_pff, yt_rsc_0_10_i_da_d_pff, yt_rsc_0_11_i_da_d_pff, yt_rsc_0_12_i_da_d_pff,
      yt_rsc_0_13_i_da_d_pff, yt_rsc_0_14_i_da_d_pff, yt_rsc_0_15_i_da_d_pff, yt_rsc_0_16_i_adra_d_pff,
      yt_rsc_0_16_i_wea_d_pff, yt_rsc_1_0_i_adra_d_pff, yt_rsc_1_0_i_wea_d_pff, yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff,
      yt_rsc_1_16_i_adra_d_pff, yt_rsc_1_16_i_wea_d_pff, xt_rsc_0_0_i_adra_d_pff,
      xt_rsc_0_0_i_da_d_pff, xt_rsc_0_0_i_wea_d_pff, xt_rsc_0_1_i_da_d_pff, xt_rsc_0_1_i_wea_d_pff,
      xt_rsc_0_2_i_da_d_pff, xt_rsc_0_2_i_wea_d_pff, xt_rsc_0_3_i_da_d_pff, xt_rsc_0_3_i_wea_d_pff,
      xt_rsc_0_4_i_da_d_pff, xt_rsc_0_4_i_wea_d_pff, xt_rsc_0_5_i_da_d_pff, xt_rsc_0_5_i_wea_d_pff,
      xt_rsc_0_6_i_da_d_pff, xt_rsc_0_6_i_wea_d_pff, xt_rsc_0_7_i_da_d_pff, xt_rsc_0_7_i_wea_d_pff,
      xt_rsc_0_8_i_da_d_pff, xt_rsc_0_8_i_wea_d_pff, xt_rsc_0_9_i_da_d_pff, xt_rsc_0_9_i_wea_d_pff,
      xt_rsc_0_10_i_da_d_pff, xt_rsc_0_10_i_wea_d_pff, xt_rsc_0_11_i_da_d_pff, xt_rsc_0_11_i_wea_d_pff,
      xt_rsc_0_12_i_da_d_pff, xt_rsc_0_12_i_wea_d_pff, xt_rsc_0_13_i_da_d_pff, xt_rsc_0_13_i_wea_d_pff,
      xt_rsc_0_14_i_da_d_pff, xt_rsc_0_14_i_wea_d_pff, xt_rsc_0_15_i_da_d_pff, xt_rsc_0_15_i_wea_d_pff,
      xt_rsc_0_16_i_adra_d_pff, xt_rsc_0_16_i_wea_d_pff, xt_rsc_0_17_i_wea_d_pff,
      xt_rsc_0_18_i_wea_d_pff, xt_rsc_0_19_i_wea_d_pff, xt_rsc_0_20_i_wea_d_pff,
      xt_rsc_0_21_i_wea_d_pff, xt_rsc_0_22_i_wea_d_pff, xt_rsc_0_23_i_wea_d_pff,
      xt_rsc_0_24_i_wea_d_pff, xt_rsc_0_25_i_wea_d_pff, xt_rsc_0_26_i_wea_d_pff,
      xt_rsc_0_27_i_wea_d_pff, xt_rsc_0_28_i_wea_d_pff, xt_rsc_0_29_i_wea_d_pff,
      xt_rsc_0_30_i_wea_d_pff, xt_rsc_0_31_i_wea_d_pff, xt_rsc_1_0_i_da_d_pff, xt_rsc_1_0_i_wea_d_pff,
      xt_rsc_1_1_i_da_d_pff, xt_rsc_1_1_i_wea_d_pff, xt_rsc_1_2_i_da_d_pff, xt_rsc_1_2_i_wea_d_pff,
      xt_rsc_1_3_i_da_d_pff, xt_rsc_1_3_i_wea_d_pff, xt_rsc_1_4_i_da_d_pff, xt_rsc_1_4_i_wea_d_pff,
      xt_rsc_1_5_i_da_d_pff, xt_rsc_1_5_i_wea_d_pff, xt_rsc_1_6_i_da_d_pff, xt_rsc_1_6_i_wea_d_pff,
      xt_rsc_1_7_i_da_d_pff, xt_rsc_1_7_i_wea_d_pff, xt_rsc_1_8_i_da_d_pff, xt_rsc_1_8_i_wea_d_pff,
      xt_rsc_1_9_i_da_d_pff, xt_rsc_1_9_i_wea_d_pff, xt_rsc_1_10_i_da_d_pff, xt_rsc_1_10_i_wea_d_pff,
      xt_rsc_1_11_i_da_d_pff, xt_rsc_1_11_i_wea_d_pff, xt_rsc_1_12_i_da_d_pff, xt_rsc_1_12_i_wea_d_pff,
      xt_rsc_1_13_i_da_d_pff, xt_rsc_1_13_i_wea_d_pff, xt_rsc_1_14_i_da_d_pff, xt_rsc_1_14_i_wea_d_pff,
      xt_rsc_1_15_i_da_d_pff, xt_rsc_1_15_i_wea_d_pff, xt_rsc_1_16_i_wea_d_pff, xt_rsc_1_17_i_wea_d_pff,
      xt_rsc_1_18_i_wea_d_pff, xt_rsc_1_19_i_wea_d_pff, xt_rsc_1_20_i_wea_d_pff,
      xt_rsc_1_21_i_wea_d_pff, xt_rsc_1_22_i_wea_d_pff, xt_rsc_1_23_i_wea_d_pff,
      xt_rsc_1_24_i_wea_d_pff, xt_rsc_1_25_i_wea_d_pff, xt_rsc_1_26_i_wea_d_pff,
      xt_rsc_1_27_i_wea_d_pff, xt_rsc_1_28_i_wea_d_pff, xt_rsc_1_29_i_wea_d_pff,
      xt_rsc_1_30_i_wea_d_pff, xt_rsc_1_31_i_wea_d_pff
);
  input clk;
  input rst;
  output xt_rsc_triosy_0_0_lz;
  output xt_rsc_triosy_0_1_lz;
  output xt_rsc_triosy_0_2_lz;
  output xt_rsc_triosy_0_3_lz;
  output xt_rsc_triosy_0_4_lz;
  output xt_rsc_triosy_0_5_lz;
  output xt_rsc_triosy_0_6_lz;
  output xt_rsc_triosy_0_7_lz;
  output xt_rsc_triosy_0_8_lz;
  output xt_rsc_triosy_0_9_lz;
  output xt_rsc_triosy_0_10_lz;
  output xt_rsc_triosy_0_11_lz;
  output xt_rsc_triosy_0_12_lz;
  output xt_rsc_triosy_0_13_lz;
  output xt_rsc_triosy_0_14_lz;
  output xt_rsc_triosy_0_15_lz;
  output xt_rsc_triosy_0_16_lz;
  output xt_rsc_triosy_0_17_lz;
  output xt_rsc_triosy_0_18_lz;
  output xt_rsc_triosy_0_19_lz;
  output xt_rsc_triosy_0_20_lz;
  output xt_rsc_triosy_0_21_lz;
  output xt_rsc_triosy_0_22_lz;
  output xt_rsc_triosy_0_23_lz;
  output xt_rsc_triosy_0_24_lz;
  output xt_rsc_triosy_0_25_lz;
  output xt_rsc_triosy_0_26_lz;
  output xt_rsc_triosy_0_27_lz;
  output xt_rsc_triosy_0_28_lz;
  output xt_rsc_triosy_0_29_lz;
  output xt_rsc_triosy_0_30_lz;
  output xt_rsc_triosy_0_31_lz;
  output xt_rsc_triosy_1_0_lz;
  output xt_rsc_triosy_1_1_lz;
  output xt_rsc_triosy_1_2_lz;
  output xt_rsc_triosy_1_3_lz;
  output xt_rsc_triosy_1_4_lz;
  output xt_rsc_triosy_1_5_lz;
  output xt_rsc_triosy_1_6_lz;
  output xt_rsc_triosy_1_7_lz;
  output xt_rsc_triosy_1_8_lz;
  output xt_rsc_triosy_1_9_lz;
  output xt_rsc_triosy_1_10_lz;
  output xt_rsc_triosy_1_11_lz;
  output xt_rsc_triosy_1_12_lz;
  output xt_rsc_triosy_1_13_lz;
  output xt_rsc_triosy_1_14_lz;
  output xt_rsc_triosy_1_15_lz;
  output xt_rsc_triosy_1_16_lz;
  output xt_rsc_triosy_1_17_lz;
  output xt_rsc_triosy_1_18_lz;
  output xt_rsc_triosy_1_19_lz;
  output xt_rsc_triosy_1_20_lz;
  output xt_rsc_triosy_1_21_lz;
  output xt_rsc_triosy_1_22_lz;
  output xt_rsc_triosy_1_23_lz;
  output xt_rsc_triosy_1_24_lz;
  output xt_rsc_triosy_1_25_lz;
  output xt_rsc_triosy_1_26_lz;
  output xt_rsc_triosy_1_27_lz;
  output xt_rsc_triosy_1_28_lz;
  output xt_rsc_triosy_1_29_lz;
  output xt_rsc_triosy_1_30_lz;
  output xt_rsc_triosy_1_31_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  input twiddle_rsc_0_0_s_tdone;
  input twiddle_rsc_0_0_tr_write_done;
  input twiddle_rsc_0_0_RREADY;
  output twiddle_rsc_0_0_RVALID;
  output twiddle_rsc_0_0_RUSER;
  output twiddle_rsc_0_0_RLAST;
  output [1:0] twiddle_rsc_0_0_RRESP;
  output [31:0] twiddle_rsc_0_0_RDATA;
  output twiddle_rsc_0_0_RID;
  output twiddle_rsc_0_0_ARREADY;
  input twiddle_rsc_0_0_ARVALID;
  input twiddle_rsc_0_0_ARUSER;
  input [3:0] twiddle_rsc_0_0_ARREGION;
  input [3:0] twiddle_rsc_0_0_ARQOS;
  input [2:0] twiddle_rsc_0_0_ARPROT;
  input [3:0] twiddle_rsc_0_0_ARCACHE;
  input twiddle_rsc_0_0_ARLOCK;
  input [1:0] twiddle_rsc_0_0_ARBURST;
  input [2:0] twiddle_rsc_0_0_ARSIZE;
  input [7:0] twiddle_rsc_0_0_ARLEN;
  input [11:0] twiddle_rsc_0_0_ARADDR;
  input twiddle_rsc_0_0_ARID;
  input twiddle_rsc_0_0_BREADY;
  output twiddle_rsc_0_0_BVALID;
  output twiddle_rsc_0_0_BUSER;
  output [1:0] twiddle_rsc_0_0_BRESP;
  output twiddle_rsc_0_0_BID;
  output twiddle_rsc_0_0_WREADY;
  input twiddle_rsc_0_0_WVALID;
  input twiddle_rsc_0_0_WUSER;
  input twiddle_rsc_0_0_WLAST;
  input [3:0] twiddle_rsc_0_0_WSTRB;
  input [31:0] twiddle_rsc_0_0_WDATA;
  output twiddle_rsc_0_0_AWREADY;
  input twiddle_rsc_0_0_AWVALID;
  input twiddle_rsc_0_0_AWUSER;
  input [3:0] twiddle_rsc_0_0_AWREGION;
  input [3:0] twiddle_rsc_0_0_AWQOS;
  input [2:0] twiddle_rsc_0_0_AWPROT;
  input [3:0] twiddle_rsc_0_0_AWCACHE;
  input twiddle_rsc_0_0_AWLOCK;
  input [1:0] twiddle_rsc_0_0_AWBURST;
  input [2:0] twiddle_rsc_0_0_AWSIZE;
  input [7:0] twiddle_rsc_0_0_AWLEN;
  input [11:0] twiddle_rsc_0_0_AWADDR;
  input twiddle_rsc_0_0_AWID;
  output twiddle_rsc_triosy_0_0_lz;
  input twiddle_rsc_0_1_s_tdone;
  input twiddle_rsc_0_1_tr_write_done;
  input twiddle_rsc_0_1_RREADY;
  output twiddle_rsc_0_1_RVALID;
  output twiddle_rsc_0_1_RUSER;
  output twiddle_rsc_0_1_RLAST;
  output [1:0] twiddle_rsc_0_1_RRESP;
  output [31:0] twiddle_rsc_0_1_RDATA;
  output twiddle_rsc_0_1_RID;
  output twiddle_rsc_0_1_ARREADY;
  input twiddle_rsc_0_1_ARVALID;
  input twiddle_rsc_0_1_ARUSER;
  input [3:0] twiddle_rsc_0_1_ARREGION;
  input [3:0] twiddle_rsc_0_1_ARQOS;
  input [2:0] twiddle_rsc_0_1_ARPROT;
  input [3:0] twiddle_rsc_0_1_ARCACHE;
  input twiddle_rsc_0_1_ARLOCK;
  input [1:0] twiddle_rsc_0_1_ARBURST;
  input [2:0] twiddle_rsc_0_1_ARSIZE;
  input [7:0] twiddle_rsc_0_1_ARLEN;
  input [11:0] twiddle_rsc_0_1_ARADDR;
  input twiddle_rsc_0_1_ARID;
  input twiddle_rsc_0_1_BREADY;
  output twiddle_rsc_0_1_BVALID;
  output twiddle_rsc_0_1_BUSER;
  output [1:0] twiddle_rsc_0_1_BRESP;
  output twiddle_rsc_0_1_BID;
  output twiddle_rsc_0_1_WREADY;
  input twiddle_rsc_0_1_WVALID;
  input twiddle_rsc_0_1_WUSER;
  input twiddle_rsc_0_1_WLAST;
  input [3:0] twiddle_rsc_0_1_WSTRB;
  input [31:0] twiddle_rsc_0_1_WDATA;
  output twiddle_rsc_0_1_AWREADY;
  input twiddle_rsc_0_1_AWVALID;
  input twiddle_rsc_0_1_AWUSER;
  input [3:0] twiddle_rsc_0_1_AWREGION;
  input [3:0] twiddle_rsc_0_1_AWQOS;
  input [2:0] twiddle_rsc_0_1_AWPROT;
  input [3:0] twiddle_rsc_0_1_AWCACHE;
  input twiddle_rsc_0_1_AWLOCK;
  input [1:0] twiddle_rsc_0_1_AWBURST;
  input [2:0] twiddle_rsc_0_1_AWSIZE;
  input [7:0] twiddle_rsc_0_1_AWLEN;
  input [11:0] twiddle_rsc_0_1_AWADDR;
  input twiddle_rsc_0_1_AWID;
  output twiddle_rsc_triosy_0_1_lz;
  input twiddle_rsc_0_2_s_tdone;
  input twiddle_rsc_0_2_tr_write_done;
  input twiddle_rsc_0_2_RREADY;
  output twiddle_rsc_0_2_RVALID;
  output twiddle_rsc_0_2_RUSER;
  output twiddle_rsc_0_2_RLAST;
  output [1:0] twiddle_rsc_0_2_RRESP;
  output [31:0] twiddle_rsc_0_2_RDATA;
  output twiddle_rsc_0_2_RID;
  output twiddle_rsc_0_2_ARREADY;
  input twiddle_rsc_0_2_ARVALID;
  input twiddle_rsc_0_2_ARUSER;
  input [3:0] twiddle_rsc_0_2_ARREGION;
  input [3:0] twiddle_rsc_0_2_ARQOS;
  input [2:0] twiddle_rsc_0_2_ARPROT;
  input [3:0] twiddle_rsc_0_2_ARCACHE;
  input twiddle_rsc_0_2_ARLOCK;
  input [1:0] twiddle_rsc_0_2_ARBURST;
  input [2:0] twiddle_rsc_0_2_ARSIZE;
  input [7:0] twiddle_rsc_0_2_ARLEN;
  input [11:0] twiddle_rsc_0_2_ARADDR;
  input twiddle_rsc_0_2_ARID;
  input twiddle_rsc_0_2_BREADY;
  output twiddle_rsc_0_2_BVALID;
  output twiddle_rsc_0_2_BUSER;
  output [1:0] twiddle_rsc_0_2_BRESP;
  output twiddle_rsc_0_2_BID;
  output twiddle_rsc_0_2_WREADY;
  input twiddle_rsc_0_2_WVALID;
  input twiddle_rsc_0_2_WUSER;
  input twiddle_rsc_0_2_WLAST;
  input [3:0] twiddle_rsc_0_2_WSTRB;
  input [31:0] twiddle_rsc_0_2_WDATA;
  output twiddle_rsc_0_2_AWREADY;
  input twiddle_rsc_0_2_AWVALID;
  input twiddle_rsc_0_2_AWUSER;
  input [3:0] twiddle_rsc_0_2_AWREGION;
  input [3:0] twiddle_rsc_0_2_AWQOS;
  input [2:0] twiddle_rsc_0_2_AWPROT;
  input [3:0] twiddle_rsc_0_2_AWCACHE;
  input twiddle_rsc_0_2_AWLOCK;
  input [1:0] twiddle_rsc_0_2_AWBURST;
  input [2:0] twiddle_rsc_0_2_AWSIZE;
  input [7:0] twiddle_rsc_0_2_AWLEN;
  input [11:0] twiddle_rsc_0_2_AWADDR;
  input twiddle_rsc_0_2_AWID;
  output twiddle_rsc_triosy_0_2_lz;
  input twiddle_rsc_0_3_s_tdone;
  input twiddle_rsc_0_3_tr_write_done;
  input twiddle_rsc_0_3_RREADY;
  output twiddle_rsc_0_3_RVALID;
  output twiddle_rsc_0_3_RUSER;
  output twiddle_rsc_0_3_RLAST;
  output [1:0] twiddle_rsc_0_3_RRESP;
  output [31:0] twiddle_rsc_0_3_RDATA;
  output twiddle_rsc_0_3_RID;
  output twiddle_rsc_0_3_ARREADY;
  input twiddle_rsc_0_3_ARVALID;
  input twiddle_rsc_0_3_ARUSER;
  input [3:0] twiddle_rsc_0_3_ARREGION;
  input [3:0] twiddle_rsc_0_3_ARQOS;
  input [2:0] twiddle_rsc_0_3_ARPROT;
  input [3:0] twiddle_rsc_0_3_ARCACHE;
  input twiddle_rsc_0_3_ARLOCK;
  input [1:0] twiddle_rsc_0_3_ARBURST;
  input [2:0] twiddle_rsc_0_3_ARSIZE;
  input [7:0] twiddle_rsc_0_3_ARLEN;
  input [11:0] twiddle_rsc_0_3_ARADDR;
  input twiddle_rsc_0_3_ARID;
  input twiddle_rsc_0_3_BREADY;
  output twiddle_rsc_0_3_BVALID;
  output twiddle_rsc_0_3_BUSER;
  output [1:0] twiddle_rsc_0_3_BRESP;
  output twiddle_rsc_0_3_BID;
  output twiddle_rsc_0_3_WREADY;
  input twiddle_rsc_0_3_WVALID;
  input twiddle_rsc_0_3_WUSER;
  input twiddle_rsc_0_3_WLAST;
  input [3:0] twiddle_rsc_0_3_WSTRB;
  input [31:0] twiddle_rsc_0_3_WDATA;
  output twiddle_rsc_0_3_AWREADY;
  input twiddle_rsc_0_3_AWVALID;
  input twiddle_rsc_0_3_AWUSER;
  input [3:0] twiddle_rsc_0_3_AWREGION;
  input [3:0] twiddle_rsc_0_3_AWQOS;
  input [2:0] twiddle_rsc_0_3_AWPROT;
  input [3:0] twiddle_rsc_0_3_AWCACHE;
  input twiddle_rsc_0_3_AWLOCK;
  input [1:0] twiddle_rsc_0_3_AWBURST;
  input [2:0] twiddle_rsc_0_3_AWSIZE;
  input [7:0] twiddle_rsc_0_3_AWLEN;
  input [11:0] twiddle_rsc_0_3_AWADDR;
  input twiddle_rsc_0_3_AWID;
  output twiddle_rsc_triosy_0_3_lz;
  input twiddle_rsc_0_4_s_tdone;
  input twiddle_rsc_0_4_tr_write_done;
  input twiddle_rsc_0_4_RREADY;
  output twiddle_rsc_0_4_RVALID;
  output twiddle_rsc_0_4_RUSER;
  output twiddle_rsc_0_4_RLAST;
  output [1:0] twiddle_rsc_0_4_RRESP;
  output [31:0] twiddle_rsc_0_4_RDATA;
  output twiddle_rsc_0_4_RID;
  output twiddle_rsc_0_4_ARREADY;
  input twiddle_rsc_0_4_ARVALID;
  input twiddle_rsc_0_4_ARUSER;
  input [3:0] twiddle_rsc_0_4_ARREGION;
  input [3:0] twiddle_rsc_0_4_ARQOS;
  input [2:0] twiddle_rsc_0_4_ARPROT;
  input [3:0] twiddle_rsc_0_4_ARCACHE;
  input twiddle_rsc_0_4_ARLOCK;
  input [1:0] twiddle_rsc_0_4_ARBURST;
  input [2:0] twiddle_rsc_0_4_ARSIZE;
  input [7:0] twiddle_rsc_0_4_ARLEN;
  input [11:0] twiddle_rsc_0_4_ARADDR;
  input twiddle_rsc_0_4_ARID;
  input twiddle_rsc_0_4_BREADY;
  output twiddle_rsc_0_4_BVALID;
  output twiddle_rsc_0_4_BUSER;
  output [1:0] twiddle_rsc_0_4_BRESP;
  output twiddle_rsc_0_4_BID;
  output twiddle_rsc_0_4_WREADY;
  input twiddle_rsc_0_4_WVALID;
  input twiddle_rsc_0_4_WUSER;
  input twiddle_rsc_0_4_WLAST;
  input [3:0] twiddle_rsc_0_4_WSTRB;
  input [31:0] twiddle_rsc_0_4_WDATA;
  output twiddle_rsc_0_4_AWREADY;
  input twiddle_rsc_0_4_AWVALID;
  input twiddle_rsc_0_4_AWUSER;
  input [3:0] twiddle_rsc_0_4_AWREGION;
  input [3:0] twiddle_rsc_0_4_AWQOS;
  input [2:0] twiddle_rsc_0_4_AWPROT;
  input [3:0] twiddle_rsc_0_4_AWCACHE;
  input twiddle_rsc_0_4_AWLOCK;
  input [1:0] twiddle_rsc_0_4_AWBURST;
  input [2:0] twiddle_rsc_0_4_AWSIZE;
  input [7:0] twiddle_rsc_0_4_AWLEN;
  input [11:0] twiddle_rsc_0_4_AWADDR;
  input twiddle_rsc_0_4_AWID;
  output twiddle_rsc_triosy_0_4_lz;
  input twiddle_rsc_0_5_s_tdone;
  input twiddle_rsc_0_5_tr_write_done;
  input twiddle_rsc_0_5_RREADY;
  output twiddle_rsc_0_5_RVALID;
  output twiddle_rsc_0_5_RUSER;
  output twiddle_rsc_0_5_RLAST;
  output [1:0] twiddle_rsc_0_5_RRESP;
  output [31:0] twiddle_rsc_0_5_RDATA;
  output twiddle_rsc_0_5_RID;
  output twiddle_rsc_0_5_ARREADY;
  input twiddle_rsc_0_5_ARVALID;
  input twiddle_rsc_0_5_ARUSER;
  input [3:0] twiddle_rsc_0_5_ARREGION;
  input [3:0] twiddle_rsc_0_5_ARQOS;
  input [2:0] twiddle_rsc_0_5_ARPROT;
  input [3:0] twiddle_rsc_0_5_ARCACHE;
  input twiddle_rsc_0_5_ARLOCK;
  input [1:0] twiddle_rsc_0_5_ARBURST;
  input [2:0] twiddle_rsc_0_5_ARSIZE;
  input [7:0] twiddle_rsc_0_5_ARLEN;
  input [11:0] twiddle_rsc_0_5_ARADDR;
  input twiddle_rsc_0_5_ARID;
  input twiddle_rsc_0_5_BREADY;
  output twiddle_rsc_0_5_BVALID;
  output twiddle_rsc_0_5_BUSER;
  output [1:0] twiddle_rsc_0_5_BRESP;
  output twiddle_rsc_0_5_BID;
  output twiddle_rsc_0_5_WREADY;
  input twiddle_rsc_0_5_WVALID;
  input twiddle_rsc_0_5_WUSER;
  input twiddle_rsc_0_5_WLAST;
  input [3:0] twiddle_rsc_0_5_WSTRB;
  input [31:0] twiddle_rsc_0_5_WDATA;
  output twiddle_rsc_0_5_AWREADY;
  input twiddle_rsc_0_5_AWVALID;
  input twiddle_rsc_0_5_AWUSER;
  input [3:0] twiddle_rsc_0_5_AWREGION;
  input [3:0] twiddle_rsc_0_5_AWQOS;
  input [2:0] twiddle_rsc_0_5_AWPROT;
  input [3:0] twiddle_rsc_0_5_AWCACHE;
  input twiddle_rsc_0_5_AWLOCK;
  input [1:0] twiddle_rsc_0_5_AWBURST;
  input [2:0] twiddle_rsc_0_5_AWSIZE;
  input [7:0] twiddle_rsc_0_5_AWLEN;
  input [11:0] twiddle_rsc_0_5_AWADDR;
  input twiddle_rsc_0_5_AWID;
  output twiddle_rsc_triosy_0_5_lz;
  input twiddle_rsc_0_6_s_tdone;
  input twiddle_rsc_0_6_tr_write_done;
  input twiddle_rsc_0_6_RREADY;
  output twiddle_rsc_0_6_RVALID;
  output twiddle_rsc_0_6_RUSER;
  output twiddle_rsc_0_6_RLAST;
  output [1:0] twiddle_rsc_0_6_RRESP;
  output [31:0] twiddle_rsc_0_6_RDATA;
  output twiddle_rsc_0_6_RID;
  output twiddle_rsc_0_6_ARREADY;
  input twiddle_rsc_0_6_ARVALID;
  input twiddle_rsc_0_6_ARUSER;
  input [3:0] twiddle_rsc_0_6_ARREGION;
  input [3:0] twiddle_rsc_0_6_ARQOS;
  input [2:0] twiddle_rsc_0_6_ARPROT;
  input [3:0] twiddle_rsc_0_6_ARCACHE;
  input twiddle_rsc_0_6_ARLOCK;
  input [1:0] twiddle_rsc_0_6_ARBURST;
  input [2:0] twiddle_rsc_0_6_ARSIZE;
  input [7:0] twiddle_rsc_0_6_ARLEN;
  input [11:0] twiddle_rsc_0_6_ARADDR;
  input twiddle_rsc_0_6_ARID;
  input twiddle_rsc_0_6_BREADY;
  output twiddle_rsc_0_6_BVALID;
  output twiddle_rsc_0_6_BUSER;
  output [1:0] twiddle_rsc_0_6_BRESP;
  output twiddle_rsc_0_6_BID;
  output twiddle_rsc_0_6_WREADY;
  input twiddle_rsc_0_6_WVALID;
  input twiddle_rsc_0_6_WUSER;
  input twiddle_rsc_0_6_WLAST;
  input [3:0] twiddle_rsc_0_6_WSTRB;
  input [31:0] twiddle_rsc_0_6_WDATA;
  output twiddle_rsc_0_6_AWREADY;
  input twiddle_rsc_0_6_AWVALID;
  input twiddle_rsc_0_6_AWUSER;
  input [3:0] twiddle_rsc_0_6_AWREGION;
  input [3:0] twiddle_rsc_0_6_AWQOS;
  input [2:0] twiddle_rsc_0_6_AWPROT;
  input [3:0] twiddle_rsc_0_6_AWCACHE;
  input twiddle_rsc_0_6_AWLOCK;
  input [1:0] twiddle_rsc_0_6_AWBURST;
  input [2:0] twiddle_rsc_0_6_AWSIZE;
  input [7:0] twiddle_rsc_0_6_AWLEN;
  input [11:0] twiddle_rsc_0_6_AWADDR;
  input twiddle_rsc_0_6_AWID;
  output twiddle_rsc_triosy_0_6_lz;
  input twiddle_rsc_0_7_s_tdone;
  input twiddle_rsc_0_7_tr_write_done;
  input twiddle_rsc_0_7_RREADY;
  output twiddle_rsc_0_7_RVALID;
  output twiddle_rsc_0_7_RUSER;
  output twiddle_rsc_0_7_RLAST;
  output [1:0] twiddle_rsc_0_7_RRESP;
  output [31:0] twiddle_rsc_0_7_RDATA;
  output twiddle_rsc_0_7_RID;
  output twiddle_rsc_0_7_ARREADY;
  input twiddle_rsc_0_7_ARVALID;
  input twiddle_rsc_0_7_ARUSER;
  input [3:0] twiddle_rsc_0_7_ARREGION;
  input [3:0] twiddle_rsc_0_7_ARQOS;
  input [2:0] twiddle_rsc_0_7_ARPROT;
  input [3:0] twiddle_rsc_0_7_ARCACHE;
  input twiddle_rsc_0_7_ARLOCK;
  input [1:0] twiddle_rsc_0_7_ARBURST;
  input [2:0] twiddle_rsc_0_7_ARSIZE;
  input [7:0] twiddle_rsc_0_7_ARLEN;
  input [11:0] twiddle_rsc_0_7_ARADDR;
  input twiddle_rsc_0_7_ARID;
  input twiddle_rsc_0_7_BREADY;
  output twiddle_rsc_0_7_BVALID;
  output twiddle_rsc_0_7_BUSER;
  output [1:0] twiddle_rsc_0_7_BRESP;
  output twiddle_rsc_0_7_BID;
  output twiddle_rsc_0_7_WREADY;
  input twiddle_rsc_0_7_WVALID;
  input twiddle_rsc_0_7_WUSER;
  input twiddle_rsc_0_7_WLAST;
  input [3:0] twiddle_rsc_0_7_WSTRB;
  input [31:0] twiddle_rsc_0_7_WDATA;
  output twiddle_rsc_0_7_AWREADY;
  input twiddle_rsc_0_7_AWVALID;
  input twiddle_rsc_0_7_AWUSER;
  input [3:0] twiddle_rsc_0_7_AWREGION;
  input [3:0] twiddle_rsc_0_7_AWQOS;
  input [2:0] twiddle_rsc_0_7_AWPROT;
  input [3:0] twiddle_rsc_0_7_AWCACHE;
  input twiddle_rsc_0_7_AWLOCK;
  input [1:0] twiddle_rsc_0_7_AWBURST;
  input [2:0] twiddle_rsc_0_7_AWSIZE;
  input [7:0] twiddle_rsc_0_7_AWLEN;
  input [11:0] twiddle_rsc_0_7_AWADDR;
  input twiddle_rsc_0_7_AWID;
  output twiddle_rsc_triosy_0_7_lz;
  input twiddle_rsc_0_8_s_tdone;
  input twiddle_rsc_0_8_tr_write_done;
  input twiddle_rsc_0_8_RREADY;
  output twiddle_rsc_0_8_RVALID;
  output twiddle_rsc_0_8_RUSER;
  output twiddle_rsc_0_8_RLAST;
  output [1:0] twiddle_rsc_0_8_RRESP;
  output [31:0] twiddle_rsc_0_8_RDATA;
  output twiddle_rsc_0_8_RID;
  output twiddle_rsc_0_8_ARREADY;
  input twiddle_rsc_0_8_ARVALID;
  input twiddle_rsc_0_8_ARUSER;
  input [3:0] twiddle_rsc_0_8_ARREGION;
  input [3:0] twiddle_rsc_0_8_ARQOS;
  input [2:0] twiddle_rsc_0_8_ARPROT;
  input [3:0] twiddle_rsc_0_8_ARCACHE;
  input twiddle_rsc_0_8_ARLOCK;
  input [1:0] twiddle_rsc_0_8_ARBURST;
  input [2:0] twiddle_rsc_0_8_ARSIZE;
  input [7:0] twiddle_rsc_0_8_ARLEN;
  input [11:0] twiddle_rsc_0_8_ARADDR;
  input twiddle_rsc_0_8_ARID;
  input twiddle_rsc_0_8_BREADY;
  output twiddle_rsc_0_8_BVALID;
  output twiddle_rsc_0_8_BUSER;
  output [1:0] twiddle_rsc_0_8_BRESP;
  output twiddle_rsc_0_8_BID;
  output twiddle_rsc_0_8_WREADY;
  input twiddle_rsc_0_8_WVALID;
  input twiddle_rsc_0_8_WUSER;
  input twiddle_rsc_0_8_WLAST;
  input [3:0] twiddle_rsc_0_8_WSTRB;
  input [31:0] twiddle_rsc_0_8_WDATA;
  output twiddle_rsc_0_8_AWREADY;
  input twiddle_rsc_0_8_AWVALID;
  input twiddle_rsc_0_8_AWUSER;
  input [3:0] twiddle_rsc_0_8_AWREGION;
  input [3:0] twiddle_rsc_0_8_AWQOS;
  input [2:0] twiddle_rsc_0_8_AWPROT;
  input [3:0] twiddle_rsc_0_8_AWCACHE;
  input twiddle_rsc_0_8_AWLOCK;
  input [1:0] twiddle_rsc_0_8_AWBURST;
  input [2:0] twiddle_rsc_0_8_AWSIZE;
  input [7:0] twiddle_rsc_0_8_AWLEN;
  input [11:0] twiddle_rsc_0_8_AWADDR;
  input twiddle_rsc_0_8_AWID;
  output twiddle_rsc_triosy_0_8_lz;
  input twiddle_rsc_0_9_s_tdone;
  input twiddle_rsc_0_9_tr_write_done;
  input twiddle_rsc_0_9_RREADY;
  output twiddle_rsc_0_9_RVALID;
  output twiddle_rsc_0_9_RUSER;
  output twiddle_rsc_0_9_RLAST;
  output [1:0] twiddle_rsc_0_9_RRESP;
  output [31:0] twiddle_rsc_0_9_RDATA;
  output twiddle_rsc_0_9_RID;
  output twiddle_rsc_0_9_ARREADY;
  input twiddle_rsc_0_9_ARVALID;
  input twiddle_rsc_0_9_ARUSER;
  input [3:0] twiddle_rsc_0_9_ARREGION;
  input [3:0] twiddle_rsc_0_9_ARQOS;
  input [2:0] twiddle_rsc_0_9_ARPROT;
  input [3:0] twiddle_rsc_0_9_ARCACHE;
  input twiddle_rsc_0_9_ARLOCK;
  input [1:0] twiddle_rsc_0_9_ARBURST;
  input [2:0] twiddle_rsc_0_9_ARSIZE;
  input [7:0] twiddle_rsc_0_9_ARLEN;
  input [11:0] twiddle_rsc_0_9_ARADDR;
  input twiddle_rsc_0_9_ARID;
  input twiddle_rsc_0_9_BREADY;
  output twiddle_rsc_0_9_BVALID;
  output twiddle_rsc_0_9_BUSER;
  output [1:0] twiddle_rsc_0_9_BRESP;
  output twiddle_rsc_0_9_BID;
  output twiddle_rsc_0_9_WREADY;
  input twiddle_rsc_0_9_WVALID;
  input twiddle_rsc_0_9_WUSER;
  input twiddle_rsc_0_9_WLAST;
  input [3:0] twiddle_rsc_0_9_WSTRB;
  input [31:0] twiddle_rsc_0_9_WDATA;
  output twiddle_rsc_0_9_AWREADY;
  input twiddle_rsc_0_9_AWVALID;
  input twiddle_rsc_0_9_AWUSER;
  input [3:0] twiddle_rsc_0_9_AWREGION;
  input [3:0] twiddle_rsc_0_9_AWQOS;
  input [2:0] twiddle_rsc_0_9_AWPROT;
  input [3:0] twiddle_rsc_0_9_AWCACHE;
  input twiddle_rsc_0_9_AWLOCK;
  input [1:0] twiddle_rsc_0_9_AWBURST;
  input [2:0] twiddle_rsc_0_9_AWSIZE;
  input [7:0] twiddle_rsc_0_9_AWLEN;
  input [11:0] twiddle_rsc_0_9_AWADDR;
  input twiddle_rsc_0_9_AWID;
  output twiddle_rsc_triosy_0_9_lz;
  input twiddle_rsc_0_10_s_tdone;
  input twiddle_rsc_0_10_tr_write_done;
  input twiddle_rsc_0_10_RREADY;
  output twiddle_rsc_0_10_RVALID;
  output twiddle_rsc_0_10_RUSER;
  output twiddle_rsc_0_10_RLAST;
  output [1:0] twiddle_rsc_0_10_RRESP;
  output [31:0] twiddle_rsc_0_10_RDATA;
  output twiddle_rsc_0_10_RID;
  output twiddle_rsc_0_10_ARREADY;
  input twiddle_rsc_0_10_ARVALID;
  input twiddle_rsc_0_10_ARUSER;
  input [3:0] twiddle_rsc_0_10_ARREGION;
  input [3:0] twiddle_rsc_0_10_ARQOS;
  input [2:0] twiddle_rsc_0_10_ARPROT;
  input [3:0] twiddle_rsc_0_10_ARCACHE;
  input twiddle_rsc_0_10_ARLOCK;
  input [1:0] twiddle_rsc_0_10_ARBURST;
  input [2:0] twiddle_rsc_0_10_ARSIZE;
  input [7:0] twiddle_rsc_0_10_ARLEN;
  input [11:0] twiddle_rsc_0_10_ARADDR;
  input twiddle_rsc_0_10_ARID;
  input twiddle_rsc_0_10_BREADY;
  output twiddle_rsc_0_10_BVALID;
  output twiddle_rsc_0_10_BUSER;
  output [1:0] twiddle_rsc_0_10_BRESP;
  output twiddle_rsc_0_10_BID;
  output twiddle_rsc_0_10_WREADY;
  input twiddle_rsc_0_10_WVALID;
  input twiddle_rsc_0_10_WUSER;
  input twiddle_rsc_0_10_WLAST;
  input [3:0] twiddle_rsc_0_10_WSTRB;
  input [31:0] twiddle_rsc_0_10_WDATA;
  output twiddle_rsc_0_10_AWREADY;
  input twiddle_rsc_0_10_AWVALID;
  input twiddle_rsc_0_10_AWUSER;
  input [3:0] twiddle_rsc_0_10_AWREGION;
  input [3:0] twiddle_rsc_0_10_AWQOS;
  input [2:0] twiddle_rsc_0_10_AWPROT;
  input [3:0] twiddle_rsc_0_10_AWCACHE;
  input twiddle_rsc_0_10_AWLOCK;
  input [1:0] twiddle_rsc_0_10_AWBURST;
  input [2:0] twiddle_rsc_0_10_AWSIZE;
  input [7:0] twiddle_rsc_0_10_AWLEN;
  input [11:0] twiddle_rsc_0_10_AWADDR;
  input twiddle_rsc_0_10_AWID;
  output twiddle_rsc_triosy_0_10_lz;
  input twiddle_rsc_0_11_s_tdone;
  input twiddle_rsc_0_11_tr_write_done;
  input twiddle_rsc_0_11_RREADY;
  output twiddle_rsc_0_11_RVALID;
  output twiddle_rsc_0_11_RUSER;
  output twiddle_rsc_0_11_RLAST;
  output [1:0] twiddle_rsc_0_11_RRESP;
  output [31:0] twiddle_rsc_0_11_RDATA;
  output twiddle_rsc_0_11_RID;
  output twiddle_rsc_0_11_ARREADY;
  input twiddle_rsc_0_11_ARVALID;
  input twiddle_rsc_0_11_ARUSER;
  input [3:0] twiddle_rsc_0_11_ARREGION;
  input [3:0] twiddle_rsc_0_11_ARQOS;
  input [2:0] twiddle_rsc_0_11_ARPROT;
  input [3:0] twiddle_rsc_0_11_ARCACHE;
  input twiddle_rsc_0_11_ARLOCK;
  input [1:0] twiddle_rsc_0_11_ARBURST;
  input [2:0] twiddle_rsc_0_11_ARSIZE;
  input [7:0] twiddle_rsc_0_11_ARLEN;
  input [11:0] twiddle_rsc_0_11_ARADDR;
  input twiddle_rsc_0_11_ARID;
  input twiddle_rsc_0_11_BREADY;
  output twiddle_rsc_0_11_BVALID;
  output twiddle_rsc_0_11_BUSER;
  output [1:0] twiddle_rsc_0_11_BRESP;
  output twiddle_rsc_0_11_BID;
  output twiddle_rsc_0_11_WREADY;
  input twiddle_rsc_0_11_WVALID;
  input twiddle_rsc_0_11_WUSER;
  input twiddle_rsc_0_11_WLAST;
  input [3:0] twiddle_rsc_0_11_WSTRB;
  input [31:0] twiddle_rsc_0_11_WDATA;
  output twiddle_rsc_0_11_AWREADY;
  input twiddle_rsc_0_11_AWVALID;
  input twiddle_rsc_0_11_AWUSER;
  input [3:0] twiddle_rsc_0_11_AWREGION;
  input [3:0] twiddle_rsc_0_11_AWQOS;
  input [2:0] twiddle_rsc_0_11_AWPROT;
  input [3:0] twiddle_rsc_0_11_AWCACHE;
  input twiddle_rsc_0_11_AWLOCK;
  input [1:0] twiddle_rsc_0_11_AWBURST;
  input [2:0] twiddle_rsc_0_11_AWSIZE;
  input [7:0] twiddle_rsc_0_11_AWLEN;
  input [11:0] twiddle_rsc_0_11_AWADDR;
  input twiddle_rsc_0_11_AWID;
  output twiddle_rsc_triosy_0_11_lz;
  input twiddle_rsc_0_12_s_tdone;
  input twiddle_rsc_0_12_tr_write_done;
  input twiddle_rsc_0_12_RREADY;
  output twiddle_rsc_0_12_RVALID;
  output twiddle_rsc_0_12_RUSER;
  output twiddle_rsc_0_12_RLAST;
  output [1:0] twiddle_rsc_0_12_RRESP;
  output [31:0] twiddle_rsc_0_12_RDATA;
  output twiddle_rsc_0_12_RID;
  output twiddle_rsc_0_12_ARREADY;
  input twiddle_rsc_0_12_ARVALID;
  input twiddle_rsc_0_12_ARUSER;
  input [3:0] twiddle_rsc_0_12_ARREGION;
  input [3:0] twiddle_rsc_0_12_ARQOS;
  input [2:0] twiddle_rsc_0_12_ARPROT;
  input [3:0] twiddle_rsc_0_12_ARCACHE;
  input twiddle_rsc_0_12_ARLOCK;
  input [1:0] twiddle_rsc_0_12_ARBURST;
  input [2:0] twiddle_rsc_0_12_ARSIZE;
  input [7:0] twiddle_rsc_0_12_ARLEN;
  input [11:0] twiddle_rsc_0_12_ARADDR;
  input twiddle_rsc_0_12_ARID;
  input twiddle_rsc_0_12_BREADY;
  output twiddle_rsc_0_12_BVALID;
  output twiddle_rsc_0_12_BUSER;
  output [1:0] twiddle_rsc_0_12_BRESP;
  output twiddle_rsc_0_12_BID;
  output twiddle_rsc_0_12_WREADY;
  input twiddle_rsc_0_12_WVALID;
  input twiddle_rsc_0_12_WUSER;
  input twiddle_rsc_0_12_WLAST;
  input [3:0] twiddle_rsc_0_12_WSTRB;
  input [31:0] twiddle_rsc_0_12_WDATA;
  output twiddle_rsc_0_12_AWREADY;
  input twiddle_rsc_0_12_AWVALID;
  input twiddle_rsc_0_12_AWUSER;
  input [3:0] twiddle_rsc_0_12_AWREGION;
  input [3:0] twiddle_rsc_0_12_AWQOS;
  input [2:0] twiddle_rsc_0_12_AWPROT;
  input [3:0] twiddle_rsc_0_12_AWCACHE;
  input twiddle_rsc_0_12_AWLOCK;
  input [1:0] twiddle_rsc_0_12_AWBURST;
  input [2:0] twiddle_rsc_0_12_AWSIZE;
  input [7:0] twiddle_rsc_0_12_AWLEN;
  input [11:0] twiddle_rsc_0_12_AWADDR;
  input twiddle_rsc_0_12_AWID;
  output twiddle_rsc_triosy_0_12_lz;
  input twiddle_rsc_0_13_s_tdone;
  input twiddle_rsc_0_13_tr_write_done;
  input twiddle_rsc_0_13_RREADY;
  output twiddle_rsc_0_13_RVALID;
  output twiddle_rsc_0_13_RUSER;
  output twiddle_rsc_0_13_RLAST;
  output [1:0] twiddle_rsc_0_13_RRESP;
  output [31:0] twiddle_rsc_0_13_RDATA;
  output twiddle_rsc_0_13_RID;
  output twiddle_rsc_0_13_ARREADY;
  input twiddle_rsc_0_13_ARVALID;
  input twiddle_rsc_0_13_ARUSER;
  input [3:0] twiddle_rsc_0_13_ARREGION;
  input [3:0] twiddle_rsc_0_13_ARQOS;
  input [2:0] twiddle_rsc_0_13_ARPROT;
  input [3:0] twiddle_rsc_0_13_ARCACHE;
  input twiddle_rsc_0_13_ARLOCK;
  input [1:0] twiddle_rsc_0_13_ARBURST;
  input [2:0] twiddle_rsc_0_13_ARSIZE;
  input [7:0] twiddle_rsc_0_13_ARLEN;
  input [11:0] twiddle_rsc_0_13_ARADDR;
  input twiddle_rsc_0_13_ARID;
  input twiddle_rsc_0_13_BREADY;
  output twiddle_rsc_0_13_BVALID;
  output twiddle_rsc_0_13_BUSER;
  output [1:0] twiddle_rsc_0_13_BRESP;
  output twiddle_rsc_0_13_BID;
  output twiddle_rsc_0_13_WREADY;
  input twiddle_rsc_0_13_WVALID;
  input twiddle_rsc_0_13_WUSER;
  input twiddle_rsc_0_13_WLAST;
  input [3:0] twiddle_rsc_0_13_WSTRB;
  input [31:0] twiddle_rsc_0_13_WDATA;
  output twiddle_rsc_0_13_AWREADY;
  input twiddle_rsc_0_13_AWVALID;
  input twiddle_rsc_0_13_AWUSER;
  input [3:0] twiddle_rsc_0_13_AWREGION;
  input [3:0] twiddle_rsc_0_13_AWQOS;
  input [2:0] twiddle_rsc_0_13_AWPROT;
  input [3:0] twiddle_rsc_0_13_AWCACHE;
  input twiddle_rsc_0_13_AWLOCK;
  input [1:0] twiddle_rsc_0_13_AWBURST;
  input [2:0] twiddle_rsc_0_13_AWSIZE;
  input [7:0] twiddle_rsc_0_13_AWLEN;
  input [11:0] twiddle_rsc_0_13_AWADDR;
  input twiddle_rsc_0_13_AWID;
  output twiddle_rsc_triosy_0_13_lz;
  input twiddle_rsc_0_14_s_tdone;
  input twiddle_rsc_0_14_tr_write_done;
  input twiddle_rsc_0_14_RREADY;
  output twiddle_rsc_0_14_RVALID;
  output twiddle_rsc_0_14_RUSER;
  output twiddle_rsc_0_14_RLAST;
  output [1:0] twiddle_rsc_0_14_RRESP;
  output [31:0] twiddle_rsc_0_14_RDATA;
  output twiddle_rsc_0_14_RID;
  output twiddle_rsc_0_14_ARREADY;
  input twiddle_rsc_0_14_ARVALID;
  input twiddle_rsc_0_14_ARUSER;
  input [3:0] twiddle_rsc_0_14_ARREGION;
  input [3:0] twiddle_rsc_0_14_ARQOS;
  input [2:0] twiddle_rsc_0_14_ARPROT;
  input [3:0] twiddle_rsc_0_14_ARCACHE;
  input twiddle_rsc_0_14_ARLOCK;
  input [1:0] twiddle_rsc_0_14_ARBURST;
  input [2:0] twiddle_rsc_0_14_ARSIZE;
  input [7:0] twiddle_rsc_0_14_ARLEN;
  input [11:0] twiddle_rsc_0_14_ARADDR;
  input twiddle_rsc_0_14_ARID;
  input twiddle_rsc_0_14_BREADY;
  output twiddle_rsc_0_14_BVALID;
  output twiddle_rsc_0_14_BUSER;
  output [1:0] twiddle_rsc_0_14_BRESP;
  output twiddle_rsc_0_14_BID;
  output twiddle_rsc_0_14_WREADY;
  input twiddle_rsc_0_14_WVALID;
  input twiddle_rsc_0_14_WUSER;
  input twiddle_rsc_0_14_WLAST;
  input [3:0] twiddle_rsc_0_14_WSTRB;
  input [31:0] twiddle_rsc_0_14_WDATA;
  output twiddle_rsc_0_14_AWREADY;
  input twiddle_rsc_0_14_AWVALID;
  input twiddle_rsc_0_14_AWUSER;
  input [3:0] twiddle_rsc_0_14_AWREGION;
  input [3:0] twiddle_rsc_0_14_AWQOS;
  input [2:0] twiddle_rsc_0_14_AWPROT;
  input [3:0] twiddle_rsc_0_14_AWCACHE;
  input twiddle_rsc_0_14_AWLOCK;
  input [1:0] twiddle_rsc_0_14_AWBURST;
  input [2:0] twiddle_rsc_0_14_AWSIZE;
  input [7:0] twiddle_rsc_0_14_AWLEN;
  input [11:0] twiddle_rsc_0_14_AWADDR;
  input twiddle_rsc_0_14_AWID;
  output twiddle_rsc_triosy_0_14_lz;
  input twiddle_rsc_0_15_s_tdone;
  input twiddle_rsc_0_15_tr_write_done;
  input twiddle_rsc_0_15_RREADY;
  output twiddle_rsc_0_15_RVALID;
  output twiddle_rsc_0_15_RUSER;
  output twiddle_rsc_0_15_RLAST;
  output [1:0] twiddle_rsc_0_15_RRESP;
  output [31:0] twiddle_rsc_0_15_RDATA;
  output twiddle_rsc_0_15_RID;
  output twiddle_rsc_0_15_ARREADY;
  input twiddle_rsc_0_15_ARVALID;
  input twiddle_rsc_0_15_ARUSER;
  input [3:0] twiddle_rsc_0_15_ARREGION;
  input [3:0] twiddle_rsc_0_15_ARQOS;
  input [2:0] twiddle_rsc_0_15_ARPROT;
  input [3:0] twiddle_rsc_0_15_ARCACHE;
  input twiddle_rsc_0_15_ARLOCK;
  input [1:0] twiddle_rsc_0_15_ARBURST;
  input [2:0] twiddle_rsc_0_15_ARSIZE;
  input [7:0] twiddle_rsc_0_15_ARLEN;
  input [11:0] twiddle_rsc_0_15_ARADDR;
  input twiddle_rsc_0_15_ARID;
  input twiddle_rsc_0_15_BREADY;
  output twiddle_rsc_0_15_BVALID;
  output twiddle_rsc_0_15_BUSER;
  output [1:0] twiddle_rsc_0_15_BRESP;
  output twiddle_rsc_0_15_BID;
  output twiddle_rsc_0_15_WREADY;
  input twiddle_rsc_0_15_WVALID;
  input twiddle_rsc_0_15_WUSER;
  input twiddle_rsc_0_15_WLAST;
  input [3:0] twiddle_rsc_0_15_WSTRB;
  input [31:0] twiddle_rsc_0_15_WDATA;
  output twiddle_rsc_0_15_AWREADY;
  input twiddle_rsc_0_15_AWVALID;
  input twiddle_rsc_0_15_AWUSER;
  input [3:0] twiddle_rsc_0_15_AWREGION;
  input [3:0] twiddle_rsc_0_15_AWQOS;
  input [2:0] twiddle_rsc_0_15_AWPROT;
  input [3:0] twiddle_rsc_0_15_AWCACHE;
  input twiddle_rsc_0_15_AWLOCK;
  input [1:0] twiddle_rsc_0_15_AWBURST;
  input [2:0] twiddle_rsc_0_15_AWSIZE;
  input [7:0] twiddle_rsc_0_15_AWLEN;
  input [11:0] twiddle_rsc_0_15_AWADDR;
  input twiddle_rsc_0_15_AWID;
  output twiddle_rsc_triosy_0_15_lz;
  input twiddle_h_rsc_0_0_s_tdone;
  input twiddle_h_rsc_0_0_tr_write_done;
  input twiddle_h_rsc_0_0_RREADY;
  output twiddle_h_rsc_0_0_RVALID;
  output twiddle_h_rsc_0_0_RUSER;
  output twiddle_h_rsc_0_0_RLAST;
  output [1:0] twiddle_h_rsc_0_0_RRESP;
  output [31:0] twiddle_h_rsc_0_0_RDATA;
  output twiddle_h_rsc_0_0_RID;
  output twiddle_h_rsc_0_0_ARREADY;
  input twiddle_h_rsc_0_0_ARVALID;
  input twiddle_h_rsc_0_0_ARUSER;
  input [3:0] twiddle_h_rsc_0_0_ARREGION;
  input [3:0] twiddle_h_rsc_0_0_ARQOS;
  input [2:0] twiddle_h_rsc_0_0_ARPROT;
  input [3:0] twiddle_h_rsc_0_0_ARCACHE;
  input twiddle_h_rsc_0_0_ARLOCK;
  input [1:0] twiddle_h_rsc_0_0_ARBURST;
  input [2:0] twiddle_h_rsc_0_0_ARSIZE;
  input [7:0] twiddle_h_rsc_0_0_ARLEN;
  input [11:0] twiddle_h_rsc_0_0_ARADDR;
  input twiddle_h_rsc_0_0_ARID;
  input twiddle_h_rsc_0_0_BREADY;
  output twiddle_h_rsc_0_0_BVALID;
  output twiddle_h_rsc_0_0_BUSER;
  output [1:0] twiddle_h_rsc_0_0_BRESP;
  output twiddle_h_rsc_0_0_BID;
  output twiddle_h_rsc_0_0_WREADY;
  input twiddle_h_rsc_0_0_WVALID;
  input twiddle_h_rsc_0_0_WUSER;
  input twiddle_h_rsc_0_0_WLAST;
  input [3:0] twiddle_h_rsc_0_0_WSTRB;
  input [31:0] twiddle_h_rsc_0_0_WDATA;
  output twiddle_h_rsc_0_0_AWREADY;
  input twiddle_h_rsc_0_0_AWVALID;
  input twiddle_h_rsc_0_0_AWUSER;
  input [3:0] twiddle_h_rsc_0_0_AWREGION;
  input [3:0] twiddle_h_rsc_0_0_AWQOS;
  input [2:0] twiddle_h_rsc_0_0_AWPROT;
  input [3:0] twiddle_h_rsc_0_0_AWCACHE;
  input twiddle_h_rsc_0_0_AWLOCK;
  input [1:0] twiddle_h_rsc_0_0_AWBURST;
  input [2:0] twiddle_h_rsc_0_0_AWSIZE;
  input [7:0] twiddle_h_rsc_0_0_AWLEN;
  input [11:0] twiddle_h_rsc_0_0_AWADDR;
  input twiddle_h_rsc_0_0_AWID;
  output twiddle_h_rsc_triosy_0_0_lz;
  input twiddle_h_rsc_0_1_s_tdone;
  input twiddle_h_rsc_0_1_tr_write_done;
  input twiddle_h_rsc_0_1_RREADY;
  output twiddle_h_rsc_0_1_RVALID;
  output twiddle_h_rsc_0_1_RUSER;
  output twiddle_h_rsc_0_1_RLAST;
  output [1:0] twiddle_h_rsc_0_1_RRESP;
  output [31:0] twiddle_h_rsc_0_1_RDATA;
  output twiddle_h_rsc_0_1_RID;
  output twiddle_h_rsc_0_1_ARREADY;
  input twiddle_h_rsc_0_1_ARVALID;
  input twiddle_h_rsc_0_1_ARUSER;
  input [3:0] twiddle_h_rsc_0_1_ARREGION;
  input [3:0] twiddle_h_rsc_0_1_ARQOS;
  input [2:0] twiddle_h_rsc_0_1_ARPROT;
  input [3:0] twiddle_h_rsc_0_1_ARCACHE;
  input twiddle_h_rsc_0_1_ARLOCK;
  input [1:0] twiddle_h_rsc_0_1_ARBURST;
  input [2:0] twiddle_h_rsc_0_1_ARSIZE;
  input [7:0] twiddle_h_rsc_0_1_ARLEN;
  input [11:0] twiddle_h_rsc_0_1_ARADDR;
  input twiddle_h_rsc_0_1_ARID;
  input twiddle_h_rsc_0_1_BREADY;
  output twiddle_h_rsc_0_1_BVALID;
  output twiddle_h_rsc_0_1_BUSER;
  output [1:0] twiddle_h_rsc_0_1_BRESP;
  output twiddle_h_rsc_0_1_BID;
  output twiddle_h_rsc_0_1_WREADY;
  input twiddle_h_rsc_0_1_WVALID;
  input twiddle_h_rsc_0_1_WUSER;
  input twiddle_h_rsc_0_1_WLAST;
  input [3:0] twiddle_h_rsc_0_1_WSTRB;
  input [31:0] twiddle_h_rsc_0_1_WDATA;
  output twiddle_h_rsc_0_1_AWREADY;
  input twiddle_h_rsc_0_1_AWVALID;
  input twiddle_h_rsc_0_1_AWUSER;
  input [3:0] twiddle_h_rsc_0_1_AWREGION;
  input [3:0] twiddle_h_rsc_0_1_AWQOS;
  input [2:0] twiddle_h_rsc_0_1_AWPROT;
  input [3:0] twiddle_h_rsc_0_1_AWCACHE;
  input twiddle_h_rsc_0_1_AWLOCK;
  input [1:0] twiddle_h_rsc_0_1_AWBURST;
  input [2:0] twiddle_h_rsc_0_1_AWSIZE;
  input [7:0] twiddle_h_rsc_0_1_AWLEN;
  input [11:0] twiddle_h_rsc_0_1_AWADDR;
  input twiddle_h_rsc_0_1_AWID;
  output twiddle_h_rsc_triosy_0_1_lz;
  input twiddle_h_rsc_0_2_s_tdone;
  input twiddle_h_rsc_0_2_tr_write_done;
  input twiddle_h_rsc_0_2_RREADY;
  output twiddle_h_rsc_0_2_RVALID;
  output twiddle_h_rsc_0_2_RUSER;
  output twiddle_h_rsc_0_2_RLAST;
  output [1:0] twiddle_h_rsc_0_2_RRESP;
  output [31:0] twiddle_h_rsc_0_2_RDATA;
  output twiddle_h_rsc_0_2_RID;
  output twiddle_h_rsc_0_2_ARREADY;
  input twiddle_h_rsc_0_2_ARVALID;
  input twiddle_h_rsc_0_2_ARUSER;
  input [3:0] twiddle_h_rsc_0_2_ARREGION;
  input [3:0] twiddle_h_rsc_0_2_ARQOS;
  input [2:0] twiddle_h_rsc_0_2_ARPROT;
  input [3:0] twiddle_h_rsc_0_2_ARCACHE;
  input twiddle_h_rsc_0_2_ARLOCK;
  input [1:0] twiddle_h_rsc_0_2_ARBURST;
  input [2:0] twiddle_h_rsc_0_2_ARSIZE;
  input [7:0] twiddle_h_rsc_0_2_ARLEN;
  input [11:0] twiddle_h_rsc_0_2_ARADDR;
  input twiddle_h_rsc_0_2_ARID;
  input twiddle_h_rsc_0_2_BREADY;
  output twiddle_h_rsc_0_2_BVALID;
  output twiddle_h_rsc_0_2_BUSER;
  output [1:0] twiddle_h_rsc_0_2_BRESP;
  output twiddle_h_rsc_0_2_BID;
  output twiddle_h_rsc_0_2_WREADY;
  input twiddle_h_rsc_0_2_WVALID;
  input twiddle_h_rsc_0_2_WUSER;
  input twiddle_h_rsc_0_2_WLAST;
  input [3:0] twiddle_h_rsc_0_2_WSTRB;
  input [31:0] twiddle_h_rsc_0_2_WDATA;
  output twiddle_h_rsc_0_2_AWREADY;
  input twiddle_h_rsc_0_2_AWVALID;
  input twiddle_h_rsc_0_2_AWUSER;
  input [3:0] twiddle_h_rsc_0_2_AWREGION;
  input [3:0] twiddle_h_rsc_0_2_AWQOS;
  input [2:0] twiddle_h_rsc_0_2_AWPROT;
  input [3:0] twiddle_h_rsc_0_2_AWCACHE;
  input twiddle_h_rsc_0_2_AWLOCK;
  input [1:0] twiddle_h_rsc_0_2_AWBURST;
  input [2:0] twiddle_h_rsc_0_2_AWSIZE;
  input [7:0] twiddle_h_rsc_0_2_AWLEN;
  input [11:0] twiddle_h_rsc_0_2_AWADDR;
  input twiddle_h_rsc_0_2_AWID;
  output twiddle_h_rsc_triosy_0_2_lz;
  input twiddle_h_rsc_0_3_s_tdone;
  input twiddle_h_rsc_0_3_tr_write_done;
  input twiddle_h_rsc_0_3_RREADY;
  output twiddle_h_rsc_0_3_RVALID;
  output twiddle_h_rsc_0_3_RUSER;
  output twiddle_h_rsc_0_3_RLAST;
  output [1:0] twiddle_h_rsc_0_3_RRESP;
  output [31:0] twiddle_h_rsc_0_3_RDATA;
  output twiddle_h_rsc_0_3_RID;
  output twiddle_h_rsc_0_3_ARREADY;
  input twiddle_h_rsc_0_3_ARVALID;
  input twiddle_h_rsc_0_3_ARUSER;
  input [3:0] twiddle_h_rsc_0_3_ARREGION;
  input [3:0] twiddle_h_rsc_0_3_ARQOS;
  input [2:0] twiddle_h_rsc_0_3_ARPROT;
  input [3:0] twiddle_h_rsc_0_3_ARCACHE;
  input twiddle_h_rsc_0_3_ARLOCK;
  input [1:0] twiddle_h_rsc_0_3_ARBURST;
  input [2:0] twiddle_h_rsc_0_3_ARSIZE;
  input [7:0] twiddle_h_rsc_0_3_ARLEN;
  input [11:0] twiddle_h_rsc_0_3_ARADDR;
  input twiddle_h_rsc_0_3_ARID;
  input twiddle_h_rsc_0_3_BREADY;
  output twiddle_h_rsc_0_3_BVALID;
  output twiddle_h_rsc_0_3_BUSER;
  output [1:0] twiddle_h_rsc_0_3_BRESP;
  output twiddle_h_rsc_0_3_BID;
  output twiddle_h_rsc_0_3_WREADY;
  input twiddle_h_rsc_0_3_WVALID;
  input twiddle_h_rsc_0_3_WUSER;
  input twiddle_h_rsc_0_3_WLAST;
  input [3:0] twiddle_h_rsc_0_3_WSTRB;
  input [31:0] twiddle_h_rsc_0_3_WDATA;
  output twiddle_h_rsc_0_3_AWREADY;
  input twiddle_h_rsc_0_3_AWVALID;
  input twiddle_h_rsc_0_3_AWUSER;
  input [3:0] twiddle_h_rsc_0_3_AWREGION;
  input [3:0] twiddle_h_rsc_0_3_AWQOS;
  input [2:0] twiddle_h_rsc_0_3_AWPROT;
  input [3:0] twiddle_h_rsc_0_3_AWCACHE;
  input twiddle_h_rsc_0_3_AWLOCK;
  input [1:0] twiddle_h_rsc_0_3_AWBURST;
  input [2:0] twiddle_h_rsc_0_3_AWSIZE;
  input [7:0] twiddle_h_rsc_0_3_AWLEN;
  input [11:0] twiddle_h_rsc_0_3_AWADDR;
  input twiddle_h_rsc_0_3_AWID;
  output twiddle_h_rsc_triosy_0_3_lz;
  input twiddle_h_rsc_0_4_s_tdone;
  input twiddle_h_rsc_0_4_tr_write_done;
  input twiddle_h_rsc_0_4_RREADY;
  output twiddle_h_rsc_0_4_RVALID;
  output twiddle_h_rsc_0_4_RUSER;
  output twiddle_h_rsc_0_4_RLAST;
  output [1:0] twiddle_h_rsc_0_4_RRESP;
  output [31:0] twiddle_h_rsc_0_4_RDATA;
  output twiddle_h_rsc_0_4_RID;
  output twiddle_h_rsc_0_4_ARREADY;
  input twiddle_h_rsc_0_4_ARVALID;
  input twiddle_h_rsc_0_4_ARUSER;
  input [3:0] twiddle_h_rsc_0_4_ARREGION;
  input [3:0] twiddle_h_rsc_0_4_ARQOS;
  input [2:0] twiddle_h_rsc_0_4_ARPROT;
  input [3:0] twiddle_h_rsc_0_4_ARCACHE;
  input twiddle_h_rsc_0_4_ARLOCK;
  input [1:0] twiddle_h_rsc_0_4_ARBURST;
  input [2:0] twiddle_h_rsc_0_4_ARSIZE;
  input [7:0] twiddle_h_rsc_0_4_ARLEN;
  input [11:0] twiddle_h_rsc_0_4_ARADDR;
  input twiddle_h_rsc_0_4_ARID;
  input twiddle_h_rsc_0_4_BREADY;
  output twiddle_h_rsc_0_4_BVALID;
  output twiddle_h_rsc_0_4_BUSER;
  output [1:0] twiddle_h_rsc_0_4_BRESP;
  output twiddle_h_rsc_0_4_BID;
  output twiddle_h_rsc_0_4_WREADY;
  input twiddle_h_rsc_0_4_WVALID;
  input twiddle_h_rsc_0_4_WUSER;
  input twiddle_h_rsc_0_4_WLAST;
  input [3:0] twiddle_h_rsc_0_4_WSTRB;
  input [31:0] twiddle_h_rsc_0_4_WDATA;
  output twiddle_h_rsc_0_4_AWREADY;
  input twiddle_h_rsc_0_4_AWVALID;
  input twiddle_h_rsc_0_4_AWUSER;
  input [3:0] twiddle_h_rsc_0_4_AWREGION;
  input [3:0] twiddle_h_rsc_0_4_AWQOS;
  input [2:0] twiddle_h_rsc_0_4_AWPROT;
  input [3:0] twiddle_h_rsc_0_4_AWCACHE;
  input twiddle_h_rsc_0_4_AWLOCK;
  input [1:0] twiddle_h_rsc_0_4_AWBURST;
  input [2:0] twiddle_h_rsc_0_4_AWSIZE;
  input [7:0] twiddle_h_rsc_0_4_AWLEN;
  input [11:0] twiddle_h_rsc_0_4_AWADDR;
  input twiddle_h_rsc_0_4_AWID;
  output twiddle_h_rsc_triosy_0_4_lz;
  input twiddle_h_rsc_0_5_s_tdone;
  input twiddle_h_rsc_0_5_tr_write_done;
  input twiddle_h_rsc_0_5_RREADY;
  output twiddle_h_rsc_0_5_RVALID;
  output twiddle_h_rsc_0_5_RUSER;
  output twiddle_h_rsc_0_5_RLAST;
  output [1:0] twiddle_h_rsc_0_5_RRESP;
  output [31:0] twiddle_h_rsc_0_5_RDATA;
  output twiddle_h_rsc_0_5_RID;
  output twiddle_h_rsc_0_5_ARREADY;
  input twiddle_h_rsc_0_5_ARVALID;
  input twiddle_h_rsc_0_5_ARUSER;
  input [3:0] twiddle_h_rsc_0_5_ARREGION;
  input [3:0] twiddle_h_rsc_0_5_ARQOS;
  input [2:0] twiddle_h_rsc_0_5_ARPROT;
  input [3:0] twiddle_h_rsc_0_5_ARCACHE;
  input twiddle_h_rsc_0_5_ARLOCK;
  input [1:0] twiddle_h_rsc_0_5_ARBURST;
  input [2:0] twiddle_h_rsc_0_5_ARSIZE;
  input [7:0] twiddle_h_rsc_0_5_ARLEN;
  input [11:0] twiddle_h_rsc_0_5_ARADDR;
  input twiddle_h_rsc_0_5_ARID;
  input twiddle_h_rsc_0_5_BREADY;
  output twiddle_h_rsc_0_5_BVALID;
  output twiddle_h_rsc_0_5_BUSER;
  output [1:0] twiddle_h_rsc_0_5_BRESP;
  output twiddle_h_rsc_0_5_BID;
  output twiddle_h_rsc_0_5_WREADY;
  input twiddle_h_rsc_0_5_WVALID;
  input twiddle_h_rsc_0_5_WUSER;
  input twiddle_h_rsc_0_5_WLAST;
  input [3:0] twiddle_h_rsc_0_5_WSTRB;
  input [31:0] twiddle_h_rsc_0_5_WDATA;
  output twiddle_h_rsc_0_5_AWREADY;
  input twiddle_h_rsc_0_5_AWVALID;
  input twiddle_h_rsc_0_5_AWUSER;
  input [3:0] twiddle_h_rsc_0_5_AWREGION;
  input [3:0] twiddle_h_rsc_0_5_AWQOS;
  input [2:0] twiddle_h_rsc_0_5_AWPROT;
  input [3:0] twiddle_h_rsc_0_5_AWCACHE;
  input twiddle_h_rsc_0_5_AWLOCK;
  input [1:0] twiddle_h_rsc_0_5_AWBURST;
  input [2:0] twiddle_h_rsc_0_5_AWSIZE;
  input [7:0] twiddle_h_rsc_0_5_AWLEN;
  input [11:0] twiddle_h_rsc_0_5_AWADDR;
  input twiddle_h_rsc_0_5_AWID;
  output twiddle_h_rsc_triosy_0_5_lz;
  input twiddle_h_rsc_0_6_s_tdone;
  input twiddle_h_rsc_0_6_tr_write_done;
  input twiddle_h_rsc_0_6_RREADY;
  output twiddle_h_rsc_0_6_RVALID;
  output twiddle_h_rsc_0_6_RUSER;
  output twiddle_h_rsc_0_6_RLAST;
  output [1:0] twiddle_h_rsc_0_6_RRESP;
  output [31:0] twiddle_h_rsc_0_6_RDATA;
  output twiddle_h_rsc_0_6_RID;
  output twiddle_h_rsc_0_6_ARREADY;
  input twiddle_h_rsc_0_6_ARVALID;
  input twiddle_h_rsc_0_6_ARUSER;
  input [3:0] twiddle_h_rsc_0_6_ARREGION;
  input [3:0] twiddle_h_rsc_0_6_ARQOS;
  input [2:0] twiddle_h_rsc_0_6_ARPROT;
  input [3:0] twiddle_h_rsc_0_6_ARCACHE;
  input twiddle_h_rsc_0_6_ARLOCK;
  input [1:0] twiddle_h_rsc_0_6_ARBURST;
  input [2:0] twiddle_h_rsc_0_6_ARSIZE;
  input [7:0] twiddle_h_rsc_0_6_ARLEN;
  input [11:0] twiddle_h_rsc_0_6_ARADDR;
  input twiddle_h_rsc_0_6_ARID;
  input twiddle_h_rsc_0_6_BREADY;
  output twiddle_h_rsc_0_6_BVALID;
  output twiddle_h_rsc_0_6_BUSER;
  output [1:0] twiddle_h_rsc_0_6_BRESP;
  output twiddle_h_rsc_0_6_BID;
  output twiddle_h_rsc_0_6_WREADY;
  input twiddle_h_rsc_0_6_WVALID;
  input twiddle_h_rsc_0_6_WUSER;
  input twiddle_h_rsc_0_6_WLAST;
  input [3:0] twiddle_h_rsc_0_6_WSTRB;
  input [31:0] twiddle_h_rsc_0_6_WDATA;
  output twiddle_h_rsc_0_6_AWREADY;
  input twiddle_h_rsc_0_6_AWVALID;
  input twiddle_h_rsc_0_6_AWUSER;
  input [3:0] twiddle_h_rsc_0_6_AWREGION;
  input [3:0] twiddle_h_rsc_0_6_AWQOS;
  input [2:0] twiddle_h_rsc_0_6_AWPROT;
  input [3:0] twiddle_h_rsc_0_6_AWCACHE;
  input twiddle_h_rsc_0_6_AWLOCK;
  input [1:0] twiddle_h_rsc_0_6_AWBURST;
  input [2:0] twiddle_h_rsc_0_6_AWSIZE;
  input [7:0] twiddle_h_rsc_0_6_AWLEN;
  input [11:0] twiddle_h_rsc_0_6_AWADDR;
  input twiddle_h_rsc_0_6_AWID;
  output twiddle_h_rsc_triosy_0_6_lz;
  input twiddle_h_rsc_0_7_s_tdone;
  input twiddle_h_rsc_0_7_tr_write_done;
  input twiddle_h_rsc_0_7_RREADY;
  output twiddle_h_rsc_0_7_RVALID;
  output twiddle_h_rsc_0_7_RUSER;
  output twiddle_h_rsc_0_7_RLAST;
  output [1:0] twiddle_h_rsc_0_7_RRESP;
  output [31:0] twiddle_h_rsc_0_7_RDATA;
  output twiddle_h_rsc_0_7_RID;
  output twiddle_h_rsc_0_7_ARREADY;
  input twiddle_h_rsc_0_7_ARVALID;
  input twiddle_h_rsc_0_7_ARUSER;
  input [3:0] twiddle_h_rsc_0_7_ARREGION;
  input [3:0] twiddle_h_rsc_0_7_ARQOS;
  input [2:0] twiddle_h_rsc_0_7_ARPROT;
  input [3:0] twiddle_h_rsc_0_7_ARCACHE;
  input twiddle_h_rsc_0_7_ARLOCK;
  input [1:0] twiddle_h_rsc_0_7_ARBURST;
  input [2:0] twiddle_h_rsc_0_7_ARSIZE;
  input [7:0] twiddle_h_rsc_0_7_ARLEN;
  input [11:0] twiddle_h_rsc_0_7_ARADDR;
  input twiddle_h_rsc_0_7_ARID;
  input twiddle_h_rsc_0_7_BREADY;
  output twiddle_h_rsc_0_7_BVALID;
  output twiddle_h_rsc_0_7_BUSER;
  output [1:0] twiddle_h_rsc_0_7_BRESP;
  output twiddle_h_rsc_0_7_BID;
  output twiddle_h_rsc_0_7_WREADY;
  input twiddle_h_rsc_0_7_WVALID;
  input twiddle_h_rsc_0_7_WUSER;
  input twiddle_h_rsc_0_7_WLAST;
  input [3:0] twiddle_h_rsc_0_7_WSTRB;
  input [31:0] twiddle_h_rsc_0_7_WDATA;
  output twiddle_h_rsc_0_7_AWREADY;
  input twiddle_h_rsc_0_7_AWVALID;
  input twiddle_h_rsc_0_7_AWUSER;
  input [3:0] twiddle_h_rsc_0_7_AWREGION;
  input [3:0] twiddle_h_rsc_0_7_AWQOS;
  input [2:0] twiddle_h_rsc_0_7_AWPROT;
  input [3:0] twiddle_h_rsc_0_7_AWCACHE;
  input twiddle_h_rsc_0_7_AWLOCK;
  input [1:0] twiddle_h_rsc_0_7_AWBURST;
  input [2:0] twiddle_h_rsc_0_7_AWSIZE;
  input [7:0] twiddle_h_rsc_0_7_AWLEN;
  input [11:0] twiddle_h_rsc_0_7_AWADDR;
  input twiddle_h_rsc_0_7_AWID;
  output twiddle_h_rsc_triosy_0_7_lz;
  input twiddle_h_rsc_0_8_s_tdone;
  input twiddle_h_rsc_0_8_tr_write_done;
  input twiddle_h_rsc_0_8_RREADY;
  output twiddle_h_rsc_0_8_RVALID;
  output twiddle_h_rsc_0_8_RUSER;
  output twiddle_h_rsc_0_8_RLAST;
  output [1:0] twiddle_h_rsc_0_8_RRESP;
  output [31:0] twiddle_h_rsc_0_8_RDATA;
  output twiddle_h_rsc_0_8_RID;
  output twiddle_h_rsc_0_8_ARREADY;
  input twiddle_h_rsc_0_8_ARVALID;
  input twiddle_h_rsc_0_8_ARUSER;
  input [3:0] twiddle_h_rsc_0_8_ARREGION;
  input [3:0] twiddle_h_rsc_0_8_ARQOS;
  input [2:0] twiddle_h_rsc_0_8_ARPROT;
  input [3:0] twiddle_h_rsc_0_8_ARCACHE;
  input twiddle_h_rsc_0_8_ARLOCK;
  input [1:0] twiddle_h_rsc_0_8_ARBURST;
  input [2:0] twiddle_h_rsc_0_8_ARSIZE;
  input [7:0] twiddle_h_rsc_0_8_ARLEN;
  input [11:0] twiddle_h_rsc_0_8_ARADDR;
  input twiddle_h_rsc_0_8_ARID;
  input twiddle_h_rsc_0_8_BREADY;
  output twiddle_h_rsc_0_8_BVALID;
  output twiddle_h_rsc_0_8_BUSER;
  output [1:0] twiddle_h_rsc_0_8_BRESP;
  output twiddle_h_rsc_0_8_BID;
  output twiddle_h_rsc_0_8_WREADY;
  input twiddle_h_rsc_0_8_WVALID;
  input twiddle_h_rsc_0_8_WUSER;
  input twiddle_h_rsc_0_8_WLAST;
  input [3:0] twiddle_h_rsc_0_8_WSTRB;
  input [31:0] twiddle_h_rsc_0_8_WDATA;
  output twiddle_h_rsc_0_8_AWREADY;
  input twiddle_h_rsc_0_8_AWVALID;
  input twiddle_h_rsc_0_8_AWUSER;
  input [3:0] twiddle_h_rsc_0_8_AWREGION;
  input [3:0] twiddle_h_rsc_0_8_AWQOS;
  input [2:0] twiddle_h_rsc_0_8_AWPROT;
  input [3:0] twiddle_h_rsc_0_8_AWCACHE;
  input twiddle_h_rsc_0_8_AWLOCK;
  input [1:0] twiddle_h_rsc_0_8_AWBURST;
  input [2:0] twiddle_h_rsc_0_8_AWSIZE;
  input [7:0] twiddle_h_rsc_0_8_AWLEN;
  input [11:0] twiddle_h_rsc_0_8_AWADDR;
  input twiddle_h_rsc_0_8_AWID;
  output twiddle_h_rsc_triosy_0_8_lz;
  input twiddle_h_rsc_0_9_s_tdone;
  input twiddle_h_rsc_0_9_tr_write_done;
  input twiddle_h_rsc_0_9_RREADY;
  output twiddle_h_rsc_0_9_RVALID;
  output twiddle_h_rsc_0_9_RUSER;
  output twiddle_h_rsc_0_9_RLAST;
  output [1:0] twiddle_h_rsc_0_9_RRESP;
  output [31:0] twiddle_h_rsc_0_9_RDATA;
  output twiddle_h_rsc_0_9_RID;
  output twiddle_h_rsc_0_9_ARREADY;
  input twiddle_h_rsc_0_9_ARVALID;
  input twiddle_h_rsc_0_9_ARUSER;
  input [3:0] twiddle_h_rsc_0_9_ARREGION;
  input [3:0] twiddle_h_rsc_0_9_ARQOS;
  input [2:0] twiddle_h_rsc_0_9_ARPROT;
  input [3:0] twiddle_h_rsc_0_9_ARCACHE;
  input twiddle_h_rsc_0_9_ARLOCK;
  input [1:0] twiddle_h_rsc_0_9_ARBURST;
  input [2:0] twiddle_h_rsc_0_9_ARSIZE;
  input [7:0] twiddle_h_rsc_0_9_ARLEN;
  input [11:0] twiddle_h_rsc_0_9_ARADDR;
  input twiddle_h_rsc_0_9_ARID;
  input twiddle_h_rsc_0_9_BREADY;
  output twiddle_h_rsc_0_9_BVALID;
  output twiddle_h_rsc_0_9_BUSER;
  output [1:0] twiddle_h_rsc_0_9_BRESP;
  output twiddle_h_rsc_0_9_BID;
  output twiddle_h_rsc_0_9_WREADY;
  input twiddle_h_rsc_0_9_WVALID;
  input twiddle_h_rsc_0_9_WUSER;
  input twiddle_h_rsc_0_9_WLAST;
  input [3:0] twiddle_h_rsc_0_9_WSTRB;
  input [31:0] twiddle_h_rsc_0_9_WDATA;
  output twiddle_h_rsc_0_9_AWREADY;
  input twiddle_h_rsc_0_9_AWVALID;
  input twiddle_h_rsc_0_9_AWUSER;
  input [3:0] twiddle_h_rsc_0_9_AWREGION;
  input [3:0] twiddle_h_rsc_0_9_AWQOS;
  input [2:0] twiddle_h_rsc_0_9_AWPROT;
  input [3:0] twiddle_h_rsc_0_9_AWCACHE;
  input twiddle_h_rsc_0_9_AWLOCK;
  input [1:0] twiddle_h_rsc_0_9_AWBURST;
  input [2:0] twiddle_h_rsc_0_9_AWSIZE;
  input [7:0] twiddle_h_rsc_0_9_AWLEN;
  input [11:0] twiddle_h_rsc_0_9_AWADDR;
  input twiddle_h_rsc_0_9_AWID;
  output twiddle_h_rsc_triosy_0_9_lz;
  input twiddle_h_rsc_0_10_s_tdone;
  input twiddle_h_rsc_0_10_tr_write_done;
  input twiddle_h_rsc_0_10_RREADY;
  output twiddle_h_rsc_0_10_RVALID;
  output twiddle_h_rsc_0_10_RUSER;
  output twiddle_h_rsc_0_10_RLAST;
  output [1:0] twiddle_h_rsc_0_10_RRESP;
  output [31:0] twiddle_h_rsc_0_10_RDATA;
  output twiddle_h_rsc_0_10_RID;
  output twiddle_h_rsc_0_10_ARREADY;
  input twiddle_h_rsc_0_10_ARVALID;
  input twiddle_h_rsc_0_10_ARUSER;
  input [3:0] twiddle_h_rsc_0_10_ARREGION;
  input [3:0] twiddle_h_rsc_0_10_ARQOS;
  input [2:0] twiddle_h_rsc_0_10_ARPROT;
  input [3:0] twiddle_h_rsc_0_10_ARCACHE;
  input twiddle_h_rsc_0_10_ARLOCK;
  input [1:0] twiddle_h_rsc_0_10_ARBURST;
  input [2:0] twiddle_h_rsc_0_10_ARSIZE;
  input [7:0] twiddle_h_rsc_0_10_ARLEN;
  input [11:0] twiddle_h_rsc_0_10_ARADDR;
  input twiddle_h_rsc_0_10_ARID;
  input twiddle_h_rsc_0_10_BREADY;
  output twiddle_h_rsc_0_10_BVALID;
  output twiddle_h_rsc_0_10_BUSER;
  output [1:0] twiddle_h_rsc_0_10_BRESP;
  output twiddle_h_rsc_0_10_BID;
  output twiddle_h_rsc_0_10_WREADY;
  input twiddle_h_rsc_0_10_WVALID;
  input twiddle_h_rsc_0_10_WUSER;
  input twiddle_h_rsc_0_10_WLAST;
  input [3:0] twiddle_h_rsc_0_10_WSTRB;
  input [31:0] twiddle_h_rsc_0_10_WDATA;
  output twiddle_h_rsc_0_10_AWREADY;
  input twiddle_h_rsc_0_10_AWVALID;
  input twiddle_h_rsc_0_10_AWUSER;
  input [3:0] twiddle_h_rsc_0_10_AWREGION;
  input [3:0] twiddle_h_rsc_0_10_AWQOS;
  input [2:0] twiddle_h_rsc_0_10_AWPROT;
  input [3:0] twiddle_h_rsc_0_10_AWCACHE;
  input twiddle_h_rsc_0_10_AWLOCK;
  input [1:0] twiddle_h_rsc_0_10_AWBURST;
  input [2:0] twiddle_h_rsc_0_10_AWSIZE;
  input [7:0] twiddle_h_rsc_0_10_AWLEN;
  input [11:0] twiddle_h_rsc_0_10_AWADDR;
  input twiddle_h_rsc_0_10_AWID;
  output twiddle_h_rsc_triosy_0_10_lz;
  input twiddle_h_rsc_0_11_s_tdone;
  input twiddle_h_rsc_0_11_tr_write_done;
  input twiddle_h_rsc_0_11_RREADY;
  output twiddle_h_rsc_0_11_RVALID;
  output twiddle_h_rsc_0_11_RUSER;
  output twiddle_h_rsc_0_11_RLAST;
  output [1:0] twiddle_h_rsc_0_11_RRESP;
  output [31:0] twiddle_h_rsc_0_11_RDATA;
  output twiddle_h_rsc_0_11_RID;
  output twiddle_h_rsc_0_11_ARREADY;
  input twiddle_h_rsc_0_11_ARVALID;
  input twiddle_h_rsc_0_11_ARUSER;
  input [3:0] twiddle_h_rsc_0_11_ARREGION;
  input [3:0] twiddle_h_rsc_0_11_ARQOS;
  input [2:0] twiddle_h_rsc_0_11_ARPROT;
  input [3:0] twiddle_h_rsc_0_11_ARCACHE;
  input twiddle_h_rsc_0_11_ARLOCK;
  input [1:0] twiddle_h_rsc_0_11_ARBURST;
  input [2:0] twiddle_h_rsc_0_11_ARSIZE;
  input [7:0] twiddle_h_rsc_0_11_ARLEN;
  input [11:0] twiddle_h_rsc_0_11_ARADDR;
  input twiddle_h_rsc_0_11_ARID;
  input twiddle_h_rsc_0_11_BREADY;
  output twiddle_h_rsc_0_11_BVALID;
  output twiddle_h_rsc_0_11_BUSER;
  output [1:0] twiddle_h_rsc_0_11_BRESP;
  output twiddle_h_rsc_0_11_BID;
  output twiddle_h_rsc_0_11_WREADY;
  input twiddle_h_rsc_0_11_WVALID;
  input twiddle_h_rsc_0_11_WUSER;
  input twiddle_h_rsc_0_11_WLAST;
  input [3:0] twiddle_h_rsc_0_11_WSTRB;
  input [31:0] twiddle_h_rsc_0_11_WDATA;
  output twiddle_h_rsc_0_11_AWREADY;
  input twiddle_h_rsc_0_11_AWVALID;
  input twiddle_h_rsc_0_11_AWUSER;
  input [3:0] twiddle_h_rsc_0_11_AWREGION;
  input [3:0] twiddle_h_rsc_0_11_AWQOS;
  input [2:0] twiddle_h_rsc_0_11_AWPROT;
  input [3:0] twiddle_h_rsc_0_11_AWCACHE;
  input twiddle_h_rsc_0_11_AWLOCK;
  input [1:0] twiddle_h_rsc_0_11_AWBURST;
  input [2:0] twiddle_h_rsc_0_11_AWSIZE;
  input [7:0] twiddle_h_rsc_0_11_AWLEN;
  input [11:0] twiddle_h_rsc_0_11_AWADDR;
  input twiddle_h_rsc_0_11_AWID;
  output twiddle_h_rsc_triosy_0_11_lz;
  input twiddle_h_rsc_0_12_s_tdone;
  input twiddle_h_rsc_0_12_tr_write_done;
  input twiddle_h_rsc_0_12_RREADY;
  output twiddle_h_rsc_0_12_RVALID;
  output twiddle_h_rsc_0_12_RUSER;
  output twiddle_h_rsc_0_12_RLAST;
  output [1:0] twiddle_h_rsc_0_12_RRESP;
  output [31:0] twiddle_h_rsc_0_12_RDATA;
  output twiddle_h_rsc_0_12_RID;
  output twiddle_h_rsc_0_12_ARREADY;
  input twiddle_h_rsc_0_12_ARVALID;
  input twiddle_h_rsc_0_12_ARUSER;
  input [3:0] twiddle_h_rsc_0_12_ARREGION;
  input [3:0] twiddle_h_rsc_0_12_ARQOS;
  input [2:0] twiddle_h_rsc_0_12_ARPROT;
  input [3:0] twiddle_h_rsc_0_12_ARCACHE;
  input twiddle_h_rsc_0_12_ARLOCK;
  input [1:0] twiddle_h_rsc_0_12_ARBURST;
  input [2:0] twiddle_h_rsc_0_12_ARSIZE;
  input [7:0] twiddle_h_rsc_0_12_ARLEN;
  input [11:0] twiddle_h_rsc_0_12_ARADDR;
  input twiddle_h_rsc_0_12_ARID;
  input twiddle_h_rsc_0_12_BREADY;
  output twiddle_h_rsc_0_12_BVALID;
  output twiddle_h_rsc_0_12_BUSER;
  output [1:0] twiddle_h_rsc_0_12_BRESP;
  output twiddle_h_rsc_0_12_BID;
  output twiddle_h_rsc_0_12_WREADY;
  input twiddle_h_rsc_0_12_WVALID;
  input twiddle_h_rsc_0_12_WUSER;
  input twiddle_h_rsc_0_12_WLAST;
  input [3:0] twiddle_h_rsc_0_12_WSTRB;
  input [31:0] twiddle_h_rsc_0_12_WDATA;
  output twiddle_h_rsc_0_12_AWREADY;
  input twiddle_h_rsc_0_12_AWVALID;
  input twiddle_h_rsc_0_12_AWUSER;
  input [3:0] twiddle_h_rsc_0_12_AWREGION;
  input [3:0] twiddle_h_rsc_0_12_AWQOS;
  input [2:0] twiddle_h_rsc_0_12_AWPROT;
  input [3:0] twiddle_h_rsc_0_12_AWCACHE;
  input twiddle_h_rsc_0_12_AWLOCK;
  input [1:0] twiddle_h_rsc_0_12_AWBURST;
  input [2:0] twiddle_h_rsc_0_12_AWSIZE;
  input [7:0] twiddle_h_rsc_0_12_AWLEN;
  input [11:0] twiddle_h_rsc_0_12_AWADDR;
  input twiddle_h_rsc_0_12_AWID;
  output twiddle_h_rsc_triosy_0_12_lz;
  input twiddle_h_rsc_0_13_s_tdone;
  input twiddle_h_rsc_0_13_tr_write_done;
  input twiddle_h_rsc_0_13_RREADY;
  output twiddle_h_rsc_0_13_RVALID;
  output twiddle_h_rsc_0_13_RUSER;
  output twiddle_h_rsc_0_13_RLAST;
  output [1:0] twiddle_h_rsc_0_13_RRESP;
  output [31:0] twiddle_h_rsc_0_13_RDATA;
  output twiddle_h_rsc_0_13_RID;
  output twiddle_h_rsc_0_13_ARREADY;
  input twiddle_h_rsc_0_13_ARVALID;
  input twiddle_h_rsc_0_13_ARUSER;
  input [3:0] twiddle_h_rsc_0_13_ARREGION;
  input [3:0] twiddle_h_rsc_0_13_ARQOS;
  input [2:0] twiddle_h_rsc_0_13_ARPROT;
  input [3:0] twiddle_h_rsc_0_13_ARCACHE;
  input twiddle_h_rsc_0_13_ARLOCK;
  input [1:0] twiddle_h_rsc_0_13_ARBURST;
  input [2:0] twiddle_h_rsc_0_13_ARSIZE;
  input [7:0] twiddle_h_rsc_0_13_ARLEN;
  input [11:0] twiddle_h_rsc_0_13_ARADDR;
  input twiddle_h_rsc_0_13_ARID;
  input twiddle_h_rsc_0_13_BREADY;
  output twiddle_h_rsc_0_13_BVALID;
  output twiddle_h_rsc_0_13_BUSER;
  output [1:0] twiddle_h_rsc_0_13_BRESP;
  output twiddle_h_rsc_0_13_BID;
  output twiddle_h_rsc_0_13_WREADY;
  input twiddle_h_rsc_0_13_WVALID;
  input twiddle_h_rsc_0_13_WUSER;
  input twiddle_h_rsc_0_13_WLAST;
  input [3:0] twiddle_h_rsc_0_13_WSTRB;
  input [31:0] twiddle_h_rsc_0_13_WDATA;
  output twiddle_h_rsc_0_13_AWREADY;
  input twiddle_h_rsc_0_13_AWVALID;
  input twiddle_h_rsc_0_13_AWUSER;
  input [3:0] twiddle_h_rsc_0_13_AWREGION;
  input [3:0] twiddle_h_rsc_0_13_AWQOS;
  input [2:0] twiddle_h_rsc_0_13_AWPROT;
  input [3:0] twiddle_h_rsc_0_13_AWCACHE;
  input twiddle_h_rsc_0_13_AWLOCK;
  input [1:0] twiddle_h_rsc_0_13_AWBURST;
  input [2:0] twiddle_h_rsc_0_13_AWSIZE;
  input [7:0] twiddle_h_rsc_0_13_AWLEN;
  input [11:0] twiddle_h_rsc_0_13_AWADDR;
  input twiddle_h_rsc_0_13_AWID;
  output twiddle_h_rsc_triosy_0_13_lz;
  input twiddle_h_rsc_0_14_s_tdone;
  input twiddle_h_rsc_0_14_tr_write_done;
  input twiddle_h_rsc_0_14_RREADY;
  output twiddle_h_rsc_0_14_RVALID;
  output twiddle_h_rsc_0_14_RUSER;
  output twiddle_h_rsc_0_14_RLAST;
  output [1:0] twiddle_h_rsc_0_14_RRESP;
  output [31:0] twiddle_h_rsc_0_14_RDATA;
  output twiddle_h_rsc_0_14_RID;
  output twiddle_h_rsc_0_14_ARREADY;
  input twiddle_h_rsc_0_14_ARVALID;
  input twiddle_h_rsc_0_14_ARUSER;
  input [3:0] twiddle_h_rsc_0_14_ARREGION;
  input [3:0] twiddle_h_rsc_0_14_ARQOS;
  input [2:0] twiddle_h_rsc_0_14_ARPROT;
  input [3:0] twiddle_h_rsc_0_14_ARCACHE;
  input twiddle_h_rsc_0_14_ARLOCK;
  input [1:0] twiddle_h_rsc_0_14_ARBURST;
  input [2:0] twiddle_h_rsc_0_14_ARSIZE;
  input [7:0] twiddle_h_rsc_0_14_ARLEN;
  input [11:0] twiddle_h_rsc_0_14_ARADDR;
  input twiddle_h_rsc_0_14_ARID;
  input twiddle_h_rsc_0_14_BREADY;
  output twiddle_h_rsc_0_14_BVALID;
  output twiddle_h_rsc_0_14_BUSER;
  output [1:0] twiddle_h_rsc_0_14_BRESP;
  output twiddle_h_rsc_0_14_BID;
  output twiddle_h_rsc_0_14_WREADY;
  input twiddle_h_rsc_0_14_WVALID;
  input twiddle_h_rsc_0_14_WUSER;
  input twiddle_h_rsc_0_14_WLAST;
  input [3:0] twiddle_h_rsc_0_14_WSTRB;
  input [31:0] twiddle_h_rsc_0_14_WDATA;
  output twiddle_h_rsc_0_14_AWREADY;
  input twiddle_h_rsc_0_14_AWVALID;
  input twiddle_h_rsc_0_14_AWUSER;
  input [3:0] twiddle_h_rsc_0_14_AWREGION;
  input [3:0] twiddle_h_rsc_0_14_AWQOS;
  input [2:0] twiddle_h_rsc_0_14_AWPROT;
  input [3:0] twiddle_h_rsc_0_14_AWCACHE;
  input twiddle_h_rsc_0_14_AWLOCK;
  input [1:0] twiddle_h_rsc_0_14_AWBURST;
  input [2:0] twiddle_h_rsc_0_14_AWSIZE;
  input [7:0] twiddle_h_rsc_0_14_AWLEN;
  input [11:0] twiddle_h_rsc_0_14_AWADDR;
  input twiddle_h_rsc_0_14_AWID;
  output twiddle_h_rsc_triosy_0_14_lz;
  input twiddle_h_rsc_0_15_s_tdone;
  input twiddle_h_rsc_0_15_tr_write_done;
  input twiddle_h_rsc_0_15_RREADY;
  output twiddle_h_rsc_0_15_RVALID;
  output twiddle_h_rsc_0_15_RUSER;
  output twiddle_h_rsc_0_15_RLAST;
  output [1:0] twiddle_h_rsc_0_15_RRESP;
  output [31:0] twiddle_h_rsc_0_15_RDATA;
  output twiddle_h_rsc_0_15_RID;
  output twiddle_h_rsc_0_15_ARREADY;
  input twiddle_h_rsc_0_15_ARVALID;
  input twiddle_h_rsc_0_15_ARUSER;
  input [3:0] twiddle_h_rsc_0_15_ARREGION;
  input [3:0] twiddle_h_rsc_0_15_ARQOS;
  input [2:0] twiddle_h_rsc_0_15_ARPROT;
  input [3:0] twiddle_h_rsc_0_15_ARCACHE;
  input twiddle_h_rsc_0_15_ARLOCK;
  input [1:0] twiddle_h_rsc_0_15_ARBURST;
  input [2:0] twiddle_h_rsc_0_15_ARSIZE;
  input [7:0] twiddle_h_rsc_0_15_ARLEN;
  input [11:0] twiddle_h_rsc_0_15_ARADDR;
  input twiddle_h_rsc_0_15_ARID;
  input twiddle_h_rsc_0_15_BREADY;
  output twiddle_h_rsc_0_15_BVALID;
  output twiddle_h_rsc_0_15_BUSER;
  output [1:0] twiddle_h_rsc_0_15_BRESP;
  output twiddle_h_rsc_0_15_BID;
  output twiddle_h_rsc_0_15_WREADY;
  input twiddle_h_rsc_0_15_WVALID;
  input twiddle_h_rsc_0_15_WUSER;
  input twiddle_h_rsc_0_15_WLAST;
  input [3:0] twiddle_h_rsc_0_15_WSTRB;
  input [31:0] twiddle_h_rsc_0_15_WDATA;
  output twiddle_h_rsc_0_15_AWREADY;
  input twiddle_h_rsc_0_15_AWVALID;
  input twiddle_h_rsc_0_15_AWUSER;
  input [3:0] twiddle_h_rsc_0_15_AWREGION;
  input [3:0] twiddle_h_rsc_0_15_AWQOS;
  input [2:0] twiddle_h_rsc_0_15_AWPROT;
  input [3:0] twiddle_h_rsc_0_15_AWCACHE;
  input twiddle_h_rsc_0_15_AWLOCK;
  input [1:0] twiddle_h_rsc_0_15_AWBURST;
  input [2:0] twiddle_h_rsc_0_15_AWSIZE;
  input [7:0] twiddle_h_rsc_0_15_AWLEN;
  input [11:0] twiddle_h_rsc_0_15_AWADDR;
  input twiddle_h_rsc_0_15_AWID;
  output twiddle_h_rsc_triosy_0_15_lz;
  output yt_rsc_0_0_i_clken_d;
  input [31:0] yt_rsc_0_0_i_qa_d;
  input [31:0] yt_rsc_0_1_i_qa_d;
  input [31:0] yt_rsc_0_2_i_qa_d;
  input [31:0] yt_rsc_0_3_i_qa_d;
  input [31:0] yt_rsc_0_4_i_qa_d;
  input [31:0] yt_rsc_0_5_i_qa_d;
  input [31:0] yt_rsc_0_6_i_qa_d;
  input [31:0] yt_rsc_0_7_i_qa_d;
  input [31:0] yt_rsc_0_8_i_qa_d;
  input [31:0] yt_rsc_0_9_i_qa_d;
  input [31:0] yt_rsc_0_10_i_qa_d;
  input [31:0] yt_rsc_0_11_i_qa_d;
  input [31:0] yt_rsc_0_12_i_qa_d;
  input [31:0] yt_rsc_0_13_i_qa_d;
  input [31:0] yt_rsc_0_14_i_qa_d;
  input [31:0] yt_rsc_0_15_i_qa_d;
  output yt_rsc_0_16_i_clken_d;
  input [31:0] yt_rsc_0_16_i_qa_d;
  input [31:0] yt_rsc_0_17_i_qa_d;
  input [31:0] yt_rsc_0_18_i_qa_d;
  input [31:0] yt_rsc_0_19_i_qa_d;
  input [31:0] yt_rsc_0_20_i_qa_d;
  input [31:0] yt_rsc_0_21_i_qa_d;
  input [31:0] yt_rsc_0_22_i_qa_d;
  input [31:0] yt_rsc_0_23_i_qa_d;
  input [31:0] yt_rsc_0_24_i_qa_d;
  input [31:0] yt_rsc_0_25_i_qa_d;
  input [31:0] yt_rsc_0_26_i_qa_d;
  input [31:0] yt_rsc_0_27_i_qa_d;
  input [31:0] yt_rsc_0_28_i_qa_d;
  input [31:0] yt_rsc_0_29_i_qa_d;
  input [31:0] yt_rsc_0_30_i_qa_d;
  input [31:0] yt_rsc_0_31_i_qa_d;
  output yt_rsc_1_0_i_clken_d;
  output [31:0] yt_rsc_1_0_i_da_d;
  input [31:0] yt_rsc_1_0_i_qa_d;
  output [31:0] yt_rsc_1_1_i_da_d;
  input [31:0] yt_rsc_1_1_i_qa_d;
  output [31:0] yt_rsc_1_2_i_da_d;
  input [31:0] yt_rsc_1_2_i_qa_d;
  output [31:0] yt_rsc_1_3_i_da_d;
  input [31:0] yt_rsc_1_3_i_qa_d;
  output [31:0] yt_rsc_1_4_i_da_d;
  input [31:0] yt_rsc_1_4_i_qa_d;
  output [31:0] yt_rsc_1_5_i_da_d;
  input [31:0] yt_rsc_1_5_i_qa_d;
  output [31:0] yt_rsc_1_6_i_da_d;
  input [31:0] yt_rsc_1_6_i_qa_d;
  output [31:0] yt_rsc_1_7_i_da_d;
  input [31:0] yt_rsc_1_7_i_qa_d;
  output [31:0] yt_rsc_1_8_i_da_d;
  input [31:0] yt_rsc_1_8_i_qa_d;
  output [31:0] yt_rsc_1_9_i_da_d;
  input [31:0] yt_rsc_1_9_i_qa_d;
  output [31:0] yt_rsc_1_10_i_da_d;
  input [31:0] yt_rsc_1_10_i_qa_d;
  output [31:0] yt_rsc_1_11_i_da_d;
  input [31:0] yt_rsc_1_11_i_qa_d;
  output [31:0] yt_rsc_1_12_i_da_d;
  input [31:0] yt_rsc_1_12_i_qa_d;
  output [31:0] yt_rsc_1_13_i_da_d;
  input [31:0] yt_rsc_1_13_i_qa_d;
  output [31:0] yt_rsc_1_14_i_da_d;
  input [31:0] yt_rsc_1_14_i_qa_d;
  output [31:0] yt_rsc_1_15_i_da_d;
  input [31:0] yt_rsc_1_15_i_qa_d;
  output yt_rsc_1_16_i_clken_d;
  output [31:0] yt_rsc_1_16_i_da_d;
  input [31:0] yt_rsc_1_16_i_qa_d;
  output [31:0] yt_rsc_1_17_i_da_d;
  input [31:0] yt_rsc_1_17_i_qa_d;
  output [31:0] yt_rsc_1_18_i_da_d;
  input [31:0] yt_rsc_1_18_i_qa_d;
  output [31:0] yt_rsc_1_19_i_da_d;
  input [31:0] yt_rsc_1_19_i_qa_d;
  output [31:0] yt_rsc_1_20_i_da_d;
  input [31:0] yt_rsc_1_20_i_qa_d;
  output [31:0] yt_rsc_1_21_i_da_d;
  input [31:0] yt_rsc_1_21_i_qa_d;
  output [31:0] yt_rsc_1_22_i_da_d;
  input [31:0] yt_rsc_1_22_i_qa_d;
  output [31:0] yt_rsc_1_23_i_da_d;
  input [31:0] yt_rsc_1_23_i_qa_d;
  output [31:0] yt_rsc_1_24_i_da_d;
  input [31:0] yt_rsc_1_24_i_qa_d;
  output [31:0] yt_rsc_1_25_i_da_d;
  input [31:0] yt_rsc_1_25_i_qa_d;
  output [31:0] yt_rsc_1_26_i_da_d;
  input [31:0] yt_rsc_1_26_i_qa_d;
  output [31:0] yt_rsc_1_27_i_da_d;
  input [31:0] yt_rsc_1_27_i_qa_d;
  output [31:0] yt_rsc_1_28_i_da_d;
  input [31:0] yt_rsc_1_28_i_qa_d;
  output [31:0] yt_rsc_1_29_i_da_d;
  input [31:0] yt_rsc_1_29_i_qa_d;
  output [31:0] yt_rsc_1_30_i_da_d;
  input [31:0] yt_rsc_1_30_i_qa_d;
  output [31:0] yt_rsc_1_31_i_da_d;
  input [31:0] yt_rsc_1_31_i_qa_d;
  input [31:0] xt_rsc_0_0_i_qa_d;
  output xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_1_i_qa_d;
  output xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_2_i_qa_d;
  output xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_3_i_qa_d;
  output xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_4_i_qa_d;
  output xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_5_i_qa_d;
  output xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_6_i_qa_d;
  output xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_7_i_qa_d;
  output xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_8_i_qa_d;
  output xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_9_i_qa_d;
  output xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_10_i_qa_d;
  output xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_11_i_qa_d;
  output xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_12_i_qa_d;
  output xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_13_i_qa_d;
  output xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_14_i_qa_d;
  output xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_15_i_qa_d;
  output xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_16_i_qa_d;
  output xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_17_i_qa_d;
  output xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_18_i_qa_d;
  output xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_19_i_qa_d;
  output xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_20_i_qa_d;
  output xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_21_i_qa_d;
  output xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_22_i_qa_d;
  output xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_23_i_qa_d;
  output xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_24_i_qa_d;
  output xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_25_i_qa_d;
  output xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_26_i_qa_d;
  output xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_27_i_qa_d;
  output xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_28_i_qa_d;
  output xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_29_i_qa_d;
  output xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_30_i_qa_d;
  output xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_0_31_i_qa_d;
  output xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_0_i_qa_d;
  output xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_1_i_qa_d;
  output xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_2_i_qa_d;
  output xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_3_i_qa_d;
  output xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_4_i_qa_d;
  output xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_5_i_qa_d;
  output xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_6_i_qa_d;
  output xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_7_i_qa_d;
  output xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_8_i_qa_d;
  output xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_9_i_qa_d;
  output xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_10_i_qa_d;
  output xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_11_i_qa_d;
  output xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_12_i_qa_d;
  output xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_13_i_qa_d;
  output xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_14_i_qa_d;
  output xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_15_i_qa_d;
  output xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_16_i_qa_d;
  output xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_17_i_qa_d;
  output xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_18_i_qa_d;
  output xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_19_i_qa_d;
  output xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_20_i_qa_d;
  output xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_21_i_qa_d;
  output xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_22_i_qa_d;
  output xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_23_i_qa_d;
  output xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_24_i_qa_d;
  output xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_25_i_qa_d;
  output xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_26_i_qa_d;
  output xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_27_i_qa_d;
  output xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_28_i_qa_d;
  output xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_29_i_qa_d;
  output xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_30_i_qa_d;
  output xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  input [31:0] xt_rsc_1_31_i_qa_d;
  output xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  output [3:0] yt_rsc_0_0_i_adra_d_pff;
  output [31:0] yt_rsc_0_0_i_da_d_pff;
  output yt_rsc_0_0_i_wea_d_pff;
  output yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff;
  output [31:0] yt_rsc_0_1_i_da_d_pff;
  output [31:0] yt_rsc_0_2_i_da_d_pff;
  output [31:0] yt_rsc_0_3_i_da_d_pff;
  output [31:0] yt_rsc_0_4_i_da_d_pff;
  output [31:0] yt_rsc_0_5_i_da_d_pff;
  output [31:0] yt_rsc_0_6_i_da_d_pff;
  output [31:0] yt_rsc_0_7_i_da_d_pff;
  output [31:0] yt_rsc_0_8_i_da_d_pff;
  output [31:0] yt_rsc_0_9_i_da_d_pff;
  output [31:0] yt_rsc_0_10_i_da_d_pff;
  output [31:0] yt_rsc_0_11_i_da_d_pff;
  output [31:0] yt_rsc_0_12_i_da_d_pff;
  output [31:0] yt_rsc_0_13_i_da_d_pff;
  output [31:0] yt_rsc_0_14_i_da_d_pff;
  output [31:0] yt_rsc_0_15_i_da_d_pff;
  output [3:0] yt_rsc_0_16_i_adra_d_pff;
  output yt_rsc_0_16_i_wea_d_pff;
  output [3:0] yt_rsc_1_0_i_adra_d_pff;
  output yt_rsc_1_0_i_wea_d_pff;
  output yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff;
  output [3:0] yt_rsc_1_16_i_adra_d_pff;
  output yt_rsc_1_16_i_wea_d_pff;
  output [3:0] xt_rsc_0_0_i_adra_d_pff;
  output [31:0] xt_rsc_0_0_i_da_d_pff;
  output xt_rsc_0_0_i_wea_d_pff;
  output [31:0] xt_rsc_0_1_i_da_d_pff;
  output xt_rsc_0_1_i_wea_d_pff;
  output [31:0] xt_rsc_0_2_i_da_d_pff;
  output xt_rsc_0_2_i_wea_d_pff;
  output [31:0] xt_rsc_0_3_i_da_d_pff;
  output xt_rsc_0_3_i_wea_d_pff;
  output [31:0] xt_rsc_0_4_i_da_d_pff;
  output xt_rsc_0_4_i_wea_d_pff;
  output [31:0] xt_rsc_0_5_i_da_d_pff;
  output xt_rsc_0_5_i_wea_d_pff;
  output [31:0] xt_rsc_0_6_i_da_d_pff;
  output xt_rsc_0_6_i_wea_d_pff;
  output [31:0] xt_rsc_0_7_i_da_d_pff;
  output xt_rsc_0_7_i_wea_d_pff;
  output [31:0] xt_rsc_0_8_i_da_d_pff;
  output xt_rsc_0_8_i_wea_d_pff;
  output [31:0] xt_rsc_0_9_i_da_d_pff;
  output xt_rsc_0_9_i_wea_d_pff;
  output [31:0] xt_rsc_0_10_i_da_d_pff;
  output xt_rsc_0_10_i_wea_d_pff;
  output [31:0] xt_rsc_0_11_i_da_d_pff;
  output xt_rsc_0_11_i_wea_d_pff;
  output [31:0] xt_rsc_0_12_i_da_d_pff;
  output xt_rsc_0_12_i_wea_d_pff;
  output [31:0] xt_rsc_0_13_i_da_d_pff;
  output xt_rsc_0_13_i_wea_d_pff;
  output [31:0] xt_rsc_0_14_i_da_d_pff;
  output xt_rsc_0_14_i_wea_d_pff;
  output [31:0] xt_rsc_0_15_i_da_d_pff;
  output xt_rsc_0_15_i_wea_d_pff;
  output [3:0] xt_rsc_0_16_i_adra_d_pff;
  output xt_rsc_0_16_i_wea_d_pff;
  output xt_rsc_0_17_i_wea_d_pff;
  output xt_rsc_0_18_i_wea_d_pff;
  output xt_rsc_0_19_i_wea_d_pff;
  output xt_rsc_0_20_i_wea_d_pff;
  output xt_rsc_0_21_i_wea_d_pff;
  output xt_rsc_0_22_i_wea_d_pff;
  output xt_rsc_0_23_i_wea_d_pff;
  output xt_rsc_0_24_i_wea_d_pff;
  output xt_rsc_0_25_i_wea_d_pff;
  output xt_rsc_0_26_i_wea_d_pff;
  output xt_rsc_0_27_i_wea_d_pff;
  output xt_rsc_0_28_i_wea_d_pff;
  output xt_rsc_0_29_i_wea_d_pff;
  output xt_rsc_0_30_i_wea_d_pff;
  output xt_rsc_0_31_i_wea_d_pff;
  output [31:0] xt_rsc_1_0_i_da_d_pff;
  output xt_rsc_1_0_i_wea_d_pff;
  output [31:0] xt_rsc_1_1_i_da_d_pff;
  output xt_rsc_1_1_i_wea_d_pff;
  output [31:0] xt_rsc_1_2_i_da_d_pff;
  output xt_rsc_1_2_i_wea_d_pff;
  output [31:0] xt_rsc_1_3_i_da_d_pff;
  output xt_rsc_1_3_i_wea_d_pff;
  output [31:0] xt_rsc_1_4_i_da_d_pff;
  output xt_rsc_1_4_i_wea_d_pff;
  output [31:0] xt_rsc_1_5_i_da_d_pff;
  output xt_rsc_1_5_i_wea_d_pff;
  output [31:0] xt_rsc_1_6_i_da_d_pff;
  output xt_rsc_1_6_i_wea_d_pff;
  output [31:0] xt_rsc_1_7_i_da_d_pff;
  output xt_rsc_1_7_i_wea_d_pff;
  output [31:0] xt_rsc_1_8_i_da_d_pff;
  output xt_rsc_1_8_i_wea_d_pff;
  output [31:0] xt_rsc_1_9_i_da_d_pff;
  output xt_rsc_1_9_i_wea_d_pff;
  output [31:0] xt_rsc_1_10_i_da_d_pff;
  output xt_rsc_1_10_i_wea_d_pff;
  output [31:0] xt_rsc_1_11_i_da_d_pff;
  output xt_rsc_1_11_i_wea_d_pff;
  output [31:0] xt_rsc_1_12_i_da_d_pff;
  output xt_rsc_1_12_i_wea_d_pff;
  output [31:0] xt_rsc_1_13_i_da_d_pff;
  output xt_rsc_1_13_i_wea_d_pff;
  output [31:0] xt_rsc_1_14_i_da_d_pff;
  output xt_rsc_1_14_i_wea_d_pff;
  output [31:0] xt_rsc_1_15_i_da_d_pff;
  output xt_rsc_1_15_i_wea_d_pff;
  output xt_rsc_1_16_i_wea_d_pff;
  output xt_rsc_1_17_i_wea_d_pff;
  output xt_rsc_1_18_i_wea_d_pff;
  output xt_rsc_1_19_i_wea_d_pff;
  output xt_rsc_1_20_i_wea_d_pff;
  output xt_rsc_1_21_i_wea_d_pff;
  output xt_rsc_1_22_i_wea_d_pff;
  output xt_rsc_1_23_i_wea_d_pff;
  output xt_rsc_1_24_i_wea_d_pff;
  output xt_rsc_1_25_i_wea_d_pff;
  output xt_rsc_1_26_i_wea_d_pff;
  output xt_rsc_1_27_i_wea_d_pff;
  output xt_rsc_1_28_i_wea_d_pff;
  output xt_rsc_1_29_i_wea_d_pff;
  output xt_rsc_1_30_i_wea_d_pff;
  output xt_rsc_1_31_i_wea_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire [31:0] p_rsci_idat;
  wire core_wten;
  wire [31:0] xt_rsc_0_0_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_1_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_2_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_3_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_4_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_5_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_6_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_7_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_8_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_9_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_10_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_11_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_12_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_13_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_14_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_15_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_16_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_17_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_18_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_19_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_20_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_21_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_22_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_23_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_24_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_25_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_26_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_27_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_28_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_29_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_30_i_qa_d_mxwt;
  wire [31:0] xt_rsc_0_31_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_0_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_1_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_2_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_3_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_4_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_5_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_6_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_7_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_8_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_9_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_10_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_11_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_12_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_13_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_14_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_15_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_16_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_17_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_18_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_19_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_20_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_21_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_22_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_23_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_24_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_25_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_26_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_27_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_28_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_29_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_30_i_qa_d_mxwt;
  wire [31:0] xt_rsc_1_31_i_qa_d_mxwt;
  wire twiddle_rsc_0_0_i_wen_comp;
  wire [31:0] twiddle_rsc_0_0_i_s_din_mxwt;
  wire twiddle_rsc_0_1_i_wen_comp;
  wire [31:0] twiddle_rsc_0_1_i_s_din_mxwt;
  wire twiddle_rsc_0_2_i_wen_comp;
  wire [31:0] twiddle_rsc_0_2_i_s_din_mxwt;
  wire twiddle_rsc_0_3_i_wen_comp;
  wire [31:0] twiddle_rsc_0_3_i_s_din_mxwt;
  wire twiddle_rsc_0_4_i_wen_comp;
  wire [31:0] twiddle_rsc_0_4_i_s_din_mxwt;
  wire twiddle_rsc_0_5_i_wen_comp;
  wire [31:0] twiddle_rsc_0_5_i_s_din_mxwt;
  wire twiddle_rsc_0_6_i_wen_comp;
  wire [31:0] twiddle_rsc_0_6_i_s_din_mxwt;
  wire twiddle_rsc_0_7_i_wen_comp;
  wire [31:0] twiddle_rsc_0_7_i_s_din_mxwt;
  wire twiddle_rsc_0_8_i_wen_comp;
  wire [31:0] twiddle_rsc_0_8_i_s_din_mxwt;
  wire twiddle_rsc_0_9_i_wen_comp;
  wire [31:0] twiddle_rsc_0_9_i_s_din_mxwt;
  wire twiddle_rsc_0_10_i_wen_comp;
  wire [31:0] twiddle_rsc_0_10_i_s_din_mxwt;
  wire twiddle_rsc_0_11_i_wen_comp;
  wire [31:0] twiddle_rsc_0_11_i_s_din_mxwt;
  wire twiddle_rsc_0_12_i_wen_comp;
  wire [31:0] twiddle_rsc_0_12_i_s_din_mxwt;
  wire twiddle_rsc_0_13_i_wen_comp;
  wire [31:0] twiddle_rsc_0_13_i_s_din_mxwt;
  wire twiddle_rsc_0_14_i_wen_comp;
  wire [31:0] twiddle_rsc_0_14_i_s_din_mxwt;
  wire twiddle_rsc_0_15_i_wen_comp;
  wire [31:0] twiddle_rsc_0_15_i_s_din_mxwt;
  wire twiddle_h_rsc_0_0_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_0_i_s_din_mxwt;
  wire twiddle_h_rsc_0_1_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_1_i_s_din_mxwt;
  wire twiddle_h_rsc_0_2_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_2_i_s_din_mxwt;
  wire twiddle_h_rsc_0_3_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_3_i_s_din_mxwt;
  wire twiddle_h_rsc_0_4_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_4_i_s_din_mxwt;
  wire twiddle_h_rsc_0_5_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_5_i_s_din_mxwt;
  wire twiddle_h_rsc_0_6_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_6_i_s_din_mxwt;
  wire twiddle_h_rsc_0_7_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_7_i_s_din_mxwt;
  wire twiddle_h_rsc_0_8_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_8_i_s_din_mxwt;
  wire twiddle_h_rsc_0_9_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_9_i_s_din_mxwt;
  wire twiddle_h_rsc_0_10_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_10_i_s_din_mxwt;
  wire twiddle_h_rsc_0_11_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_11_i_s_din_mxwt;
  wire twiddle_h_rsc_0_12_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_12_i_s_din_mxwt;
  wire twiddle_h_rsc_0_13_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_13_i_s_din_mxwt;
  wire twiddle_h_rsc_0_14_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_14_i_s_din_mxwt;
  wire twiddle_h_rsc_0_15_i_wen_comp;
  wire [31:0] twiddle_h_rsc_0_15_i_s_din_mxwt;
  wire mult_t_mul_cmp_en;
  wire [51:0] mult_t_mul_cmp_z;
  wire [51:0] mult_t_mul_cmp_1_z;
  wire [51:0] mult_t_mul_cmp_2_z;
  wire [51:0] mult_t_mul_cmp_3_z;
  wire [51:0] mult_t_mul_cmp_4_z;
  wire [51:0] mult_t_mul_cmp_5_z;
  wire [51:0] mult_t_mul_cmp_6_z;
  wire [51:0] mult_t_mul_cmp_7_z;
  wire [51:0] mult_t_mul_cmp_8_z;
  wire [51:0] mult_t_mul_cmp_9_z;
  wire [51:0] mult_t_mul_cmp_10_z;
  wire [51:0] mult_t_mul_cmp_11_z;
  wire [51:0] mult_t_mul_cmp_12_z;
  wire [51:0] mult_t_mul_cmp_13_z;
  wire [51:0] mult_t_mul_cmp_14_z;
  wire [51:0] mult_t_mul_cmp_15_z;
  wire [31:0] mult_z_mul_cmp_z;
  wire mult_z_mul_cmp_1_en;
  wire [31:0] mult_z_mul_cmp_1_z;
  wire [31:0] mult_z_mul_cmp_2_z;
  wire [31:0] mult_z_mul_cmp_3_z;
  wire [31:0] mult_z_mul_cmp_4_z;
  wire [31:0] mult_z_mul_cmp_5_z;
  wire [31:0] mult_z_mul_cmp_6_z;
  wire [31:0] mult_z_mul_cmp_7_z;
  wire [31:0] mult_z_mul_cmp_8_z;
  wire [31:0] mult_z_mul_cmp_9_z;
  wire [31:0] mult_z_mul_cmp_10_z;
  wire [31:0] mult_z_mul_cmp_11_z;
  wire [31:0] mult_z_mul_cmp_12_z;
  wire [31:0] mult_z_mul_cmp_13_z;
  wire [31:0] mult_z_mul_cmp_14_z;
  wire [31:0] mult_z_mul_cmp_15_z;
  wire [31:0] mult_z_mul_cmp_16_z;
  wire [31:0] mult_z_mul_cmp_17_z;
  wire [31:0] mult_z_mul_cmp_18_z;
  wire [31:0] mult_z_mul_cmp_19_z;
  wire [31:0] mult_z_mul_cmp_20_z;
  wire [31:0] mult_z_mul_cmp_21_z;
  wire [31:0] mult_z_mul_cmp_22_z;
  wire [31:0] mult_z_mul_cmp_23_z;
  wire [31:0] mult_z_mul_cmp_24_z;
  wire [31:0] mult_z_mul_cmp_25_z;
  wire [31:0] mult_z_mul_cmp_26_z;
  wire [31:0] mult_z_mul_cmp_27_z;
  wire [31:0] mult_z_mul_cmp_28_z;
  wire [31:0] mult_z_mul_cmp_29_z;
  wire [31:0] mult_z_mul_cmp_30_z;
  wire [31:0] mult_z_mul_cmp_31_z;
  reg twiddle_h_rsc_0_0_i_s_raddr_core_4;
  wire [9:0] fsm_output;
  wire INNER_LOOP4_nor_tmp;
  wire INNER_LOOP2_nor_tmp;
  wire INNER_LOOP1_nor_tmp;
  wire and_dcpl_144;
  wire and_dcpl_147;
  wire and_dcpl_149;
  wire and_dcpl_151;
  wire and_dcpl_153;
  wire and_dcpl_155;
  wire and_dcpl_157;
  wire and_dcpl_158;
  wire and_dcpl_159;
  wire and_dcpl_161;
  wire and_dcpl_163;
  wire and_dcpl_164;
  wire and_dcpl_165;
  wire and_dcpl_174;
  wire and_dcpl_175;
  wire and_dcpl_176;
  wire or_dcpl_29;
  wire or_tmp_804;
  wire or_tmp_806;
  wire or_tmp_812;
  wire or_tmp_814;
  wire or_tmp_827;
  wire or_tmp_835;
  wire or_tmp_888;
  wire or_tmp_895;
  wire and_252_cse;
  wire and_253_cse;
  wire and_655_cse;
  wire and_656_cse;
  wire and_1058_cse;
  wire and_1059_cse;
  wire and_1056_cse;
  wire and_1057_cse;
  wire and_1229_cse;
  wire and_1230_cse;
  wire and_1363_cse;
  wire and_1364_cse;
  wire and_1686_cse;
  wire and_1695_cse;
  wire and_1704_cse;
  wire and_1929_cse;
  wire and_1944_cse;
  wire and_1948_cse;
  wire and_1978_cse;
  wire and_1994_cse;
  wire [5:0] INNER_LOOP4_r_9_4_sva_2;
  wire [6:0] nl_INNER_LOOP4_r_9_4_sva_2;
  reg [4:0] INNER_LOOP4_r_9_4_sva_4_0;
  reg [31:0] tmp_62_lpi_3_dfm_8;
  wire [31:0] mult_63_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_60_lpi_3_dfm_8;
  wire [31:0] mult_62_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_58_lpi_3_dfm_8;
  wire [31:0] mult_61_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_56_lpi_3_dfm_8;
  wire [31:0] mult_60_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_54_lpi_3_dfm_8;
  wire [31:0] mult_59_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_52_lpi_3_dfm_8;
  wire [31:0] mult_58_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_50_lpi_3_dfm_8;
  wire [31:0] mult_57_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_48_lpi_3_dfm_8;
  wire [31:0] mult_56_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_46_lpi_3_dfm_8;
  wire [31:0] mult_55_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_44_lpi_3_dfm_8;
  wire [31:0] mult_54_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_42_lpi_3_dfm_8;
  wire [31:0] mult_53_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_40_lpi_3_dfm_8;
  wire [31:0] mult_52_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_38_lpi_3_dfm_8;
  wire [31:0] mult_51_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_36_lpi_3_dfm_8;
  wire [31:0] mult_50_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_34_lpi_3_dfm_8;
  wire [31:0] mult_49_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_32_lpi_3_dfm_8;
  wire [31:0] mult_48_res_lpi_3_dfm_mx0;
  reg [4:0] INNER_LOOP3_r_9_4_sva_4_0;
  reg [31:0] tmp_126_lpi_3_dfm_8;
  wire [31:0] mult_47_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_124_lpi_3_dfm_8;
  wire [31:0] mult_46_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_122_lpi_3_dfm_8;
  wire [31:0] mult_45_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_120_lpi_3_dfm_8;
  wire [31:0] mult_44_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_118_lpi_3_dfm_8;
  wire [31:0] mult_43_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_116_lpi_3_dfm_8;
  wire [31:0] mult_42_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_114_lpi_3_dfm_8;
  wire [31:0] mult_41_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_112_lpi_3_dfm_8;
  wire [31:0] mult_40_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_110_lpi_3_dfm_8;
  wire [31:0] mult_39_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_108_lpi_3_dfm_8;
  wire [31:0] mult_38_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_106_lpi_3_dfm_8;
  wire [31:0] mult_37_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_104_lpi_3_dfm_8;
  wire [31:0] mult_36_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_102_lpi_3_dfm_8;
  wire [31:0] mult_35_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_100_lpi_3_dfm_8;
  wire [31:0] mult_34_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_98_lpi_3_dfm_8;
  wire [31:0] mult_33_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_96_lpi_3_dfm_8;
  wire [31:0] mult_32_res_lpi_3_dfm_mx0;
  reg [4:0] INNER_LOOP2_r_9_4_sva_4_0;
  reg [31:0] tmp_30_lpi_3_dfm_8;
  wire [31:0] mult_31_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_28_lpi_3_dfm_8;
  wire [31:0] mult_30_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_26_lpi_3_dfm_8;
  wire [31:0] mult_29_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_24_lpi_3_dfm_8;
  wire [31:0] mult_28_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_22_lpi_3_dfm_8;
  wire [31:0] mult_27_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_20_lpi_3_dfm_8;
  wire [31:0] mult_26_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_18_lpi_3_dfm_8;
  wire [31:0] mult_25_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_16_lpi_3_dfm_8;
  wire [31:0] mult_24_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_14_lpi_3_dfm_8;
  wire [31:0] mult_23_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_12_lpi_3_dfm_8;
  wire [31:0] mult_22_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_10_lpi_3_dfm_8;
  wire [31:0] mult_21_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_8_lpi_3_dfm_8;
  wire [31:0] mult_20_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_6_lpi_3_dfm_8;
  wire [31:0] mult_19_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_4_lpi_3_dfm_8;
  wire [31:0] mult_18_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_2_lpi_3_dfm_8;
  wire [31:0] mult_17_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_lpi_3_dfm_8;
  wire [31:0] mult_16_res_lpi_3_dfm_mx0;
  wire [5:0] INNER_LOOP1_r_9_4_sva_2;
  wire [6:0] nl_INNER_LOOP1_r_9_4_sva_2;
  reg [4:0] INNER_LOOP1_r_9_4_sva_4_0;
  reg [31:0] tmp_94_lpi_3_dfm_8;
  wire [31:0] mult_15_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_92_lpi_3_dfm_8;
  wire [31:0] mult_14_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_90_lpi_3_dfm_8;
  wire [31:0] mult_13_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_88_lpi_3_dfm_8;
  wire [31:0] mult_12_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_86_lpi_3_dfm_8;
  wire [31:0] mult_11_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_84_lpi_3_dfm_8;
  wire [31:0] mult_10_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_82_lpi_3_dfm_8;
  wire [31:0] mult_9_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_80_lpi_3_dfm_8;
  wire [31:0] mult_8_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_78_lpi_3_dfm_8;
  wire [31:0] mult_7_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_76_lpi_3_dfm_8;
  wire [31:0] mult_6_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_74_lpi_3_dfm_8;
  wire [31:0] mult_5_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_72_lpi_3_dfm_8;
  wire [31:0] mult_4_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_70_lpi_3_dfm_8;
  wire [31:0] mult_3_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_68_lpi_3_dfm_8;
  wire [31:0] mult_2_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_66_lpi_3_dfm_8;
  wire [31:0] mult_1_res_lpi_3_dfm_mx0;
  reg [31:0] tmp_64_lpi_3_dfm_8;
  wire [31:0] mult_res_lpi_3_dfm_mx0;
  reg [1:0] butterFly2_19_tw_asn_itm;
  reg c_1_sva;
  reg INNER_LOOP1_stage_0_12;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm;
  reg INNER_LOOP3_stage_0_12;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10;
  reg c_1_sva_1;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_191_itm_12;
  reg INNER_LOOP3_stage_0_13;
  reg INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_160_itm_12;
  reg INNER_LOOP1_stage_0_13;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm_1;
  reg INNER_LOOP2_stage_0_2;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm_1;
  reg INNER_LOOP4_stage_0_2;
  reg INNER_LOOP3_stage_0;
  reg INNER_LOOP1_stage_0;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_11;
  reg INNER_LOOP2_stage_0_12;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_11;
  reg INNER_LOOP4_stage_0_12;
  reg [2:0] operator_33_true_2_lshift_psp_2_0_sva;
  reg [1:0] operator_33_true_3_lshift_psp_1_0_sva;
  reg INNER_LOOP4_stage_0;
  reg INNER_LOOP3_stage_0_2;
  reg INNER_LOOP3_stage_0_4;
  reg INNER_LOOP3_stage_0_3;
  reg INNER_LOOP1_stage_0_3;
  reg INNER_LOOP1_stage_0_2;
  reg INNER_LOOP1_stage_0_4;
  reg INNER_LOOP2_stage_0_3;
  reg INNER_LOOP2_stage_0_4;
  reg INNER_LOOP4_stage_0_4;
  reg INNER_LOOP4_stage_0_3;
  reg INNER_LOOP3_stage_0_5;
  reg INNER_LOOP3_stage_0_6;
  reg INNER_LOOP3_stage_0_7;
  reg INNER_LOOP1_stage_0_6;
  reg INNER_LOOP1_stage_0_7;
  reg INNER_LOOP1_stage_0_5;
  reg INNER_LOOP2_stage_0_6;
  reg INNER_LOOP2_stage_0_7;
  reg INNER_LOOP2_stage_0_5;
  reg INNER_LOOP4_stage_0_5;
  reg INNER_LOOP4_stage_0_6;
  reg INNER_LOOP4_stage_0_7;
  reg INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1;
  reg [31:0] modulo_sub_base_sva_1;
  wire [32:0] nl_modulo_sub_base_sva_1;
  reg [31:0] modulo_sub_base_1_sva_1;
  wire [32:0] nl_modulo_sub_base_1_sva_1;
  reg [31:0] modulo_sub_base_2_sva_1;
  wire [32:0] nl_modulo_sub_base_2_sva_1;
  reg [31:0] modulo_sub_base_3_sva_1;
  wire [32:0] nl_modulo_sub_base_3_sva_1;
  reg [31:0] modulo_sub_base_4_sva_1;
  wire [32:0] nl_modulo_sub_base_4_sva_1;
  reg [31:0] modulo_sub_base_5_sva_1;
  wire [32:0] nl_modulo_sub_base_5_sva_1;
  reg [31:0] modulo_sub_base_6_sva_1;
  wire [32:0] nl_modulo_sub_base_6_sva_1;
  reg [31:0] modulo_sub_base_7_sva_1;
  wire [32:0] nl_modulo_sub_base_7_sva_1;
  reg [31:0] modulo_sub_base_8_sva_1;
  wire [32:0] nl_modulo_sub_base_8_sva_1;
  reg [31:0] modulo_sub_base_9_sva_1;
  wire [32:0] nl_modulo_sub_base_9_sva_1;
  reg [31:0] modulo_sub_base_10_sva_1;
  reg [31:0] modulo_sub_base_11_sva_1;
  wire [32:0] nl_modulo_sub_base_11_sva_1;
  reg [31:0] modulo_sub_base_12_sva_1;
  wire [32:0] nl_modulo_sub_base_12_sva_1;
  reg [31:0] modulo_sub_base_13_sva_1;
  wire [32:0] nl_modulo_sub_base_13_sva_1;
  reg [31:0] modulo_sub_base_14_sva_1;
  wire [32:0] nl_modulo_sub_base_14_sva_1;
  reg [31:0] modulo_sub_base_15_sva_1;
  wire [32:0] nl_modulo_sub_base_15_sva_1;
  reg mult_15_slc_32_svs_st_1;
  reg mult_14_slc_32_svs_st_1;
  reg mult_13_slc_32_svs_st_1;
  reg mult_12_slc_32_svs_st_1;
  reg mult_11_slc_32_svs_st_1;
  reg mult_10_slc_32_svs_st_1;
  reg mult_9_slc_32_svs_st_1;
  reg mult_8_slc_32_svs_st_1;
  reg mult_7_slc_32_svs_st_1;
  reg mult_6_slc_32_svs_st_1;
  reg mult_5_slc_32_svs_st_1;
  reg mult_4_slc_32_svs_st_1;
  reg mult_3_slc_32_svs_st_1;
  reg mult_2_slc_32_svs_st_1;
  reg mult_1_slc_32_svs_st_1;
  reg mult_slc_32_svs_st_1;
  reg [31:0] modulo_sub_base_16_sva_1;
  wire [32:0] nl_modulo_sub_base_16_sva_1;
  reg [31:0] modulo_sub_base_17_sva_1;
  wire [32:0] nl_modulo_sub_base_17_sva_1;
  reg [31:0] modulo_sub_base_18_sva_1;
  wire [32:0] nl_modulo_sub_base_18_sva_1;
  reg [31:0] modulo_sub_base_19_sva_1;
  wire [32:0] nl_modulo_sub_base_19_sva_1;
  reg [31:0] modulo_sub_base_20_sva_1;
  wire [32:0] nl_modulo_sub_base_20_sva_1;
  reg [31:0] modulo_sub_base_21_sva_1;
  wire [32:0] nl_modulo_sub_base_21_sva_1;
  reg [31:0] modulo_sub_base_22_sva_1;
  wire [32:0] nl_modulo_sub_base_22_sva_1;
  reg [31:0] modulo_sub_base_23_sva_1;
  wire [32:0] nl_modulo_sub_base_23_sva_1;
  reg [31:0] modulo_sub_base_24_sva_1;
  wire [32:0] nl_modulo_sub_base_24_sva_1;
  reg [31:0] modulo_sub_base_25_sva_1;
  wire [32:0] nl_modulo_sub_base_25_sva_1;
  reg [31:0] modulo_sub_base_26_sva_1;
  wire [32:0] nl_modulo_sub_base_26_sva_1;
  reg [31:0] modulo_sub_base_27_sva_1;
  wire [32:0] nl_modulo_sub_base_27_sva_1;
  reg [31:0] modulo_sub_base_28_sva_1;
  wire [32:0] nl_modulo_sub_base_28_sva_1;
  reg [31:0] modulo_sub_base_29_sva_1;
  wire [32:0] nl_modulo_sub_base_29_sva_1;
  reg [31:0] modulo_sub_base_30_sva_1;
  wire [32:0] nl_modulo_sub_base_30_sva_1;
  reg [31:0] modulo_sub_base_31_sva_1;
  wire [32:0] nl_modulo_sub_base_31_sva_1;
  reg INNER_LOOP2_stage_0;
  reg mult_31_slc_32_svs_st_1;
  reg mult_30_slc_32_svs_st_1;
  reg mult_29_slc_32_svs_st_1;
  reg mult_28_slc_32_svs_st_1;
  reg mult_27_slc_32_svs_st_1;
  reg mult_26_slc_32_svs_st_1;
  reg mult_25_slc_32_svs_st_1;
  reg mult_24_slc_32_svs_st_1;
  reg mult_23_slc_32_svs_st_1;
  reg mult_22_slc_32_svs_st_1;
  reg mult_21_slc_32_svs_st_1;
  reg mult_20_slc_32_svs_st_1;
  reg mult_19_slc_32_svs_st_1;
  reg mult_18_slc_32_svs_st_1;
  reg mult_17_slc_32_svs_st_1;
  reg mult_16_slc_32_svs_st_1;
  reg [31:0] modulo_sub_base_32_sva_1;
  wire [32:0] nl_modulo_sub_base_32_sva_1;
  reg [31:0] modulo_sub_base_33_sva_1;
  wire [32:0] nl_modulo_sub_base_33_sva_1;
  reg [31:0] modulo_sub_base_34_sva_1;
  wire [32:0] nl_modulo_sub_base_34_sva_1;
  reg [31:0] modulo_sub_base_35_sva_1;
  wire [32:0] nl_modulo_sub_base_35_sva_1;
  reg [31:0] modulo_sub_base_36_sva_1;
  wire [32:0] nl_modulo_sub_base_36_sva_1;
  reg [31:0] modulo_sub_base_37_sva_1;
  wire [32:0] nl_modulo_sub_base_37_sva_1;
  reg [31:0] modulo_sub_base_38_sva_1;
  wire [32:0] nl_modulo_sub_base_38_sva_1;
  reg [31:0] modulo_sub_base_39_sva_1;
  wire [32:0] nl_modulo_sub_base_39_sva_1;
  reg [31:0] modulo_sub_base_40_sva_1;
  wire [32:0] nl_modulo_sub_base_40_sva_1;
  reg [31:0] modulo_sub_base_41_sva_1;
  wire [32:0] nl_modulo_sub_base_41_sva_1;
  reg [31:0] modulo_sub_base_42_sva_1;
  wire [32:0] nl_modulo_sub_base_42_sva_1;
  reg [31:0] modulo_sub_base_43_sva_1;
  wire [32:0] nl_modulo_sub_base_43_sva_1;
  reg [31:0] modulo_sub_base_44_sva_1;
  reg [31:0] modulo_sub_base_45_sva_1;
  wire [32:0] nl_modulo_sub_base_45_sva_1;
  reg [31:0] modulo_sub_base_46_sva_1;
  wire [32:0] nl_modulo_sub_base_46_sva_1;
  reg [31:0] modulo_sub_base_47_sva_1;
  wire [32:0] nl_modulo_sub_base_47_sva_1;
  reg mult_47_slc_32_svs_st_1;
  reg mult_46_slc_32_svs_st_1;
  reg mult_45_slc_32_svs_st_1;
  reg mult_44_slc_32_svs_st_1;
  reg mult_43_slc_32_svs_st_1;
  reg mult_42_slc_32_svs_st_1;
  reg mult_41_slc_32_svs_st_1;
  reg mult_40_slc_32_svs_st_1;
  reg mult_39_slc_32_svs_st_1;
  reg mult_38_slc_32_svs_st_1;
  reg mult_37_slc_32_svs_st_1;
  reg mult_36_slc_32_svs_st_1;
  reg mult_35_slc_32_svs_st_1;
  reg mult_34_slc_32_svs_st_1;
  reg mult_33_slc_32_svs_st_1;
  reg mult_32_slc_32_svs_st_1;
  reg [31:0] modulo_sub_base_48_sva_1;
  wire [32:0] nl_modulo_sub_base_48_sva_1;
  reg [31:0] modulo_sub_base_49_sva_1;
  wire [32:0] nl_modulo_sub_base_49_sva_1;
  reg [31:0] modulo_sub_base_50_sva_1;
  wire [32:0] nl_modulo_sub_base_50_sva_1;
  reg [31:0] modulo_sub_base_51_sva_1;
  wire [32:0] nl_modulo_sub_base_51_sva_1;
  reg [31:0] modulo_sub_base_52_sva_1;
  wire [32:0] nl_modulo_sub_base_52_sva_1;
  reg [31:0] modulo_sub_base_53_sva_1;
  wire [32:0] nl_modulo_sub_base_53_sva_1;
  reg [31:0] modulo_sub_base_54_sva_1;
  wire [32:0] nl_modulo_sub_base_54_sva_1;
  reg [31:0] modulo_sub_base_55_sva_1;
  wire [32:0] nl_modulo_sub_base_55_sva_1;
  reg [31:0] modulo_sub_base_56_sva_1;
  wire [32:0] nl_modulo_sub_base_56_sva_1;
  reg [31:0] modulo_sub_base_57_sva_1;
  wire [32:0] nl_modulo_sub_base_57_sva_1;
  reg [31:0] modulo_sub_base_58_sva_1;
  wire [32:0] nl_modulo_sub_base_58_sva_1;
  reg [31:0] modulo_sub_base_59_sva_1;
  wire [32:0] nl_modulo_sub_base_59_sva_1;
  reg [31:0] modulo_sub_base_60_sva_1;
  wire [32:0] nl_modulo_sub_base_60_sva_1;
  reg [31:0] modulo_sub_base_61_sva_1;
  wire [32:0] nl_modulo_sub_base_61_sva_1;
  reg [31:0] modulo_sub_base_62_sva_1;
  wire [32:0] nl_modulo_sub_base_62_sva_1;
  reg [31:0] modulo_sub_base_63_sva_1;
  wire [32:0] nl_modulo_sub_base_63_sva_1;
  reg mult_63_slc_32_svs_st_1;
  reg mult_62_slc_32_svs_st_1;
  reg mult_61_slc_32_svs_st_1;
  reg mult_60_slc_32_svs_st_1;
  reg mult_59_slc_32_svs_st_1;
  reg mult_58_slc_32_svs_st_1;
  reg mult_57_slc_32_svs_st_1;
  reg mult_56_slc_32_svs_st_1;
  reg mult_55_slc_32_svs_st_1;
  reg mult_54_slc_32_svs_st_1;
  reg mult_53_slc_32_svs_st_1;
  reg mult_52_slc_32_svs_st_1;
  reg mult_51_slc_32_svs_st_1;
  reg mult_50_slc_32_svs_st_1;
  reg mult_49_slc_32_svs_st_1;
  reg mult_48_slc_32_svs_st_1;
  reg [31:0] modulo_add_base_63_sva_1;
  wire [32:0] nl_modulo_add_base_63_sva_1;
  reg [31:0] modulo_add_base_62_sva_1;
  wire [32:0] nl_modulo_add_base_62_sva_1;
  reg [31:0] modulo_add_base_61_sva_1;
  wire [32:0] nl_modulo_add_base_61_sva_1;
  reg [31:0] modulo_add_base_60_sva_1;
  wire [32:0] nl_modulo_add_base_60_sva_1;
  reg [31:0] modulo_add_base_59_sva_1;
  wire [32:0] nl_modulo_add_base_59_sva_1;
  reg [31:0] modulo_add_base_58_sva_1;
  wire [32:0] nl_modulo_add_base_58_sva_1;
  reg [31:0] modulo_add_base_57_sva_1;
  wire [32:0] nl_modulo_add_base_57_sva_1;
  reg [31:0] modulo_add_base_56_sva_1;
  wire [32:0] nl_modulo_add_base_56_sva_1;
  reg [31:0] modulo_add_base_55_sva_1;
  wire [32:0] nl_modulo_add_base_55_sva_1;
  reg [31:0] modulo_add_base_54_sva_1;
  wire [32:0] nl_modulo_add_base_54_sva_1;
  reg [31:0] modulo_add_base_53_sva_1;
  wire [32:0] nl_modulo_add_base_53_sva_1;
  reg [31:0] modulo_add_base_52_sva_1;
  wire [32:0] nl_modulo_add_base_52_sva_1;
  reg [31:0] modulo_add_base_51_sva_1;
  wire [32:0] nl_modulo_add_base_51_sva_1;
  reg [31:0] modulo_add_base_50_sva_1;
  wire [32:0] nl_modulo_add_base_50_sva_1;
  reg [31:0] modulo_add_base_49_sva_1;
  wire [32:0] nl_modulo_add_base_49_sva_1;
  reg [31:0] modulo_add_base_48_sva_1;
  wire [32:0] nl_modulo_add_base_48_sva_1;
  wire [31:0] mult_63_res_sva_2;
  wire [32:0] nl_mult_63_res_sva_2;
  wire [31:0] mult_62_res_sva_2;
  wire [32:0] nl_mult_62_res_sva_2;
  wire [31:0] mult_61_res_sva_2;
  wire [32:0] nl_mult_61_res_sva_2;
  wire [31:0] mult_60_res_sva_2;
  wire [32:0] nl_mult_60_res_sva_2;
  wire [31:0] mult_59_res_sva_2;
  wire [32:0] nl_mult_59_res_sva_2;
  wire [31:0] mult_58_res_sva_2;
  wire [32:0] nl_mult_58_res_sva_2;
  wire [31:0] mult_57_res_sva_2;
  wire [32:0] nl_mult_57_res_sva_2;
  wire [31:0] mult_56_res_sva_2;
  wire [32:0] nl_mult_56_res_sva_2;
  wire [31:0] mult_55_res_sva_2;
  wire [32:0] nl_mult_55_res_sva_2;
  wire [31:0] mult_54_res_sva_2;
  wire [32:0] nl_mult_54_res_sva_2;
  wire [31:0] mult_53_res_sva_2;
  wire [32:0] nl_mult_53_res_sva_2;
  wire [31:0] mult_52_res_sva_2;
  wire [32:0] nl_mult_52_res_sva_2;
  wire [31:0] mult_51_res_sva_2;
  wire [32:0] nl_mult_51_res_sva_2;
  wire [31:0] mult_50_res_sva_2;
  wire [32:0] nl_mult_50_res_sva_2;
  wire [31:0] mult_49_res_sva_2;
  wire [32:0] nl_mult_49_res_sva_2;
  wire [31:0] mult_48_res_sva_2;
  wire [32:0] nl_mult_48_res_sva_2;
  reg [31:0] modulo_add_base_47_sva_1;
  wire [32:0] nl_modulo_add_base_47_sva_1;
  reg [31:0] modulo_add_base_46_sva_1;
  wire [32:0] nl_modulo_add_base_46_sva_1;
  reg [31:0] modulo_add_base_45_sva_1;
  wire [32:0] nl_modulo_add_base_45_sva_1;
  reg [31:0] modulo_add_base_44_sva_1;
  reg [31:0] modulo_add_base_43_sva_1;
  wire [32:0] nl_modulo_add_base_43_sva_1;
  reg [31:0] modulo_add_base_42_sva_1;
  wire [32:0] nl_modulo_add_base_42_sva_1;
  reg [31:0] modulo_add_base_41_sva_1;
  wire [32:0] nl_modulo_add_base_41_sva_1;
  reg [31:0] modulo_add_base_40_sva_1;
  wire [32:0] nl_modulo_add_base_40_sva_1;
  reg [31:0] modulo_add_base_39_sva_1;
  wire [32:0] nl_modulo_add_base_39_sva_1;
  reg [31:0] modulo_add_base_38_sva_1;
  wire [32:0] nl_modulo_add_base_38_sva_1;
  reg [31:0] modulo_add_base_37_sva_1;
  wire [32:0] nl_modulo_add_base_37_sva_1;
  reg [31:0] modulo_add_base_36_sva_1;
  wire [32:0] nl_modulo_add_base_36_sva_1;
  reg [31:0] modulo_add_base_35_sva_1;
  wire [32:0] nl_modulo_add_base_35_sva_1;
  reg [31:0] modulo_add_base_34_sva_1;
  wire [32:0] nl_modulo_add_base_34_sva_1;
  reg [31:0] modulo_add_base_33_sva_1;
  wire [32:0] nl_modulo_add_base_33_sva_1;
  reg [31:0] modulo_add_base_32_sva_1;
  wire [32:0] nl_modulo_add_base_32_sva_1;
  wire [31:0] mult_47_res_sva_2;
  wire [32:0] nl_mult_47_res_sva_2;
  wire [31:0] mult_46_res_sva_2;
  wire [32:0] nl_mult_46_res_sva_2;
  wire [31:0] mult_45_res_sva_2;
  wire [32:0] nl_mult_45_res_sva_2;
  wire [31:0] mult_44_res_sva_2;
  wire [32:0] nl_mult_44_res_sva_2;
  wire [31:0] mult_43_res_sva_2;
  wire [32:0] nl_mult_43_res_sva_2;
  wire [31:0] mult_42_res_sva_2;
  wire [32:0] nl_mult_42_res_sva_2;
  wire [31:0] mult_41_res_sva_2;
  wire [32:0] nl_mult_41_res_sva_2;
  wire [31:0] mult_40_res_sva_2;
  wire [32:0] nl_mult_40_res_sva_2;
  wire [31:0] mult_39_res_sva_2;
  wire [32:0] nl_mult_39_res_sva_2;
  wire [31:0] mult_38_res_sva_2;
  wire [32:0] nl_mult_38_res_sva_2;
  wire [31:0] mult_37_res_sva_2;
  wire [32:0] nl_mult_37_res_sva_2;
  wire [31:0] mult_36_res_sva_2;
  wire [32:0] nl_mult_36_res_sva_2;
  wire [31:0] mult_35_res_sva_2;
  wire [32:0] nl_mult_35_res_sva_2;
  wire [31:0] mult_34_res_sva_2;
  wire [32:0] nl_mult_34_res_sva_2;
  wire [31:0] mult_33_res_sva_2;
  wire [32:0] nl_mult_33_res_sva_2;
  wire [31:0] mult_32_res_sva_2;
  wire [32:0] nl_mult_32_res_sva_2;
  reg [31:0] modulo_add_base_31_sva_1;
  wire [32:0] nl_modulo_add_base_31_sva_1;
  reg [31:0] modulo_add_base_30_sva_1;
  wire [32:0] nl_modulo_add_base_30_sva_1;
  reg [31:0] modulo_add_base_29_sva_1;
  wire [32:0] nl_modulo_add_base_29_sva_1;
  reg [31:0] modulo_add_base_28_sva_1;
  wire [32:0] nl_modulo_add_base_28_sva_1;
  reg [31:0] modulo_add_base_27_sva_1;
  wire [32:0] nl_modulo_add_base_27_sva_1;
  reg [31:0] modulo_add_base_26_sva_1;
  wire [32:0] nl_modulo_add_base_26_sva_1;
  reg [31:0] modulo_add_base_25_sva_1;
  wire [32:0] nl_modulo_add_base_25_sva_1;
  reg [31:0] modulo_add_base_24_sva_1;
  wire [32:0] nl_modulo_add_base_24_sva_1;
  reg [31:0] modulo_add_base_23_sva_1;
  wire [32:0] nl_modulo_add_base_23_sva_1;
  reg [31:0] modulo_add_base_22_sva_1;
  wire [32:0] nl_modulo_add_base_22_sva_1;
  reg [31:0] modulo_add_base_21_sva_1;
  wire [32:0] nl_modulo_add_base_21_sva_1;
  reg [31:0] modulo_add_base_20_sva_1;
  wire [32:0] nl_modulo_add_base_20_sva_1;
  reg [31:0] modulo_add_base_19_sva_1;
  wire [32:0] nl_modulo_add_base_19_sva_1;
  reg [31:0] modulo_add_base_18_sva_1;
  wire [32:0] nl_modulo_add_base_18_sva_1;
  reg [31:0] modulo_add_base_17_sva_1;
  wire [32:0] nl_modulo_add_base_17_sva_1;
  reg [31:0] modulo_add_base_16_sva_1;
  wire [32:0] nl_modulo_add_base_16_sva_1;
  wire [31:0] mult_31_res_sva_2;
  wire [32:0] nl_mult_31_res_sva_2;
  wire [31:0] mult_30_res_sva_2;
  wire [32:0] nl_mult_30_res_sva_2;
  wire [31:0] mult_29_res_sva_2;
  wire [32:0] nl_mult_29_res_sva_2;
  wire [31:0] mult_28_res_sva_2;
  wire [32:0] nl_mult_28_res_sva_2;
  wire [31:0] mult_27_res_sva_2;
  wire [32:0] nl_mult_27_res_sva_2;
  wire [31:0] mult_26_res_sva_2;
  wire [32:0] nl_mult_26_res_sva_2;
  wire [31:0] mult_25_res_sva_2;
  wire [32:0] nl_mult_25_res_sva_2;
  reg [31:0] modulo_add_base_15_sva_1;
  wire [32:0] nl_modulo_add_base_15_sva_1;
  reg [31:0] modulo_add_base_14_sva_1;
  wire [32:0] nl_modulo_add_base_14_sva_1;
  reg [31:0] modulo_add_base_13_sva_1;
  wire [32:0] nl_modulo_add_base_13_sva_1;
  reg [31:0] modulo_add_base_12_sva_1;
  wire [32:0] nl_modulo_add_base_12_sva_1;
  reg [31:0] modulo_add_base_11_sva_1;
  wire [32:0] nl_modulo_add_base_11_sva_1;
  reg [31:0] modulo_add_base_10_sva_1;
  reg [31:0] modulo_add_base_9_sva_1;
  wire [32:0] nl_modulo_add_base_9_sva_1;
  reg [31:0] modulo_add_base_8_sva_1;
  wire [32:0] nl_modulo_add_base_8_sva_1;
  reg [31:0] modulo_add_base_7_sva_1;
  wire [32:0] nl_modulo_add_base_7_sva_1;
  reg [31:0] modulo_add_base_6_sva_1;
  wire [32:0] nl_modulo_add_base_6_sva_1;
  reg [31:0] modulo_add_base_5_sva_1;
  wire [32:0] nl_modulo_add_base_5_sva_1;
  reg [31:0] modulo_add_base_4_sva_1;
  wire [32:0] nl_modulo_add_base_4_sva_1;
  reg [31:0] modulo_add_base_3_sva_1;
  wire [32:0] nl_modulo_add_base_3_sva_1;
  reg [31:0] modulo_add_base_2_sva_1;
  wire [32:0] nl_modulo_add_base_2_sva_1;
  reg [31:0] modulo_add_base_1_sva_1;
  wire [32:0] nl_modulo_add_base_1_sva_1;
  reg [31:0] modulo_add_base_sva_1;
  wire [32:0] nl_modulo_add_base_sva_1;
  wire [31:0] mult_15_res_sva_2;
  wire [32:0] nl_mult_15_res_sva_2;
  wire [31:0] mult_14_res_sva_2;
  wire [32:0] nl_mult_14_res_sva_2;
  wire [31:0] mult_13_res_sva_2;
  wire [32:0] nl_mult_13_res_sva_2;
  wire [31:0] mult_12_res_sva_2;
  wire [32:0] nl_mult_12_res_sva_2;
  wire [31:0] mult_11_res_sva_2;
  wire [32:0] nl_mult_11_res_sva_2;
  wire [31:0] mult_10_res_sva_2;
  wire [32:0] nl_mult_10_res_sva_2;
  wire [31:0] mult_9_res_sva_2;
  wire [32:0] nl_mult_9_res_sva_2;
  wire [31:0] mult_8_res_sva_2;
  wire [32:0] nl_mult_8_res_sva_2;
  wire [31:0] mult_7_res_sva_2;
  wire [32:0] nl_mult_7_res_sva_2;
  wire [31:0] mult_6_res_sva_2;
  wire [32:0] nl_mult_6_res_sva_2;
  wire [31:0] mult_5_res_sva_2;
  wire [32:0] nl_mult_5_res_sva_2;
  wire [31:0] mult_4_res_sva_2;
  wire [32:0] nl_mult_4_res_sva_2;
  wire [31:0] mult_3_res_sva_2;
  wire [32:0] nl_mult_3_res_sva_2;
  wire [31:0] mult_2_res_sva_2;
  wire [32:0] nl_mult_2_res_sva_2;
  wire [31:0] mult_1_res_sva_2;
  wire [32:0] nl_mult_1_res_sva_2;
  wire [31:0] mult_res_sva_2;
  wire [32:0] nl_mult_res_sva_2;
  reg [31:0] p_sva;
  wire butterFly1_15_and_ssc;
  wire butterFly1_15_and_ssc_2;
  wire butterFly1_15_and_ssc_3;
  wire butterFly1_14_and_ssc;
  wire butterFly1_14_and_ssc_2;
  wire butterFly1_14_and_ssc_3;
  wire butterFly1_13_and_ssc;
  wire butterFly1_13_and_ssc_2;
  wire butterFly1_13_and_ssc_3;
  wire butterFly1_12_and_ssc;
  wire butterFly1_12_and_ssc_2;
  wire butterFly1_12_and_ssc_3;
  wire butterFly1_11_and_ssc;
  wire butterFly1_11_and_ssc_2;
  wire butterFly1_11_and_ssc_3;
  wire butterFly1_10_and_ssc;
  wire butterFly1_10_and_ssc_2;
  wire butterFly1_10_and_ssc_3;
  wire butterFly1_9_and_ssc;
  wire butterFly1_9_and_ssc_2;
  wire butterFly1_9_and_ssc_3;
  wire butterFly1_8_and_ssc;
  wire butterFly1_8_and_ssc_2;
  wire butterFly1_8_and_ssc_3;
  wire butterFly1_7_and_ssc;
  wire butterFly1_7_and_ssc_2;
  wire butterFly1_7_and_ssc_3;
  wire butterFly1_6_and_ssc;
  wire butterFly1_6_and_ssc_2;
  wire butterFly1_6_and_ssc_3;
  wire butterFly1_5_and_ssc;
  wire butterFly1_5_and_ssc_2;
  wire butterFly1_5_and_ssc_3;
  wire butterFly1_4_and_ssc;
  wire butterFly1_4_and_ssc_2;
  wire butterFly1_4_and_ssc_3;
  wire butterFly1_3_and_ssc;
  wire butterFly1_3_and_ssc_2;
  wire butterFly1_3_and_ssc_3;
  wire butterFly1_2_and_ssc;
  wire butterFly1_2_and_ssc_2;
  wire butterFly1_2_and_ssc_3;
  wire butterFly1_1_and_ssc;
  wire butterFly1_1_and_ssc_2;
  wire butterFly1_1_and_ssc_3;
  wire butterFly1_and_ssc;
  wire butterFly1_and_ssc_2;
  wire butterFly1_and_ssc_3;
  reg reg_yt_rsc_0_0_cgo_cse;
  reg reg_yt_rsc_0_16_cgo_cse;
  reg reg_yt_rsc_1_0_cgo_cse;
  reg reg_yt_rsc_1_16_cgo_cse;
  reg reg_xt_rsc_0_0_i_oswt_cse;
  reg reg_xt_rsc_0_16_i_oswt_cse;
  reg reg_xt_rsc_1_0_i_oswt_cse;
  reg reg_xt_rsc_1_16_i_oswt_cse;
  reg reg_twiddle_rsc_0_0_i_oswt_cse;
  reg reg_twiddle_rsc_0_1_i_oswt_cse;
  reg reg_twiddle_rsc_0_2_i_oswt_cse;
  reg [4:0] reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse;
  reg reg_twiddle_rsc_0_3_i_oswt_cse;
  reg reg_twiddle_rsc_0_4_i_oswt_cse;
  reg reg_twiddle_rsc_0_5_i_oswt_cse;
  reg reg_twiddle_rsc_0_6_i_oswt_cse;
  reg reg_twiddle_rsc_0_7_i_oswt_cse;
  reg reg_twiddle_rsc_0_8_i_oswt_cse;
  reg [3:0] reg_twiddle_rsc_0_0_i_s_raddr_core_3_0_cse;
  reg reg_xt_rsc_triosy_1_31_obj_iswt0_cse;
  reg reg_ensig_cgo_cse;
  wire INNER_LOOP1_tw_h_and_49_cse;
  wire INNER_LOOP1_tw_h_and_51_cse;
  wire INNER_LOOP1_tw_h_and_53_cse;
  wire INNER_LOOP1_tw_h_and_55_cse;
  wire INNER_LOOP1_tw_h_and_44_cse;
  wire INNER_LOOP1_tw_h_and_45_cse;
  wire INNER_LOOP1_tw_h_and_46_cse;
  wire INNER_LOOP1_tw_h_and_47_cse;
  wire INNER_LOOP1_tw_h_and_48_cse;
  wire INNER_LOOP1_tw_h_and_50_cse;
  wire INNER_LOOP1_tw_h_and_52_cse;
  wire INNER_LOOP1_tw_h_and_54_cse;
  reg reg_ensig_cgo_17_cse;
  reg [31:0] reg_mult_15_z_asn_itm_1_cse;
  reg [31:0] reg_mult_14_z_asn_itm_1_cse;
  reg [31:0] reg_mult_13_z_asn_itm_1_cse;
  reg [31:0] reg_mult_12_z_asn_itm_1_cse;
  reg [31:0] reg_mult_11_z_asn_itm_1_cse;
  reg [31:0] reg_mult_10_z_asn_itm_1_cse;
  reg [31:0] reg_mult_9_z_asn_itm_1_cse;
  reg [31:0] reg_mult_8_z_asn_itm_1_cse;
  reg [31:0] reg_mult_7_z_asn_itm_1_cse;
  reg [31:0] reg_mult_6_z_asn_itm_1_cse;
  reg [31:0] reg_mult_5_z_asn_itm_1_cse;
  reg [31:0] reg_mult_4_z_asn_itm_1_cse;
  reg [31:0] reg_mult_3_z_asn_itm_1_cse;
  reg [31:0] reg_mult_2_z_asn_itm_1_cse;
  reg [31:0] reg_mult_1_z_asn_itm_1_cse;
  reg [31:0] reg_mult_z_asn_itm_1_cse;
  wire butterFly2_7_tw_nor_cse;
  wire butterFly2_7_tw_nor_1_cse;
  wire butterFly2_7_tw_nor_2_cse;
  wire INNER_LOOP1_tw_h_or_9_cse;
  wire INNER_LOOP1_tw_h_or_10_cse;
  wire INNER_LOOP1_tw_h_or_11_cse;
  wire INNER_LOOP1_tw_h_or_12_cse;
  wire INNER_LOOP1_tw_h_and_41_cse;
  wire INNER_LOOP1_tw_h_and_42_cse;
  wire INNER_LOOP1_tw_h_and_43_cse;
  wire INNER_LOOP1_tw_h_and_37_cse;
  wire INNER_LOOP1_tw_h_and_38_cse;
  wire INNER_LOOP1_tw_h_and_39_cse;
  wire INNER_LOOP1_tw_h_and_30_cse;
  wire INNER_LOOP1_tw_h_and_31_cse;
  wire INNER_LOOP1_tw_h_and_32_cse;
  wire INNER_LOOP1_tw_h_or_3_cse;
  wire INNER_LOOP1_tw_h_and_40_cse;
  wire INNER_LOOP1_tw_h_and_36_cse;
  wire INNER_LOOP1_tw_h_and_29_cse;
  wire c_or_cse;
  wire INNER_LOOP1_tw_h_or_1_cse;
  wire INNER_LOOP1_tw_h_or_cse;
  wire or_67_rmff;
  wire or_166_rmff;
  wire or_248_rmff;
  wire butterFly1_and_4_rmff;
  wire [30:0] butterFly1_mux1h_2_rmff;
  wire butterFly1_1_and_4_rmff;
  wire [30:0] butterFly1_1_mux1h_2_rmff;
  wire butterFly1_2_and_4_rmff;
  wire [30:0] butterFly1_2_mux1h_2_rmff;
  wire butterFly1_3_and_4_rmff;
  wire [30:0] butterFly1_3_mux1h_2_rmff;
  wire butterFly1_4_and_4_rmff;
  wire [30:0] butterFly1_4_mux1h_2_rmff;
  wire butterFly1_5_and_4_rmff;
  wire [30:0] butterFly1_5_mux1h_2_rmff;
  wire butterFly1_6_and_4_rmff;
  wire [30:0] butterFly1_6_mux1h_2_rmff;
  wire butterFly1_7_and_4_rmff;
  wire [30:0] butterFly1_7_mux1h_2_rmff;
  wire butterFly1_8_and_4_rmff;
  wire [30:0] butterFly1_8_mux1h_2_rmff;
  wire butterFly1_9_and_4_rmff;
  wire [30:0] butterFly1_9_mux1h_2_rmff;
  wire butterFly1_10_and_4_rmff;
  wire [30:0] butterFly1_10_mux1h_2_rmff;
  wire butterFly1_11_and_4_rmff;
  wire [30:0] butterFly1_11_mux1h_2_rmff;
  wire butterFly1_12_and_4_rmff;
  wire [30:0] butterFly1_12_mux1h_2_rmff;
  wire butterFly1_13_and_4_rmff;
  wire [30:0] butterFly1_13_mux1h_2_rmff;
  wire butterFly1_14_and_4_rmff;
  wire [30:0] butterFly1_14_mux1h_2_rmff;
  wire butterFly1_15_and_4_rmff;
  wire [30:0] butterFly1_15_mux1h_2_rmff;
  wire or_347_rmff;
  wire xt_rsc_0_0_i_wea_d_iff;
  wire or_435_rmff;
  wire or_429_rmff;
  wire xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire or_436_rmff;
  wire xt_rsc_0_1_i_wea_d_iff;
  wire xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_2_i_wea_d_iff;
  wire xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_3_i_wea_d_iff;
  wire xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_4_i_wea_d_iff;
  wire xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_5_i_wea_d_iff;
  wire xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_6_i_wea_d_iff;
  wire xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_7_i_wea_d_iff;
  wire xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_8_i_wea_d_iff;
  wire xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_9_i_wea_d_iff;
  wire xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_10_i_wea_d_iff;
  wire xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_11_i_wea_d_iff;
  wire xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_12_i_wea_d_iff;
  wire xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_13_i_wea_d_iff;
  wire xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_14_i_wea_d_iff;
  wire xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_15_i_wea_d_iff;
  wire xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_16_i_wea_d_iff;
  wire or_517_rmff;
  wire or_512_rmff;
  wire xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_17_i_wea_d_iff;
  wire xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_18_i_wea_d_iff;
  wire xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_19_i_wea_d_iff;
  wire xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_20_i_wea_d_iff;
  wire xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_21_i_wea_d_iff;
  wire xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_22_i_wea_d_iff;
  wire xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_23_i_wea_d_iff;
  wire xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_24_i_wea_d_iff;
  wire xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_25_i_wea_d_iff;
  wire xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_26_i_wea_d_iff;
  wire xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_27_i_wea_d_iff;
  wire xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_28_i_wea_d_iff;
  wire xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_29_i_wea_d_iff;
  wire xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_30_i_wea_d_iff;
  wire xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_0_31_i_wea_d_iff;
  wire xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_0_i_wea_d_iff;
  wire or_578_rmff;
  wire xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire or_584_rmff;
  wire xt_rsc_1_1_i_wea_d_iff;
  wire xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_2_i_wea_d_iff;
  wire xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_3_i_wea_d_iff;
  wire xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_4_i_wea_d_iff;
  wire xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_5_i_wea_d_iff;
  wire xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_6_i_wea_d_iff;
  wire xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_7_i_wea_d_iff;
  wire xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_8_i_wea_d_iff;
  wire xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_9_i_wea_d_iff;
  wire xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_10_i_wea_d_iff;
  wire xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_11_i_wea_d_iff;
  wire xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_12_i_wea_d_iff;
  wire xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_13_i_wea_d_iff;
  wire xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_14_i_wea_d_iff;
  wire xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_15_i_wea_d_iff;
  wire xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_16_i_wea_d_iff;
  wire or_660_rmff;
  wire xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_17_i_wea_d_iff;
  wire xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_18_i_wea_d_iff;
  wire xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_19_i_wea_d_iff;
  wire xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_20_i_wea_d_iff;
  wire xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_21_i_wea_d_iff;
  wire xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_22_i_wea_d_iff;
  wire xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_23_i_wea_d_iff;
  wire xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_24_i_wea_d_iff;
  wire xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_25_i_wea_d_iff;
  wire xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_26_i_wea_d_iff;
  wire xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_27_i_wea_d_iff;
  wire xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_28_i_wea_d_iff;
  wire xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_29_i_wea_d_iff;
  wire xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_30_i_wea_d_iff;
  wire xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire xt_rsc_1_31_i_wea_d_iff;
  wire xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  wire or_833_rmff;
  wire or_956_rmff;
  wire [31:0] mult_4_t_mux1h_rmff;
  wire [31:0] tmp_65_lpi_3_dfm_mx0;
  wire [31:0] tmp_1_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_a_mx0w2;
  wire [31:0] tmp_31_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_1_a_mx0w0;
  wire [31:0] tmp_125_lpi_3_dfm_mx0;
  wire [31:0] tmp_93_lpi_3_dfm_mx0;
  wire [31:0] tmp_29_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_2_a_mx0w2;
  wire [31:0] tmp_3_lpi_3_dfm_mx0;
  wire [31:0] tmp_91_lpi_3_dfm_mx0;
  wire [31:0] tmp_27_lpi_3_dfm_mx0;
  wire [31:0] tmp_121_lpi_3_dfm_mx0;
  wire [31:0] tmp_5_lpi_3_dfm_mx0;
  wire [31:0] tmp_89_lpi_3_dfm_mx0;
  wire [31:0] tmp_25_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_4_a_mx0w2;
  wire [31:0] tmp_7_lpi_3_dfm_mx0;
  wire [31:0] tmp_87_lpi_3_dfm_mx0;
  wire [31:0] tmp_23_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_5_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_12_a_mx0w3;
  wire [31:0] tmp_85_lpi_3_dfm_mx0;
  wire [31:0] tmp_21_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_6_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_11_a_mx0w3;
  wire [31:0] tmp_83_lpi_3_dfm_mx0;
  wire [31:0] tmp_19_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_7_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_10_a_mx0w3;
  wire [31:0] tmp_81_lpi_3_dfm_mx0;
  wire [31:0] tmp_17_lpi_3_dfm_mx0;
  wire [31:0] mult_t_mul_cmp_8_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_9_a_mx0w3;
  wire [31:0] mult_t_mul_cmp_9_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_9_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_10_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_10_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_11_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_11_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_13_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_13_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_14_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_14_a_mx0w2;
  wire [31:0] mult_t_mul_cmp_15_a_mx0w0;
  wire [31:0] mult_t_mul_cmp_15_a_mx0w2;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_290_itm_11;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_321_itm_11;
  reg [31:0] modulo_add_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_32_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_1_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_33_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_2_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_34_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_3_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_35_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_4_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_36_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_5_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_37_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_6_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_38_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_7_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_39_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_8_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_40_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_9_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_41_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_10_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_42_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_11_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_43_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_12_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_44_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_13_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_45_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_14_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_46_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_15_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_47_qr_lpi_3_dfm_1;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_306_itm_11;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_337_itm_11;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_385_itm_10;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_416_itm_10;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_401_itm_10;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_432_itm_10;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_290_itm_11;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_321_itm_11;
  reg [31:0] modulo_add_16_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_48_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_17_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_49_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_18_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_50_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_19_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_51_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_20_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_52_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_21_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_53_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_22_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_54_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_23_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_55_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_24_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_56_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_25_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_57_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_26_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_58_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_27_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_59_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_28_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_60_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_29_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_61_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_30_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_62_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_31_qr_lpi_3_dfm_1;
  reg [31:0] modulo_add_63_qr_lpi_3_dfm_1;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_306_itm_11;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_337_itm_11;
  reg [31:0] modulo_sub_16_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_48_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_17_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_49_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_18_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_50_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_19_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_51_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_20_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_52_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_21_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_53_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_22_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_54_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_23_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_55_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_24_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_56_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_25_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_57_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_26_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_58_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_27_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_59_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_28_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_60_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_29_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_61_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_30_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_62_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_31_qr_lpi_3_dfm_1;
  reg [31:0] modulo_sub_63_qr_lpi_3_dfm_1;
  wire [8:0] z_out_32;
  wire [5:0] z_out_33;
  wire [6:0] nl_z_out_33;
  wire [31:0] z_out_34;
  wire [31:0] z_out_35;
  wire [31:0] z_out_36;
  wire [31:0] z_out_37;
  wire [32:0] nl_z_out_37;
  wire [31:0] z_out_38;
  wire [31:0] z_out_39;
  wire [32:0] nl_z_out_39;
  wire [31:0] z_out_40;
  wire [31:0] z_out_41;
  wire [32:0] nl_z_out_41;
  wire [31:0] z_out_42;
  wire [31:0] z_out_43;
  wire [32:0] nl_z_out_43;
  wire [31:0] z_out_44;
  wire [31:0] z_out_45;
  wire [32:0] nl_z_out_45;
  wire [31:0] z_out_46;
  wire [31:0] z_out_47;
  wire [32:0] nl_z_out_47;
  wire [31:0] z_out_48;
  wire [31:0] z_out_49;
  wire [32:0] nl_z_out_49;
  wire [31:0] z_out_50;
  wire [32:0] nl_z_out_50;
  wire [31:0] z_out_51;
  wire [31:0] z_out_52;
  wire [32:0] nl_z_out_52;
  wire [31:0] z_out_53;
  wire [31:0] z_out_54;
  wire [32:0] nl_z_out_54;
  wire [31:0] z_out_55;
  wire [31:0] z_out_56;
  wire [32:0] nl_z_out_56;
  wire [31:0] z_out_57;
  wire [31:0] z_out_58;
  wire [32:0] nl_z_out_58;
  wire [31:0] z_out_59;
  wire [31:0] z_out_60;
  wire [32:0] nl_z_out_60;
  wire [31:0] z_out_61;
  wire [31:0] z_out_62;
  wire [32:0] nl_z_out_62;
  wire [31:0] z_out_63;
  wire [31:0] z_out_64;
  wire [32:0] nl_z_out_64;
  wire [31:0] z_out_65;
  wire [32:0] nl_z_out_65;
  wire [31:0] z_out_66;
  wire [32:0] nl_z_out_66;
  wire [31:0] z_out_67;
  wire [32:0] nl_z_out_67;
  wire [31:0] z_out_68;
  wire [32:0] nl_z_out_68;
  wire [31:0] z_out_69;
  wire [32:0] nl_z_out_69;
  wire [31:0] z_out_70;
  wire [32:0] nl_z_out_70;
  wire [31:0] z_out_71;
  wire [32:0] nl_z_out_71;
  wire [31:0] z_out_72;
  wire [32:0] nl_z_out_72;
  wire [31:0] z_out_73;
  wire [32:0] nl_z_out_73;
  wire [31:0] z_out_74;
  wire [32:0] nl_z_out_74;
  wire [31:0] z_out_75;
  wire [32:0] nl_z_out_75;
  wire [31:0] z_out_76;
  wire [32:0] nl_z_out_76;
  wire [31:0] z_out_77;
  wire [32:0] nl_z_out_77;
  wire [31:0] z_out_78;
  wire [32:0] nl_z_out_78;
  wire [31:0] z_out_79;
  wire [32:0] nl_z_out_79;
  wire [31:0] z_out_80;
  wire [32:0] nl_z_out_80;
  wire [31:0] z_out_81;
  wire [32:0] nl_z_out_81;
  wire [31:0] z_out_82;
  wire [31:0] z_out_83;
  wire [31:0] z_out_84;
  wire [31:0] z_out_85;
  wire [32:0] nl_z_out_85;
  wire [31:0] z_out_86;
  wire [31:0] z_out_87;
  wire [31:0] z_out_88;
  wire [31:0] z_out_89;
  wire [31:0] z_out_90;
  wire [31:0] z_out_91;
  wire [31:0] z_out_92;
  wire [31:0] z_out_93;
  wire [31:0] z_out_94;
  wire [31:0] z_out_95;
  wire [31:0] z_out_96;
  wire [31:0] z_out_97;
  wire [31:0] z_out_98;
  wire [31:0] z_out_99;
  wire [31:0] z_out_100;
  wire [31:0] z_out_101;
  wire [31:0] z_out_102;
  wire [31:0] z_out_103;
  wire [31:0] z_out_104;
  wire [31:0] z_out_105;
  wire [31:0] z_out_106;
  wire [31:0] z_out_107;
  wire [31:0] z_out_108;
  wire [31:0] z_out_109;
  reg [2:0] operator_20_false_acc_cse_sva;
  reg [4:0] operator_33_true_return_8_4_sva;
  reg [3:0] operator_33_true_1_lshift_psp_7_4_sva;
  reg INNER_LOOP1_stage_0_8;
  reg INNER_LOOP1_stage_0_9;
  reg INNER_LOOP1_stage_0_10;
  reg INNER_LOOP1_stage_0_11;
  reg [31:0] tmp_64_lpi_3_dfm_1;
  reg [31:0] tmp_64_lpi_3_dfm_2;
  reg [31:0] tmp_64_lpi_3_dfm_3;
  reg [31:0] tmp_64_lpi_3_dfm_4;
  reg [31:0] tmp_64_lpi_3_dfm_5;
  reg [31:0] tmp_64_lpi_3_dfm_6;
  reg [31:0] tmp_64_lpi_3_dfm_7;
  reg [31:0] mult_res_sva_1;
  reg [31:0] tmp_66_lpi_3_dfm_1;
  reg [31:0] tmp_66_lpi_3_dfm_2;
  reg [31:0] tmp_66_lpi_3_dfm_3;
  reg [31:0] tmp_66_lpi_3_dfm_4;
  reg [31:0] tmp_66_lpi_3_dfm_5;
  reg [31:0] tmp_66_lpi_3_dfm_6;
  reg [31:0] tmp_66_lpi_3_dfm_7;
  reg [31:0] mult_1_res_sva_1;
  reg [31:0] tmp_68_lpi_3_dfm_1;
  reg [31:0] tmp_68_lpi_3_dfm_2;
  reg [31:0] tmp_68_lpi_3_dfm_3;
  reg [31:0] tmp_68_lpi_3_dfm_4;
  reg [31:0] tmp_68_lpi_3_dfm_5;
  reg [31:0] tmp_68_lpi_3_dfm_6;
  reg [31:0] tmp_68_lpi_3_dfm_7;
  reg [31:0] mult_2_res_sva_1;
  reg [31:0] tmp_70_lpi_3_dfm_1;
  reg [31:0] tmp_70_lpi_3_dfm_2;
  reg [31:0] tmp_70_lpi_3_dfm_3;
  reg [31:0] tmp_70_lpi_3_dfm_4;
  reg [31:0] tmp_70_lpi_3_dfm_5;
  reg [31:0] tmp_70_lpi_3_dfm_6;
  reg [31:0] tmp_70_lpi_3_dfm_7;
  reg [31:0] mult_3_res_sva_1;
  reg [31:0] tmp_72_lpi_3_dfm_1;
  reg [31:0] tmp_72_lpi_3_dfm_2;
  reg [31:0] tmp_72_lpi_3_dfm_3;
  reg [31:0] tmp_72_lpi_3_dfm_4;
  reg [31:0] tmp_72_lpi_3_dfm_5;
  reg [31:0] tmp_72_lpi_3_dfm_6;
  reg [31:0] tmp_72_lpi_3_dfm_7;
  reg [31:0] mult_4_res_sva_1;
  reg [31:0] tmp_74_lpi_3_dfm_1;
  reg [31:0] tmp_74_lpi_3_dfm_2;
  reg [31:0] tmp_74_lpi_3_dfm_3;
  reg [31:0] tmp_74_lpi_3_dfm_4;
  reg [31:0] tmp_74_lpi_3_dfm_5;
  reg [31:0] tmp_74_lpi_3_dfm_6;
  reg [31:0] tmp_74_lpi_3_dfm_7;
  reg [31:0] mult_5_res_sva_1;
  reg [31:0] tmp_76_lpi_3_dfm_1;
  reg [31:0] tmp_76_lpi_3_dfm_2;
  reg [31:0] tmp_76_lpi_3_dfm_3;
  reg [31:0] tmp_76_lpi_3_dfm_4;
  reg [31:0] tmp_76_lpi_3_dfm_5;
  reg [31:0] tmp_76_lpi_3_dfm_6;
  reg [31:0] tmp_76_lpi_3_dfm_7;
  reg [31:0] mult_6_res_sva_1;
  reg [31:0] tmp_78_lpi_3_dfm_1;
  reg [31:0] tmp_78_lpi_3_dfm_2;
  reg [31:0] tmp_78_lpi_3_dfm_3;
  reg [31:0] tmp_78_lpi_3_dfm_4;
  reg [31:0] tmp_78_lpi_3_dfm_5;
  reg [31:0] tmp_78_lpi_3_dfm_6;
  reg [31:0] tmp_78_lpi_3_dfm_7;
  reg [31:0] mult_7_res_sva_1;
  reg [31:0] tmp_80_lpi_3_dfm_1;
  reg [31:0] tmp_80_lpi_3_dfm_2;
  reg [31:0] tmp_80_lpi_3_dfm_3;
  reg [31:0] tmp_80_lpi_3_dfm_4;
  reg [31:0] tmp_80_lpi_3_dfm_5;
  reg [31:0] tmp_80_lpi_3_dfm_6;
  reg [31:0] tmp_80_lpi_3_dfm_7;
  reg [31:0] mult_8_res_sva_1;
  reg [31:0] tmp_82_lpi_3_dfm_1;
  reg [31:0] tmp_82_lpi_3_dfm_2;
  reg [31:0] tmp_82_lpi_3_dfm_3;
  reg [31:0] tmp_82_lpi_3_dfm_4;
  reg [31:0] tmp_82_lpi_3_dfm_5;
  reg [31:0] tmp_82_lpi_3_dfm_6;
  reg [31:0] tmp_82_lpi_3_dfm_7;
  reg [31:0] mult_9_res_sva_1;
  reg [31:0] tmp_84_lpi_3_dfm_1;
  reg [31:0] tmp_84_lpi_3_dfm_2;
  reg [31:0] tmp_84_lpi_3_dfm_3;
  reg [31:0] tmp_84_lpi_3_dfm_4;
  reg [31:0] tmp_84_lpi_3_dfm_5;
  reg [31:0] tmp_84_lpi_3_dfm_6;
  reg [31:0] tmp_84_lpi_3_dfm_7;
  reg [31:0] mult_10_res_sva_1;
  reg [31:0] tmp_86_lpi_3_dfm_1;
  reg [31:0] tmp_86_lpi_3_dfm_2;
  reg [31:0] tmp_86_lpi_3_dfm_3;
  reg [31:0] tmp_86_lpi_3_dfm_4;
  reg [31:0] tmp_86_lpi_3_dfm_5;
  reg [31:0] tmp_86_lpi_3_dfm_6;
  reg [31:0] tmp_86_lpi_3_dfm_7;
  reg [31:0] mult_11_res_sva_1;
  reg [31:0] tmp_88_lpi_3_dfm_1;
  reg [31:0] tmp_88_lpi_3_dfm_2;
  reg [31:0] tmp_88_lpi_3_dfm_3;
  reg [31:0] tmp_88_lpi_3_dfm_4;
  reg [31:0] tmp_88_lpi_3_dfm_5;
  reg [31:0] tmp_88_lpi_3_dfm_6;
  reg [31:0] tmp_88_lpi_3_dfm_7;
  reg [31:0] mult_12_res_sva_1;
  reg [31:0] tmp_90_lpi_3_dfm_1;
  reg [31:0] tmp_90_lpi_3_dfm_2;
  reg [31:0] tmp_90_lpi_3_dfm_3;
  reg [31:0] tmp_90_lpi_3_dfm_4;
  reg [31:0] tmp_90_lpi_3_dfm_5;
  reg [31:0] tmp_90_lpi_3_dfm_6;
  reg [31:0] tmp_90_lpi_3_dfm_7;
  reg [31:0] mult_13_res_sva_1;
  reg [31:0] tmp_92_lpi_3_dfm_1;
  reg [31:0] tmp_92_lpi_3_dfm_2;
  reg [31:0] tmp_92_lpi_3_dfm_3;
  reg [31:0] tmp_92_lpi_3_dfm_4;
  reg [31:0] tmp_92_lpi_3_dfm_5;
  reg [31:0] tmp_92_lpi_3_dfm_6;
  reg [31:0] tmp_92_lpi_3_dfm_7;
  reg [31:0] mult_14_res_sva_1;
  reg [31:0] tmp_94_lpi_3_dfm_1;
  reg [31:0] tmp_94_lpi_3_dfm_2;
  reg [31:0] tmp_94_lpi_3_dfm_3;
  reg [31:0] tmp_94_lpi_3_dfm_4;
  reg [31:0] tmp_94_lpi_3_dfm_5;
  reg [31:0] tmp_94_lpi_3_dfm_6;
  reg [31:0] tmp_94_lpi_3_dfm_7;
  reg [31:0] mult_15_res_sva_1;
  reg [31:0] mult_z_asn_itm_1;
  reg [31:0] mult_z_asn_itm_2;
  reg [31:0] mult_z_asn_itm_3;
  reg [31:0] mult_z_asn_itm_4;
  reg [31:0] mult_1_z_asn_itm_1;
  reg [31:0] mult_1_z_asn_itm_2;
  reg [31:0] mult_1_z_asn_itm_3;
  reg [31:0] mult_1_z_asn_itm_4;
  reg [31:0] mult_2_z_asn_itm_1;
  reg [31:0] mult_2_z_asn_itm_2;
  reg [31:0] mult_2_z_asn_itm_3;
  reg [31:0] mult_2_z_asn_itm_4;
  reg [31:0] mult_3_z_asn_itm_1;
  reg [31:0] mult_3_z_asn_itm_2;
  reg [31:0] mult_3_z_asn_itm_3;
  reg [31:0] mult_3_z_asn_itm_4;
  reg [31:0] mult_4_z_asn_itm_1;
  reg [31:0] mult_4_z_asn_itm_2;
  reg [31:0] mult_4_z_asn_itm_3;
  reg [31:0] mult_4_z_asn_itm_4;
  reg [31:0] mult_5_z_asn_itm_1;
  reg [31:0] mult_5_z_asn_itm_2;
  reg [31:0] mult_5_z_asn_itm_3;
  reg [31:0] mult_5_z_asn_itm_4;
  reg [31:0] mult_6_z_asn_itm_1;
  reg [31:0] mult_6_z_asn_itm_2;
  reg [31:0] mult_6_z_asn_itm_3;
  reg [31:0] mult_6_z_asn_itm_4;
  reg [31:0] mult_7_z_asn_itm_1;
  reg [31:0] mult_7_z_asn_itm_2;
  reg [31:0] mult_7_z_asn_itm_3;
  reg [31:0] mult_7_z_asn_itm_4;
  reg [31:0] mult_8_z_asn_itm_1;
  reg [31:0] mult_8_z_asn_itm_2;
  reg [31:0] mult_8_z_asn_itm_3;
  reg [31:0] mult_8_z_asn_itm_4;
  reg [31:0] mult_9_z_asn_itm_1;
  reg [31:0] mult_9_z_asn_itm_2;
  reg [31:0] mult_9_z_asn_itm_3;
  reg [31:0] mult_9_z_asn_itm_4;
  reg [31:0] mult_10_z_asn_itm_1;
  reg [31:0] mult_10_z_asn_itm_2;
  reg [31:0] mult_10_z_asn_itm_3;
  reg [31:0] mult_10_z_asn_itm_4;
  reg [31:0] mult_11_z_asn_itm_1;
  reg [31:0] mult_11_z_asn_itm_2;
  reg [31:0] mult_11_z_asn_itm_3;
  reg [31:0] mult_11_z_asn_itm_4;
  reg [31:0] mult_12_z_asn_itm_1;
  reg [31:0] mult_12_z_asn_itm_2;
  reg [31:0] mult_12_z_asn_itm_3;
  reg [31:0] mult_12_z_asn_itm_4;
  reg [31:0] mult_13_z_asn_itm_1;
  reg [31:0] mult_13_z_asn_itm_2;
  reg [31:0] mult_13_z_asn_itm_3;
  reg [31:0] mult_13_z_asn_itm_4;
  reg [31:0] mult_14_z_asn_itm_1;
  reg [31:0] mult_14_z_asn_itm_2;
  reg [31:0] mult_14_z_asn_itm_3;
  reg [31:0] mult_14_z_asn_itm_4;
  reg [31:0] mult_15_z_asn_itm_1;
  reg [31:0] mult_15_z_asn_itm_2;
  reg [31:0] mult_15_z_asn_itm_3;
  reg [31:0] mult_15_z_asn_itm_4;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_1;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_2;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_3;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_4;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_5;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_6;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_7;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_8;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_9;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_1;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_2;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_3;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_4;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_5;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_6;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_7;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_8;
  reg [3:0] INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_9;
  reg INNER_LOOP2_stage_0_8;
  reg INNER_LOOP2_stage_0_9;
  reg INNER_LOOP2_stage_0_10;
  reg INNER_LOOP2_stage_0_11;
  reg INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm;
  reg [31:0] tmp_lpi_3_dfm_1;
  reg [31:0] tmp_lpi_3_dfm_2;
  reg [31:0] tmp_lpi_3_dfm_3;
  reg [31:0] tmp_lpi_3_dfm_4;
  reg [31:0] tmp_lpi_3_dfm_5;
  reg [31:0] tmp_lpi_3_dfm_6;
  reg [31:0] tmp_lpi_3_dfm_7;
  reg [31:0] mult_16_res_sva_1;
  reg [31:0] tmp_2_lpi_3_dfm_1;
  reg [31:0] tmp_2_lpi_3_dfm_2;
  reg [31:0] tmp_2_lpi_3_dfm_3;
  reg [31:0] tmp_2_lpi_3_dfm_4;
  reg [31:0] tmp_2_lpi_3_dfm_5;
  reg [31:0] tmp_2_lpi_3_dfm_6;
  reg [31:0] tmp_2_lpi_3_dfm_7;
  reg [31:0] mult_17_res_sva_1;
  reg [31:0] tmp_4_lpi_3_dfm_1;
  reg [31:0] tmp_4_lpi_3_dfm_2;
  reg [31:0] tmp_4_lpi_3_dfm_3;
  reg [31:0] tmp_4_lpi_3_dfm_4;
  reg [31:0] tmp_4_lpi_3_dfm_5;
  reg [31:0] tmp_4_lpi_3_dfm_6;
  reg [31:0] tmp_4_lpi_3_dfm_7;
  reg [31:0] mult_18_res_sva_1;
  reg [31:0] tmp_6_lpi_3_dfm_1;
  reg [31:0] tmp_6_lpi_3_dfm_2;
  reg [31:0] tmp_6_lpi_3_dfm_3;
  reg [31:0] tmp_6_lpi_3_dfm_4;
  reg [31:0] tmp_6_lpi_3_dfm_5;
  reg [31:0] tmp_6_lpi_3_dfm_6;
  reg [31:0] tmp_6_lpi_3_dfm_7;
  reg [31:0] mult_19_res_sva_1;
  reg [31:0] tmp_8_lpi_3_dfm_1;
  reg [31:0] tmp_8_lpi_3_dfm_2;
  reg [31:0] tmp_8_lpi_3_dfm_3;
  reg [31:0] tmp_8_lpi_3_dfm_4;
  reg [31:0] tmp_8_lpi_3_dfm_5;
  reg [31:0] tmp_8_lpi_3_dfm_6;
  reg [31:0] tmp_8_lpi_3_dfm_7;
  reg [31:0] mult_20_res_sva_1;
  reg [31:0] tmp_10_lpi_3_dfm_1;
  reg [31:0] tmp_10_lpi_3_dfm_2;
  reg [31:0] tmp_10_lpi_3_dfm_3;
  reg [31:0] tmp_10_lpi_3_dfm_4;
  reg [31:0] tmp_10_lpi_3_dfm_5;
  reg [31:0] tmp_10_lpi_3_dfm_6;
  reg [31:0] tmp_10_lpi_3_dfm_7;
  reg [31:0] mult_21_res_sva_1;
  reg [31:0] tmp_12_lpi_3_dfm_1;
  reg [31:0] tmp_12_lpi_3_dfm_2;
  reg [31:0] tmp_12_lpi_3_dfm_3;
  reg [31:0] tmp_12_lpi_3_dfm_4;
  reg [31:0] tmp_12_lpi_3_dfm_5;
  reg [31:0] tmp_12_lpi_3_dfm_6;
  reg [31:0] tmp_12_lpi_3_dfm_7;
  reg [31:0] mult_22_res_sva_1;
  reg [31:0] tmp_14_lpi_3_dfm_1;
  reg [31:0] tmp_14_lpi_3_dfm_2;
  reg [31:0] tmp_14_lpi_3_dfm_3;
  reg [31:0] tmp_14_lpi_3_dfm_4;
  reg [31:0] tmp_14_lpi_3_dfm_5;
  reg [31:0] tmp_14_lpi_3_dfm_6;
  reg [31:0] tmp_14_lpi_3_dfm_7;
  reg [31:0] mult_23_res_sva_1;
  reg [31:0] tmp_16_lpi_3_dfm_1;
  reg [31:0] tmp_16_lpi_3_dfm_2;
  reg [31:0] tmp_16_lpi_3_dfm_3;
  reg [31:0] tmp_16_lpi_3_dfm_4;
  reg [31:0] tmp_16_lpi_3_dfm_5;
  reg [31:0] tmp_16_lpi_3_dfm_6;
  reg [31:0] tmp_16_lpi_3_dfm_7;
  reg [31:0] mult_24_res_sva_1;
  reg [31:0] tmp_18_lpi_3_dfm_1;
  reg [31:0] tmp_18_lpi_3_dfm_2;
  reg [31:0] tmp_18_lpi_3_dfm_3;
  reg [31:0] tmp_18_lpi_3_dfm_4;
  reg [31:0] tmp_18_lpi_3_dfm_5;
  reg [31:0] tmp_18_lpi_3_dfm_6;
  reg [31:0] tmp_18_lpi_3_dfm_7;
  reg [31:0] mult_25_res_sva_1;
  reg [31:0] tmp_20_lpi_3_dfm_1;
  reg [31:0] tmp_20_lpi_3_dfm_2;
  reg [31:0] tmp_20_lpi_3_dfm_3;
  reg [31:0] tmp_20_lpi_3_dfm_4;
  reg [31:0] tmp_20_lpi_3_dfm_5;
  reg [31:0] tmp_20_lpi_3_dfm_6;
  reg [31:0] tmp_20_lpi_3_dfm_7;
  reg [31:0] mult_26_res_sva_1;
  reg [31:0] tmp_22_lpi_3_dfm_1;
  reg [31:0] tmp_22_lpi_3_dfm_2;
  reg [31:0] tmp_22_lpi_3_dfm_3;
  reg [31:0] tmp_22_lpi_3_dfm_4;
  reg [31:0] tmp_22_lpi_3_dfm_5;
  reg [31:0] tmp_22_lpi_3_dfm_6;
  reg [31:0] tmp_22_lpi_3_dfm_7;
  reg [31:0] mult_27_res_sva_1;
  reg [31:0] tmp_24_lpi_3_dfm_1;
  reg [31:0] tmp_24_lpi_3_dfm_2;
  reg [31:0] tmp_24_lpi_3_dfm_3;
  reg [31:0] tmp_24_lpi_3_dfm_4;
  reg [31:0] tmp_24_lpi_3_dfm_5;
  reg [31:0] tmp_24_lpi_3_dfm_6;
  reg [31:0] tmp_24_lpi_3_dfm_7;
  reg [31:0] mult_28_res_sva_1;
  reg [31:0] tmp_26_lpi_3_dfm_1;
  reg [31:0] tmp_26_lpi_3_dfm_2;
  reg [31:0] tmp_26_lpi_3_dfm_3;
  reg [31:0] tmp_26_lpi_3_dfm_4;
  reg [31:0] tmp_26_lpi_3_dfm_5;
  reg [31:0] tmp_26_lpi_3_dfm_6;
  reg [31:0] tmp_26_lpi_3_dfm_7;
  reg [31:0] mult_29_res_sva_1;
  reg [31:0] tmp_28_lpi_3_dfm_1;
  reg [31:0] tmp_28_lpi_3_dfm_2;
  reg [31:0] tmp_28_lpi_3_dfm_3;
  reg [31:0] tmp_28_lpi_3_dfm_4;
  reg [31:0] tmp_28_lpi_3_dfm_5;
  reg [31:0] tmp_28_lpi_3_dfm_6;
  reg [31:0] tmp_28_lpi_3_dfm_7;
  reg [31:0] mult_30_res_sva_1;
  reg [31:0] tmp_30_lpi_3_dfm_1;
  reg [31:0] tmp_30_lpi_3_dfm_2;
  reg [31:0] tmp_30_lpi_3_dfm_3;
  reg [31:0] tmp_30_lpi_3_dfm_4;
  reg [31:0] tmp_30_lpi_3_dfm_5;
  reg [31:0] tmp_30_lpi_3_dfm_6;
  reg [31:0] tmp_30_lpi_3_dfm_7;
  reg [31:0] mult_31_res_sva_1;
  reg [31:0] mult_16_z_asn_itm_2;
  reg [31:0] mult_16_z_asn_itm_3;
  reg [31:0] mult_16_z_asn_itm_4;
  reg [31:0] mult_17_z_asn_itm_2;
  reg [31:0] mult_17_z_asn_itm_3;
  reg [31:0] mult_17_z_asn_itm_4;
  reg [31:0] mult_18_z_asn_itm_2;
  reg [31:0] mult_18_z_asn_itm_3;
  reg [31:0] mult_18_z_asn_itm_4;
  reg [31:0] mult_19_z_asn_itm_2;
  reg [31:0] mult_19_z_asn_itm_3;
  reg [31:0] mult_19_z_asn_itm_4;
  reg [31:0] mult_20_z_asn_itm_2;
  reg [31:0] mult_20_z_asn_itm_3;
  reg [31:0] mult_20_z_asn_itm_4;
  reg [31:0] mult_21_z_asn_itm_2;
  reg [31:0] mult_21_z_asn_itm_3;
  reg [31:0] mult_21_z_asn_itm_4;
  reg [31:0] mult_22_z_asn_itm_2;
  reg [31:0] mult_22_z_asn_itm_3;
  reg [31:0] mult_22_z_asn_itm_4;
  reg [31:0] mult_23_z_asn_itm_2;
  reg [31:0] mult_23_z_asn_itm_3;
  reg [31:0] mult_23_z_asn_itm_4;
  reg [31:0] mult_24_z_asn_itm_2;
  reg [31:0] mult_24_z_asn_itm_3;
  reg [31:0] mult_24_z_asn_itm_4;
  reg [31:0] mult_25_z_asn_itm_2;
  reg [31:0] mult_25_z_asn_itm_3;
  reg [31:0] mult_25_z_asn_itm_4;
  reg [31:0] mult_26_z_asn_itm_2;
  reg [31:0] mult_26_z_asn_itm_3;
  reg [31:0] mult_26_z_asn_itm_4;
  reg [31:0] mult_27_z_asn_itm_2;
  reg [31:0] mult_27_z_asn_itm_3;
  reg [31:0] mult_27_z_asn_itm_4;
  reg [31:0] mult_28_z_asn_itm_2;
  reg [31:0] mult_28_z_asn_itm_3;
  reg [31:0] mult_28_z_asn_itm_4;
  reg [31:0] mult_29_z_asn_itm_2;
  reg [31:0] mult_29_z_asn_itm_3;
  reg [31:0] mult_29_z_asn_itm_4;
  reg [31:0] mult_30_z_asn_itm_2;
  reg [31:0] mult_30_z_asn_itm_3;
  reg [31:0] mult_30_z_asn_itm_4;
  reg [31:0] mult_31_z_asn_itm_2;
  reg [31:0] mult_31_z_asn_itm_3;
  reg [31:0] mult_31_z_asn_itm_4;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_1;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_2;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_3;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_4;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_5;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_6;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_7;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_8;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_9;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_10;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_1;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_2;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_3;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_4;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_5;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_6;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_7;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_8;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_9;
  reg [3:0] INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_10;
  reg INNER_LOOP3_stage_0_8;
  reg INNER_LOOP3_stage_0_9;
  reg INNER_LOOP3_stage_0_10;
  reg INNER_LOOP3_stage_0_11;
  reg [31:0] tmp_96_lpi_3_dfm_1;
  reg [31:0] tmp_96_lpi_3_dfm_2;
  reg [31:0] tmp_96_lpi_3_dfm_3;
  reg [31:0] tmp_96_lpi_3_dfm_4;
  reg [31:0] tmp_96_lpi_3_dfm_5;
  reg [31:0] tmp_96_lpi_3_dfm_6;
  reg [31:0] tmp_96_lpi_3_dfm_7;
  reg [31:0] mult_32_res_sva_1;
  reg [31:0] tmp_98_lpi_3_dfm_1;
  reg [31:0] tmp_98_lpi_3_dfm_2;
  reg [31:0] tmp_98_lpi_3_dfm_3;
  reg [31:0] tmp_98_lpi_3_dfm_4;
  reg [31:0] tmp_98_lpi_3_dfm_5;
  reg [31:0] tmp_98_lpi_3_dfm_6;
  reg [31:0] tmp_98_lpi_3_dfm_7;
  reg [31:0] mult_33_res_sva_1;
  reg [31:0] tmp_100_lpi_3_dfm_1;
  reg [31:0] tmp_100_lpi_3_dfm_2;
  reg [31:0] tmp_100_lpi_3_dfm_3;
  reg [31:0] tmp_100_lpi_3_dfm_4;
  reg [31:0] tmp_100_lpi_3_dfm_5;
  reg [31:0] tmp_100_lpi_3_dfm_6;
  reg [31:0] tmp_100_lpi_3_dfm_7;
  reg [31:0] mult_34_res_sva_1;
  reg [31:0] tmp_102_lpi_3_dfm_1;
  reg [31:0] tmp_102_lpi_3_dfm_2;
  reg [31:0] tmp_102_lpi_3_dfm_3;
  reg [31:0] tmp_102_lpi_3_dfm_4;
  reg [31:0] tmp_102_lpi_3_dfm_5;
  reg [31:0] tmp_102_lpi_3_dfm_6;
  reg [31:0] tmp_102_lpi_3_dfm_7;
  reg [31:0] mult_35_res_sva_1;
  reg [31:0] tmp_104_lpi_3_dfm_1;
  reg [31:0] tmp_104_lpi_3_dfm_2;
  reg [31:0] tmp_104_lpi_3_dfm_3;
  reg [31:0] tmp_104_lpi_3_dfm_4;
  reg [31:0] tmp_104_lpi_3_dfm_5;
  reg [31:0] tmp_104_lpi_3_dfm_6;
  reg [31:0] tmp_104_lpi_3_dfm_7;
  reg [31:0] mult_36_res_sva_1;
  reg [31:0] tmp_106_lpi_3_dfm_1;
  reg [31:0] tmp_106_lpi_3_dfm_2;
  reg [31:0] tmp_106_lpi_3_dfm_3;
  reg [31:0] tmp_106_lpi_3_dfm_4;
  reg [31:0] tmp_106_lpi_3_dfm_5;
  reg [31:0] tmp_106_lpi_3_dfm_6;
  reg [31:0] tmp_106_lpi_3_dfm_7;
  reg [31:0] mult_37_res_sva_1;
  reg [31:0] tmp_108_lpi_3_dfm_1;
  reg [31:0] tmp_108_lpi_3_dfm_2;
  reg [31:0] tmp_108_lpi_3_dfm_3;
  reg [31:0] tmp_108_lpi_3_dfm_4;
  reg [31:0] tmp_108_lpi_3_dfm_5;
  reg [31:0] tmp_108_lpi_3_dfm_6;
  reg [31:0] tmp_108_lpi_3_dfm_7;
  reg [31:0] mult_38_res_sva_1;
  reg [31:0] tmp_110_lpi_3_dfm_1;
  reg [31:0] tmp_110_lpi_3_dfm_2;
  reg [31:0] tmp_110_lpi_3_dfm_3;
  reg [31:0] tmp_110_lpi_3_dfm_4;
  reg [31:0] tmp_110_lpi_3_dfm_5;
  reg [31:0] tmp_110_lpi_3_dfm_6;
  reg [31:0] tmp_110_lpi_3_dfm_7;
  reg [31:0] mult_39_res_sva_1;
  reg [31:0] tmp_112_lpi_3_dfm_1;
  reg [31:0] tmp_112_lpi_3_dfm_2;
  reg [31:0] tmp_112_lpi_3_dfm_3;
  reg [31:0] tmp_112_lpi_3_dfm_4;
  reg [31:0] tmp_112_lpi_3_dfm_5;
  reg [31:0] tmp_112_lpi_3_dfm_6;
  reg [31:0] tmp_112_lpi_3_dfm_7;
  reg [31:0] mult_40_res_sva_1;
  reg [31:0] tmp_114_lpi_3_dfm_1;
  reg [31:0] tmp_114_lpi_3_dfm_2;
  reg [31:0] tmp_114_lpi_3_dfm_3;
  reg [31:0] tmp_114_lpi_3_dfm_4;
  reg [31:0] tmp_114_lpi_3_dfm_5;
  reg [31:0] tmp_114_lpi_3_dfm_6;
  reg [31:0] tmp_114_lpi_3_dfm_7;
  reg [31:0] mult_41_res_sva_1;
  reg [31:0] tmp_116_lpi_3_dfm_1;
  reg [31:0] tmp_116_lpi_3_dfm_2;
  reg [31:0] tmp_116_lpi_3_dfm_3;
  reg [31:0] tmp_116_lpi_3_dfm_4;
  reg [31:0] tmp_116_lpi_3_dfm_5;
  reg [31:0] tmp_116_lpi_3_dfm_6;
  reg [31:0] tmp_116_lpi_3_dfm_7;
  reg [31:0] mult_42_res_sva_1;
  reg [31:0] tmp_118_lpi_3_dfm_1;
  reg [31:0] tmp_118_lpi_3_dfm_2;
  reg [31:0] tmp_118_lpi_3_dfm_3;
  reg [31:0] tmp_118_lpi_3_dfm_4;
  reg [31:0] tmp_118_lpi_3_dfm_5;
  reg [31:0] tmp_118_lpi_3_dfm_6;
  reg [31:0] tmp_118_lpi_3_dfm_7;
  reg [31:0] mult_43_res_sva_1;
  reg [31:0] tmp_120_lpi_3_dfm_1;
  reg [31:0] tmp_120_lpi_3_dfm_2;
  reg [31:0] tmp_120_lpi_3_dfm_3;
  reg [31:0] tmp_120_lpi_3_dfm_4;
  reg [31:0] tmp_120_lpi_3_dfm_5;
  reg [31:0] tmp_120_lpi_3_dfm_6;
  reg [31:0] tmp_120_lpi_3_dfm_7;
  reg [31:0] mult_44_res_sva_1;
  reg [31:0] tmp_122_lpi_3_dfm_1;
  reg [31:0] tmp_122_lpi_3_dfm_2;
  reg [31:0] tmp_122_lpi_3_dfm_3;
  reg [31:0] tmp_122_lpi_3_dfm_4;
  reg [31:0] tmp_122_lpi_3_dfm_5;
  reg [31:0] tmp_122_lpi_3_dfm_6;
  reg [31:0] tmp_122_lpi_3_dfm_7;
  reg [31:0] mult_45_res_sva_1;
  reg [31:0] tmp_124_lpi_3_dfm_1;
  reg [31:0] tmp_124_lpi_3_dfm_2;
  reg [31:0] tmp_124_lpi_3_dfm_3;
  reg [31:0] tmp_124_lpi_3_dfm_4;
  reg [31:0] tmp_124_lpi_3_dfm_5;
  reg [31:0] tmp_124_lpi_3_dfm_6;
  reg [31:0] tmp_124_lpi_3_dfm_7;
  reg [31:0] mult_46_res_sva_1;
  reg [31:0] tmp_126_lpi_3_dfm_1;
  reg [31:0] tmp_126_lpi_3_dfm_2;
  reg [31:0] tmp_126_lpi_3_dfm_3;
  reg [31:0] tmp_126_lpi_3_dfm_4;
  reg [31:0] tmp_126_lpi_3_dfm_5;
  reg [31:0] tmp_126_lpi_3_dfm_6;
  reg [31:0] tmp_126_lpi_3_dfm_7;
  reg butterFly2_15_tw_equal_tmp_1;
  reg butterFly2_15_tw_equal_tmp_3_1;
  reg butterFly2_15_tw_equal_tmp_5_1;
  reg butterFly2_15_tw_equal_tmp_6_1;
  reg butterFly2_15_tw_equal_tmp_7_1;
  reg [31:0] mult_47_res_sva_1;
  reg [31:0] mult_32_z_asn_itm_2;
  reg [31:0] mult_32_z_asn_itm_3;
  reg [31:0] mult_32_z_asn_itm_4;
  reg [31:0] mult_33_z_asn_itm_2;
  reg [31:0] mult_33_z_asn_itm_3;
  reg [31:0] mult_33_z_asn_itm_4;
  reg [31:0] mult_34_z_asn_itm_2;
  reg [31:0] mult_34_z_asn_itm_3;
  reg [31:0] mult_34_z_asn_itm_4;
  reg [31:0] mult_35_z_asn_itm_2;
  reg [31:0] mult_35_z_asn_itm_3;
  reg [31:0] mult_35_z_asn_itm_4;
  reg [31:0] mult_36_z_asn_itm_2;
  reg [31:0] mult_36_z_asn_itm_3;
  reg [31:0] mult_36_z_asn_itm_4;
  reg [31:0] mult_37_z_asn_itm_2;
  reg [31:0] mult_37_z_asn_itm_3;
  reg [31:0] mult_37_z_asn_itm_4;
  reg [31:0] mult_38_z_asn_itm_2;
  reg [31:0] mult_38_z_asn_itm_3;
  reg [31:0] mult_38_z_asn_itm_4;
  reg [31:0] mult_39_z_asn_itm_2;
  reg [31:0] mult_39_z_asn_itm_3;
  reg [31:0] mult_39_z_asn_itm_4;
  reg [31:0] mult_40_z_asn_itm_2;
  reg [31:0] mult_40_z_asn_itm_3;
  reg [31:0] mult_40_z_asn_itm_4;
  reg [31:0] mult_41_z_asn_itm_2;
  reg [31:0] mult_41_z_asn_itm_3;
  reg [31:0] mult_41_z_asn_itm_4;
  reg [31:0] mult_42_z_asn_itm_2;
  reg [31:0] mult_42_z_asn_itm_3;
  reg [31:0] mult_42_z_asn_itm_4;
  reg [31:0] mult_43_z_asn_itm_2;
  reg [31:0] mult_43_z_asn_itm_3;
  reg [31:0] mult_43_z_asn_itm_4;
  reg [31:0] mult_44_z_asn_itm_2;
  reg [31:0] mult_44_z_asn_itm_3;
  reg [31:0] mult_44_z_asn_itm_4;
  reg [31:0] mult_45_z_asn_itm_2;
  reg [31:0] mult_45_z_asn_itm_3;
  reg [31:0] mult_45_z_asn_itm_4;
  reg [31:0] mult_46_z_asn_itm_2;
  reg [31:0] mult_46_z_asn_itm_3;
  reg [31:0] mult_46_z_asn_itm_4;
  reg [31:0] mult_47_z_asn_itm_2;
  reg [31:0] mult_47_z_asn_itm_3;
  reg [31:0] mult_47_z_asn_itm_4;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_1;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_2;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_3;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_4;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_5;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_6;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_7;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_8;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_9;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_1;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_2;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_3;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_4;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_5;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_6;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_7;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_8;
  reg [3:0] INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_9;
  reg INNER_LOOP4_stage_0_8;
  reg INNER_LOOP4_stage_0_9;
  reg INNER_LOOP4_stage_0_10;
  reg INNER_LOOP4_stage_0_11;
  reg INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm;
  reg [31:0] tmp_32_lpi_3_dfm_2;
  reg [31:0] tmp_32_lpi_3_dfm_3;
  reg [31:0] tmp_32_lpi_3_dfm_4;
  reg [31:0] tmp_32_lpi_3_dfm_5;
  reg [31:0] tmp_32_lpi_3_dfm_6;
  reg [31:0] tmp_32_lpi_3_dfm_7;
  reg [31:0] mult_48_res_sva_1;
  reg [31:0] tmp_34_lpi_3_dfm_2;
  reg [31:0] tmp_34_lpi_3_dfm_3;
  reg [31:0] tmp_34_lpi_3_dfm_4;
  reg [31:0] tmp_34_lpi_3_dfm_5;
  reg [31:0] tmp_34_lpi_3_dfm_6;
  reg [31:0] tmp_34_lpi_3_dfm_7;
  reg [31:0] mult_49_res_sva_1;
  reg [31:0] tmp_36_lpi_3_dfm_2;
  reg [31:0] tmp_36_lpi_3_dfm_3;
  reg [31:0] tmp_36_lpi_3_dfm_4;
  reg [31:0] tmp_36_lpi_3_dfm_5;
  reg [31:0] tmp_36_lpi_3_dfm_6;
  reg [31:0] tmp_36_lpi_3_dfm_7;
  reg [31:0] mult_50_res_sva_1;
  reg [31:0] tmp_38_lpi_3_dfm_2;
  reg [31:0] tmp_38_lpi_3_dfm_3;
  reg [31:0] tmp_38_lpi_3_dfm_4;
  reg [31:0] tmp_38_lpi_3_dfm_5;
  reg [31:0] tmp_38_lpi_3_dfm_6;
  reg [31:0] tmp_38_lpi_3_dfm_7;
  reg [31:0] mult_51_res_sva_1;
  reg [31:0] tmp_40_lpi_3_dfm_2;
  reg [31:0] tmp_40_lpi_3_dfm_3;
  reg [31:0] tmp_40_lpi_3_dfm_4;
  reg [31:0] tmp_40_lpi_3_dfm_5;
  reg [31:0] tmp_40_lpi_3_dfm_6;
  reg [31:0] tmp_40_lpi_3_dfm_7;
  reg [31:0] mult_52_res_sva_1;
  reg [31:0] tmp_42_lpi_3_dfm_2;
  reg [31:0] tmp_42_lpi_3_dfm_3;
  reg [31:0] tmp_42_lpi_3_dfm_4;
  reg [31:0] tmp_42_lpi_3_dfm_5;
  reg [31:0] tmp_42_lpi_3_dfm_6;
  reg [31:0] tmp_42_lpi_3_dfm_7;
  reg [31:0] mult_53_res_sva_1;
  reg [31:0] tmp_44_lpi_3_dfm_2;
  reg [31:0] tmp_44_lpi_3_dfm_3;
  reg [31:0] tmp_44_lpi_3_dfm_4;
  reg [31:0] tmp_44_lpi_3_dfm_5;
  reg [31:0] tmp_44_lpi_3_dfm_6;
  reg [31:0] tmp_44_lpi_3_dfm_7;
  reg [31:0] mult_54_res_sva_1;
  reg [31:0] tmp_46_lpi_3_dfm_2;
  reg [31:0] tmp_46_lpi_3_dfm_3;
  reg [31:0] tmp_46_lpi_3_dfm_4;
  reg [31:0] tmp_46_lpi_3_dfm_5;
  reg [31:0] tmp_46_lpi_3_dfm_6;
  reg [31:0] tmp_46_lpi_3_dfm_7;
  reg [31:0] mult_55_res_sva_1;
  reg [31:0] tmp_48_lpi_3_dfm_2;
  reg [31:0] tmp_48_lpi_3_dfm_3;
  reg [31:0] tmp_48_lpi_3_dfm_4;
  reg [31:0] tmp_48_lpi_3_dfm_5;
  reg [31:0] tmp_48_lpi_3_dfm_6;
  reg [31:0] tmp_48_lpi_3_dfm_7;
  reg [31:0] mult_56_res_sva_1;
  reg [31:0] tmp_50_lpi_3_dfm_2;
  reg [31:0] tmp_50_lpi_3_dfm_3;
  reg [31:0] tmp_50_lpi_3_dfm_4;
  reg [31:0] tmp_50_lpi_3_dfm_5;
  reg [31:0] tmp_50_lpi_3_dfm_6;
  reg [31:0] tmp_50_lpi_3_dfm_7;
  reg [31:0] mult_57_res_sva_1;
  reg [31:0] tmp_52_lpi_3_dfm_2;
  reg [31:0] tmp_52_lpi_3_dfm_3;
  reg [31:0] tmp_52_lpi_3_dfm_4;
  reg [31:0] tmp_52_lpi_3_dfm_5;
  reg [31:0] tmp_52_lpi_3_dfm_6;
  reg [31:0] tmp_52_lpi_3_dfm_7;
  reg [31:0] mult_58_res_sva_1;
  reg [31:0] tmp_54_lpi_3_dfm_2;
  reg [31:0] tmp_54_lpi_3_dfm_3;
  reg [31:0] tmp_54_lpi_3_dfm_4;
  reg [31:0] tmp_54_lpi_3_dfm_5;
  reg [31:0] tmp_54_lpi_3_dfm_6;
  reg [31:0] tmp_54_lpi_3_dfm_7;
  reg [31:0] mult_59_res_sva_1;
  reg [31:0] tmp_56_lpi_3_dfm_2;
  reg [31:0] tmp_56_lpi_3_dfm_3;
  reg [31:0] tmp_56_lpi_3_dfm_4;
  reg [31:0] tmp_56_lpi_3_dfm_5;
  reg [31:0] tmp_56_lpi_3_dfm_6;
  reg [31:0] tmp_56_lpi_3_dfm_7;
  reg [31:0] mult_60_res_sva_1;
  reg [31:0] tmp_58_lpi_3_dfm_2;
  reg [31:0] tmp_58_lpi_3_dfm_3;
  reg [31:0] tmp_58_lpi_3_dfm_4;
  reg [31:0] tmp_58_lpi_3_dfm_5;
  reg [31:0] tmp_58_lpi_3_dfm_6;
  reg [31:0] tmp_58_lpi_3_dfm_7;
  reg [31:0] mult_61_res_sva_1;
  reg [31:0] tmp_60_lpi_3_dfm_2;
  reg [31:0] tmp_60_lpi_3_dfm_3;
  reg [31:0] tmp_60_lpi_3_dfm_4;
  reg [31:0] tmp_60_lpi_3_dfm_5;
  reg [31:0] tmp_60_lpi_3_dfm_6;
  reg [31:0] tmp_60_lpi_3_dfm_7;
  reg [31:0] mult_62_res_sva_1;
  reg [31:0] tmp_62_lpi_3_dfm_2;
  reg [31:0] tmp_62_lpi_3_dfm_3;
  reg [31:0] tmp_62_lpi_3_dfm_4;
  reg [31:0] tmp_62_lpi_3_dfm_5;
  reg [31:0] tmp_62_lpi_3_dfm_6;
  reg [31:0] tmp_62_lpi_3_dfm_7;
  reg [31:0] mult_63_res_sva_1;
  reg [31:0] mult_48_z_asn_itm_2;
  reg [31:0] mult_48_z_asn_itm_3;
  reg [31:0] mult_48_z_asn_itm_4;
  reg [31:0] mult_49_z_asn_itm_2;
  reg [31:0] mult_49_z_asn_itm_3;
  reg [31:0] mult_49_z_asn_itm_4;
  reg [31:0] mult_50_z_asn_itm_2;
  reg [31:0] mult_50_z_asn_itm_3;
  reg [31:0] mult_50_z_asn_itm_4;
  reg [31:0] mult_51_z_asn_itm_2;
  reg [31:0] mult_51_z_asn_itm_3;
  reg [31:0] mult_51_z_asn_itm_4;
  reg [31:0] mult_52_z_asn_itm_2;
  reg [31:0] mult_52_z_asn_itm_3;
  reg [31:0] mult_52_z_asn_itm_4;
  reg [31:0] mult_53_z_asn_itm_2;
  reg [31:0] mult_53_z_asn_itm_3;
  reg [31:0] mult_53_z_asn_itm_4;
  reg [31:0] mult_54_z_asn_itm_2;
  reg [31:0] mult_54_z_asn_itm_3;
  reg [31:0] mult_54_z_asn_itm_4;
  reg [31:0] mult_55_z_asn_itm_2;
  reg [31:0] mult_55_z_asn_itm_3;
  reg [31:0] mult_55_z_asn_itm_4;
  reg [31:0] mult_56_z_asn_itm_2;
  reg [31:0] mult_56_z_asn_itm_3;
  reg [31:0] mult_56_z_asn_itm_4;
  reg [31:0] mult_57_z_asn_itm_2;
  reg [31:0] mult_57_z_asn_itm_3;
  reg [31:0] mult_57_z_asn_itm_4;
  reg [31:0] mult_58_z_asn_itm_2;
  reg [31:0] mult_58_z_asn_itm_3;
  reg [31:0] mult_58_z_asn_itm_4;
  reg [31:0] mult_59_z_asn_itm_2;
  reg [31:0] mult_59_z_asn_itm_3;
  reg [31:0] mult_59_z_asn_itm_4;
  reg [31:0] mult_60_z_asn_itm_2;
  reg [31:0] mult_60_z_asn_itm_3;
  reg [31:0] mult_60_z_asn_itm_4;
  reg [31:0] mult_61_z_asn_itm_2;
  reg [31:0] mult_61_z_asn_itm_3;
  reg [31:0] mult_61_z_asn_itm_4;
  reg [31:0] mult_62_z_asn_itm_2;
  reg [31:0] mult_62_z_asn_itm_3;
  reg [31:0] mult_62_z_asn_itm_4;
  reg [31:0] mult_63_z_asn_itm_2;
  reg [31:0] mult_63_z_asn_itm_3;
  reg [31:0] mult_63_z_asn_itm_4;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_1;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_2;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_3;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_4;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_5;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_6;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_7;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_8;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_9;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_10;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_1;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_2;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_3;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_4;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_5;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_6;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_7;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_8;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_9;
  reg [3:0] INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_10;
  wire [1:0] operator_33_true_3_lshift_psp_1_0_sva_mx0w2;
  wire [2:0] operator_20_false_acc_cse_sva_mx0w0;
  wire [3:0] nl_operator_20_false_acc_cse_sva_mx0w0;
  wire [4:0] INNER_LOOP1_tw_and_psp_sva_1;
  wire modulo_add_qelse_and_cse;
  wire butterFly1_and_cse;
  wire mult_15_if_and_cse;
  wire and_1665_cse;
  wire mult_15_z_and_cse;
  wire mult_15_z_and_cse_1;
  wire mult_15_z_and_1_cse;
  wire mult_15_z_and_2_cse;
  wire mult_15_z_and_3_cse;
  wire INNER_LOOP1_r_and_20_cse;
  wire INNER_LOOP1_r_and_23_cse;
  wire INNER_LOOP1_r_and_26_cse;
  wire INNER_LOOP1_r_and_29_cse;
  wire INNER_LOOP1_r_and_7_cse;
  wire modulo_add_16_qelse_and_cse;
  wire butterFly1_31_and_cse;
  wire mult_31_if_and_cse;
  wire and_1666_cse;
  wire mult_31_z_and_cse;
  wire mult_31_z_and_1_cse;
  wire mult_31_z_and_2_cse;
  wire butterFly1_31_f1_and_4_cse;
  wire butterFly1_31_f1_and_5_cse;
  wire butterFly1_31_f1_and_6_cse;
  wire butterFly1_31_f1_and_7_cse;
  wire INNER_LOOP2_r_and_3_cse;
  wire INNER_LOOP2_r_and_4_cse;
  wire modulo_add_32_qelse_and_cse;
  wire butterFly2_and_cse;
  wire mult_47_if_and_cse;
  wire butterFly2_15_tw_and_cse;
  wire mult_47_z_and_cse;
  wire mult_47_z_and_1_cse;
  wire mult_47_z_and_2_cse;
  wire INNER_LOOP3_r_and_19_cse;
  wire INNER_LOOP3_r_and_22_cse;
  wire INNER_LOOP3_r_and_25_cse;
  wire INNER_LOOP3_r_and_28_cse;
  wire modulo_add_48_qelse_and_cse;
  wire butterFly2_31_and_cse;
  wire mult_63_if_and_cse;
  wire mult_63_z_and_cse;
  wire mult_63_z_and_1_cse;
  wire mult_63_z_and_2_cse;
  wire butterFly2_31_f1_and_4_cse;
  wire butterFly2_31_f1_and_5_cse;
  wire butterFly2_31_f1_and_6_cse;
  wire INNER_LOOP4_r_and_3_cse;
  wire INNER_LOOP4_r_and_4_cse;
  wire [4:0] INNER_LOOP1_r_INNER_LOOP1_r_and_2_cse;
  wire [4:0] INNER_LOOP1_r_INNER_LOOP1_r_and_6_cse;
  wire INNER_LOOP4_INNER_LOOP4_and_1_cse;
  wire INNER_LOOP3_INNER_LOOP3_and_1_cse;
  wire z_out_32_1;
  wire z_out_1_32;
  wire z_out_2_32;
  wire z_out_3_32;
  wire z_out_4_32;
  wire z_out_5_32;
  wire z_out_6_32;
  wire z_out_7_32;
  wire z_out_8_32;
  wire z_out_9_32;
  wire z_out_10_32;
  wire z_out_11_32;
  wire z_out_12_32;
  wire z_out_13_32;
  wire z_out_14_32;
  wire z_out_15_32;
  wire z_out_16_32;
  wire z_out_17_32;
  wire z_out_18_32;
  wire z_out_19_32;
  wire z_out_20_32;
  wire z_out_21_32;
  wire z_out_22_32;
  wire z_out_23_32;
  wire z_out_24_32;
  wire z_out_25_32;
  wire z_out_26_32;
  wire z_out_27_32;
  wire z_out_28_32;
  wire z_out_29_32;
  wire z_out_30_32;
  wire z_out_31_32;
  wire [31:0] butterFly1_10_mux_7_cse;

  wire[3:0] INNER_LOOP2_tw_and_nl;
  wire[0:0] mult_4_t_and_nl;
  wire[0:0] mult_4_t_and_1_nl;
  wire[0:0] mult_4_t_and_2_nl;
  wire[0:0] mult_4_t_and_3_nl;
  wire[0:0] nor_4_nl;
  wire[31:0] modulo_add_20_qif_acc_nl;
  wire[32:0] nl_modulo_add_20_qif_acc_nl;
  wire[31:0] modulo_add_21_qif_acc_nl;
  wire[32:0] nl_modulo_add_21_qif_acc_nl;
  wire[31:0] modulo_add_22_qif_acc_nl;
  wire[32:0] nl_modulo_add_22_qif_acc_nl;
  wire[31:0] modulo_add_23_qif_acc_nl;
  wire[32:0] nl_modulo_add_23_qif_acc_nl;
  wire[31:0] modulo_add_24_qif_acc_nl;
  wire[32:0] nl_modulo_add_24_qif_acc_nl;
  wire[31:0] modulo_add_25_qif_acc_nl;
  wire[32:0] nl_modulo_add_25_qif_acc_nl;
  wire[31:0] modulo_add_26_qif_acc_nl;
  wire[32:0] nl_modulo_add_26_qif_acc_nl;
  wire[31:0] modulo_add_27_qif_acc_nl;
  wire[32:0] nl_modulo_add_27_qif_acc_nl;
  wire[31:0] modulo_add_28_qif_acc_nl;
  wire[32:0] nl_modulo_add_28_qif_acc_nl;
  wire[31:0] modulo_add_29_qif_acc_nl;
  wire[32:0] nl_modulo_add_29_qif_acc_nl;
  wire[31:0] modulo_add_30_qif_acc_nl;
  wire[32:0] nl_modulo_add_30_qif_acc_nl;
  wire[31:0] modulo_add_31_qif_acc_nl;
  wire[32:0] nl_modulo_add_31_qif_acc_nl;
  wire[32:0] mult_31_if_acc_1_nl;
  wire[33:0] nl_mult_31_if_acc_1_nl;
  wire[32:0] mult_30_if_acc_1_nl;
  wire[33:0] nl_mult_30_if_acc_1_nl;
  wire[32:0] mult_29_if_acc_1_nl;
  wire[33:0] nl_mult_29_if_acc_1_nl;
  wire[32:0] mult_28_if_acc_1_nl;
  wire[33:0] nl_mult_28_if_acc_1_nl;
  wire[32:0] mult_27_if_acc_1_nl;
  wire[33:0] nl_mult_27_if_acc_1_nl;
  wire[32:0] mult_26_if_acc_1_nl;
  wire[33:0] nl_mult_26_if_acc_1_nl;
  wire[32:0] mult_25_if_acc_1_nl;
  wire[33:0] nl_mult_25_if_acc_1_nl;
  wire[32:0] mult_24_if_acc_1_nl;
  wire[33:0] nl_mult_24_if_acc_1_nl;
  wire[32:0] mult_23_if_acc_1_nl;
  wire[33:0] nl_mult_23_if_acc_1_nl;
  wire[32:0] mult_22_if_acc_1_nl;
  wire[33:0] nl_mult_22_if_acc_1_nl;
  wire[32:0] mult_21_if_acc_1_nl;
  wire[33:0] nl_mult_21_if_acc_1_nl;
  wire[32:0] mult_20_if_acc_1_nl;
  wire[33:0] nl_mult_20_if_acc_1_nl;
  wire[32:0] mult_19_if_acc_1_nl;
  wire[33:0] nl_mult_19_if_acc_1_nl;
  wire[32:0] mult_18_if_acc_1_nl;
  wire[33:0] nl_mult_18_if_acc_1_nl;
  wire[32:0] mult_17_if_acc_1_nl;
  wire[33:0] nl_mult_17_if_acc_1_nl;
  wire[32:0] mult_16_if_acc_1_nl;
  wire[33:0] nl_mult_16_if_acc_1_nl;
  wire[0:0] butterFly2_21_tw_butterFly2_21_tw_or_nl;
  wire[31:0] mult_22_if_acc_nl;
  wire[32:0] nl_mult_22_if_acc_nl;
  wire[31:0] mult_21_if_acc_nl;
  wire[32:0] nl_mult_21_if_acc_nl;
  wire[31:0] mult_20_if_acc_nl;
  wire[32:0] nl_mult_20_if_acc_nl;
  wire[31:0] mult_19_if_acc_nl;
  wire[32:0] nl_mult_19_if_acc_nl;
  wire[31:0] mult_18_if_acc_nl;
  wire[32:0] nl_mult_18_if_acc_nl;
  wire[31:0] mult_17_if_acc_nl;
  wire[32:0] nl_mult_17_if_acc_nl;
  wire[0:0] butterFly1_mux_nl;
  wire[0:0] butterFly1_and_1_nl;
  wire[0:0] butterFly1_1_mux_nl;
  wire[0:0] butterFly1_1_and_1_nl;
  wire[0:0] butterFly1_2_mux_nl;
  wire[0:0] butterFly1_2_and_1_nl;
  wire[0:0] butterFly1_3_mux_nl;
  wire[0:0] butterFly1_3_and_1_nl;
  wire[0:0] butterFly1_4_mux_nl;
  wire[0:0] butterFly1_4_and_1_nl;
  wire[0:0] butterFly1_5_mux_nl;
  wire[0:0] butterFly1_5_and_1_nl;
  wire[0:0] butterFly1_6_mux_nl;
  wire[0:0] butterFly1_6_and_1_nl;
  wire[0:0] butterFly1_7_mux_nl;
  wire[0:0] butterFly1_7_and_1_nl;
  wire[0:0] butterFly1_8_mux_nl;
  wire[0:0] butterFly1_8_and_1_nl;
  wire[0:0] butterFly1_9_mux_nl;
  wire[0:0] butterFly1_9_and_1_nl;
  wire[0:0] butterFly1_10_mux_nl;
  wire[0:0] butterFly1_10_and_1_nl;
  wire[0:0] butterFly1_11_mux_nl;
  wire[0:0] butterFly1_11_and_1_nl;
  wire[0:0] butterFly1_12_mux_nl;
  wire[0:0] butterFly1_12_and_1_nl;
  wire[0:0] butterFly1_13_mux_nl;
  wire[0:0] butterFly1_13_and_1_nl;
  wire[0:0] butterFly1_14_mux_nl;
  wire[0:0] butterFly1_14_and_1_nl;
  wire[0:0] butterFly1_15_mux_nl;
  wire[0:0] butterFly1_15_and_1_nl;
  wire[33:0] acc_nl;
  wire[34:0] nl_acc_nl;
  wire[31:0] modulo_add_mux1h_3_nl;
  wire[33:0] acc_1_nl;
  wire[34:0] nl_acc_1_nl;
  wire[31:0] modulo_add_1_mux1h_3_nl;
  wire[33:0] acc_2_nl;
  wire[34:0] nl_acc_2_nl;
  wire[31:0] modulo_add_2_mux1h_3_nl;
  wire[33:0] acc_3_nl;
  wire[34:0] nl_acc_3_nl;
  wire[31:0] modulo_add_3_mux1h_3_nl;
  wire[33:0] acc_4_nl;
  wire[34:0] nl_acc_4_nl;
  wire[31:0] modulo_add_4_mux1h_3_nl;
  wire[33:0] acc_5_nl;
  wire[34:0] nl_acc_5_nl;
  wire[31:0] modulo_add_5_mux1h_3_nl;
  wire[33:0] acc_6_nl;
  wire[34:0] nl_acc_6_nl;
  wire[31:0] modulo_add_6_mux1h_3_nl;
  wire[33:0] acc_7_nl;
  wire[34:0] nl_acc_7_nl;
  wire[31:0] modulo_add_7_mux1h_3_nl;
  wire[33:0] acc_8_nl;
  wire[34:0] nl_acc_8_nl;
  wire[31:0] modulo_add_8_mux1h_3_nl;
  wire[33:0] acc_9_nl;
  wire[34:0] nl_acc_9_nl;
  wire[31:0] modulo_add_9_mux1h_3_nl;
  wire[33:0] acc_10_nl;
  wire[34:0] nl_acc_10_nl;
  wire[31:0] modulo_add_10_mux1h_3_nl;
  wire[33:0] acc_11_nl;
  wire[34:0] nl_acc_11_nl;
  wire[31:0] modulo_add_11_mux1h_3_nl;
  wire[33:0] acc_12_nl;
  wire[34:0] nl_acc_12_nl;
  wire[31:0] modulo_add_12_mux1h_3_nl;
  wire[33:0] acc_13_nl;
  wire[34:0] nl_acc_13_nl;
  wire[31:0] modulo_add_13_mux1h_3_nl;
  wire[33:0] acc_14_nl;
  wire[34:0] nl_acc_14_nl;
  wire[31:0] modulo_add_14_mux1h_3_nl;
  wire[33:0] acc_15_nl;
  wire[34:0] nl_acc_15_nl;
  wire[31:0] modulo_add_15_mux1h_3_nl;
  wire[33:0] acc_16_nl;
  wire[34:0] nl_acc_16_nl;
  wire[31:0] mult_15_if_mux1h_4_nl;
  wire[33:0] acc_17_nl;
  wire[34:0] nl_acc_17_nl;
  wire[31:0] mult_14_if_mux1h_4_nl;
  wire[33:0] acc_18_nl;
  wire[34:0] nl_acc_18_nl;
  wire[31:0] mult_13_if_mux1h_4_nl;
  wire[33:0] acc_19_nl;
  wire[34:0] nl_acc_19_nl;
  wire[31:0] mult_12_if_mux1h_6_nl;
  wire[33:0] acc_20_nl;
  wire[34:0] nl_acc_20_nl;
  wire[31:0] mult_11_if_mux1h_4_nl;
  wire[33:0] acc_21_nl;
  wire[34:0] nl_acc_21_nl;
  wire[31:0] mult_10_if_mux1h_4_nl;
  wire[33:0] acc_22_nl;
  wire[34:0] nl_acc_22_nl;
  wire[31:0] mult_9_if_mux1h_4_nl;
  wire[33:0] acc_23_nl;
  wire[34:0] nl_acc_23_nl;
  wire[31:0] mult_8_if_mux1h_4_nl;
  wire[33:0] acc_24_nl;
  wire[34:0] nl_acc_24_nl;
  wire[31:0] mult_7_if_mux1h_4_nl;
  wire[33:0] acc_25_nl;
  wire[34:0] nl_acc_25_nl;
  wire[31:0] mult_6_if_mux1h_4_nl;
  wire[33:0] acc_26_nl;
  wire[34:0] nl_acc_26_nl;
  wire[31:0] mult_5_if_mux1h_6_nl;
  wire[33:0] acc_27_nl;
  wire[34:0] nl_acc_27_nl;
  wire[31:0] mult_4_if_mux1h_4_nl;
  wire[33:0] acc_28_nl;
  wire[34:0] nl_acc_28_nl;
  wire[31:0] mult_3_if_mux1h_6_nl;
  wire[33:0] acc_29_nl;
  wire[34:0] nl_acc_29_nl;
  wire[31:0] mult_2_if_mux1h_6_nl;
  wire[33:0] acc_30_nl;
  wire[34:0] nl_acc_30_nl;
  wire[31:0] mult_1_if_mux1h_4_nl;
  wire[33:0] acc_31_nl;
  wire[34:0] nl_acc_31_nl;
  wire[31:0] mult_if_mux1h_6_nl;
  wire[4:0] operator_20_false_1_mux_2_nl;
  wire[32:0] acc_33_nl;
  wire[33:0] nl_acc_33_nl;
  wire[31:0] modulo_add_40_qif_mux1h_2_nl;
  wire[32:0] acc_34_nl;
  wire[33:0] nl_acc_34_nl;
  wire[31:0] modulo_add_41_qif_mux1h_2_nl;
  wire[32:0] acc_35_nl;
  wire[33:0] nl_acc_35_nl;
  wire[31:0] modulo_add_42_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_63_qif_mux_2_nl;
  wire[32:0] acc_37_nl;
  wire[33:0] nl_acc_37_nl;
  wire[31:0] modulo_add_63_qif_mux_2_nl;
  wire[30:0] modulo_sub_62_qif_mux_2_nl;
  wire[32:0] acc_39_nl;
  wire[33:0] nl_acc_39_nl;
  wire[31:0] modulo_add_62_qif_mux_2_nl;
  wire[31:0] modulo_add_62_qif_mux_3_nl;
  wire[30:0] modulo_sub_61_qif_mux_2_nl;
  wire[32:0] acc_41_nl;
  wire[33:0] nl_acc_41_nl;
  wire[31:0] modulo_add_61_qif_mux_2_nl;
  wire[31:0] modulo_add_61_qif_mux_3_nl;
  wire[30:0] modulo_sub_60_qif_mux_2_nl;
  wire[32:0] acc_43_nl;
  wire[33:0] nl_acc_43_nl;
  wire[31:0] modulo_add_60_qif_mux_2_nl;
  wire[31:0] modulo_add_60_qif_mux_3_nl;
  wire[30:0] modulo_sub_59_qif_mux_2_nl;
  wire[32:0] acc_45_nl;
  wire[33:0] nl_acc_45_nl;
  wire[31:0] modulo_add_59_qif_mux_2_nl;
  wire[31:0] modulo_add_59_qif_mux_3_nl;
  wire[30:0] modulo_sub_58_qif_mux_2_nl;
  wire[32:0] acc_47_nl;
  wire[33:0] nl_acc_47_nl;
  wire[31:0] modulo_add_58_qif_mux_2_nl;
  wire[31:0] modulo_add_58_qif_mux_3_nl;
  wire[30:0] modulo_sub_57_qif_mux_2_nl;
  wire[30:0] modulo_sub_16_qif_mux_2_nl;
  wire[32:0] acc_50_nl;
  wire[33:0] nl_acc_50_nl;
  wire[31:0] mult_12_if_mux1h_7_nl;
  wire[30:0] modulo_sub_17_qif_mux_2_nl;
  wire[32:0] acc_52_nl;
  wire[33:0] nl_acc_52_nl;
  wire[31:0] modulo_add_47_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_18_qif_mux_2_nl;
  wire[32:0] acc_54_nl;
  wire[33:0] nl_acc_54_nl;
  wire[31:0] modulo_add_54_qif_mux_2_nl;
  wire[31:0] modulo_add_54_qif_mux_3_nl;
  wire[30:0] modulo_sub_19_qif_mux_2_nl;
  wire[32:0] acc_56_nl;
  wire[33:0] nl_acc_56_nl;
  wire[31:0] modulo_add_46_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_20_qif_mux_2_nl;
  wire[32:0] acc_58_nl;
  wire[33:0] nl_acc_58_nl;
  wire[31:0] modulo_add_45_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_21_qif_mux_2_nl;
  wire[32:0] acc_60_nl;
  wire[33:0] nl_acc_60_nl;
  wire[31:0] modulo_add_44_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_22_qif_mux_2_nl;
  wire[32:0] acc_62_nl;
  wire[33:0] nl_acc_62_nl;
  wire[31:0] modulo_add_43_qif_mux1h_2_nl;
  wire[30:0] modulo_sub_23_qif_mux_2_nl;
  wire[30:0] modulo_sub_56_qif_mux_2_nl;
  wire[30:0] modulo_sub_24_qif_mux_2_nl;
  wire[30:0] modulo_sub_55_qif_mux_2_nl;
  wire[30:0] modulo_sub_25_qif_mux_2_nl;
  wire[30:0] modulo_sub_54_qif_mux_2_nl;
  wire[30:0] modulo_sub_26_qif_mux_2_nl;
  wire[30:0] modulo_sub_53_qif_mux_2_nl;
  wire[30:0] modulo_sub_27_qif_mux_2_nl;
  wire[30:0] modulo_sub_52_qif_mux_2_nl;
  wire[30:0] modulo_sub_28_qif_mux_2_nl;
  wire[30:0] modulo_sub_51_qif_mux_2_nl;
  wire[30:0] modulo_sub_29_qif_mux_2_nl;
  wire[30:0] modulo_sub_50_qif_mux_2_nl;
  wire[30:0] modulo_sub_30_qif_mux_2_nl;
  wire[30:0] modulo_sub_48_qif_mux_2_nl;
  wire[30:0] modulo_sub_31_qif_mux_2_nl;
  wire[30:0] modulo_sub_49_qif_mux_2_nl;
  wire[32:0] acc_81_nl;
  wire[33:0] nl_acc_81_nl;
  wire[31:0] modulo_add_57_qif_mux_2_nl;
  wire[31:0] modulo_add_57_qif_mux_3_nl;
  wire[32:0] acc_82_nl;
  wire[33:0] nl_acc_82_nl;
  wire[31:0] modulo_add_55_qif_mux_2_nl;
  wire[31:0] modulo_add_55_qif_mux_3_nl;
  wire[32:0] acc_83_nl;
  wire[33:0] nl_acc_83_nl;
  wire[31:0] modulo_add_56_qif_mux_2_nl;
  wire[31:0] modulo_add_56_qif_mux_3_nl;
  wire[31:0] butterFly1_10_mux_8_nl;
  wire[32:0] acc_85_nl;
  wire[33:0] nl_acc_85_nl;
  wire[31:0] butterFly1_10_mux_10_nl;
  wire[32:0] acc_86_nl;
  wire[33:0] nl_acc_86_nl;
  wire[31:0] modulo_add_qif_mux1h_2_nl;
  wire[32:0] acc_87_nl;
  wire[33:0] nl_acc_87_nl;
  wire[31:0] modulo_add_1_qif_mux1h_2_nl;
  wire[32:0] acc_88_nl;
  wire[33:0] nl_acc_88_nl;
  wire[31:0] modulo_add_2_qif_mux1h_2_nl;
  wire[32:0] acc_89_nl;
  wire[33:0] nl_acc_89_nl;
  wire[31:0] modulo_add_3_qif_mux1h_2_nl;
  wire[32:0] acc_90_nl;
  wire[33:0] nl_acc_90_nl;
  wire[31:0] modulo_add_4_qif_mux1h_2_nl;
  wire[32:0] acc_91_nl;
  wire[33:0] nl_acc_91_nl;
  wire[31:0] modulo_add_5_qif_mux1h_2_nl;
  wire[32:0] acc_92_nl;
  wire[33:0] nl_acc_92_nl;
  wire[31:0] modulo_add_6_qif_mux1h_2_nl;
  wire[32:0] acc_93_nl;
  wire[33:0] nl_acc_93_nl;
  wire[31:0] modulo_add_7_qif_mux1h_2_nl;
  wire[32:0] acc_94_nl;
  wire[33:0] nl_acc_94_nl;
  wire[31:0] modulo_add_8_qif_mux1h_2_nl;
  wire[32:0] acc_95_nl;
  wire[33:0] nl_acc_95_nl;
  wire[31:0] modulo_add_9_qif_mux1h_2_nl;
  wire[32:0] acc_96_nl;
  wire[33:0] nl_acc_96_nl;
  wire[31:0] modulo_add_10_qif_mux1h_2_nl;
  wire[32:0] acc_97_nl;
  wire[33:0] nl_acc_97_nl;
  wire[31:0] modulo_add_11_qif_mux1h_2_nl;
  wire[32:0] acc_98_nl;
  wire[33:0] nl_acc_98_nl;
  wire[31:0] modulo_add_12_qif_mux1h_2_nl;
  wire[32:0] acc_99_nl;
  wire[33:0] nl_acc_99_nl;
  wire[31:0] modulo_add_13_qif_mux1h_2_nl;
  wire[32:0] acc_100_nl;
  wire[33:0] nl_acc_100_nl;
  wire[31:0] modulo_add_14_qif_mux1h_2_nl;
  wire[32:0] acc_101_nl;
  wire[33:0] nl_acc_101_nl;
  wire[31:0] modulo_add_15_qif_mux1h_2_nl;
  wire[32:0] acc_102_nl;
  wire[33:0] nl_acc_102_nl;
  wire[31:0] mult_5_if_mux1h_7_nl;
  wire[32:0] acc_103_nl;
  wire[33:0] nl_acc_103_nl;
  wire[31:0] mult_3_if_mux1h_7_nl;
  wire[32:0] acc_104_nl;
  wire[33:0] nl_acc_104_nl;
  wire[31:0] mult_if_mux1h_7_nl;
  wire[32:0] acc_105_nl;
  wire[33:0] nl_acc_105_nl;
  wire[31:0] mult_16_if_mux_2_nl;
  wire[32:0] acc_106_nl;
  wire[33:0] nl_acc_106_nl;
  wire[31:0] mult_2_if_mux1h_7_nl;
  wire[32:0] acc_107_nl;
  wire[33:0] nl_acc_107_nl;
  wire[31:0] modulo_add_51_qif_mux1h_2_nl;
  wire[32:0] acc_108_nl;
  wire[33:0] nl_acc_108_nl;
  wire[31:0] modulo_add_53_qif_mux1h_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [31:0] nl_mult_t_mul_cmp_a;
  assign nl_mult_t_mul_cmp_a = MUX1HOT_v_32_4_2(tmp_65_lpi_3_dfm_mx0, tmp_1_lpi_3_dfm_mx0,
      mult_t_mul_cmp_a_mx0w2, tmp_31_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_b;
  assign nl_mult_t_mul_cmp_b = MUX1HOT_v_32_9_2(twiddle_h_rsc_0_0_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt,
      twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_10_i_s_din_mxwt, twiddle_h_rsc_0_11_i_s_din_mxwt,
      twiddle_h_rsc_0_12_i_s_din_mxwt, twiddle_h_rsc_0_13_i_s_din_mxwt, twiddle_h_rsc_0_14_i_s_din_mxwt,
      twiddle_h_rsc_0_15_i_s_din_mxwt, {or_dcpl_29 , INNER_LOOP1_tw_h_and_44_cse
      , INNER_LOOP1_tw_h_and_45_cse , INNER_LOOP1_tw_h_and_46_cse , INNER_LOOP1_tw_h_and_47_cse
      , INNER_LOOP1_tw_h_or_9_cse , INNER_LOOP1_tw_h_or_10_cse , INNER_LOOP1_tw_h_or_11_cse
      , INNER_LOOP1_tw_h_or_12_cse});
  wire [31:0] nl_mult_t_mul_cmp_1_a;
  assign nl_mult_t_mul_cmp_1_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_1_a_mx0w0, tmp_31_lpi_3_dfm_mx0,
      tmp_125_lpi_3_dfm_mx0, tmp_1_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_1_b;
  assign nl_mult_t_mul_cmp_1_b = MUX1HOT_v_32_5_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_10_i_s_din_mxwt, twiddle_h_rsc_0_12_i_s_din_mxwt,
      twiddle_h_rsc_0_14_i_s_din_mxwt, {(~ (fsm_output[6])) , INNER_LOOP1_tw_h_and_40_cse
      , INNER_LOOP1_tw_h_and_41_cse , INNER_LOOP1_tw_h_and_42_cse , INNER_LOOP1_tw_h_and_43_cse});
  wire [31:0] nl_mult_t_mul_cmp_2_a;
  assign nl_mult_t_mul_cmp_2_a = MUX1HOT_v_32_4_2(tmp_93_lpi_3_dfm_mx0, tmp_29_lpi_3_dfm_mx0,
      mult_t_mul_cmp_2_a_mx0w2, tmp_3_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_2_b;
  assign nl_mult_t_mul_cmp_2_b = MUX1HOT_v_32_6_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_12_i_s_din_mxwt,
      twiddle_h_rsc_0_13_i_s_din_mxwt, twiddle_h_rsc_0_1_i_s_din_mxwt, {or_tmp_804
      , INNER_LOOP1_tw_h_and_36_cse , INNER_LOOP1_tw_h_and_37_cse , INNER_LOOP1_tw_h_and_38_cse
      , INNER_LOOP1_tw_h_and_39_cse , or_tmp_806});
  wire [31:0] nl_mult_t_mul_cmp_3_a;
  assign nl_mult_t_mul_cmp_3_a = MUX1HOT_v_32_4_2(tmp_91_lpi_3_dfm_mx0, tmp_27_lpi_3_dfm_mx0,
      tmp_121_lpi_3_dfm_mx0, tmp_5_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] or_857_nl;
  wire [31:0] nl_mult_t_mul_cmp_3_b;
  assign or_857_nl = or_dcpl_29 | and_1944_cse;
  assign nl_mult_t_mul_cmp_3_b = MUX1HOT_v_32_4_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_12_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_2_i_s_din_mxwt,
      {or_857_nl , or_tmp_812 , and_1948_cse , or_tmp_814});
  wire [31:0] nl_mult_t_mul_cmp_4_a;
  assign nl_mult_t_mul_cmp_4_a = MUX1HOT_v_32_4_2(tmp_89_lpi_3_dfm_mx0, tmp_25_lpi_3_dfm_mx0,
      mult_t_mul_cmp_4_a_mx0w2, tmp_7_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] INNER_LOOP1_tw_h_or_8_nl;
  wire [31:0] nl_mult_t_mul_cmp_4_b;
  assign INNER_LOOP1_tw_h_or_8_nl = or_dcpl_29 | INNER_LOOP1_tw_h_and_49_cse;
  assign nl_mult_t_mul_cmp_4_b = MUX1HOT_v_32_8_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_10_i_s_din_mxwt,
      twiddle_h_rsc_0_11_i_s_din_mxwt, twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_2_i_s_din_mxwt,
      twiddle_h_rsc_0_3_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_8_nl , INNER_LOOP1_tw_h_and_29_cse
      , INNER_LOOP1_tw_h_and_30_cse , INNER_LOOP1_tw_h_and_31_cse , INNER_LOOP1_tw_h_and_32_cse
      , INNER_LOOP1_tw_h_and_51_cse , INNER_LOOP1_tw_h_and_53_cse , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_t_mul_cmp_5_a;
  assign nl_mult_t_mul_cmp_5_a = MUX1HOT_v_32_4_2(tmp_87_lpi_3_dfm_mx0, tmp_23_lpi_3_dfm_mx0,
      mult_t_mul_cmp_5_a_mx0w2, mult_t_mul_cmp_12_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_5_b;
  assign nl_mult_t_mul_cmp_5_b = MUX1HOT_v_32_4_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_10_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_4_i_s_din_mxwt,
      {or_dcpl_29 , or_tmp_827 , and_1978_cse , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_6_a;
  assign nl_mult_t_mul_cmp_6_a = MUX1HOT_v_32_4_2(tmp_85_lpi_3_dfm_mx0, tmp_21_lpi_3_dfm_mx0,
      mult_t_mul_cmp_6_a_mx0w2, mult_t_mul_cmp_11_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_6_b;
  assign nl_mult_t_mul_cmp_6_b = MUX1HOT_v_32_5_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_5_i_s_din_mxwt,
      twiddle_h_rsc_0_4_i_s_din_mxwt, {or_dcpl_29 , or_tmp_835 , and_1994_cse , or_tmp_806
      , and_1929_cse});
  wire [31:0] nl_mult_t_mul_cmp_7_a;
  assign nl_mult_t_mul_cmp_7_a = MUX1HOT_v_32_4_2(tmp_83_lpi_3_dfm_mx0, tmp_19_lpi_3_dfm_mx0,
      mult_t_mul_cmp_7_a_mx0w2, mult_t_mul_cmp_10_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_7_b;
  assign nl_mult_t_mul_cmp_7_b = MUX1HOT_v_32_4_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_6_i_s_din_mxwt, twiddle_h_rsc_0_4_i_s_din_mxwt,
      {or_dcpl_29 , (fsm_output[6]) , or_tmp_814 , and_1944_cse});
  wire [31:0] nl_mult_t_mul_cmp_8_a;
  assign nl_mult_t_mul_cmp_8_a = MUX1HOT_v_32_4_2(tmp_81_lpi_3_dfm_mx0, tmp_17_lpi_3_dfm_mx0,
      mult_t_mul_cmp_8_a_mx0w2, mult_t_mul_cmp_9_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_8_b;
  assign nl_mult_t_mul_cmp_8_b = MUX1HOT_v_32_8_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_2_i_s_din_mxwt, twiddle_h_rsc_0_3_i_s_din_mxwt,
      twiddle_h_rsc_0_4_i_s_din_mxwt, twiddle_h_rsc_0_5_i_s_din_mxwt, twiddle_h_rsc_0_6_i_s_din_mxwt,
      twiddle_h_rsc_0_7_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_3_cse , INNER_LOOP1_tw_h_and_45_cse
      , INNER_LOOP1_tw_h_and_46_cse , INNER_LOOP1_tw_h_and_47_cse , INNER_LOOP1_tw_h_or_9_cse
      , INNER_LOOP1_tw_h_or_10_cse , INNER_LOOP1_tw_h_or_11_cse , INNER_LOOP1_tw_h_or_12_cse});
  wire [31:0] nl_mult_t_mul_cmp_9_a;
  assign nl_mult_t_mul_cmp_9_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_9_a_mx0w0, mult_t_mul_cmp_9_a_mx0w3,
      mult_t_mul_cmp_9_a_mx0w2, tmp_17_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] INNER_LOOP1_tw_h_or_2_nl;
  wire [31:0] nl_mult_t_mul_cmp_9_b;
  assign INNER_LOOP1_tw_h_or_2_nl = or_dcpl_29 | INNER_LOOP1_tw_h_and_40_cse;
  assign nl_mult_t_mul_cmp_9_b = MUX1HOT_v_32_5_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_2_i_s_din_mxwt, twiddle_h_rsc_0_4_i_s_din_mxwt, twiddle_h_rsc_0_6_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_2_nl , INNER_LOOP1_tw_h_and_41_cse
      , INNER_LOOP1_tw_h_and_42_cse , INNER_LOOP1_tw_h_and_43_cse , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_10_a;
  assign nl_mult_t_mul_cmp_10_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_10_a_mx0w0, mult_t_mul_cmp_10_a_mx0w3,
      mult_t_mul_cmp_10_a_mx0w2, tmp_19_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_10_b;
  assign nl_mult_t_mul_cmp_10_b = MUX1HOT_v_32_6_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_4_i_s_din_mxwt, twiddle_h_rsc_0_5_i_s_din_mxwt,
      twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_1_cse
      , INNER_LOOP1_tw_h_and_37_cse , INNER_LOOP1_tw_h_and_38_cse , INNER_LOOP1_tw_h_and_39_cse
      , or_tmp_806 , and_1929_cse});
  wire [31:0] nl_mult_t_mul_cmp_11_a;
  assign nl_mult_t_mul_cmp_11_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_11_a_mx0w0, mult_t_mul_cmp_11_a_mx0w3,
      mult_t_mul_cmp_11_a_mx0w2, tmp_21_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] or_919_nl;
  wire [31:0] nl_mult_t_mul_cmp_11_b;
  assign or_919_nl = and_1948_cse | or_dcpl_29;
  assign nl_mult_t_mul_cmp_11_b = MUX1HOT_v_32_4_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_4_i_s_din_mxwt, twiddle_h_rsc_0_10_i_s_din_mxwt, twiddle_h_rsc_0_8_i_s_din_mxwt,
      {or_919_nl , or_tmp_812 , or_tmp_814 , and_1944_cse});
  wire [31:0] nl_mult_t_mul_cmp_12_b;
  assign nl_mult_t_mul_cmp_12_b = MUX1HOT_v_32_8_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_2_i_s_din_mxwt, twiddle_h_rsc_0_3_i_s_din_mxwt,
      twiddle_h_rsc_0_8_i_s_din_mxwt, twiddle_h_rsc_0_9_i_s_din_mxwt, twiddle_h_rsc_0_10_i_s_din_mxwt,
      twiddle_h_rsc_0_11_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_cse , INNER_LOOP1_tw_h_and_30_cse
      , INNER_LOOP1_tw_h_and_31_cse , INNER_LOOP1_tw_h_and_32_cse , INNER_LOOP1_tw_h_and_49_cse
      , INNER_LOOP1_tw_h_and_51_cse , INNER_LOOP1_tw_h_and_53_cse , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_t_mul_cmp_13_a;
  assign nl_mult_t_mul_cmp_13_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_13_a_mx0w0, tmp_7_lpi_3_dfm_mx0,
      mult_t_mul_cmp_13_a_mx0w2, tmp_25_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_13_b;
  assign nl_mult_t_mul_cmp_13_b = MUX1HOT_v_32_3_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_2_i_s_din_mxwt, twiddle_h_rsc_0_12_i_s_din_mxwt, {or_tmp_888
      , or_tmp_827 , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_14_a;
  assign nl_mult_t_mul_cmp_14_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_14_a_mx0w0, tmp_5_lpi_3_dfm_mx0,
      mult_t_mul_cmp_14_a_mx0w2, tmp_27_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_t_mul_cmp_14_b;
  assign nl_mult_t_mul_cmp_14_b = MUX1HOT_v_32_4_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_1_i_s_din_mxwt, twiddle_h_rsc_0_13_i_s_din_mxwt, twiddle_h_rsc_0_12_i_s_din_mxwt,
      {or_tmp_895 , or_tmp_835 , or_tmp_806 , and_1929_cse});
  wire [31:0] nl_mult_t_mul_cmp_15_a;
  assign nl_mult_t_mul_cmp_15_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_15_a_mx0w0, tmp_3_lpi_3_dfm_mx0,
      mult_t_mul_cmp_15_a_mx0w2, tmp_29_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] or_949_nl;
  wire [31:0] nl_mult_t_mul_cmp_15_b;
  assign or_949_nl = or_dcpl_29 | (fsm_output[6]);
  assign nl_mult_t_mul_cmp_15_b = MUX1HOT_v_32_3_2(twiddle_h_rsc_0_0_i_s_din_mxwt,
      twiddle_h_rsc_0_14_i_s_din_mxwt, twiddle_h_rsc_0_12_i_s_din_mxwt, {or_949_nl
      , or_tmp_814 , and_1944_cse});
  wire [31:0] nl_mult_z_mul_cmp_a;
  assign nl_mult_z_mul_cmp_a = MUX1HOT_v_32_3_2(tmp_65_lpi_3_dfm_mx0, tmp_1_lpi_3_dfm_mx0,
      mult_t_mul_cmp_a_mx0w2, {(fsm_output[2]) , c_or_cse , (fsm_output[6])});
  wire [31:0] nl_mult_z_mul_cmp_b;
  assign nl_mult_z_mul_cmp_b = MUX1HOT_v_32_9_2(twiddle_rsc_0_0_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt,
      twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_10_i_s_din_mxwt, twiddle_rsc_0_11_i_s_din_mxwt,
      twiddle_rsc_0_12_i_s_din_mxwt, twiddle_rsc_0_13_i_s_din_mxwt, twiddle_rsc_0_14_i_s_din_mxwt,
      twiddle_rsc_0_15_i_s_din_mxwt, {(~ (fsm_output[6])) , INNER_LOOP1_tw_h_and_44_cse
      , INNER_LOOP1_tw_h_and_45_cse , INNER_LOOP1_tw_h_and_46_cse , INNER_LOOP1_tw_h_and_47_cse
      , INNER_LOOP1_tw_h_and_48_cse , INNER_LOOP1_tw_h_and_50_cse , INNER_LOOP1_tw_h_and_52_cse
      , INNER_LOOP1_tw_h_and_54_cse});
  wire [31:0] nl_mult_z_mul_cmp_1_a;
  assign nl_mult_z_mul_cmp_1_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_1_z[51:20]), (mult_t_mul_cmp_11_z[51:20]),
      (mult_t_mul_cmp_12_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_1_b;
  assign nl_mult_z_mul_cmp_1_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_2_a;
  assign nl_mult_z_mul_cmp_2_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_1_a_mx0w0, tmp_31_lpi_3_dfm_mx0,
      mult_t_mul_cmp_15_a_mx0w2, tmp_17_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_2_b;
  assign nl_mult_z_mul_cmp_2_b = MUX_v_32_2_2(twiddle_rsc_0_0_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt,
      fsm_output[8]);
  wire [31:0] nl_mult_z_mul_cmp_3_a;
  assign nl_mult_z_mul_cmp_3_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_2_z[51:20]), (mult_t_mul_cmp_5_z[51:20]),
      (mult_t_mul_cmp_6_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_3_b;
  assign nl_mult_z_mul_cmp_3_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_4_a;
  assign nl_mult_z_mul_cmp_4_a = MUX1HOT_v_32_4_2(tmp_93_lpi_3_dfm_mx0, tmp_29_lpi_3_dfm_mx0,
      tmp_125_lpi_3_dfm_mx0, mult_t_mul_cmp_12_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_4_b;
  assign nl_mult_z_mul_cmp_4_b = MUX1HOT_v_32_6_2(twiddle_rsc_0_0_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt,
      twiddle_rsc_0_10_i_s_din_mxwt, twiddle_rsc_0_12_i_s_din_mxwt, twiddle_rsc_0_14_i_s_din_mxwt,
      twiddle_rsc_0_4_i_s_din_mxwt, {or_dcpl_29 , INNER_LOOP1_tw_h_and_40_cse , INNER_LOOP1_tw_h_and_41_cse
      , INNER_LOOP1_tw_h_and_42_cse , INNER_LOOP1_tw_h_and_43_cse , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_5_a;
  assign nl_mult_z_mul_cmp_5_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_3_z[51:20]), (mult_t_mul_cmp_12_z[51:20]),
      (mult_t_mul_cmp_13_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_5_b;
  assign nl_mult_z_mul_cmp_5_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_6_a;
  assign nl_mult_z_mul_cmp_6_a = MUX1HOT_v_32_4_2(tmp_91_lpi_3_dfm_mx0, tmp_27_lpi_3_dfm_mx0,
      mult_t_mul_cmp_8_a_mx0w2, tmp_31_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_6_b;
  assign nl_mult_z_mul_cmp_6_b = MUX1HOT_v_32_12_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_1_i_s_din_mxwt, twiddle_rsc_0_2_i_s_din_mxwt, twiddle_rsc_0_3_i_s_din_mxwt,
      twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_5_i_s_din_mxwt, twiddle_rsc_0_6_i_s_din_mxwt,
      twiddle_rsc_0_7_i_s_din_mxwt, twiddle_rsc_0_12_i_s_din_mxwt, twiddle_rsc_0_13_i_s_din_mxwt,
      twiddle_rsc_0_14_i_s_din_mxwt, twiddle_rsc_0_15_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_3_cse
      , INNER_LOOP1_tw_h_and_45_cse , INNER_LOOP1_tw_h_and_46_cse , INNER_LOOP1_tw_h_and_47_cse
      , INNER_LOOP1_tw_h_and_48_cse , INNER_LOOP1_tw_h_and_50_cse , INNER_LOOP1_tw_h_and_52_cse
      , INNER_LOOP1_tw_h_and_54_cse , INNER_LOOP1_tw_h_and_49_cse , INNER_LOOP1_tw_h_and_51_cse
      , INNER_LOOP1_tw_h_and_53_cse , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_z_mul_cmp_7_a;
  assign nl_mult_z_mul_cmp_7_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_4_z[51:20]), (mult_t_mul_cmp_2_z[51:20]),
      (mult_t_mul_cmp_3_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_7_b;
  assign nl_mult_z_mul_cmp_7_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_8_a;
  assign nl_mult_z_mul_cmp_8_a = MUX1HOT_v_32_4_2(tmp_89_lpi_3_dfm_mx0, tmp_25_lpi_3_dfm_mx0,
      mult_t_mul_cmp_14_a_mx0w2, tmp_19_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_8_b;
  assign nl_mult_z_mul_cmp_8_b = MUX1HOT_v_32_4_2(twiddle_rsc_0_0_i_s_din_mxwt, twiddle_rsc_0_1_i_s_din_mxwt,
      twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt, {or_tmp_895 , or_tmp_835
      , or_tmp_806 , and_1929_cse});
  wire [31:0] nl_mult_z_mul_cmp_9_a;
  assign nl_mult_z_mul_cmp_9_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_5_z[51:20]), (mult_t_mul_cmp_10_z[51:20]),
      (mult_t_mul_cmp_11_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_9_b;
  assign nl_mult_z_mul_cmp_9_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_10_a;
  assign nl_mult_z_mul_cmp_10_a = MUX1HOT_v_32_4_2(tmp_87_lpi_3_dfm_mx0, tmp_23_lpi_3_dfm_mx0,
      mult_t_mul_cmp_7_a_mx0w2, mult_t_mul_cmp_9_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_10_b;
  assign nl_mult_z_mul_cmp_10_b = MUX1HOT_v_32_6_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_5_i_s_din_mxwt,
      twiddle_rsc_0_6_i_s_din_mxwt, twiddle_rsc_0_7_i_s_din_mxwt, {or_dcpl_29 , (fsm_output[6])
      , INNER_LOOP1_tw_h_and_49_cse , INNER_LOOP1_tw_h_and_51_cse , INNER_LOOP1_tw_h_and_53_cse
      , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_z_mul_cmp_11_a;
  assign nl_mult_z_mul_cmp_11_a = MUX_v_32_2_2((mult_t_mul_cmp_6_z[51:20]), (mult_t_mul_cmp_7_z[51:20]),
      fsm_output[8]);
  wire [31:0] nl_mult_z_mul_cmp_11_b;
  assign nl_mult_z_mul_cmp_11_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_12_a;
  assign nl_mult_z_mul_cmp_12_a = MUX1HOT_v_32_4_2(tmp_85_lpi_3_dfm_mx0, tmp_21_lpi_3_dfm_mx0,
      mult_t_mul_cmp_13_a_mx0w2, tmp_7_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] INNER_LOOP1_tw_or_4_nl;
  wire[0:0] INNER_LOOP1_tw_or_5_nl;
  wire [31:0] nl_mult_z_mul_cmp_12_b;
  assign INNER_LOOP1_tw_or_4_nl = or_tmp_888 | INNER_LOOP1_tw_h_and_49_cse;
  assign INNER_LOOP1_tw_or_5_nl = or_tmp_827 | INNER_LOOP1_tw_h_and_53_cse;
  assign nl_mult_z_mul_cmp_12_b = MUX1HOT_v_32_4_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_2_i_s_din_mxwt, twiddle_rsc_0_1_i_s_din_mxwt, twiddle_rsc_0_3_i_s_din_mxwt,
      {INNER_LOOP1_tw_or_4_nl , INNER_LOOP1_tw_or_5_nl , INNER_LOOP1_tw_h_and_51_cse
      , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_z_mul_cmp_13_a;
  assign nl_mult_z_mul_cmp_13_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_7_z[51:20]), (mult_t_mul_cmp_1_z[51:20]),
      (mult_t_mul_cmp_2_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_13_b;
  assign nl_mult_z_mul_cmp_13_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_14_a;
  assign nl_mult_z_mul_cmp_14_a = MUX1HOT_v_32_4_2(tmp_83_lpi_3_dfm_mx0, tmp_19_lpi_3_dfm_mx0,
      mult_t_mul_cmp_2_a_mx0w2, tmp_29_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] INNER_LOOP1_tw_or_3_nl;
  wire [31:0] nl_mult_z_mul_cmp_14_b;
  assign INNER_LOOP1_tw_or_3_nl = INNER_LOOP1_tw_h_and_38_cse | and_1944_cse;
  assign nl_mult_z_mul_cmp_14_b = MUX1HOT_v_32_6_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_12_i_s_din_mxwt,
      twiddle_rsc_0_13_i_s_din_mxwt, twiddle_rsc_0_14_i_s_din_mxwt, {or_dcpl_29 ,
      INNER_LOOP1_tw_h_and_36_cse , INNER_LOOP1_tw_h_and_37_cse , INNER_LOOP1_tw_or_3_nl
      , INNER_LOOP1_tw_h_and_39_cse , or_tmp_814});
  wire [31:0] nl_mult_z_mul_cmp_15_a;
  assign nl_mult_z_mul_cmp_15_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_8_z[51:20]), (mult_t_mul_cmp_13_z[51:20]),
      (mult_t_mul_cmp_14_z[51:20]), {or_dcpl_29 , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_15_b;
  assign nl_mult_z_mul_cmp_15_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_16_a;
  assign nl_mult_z_mul_cmp_16_a = MUX1HOT_v_32_4_2(tmp_81_lpi_3_dfm_mx0, tmp_17_lpi_3_dfm_mx0,
      mult_t_mul_cmp_9_a_mx0w2, tmp_3_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] INNER_LOOP1_tw_or_2_nl;
  wire [31:0] nl_mult_z_mul_cmp_16_b;
  assign INNER_LOOP1_tw_or_2_nl = or_tmp_804 | INNER_LOOP1_tw_h_and_40_cse;
  assign nl_mult_z_mul_cmp_16_b = MUX1HOT_v_32_5_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_2_i_s_din_mxwt, twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_6_i_s_din_mxwt,
      twiddle_rsc_0_1_i_s_din_mxwt, {INNER_LOOP1_tw_or_2_nl , INNER_LOOP1_tw_h_and_41_cse
      , INNER_LOOP1_tw_h_and_42_cse , INNER_LOOP1_tw_h_and_43_cse , or_tmp_806});
  wire [31:0] nl_mult_z_mul_cmp_17_a;
  assign nl_mult_z_mul_cmp_17_a = MUX_v_32_2_2((mult_t_mul_cmp_9_z[51:20]), (mult_t_mul_cmp_10_z[51:20]),
      fsm_output[8]);
  wire [31:0] nl_mult_z_mul_cmp_17_b;
  assign nl_mult_z_mul_cmp_17_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_18_a;
  assign nl_mult_z_mul_cmp_18_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_9_a_mx0w0, mult_t_mul_cmp_9_a_mx0w3,
      mult_t_mul_cmp_6_a_mx0w2, tmp_21_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire[0:0] or_1042_nl;
  wire [31:0] nl_mult_z_mul_cmp_18_b;
  assign or_1042_nl = and_1994_cse | and_1944_cse;
  assign nl_mult_z_mul_cmp_18_b = MUX1HOT_v_32_4_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_10_i_s_din_mxwt,
      {or_dcpl_29 , or_tmp_835 , or_1042_nl , or_tmp_814});
  wire [31:0] nl_mult_z_mul_cmp_19_a;
  assign nl_mult_z_mul_cmp_19_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_10_z[51:20]),
      (mult_t_mul_cmp_4_z[51:20]), (mult_t_mul_cmp_5_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_19_b;
  assign nl_mult_z_mul_cmp_19_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_20_a;
  assign nl_mult_z_mul_cmp_20_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_10_a_mx0w0, mult_t_mul_cmp_10_a_mx0w3,
      tmp_121_lpi_3_dfm_mx0, mult_t_mul_cmp_11_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_20_b;
  assign nl_mult_z_mul_cmp_20_b = MUX1HOT_v_32_5_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_12_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_5_i_s_din_mxwt,
      twiddle_rsc_0_4_i_s_din_mxwt, {or_dcpl_29 , or_tmp_812 , and_1948_cse , or_tmp_806
      , and_1929_cse});
  wire [31:0] nl_mult_z_mul_cmp_21_a;
  assign nl_mult_z_mul_cmp_21_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_11_z[51:20]),
      (mult_t_mul_cmp_14_z[51:20]), (mult_t_mul_cmp_15_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_21_b;
  assign nl_mult_z_mul_cmp_21_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_22_a;
  assign nl_mult_z_mul_cmp_22_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_11_a_mx0w0, mult_t_mul_cmp_11_a_mx0w3,
      mult_t_mul_cmp_10_a_mx0w2, tmp_27_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_22_b;
  assign nl_mult_z_mul_cmp_22_b = MUX1HOT_v_32_6_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_1_i_s_din_mxwt, twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_5_i_s_din_mxwt,
      twiddle_rsc_0_13_i_s_din_mxwt, twiddle_rsc_0_12_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_1_cse
      , INNER_LOOP1_tw_h_and_37_cse , INNER_LOOP1_tw_h_and_38_cse , INNER_LOOP1_tw_h_and_39_cse
      , or_tmp_806 , and_1929_cse});
  wire [31:0] nl_mult_z_mul_cmp_23_a;
  assign nl_mult_z_mul_cmp_23_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_12_z[51:20]),
      (mult_t_mul_cmp_3_z[51:20]), (mult_t_mul_cmp_4_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_23_b;
  assign nl_mult_z_mul_cmp_23_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_24_b;
  assign nl_mult_z_mul_cmp_24_b = MUX1HOT_v_32_8_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_1_i_s_din_mxwt, twiddle_rsc_0_2_i_s_din_mxwt, twiddle_rsc_0_3_i_s_din_mxwt,
      twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_10_i_s_din_mxwt,
      twiddle_rsc_0_11_i_s_din_mxwt, {INNER_LOOP1_tw_h_or_cse , INNER_LOOP1_tw_h_and_30_cse
      , INNER_LOOP1_tw_h_and_31_cse , INNER_LOOP1_tw_h_and_32_cse , INNER_LOOP1_tw_h_and_49_cse
      , INNER_LOOP1_tw_h_and_51_cse , INNER_LOOP1_tw_h_and_53_cse , INNER_LOOP1_tw_h_and_55_cse});
  wire [31:0] nl_mult_z_mul_cmp_25_a;
  assign nl_mult_z_mul_cmp_25_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_13_z[51:20]),
      (mult_t_mul_cmp_8_z[51:20]), (mult_t_mul_cmp_9_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_25_b;
  assign nl_mult_z_mul_cmp_25_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_26_a;
  assign nl_mult_z_mul_cmp_26_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_13_a_mx0w0, tmp_7_lpi_3_dfm_mx0,
      mult_t_mul_cmp_5_a_mx0w2, mult_t_mul_cmp_10_a_mx0w3, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_26_b;
  assign nl_mult_z_mul_cmp_26_b = MUX1HOT_v_32_5_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_10_i_s_din_mxwt, twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_6_i_s_din_mxwt,
      twiddle_rsc_0_4_i_s_din_mxwt, {or_dcpl_29 , or_tmp_827 , and_1978_cse , or_tmp_814
      , and_1944_cse});
  wire [31:0] nl_mult_z_mul_cmp_27_a;
  assign nl_mult_z_mul_cmp_27_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_14_z[51:20]),
      (mult_t_mul_cmp_7_z[51:20]), (mult_t_mul_cmp_8_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_27_b;
  assign nl_mult_z_mul_cmp_27_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_28_a;
  assign nl_mult_z_mul_cmp_28_a = MUX1HOT_v_32_3_2(mult_t_mul_cmp_14_a_mx0w0, tmp_5_lpi_3_dfm_mx0,
      mult_t_mul_cmp_11_a_mx0w2, {(fsm_output[2]) , c_or_cse , (fsm_output[6])});
  wire[0:0] or_1091_nl;
  wire [31:0] nl_mult_z_mul_cmp_28_b;
  assign or_1091_nl = and_1948_cse | or_dcpl_29 | and_1944_cse;
  assign nl_mult_z_mul_cmp_28_b = MUX1HOT_v_32_3_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_4_i_s_din_mxwt, twiddle_rsc_0_2_i_s_din_mxwt, {or_1091_nl , or_tmp_812
      , or_tmp_814});
  wire [31:0] nl_mult_z_mul_cmp_29_a;
  assign nl_mult_z_mul_cmp_29_a = MUX1HOT_v_32_3_2((mult_t_mul_cmp_15_z[51:20]),
      (mult_t_mul_cmp_z[51:20]), (mult_t_mul_cmp_1_z[51:20]), {or_dcpl_29 , (fsm_output[6])
      , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_29_b;
  assign nl_mult_z_mul_cmp_29_b = p_sva;
  wire [31:0] nl_mult_z_mul_cmp_30_a;
  assign nl_mult_z_mul_cmp_30_a = MUX1HOT_v_32_4_2(mult_t_mul_cmp_15_a_mx0w0, tmp_3_lpi_3_dfm_mx0,
      mult_t_mul_cmp_4_a_mx0w2, tmp_25_lpi_3_dfm_mx0, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_30_b;
  assign nl_mult_z_mul_cmp_30_b = MUX1HOT_v_32_6_2(twiddle_rsc_0_0_i_s_din_mxwt,
      twiddle_rsc_0_8_i_s_din_mxwt, twiddle_rsc_0_9_i_s_din_mxwt, twiddle_rsc_0_10_i_s_din_mxwt,
      twiddle_rsc_0_11_i_s_din_mxwt, twiddle_rsc_0_12_i_s_din_mxwt, {or_dcpl_29 ,
      INNER_LOOP1_tw_h_and_29_cse , INNER_LOOP1_tw_h_and_30_cse , INNER_LOOP1_tw_h_and_31_cse
      , INNER_LOOP1_tw_h_and_32_cse , (fsm_output[8])});
  wire [31:0] nl_mult_z_mul_cmp_31_a;
  assign nl_mult_z_mul_cmp_31_a = MUX_v_32_2_2((mult_t_mul_cmp_z[51:20]), (mult_t_mul_cmp_15_z[51:20]),
      fsm_output[6]);
  wire [31:0] nl_mult_z_mul_cmp_31_b;
  assign nl_mult_z_mul_cmp_31_b = p_sva;
  wire [2:0] nl_operator_33_true_3_lshift_rg_s;
  assign nl_operator_33_true_3_lshift_rg_s = {1'b0 , (~ c_1_sva_1) , 1'b0};
  wire[2:0] operator_33_true_mux1h_nl;
  wire[0:0] operator_33_true_operator_33_true_or_nl;
  wire [3:0] nl_operator_33_true_1_lshift_rg_s;
  assign operator_33_true_mux1h_nl = MUX1HOT_v_3_3_2(operator_20_false_acc_cse_sva_mx0w0,
      operator_20_false_acc_cse_sva, ({2'b00 , (~ c_1_sva_1)}), {(fsm_output[1])
      , (fsm_output[3]) , (fsm_output[5])});
  assign operator_33_true_operator_33_true_or_nl = (~ (fsm_output[3])) | (fsm_output[1])
      | (fsm_output[5]);
  assign nl_operator_33_true_1_lshift_rg_s = {operator_33_true_mux1h_nl , operator_33_true_operator_33_true_or_nl};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_0_i_inst_twiddle_rsc_0_0_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_0_i_inst_twiddle_rsc_0_0_i_s_raddr_core =
      {1'b0 , twiddle_h_rsc_0_0_i_s_raddr_core_4 , reg_twiddle_rsc_0_0_i_s_raddr_core_3_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_1_i_inst_twiddle_rsc_0_1_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_1_i_inst_twiddle_rsc_0_1_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_2_i_inst_twiddle_rsc_0_2_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_2_i_inst_twiddle_rsc_0_2_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_3_i_inst_twiddle_rsc_0_3_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_3_i_inst_twiddle_rsc_0_3_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_4_i_inst_twiddle_rsc_0_4_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_4_i_inst_twiddle_rsc_0_4_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_5_i_inst_twiddle_rsc_0_5_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_5_i_inst_twiddle_rsc_0_5_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_6_i_inst_twiddle_rsc_0_6_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_6_i_inst_twiddle_rsc_0_6_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_7_i_inst_twiddle_rsc_0_7_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_7_i_inst_twiddle_rsc_0_7_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_8_i_inst_twiddle_rsc_0_8_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_8_i_inst_twiddle_rsc_0_8_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_9_i_inst_twiddle_rsc_0_9_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_9_i_inst_twiddle_rsc_0_9_i_s_raddr_core =
      {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_10_i_inst_twiddle_rsc_0_10_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_10_i_inst_twiddle_rsc_0_10_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_11_i_inst_twiddle_rsc_0_11_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_11_i_inst_twiddle_rsc_0_11_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_12_i_inst_twiddle_rsc_0_12_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_12_i_inst_twiddle_rsc_0_12_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_13_i_inst_twiddle_rsc_0_13_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_13_i_inst_twiddle_rsc_0_13_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_14_i_inst_twiddle_rsc_0_14_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_14_i_inst_twiddle_rsc_0_14_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_rsc_0_15_i_inst_twiddle_rsc_0_15_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_rsc_0_15_i_inst_twiddle_rsc_0_15_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_0_i_inst_twiddle_h_rsc_0_0_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_0_i_inst_twiddle_h_rsc_0_0_i_s_raddr_core
      = {1'b0 , twiddle_h_rsc_0_0_i_s_raddr_core_4 , reg_twiddle_rsc_0_0_i_s_raddr_core_3_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_1_i_inst_twiddle_h_rsc_0_1_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_1_i_inst_twiddle_h_rsc_0_1_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_2_i_inst_twiddle_h_rsc_0_2_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_2_i_inst_twiddle_h_rsc_0_2_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_3_i_inst_twiddle_h_rsc_0_3_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_3_i_inst_twiddle_h_rsc_0_3_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_4_i_inst_twiddle_h_rsc_0_4_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_4_i_inst_twiddle_h_rsc_0_4_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_5_i_inst_twiddle_h_rsc_0_5_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_5_i_inst_twiddle_h_rsc_0_5_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_6_i_inst_twiddle_h_rsc_0_6_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_6_i_inst_twiddle_h_rsc_0_6_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_7_i_inst_twiddle_h_rsc_0_7_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_7_i_inst_twiddle_h_rsc_0_7_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_8_i_inst_twiddle_h_rsc_0_8_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_8_i_inst_twiddle_h_rsc_0_8_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_9_i_inst_twiddle_h_rsc_0_9_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_9_i_inst_twiddle_h_rsc_0_9_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_10_i_inst_twiddle_h_rsc_0_10_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_10_i_inst_twiddle_h_rsc_0_10_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_11_i_inst_twiddle_h_rsc_0_11_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_11_i_inst_twiddle_h_rsc_0_11_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_12_i_inst_twiddle_h_rsc_0_12_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_12_i_inst_twiddle_h_rsc_0_12_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_13_i_inst_twiddle_h_rsc_0_13_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_13_i_inst_twiddle_h_rsc_0_13_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_14_i_inst_twiddle_h_rsc_0_14_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_14_i_inst_twiddle_h_rsc_0_14_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [5:0] nl_peaseNTT_core_twiddle_h_rsc_0_15_i_inst_twiddle_h_rsc_0_15_i_s_raddr_core;
  assign nl_peaseNTT_core_twiddle_h_rsc_0_15_i_inst_twiddle_h_rsc_0_15_i_s_raddr_core
      = {1'b0, reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse};
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr0 = INNER_LOOP2_nor_tmp
      & ((operator_20_false_acc_cse_sva[0]) ^ (operator_20_false_acc_cse_sva[1]));
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr1;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr1 = ~ INNER_LOOP2_nor_tmp;
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_0_tr0;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_0_tr0 = ~(INNER_LOOP3_stage_0
      | INNER_LOOP3_stage_0_2 | INNER_LOOP3_stage_0_3 | INNER_LOOP3_stage_0_4 | INNER_LOOP3_stage_0_5
      | INNER_LOOP3_stage_0_6 | INNER_LOOP3_stage_0_7 | INNER_LOOP3_stage_0_8 | INNER_LOOP3_stage_0_9
      | INNER_LOOP3_stage_0_10 | INNER_LOOP3_stage_0_11 | INNER_LOOP3_stage_0_12);
  wire [0:0] nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_0_tr1;
  assign nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_0_tr1 = ~ INNER_LOOP4_nor_tmp;
  ccs_in_v1 #(.rscid(32'sd2),
  .width(32'sd32)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp (
      .a(nl_mult_t_mul_cmp_a[31:0]),
      .b(nl_mult_t_mul_cmp_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_1 (
      .a(nl_mult_t_mul_cmp_1_a[31:0]),
      .b(nl_mult_t_mul_cmp_1_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_1_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_2 (
      .a(nl_mult_t_mul_cmp_2_a[31:0]),
      .b(nl_mult_t_mul_cmp_2_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_2_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_3 (
      .a(nl_mult_t_mul_cmp_3_a[31:0]),
      .b(nl_mult_t_mul_cmp_3_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_3_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_4 (
      .a(nl_mult_t_mul_cmp_4_a[31:0]),
      .b(nl_mult_t_mul_cmp_4_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_4_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_5 (
      .a(nl_mult_t_mul_cmp_5_a[31:0]),
      .b(nl_mult_t_mul_cmp_5_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_5_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_6 (
      .a(nl_mult_t_mul_cmp_6_a[31:0]),
      .b(nl_mult_t_mul_cmp_6_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_6_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_7 (
      .a(nl_mult_t_mul_cmp_7_a[31:0]),
      .b(nl_mult_t_mul_cmp_7_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_7_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_8 (
      .a(nl_mult_t_mul_cmp_8_a[31:0]),
      .b(nl_mult_t_mul_cmp_8_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_8_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_9 (
      .a(nl_mult_t_mul_cmp_9_a[31:0]),
      .b(nl_mult_t_mul_cmp_9_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_9_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_10 (
      .a(nl_mult_t_mul_cmp_10_a[31:0]),
      .b(nl_mult_t_mul_cmp_10_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_10_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_11 (
      .a(nl_mult_t_mul_cmp_11_a[31:0]),
      .b(nl_mult_t_mul_cmp_11_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_11_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_12 (
      .a(mult_4_t_mux1h_rmff),
      .b(nl_mult_t_mul_cmp_12_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_12_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_13 (
      .a(nl_mult_t_mul_cmp_13_a[31:0]),
      .b(nl_mult_t_mul_cmp_13_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_13_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_14 (
      .a(nl_mult_t_mul_cmp_14_a[31:0]),
      .b(nl_mult_t_mul_cmp_14_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_14_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd52),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_t_mul_cmp_15 (
      .a(nl_mult_t_mul_cmp_15_a[31:0]),
      .b(nl_mult_t_mul_cmp_15_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_t_mul_cmp_15_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp (
      .a(nl_mult_z_mul_cmp_a[31:0]),
      .b(nl_mult_z_mul_cmp_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_1 (
      .a(nl_mult_z_mul_cmp_1_a[31:0]),
      .b(nl_mult_z_mul_cmp_1_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_1_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_2 (
      .a(nl_mult_z_mul_cmp_2_a[31:0]),
      .b(nl_mult_z_mul_cmp_2_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_2_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_3 (
      .a(nl_mult_z_mul_cmp_3_a[31:0]),
      .b(nl_mult_z_mul_cmp_3_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_3_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_4 (
      .a(nl_mult_z_mul_cmp_4_a[31:0]),
      .b(nl_mult_z_mul_cmp_4_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_4_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_5 (
      .a(nl_mult_z_mul_cmp_5_a[31:0]),
      .b(nl_mult_z_mul_cmp_5_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_5_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_6 (
      .a(nl_mult_z_mul_cmp_6_a[31:0]),
      .b(nl_mult_z_mul_cmp_6_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_6_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_7 (
      .a(nl_mult_z_mul_cmp_7_a[31:0]),
      .b(nl_mult_z_mul_cmp_7_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_7_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_8 (
      .a(nl_mult_z_mul_cmp_8_a[31:0]),
      .b(nl_mult_z_mul_cmp_8_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_8_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_9 (
      .a(nl_mult_z_mul_cmp_9_a[31:0]),
      .b(nl_mult_z_mul_cmp_9_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_9_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_10 (
      .a(nl_mult_z_mul_cmp_10_a[31:0]),
      .b(nl_mult_z_mul_cmp_10_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_10_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_11 (
      .a(nl_mult_z_mul_cmp_11_a[31:0]),
      .b(nl_mult_z_mul_cmp_11_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_11_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_12 (
      .a(nl_mult_z_mul_cmp_12_a[31:0]),
      .b(nl_mult_z_mul_cmp_12_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_12_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_13 (
      .a(nl_mult_z_mul_cmp_13_a[31:0]),
      .b(nl_mult_z_mul_cmp_13_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_13_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_14 (
      .a(nl_mult_z_mul_cmp_14_a[31:0]),
      .b(nl_mult_z_mul_cmp_14_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_14_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_15 (
      .a(nl_mult_z_mul_cmp_15_a[31:0]),
      .b(nl_mult_z_mul_cmp_15_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_15_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_16 (
      .a(nl_mult_z_mul_cmp_16_a[31:0]),
      .b(nl_mult_z_mul_cmp_16_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_16_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_17 (
      .a(nl_mult_z_mul_cmp_17_a[31:0]),
      .b(nl_mult_z_mul_cmp_17_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_17_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_18 (
      .a(nl_mult_z_mul_cmp_18_a[31:0]),
      .b(nl_mult_z_mul_cmp_18_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_18_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_19 (
      .a(nl_mult_z_mul_cmp_19_a[31:0]),
      .b(nl_mult_z_mul_cmp_19_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_19_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_20 (
      .a(nl_mult_z_mul_cmp_20_a[31:0]),
      .b(nl_mult_z_mul_cmp_20_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_20_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_21 (
      .a(nl_mult_z_mul_cmp_21_a[31:0]),
      .b(nl_mult_z_mul_cmp_21_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_21_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_22 (
      .a(nl_mult_z_mul_cmp_22_a[31:0]),
      .b(nl_mult_z_mul_cmp_22_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_22_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_23 (
      .a(nl_mult_z_mul_cmp_23_a[31:0]),
      .b(nl_mult_z_mul_cmp_23_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_23_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_24 (
      .a(mult_4_t_mux1h_rmff),
      .b(nl_mult_z_mul_cmp_24_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_24_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_25 (
      .a(nl_mult_z_mul_cmp_25_a[31:0]),
      .b(nl_mult_z_mul_cmp_25_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_25_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_26 (
      .a(nl_mult_z_mul_cmp_26_a[31:0]),
      .b(nl_mult_z_mul_cmp_26_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_26_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_27 (
      .a(nl_mult_z_mul_cmp_27_a[31:0]),
      .b(nl_mult_z_mul_cmp_27_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_27_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_28 (
      .a(nl_mult_z_mul_cmp_28_a[31:0]),
      .b(nl_mult_z_mul_cmp_28_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_28_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_29 (
      .a(nl_mult_z_mul_cmp_29_a[31:0]),
      .b(nl_mult_z_mul_cmp_29_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_29_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_30 (
      .a(nl_mult_z_mul_cmp_30_a[31:0]),
      .b(nl_mult_z_mul_cmp_30_b[31:0]),
      .clk(clk),
      .en(mult_t_mul_cmp_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_30_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd0),
  .width_b(32'sd32),
  .signd_b(32'sd0),
  .width_z(32'sd32),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd1),
  .stages(32'sd2),
  .n_inreg(32'sd2)) mult_z_mul_cmp_31 (
      .a(nl_mult_z_mul_cmp_31_a[31:0]),
      .b(nl_mult_z_mul_cmp_31_b[31:0]),
      .clk(clk),
      .en(mult_z_mul_cmp_1_en),
      .a_rst(1'b1),
      .s_rst(rst),
      .z(mult_z_mul_cmp_31_z)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd1),
  .width_s(32'sd3),
  .width_z(32'sd2)) operator_33_true_3_lshift_rg (
      .a(1'b1),
      .s(nl_operator_33_true_3_lshift_rg_s[2:0]),
      .z(operator_33_true_3_lshift_psp_1_0_sva_mx0w2)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd1),
  .width_s(32'sd4),
  .width_z(32'sd9)) operator_33_true_1_lshift_rg (
      .a(1'b1),
      .s(nl_operator_33_true_1_lshift_rg_s[3:0]),
      .z(z_out_32)
    );
  peaseNTT_core_wait_dp peaseNTT_core_wait_dp_inst (
      .yt_rsc_0_0_cgo_iro(or_67_rmff),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_16_cgo_iro(or_166_rmff),
      .yt_rsc_0_16_i_clken_d(yt_rsc_0_16_i_clken_d),
      .yt_rsc_1_0_cgo_iro(or_248_rmff),
      .yt_rsc_1_0_i_clken_d(yt_rsc_1_0_i_clken_d),
      .yt_rsc_1_16_cgo_iro(or_347_rmff),
      .yt_rsc_1_16_i_clken_d(yt_rsc_1_16_i_clken_d),
      .ensig_cgo_iro(or_833_rmff),
      .ensig_cgo_iro_17(or_956_rmff),
      .core_wen(core_wen),
      .yt_rsc_0_0_cgo(reg_yt_rsc_0_0_cgo_cse),
      .yt_rsc_0_16_cgo(reg_yt_rsc_0_16_cgo_cse),
      .yt_rsc_1_0_cgo(reg_yt_rsc_1_0_cgo_cse),
      .yt_rsc_1_16_cgo(reg_yt_rsc_1_16_cgo_cse),
      .ensig_cgo(reg_ensig_cgo_cse),
      .mult_t_mul_cmp_en(mult_t_mul_cmp_en),
      .ensig_cgo_17(reg_ensig_cgo_17_cse),
      .mult_z_mul_cmp_1_en(mult_z_mul_cmp_1_en)
    );
  peaseNTT_core_xt_rsc_0_0_i_1 peaseNTT_core_xt_rsc_0_0_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_0_i_qa_d(xt_rsc_0_0_i_qa_d),
      .xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .xt_rsc_0_0_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .core_wten(core_wten),
      .xt_rsc_0_0_i_qa_d_mxwt(xt_rsc_0_0_i_qa_d_mxwt),
      .xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_0_i_wea_d_pff(xt_rsc_0_0_i_wea_d_iff),
      .xt_rsc_0_0_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_0_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_1_i_1 peaseNTT_core_xt_rsc_0_1_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_1_i_qa_d(xt_rsc_0_1_i_qa_d),
      .xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_1_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_1_i_qa_d_mxwt(xt_rsc_0_1_i_qa_d_mxwt),
      .xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_1_i_wea_d_pff(xt_rsc_0_1_i_wea_d_iff),
      .xt_rsc_0_1_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_1_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_2_i_1 peaseNTT_core_xt_rsc_0_2_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_2_i_qa_d(xt_rsc_0_2_i_qa_d),
      .xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_2_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_2_i_qa_d_mxwt(xt_rsc_0_2_i_qa_d_mxwt),
      .xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_2_i_wea_d_pff(xt_rsc_0_2_i_wea_d_iff),
      .xt_rsc_0_2_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_2_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_3_i_1 peaseNTT_core_xt_rsc_0_3_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_3_i_qa_d(xt_rsc_0_3_i_qa_d),
      .xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_3_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_3_i_qa_d_mxwt(xt_rsc_0_3_i_qa_d_mxwt),
      .xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_3_i_wea_d_pff(xt_rsc_0_3_i_wea_d_iff),
      .xt_rsc_0_3_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_3_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_4_i_1 peaseNTT_core_xt_rsc_0_4_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_4_i_qa_d(xt_rsc_0_4_i_qa_d),
      .xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_4_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_4_i_qa_d_mxwt(xt_rsc_0_4_i_qa_d_mxwt),
      .xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_4_i_wea_d_pff(xt_rsc_0_4_i_wea_d_iff),
      .xt_rsc_0_4_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_4_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_5_i_1 peaseNTT_core_xt_rsc_0_5_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_5_i_qa_d(xt_rsc_0_5_i_qa_d),
      .xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_5_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_5_i_qa_d_mxwt(xt_rsc_0_5_i_qa_d_mxwt),
      .xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_5_i_wea_d_pff(xt_rsc_0_5_i_wea_d_iff),
      .xt_rsc_0_5_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_5_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_6_i_1 peaseNTT_core_xt_rsc_0_6_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_6_i_qa_d(xt_rsc_0_6_i_qa_d),
      .xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_6_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_6_i_qa_d_mxwt(xt_rsc_0_6_i_qa_d_mxwt),
      .xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_6_i_wea_d_pff(xt_rsc_0_6_i_wea_d_iff),
      .xt_rsc_0_6_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_6_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_7_i_1 peaseNTT_core_xt_rsc_0_7_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_7_i_qa_d(xt_rsc_0_7_i_qa_d),
      .xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_7_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_7_i_qa_d_mxwt(xt_rsc_0_7_i_qa_d_mxwt),
      .xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_7_i_wea_d_pff(xt_rsc_0_7_i_wea_d_iff),
      .xt_rsc_0_7_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_7_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_8_i_1 peaseNTT_core_xt_rsc_0_8_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_8_i_qa_d(xt_rsc_0_8_i_qa_d),
      .xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_8_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_8_i_qa_d_mxwt(xt_rsc_0_8_i_qa_d_mxwt),
      .xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_8_i_wea_d_pff(xt_rsc_0_8_i_wea_d_iff),
      .xt_rsc_0_8_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_8_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_9_i_1 peaseNTT_core_xt_rsc_0_9_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_9_i_qa_d(xt_rsc_0_9_i_qa_d),
      .xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_9_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_9_i_qa_d_mxwt(xt_rsc_0_9_i_qa_d_mxwt),
      .xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_9_i_wea_d_pff(xt_rsc_0_9_i_wea_d_iff),
      .xt_rsc_0_9_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_9_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_10_i_1 peaseNTT_core_xt_rsc_0_10_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_10_i_qa_d(xt_rsc_0_10_i_qa_d),
      .xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_10_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_10_i_qa_d_mxwt(xt_rsc_0_10_i_qa_d_mxwt),
      .xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_10_i_wea_d_pff(xt_rsc_0_10_i_wea_d_iff),
      .xt_rsc_0_10_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_10_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_11_i_1 peaseNTT_core_xt_rsc_0_11_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_11_i_qa_d(xt_rsc_0_11_i_qa_d),
      .xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_11_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_11_i_qa_d_mxwt(xt_rsc_0_11_i_qa_d_mxwt),
      .xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_11_i_wea_d_pff(xt_rsc_0_11_i_wea_d_iff),
      .xt_rsc_0_11_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_11_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_12_i_1 peaseNTT_core_xt_rsc_0_12_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_12_i_qa_d(xt_rsc_0_12_i_qa_d),
      .xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_12_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_12_i_qa_d_mxwt(xt_rsc_0_12_i_qa_d_mxwt),
      .xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_12_i_wea_d_pff(xt_rsc_0_12_i_wea_d_iff),
      .xt_rsc_0_12_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_12_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_13_i_1 peaseNTT_core_xt_rsc_0_13_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_13_i_qa_d(xt_rsc_0_13_i_qa_d),
      .xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_13_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_13_i_qa_d_mxwt(xt_rsc_0_13_i_qa_d_mxwt),
      .xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_13_i_wea_d_pff(xt_rsc_0_13_i_wea_d_iff),
      .xt_rsc_0_13_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_13_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_14_i_1 peaseNTT_core_xt_rsc_0_14_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_14_i_qa_d(xt_rsc_0_14_i_qa_d),
      .xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_14_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_14_i_qa_d_mxwt(xt_rsc_0_14_i_qa_d_mxwt),
      .xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_14_i_wea_d_pff(xt_rsc_0_14_i_wea_d_iff),
      .xt_rsc_0_14_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_14_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_15_i_1 peaseNTT_core_xt_rsc_0_15_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_15_i_qa_d(xt_rsc_0_15_i_qa_d),
      .xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_15_i_oswt(reg_xt_rsc_0_0_i_oswt_cse),
      .xt_rsc_0_15_i_qa_d_mxwt(xt_rsc_0_15_i_qa_d_mxwt),
      .xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_15_i_wea_d_pff(xt_rsc_0_15_i_wea_d_iff),
      .xt_rsc_0_15_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_0_15_i_oswt_pff(or_429_rmff)
    );
  peaseNTT_core_xt_rsc_0_16_i_1 peaseNTT_core_xt_rsc_0_16_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_16_i_qa_d(xt_rsc_0_16_i_qa_d),
      .xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_16_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_16_i_qa_d_mxwt(xt_rsc_0_16_i_qa_d_mxwt),
      .xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_16_i_wea_d_pff(xt_rsc_0_16_i_wea_d_iff),
      .xt_rsc_0_16_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_16_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_17_i_1 peaseNTT_core_xt_rsc_0_17_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_17_i_qa_d(xt_rsc_0_17_i_qa_d),
      .xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_17_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_17_i_qa_d_mxwt(xt_rsc_0_17_i_qa_d_mxwt),
      .xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_17_i_wea_d_pff(xt_rsc_0_17_i_wea_d_iff),
      .xt_rsc_0_17_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_17_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_18_i_1 peaseNTT_core_xt_rsc_0_18_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_18_i_qa_d(xt_rsc_0_18_i_qa_d),
      .xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_18_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_18_i_qa_d_mxwt(xt_rsc_0_18_i_qa_d_mxwt),
      .xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_18_i_wea_d_pff(xt_rsc_0_18_i_wea_d_iff),
      .xt_rsc_0_18_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_18_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_19_i_1 peaseNTT_core_xt_rsc_0_19_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_19_i_qa_d(xt_rsc_0_19_i_qa_d),
      .xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_19_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_19_i_qa_d_mxwt(xt_rsc_0_19_i_qa_d_mxwt),
      .xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_19_i_wea_d_pff(xt_rsc_0_19_i_wea_d_iff),
      .xt_rsc_0_19_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_19_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_20_i_1 peaseNTT_core_xt_rsc_0_20_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_20_i_qa_d(xt_rsc_0_20_i_qa_d),
      .xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_20_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_20_i_qa_d_mxwt(xt_rsc_0_20_i_qa_d_mxwt),
      .xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_20_i_wea_d_pff(xt_rsc_0_20_i_wea_d_iff),
      .xt_rsc_0_20_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_20_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_21_i_1 peaseNTT_core_xt_rsc_0_21_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_21_i_qa_d(xt_rsc_0_21_i_qa_d),
      .xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_21_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_21_i_qa_d_mxwt(xt_rsc_0_21_i_qa_d_mxwt),
      .xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_21_i_wea_d_pff(xt_rsc_0_21_i_wea_d_iff),
      .xt_rsc_0_21_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_21_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_22_i_1 peaseNTT_core_xt_rsc_0_22_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_22_i_qa_d(xt_rsc_0_22_i_qa_d),
      .xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_22_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_22_i_qa_d_mxwt(xt_rsc_0_22_i_qa_d_mxwt),
      .xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_22_i_wea_d_pff(xt_rsc_0_22_i_wea_d_iff),
      .xt_rsc_0_22_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_22_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_23_i_1 peaseNTT_core_xt_rsc_0_23_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_23_i_qa_d(xt_rsc_0_23_i_qa_d),
      .xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_23_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_23_i_qa_d_mxwt(xt_rsc_0_23_i_qa_d_mxwt),
      .xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_23_i_wea_d_pff(xt_rsc_0_23_i_wea_d_iff),
      .xt_rsc_0_23_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_23_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_24_i_1 peaseNTT_core_xt_rsc_0_24_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_24_i_qa_d(xt_rsc_0_24_i_qa_d),
      .xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_24_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_24_i_qa_d_mxwt(xt_rsc_0_24_i_qa_d_mxwt),
      .xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_24_i_wea_d_pff(xt_rsc_0_24_i_wea_d_iff),
      .xt_rsc_0_24_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_24_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_25_i_1 peaseNTT_core_xt_rsc_0_25_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_25_i_qa_d(xt_rsc_0_25_i_qa_d),
      .xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_25_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_25_i_qa_d_mxwt(xt_rsc_0_25_i_qa_d_mxwt),
      .xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_25_i_wea_d_pff(xt_rsc_0_25_i_wea_d_iff),
      .xt_rsc_0_25_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_25_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_26_i_1 peaseNTT_core_xt_rsc_0_26_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_26_i_qa_d(xt_rsc_0_26_i_qa_d),
      .xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_26_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_26_i_qa_d_mxwt(xt_rsc_0_26_i_qa_d_mxwt),
      .xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_26_i_wea_d_pff(xt_rsc_0_26_i_wea_d_iff),
      .xt_rsc_0_26_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_26_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_27_i_1 peaseNTT_core_xt_rsc_0_27_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_27_i_qa_d(xt_rsc_0_27_i_qa_d),
      .xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_27_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_27_i_qa_d_mxwt(xt_rsc_0_27_i_qa_d_mxwt),
      .xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_27_i_wea_d_pff(xt_rsc_0_27_i_wea_d_iff),
      .xt_rsc_0_27_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_27_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_28_i_1 peaseNTT_core_xt_rsc_0_28_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_28_i_qa_d(xt_rsc_0_28_i_qa_d),
      .xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_28_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_28_i_qa_d_mxwt(xt_rsc_0_28_i_qa_d_mxwt),
      .xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_28_i_wea_d_pff(xt_rsc_0_28_i_wea_d_iff),
      .xt_rsc_0_28_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_28_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_29_i_1 peaseNTT_core_xt_rsc_0_29_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_29_i_qa_d(xt_rsc_0_29_i_qa_d),
      .xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_29_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_29_i_qa_d_mxwt(xt_rsc_0_29_i_qa_d_mxwt),
      .xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_29_i_wea_d_pff(xt_rsc_0_29_i_wea_d_iff),
      .xt_rsc_0_29_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_29_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_30_i_1 peaseNTT_core_xt_rsc_0_30_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_30_i_qa_d(xt_rsc_0_30_i_qa_d),
      .xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_30_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_30_i_qa_d_mxwt(xt_rsc_0_30_i_qa_d_mxwt),
      .xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_30_i_wea_d_pff(xt_rsc_0_30_i_wea_d_iff),
      .xt_rsc_0_30_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_30_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_0_31_i_1 peaseNTT_core_xt_rsc_0_31_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_0_31_i_qa_d(xt_rsc_0_31_i_qa_d),
      .xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_0_31_i_oswt(reg_xt_rsc_0_16_i_oswt_cse),
      .xt_rsc_0_31_i_qa_d_mxwt(xt_rsc_0_31_i_qa_d_mxwt),
      .xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_436_rmff),
      .xt_rsc_0_31_i_wea_d_pff(xt_rsc_0_31_i_wea_d_iff),
      .xt_rsc_0_31_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_0_31_i_oswt_pff(or_512_rmff)
    );
  peaseNTT_core_xt_rsc_1_0_i_1 peaseNTT_core_xt_rsc_1_0_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_0_i_qa_d(xt_rsc_1_0_i_qa_d),
      .xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_0_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_0_i_qa_d_mxwt(xt_rsc_1_0_i_qa_d_mxwt),
      .xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_0_i_wea_d_pff(xt_rsc_1_0_i_wea_d_iff),
      .xt_rsc_1_0_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_0_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_1_i_1 peaseNTT_core_xt_rsc_1_1_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_1_i_qa_d(xt_rsc_1_1_i_qa_d),
      .xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_1_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_1_i_qa_d_mxwt(xt_rsc_1_1_i_qa_d_mxwt),
      .xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_1_i_wea_d_pff(xt_rsc_1_1_i_wea_d_iff),
      .xt_rsc_1_1_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_1_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_2_i_1 peaseNTT_core_xt_rsc_1_2_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_2_i_qa_d(xt_rsc_1_2_i_qa_d),
      .xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_2_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_2_i_qa_d_mxwt(xt_rsc_1_2_i_qa_d_mxwt),
      .xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_2_i_wea_d_pff(xt_rsc_1_2_i_wea_d_iff),
      .xt_rsc_1_2_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_2_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_3_i_1 peaseNTT_core_xt_rsc_1_3_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_3_i_qa_d(xt_rsc_1_3_i_qa_d),
      .xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_3_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_3_i_qa_d_mxwt(xt_rsc_1_3_i_qa_d_mxwt),
      .xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_3_i_wea_d_pff(xt_rsc_1_3_i_wea_d_iff),
      .xt_rsc_1_3_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_3_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_4_i_1 peaseNTT_core_xt_rsc_1_4_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_4_i_qa_d(xt_rsc_1_4_i_qa_d),
      .xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_4_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_4_i_qa_d_mxwt(xt_rsc_1_4_i_qa_d_mxwt),
      .xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_4_i_wea_d_pff(xt_rsc_1_4_i_wea_d_iff),
      .xt_rsc_1_4_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_4_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_5_i_1 peaseNTT_core_xt_rsc_1_5_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_5_i_qa_d(xt_rsc_1_5_i_qa_d),
      .xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_5_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_5_i_qa_d_mxwt(xt_rsc_1_5_i_qa_d_mxwt),
      .xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_5_i_wea_d_pff(xt_rsc_1_5_i_wea_d_iff),
      .xt_rsc_1_5_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_5_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_6_i_1 peaseNTT_core_xt_rsc_1_6_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_6_i_qa_d(xt_rsc_1_6_i_qa_d),
      .xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_6_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_6_i_qa_d_mxwt(xt_rsc_1_6_i_qa_d_mxwt),
      .xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_6_i_wea_d_pff(xt_rsc_1_6_i_wea_d_iff),
      .xt_rsc_1_6_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_6_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_7_i_1 peaseNTT_core_xt_rsc_1_7_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_7_i_qa_d(xt_rsc_1_7_i_qa_d),
      .xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_7_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_7_i_qa_d_mxwt(xt_rsc_1_7_i_qa_d_mxwt),
      .xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_7_i_wea_d_pff(xt_rsc_1_7_i_wea_d_iff),
      .xt_rsc_1_7_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_7_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_8_i_1 peaseNTT_core_xt_rsc_1_8_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_8_i_qa_d(xt_rsc_1_8_i_qa_d),
      .xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_8_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_8_i_qa_d_mxwt(xt_rsc_1_8_i_qa_d_mxwt),
      .xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_8_i_wea_d_pff(xt_rsc_1_8_i_wea_d_iff),
      .xt_rsc_1_8_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_8_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_9_i_1 peaseNTT_core_xt_rsc_1_9_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_9_i_qa_d(xt_rsc_1_9_i_qa_d),
      .xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_9_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_9_i_qa_d_mxwt(xt_rsc_1_9_i_qa_d_mxwt),
      .xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_9_i_wea_d_pff(xt_rsc_1_9_i_wea_d_iff),
      .xt_rsc_1_9_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_9_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_10_i_1 peaseNTT_core_xt_rsc_1_10_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_10_i_qa_d(xt_rsc_1_10_i_qa_d),
      .xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_10_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_10_i_qa_d_mxwt(xt_rsc_1_10_i_qa_d_mxwt),
      .xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_10_i_wea_d_pff(xt_rsc_1_10_i_wea_d_iff),
      .xt_rsc_1_10_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_10_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_11_i_1 peaseNTT_core_xt_rsc_1_11_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_11_i_qa_d(xt_rsc_1_11_i_qa_d),
      .xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_11_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_11_i_qa_d_mxwt(xt_rsc_1_11_i_qa_d_mxwt),
      .xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_11_i_wea_d_pff(xt_rsc_1_11_i_wea_d_iff),
      .xt_rsc_1_11_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_11_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_12_i_1 peaseNTT_core_xt_rsc_1_12_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_12_i_qa_d(xt_rsc_1_12_i_qa_d),
      .xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_12_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_12_i_qa_d_mxwt(xt_rsc_1_12_i_qa_d_mxwt),
      .xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_12_i_wea_d_pff(xt_rsc_1_12_i_wea_d_iff),
      .xt_rsc_1_12_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_12_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_13_i_1 peaseNTT_core_xt_rsc_1_13_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_13_i_qa_d(xt_rsc_1_13_i_qa_d),
      .xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_13_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_13_i_qa_d_mxwt(xt_rsc_1_13_i_qa_d_mxwt),
      .xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_13_i_wea_d_pff(xt_rsc_1_13_i_wea_d_iff),
      .xt_rsc_1_13_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_13_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_14_i_1 peaseNTT_core_xt_rsc_1_14_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_14_i_qa_d(xt_rsc_1_14_i_qa_d),
      .xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_14_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_14_i_qa_d_mxwt(xt_rsc_1_14_i_qa_d_mxwt),
      .xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_14_i_wea_d_pff(xt_rsc_1_14_i_wea_d_iff),
      .xt_rsc_1_14_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_14_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_15_i_1 peaseNTT_core_xt_rsc_1_15_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_15_i_qa_d(xt_rsc_1_15_i_qa_d),
      .xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_15_i_oswt(reg_xt_rsc_1_0_i_oswt_cse),
      .xt_rsc_1_15_i_qa_d_mxwt(xt_rsc_1_15_i_qa_d_mxwt),
      .xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_15_i_wea_d_pff(xt_rsc_1_15_i_wea_d_iff),
      .xt_rsc_1_15_i_wea_d_core_psct_pff(or_435_rmff),
      .xt_rsc_1_15_i_oswt_pff(or_578_rmff)
    );
  peaseNTT_core_xt_rsc_1_16_i_1 peaseNTT_core_xt_rsc_1_16_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_16_i_qa_d(xt_rsc_1_16_i_qa_d),
      .xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_16_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_16_i_qa_d_mxwt(xt_rsc_1_16_i_qa_d_mxwt),
      .xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_16_i_wea_d_pff(xt_rsc_1_16_i_wea_d_iff),
      .xt_rsc_1_16_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_16_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_17_i_1 peaseNTT_core_xt_rsc_1_17_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_17_i_qa_d(xt_rsc_1_17_i_qa_d),
      .xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_17_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_17_i_qa_d_mxwt(xt_rsc_1_17_i_qa_d_mxwt),
      .xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_17_i_wea_d_pff(xt_rsc_1_17_i_wea_d_iff),
      .xt_rsc_1_17_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_17_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_18_i_1 peaseNTT_core_xt_rsc_1_18_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_18_i_qa_d(xt_rsc_1_18_i_qa_d),
      .xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_18_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_18_i_qa_d_mxwt(xt_rsc_1_18_i_qa_d_mxwt),
      .xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_18_i_wea_d_pff(xt_rsc_1_18_i_wea_d_iff),
      .xt_rsc_1_18_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_18_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_19_i_1 peaseNTT_core_xt_rsc_1_19_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_19_i_qa_d(xt_rsc_1_19_i_qa_d),
      .xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_19_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_19_i_qa_d_mxwt(xt_rsc_1_19_i_qa_d_mxwt),
      .xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_19_i_wea_d_pff(xt_rsc_1_19_i_wea_d_iff),
      .xt_rsc_1_19_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_19_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_20_i_1 peaseNTT_core_xt_rsc_1_20_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_20_i_qa_d(xt_rsc_1_20_i_qa_d),
      .xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_20_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_20_i_qa_d_mxwt(xt_rsc_1_20_i_qa_d_mxwt),
      .xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_20_i_wea_d_pff(xt_rsc_1_20_i_wea_d_iff),
      .xt_rsc_1_20_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_20_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_21_i_1 peaseNTT_core_xt_rsc_1_21_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_21_i_qa_d(xt_rsc_1_21_i_qa_d),
      .xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_21_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_21_i_qa_d_mxwt(xt_rsc_1_21_i_qa_d_mxwt),
      .xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_21_i_wea_d_pff(xt_rsc_1_21_i_wea_d_iff),
      .xt_rsc_1_21_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_21_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_22_i_1 peaseNTT_core_xt_rsc_1_22_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_22_i_qa_d(xt_rsc_1_22_i_qa_d),
      .xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_22_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_22_i_qa_d_mxwt(xt_rsc_1_22_i_qa_d_mxwt),
      .xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_22_i_wea_d_pff(xt_rsc_1_22_i_wea_d_iff),
      .xt_rsc_1_22_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_22_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_23_i_1 peaseNTT_core_xt_rsc_1_23_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_23_i_qa_d(xt_rsc_1_23_i_qa_d),
      .xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_23_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_23_i_qa_d_mxwt(xt_rsc_1_23_i_qa_d_mxwt),
      .xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_23_i_wea_d_pff(xt_rsc_1_23_i_wea_d_iff),
      .xt_rsc_1_23_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_23_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_24_i_1 peaseNTT_core_xt_rsc_1_24_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_24_i_qa_d(xt_rsc_1_24_i_qa_d),
      .xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_24_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_24_i_qa_d_mxwt(xt_rsc_1_24_i_qa_d_mxwt),
      .xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_24_i_wea_d_pff(xt_rsc_1_24_i_wea_d_iff),
      .xt_rsc_1_24_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_24_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_25_i_1 peaseNTT_core_xt_rsc_1_25_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_25_i_qa_d(xt_rsc_1_25_i_qa_d),
      .xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_25_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_25_i_qa_d_mxwt(xt_rsc_1_25_i_qa_d_mxwt),
      .xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_25_i_wea_d_pff(xt_rsc_1_25_i_wea_d_iff),
      .xt_rsc_1_25_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_25_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_26_i_1 peaseNTT_core_xt_rsc_1_26_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_26_i_qa_d(xt_rsc_1_26_i_qa_d),
      .xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_26_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_26_i_qa_d_mxwt(xt_rsc_1_26_i_qa_d_mxwt),
      .xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_26_i_wea_d_pff(xt_rsc_1_26_i_wea_d_iff),
      .xt_rsc_1_26_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_26_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_27_i_1 peaseNTT_core_xt_rsc_1_27_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_27_i_qa_d(xt_rsc_1_27_i_qa_d),
      .xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_27_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_27_i_qa_d_mxwt(xt_rsc_1_27_i_qa_d_mxwt),
      .xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_27_i_wea_d_pff(xt_rsc_1_27_i_wea_d_iff),
      .xt_rsc_1_27_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_27_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_28_i_1 peaseNTT_core_xt_rsc_1_28_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_28_i_qa_d(xt_rsc_1_28_i_qa_d),
      .xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_28_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_28_i_qa_d_mxwt(xt_rsc_1_28_i_qa_d_mxwt),
      .xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_28_i_wea_d_pff(xt_rsc_1_28_i_wea_d_iff),
      .xt_rsc_1_28_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_28_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_29_i_1 peaseNTT_core_xt_rsc_1_29_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_29_i_qa_d(xt_rsc_1_29_i_qa_d),
      .xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_29_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_29_i_qa_d_mxwt(xt_rsc_1_29_i_qa_d_mxwt),
      .xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_29_i_wea_d_pff(xt_rsc_1_29_i_wea_d_iff),
      .xt_rsc_1_29_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_29_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_30_i_1 peaseNTT_core_xt_rsc_1_30_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_30_i_qa_d(xt_rsc_1_30_i_qa_d),
      .xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_30_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_30_i_qa_d_mxwt(xt_rsc_1_30_i_qa_d_mxwt),
      .xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_30_i_wea_d_pff(xt_rsc_1_30_i_wea_d_iff),
      .xt_rsc_1_30_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_30_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_xt_rsc_1_31_i_1 peaseNTT_core_xt_rsc_1_31_i_1_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_1_31_i_qa_d(xt_rsc_1_31_i_qa_d),
      .xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .xt_rsc_1_31_i_oswt(reg_xt_rsc_1_16_i_oswt_cse),
      .xt_rsc_1_31_i_qa_d_mxwt(xt_rsc_1_31_i_qa_d_mxwt),
      .xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_core_psct(or_584_rmff),
      .xt_rsc_1_31_i_wea_d_pff(xt_rsc_1_31_i_wea_d_iff),
      .xt_rsc_1_31_i_wea_d_core_psct_pff(or_517_rmff),
      .xt_rsc_1_31_i_oswt_pff(or_660_rmff)
    );
  peaseNTT_core_twiddle_rsc_0_0_i peaseNTT_core_twiddle_rsc_0_0_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_0_s_tdone(twiddle_rsc_0_0_s_tdone),
      .twiddle_rsc_0_0_tr_write_done(twiddle_rsc_0_0_tr_write_done),
      .twiddle_rsc_0_0_RREADY(twiddle_rsc_0_0_RREADY),
      .twiddle_rsc_0_0_RVALID(twiddle_rsc_0_0_RVALID),
      .twiddle_rsc_0_0_RUSER(twiddle_rsc_0_0_RUSER),
      .twiddle_rsc_0_0_RLAST(twiddle_rsc_0_0_RLAST),
      .twiddle_rsc_0_0_RRESP(twiddle_rsc_0_0_RRESP),
      .twiddle_rsc_0_0_RDATA(twiddle_rsc_0_0_RDATA),
      .twiddle_rsc_0_0_RID(twiddle_rsc_0_0_RID),
      .twiddle_rsc_0_0_ARREADY(twiddle_rsc_0_0_ARREADY),
      .twiddle_rsc_0_0_ARVALID(twiddle_rsc_0_0_ARVALID),
      .twiddle_rsc_0_0_ARUSER(twiddle_rsc_0_0_ARUSER),
      .twiddle_rsc_0_0_ARREGION(twiddle_rsc_0_0_ARREGION),
      .twiddle_rsc_0_0_ARQOS(twiddle_rsc_0_0_ARQOS),
      .twiddle_rsc_0_0_ARPROT(twiddle_rsc_0_0_ARPROT),
      .twiddle_rsc_0_0_ARCACHE(twiddle_rsc_0_0_ARCACHE),
      .twiddle_rsc_0_0_ARLOCK(twiddle_rsc_0_0_ARLOCK),
      .twiddle_rsc_0_0_ARBURST(twiddle_rsc_0_0_ARBURST),
      .twiddle_rsc_0_0_ARSIZE(twiddle_rsc_0_0_ARSIZE),
      .twiddle_rsc_0_0_ARLEN(twiddle_rsc_0_0_ARLEN),
      .twiddle_rsc_0_0_ARADDR(twiddle_rsc_0_0_ARADDR),
      .twiddle_rsc_0_0_ARID(twiddle_rsc_0_0_ARID),
      .twiddle_rsc_0_0_BREADY(twiddle_rsc_0_0_BREADY),
      .twiddle_rsc_0_0_BVALID(twiddle_rsc_0_0_BVALID),
      .twiddle_rsc_0_0_BUSER(twiddle_rsc_0_0_BUSER),
      .twiddle_rsc_0_0_BRESP(twiddle_rsc_0_0_BRESP),
      .twiddle_rsc_0_0_BID(twiddle_rsc_0_0_BID),
      .twiddle_rsc_0_0_WREADY(twiddle_rsc_0_0_WREADY),
      .twiddle_rsc_0_0_WVALID(twiddle_rsc_0_0_WVALID),
      .twiddle_rsc_0_0_WUSER(twiddle_rsc_0_0_WUSER),
      .twiddle_rsc_0_0_WLAST(twiddle_rsc_0_0_WLAST),
      .twiddle_rsc_0_0_WSTRB(twiddle_rsc_0_0_WSTRB),
      .twiddle_rsc_0_0_WDATA(twiddle_rsc_0_0_WDATA),
      .twiddle_rsc_0_0_AWREADY(twiddle_rsc_0_0_AWREADY),
      .twiddle_rsc_0_0_AWVALID(twiddle_rsc_0_0_AWVALID),
      .twiddle_rsc_0_0_AWUSER(twiddle_rsc_0_0_AWUSER),
      .twiddle_rsc_0_0_AWREGION(twiddle_rsc_0_0_AWREGION),
      .twiddle_rsc_0_0_AWQOS(twiddle_rsc_0_0_AWQOS),
      .twiddle_rsc_0_0_AWPROT(twiddle_rsc_0_0_AWPROT),
      .twiddle_rsc_0_0_AWCACHE(twiddle_rsc_0_0_AWCACHE),
      .twiddle_rsc_0_0_AWLOCK(twiddle_rsc_0_0_AWLOCK),
      .twiddle_rsc_0_0_AWBURST(twiddle_rsc_0_0_AWBURST),
      .twiddle_rsc_0_0_AWSIZE(twiddle_rsc_0_0_AWSIZE),
      .twiddle_rsc_0_0_AWLEN(twiddle_rsc_0_0_AWLEN),
      .twiddle_rsc_0_0_AWADDR(twiddle_rsc_0_0_AWADDR),
      .twiddle_rsc_0_0_AWID(twiddle_rsc_0_0_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_0_i_oswt(reg_twiddle_rsc_0_0_i_oswt_cse),
      .twiddle_rsc_0_0_i_wen_comp(twiddle_rsc_0_0_i_wen_comp),
      .twiddle_rsc_0_0_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_0_i_inst_twiddle_rsc_0_0_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_0_i_s_din_mxwt(twiddle_rsc_0_0_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_1_i peaseNTT_core_twiddle_rsc_0_1_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_1_s_tdone(twiddle_rsc_0_1_s_tdone),
      .twiddle_rsc_0_1_tr_write_done(twiddle_rsc_0_1_tr_write_done),
      .twiddle_rsc_0_1_RREADY(twiddle_rsc_0_1_RREADY),
      .twiddle_rsc_0_1_RVALID(twiddle_rsc_0_1_RVALID),
      .twiddle_rsc_0_1_RUSER(twiddle_rsc_0_1_RUSER),
      .twiddle_rsc_0_1_RLAST(twiddle_rsc_0_1_RLAST),
      .twiddle_rsc_0_1_RRESP(twiddle_rsc_0_1_RRESP),
      .twiddle_rsc_0_1_RDATA(twiddle_rsc_0_1_RDATA),
      .twiddle_rsc_0_1_RID(twiddle_rsc_0_1_RID),
      .twiddle_rsc_0_1_ARREADY(twiddle_rsc_0_1_ARREADY),
      .twiddle_rsc_0_1_ARVALID(twiddle_rsc_0_1_ARVALID),
      .twiddle_rsc_0_1_ARUSER(twiddle_rsc_0_1_ARUSER),
      .twiddle_rsc_0_1_ARREGION(twiddle_rsc_0_1_ARREGION),
      .twiddle_rsc_0_1_ARQOS(twiddle_rsc_0_1_ARQOS),
      .twiddle_rsc_0_1_ARPROT(twiddle_rsc_0_1_ARPROT),
      .twiddle_rsc_0_1_ARCACHE(twiddle_rsc_0_1_ARCACHE),
      .twiddle_rsc_0_1_ARLOCK(twiddle_rsc_0_1_ARLOCK),
      .twiddle_rsc_0_1_ARBURST(twiddle_rsc_0_1_ARBURST),
      .twiddle_rsc_0_1_ARSIZE(twiddle_rsc_0_1_ARSIZE),
      .twiddle_rsc_0_1_ARLEN(twiddle_rsc_0_1_ARLEN),
      .twiddle_rsc_0_1_ARADDR(twiddle_rsc_0_1_ARADDR),
      .twiddle_rsc_0_1_ARID(twiddle_rsc_0_1_ARID),
      .twiddle_rsc_0_1_BREADY(twiddle_rsc_0_1_BREADY),
      .twiddle_rsc_0_1_BVALID(twiddle_rsc_0_1_BVALID),
      .twiddle_rsc_0_1_BUSER(twiddle_rsc_0_1_BUSER),
      .twiddle_rsc_0_1_BRESP(twiddle_rsc_0_1_BRESP),
      .twiddle_rsc_0_1_BID(twiddle_rsc_0_1_BID),
      .twiddle_rsc_0_1_WREADY(twiddle_rsc_0_1_WREADY),
      .twiddle_rsc_0_1_WVALID(twiddle_rsc_0_1_WVALID),
      .twiddle_rsc_0_1_WUSER(twiddle_rsc_0_1_WUSER),
      .twiddle_rsc_0_1_WLAST(twiddle_rsc_0_1_WLAST),
      .twiddle_rsc_0_1_WSTRB(twiddle_rsc_0_1_WSTRB),
      .twiddle_rsc_0_1_WDATA(twiddle_rsc_0_1_WDATA),
      .twiddle_rsc_0_1_AWREADY(twiddle_rsc_0_1_AWREADY),
      .twiddle_rsc_0_1_AWVALID(twiddle_rsc_0_1_AWVALID),
      .twiddle_rsc_0_1_AWUSER(twiddle_rsc_0_1_AWUSER),
      .twiddle_rsc_0_1_AWREGION(twiddle_rsc_0_1_AWREGION),
      .twiddle_rsc_0_1_AWQOS(twiddle_rsc_0_1_AWQOS),
      .twiddle_rsc_0_1_AWPROT(twiddle_rsc_0_1_AWPROT),
      .twiddle_rsc_0_1_AWCACHE(twiddle_rsc_0_1_AWCACHE),
      .twiddle_rsc_0_1_AWLOCK(twiddle_rsc_0_1_AWLOCK),
      .twiddle_rsc_0_1_AWBURST(twiddle_rsc_0_1_AWBURST),
      .twiddle_rsc_0_1_AWSIZE(twiddle_rsc_0_1_AWSIZE),
      .twiddle_rsc_0_1_AWLEN(twiddle_rsc_0_1_AWLEN),
      .twiddle_rsc_0_1_AWADDR(twiddle_rsc_0_1_AWADDR),
      .twiddle_rsc_0_1_AWID(twiddle_rsc_0_1_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_1_i_oswt(reg_twiddle_rsc_0_1_i_oswt_cse),
      .twiddle_rsc_0_1_i_wen_comp(twiddle_rsc_0_1_i_wen_comp),
      .twiddle_rsc_0_1_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_1_i_inst_twiddle_rsc_0_1_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_1_i_s_din_mxwt(twiddle_rsc_0_1_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_2_i peaseNTT_core_twiddle_rsc_0_2_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_2_s_tdone(twiddle_rsc_0_2_s_tdone),
      .twiddle_rsc_0_2_tr_write_done(twiddle_rsc_0_2_tr_write_done),
      .twiddle_rsc_0_2_RREADY(twiddle_rsc_0_2_RREADY),
      .twiddle_rsc_0_2_RVALID(twiddle_rsc_0_2_RVALID),
      .twiddle_rsc_0_2_RUSER(twiddle_rsc_0_2_RUSER),
      .twiddle_rsc_0_2_RLAST(twiddle_rsc_0_2_RLAST),
      .twiddle_rsc_0_2_RRESP(twiddle_rsc_0_2_RRESP),
      .twiddle_rsc_0_2_RDATA(twiddle_rsc_0_2_RDATA),
      .twiddle_rsc_0_2_RID(twiddle_rsc_0_2_RID),
      .twiddle_rsc_0_2_ARREADY(twiddle_rsc_0_2_ARREADY),
      .twiddle_rsc_0_2_ARVALID(twiddle_rsc_0_2_ARVALID),
      .twiddle_rsc_0_2_ARUSER(twiddle_rsc_0_2_ARUSER),
      .twiddle_rsc_0_2_ARREGION(twiddle_rsc_0_2_ARREGION),
      .twiddle_rsc_0_2_ARQOS(twiddle_rsc_0_2_ARQOS),
      .twiddle_rsc_0_2_ARPROT(twiddle_rsc_0_2_ARPROT),
      .twiddle_rsc_0_2_ARCACHE(twiddle_rsc_0_2_ARCACHE),
      .twiddle_rsc_0_2_ARLOCK(twiddle_rsc_0_2_ARLOCK),
      .twiddle_rsc_0_2_ARBURST(twiddle_rsc_0_2_ARBURST),
      .twiddle_rsc_0_2_ARSIZE(twiddle_rsc_0_2_ARSIZE),
      .twiddle_rsc_0_2_ARLEN(twiddle_rsc_0_2_ARLEN),
      .twiddle_rsc_0_2_ARADDR(twiddle_rsc_0_2_ARADDR),
      .twiddle_rsc_0_2_ARID(twiddle_rsc_0_2_ARID),
      .twiddle_rsc_0_2_BREADY(twiddle_rsc_0_2_BREADY),
      .twiddle_rsc_0_2_BVALID(twiddle_rsc_0_2_BVALID),
      .twiddle_rsc_0_2_BUSER(twiddle_rsc_0_2_BUSER),
      .twiddle_rsc_0_2_BRESP(twiddle_rsc_0_2_BRESP),
      .twiddle_rsc_0_2_BID(twiddle_rsc_0_2_BID),
      .twiddle_rsc_0_2_WREADY(twiddle_rsc_0_2_WREADY),
      .twiddle_rsc_0_2_WVALID(twiddle_rsc_0_2_WVALID),
      .twiddle_rsc_0_2_WUSER(twiddle_rsc_0_2_WUSER),
      .twiddle_rsc_0_2_WLAST(twiddle_rsc_0_2_WLAST),
      .twiddle_rsc_0_2_WSTRB(twiddle_rsc_0_2_WSTRB),
      .twiddle_rsc_0_2_WDATA(twiddle_rsc_0_2_WDATA),
      .twiddle_rsc_0_2_AWREADY(twiddle_rsc_0_2_AWREADY),
      .twiddle_rsc_0_2_AWVALID(twiddle_rsc_0_2_AWVALID),
      .twiddle_rsc_0_2_AWUSER(twiddle_rsc_0_2_AWUSER),
      .twiddle_rsc_0_2_AWREGION(twiddle_rsc_0_2_AWREGION),
      .twiddle_rsc_0_2_AWQOS(twiddle_rsc_0_2_AWQOS),
      .twiddle_rsc_0_2_AWPROT(twiddle_rsc_0_2_AWPROT),
      .twiddle_rsc_0_2_AWCACHE(twiddle_rsc_0_2_AWCACHE),
      .twiddle_rsc_0_2_AWLOCK(twiddle_rsc_0_2_AWLOCK),
      .twiddle_rsc_0_2_AWBURST(twiddle_rsc_0_2_AWBURST),
      .twiddle_rsc_0_2_AWSIZE(twiddle_rsc_0_2_AWSIZE),
      .twiddle_rsc_0_2_AWLEN(twiddle_rsc_0_2_AWLEN),
      .twiddle_rsc_0_2_AWADDR(twiddle_rsc_0_2_AWADDR),
      .twiddle_rsc_0_2_AWID(twiddle_rsc_0_2_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_2_i_oswt(reg_twiddle_rsc_0_2_i_oswt_cse),
      .twiddle_rsc_0_2_i_wen_comp(twiddle_rsc_0_2_i_wen_comp),
      .twiddle_rsc_0_2_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_2_i_inst_twiddle_rsc_0_2_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_2_i_s_din_mxwt(twiddle_rsc_0_2_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_3_i peaseNTT_core_twiddle_rsc_0_3_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_3_s_tdone(twiddle_rsc_0_3_s_tdone),
      .twiddle_rsc_0_3_tr_write_done(twiddle_rsc_0_3_tr_write_done),
      .twiddle_rsc_0_3_RREADY(twiddle_rsc_0_3_RREADY),
      .twiddle_rsc_0_3_RVALID(twiddle_rsc_0_3_RVALID),
      .twiddle_rsc_0_3_RUSER(twiddle_rsc_0_3_RUSER),
      .twiddle_rsc_0_3_RLAST(twiddle_rsc_0_3_RLAST),
      .twiddle_rsc_0_3_RRESP(twiddle_rsc_0_3_RRESP),
      .twiddle_rsc_0_3_RDATA(twiddle_rsc_0_3_RDATA),
      .twiddle_rsc_0_3_RID(twiddle_rsc_0_3_RID),
      .twiddle_rsc_0_3_ARREADY(twiddle_rsc_0_3_ARREADY),
      .twiddle_rsc_0_3_ARVALID(twiddle_rsc_0_3_ARVALID),
      .twiddle_rsc_0_3_ARUSER(twiddle_rsc_0_3_ARUSER),
      .twiddle_rsc_0_3_ARREGION(twiddle_rsc_0_3_ARREGION),
      .twiddle_rsc_0_3_ARQOS(twiddle_rsc_0_3_ARQOS),
      .twiddle_rsc_0_3_ARPROT(twiddle_rsc_0_3_ARPROT),
      .twiddle_rsc_0_3_ARCACHE(twiddle_rsc_0_3_ARCACHE),
      .twiddle_rsc_0_3_ARLOCK(twiddle_rsc_0_3_ARLOCK),
      .twiddle_rsc_0_3_ARBURST(twiddle_rsc_0_3_ARBURST),
      .twiddle_rsc_0_3_ARSIZE(twiddle_rsc_0_3_ARSIZE),
      .twiddle_rsc_0_3_ARLEN(twiddle_rsc_0_3_ARLEN),
      .twiddle_rsc_0_3_ARADDR(twiddle_rsc_0_3_ARADDR),
      .twiddle_rsc_0_3_ARID(twiddle_rsc_0_3_ARID),
      .twiddle_rsc_0_3_BREADY(twiddle_rsc_0_3_BREADY),
      .twiddle_rsc_0_3_BVALID(twiddle_rsc_0_3_BVALID),
      .twiddle_rsc_0_3_BUSER(twiddle_rsc_0_3_BUSER),
      .twiddle_rsc_0_3_BRESP(twiddle_rsc_0_3_BRESP),
      .twiddle_rsc_0_3_BID(twiddle_rsc_0_3_BID),
      .twiddle_rsc_0_3_WREADY(twiddle_rsc_0_3_WREADY),
      .twiddle_rsc_0_3_WVALID(twiddle_rsc_0_3_WVALID),
      .twiddle_rsc_0_3_WUSER(twiddle_rsc_0_3_WUSER),
      .twiddle_rsc_0_3_WLAST(twiddle_rsc_0_3_WLAST),
      .twiddle_rsc_0_3_WSTRB(twiddle_rsc_0_3_WSTRB),
      .twiddle_rsc_0_3_WDATA(twiddle_rsc_0_3_WDATA),
      .twiddle_rsc_0_3_AWREADY(twiddle_rsc_0_3_AWREADY),
      .twiddle_rsc_0_3_AWVALID(twiddle_rsc_0_3_AWVALID),
      .twiddle_rsc_0_3_AWUSER(twiddle_rsc_0_3_AWUSER),
      .twiddle_rsc_0_3_AWREGION(twiddle_rsc_0_3_AWREGION),
      .twiddle_rsc_0_3_AWQOS(twiddle_rsc_0_3_AWQOS),
      .twiddle_rsc_0_3_AWPROT(twiddle_rsc_0_3_AWPROT),
      .twiddle_rsc_0_3_AWCACHE(twiddle_rsc_0_3_AWCACHE),
      .twiddle_rsc_0_3_AWLOCK(twiddle_rsc_0_3_AWLOCK),
      .twiddle_rsc_0_3_AWBURST(twiddle_rsc_0_3_AWBURST),
      .twiddle_rsc_0_3_AWSIZE(twiddle_rsc_0_3_AWSIZE),
      .twiddle_rsc_0_3_AWLEN(twiddle_rsc_0_3_AWLEN),
      .twiddle_rsc_0_3_AWADDR(twiddle_rsc_0_3_AWADDR),
      .twiddle_rsc_0_3_AWID(twiddle_rsc_0_3_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_3_i_oswt(reg_twiddle_rsc_0_3_i_oswt_cse),
      .twiddle_rsc_0_3_i_wen_comp(twiddle_rsc_0_3_i_wen_comp),
      .twiddle_rsc_0_3_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_3_i_inst_twiddle_rsc_0_3_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_3_i_s_din_mxwt(twiddle_rsc_0_3_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_4_i peaseNTT_core_twiddle_rsc_0_4_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_4_s_tdone(twiddle_rsc_0_4_s_tdone),
      .twiddle_rsc_0_4_tr_write_done(twiddle_rsc_0_4_tr_write_done),
      .twiddle_rsc_0_4_RREADY(twiddle_rsc_0_4_RREADY),
      .twiddle_rsc_0_4_RVALID(twiddle_rsc_0_4_RVALID),
      .twiddle_rsc_0_4_RUSER(twiddle_rsc_0_4_RUSER),
      .twiddle_rsc_0_4_RLAST(twiddle_rsc_0_4_RLAST),
      .twiddle_rsc_0_4_RRESP(twiddle_rsc_0_4_RRESP),
      .twiddle_rsc_0_4_RDATA(twiddle_rsc_0_4_RDATA),
      .twiddle_rsc_0_4_RID(twiddle_rsc_0_4_RID),
      .twiddle_rsc_0_4_ARREADY(twiddle_rsc_0_4_ARREADY),
      .twiddle_rsc_0_4_ARVALID(twiddle_rsc_0_4_ARVALID),
      .twiddle_rsc_0_4_ARUSER(twiddle_rsc_0_4_ARUSER),
      .twiddle_rsc_0_4_ARREGION(twiddle_rsc_0_4_ARREGION),
      .twiddle_rsc_0_4_ARQOS(twiddle_rsc_0_4_ARQOS),
      .twiddle_rsc_0_4_ARPROT(twiddle_rsc_0_4_ARPROT),
      .twiddle_rsc_0_4_ARCACHE(twiddle_rsc_0_4_ARCACHE),
      .twiddle_rsc_0_4_ARLOCK(twiddle_rsc_0_4_ARLOCK),
      .twiddle_rsc_0_4_ARBURST(twiddle_rsc_0_4_ARBURST),
      .twiddle_rsc_0_4_ARSIZE(twiddle_rsc_0_4_ARSIZE),
      .twiddle_rsc_0_4_ARLEN(twiddle_rsc_0_4_ARLEN),
      .twiddle_rsc_0_4_ARADDR(twiddle_rsc_0_4_ARADDR),
      .twiddle_rsc_0_4_ARID(twiddle_rsc_0_4_ARID),
      .twiddle_rsc_0_4_BREADY(twiddle_rsc_0_4_BREADY),
      .twiddle_rsc_0_4_BVALID(twiddle_rsc_0_4_BVALID),
      .twiddle_rsc_0_4_BUSER(twiddle_rsc_0_4_BUSER),
      .twiddle_rsc_0_4_BRESP(twiddle_rsc_0_4_BRESP),
      .twiddle_rsc_0_4_BID(twiddle_rsc_0_4_BID),
      .twiddle_rsc_0_4_WREADY(twiddle_rsc_0_4_WREADY),
      .twiddle_rsc_0_4_WVALID(twiddle_rsc_0_4_WVALID),
      .twiddle_rsc_0_4_WUSER(twiddle_rsc_0_4_WUSER),
      .twiddle_rsc_0_4_WLAST(twiddle_rsc_0_4_WLAST),
      .twiddle_rsc_0_4_WSTRB(twiddle_rsc_0_4_WSTRB),
      .twiddle_rsc_0_4_WDATA(twiddle_rsc_0_4_WDATA),
      .twiddle_rsc_0_4_AWREADY(twiddle_rsc_0_4_AWREADY),
      .twiddle_rsc_0_4_AWVALID(twiddle_rsc_0_4_AWVALID),
      .twiddle_rsc_0_4_AWUSER(twiddle_rsc_0_4_AWUSER),
      .twiddle_rsc_0_4_AWREGION(twiddle_rsc_0_4_AWREGION),
      .twiddle_rsc_0_4_AWQOS(twiddle_rsc_0_4_AWQOS),
      .twiddle_rsc_0_4_AWPROT(twiddle_rsc_0_4_AWPROT),
      .twiddle_rsc_0_4_AWCACHE(twiddle_rsc_0_4_AWCACHE),
      .twiddle_rsc_0_4_AWLOCK(twiddle_rsc_0_4_AWLOCK),
      .twiddle_rsc_0_4_AWBURST(twiddle_rsc_0_4_AWBURST),
      .twiddle_rsc_0_4_AWSIZE(twiddle_rsc_0_4_AWSIZE),
      .twiddle_rsc_0_4_AWLEN(twiddle_rsc_0_4_AWLEN),
      .twiddle_rsc_0_4_AWADDR(twiddle_rsc_0_4_AWADDR),
      .twiddle_rsc_0_4_AWID(twiddle_rsc_0_4_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_4_i_oswt(reg_twiddle_rsc_0_4_i_oswt_cse),
      .twiddle_rsc_0_4_i_wen_comp(twiddle_rsc_0_4_i_wen_comp),
      .twiddle_rsc_0_4_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_4_i_inst_twiddle_rsc_0_4_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_4_i_s_din_mxwt(twiddle_rsc_0_4_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_5_i peaseNTT_core_twiddle_rsc_0_5_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_5_s_tdone(twiddle_rsc_0_5_s_tdone),
      .twiddle_rsc_0_5_tr_write_done(twiddle_rsc_0_5_tr_write_done),
      .twiddle_rsc_0_5_RREADY(twiddle_rsc_0_5_RREADY),
      .twiddle_rsc_0_5_RVALID(twiddle_rsc_0_5_RVALID),
      .twiddle_rsc_0_5_RUSER(twiddle_rsc_0_5_RUSER),
      .twiddle_rsc_0_5_RLAST(twiddle_rsc_0_5_RLAST),
      .twiddle_rsc_0_5_RRESP(twiddle_rsc_0_5_RRESP),
      .twiddle_rsc_0_5_RDATA(twiddle_rsc_0_5_RDATA),
      .twiddle_rsc_0_5_RID(twiddle_rsc_0_5_RID),
      .twiddle_rsc_0_5_ARREADY(twiddle_rsc_0_5_ARREADY),
      .twiddle_rsc_0_5_ARVALID(twiddle_rsc_0_5_ARVALID),
      .twiddle_rsc_0_5_ARUSER(twiddle_rsc_0_5_ARUSER),
      .twiddle_rsc_0_5_ARREGION(twiddle_rsc_0_5_ARREGION),
      .twiddle_rsc_0_5_ARQOS(twiddle_rsc_0_5_ARQOS),
      .twiddle_rsc_0_5_ARPROT(twiddle_rsc_0_5_ARPROT),
      .twiddle_rsc_0_5_ARCACHE(twiddle_rsc_0_5_ARCACHE),
      .twiddle_rsc_0_5_ARLOCK(twiddle_rsc_0_5_ARLOCK),
      .twiddle_rsc_0_5_ARBURST(twiddle_rsc_0_5_ARBURST),
      .twiddle_rsc_0_5_ARSIZE(twiddle_rsc_0_5_ARSIZE),
      .twiddle_rsc_0_5_ARLEN(twiddle_rsc_0_5_ARLEN),
      .twiddle_rsc_0_5_ARADDR(twiddle_rsc_0_5_ARADDR),
      .twiddle_rsc_0_5_ARID(twiddle_rsc_0_5_ARID),
      .twiddle_rsc_0_5_BREADY(twiddle_rsc_0_5_BREADY),
      .twiddle_rsc_0_5_BVALID(twiddle_rsc_0_5_BVALID),
      .twiddle_rsc_0_5_BUSER(twiddle_rsc_0_5_BUSER),
      .twiddle_rsc_0_5_BRESP(twiddle_rsc_0_5_BRESP),
      .twiddle_rsc_0_5_BID(twiddle_rsc_0_5_BID),
      .twiddle_rsc_0_5_WREADY(twiddle_rsc_0_5_WREADY),
      .twiddle_rsc_0_5_WVALID(twiddle_rsc_0_5_WVALID),
      .twiddle_rsc_0_5_WUSER(twiddle_rsc_0_5_WUSER),
      .twiddle_rsc_0_5_WLAST(twiddle_rsc_0_5_WLAST),
      .twiddle_rsc_0_5_WSTRB(twiddle_rsc_0_5_WSTRB),
      .twiddle_rsc_0_5_WDATA(twiddle_rsc_0_5_WDATA),
      .twiddle_rsc_0_5_AWREADY(twiddle_rsc_0_5_AWREADY),
      .twiddle_rsc_0_5_AWVALID(twiddle_rsc_0_5_AWVALID),
      .twiddle_rsc_0_5_AWUSER(twiddle_rsc_0_5_AWUSER),
      .twiddle_rsc_0_5_AWREGION(twiddle_rsc_0_5_AWREGION),
      .twiddle_rsc_0_5_AWQOS(twiddle_rsc_0_5_AWQOS),
      .twiddle_rsc_0_5_AWPROT(twiddle_rsc_0_5_AWPROT),
      .twiddle_rsc_0_5_AWCACHE(twiddle_rsc_0_5_AWCACHE),
      .twiddle_rsc_0_5_AWLOCK(twiddle_rsc_0_5_AWLOCK),
      .twiddle_rsc_0_5_AWBURST(twiddle_rsc_0_5_AWBURST),
      .twiddle_rsc_0_5_AWSIZE(twiddle_rsc_0_5_AWSIZE),
      .twiddle_rsc_0_5_AWLEN(twiddle_rsc_0_5_AWLEN),
      .twiddle_rsc_0_5_AWADDR(twiddle_rsc_0_5_AWADDR),
      .twiddle_rsc_0_5_AWID(twiddle_rsc_0_5_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_5_i_oswt(reg_twiddle_rsc_0_5_i_oswt_cse),
      .twiddle_rsc_0_5_i_wen_comp(twiddle_rsc_0_5_i_wen_comp),
      .twiddle_rsc_0_5_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_5_i_inst_twiddle_rsc_0_5_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_5_i_s_din_mxwt(twiddle_rsc_0_5_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_6_i peaseNTT_core_twiddle_rsc_0_6_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_6_s_tdone(twiddle_rsc_0_6_s_tdone),
      .twiddle_rsc_0_6_tr_write_done(twiddle_rsc_0_6_tr_write_done),
      .twiddle_rsc_0_6_RREADY(twiddle_rsc_0_6_RREADY),
      .twiddle_rsc_0_6_RVALID(twiddle_rsc_0_6_RVALID),
      .twiddle_rsc_0_6_RUSER(twiddle_rsc_0_6_RUSER),
      .twiddle_rsc_0_6_RLAST(twiddle_rsc_0_6_RLAST),
      .twiddle_rsc_0_6_RRESP(twiddle_rsc_0_6_RRESP),
      .twiddle_rsc_0_6_RDATA(twiddle_rsc_0_6_RDATA),
      .twiddle_rsc_0_6_RID(twiddle_rsc_0_6_RID),
      .twiddle_rsc_0_6_ARREADY(twiddle_rsc_0_6_ARREADY),
      .twiddle_rsc_0_6_ARVALID(twiddle_rsc_0_6_ARVALID),
      .twiddle_rsc_0_6_ARUSER(twiddle_rsc_0_6_ARUSER),
      .twiddle_rsc_0_6_ARREGION(twiddle_rsc_0_6_ARREGION),
      .twiddle_rsc_0_6_ARQOS(twiddle_rsc_0_6_ARQOS),
      .twiddle_rsc_0_6_ARPROT(twiddle_rsc_0_6_ARPROT),
      .twiddle_rsc_0_6_ARCACHE(twiddle_rsc_0_6_ARCACHE),
      .twiddle_rsc_0_6_ARLOCK(twiddle_rsc_0_6_ARLOCK),
      .twiddle_rsc_0_6_ARBURST(twiddle_rsc_0_6_ARBURST),
      .twiddle_rsc_0_6_ARSIZE(twiddle_rsc_0_6_ARSIZE),
      .twiddle_rsc_0_6_ARLEN(twiddle_rsc_0_6_ARLEN),
      .twiddle_rsc_0_6_ARADDR(twiddle_rsc_0_6_ARADDR),
      .twiddle_rsc_0_6_ARID(twiddle_rsc_0_6_ARID),
      .twiddle_rsc_0_6_BREADY(twiddle_rsc_0_6_BREADY),
      .twiddle_rsc_0_6_BVALID(twiddle_rsc_0_6_BVALID),
      .twiddle_rsc_0_6_BUSER(twiddle_rsc_0_6_BUSER),
      .twiddle_rsc_0_6_BRESP(twiddle_rsc_0_6_BRESP),
      .twiddle_rsc_0_6_BID(twiddle_rsc_0_6_BID),
      .twiddle_rsc_0_6_WREADY(twiddle_rsc_0_6_WREADY),
      .twiddle_rsc_0_6_WVALID(twiddle_rsc_0_6_WVALID),
      .twiddle_rsc_0_6_WUSER(twiddle_rsc_0_6_WUSER),
      .twiddle_rsc_0_6_WLAST(twiddle_rsc_0_6_WLAST),
      .twiddle_rsc_0_6_WSTRB(twiddle_rsc_0_6_WSTRB),
      .twiddle_rsc_0_6_WDATA(twiddle_rsc_0_6_WDATA),
      .twiddle_rsc_0_6_AWREADY(twiddle_rsc_0_6_AWREADY),
      .twiddle_rsc_0_6_AWVALID(twiddle_rsc_0_6_AWVALID),
      .twiddle_rsc_0_6_AWUSER(twiddle_rsc_0_6_AWUSER),
      .twiddle_rsc_0_6_AWREGION(twiddle_rsc_0_6_AWREGION),
      .twiddle_rsc_0_6_AWQOS(twiddle_rsc_0_6_AWQOS),
      .twiddle_rsc_0_6_AWPROT(twiddle_rsc_0_6_AWPROT),
      .twiddle_rsc_0_6_AWCACHE(twiddle_rsc_0_6_AWCACHE),
      .twiddle_rsc_0_6_AWLOCK(twiddle_rsc_0_6_AWLOCK),
      .twiddle_rsc_0_6_AWBURST(twiddle_rsc_0_6_AWBURST),
      .twiddle_rsc_0_6_AWSIZE(twiddle_rsc_0_6_AWSIZE),
      .twiddle_rsc_0_6_AWLEN(twiddle_rsc_0_6_AWLEN),
      .twiddle_rsc_0_6_AWADDR(twiddle_rsc_0_6_AWADDR),
      .twiddle_rsc_0_6_AWID(twiddle_rsc_0_6_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_6_i_oswt(reg_twiddle_rsc_0_6_i_oswt_cse),
      .twiddle_rsc_0_6_i_wen_comp(twiddle_rsc_0_6_i_wen_comp),
      .twiddle_rsc_0_6_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_6_i_inst_twiddle_rsc_0_6_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_6_i_s_din_mxwt(twiddle_rsc_0_6_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_7_i peaseNTT_core_twiddle_rsc_0_7_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_7_s_tdone(twiddle_rsc_0_7_s_tdone),
      .twiddle_rsc_0_7_tr_write_done(twiddle_rsc_0_7_tr_write_done),
      .twiddle_rsc_0_7_RREADY(twiddle_rsc_0_7_RREADY),
      .twiddle_rsc_0_7_RVALID(twiddle_rsc_0_7_RVALID),
      .twiddle_rsc_0_7_RUSER(twiddle_rsc_0_7_RUSER),
      .twiddle_rsc_0_7_RLAST(twiddle_rsc_0_7_RLAST),
      .twiddle_rsc_0_7_RRESP(twiddle_rsc_0_7_RRESP),
      .twiddle_rsc_0_7_RDATA(twiddle_rsc_0_7_RDATA),
      .twiddle_rsc_0_7_RID(twiddle_rsc_0_7_RID),
      .twiddle_rsc_0_7_ARREADY(twiddle_rsc_0_7_ARREADY),
      .twiddle_rsc_0_7_ARVALID(twiddle_rsc_0_7_ARVALID),
      .twiddle_rsc_0_7_ARUSER(twiddle_rsc_0_7_ARUSER),
      .twiddle_rsc_0_7_ARREGION(twiddle_rsc_0_7_ARREGION),
      .twiddle_rsc_0_7_ARQOS(twiddle_rsc_0_7_ARQOS),
      .twiddle_rsc_0_7_ARPROT(twiddle_rsc_0_7_ARPROT),
      .twiddle_rsc_0_7_ARCACHE(twiddle_rsc_0_7_ARCACHE),
      .twiddle_rsc_0_7_ARLOCK(twiddle_rsc_0_7_ARLOCK),
      .twiddle_rsc_0_7_ARBURST(twiddle_rsc_0_7_ARBURST),
      .twiddle_rsc_0_7_ARSIZE(twiddle_rsc_0_7_ARSIZE),
      .twiddle_rsc_0_7_ARLEN(twiddle_rsc_0_7_ARLEN),
      .twiddle_rsc_0_7_ARADDR(twiddle_rsc_0_7_ARADDR),
      .twiddle_rsc_0_7_ARID(twiddle_rsc_0_7_ARID),
      .twiddle_rsc_0_7_BREADY(twiddle_rsc_0_7_BREADY),
      .twiddle_rsc_0_7_BVALID(twiddle_rsc_0_7_BVALID),
      .twiddle_rsc_0_7_BUSER(twiddle_rsc_0_7_BUSER),
      .twiddle_rsc_0_7_BRESP(twiddle_rsc_0_7_BRESP),
      .twiddle_rsc_0_7_BID(twiddle_rsc_0_7_BID),
      .twiddle_rsc_0_7_WREADY(twiddle_rsc_0_7_WREADY),
      .twiddle_rsc_0_7_WVALID(twiddle_rsc_0_7_WVALID),
      .twiddle_rsc_0_7_WUSER(twiddle_rsc_0_7_WUSER),
      .twiddle_rsc_0_7_WLAST(twiddle_rsc_0_7_WLAST),
      .twiddle_rsc_0_7_WSTRB(twiddle_rsc_0_7_WSTRB),
      .twiddle_rsc_0_7_WDATA(twiddle_rsc_0_7_WDATA),
      .twiddle_rsc_0_7_AWREADY(twiddle_rsc_0_7_AWREADY),
      .twiddle_rsc_0_7_AWVALID(twiddle_rsc_0_7_AWVALID),
      .twiddle_rsc_0_7_AWUSER(twiddle_rsc_0_7_AWUSER),
      .twiddle_rsc_0_7_AWREGION(twiddle_rsc_0_7_AWREGION),
      .twiddle_rsc_0_7_AWQOS(twiddle_rsc_0_7_AWQOS),
      .twiddle_rsc_0_7_AWPROT(twiddle_rsc_0_7_AWPROT),
      .twiddle_rsc_0_7_AWCACHE(twiddle_rsc_0_7_AWCACHE),
      .twiddle_rsc_0_7_AWLOCK(twiddle_rsc_0_7_AWLOCK),
      .twiddle_rsc_0_7_AWBURST(twiddle_rsc_0_7_AWBURST),
      .twiddle_rsc_0_7_AWSIZE(twiddle_rsc_0_7_AWSIZE),
      .twiddle_rsc_0_7_AWLEN(twiddle_rsc_0_7_AWLEN),
      .twiddle_rsc_0_7_AWADDR(twiddle_rsc_0_7_AWADDR),
      .twiddle_rsc_0_7_AWID(twiddle_rsc_0_7_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_7_i_oswt(reg_twiddle_rsc_0_7_i_oswt_cse),
      .twiddle_rsc_0_7_i_wen_comp(twiddle_rsc_0_7_i_wen_comp),
      .twiddle_rsc_0_7_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_7_i_inst_twiddle_rsc_0_7_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_7_i_s_din_mxwt(twiddle_rsc_0_7_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_8_i peaseNTT_core_twiddle_rsc_0_8_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_8_s_tdone(twiddle_rsc_0_8_s_tdone),
      .twiddle_rsc_0_8_tr_write_done(twiddle_rsc_0_8_tr_write_done),
      .twiddle_rsc_0_8_RREADY(twiddle_rsc_0_8_RREADY),
      .twiddle_rsc_0_8_RVALID(twiddle_rsc_0_8_RVALID),
      .twiddle_rsc_0_8_RUSER(twiddle_rsc_0_8_RUSER),
      .twiddle_rsc_0_8_RLAST(twiddle_rsc_0_8_RLAST),
      .twiddle_rsc_0_8_RRESP(twiddle_rsc_0_8_RRESP),
      .twiddle_rsc_0_8_RDATA(twiddle_rsc_0_8_RDATA),
      .twiddle_rsc_0_8_RID(twiddle_rsc_0_8_RID),
      .twiddle_rsc_0_8_ARREADY(twiddle_rsc_0_8_ARREADY),
      .twiddle_rsc_0_8_ARVALID(twiddle_rsc_0_8_ARVALID),
      .twiddle_rsc_0_8_ARUSER(twiddle_rsc_0_8_ARUSER),
      .twiddle_rsc_0_8_ARREGION(twiddle_rsc_0_8_ARREGION),
      .twiddle_rsc_0_8_ARQOS(twiddle_rsc_0_8_ARQOS),
      .twiddle_rsc_0_8_ARPROT(twiddle_rsc_0_8_ARPROT),
      .twiddle_rsc_0_8_ARCACHE(twiddle_rsc_0_8_ARCACHE),
      .twiddle_rsc_0_8_ARLOCK(twiddle_rsc_0_8_ARLOCK),
      .twiddle_rsc_0_8_ARBURST(twiddle_rsc_0_8_ARBURST),
      .twiddle_rsc_0_8_ARSIZE(twiddle_rsc_0_8_ARSIZE),
      .twiddle_rsc_0_8_ARLEN(twiddle_rsc_0_8_ARLEN),
      .twiddle_rsc_0_8_ARADDR(twiddle_rsc_0_8_ARADDR),
      .twiddle_rsc_0_8_ARID(twiddle_rsc_0_8_ARID),
      .twiddle_rsc_0_8_BREADY(twiddle_rsc_0_8_BREADY),
      .twiddle_rsc_0_8_BVALID(twiddle_rsc_0_8_BVALID),
      .twiddle_rsc_0_8_BUSER(twiddle_rsc_0_8_BUSER),
      .twiddle_rsc_0_8_BRESP(twiddle_rsc_0_8_BRESP),
      .twiddle_rsc_0_8_BID(twiddle_rsc_0_8_BID),
      .twiddle_rsc_0_8_WREADY(twiddle_rsc_0_8_WREADY),
      .twiddle_rsc_0_8_WVALID(twiddle_rsc_0_8_WVALID),
      .twiddle_rsc_0_8_WUSER(twiddle_rsc_0_8_WUSER),
      .twiddle_rsc_0_8_WLAST(twiddle_rsc_0_8_WLAST),
      .twiddle_rsc_0_8_WSTRB(twiddle_rsc_0_8_WSTRB),
      .twiddle_rsc_0_8_WDATA(twiddle_rsc_0_8_WDATA),
      .twiddle_rsc_0_8_AWREADY(twiddle_rsc_0_8_AWREADY),
      .twiddle_rsc_0_8_AWVALID(twiddle_rsc_0_8_AWVALID),
      .twiddle_rsc_0_8_AWUSER(twiddle_rsc_0_8_AWUSER),
      .twiddle_rsc_0_8_AWREGION(twiddle_rsc_0_8_AWREGION),
      .twiddle_rsc_0_8_AWQOS(twiddle_rsc_0_8_AWQOS),
      .twiddle_rsc_0_8_AWPROT(twiddle_rsc_0_8_AWPROT),
      .twiddle_rsc_0_8_AWCACHE(twiddle_rsc_0_8_AWCACHE),
      .twiddle_rsc_0_8_AWLOCK(twiddle_rsc_0_8_AWLOCK),
      .twiddle_rsc_0_8_AWBURST(twiddle_rsc_0_8_AWBURST),
      .twiddle_rsc_0_8_AWSIZE(twiddle_rsc_0_8_AWSIZE),
      .twiddle_rsc_0_8_AWLEN(twiddle_rsc_0_8_AWLEN),
      .twiddle_rsc_0_8_AWADDR(twiddle_rsc_0_8_AWADDR),
      .twiddle_rsc_0_8_AWID(twiddle_rsc_0_8_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_8_i_oswt(reg_twiddle_rsc_0_8_i_oswt_cse),
      .twiddle_rsc_0_8_i_wen_comp(twiddle_rsc_0_8_i_wen_comp),
      .twiddle_rsc_0_8_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_8_i_inst_twiddle_rsc_0_8_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_8_i_s_din_mxwt(twiddle_rsc_0_8_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_9_i peaseNTT_core_twiddle_rsc_0_9_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_9_s_tdone(twiddle_rsc_0_9_s_tdone),
      .twiddle_rsc_0_9_tr_write_done(twiddle_rsc_0_9_tr_write_done),
      .twiddle_rsc_0_9_RREADY(twiddle_rsc_0_9_RREADY),
      .twiddle_rsc_0_9_RVALID(twiddle_rsc_0_9_RVALID),
      .twiddle_rsc_0_9_RUSER(twiddle_rsc_0_9_RUSER),
      .twiddle_rsc_0_9_RLAST(twiddle_rsc_0_9_RLAST),
      .twiddle_rsc_0_9_RRESP(twiddle_rsc_0_9_RRESP),
      .twiddle_rsc_0_9_RDATA(twiddle_rsc_0_9_RDATA),
      .twiddle_rsc_0_9_RID(twiddle_rsc_0_9_RID),
      .twiddle_rsc_0_9_ARREADY(twiddle_rsc_0_9_ARREADY),
      .twiddle_rsc_0_9_ARVALID(twiddle_rsc_0_9_ARVALID),
      .twiddle_rsc_0_9_ARUSER(twiddle_rsc_0_9_ARUSER),
      .twiddle_rsc_0_9_ARREGION(twiddle_rsc_0_9_ARREGION),
      .twiddle_rsc_0_9_ARQOS(twiddle_rsc_0_9_ARQOS),
      .twiddle_rsc_0_9_ARPROT(twiddle_rsc_0_9_ARPROT),
      .twiddle_rsc_0_9_ARCACHE(twiddle_rsc_0_9_ARCACHE),
      .twiddle_rsc_0_9_ARLOCK(twiddle_rsc_0_9_ARLOCK),
      .twiddle_rsc_0_9_ARBURST(twiddle_rsc_0_9_ARBURST),
      .twiddle_rsc_0_9_ARSIZE(twiddle_rsc_0_9_ARSIZE),
      .twiddle_rsc_0_9_ARLEN(twiddle_rsc_0_9_ARLEN),
      .twiddle_rsc_0_9_ARADDR(twiddle_rsc_0_9_ARADDR),
      .twiddle_rsc_0_9_ARID(twiddle_rsc_0_9_ARID),
      .twiddle_rsc_0_9_BREADY(twiddle_rsc_0_9_BREADY),
      .twiddle_rsc_0_9_BVALID(twiddle_rsc_0_9_BVALID),
      .twiddle_rsc_0_9_BUSER(twiddle_rsc_0_9_BUSER),
      .twiddle_rsc_0_9_BRESP(twiddle_rsc_0_9_BRESP),
      .twiddle_rsc_0_9_BID(twiddle_rsc_0_9_BID),
      .twiddle_rsc_0_9_WREADY(twiddle_rsc_0_9_WREADY),
      .twiddle_rsc_0_9_WVALID(twiddle_rsc_0_9_WVALID),
      .twiddle_rsc_0_9_WUSER(twiddle_rsc_0_9_WUSER),
      .twiddle_rsc_0_9_WLAST(twiddle_rsc_0_9_WLAST),
      .twiddle_rsc_0_9_WSTRB(twiddle_rsc_0_9_WSTRB),
      .twiddle_rsc_0_9_WDATA(twiddle_rsc_0_9_WDATA),
      .twiddle_rsc_0_9_AWREADY(twiddle_rsc_0_9_AWREADY),
      .twiddle_rsc_0_9_AWVALID(twiddle_rsc_0_9_AWVALID),
      .twiddle_rsc_0_9_AWUSER(twiddle_rsc_0_9_AWUSER),
      .twiddle_rsc_0_9_AWREGION(twiddle_rsc_0_9_AWREGION),
      .twiddle_rsc_0_9_AWQOS(twiddle_rsc_0_9_AWQOS),
      .twiddle_rsc_0_9_AWPROT(twiddle_rsc_0_9_AWPROT),
      .twiddle_rsc_0_9_AWCACHE(twiddle_rsc_0_9_AWCACHE),
      .twiddle_rsc_0_9_AWLOCK(twiddle_rsc_0_9_AWLOCK),
      .twiddle_rsc_0_9_AWBURST(twiddle_rsc_0_9_AWBURST),
      .twiddle_rsc_0_9_AWSIZE(twiddle_rsc_0_9_AWSIZE),
      .twiddle_rsc_0_9_AWLEN(twiddle_rsc_0_9_AWLEN),
      .twiddle_rsc_0_9_AWADDR(twiddle_rsc_0_9_AWADDR),
      .twiddle_rsc_0_9_AWID(twiddle_rsc_0_9_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_9_i_oswt(reg_twiddle_rsc_0_1_i_oswt_cse),
      .twiddle_rsc_0_9_i_wen_comp(twiddle_rsc_0_9_i_wen_comp),
      .twiddle_rsc_0_9_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_9_i_inst_twiddle_rsc_0_9_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_9_i_s_din_mxwt(twiddle_rsc_0_9_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_10_i peaseNTT_core_twiddle_rsc_0_10_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_10_s_tdone(twiddle_rsc_0_10_s_tdone),
      .twiddle_rsc_0_10_tr_write_done(twiddle_rsc_0_10_tr_write_done),
      .twiddle_rsc_0_10_RREADY(twiddle_rsc_0_10_RREADY),
      .twiddle_rsc_0_10_RVALID(twiddle_rsc_0_10_RVALID),
      .twiddle_rsc_0_10_RUSER(twiddle_rsc_0_10_RUSER),
      .twiddle_rsc_0_10_RLAST(twiddle_rsc_0_10_RLAST),
      .twiddle_rsc_0_10_RRESP(twiddle_rsc_0_10_RRESP),
      .twiddle_rsc_0_10_RDATA(twiddle_rsc_0_10_RDATA),
      .twiddle_rsc_0_10_RID(twiddle_rsc_0_10_RID),
      .twiddle_rsc_0_10_ARREADY(twiddle_rsc_0_10_ARREADY),
      .twiddle_rsc_0_10_ARVALID(twiddle_rsc_0_10_ARVALID),
      .twiddle_rsc_0_10_ARUSER(twiddle_rsc_0_10_ARUSER),
      .twiddle_rsc_0_10_ARREGION(twiddle_rsc_0_10_ARREGION),
      .twiddle_rsc_0_10_ARQOS(twiddle_rsc_0_10_ARQOS),
      .twiddle_rsc_0_10_ARPROT(twiddle_rsc_0_10_ARPROT),
      .twiddle_rsc_0_10_ARCACHE(twiddle_rsc_0_10_ARCACHE),
      .twiddle_rsc_0_10_ARLOCK(twiddle_rsc_0_10_ARLOCK),
      .twiddle_rsc_0_10_ARBURST(twiddle_rsc_0_10_ARBURST),
      .twiddle_rsc_0_10_ARSIZE(twiddle_rsc_0_10_ARSIZE),
      .twiddle_rsc_0_10_ARLEN(twiddle_rsc_0_10_ARLEN),
      .twiddle_rsc_0_10_ARADDR(twiddle_rsc_0_10_ARADDR),
      .twiddle_rsc_0_10_ARID(twiddle_rsc_0_10_ARID),
      .twiddle_rsc_0_10_BREADY(twiddle_rsc_0_10_BREADY),
      .twiddle_rsc_0_10_BVALID(twiddle_rsc_0_10_BVALID),
      .twiddle_rsc_0_10_BUSER(twiddle_rsc_0_10_BUSER),
      .twiddle_rsc_0_10_BRESP(twiddle_rsc_0_10_BRESP),
      .twiddle_rsc_0_10_BID(twiddle_rsc_0_10_BID),
      .twiddle_rsc_0_10_WREADY(twiddle_rsc_0_10_WREADY),
      .twiddle_rsc_0_10_WVALID(twiddle_rsc_0_10_WVALID),
      .twiddle_rsc_0_10_WUSER(twiddle_rsc_0_10_WUSER),
      .twiddle_rsc_0_10_WLAST(twiddle_rsc_0_10_WLAST),
      .twiddle_rsc_0_10_WSTRB(twiddle_rsc_0_10_WSTRB),
      .twiddle_rsc_0_10_WDATA(twiddle_rsc_0_10_WDATA),
      .twiddle_rsc_0_10_AWREADY(twiddle_rsc_0_10_AWREADY),
      .twiddle_rsc_0_10_AWVALID(twiddle_rsc_0_10_AWVALID),
      .twiddle_rsc_0_10_AWUSER(twiddle_rsc_0_10_AWUSER),
      .twiddle_rsc_0_10_AWREGION(twiddle_rsc_0_10_AWREGION),
      .twiddle_rsc_0_10_AWQOS(twiddle_rsc_0_10_AWQOS),
      .twiddle_rsc_0_10_AWPROT(twiddle_rsc_0_10_AWPROT),
      .twiddle_rsc_0_10_AWCACHE(twiddle_rsc_0_10_AWCACHE),
      .twiddle_rsc_0_10_AWLOCK(twiddle_rsc_0_10_AWLOCK),
      .twiddle_rsc_0_10_AWBURST(twiddle_rsc_0_10_AWBURST),
      .twiddle_rsc_0_10_AWSIZE(twiddle_rsc_0_10_AWSIZE),
      .twiddle_rsc_0_10_AWLEN(twiddle_rsc_0_10_AWLEN),
      .twiddle_rsc_0_10_AWADDR(twiddle_rsc_0_10_AWADDR),
      .twiddle_rsc_0_10_AWID(twiddle_rsc_0_10_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_10_i_oswt(reg_twiddle_rsc_0_2_i_oswt_cse),
      .twiddle_rsc_0_10_i_wen_comp(twiddle_rsc_0_10_i_wen_comp),
      .twiddle_rsc_0_10_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_10_i_inst_twiddle_rsc_0_10_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_10_i_s_din_mxwt(twiddle_rsc_0_10_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_11_i peaseNTT_core_twiddle_rsc_0_11_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_11_s_tdone(twiddle_rsc_0_11_s_tdone),
      .twiddle_rsc_0_11_tr_write_done(twiddle_rsc_0_11_tr_write_done),
      .twiddle_rsc_0_11_RREADY(twiddle_rsc_0_11_RREADY),
      .twiddle_rsc_0_11_RVALID(twiddle_rsc_0_11_RVALID),
      .twiddle_rsc_0_11_RUSER(twiddle_rsc_0_11_RUSER),
      .twiddle_rsc_0_11_RLAST(twiddle_rsc_0_11_RLAST),
      .twiddle_rsc_0_11_RRESP(twiddle_rsc_0_11_RRESP),
      .twiddle_rsc_0_11_RDATA(twiddle_rsc_0_11_RDATA),
      .twiddle_rsc_0_11_RID(twiddle_rsc_0_11_RID),
      .twiddle_rsc_0_11_ARREADY(twiddle_rsc_0_11_ARREADY),
      .twiddle_rsc_0_11_ARVALID(twiddle_rsc_0_11_ARVALID),
      .twiddle_rsc_0_11_ARUSER(twiddle_rsc_0_11_ARUSER),
      .twiddle_rsc_0_11_ARREGION(twiddle_rsc_0_11_ARREGION),
      .twiddle_rsc_0_11_ARQOS(twiddle_rsc_0_11_ARQOS),
      .twiddle_rsc_0_11_ARPROT(twiddle_rsc_0_11_ARPROT),
      .twiddle_rsc_0_11_ARCACHE(twiddle_rsc_0_11_ARCACHE),
      .twiddle_rsc_0_11_ARLOCK(twiddle_rsc_0_11_ARLOCK),
      .twiddle_rsc_0_11_ARBURST(twiddle_rsc_0_11_ARBURST),
      .twiddle_rsc_0_11_ARSIZE(twiddle_rsc_0_11_ARSIZE),
      .twiddle_rsc_0_11_ARLEN(twiddle_rsc_0_11_ARLEN),
      .twiddle_rsc_0_11_ARADDR(twiddle_rsc_0_11_ARADDR),
      .twiddle_rsc_0_11_ARID(twiddle_rsc_0_11_ARID),
      .twiddle_rsc_0_11_BREADY(twiddle_rsc_0_11_BREADY),
      .twiddle_rsc_0_11_BVALID(twiddle_rsc_0_11_BVALID),
      .twiddle_rsc_0_11_BUSER(twiddle_rsc_0_11_BUSER),
      .twiddle_rsc_0_11_BRESP(twiddle_rsc_0_11_BRESP),
      .twiddle_rsc_0_11_BID(twiddle_rsc_0_11_BID),
      .twiddle_rsc_0_11_WREADY(twiddle_rsc_0_11_WREADY),
      .twiddle_rsc_0_11_WVALID(twiddle_rsc_0_11_WVALID),
      .twiddle_rsc_0_11_WUSER(twiddle_rsc_0_11_WUSER),
      .twiddle_rsc_0_11_WLAST(twiddle_rsc_0_11_WLAST),
      .twiddle_rsc_0_11_WSTRB(twiddle_rsc_0_11_WSTRB),
      .twiddle_rsc_0_11_WDATA(twiddle_rsc_0_11_WDATA),
      .twiddle_rsc_0_11_AWREADY(twiddle_rsc_0_11_AWREADY),
      .twiddle_rsc_0_11_AWVALID(twiddle_rsc_0_11_AWVALID),
      .twiddle_rsc_0_11_AWUSER(twiddle_rsc_0_11_AWUSER),
      .twiddle_rsc_0_11_AWREGION(twiddle_rsc_0_11_AWREGION),
      .twiddle_rsc_0_11_AWQOS(twiddle_rsc_0_11_AWQOS),
      .twiddle_rsc_0_11_AWPROT(twiddle_rsc_0_11_AWPROT),
      .twiddle_rsc_0_11_AWCACHE(twiddle_rsc_0_11_AWCACHE),
      .twiddle_rsc_0_11_AWLOCK(twiddle_rsc_0_11_AWLOCK),
      .twiddle_rsc_0_11_AWBURST(twiddle_rsc_0_11_AWBURST),
      .twiddle_rsc_0_11_AWSIZE(twiddle_rsc_0_11_AWSIZE),
      .twiddle_rsc_0_11_AWLEN(twiddle_rsc_0_11_AWLEN),
      .twiddle_rsc_0_11_AWADDR(twiddle_rsc_0_11_AWADDR),
      .twiddle_rsc_0_11_AWID(twiddle_rsc_0_11_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_11_i_oswt(reg_twiddle_rsc_0_3_i_oswt_cse),
      .twiddle_rsc_0_11_i_wen_comp(twiddle_rsc_0_11_i_wen_comp),
      .twiddle_rsc_0_11_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_11_i_inst_twiddle_rsc_0_11_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_11_i_s_din_mxwt(twiddle_rsc_0_11_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_12_i peaseNTT_core_twiddle_rsc_0_12_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_12_s_tdone(twiddle_rsc_0_12_s_tdone),
      .twiddle_rsc_0_12_tr_write_done(twiddle_rsc_0_12_tr_write_done),
      .twiddle_rsc_0_12_RREADY(twiddle_rsc_0_12_RREADY),
      .twiddle_rsc_0_12_RVALID(twiddle_rsc_0_12_RVALID),
      .twiddle_rsc_0_12_RUSER(twiddle_rsc_0_12_RUSER),
      .twiddle_rsc_0_12_RLAST(twiddle_rsc_0_12_RLAST),
      .twiddle_rsc_0_12_RRESP(twiddle_rsc_0_12_RRESP),
      .twiddle_rsc_0_12_RDATA(twiddle_rsc_0_12_RDATA),
      .twiddle_rsc_0_12_RID(twiddle_rsc_0_12_RID),
      .twiddle_rsc_0_12_ARREADY(twiddle_rsc_0_12_ARREADY),
      .twiddle_rsc_0_12_ARVALID(twiddle_rsc_0_12_ARVALID),
      .twiddle_rsc_0_12_ARUSER(twiddle_rsc_0_12_ARUSER),
      .twiddle_rsc_0_12_ARREGION(twiddle_rsc_0_12_ARREGION),
      .twiddle_rsc_0_12_ARQOS(twiddle_rsc_0_12_ARQOS),
      .twiddle_rsc_0_12_ARPROT(twiddle_rsc_0_12_ARPROT),
      .twiddle_rsc_0_12_ARCACHE(twiddle_rsc_0_12_ARCACHE),
      .twiddle_rsc_0_12_ARLOCK(twiddle_rsc_0_12_ARLOCK),
      .twiddle_rsc_0_12_ARBURST(twiddle_rsc_0_12_ARBURST),
      .twiddle_rsc_0_12_ARSIZE(twiddle_rsc_0_12_ARSIZE),
      .twiddle_rsc_0_12_ARLEN(twiddle_rsc_0_12_ARLEN),
      .twiddle_rsc_0_12_ARADDR(twiddle_rsc_0_12_ARADDR),
      .twiddle_rsc_0_12_ARID(twiddle_rsc_0_12_ARID),
      .twiddle_rsc_0_12_BREADY(twiddle_rsc_0_12_BREADY),
      .twiddle_rsc_0_12_BVALID(twiddle_rsc_0_12_BVALID),
      .twiddle_rsc_0_12_BUSER(twiddle_rsc_0_12_BUSER),
      .twiddle_rsc_0_12_BRESP(twiddle_rsc_0_12_BRESP),
      .twiddle_rsc_0_12_BID(twiddle_rsc_0_12_BID),
      .twiddle_rsc_0_12_WREADY(twiddle_rsc_0_12_WREADY),
      .twiddle_rsc_0_12_WVALID(twiddle_rsc_0_12_WVALID),
      .twiddle_rsc_0_12_WUSER(twiddle_rsc_0_12_WUSER),
      .twiddle_rsc_0_12_WLAST(twiddle_rsc_0_12_WLAST),
      .twiddle_rsc_0_12_WSTRB(twiddle_rsc_0_12_WSTRB),
      .twiddle_rsc_0_12_WDATA(twiddle_rsc_0_12_WDATA),
      .twiddle_rsc_0_12_AWREADY(twiddle_rsc_0_12_AWREADY),
      .twiddle_rsc_0_12_AWVALID(twiddle_rsc_0_12_AWVALID),
      .twiddle_rsc_0_12_AWUSER(twiddle_rsc_0_12_AWUSER),
      .twiddle_rsc_0_12_AWREGION(twiddle_rsc_0_12_AWREGION),
      .twiddle_rsc_0_12_AWQOS(twiddle_rsc_0_12_AWQOS),
      .twiddle_rsc_0_12_AWPROT(twiddle_rsc_0_12_AWPROT),
      .twiddle_rsc_0_12_AWCACHE(twiddle_rsc_0_12_AWCACHE),
      .twiddle_rsc_0_12_AWLOCK(twiddle_rsc_0_12_AWLOCK),
      .twiddle_rsc_0_12_AWBURST(twiddle_rsc_0_12_AWBURST),
      .twiddle_rsc_0_12_AWSIZE(twiddle_rsc_0_12_AWSIZE),
      .twiddle_rsc_0_12_AWLEN(twiddle_rsc_0_12_AWLEN),
      .twiddle_rsc_0_12_AWADDR(twiddle_rsc_0_12_AWADDR),
      .twiddle_rsc_0_12_AWID(twiddle_rsc_0_12_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_12_i_oswt(reg_twiddle_rsc_0_4_i_oswt_cse),
      .twiddle_rsc_0_12_i_wen_comp(twiddle_rsc_0_12_i_wen_comp),
      .twiddle_rsc_0_12_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_12_i_inst_twiddle_rsc_0_12_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_12_i_s_din_mxwt(twiddle_rsc_0_12_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_13_i peaseNTT_core_twiddle_rsc_0_13_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_13_s_tdone(twiddle_rsc_0_13_s_tdone),
      .twiddle_rsc_0_13_tr_write_done(twiddle_rsc_0_13_tr_write_done),
      .twiddle_rsc_0_13_RREADY(twiddle_rsc_0_13_RREADY),
      .twiddle_rsc_0_13_RVALID(twiddle_rsc_0_13_RVALID),
      .twiddle_rsc_0_13_RUSER(twiddle_rsc_0_13_RUSER),
      .twiddle_rsc_0_13_RLAST(twiddle_rsc_0_13_RLAST),
      .twiddle_rsc_0_13_RRESP(twiddle_rsc_0_13_RRESP),
      .twiddle_rsc_0_13_RDATA(twiddle_rsc_0_13_RDATA),
      .twiddle_rsc_0_13_RID(twiddle_rsc_0_13_RID),
      .twiddle_rsc_0_13_ARREADY(twiddle_rsc_0_13_ARREADY),
      .twiddle_rsc_0_13_ARVALID(twiddle_rsc_0_13_ARVALID),
      .twiddle_rsc_0_13_ARUSER(twiddle_rsc_0_13_ARUSER),
      .twiddle_rsc_0_13_ARREGION(twiddle_rsc_0_13_ARREGION),
      .twiddle_rsc_0_13_ARQOS(twiddle_rsc_0_13_ARQOS),
      .twiddle_rsc_0_13_ARPROT(twiddle_rsc_0_13_ARPROT),
      .twiddle_rsc_0_13_ARCACHE(twiddle_rsc_0_13_ARCACHE),
      .twiddle_rsc_0_13_ARLOCK(twiddle_rsc_0_13_ARLOCK),
      .twiddle_rsc_0_13_ARBURST(twiddle_rsc_0_13_ARBURST),
      .twiddle_rsc_0_13_ARSIZE(twiddle_rsc_0_13_ARSIZE),
      .twiddle_rsc_0_13_ARLEN(twiddle_rsc_0_13_ARLEN),
      .twiddle_rsc_0_13_ARADDR(twiddle_rsc_0_13_ARADDR),
      .twiddle_rsc_0_13_ARID(twiddle_rsc_0_13_ARID),
      .twiddle_rsc_0_13_BREADY(twiddle_rsc_0_13_BREADY),
      .twiddle_rsc_0_13_BVALID(twiddle_rsc_0_13_BVALID),
      .twiddle_rsc_0_13_BUSER(twiddle_rsc_0_13_BUSER),
      .twiddle_rsc_0_13_BRESP(twiddle_rsc_0_13_BRESP),
      .twiddle_rsc_0_13_BID(twiddle_rsc_0_13_BID),
      .twiddle_rsc_0_13_WREADY(twiddle_rsc_0_13_WREADY),
      .twiddle_rsc_0_13_WVALID(twiddle_rsc_0_13_WVALID),
      .twiddle_rsc_0_13_WUSER(twiddle_rsc_0_13_WUSER),
      .twiddle_rsc_0_13_WLAST(twiddle_rsc_0_13_WLAST),
      .twiddle_rsc_0_13_WSTRB(twiddle_rsc_0_13_WSTRB),
      .twiddle_rsc_0_13_WDATA(twiddle_rsc_0_13_WDATA),
      .twiddle_rsc_0_13_AWREADY(twiddle_rsc_0_13_AWREADY),
      .twiddle_rsc_0_13_AWVALID(twiddle_rsc_0_13_AWVALID),
      .twiddle_rsc_0_13_AWUSER(twiddle_rsc_0_13_AWUSER),
      .twiddle_rsc_0_13_AWREGION(twiddle_rsc_0_13_AWREGION),
      .twiddle_rsc_0_13_AWQOS(twiddle_rsc_0_13_AWQOS),
      .twiddle_rsc_0_13_AWPROT(twiddle_rsc_0_13_AWPROT),
      .twiddle_rsc_0_13_AWCACHE(twiddle_rsc_0_13_AWCACHE),
      .twiddle_rsc_0_13_AWLOCK(twiddle_rsc_0_13_AWLOCK),
      .twiddle_rsc_0_13_AWBURST(twiddle_rsc_0_13_AWBURST),
      .twiddle_rsc_0_13_AWSIZE(twiddle_rsc_0_13_AWSIZE),
      .twiddle_rsc_0_13_AWLEN(twiddle_rsc_0_13_AWLEN),
      .twiddle_rsc_0_13_AWADDR(twiddle_rsc_0_13_AWADDR),
      .twiddle_rsc_0_13_AWID(twiddle_rsc_0_13_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_13_i_oswt(reg_twiddle_rsc_0_5_i_oswt_cse),
      .twiddle_rsc_0_13_i_wen_comp(twiddle_rsc_0_13_i_wen_comp),
      .twiddle_rsc_0_13_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_13_i_inst_twiddle_rsc_0_13_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_13_i_s_din_mxwt(twiddle_rsc_0_13_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_14_i peaseNTT_core_twiddle_rsc_0_14_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_14_s_tdone(twiddle_rsc_0_14_s_tdone),
      .twiddle_rsc_0_14_tr_write_done(twiddle_rsc_0_14_tr_write_done),
      .twiddle_rsc_0_14_RREADY(twiddle_rsc_0_14_RREADY),
      .twiddle_rsc_0_14_RVALID(twiddle_rsc_0_14_RVALID),
      .twiddle_rsc_0_14_RUSER(twiddle_rsc_0_14_RUSER),
      .twiddle_rsc_0_14_RLAST(twiddle_rsc_0_14_RLAST),
      .twiddle_rsc_0_14_RRESP(twiddle_rsc_0_14_RRESP),
      .twiddle_rsc_0_14_RDATA(twiddle_rsc_0_14_RDATA),
      .twiddle_rsc_0_14_RID(twiddle_rsc_0_14_RID),
      .twiddle_rsc_0_14_ARREADY(twiddle_rsc_0_14_ARREADY),
      .twiddle_rsc_0_14_ARVALID(twiddle_rsc_0_14_ARVALID),
      .twiddle_rsc_0_14_ARUSER(twiddle_rsc_0_14_ARUSER),
      .twiddle_rsc_0_14_ARREGION(twiddle_rsc_0_14_ARREGION),
      .twiddle_rsc_0_14_ARQOS(twiddle_rsc_0_14_ARQOS),
      .twiddle_rsc_0_14_ARPROT(twiddle_rsc_0_14_ARPROT),
      .twiddle_rsc_0_14_ARCACHE(twiddle_rsc_0_14_ARCACHE),
      .twiddle_rsc_0_14_ARLOCK(twiddle_rsc_0_14_ARLOCK),
      .twiddle_rsc_0_14_ARBURST(twiddle_rsc_0_14_ARBURST),
      .twiddle_rsc_0_14_ARSIZE(twiddle_rsc_0_14_ARSIZE),
      .twiddle_rsc_0_14_ARLEN(twiddle_rsc_0_14_ARLEN),
      .twiddle_rsc_0_14_ARADDR(twiddle_rsc_0_14_ARADDR),
      .twiddle_rsc_0_14_ARID(twiddle_rsc_0_14_ARID),
      .twiddle_rsc_0_14_BREADY(twiddle_rsc_0_14_BREADY),
      .twiddle_rsc_0_14_BVALID(twiddle_rsc_0_14_BVALID),
      .twiddle_rsc_0_14_BUSER(twiddle_rsc_0_14_BUSER),
      .twiddle_rsc_0_14_BRESP(twiddle_rsc_0_14_BRESP),
      .twiddle_rsc_0_14_BID(twiddle_rsc_0_14_BID),
      .twiddle_rsc_0_14_WREADY(twiddle_rsc_0_14_WREADY),
      .twiddle_rsc_0_14_WVALID(twiddle_rsc_0_14_WVALID),
      .twiddle_rsc_0_14_WUSER(twiddle_rsc_0_14_WUSER),
      .twiddle_rsc_0_14_WLAST(twiddle_rsc_0_14_WLAST),
      .twiddle_rsc_0_14_WSTRB(twiddle_rsc_0_14_WSTRB),
      .twiddle_rsc_0_14_WDATA(twiddle_rsc_0_14_WDATA),
      .twiddle_rsc_0_14_AWREADY(twiddle_rsc_0_14_AWREADY),
      .twiddle_rsc_0_14_AWVALID(twiddle_rsc_0_14_AWVALID),
      .twiddle_rsc_0_14_AWUSER(twiddle_rsc_0_14_AWUSER),
      .twiddle_rsc_0_14_AWREGION(twiddle_rsc_0_14_AWREGION),
      .twiddle_rsc_0_14_AWQOS(twiddle_rsc_0_14_AWQOS),
      .twiddle_rsc_0_14_AWPROT(twiddle_rsc_0_14_AWPROT),
      .twiddle_rsc_0_14_AWCACHE(twiddle_rsc_0_14_AWCACHE),
      .twiddle_rsc_0_14_AWLOCK(twiddle_rsc_0_14_AWLOCK),
      .twiddle_rsc_0_14_AWBURST(twiddle_rsc_0_14_AWBURST),
      .twiddle_rsc_0_14_AWSIZE(twiddle_rsc_0_14_AWSIZE),
      .twiddle_rsc_0_14_AWLEN(twiddle_rsc_0_14_AWLEN),
      .twiddle_rsc_0_14_AWADDR(twiddle_rsc_0_14_AWADDR),
      .twiddle_rsc_0_14_AWID(twiddle_rsc_0_14_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_14_i_oswt(reg_twiddle_rsc_0_6_i_oswt_cse),
      .twiddle_rsc_0_14_i_wen_comp(twiddle_rsc_0_14_i_wen_comp),
      .twiddle_rsc_0_14_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_14_i_inst_twiddle_rsc_0_14_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_14_i_s_din_mxwt(twiddle_rsc_0_14_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_rsc_0_15_i peaseNTT_core_twiddle_rsc_0_15_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_0_15_s_tdone(twiddle_rsc_0_15_s_tdone),
      .twiddle_rsc_0_15_tr_write_done(twiddle_rsc_0_15_tr_write_done),
      .twiddle_rsc_0_15_RREADY(twiddle_rsc_0_15_RREADY),
      .twiddle_rsc_0_15_RVALID(twiddle_rsc_0_15_RVALID),
      .twiddle_rsc_0_15_RUSER(twiddle_rsc_0_15_RUSER),
      .twiddle_rsc_0_15_RLAST(twiddle_rsc_0_15_RLAST),
      .twiddle_rsc_0_15_RRESP(twiddle_rsc_0_15_RRESP),
      .twiddle_rsc_0_15_RDATA(twiddle_rsc_0_15_RDATA),
      .twiddle_rsc_0_15_RID(twiddle_rsc_0_15_RID),
      .twiddle_rsc_0_15_ARREADY(twiddle_rsc_0_15_ARREADY),
      .twiddle_rsc_0_15_ARVALID(twiddle_rsc_0_15_ARVALID),
      .twiddle_rsc_0_15_ARUSER(twiddle_rsc_0_15_ARUSER),
      .twiddle_rsc_0_15_ARREGION(twiddle_rsc_0_15_ARREGION),
      .twiddle_rsc_0_15_ARQOS(twiddle_rsc_0_15_ARQOS),
      .twiddle_rsc_0_15_ARPROT(twiddle_rsc_0_15_ARPROT),
      .twiddle_rsc_0_15_ARCACHE(twiddle_rsc_0_15_ARCACHE),
      .twiddle_rsc_0_15_ARLOCK(twiddle_rsc_0_15_ARLOCK),
      .twiddle_rsc_0_15_ARBURST(twiddle_rsc_0_15_ARBURST),
      .twiddle_rsc_0_15_ARSIZE(twiddle_rsc_0_15_ARSIZE),
      .twiddle_rsc_0_15_ARLEN(twiddle_rsc_0_15_ARLEN),
      .twiddle_rsc_0_15_ARADDR(twiddle_rsc_0_15_ARADDR),
      .twiddle_rsc_0_15_ARID(twiddle_rsc_0_15_ARID),
      .twiddle_rsc_0_15_BREADY(twiddle_rsc_0_15_BREADY),
      .twiddle_rsc_0_15_BVALID(twiddle_rsc_0_15_BVALID),
      .twiddle_rsc_0_15_BUSER(twiddle_rsc_0_15_BUSER),
      .twiddle_rsc_0_15_BRESP(twiddle_rsc_0_15_BRESP),
      .twiddle_rsc_0_15_BID(twiddle_rsc_0_15_BID),
      .twiddle_rsc_0_15_WREADY(twiddle_rsc_0_15_WREADY),
      .twiddle_rsc_0_15_WVALID(twiddle_rsc_0_15_WVALID),
      .twiddle_rsc_0_15_WUSER(twiddle_rsc_0_15_WUSER),
      .twiddle_rsc_0_15_WLAST(twiddle_rsc_0_15_WLAST),
      .twiddle_rsc_0_15_WSTRB(twiddle_rsc_0_15_WSTRB),
      .twiddle_rsc_0_15_WDATA(twiddle_rsc_0_15_WDATA),
      .twiddle_rsc_0_15_AWREADY(twiddle_rsc_0_15_AWREADY),
      .twiddle_rsc_0_15_AWVALID(twiddle_rsc_0_15_AWVALID),
      .twiddle_rsc_0_15_AWUSER(twiddle_rsc_0_15_AWUSER),
      .twiddle_rsc_0_15_AWREGION(twiddle_rsc_0_15_AWREGION),
      .twiddle_rsc_0_15_AWQOS(twiddle_rsc_0_15_AWQOS),
      .twiddle_rsc_0_15_AWPROT(twiddle_rsc_0_15_AWPROT),
      .twiddle_rsc_0_15_AWCACHE(twiddle_rsc_0_15_AWCACHE),
      .twiddle_rsc_0_15_AWLOCK(twiddle_rsc_0_15_AWLOCK),
      .twiddle_rsc_0_15_AWBURST(twiddle_rsc_0_15_AWBURST),
      .twiddle_rsc_0_15_AWSIZE(twiddle_rsc_0_15_AWSIZE),
      .twiddle_rsc_0_15_AWLEN(twiddle_rsc_0_15_AWLEN),
      .twiddle_rsc_0_15_AWADDR(twiddle_rsc_0_15_AWADDR),
      .twiddle_rsc_0_15_AWID(twiddle_rsc_0_15_AWID),
      .core_wen(core_wen),
      .twiddle_rsc_0_15_i_oswt(reg_twiddle_rsc_0_7_i_oswt_cse),
      .twiddle_rsc_0_15_i_wen_comp(twiddle_rsc_0_15_i_wen_comp),
      .twiddle_rsc_0_15_i_s_raddr_core(nl_peaseNTT_core_twiddle_rsc_0_15_i_inst_twiddle_rsc_0_15_i_s_raddr_core[5:0]),
      .twiddle_rsc_0_15_i_s_din_mxwt(twiddle_rsc_0_15_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_0_i peaseNTT_core_twiddle_h_rsc_0_0_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_0_s_tdone(twiddle_h_rsc_0_0_s_tdone),
      .twiddle_h_rsc_0_0_tr_write_done(twiddle_h_rsc_0_0_tr_write_done),
      .twiddle_h_rsc_0_0_RREADY(twiddle_h_rsc_0_0_RREADY),
      .twiddle_h_rsc_0_0_RVALID(twiddle_h_rsc_0_0_RVALID),
      .twiddle_h_rsc_0_0_RUSER(twiddle_h_rsc_0_0_RUSER),
      .twiddle_h_rsc_0_0_RLAST(twiddle_h_rsc_0_0_RLAST),
      .twiddle_h_rsc_0_0_RRESP(twiddle_h_rsc_0_0_RRESP),
      .twiddle_h_rsc_0_0_RDATA(twiddle_h_rsc_0_0_RDATA),
      .twiddle_h_rsc_0_0_RID(twiddle_h_rsc_0_0_RID),
      .twiddle_h_rsc_0_0_ARREADY(twiddle_h_rsc_0_0_ARREADY),
      .twiddle_h_rsc_0_0_ARVALID(twiddle_h_rsc_0_0_ARVALID),
      .twiddle_h_rsc_0_0_ARUSER(twiddle_h_rsc_0_0_ARUSER),
      .twiddle_h_rsc_0_0_ARREGION(twiddle_h_rsc_0_0_ARREGION),
      .twiddle_h_rsc_0_0_ARQOS(twiddle_h_rsc_0_0_ARQOS),
      .twiddle_h_rsc_0_0_ARPROT(twiddle_h_rsc_0_0_ARPROT),
      .twiddle_h_rsc_0_0_ARCACHE(twiddle_h_rsc_0_0_ARCACHE),
      .twiddle_h_rsc_0_0_ARLOCK(twiddle_h_rsc_0_0_ARLOCK),
      .twiddle_h_rsc_0_0_ARBURST(twiddle_h_rsc_0_0_ARBURST),
      .twiddle_h_rsc_0_0_ARSIZE(twiddle_h_rsc_0_0_ARSIZE),
      .twiddle_h_rsc_0_0_ARLEN(twiddle_h_rsc_0_0_ARLEN),
      .twiddle_h_rsc_0_0_ARADDR(twiddle_h_rsc_0_0_ARADDR),
      .twiddle_h_rsc_0_0_ARID(twiddle_h_rsc_0_0_ARID),
      .twiddle_h_rsc_0_0_BREADY(twiddle_h_rsc_0_0_BREADY),
      .twiddle_h_rsc_0_0_BVALID(twiddle_h_rsc_0_0_BVALID),
      .twiddle_h_rsc_0_0_BUSER(twiddle_h_rsc_0_0_BUSER),
      .twiddle_h_rsc_0_0_BRESP(twiddle_h_rsc_0_0_BRESP),
      .twiddle_h_rsc_0_0_BID(twiddle_h_rsc_0_0_BID),
      .twiddle_h_rsc_0_0_WREADY(twiddle_h_rsc_0_0_WREADY),
      .twiddle_h_rsc_0_0_WVALID(twiddle_h_rsc_0_0_WVALID),
      .twiddle_h_rsc_0_0_WUSER(twiddle_h_rsc_0_0_WUSER),
      .twiddle_h_rsc_0_0_WLAST(twiddle_h_rsc_0_0_WLAST),
      .twiddle_h_rsc_0_0_WSTRB(twiddle_h_rsc_0_0_WSTRB),
      .twiddle_h_rsc_0_0_WDATA(twiddle_h_rsc_0_0_WDATA),
      .twiddle_h_rsc_0_0_AWREADY(twiddle_h_rsc_0_0_AWREADY),
      .twiddle_h_rsc_0_0_AWVALID(twiddle_h_rsc_0_0_AWVALID),
      .twiddle_h_rsc_0_0_AWUSER(twiddle_h_rsc_0_0_AWUSER),
      .twiddle_h_rsc_0_0_AWREGION(twiddle_h_rsc_0_0_AWREGION),
      .twiddle_h_rsc_0_0_AWQOS(twiddle_h_rsc_0_0_AWQOS),
      .twiddle_h_rsc_0_0_AWPROT(twiddle_h_rsc_0_0_AWPROT),
      .twiddle_h_rsc_0_0_AWCACHE(twiddle_h_rsc_0_0_AWCACHE),
      .twiddle_h_rsc_0_0_AWLOCK(twiddle_h_rsc_0_0_AWLOCK),
      .twiddle_h_rsc_0_0_AWBURST(twiddle_h_rsc_0_0_AWBURST),
      .twiddle_h_rsc_0_0_AWSIZE(twiddle_h_rsc_0_0_AWSIZE),
      .twiddle_h_rsc_0_0_AWLEN(twiddle_h_rsc_0_0_AWLEN),
      .twiddle_h_rsc_0_0_AWADDR(twiddle_h_rsc_0_0_AWADDR),
      .twiddle_h_rsc_0_0_AWID(twiddle_h_rsc_0_0_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_0_i_oswt(reg_twiddle_rsc_0_0_i_oswt_cse),
      .twiddle_h_rsc_0_0_i_wen_comp(twiddle_h_rsc_0_0_i_wen_comp),
      .twiddle_h_rsc_0_0_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_0_i_inst_twiddle_h_rsc_0_0_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_0_i_s_din_mxwt(twiddle_h_rsc_0_0_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_1_i peaseNTT_core_twiddle_h_rsc_0_1_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_1_s_tdone(twiddle_h_rsc_0_1_s_tdone),
      .twiddle_h_rsc_0_1_tr_write_done(twiddle_h_rsc_0_1_tr_write_done),
      .twiddle_h_rsc_0_1_RREADY(twiddle_h_rsc_0_1_RREADY),
      .twiddle_h_rsc_0_1_RVALID(twiddle_h_rsc_0_1_RVALID),
      .twiddle_h_rsc_0_1_RUSER(twiddle_h_rsc_0_1_RUSER),
      .twiddle_h_rsc_0_1_RLAST(twiddle_h_rsc_0_1_RLAST),
      .twiddle_h_rsc_0_1_RRESP(twiddle_h_rsc_0_1_RRESP),
      .twiddle_h_rsc_0_1_RDATA(twiddle_h_rsc_0_1_RDATA),
      .twiddle_h_rsc_0_1_RID(twiddle_h_rsc_0_1_RID),
      .twiddle_h_rsc_0_1_ARREADY(twiddle_h_rsc_0_1_ARREADY),
      .twiddle_h_rsc_0_1_ARVALID(twiddle_h_rsc_0_1_ARVALID),
      .twiddle_h_rsc_0_1_ARUSER(twiddle_h_rsc_0_1_ARUSER),
      .twiddle_h_rsc_0_1_ARREGION(twiddle_h_rsc_0_1_ARREGION),
      .twiddle_h_rsc_0_1_ARQOS(twiddle_h_rsc_0_1_ARQOS),
      .twiddle_h_rsc_0_1_ARPROT(twiddle_h_rsc_0_1_ARPROT),
      .twiddle_h_rsc_0_1_ARCACHE(twiddle_h_rsc_0_1_ARCACHE),
      .twiddle_h_rsc_0_1_ARLOCK(twiddle_h_rsc_0_1_ARLOCK),
      .twiddle_h_rsc_0_1_ARBURST(twiddle_h_rsc_0_1_ARBURST),
      .twiddle_h_rsc_0_1_ARSIZE(twiddle_h_rsc_0_1_ARSIZE),
      .twiddle_h_rsc_0_1_ARLEN(twiddle_h_rsc_0_1_ARLEN),
      .twiddle_h_rsc_0_1_ARADDR(twiddle_h_rsc_0_1_ARADDR),
      .twiddle_h_rsc_0_1_ARID(twiddle_h_rsc_0_1_ARID),
      .twiddle_h_rsc_0_1_BREADY(twiddle_h_rsc_0_1_BREADY),
      .twiddle_h_rsc_0_1_BVALID(twiddle_h_rsc_0_1_BVALID),
      .twiddle_h_rsc_0_1_BUSER(twiddle_h_rsc_0_1_BUSER),
      .twiddle_h_rsc_0_1_BRESP(twiddle_h_rsc_0_1_BRESP),
      .twiddle_h_rsc_0_1_BID(twiddle_h_rsc_0_1_BID),
      .twiddle_h_rsc_0_1_WREADY(twiddle_h_rsc_0_1_WREADY),
      .twiddle_h_rsc_0_1_WVALID(twiddle_h_rsc_0_1_WVALID),
      .twiddle_h_rsc_0_1_WUSER(twiddle_h_rsc_0_1_WUSER),
      .twiddle_h_rsc_0_1_WLAST(twiddle_h_rsc_0_1_WLAST),
      .twiddle_h_rsc_0_1_WSTRB(twiddle_h_rsc_0_1_WSTRB),
      .twiddle_h_rsc_0_1_WDATA(twiddle_h_rsc_0_1_WDATA),
      .twiddle_h_rsc_0_1_AWREADY(twiddle_h_rsc_0_1_AWREADY),
      .twiddle_h_rsc_0_1_AWVALID(twiddle_h_rsc_0_1_AWVALID),
      .twiddle_h_rsc_0_1_AWUSER(twiddle_h_rsc_0_1_AWUSER),
      .twiddle_h_rsc_0_1_AWREGION(twiddle_h_rsc_0_1_AWREGION),
      .twiddle_h_rsc_0_1_AWQOS(twiddle_h_rsc_0_1_AWQOS),
      .twiddle_h_rsc_0_1_AWPROT(twiddle_h_rsc_0_1_AWPROT),
      .twiddle_h_rsc_0_1_AWCACHE(twiddle_h_rsc_0_1_AWCACHE),
      .twiddle_h_rsc_0_1_AWLOCK(twiddle_h_rsc_0_1_AWLOCK),
      .twiddle_h_rsc_0_1_AWBURST(twiddle_h_rsc_0_1_AWBURST),
      .twiddle_h_rsc_0_1_AWSIZE(twiddle_h_rsc_0_1_AWSIZE),
      .twiddle_h_rsc_0_1_AWLEN(twiddle_h_rsc_0_1_AWLEN),
      .twiddle_h_rsc_0_1_AWADDR(twiddle_h_rsc_0_1_AWADDR),
      .twiddle_h_rsc_0_1_AWID(twiddle_h_rsc_0_1_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_1_i_oswt(reg_twiddle_rsc_0_1_i_oswt_cse),
      .twiddle_h_rsc_0_1_i_wen_comp(twiddle_h_rsc_0_1_i_wen_comp),
      .twiddle_h_rsc_0_1_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_1_i_inst_twiddle_h_rsc_0_1_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_1_i_s_din_mxwt(twiddle_h_rsc_0_1_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_2_i peaseNTT_core_twiddle_h_rsc_0_2_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_2_s_tdone(twiddle_h_rsc_0_2_s_tdone),
      .twiddle_h_rsc_0_2_tr_write_done(twiddle_h_rsc_0_2_tr_write_done),
      .twiddle_h_rsc_0_2_RREADY(twiddle_h_rsc_0_2_RREADY),
      .twiddle_h_rsc_0_2_RVALID(twiddle_h_rsc_0_2_RVALID),
      .twiddle_h_rsc_0_2_RUSER(twiddle_h_rsc_0_2_RUSER),
      .twiddle_h_rsc_0_2_RLAST(twiddle_h_rsc_0_2_RLAST),
      .twiddle_h_rsc_0_2_RRESP(twiddle_h_rsc_0_2_RRESP),
      .twiddle_h_rsc_0_2_RDATA(twiddle_h_rsc_0_2_RDATA),
      .twiddle_h_rsc_0_2_RID(twiddle_h_rsc_0_2_RID),
      .twiddle_h_rsc_0_2_ARREADY(twiddle_h_rsc_0_2_ARREADY),
      .twiddle_h_rsc_0_2_ARVALID(twiddle_h_rsc_0_2_ARVALID),
      .twiddle_h_rsc_0_2_ARUSER(twiddle_h_rsc_0_2_ARUSER),
      .twiddle_h_rsc_0_2_ARREGION(twiddle_h_rsc_0_2_ARREGION),
      .twiddle_h_rsc_0_2_ARQOS(twiddle_h_rsc_0_2_ARQOS),
      .twiddle_h_rsc_0_2_ARPROT(twiddle_h_rsc_0_2_ARPROT),
      .twiddle_h_rsc_0_2_ARCACHE(twiddle_h_rsc_0_2_ARCACHE),
      .twiddle_h_rsc_0_2_ARLOCK(twiddle_h_rsc_0_2_ARLOCK),
      .twiddle_h_rsc_0_2_ARBURST(twiddle_h_rsc_0_2_ARBURST),
      .twiddle_h_rsc_0_2_ARSIZE(twiddle_h_rsc_0_2_ARSIZE),
      .twiddle_h_rsc_0_2_ARLEN(twiddle_h_rsc_0_2_ARLEN),
      .twiddle_h_rsc_0_2_ARADDR(twiddle_h_rsc_0_2_ARADDR),
      .twiddle_h_rsc_0_2_ARID(twiddle_h_rsc_0_2_ARID),
      .twiddle_h_rsc_0_2_BREADY(twiddle_h_rsc_0_2_BREADY),
      .twiddle_h_rsc_0_2_BVALID(twiddle_h_rsc_0_2_BVALID),
      .twiddle_h_rsc_0_2_BUSER(twiddle_h_rsc_0_2_BUSER),
      .twiddle_h_rsc_0_2_BRESP(twiddle_h_rsc_0_2_BRESP),
      .twiddle_h_rsc_0_2_BID(twiddle_h_rsc_0_2_BID),
      .twiddle_h_rsc_0_2_WREADY(twiddle_h_rsc_0_2_WREADY),
      .twiddle_h_rsc_0_2_WVALID(twiddle_h_rsc_0_2_WVALID),
      .twiddle_h_rsc_0_2_WUSER(twiddle_h_rsc_0_2_WUSER),
      .twiddle_h_rsc_0_2_WLAST(twiddle_h_rsc_0_2_WLAST),
      .twiddle_h_rsc_0_2_WSTRB(twiddle_h_rsc_0_2_WSTRB),
      .twiddle_h_rsc_0_2_WDATA(twiddle_h_rsc_0_2_WDATA),
      .twiddle_h_rsc_0_2_AWREADY(twiddle_h_rsc_0_2_AWREADY),
      .twiddle_h_rsc_0_2_AWVALID(twiddle_h_rsc_0_2_AWVALID),
      .twiddle_h_rsc_0_2_AWUSER(twiddle_h_rsc_0_2_AWUSER),
      .twiddle_h_rsc_0_2_AWREGION(twiddle_h_rsc_0_2_AWREGION),
      .twiddle_h_rsc_0_2_AWQOS(twiddle_h_rsc_0_2_AWQOS),
      .twiddle_h_rsc_0_2_AWPROT(twiddle_h_rsc_0_2_AWPROT),
      .twiddle_h_rsc_0_2_AWCACHE(twiddle_h_rsc_0_2_AWCACHE),
      .twiddle_h_rsc_0_2_AWLOCK(twiddle_h_rsc_0_2_AWLOCK),
      .twiddle_h_rsc_0_2_AWBURST(twiddle_h_rsc_0_2_AWBURST),
      .twiddle_h_rsc_0_2_AWSIZE(twiddle_h_rsc_0_2_AWSIZE),
      .twiddle_h_rsc_0_2_AWLEN(twiddle_h_rsc_0_2_AWLEN),
      .twiddle_h_rsc_0_2_AWADDR(twiddle_h_rsc_0_2_AWADDR),
      .twiddle_h_rsc_0_2_AWID(twiddle_h_rsc_0_2_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_2_i_oswt(reg_twiddle_rsc_0_2_i_oswt_cse),
      .twiddle_h_rsc_0_2_i_wen_comp(twiddle_h_rsc_0_2_i_wen_comp),
      .twiddle_h_rsc_0_2_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_2_i_inst_twiddle_h_rsc_0_2_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_2_i_s_din_mxwt(twiddle_h_rsc_0_2_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_3_i peaseNTT_core_twiddle_h_rsc_0_3_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_3_s_tdone(twiddle_h_rsc_0_3_s_tdone),
      .twiddle_h_rsc_0_3_tr_write_done(twiddle_h_rsc_0_3_tr_write_done),
      .twiddle_h_rsc_0_3_RREADY(twiddle_h_rsc_0_3_RREADY),
      .twiddle_h_rsc_0_3_RVALID(twiddle_h_rsc_0_3_RVALID),
      .twiddle_h_rsc_0_3_RUSER(twiddle_h_rsc_0_3_RUSER),
      .twiddle_h_rsc_0_3_RLAST(twiddle_h_rsc_0_3_RLAST),
      .twiddle_h_rsc_0_3_RRESP(twiddle_h_rsc_0_3_RRESP),
      .twiddle_h_rsc_0_3_RDATA(twiddle_h_rsc_0_3_RDATA),
      .twiddle_h_rsc_0_3_RID(twiddle_h_rsc_0_3_RID),
      .twiddle_h_rsc_0_3_ARREADY(twiddle_h_rsc_0_3_ARREADY),
      .twiddle_h_rsc_0_3_ARVALID(twiddle_h_rsc_0_3_ARVALID),
      .twiddle_h_rsc_0_3_ARUSER(twiddle_h_rsc_0_3_ARUSER),
      .twiddle_h_rsc_0_3_ARREGION(twiddle_h_rsc_0_3_ARREGION),
      .twiddle_h_rsc_0_3_ARQOS(twiddle_h_rsc_0_3_ARQOS),
      .twiddle_h_rsc_0_3_ARPROT(twiddle_h_rsc_0_3_ARPROT),
      .twiddle_h_rsc_0_3_ARCACHE(twiddle_h_rsc_0_3_ARCACHE),
      .twiddle_h_rsc_0_3_ARLOCK(twiddle_h_rsc_0_3_ARLOCK),
      .twiddle_h_rsc_0_3_ARBURST(twiddle_h_rsc_0_3_ARBURST),
      .twiddle_h_rsc_0_3_ARSIZE(twiddle_h_rsc_0_3_ARSIZE),
      .twiddle_h_rsc_0_3_ARLEN(twiddle_h_rsc_0_3_ARLEN),
      .twiddle_h_rsc_0_3_ARADDR(twiddle_h_rsc_0_3_ARADDR),
      .twiddle_h_rsc_0_3_ARID(twiddle_h_rsc_0_3_ARID),
      .twiddle_h_rsc_0_3_BREADY(twiddle_h_rsc_0_3_BREADY),
      .twiddle_h_rsc_0_3_BVALID(twiddle_h_rsc_0_3_BVALID),
      .twiddle_h_rsc_0_3_BUSER(twiddle_h_rsc_0_3_BUSER),
      .twiddle_h_rsc_0_3_BRESP(twiddle_h_rsc_0_3_BRESP),
      .twiddle_h_rsc_0_3_BID(twiddle_h_rsc_0_3_BID),
      .twiddle_h_rsc_0_3_WREADY(twiddle_h_rsc_0_3_WREADY),
      .twiddle_h_rsc_0_3_WVALID(twiddle_h_rsc_0_3_WVALID),
      .twiddle_h_rsc_0_3_WUSER(twiddle_h_rsc_0_3_WUSER),
      .twiddle_h_rsc_0_3_WLAST(twiddle_h_rsc_0_3_WLAST),
      .twiddle_h_rsc_0_3_WSTRB(twiddle_h_rsc_0_3_WSTRB),
      .twiddle_h_rsc_0_3_WDATA(twiddle_h_rsc_0_3_WDATA),
      .twiddle_h_rsc_0_3_AWREADY(twiddle_h_rsc_0_3_AWREADY),
      .twiddle_h_rsc_0_3_AWVALID(twiddle_h_rsc_0_3_AWVALID),
      .twiddle_h_rsc_0_3_AWUSER(twiddle_h_rsc_0_3_AWUSER),
      .twiddle_h_rsc_0_3_AWREGION(twiddle_h_rsc_0_3_AWREGION),
      .twiddle_h_rsc_0_3_AWQOS(twiddle_h_rsc_0_3_AWQOS),
      .twiddle_h_rsc_0_3_AWPROT(twiddle_h_rsc_0_3_AWPROT),
      .twiddle_h_rsc_0_3_AWCACHE(twiddle_h_rsc_0_3_AWCACHE),
      .twiddle_h_rsc_0_3_AWLOCK(twiddle_h_rsc_0_3_AWLOCK),
      .twiddle_h_rsc_0_3_AWBURST(twiddle_h_rsc_0_3_AWBURST),
      .twiddle_h_rsc_0_3_AWSIZE(twiddle_h_rsc_0_3_AWSIZE),
      .twiddle_h_rsc_0_3_AWLEN(twiddle_h_rsc_0_3_AWLEN),
      .twiddle_h_rsc_0_3_AWADDR(twiddle_h_rsc_0_3_AWADDR),
      .twiddle_h_rsc_0_3_AWID(twiddle_h_rsc_0_3_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_3_i_oswt(reg_twiddle_rsc_0_3_i_oswt_cse),
      .twiddle_h_rsc_0_3_i_wen_comp(twiddle_h_rsc_0_3_i_wen_comp),
      .twiddle_h_rsc_0_3_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_3_i_inst_twiddle_h_rsc_0_3_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_3_i_s_din_mxwt(twiddle_h_rsc_0_3_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_4_i peaseNTT_core_twiddle_h_rsc_0_4_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_4_s_tdone(twiddle_h_rsc_0_4_s_tdone),
      .twiddle_h_rsc_0_4_tr_write_done(twiddle_h_rsc_0_4_tr_write_done),
      .twiddle_h_rsc_0_4_RREADY(twiddle_h_rsc_0_4_RREADY),
      .twiddle_h_rsc_0_4_RVALID(twiddle_h_rsc_0_4_RVALID),
      .twiddle_h_rsc_0_4_RUSER(twiddle_h_rsc_0_4_RUSER),
      .twiddle_h_rsc_0_4_RLAST(twiddle_h_rsc_0_4_RLAST),
      .twiddle_h_rsc_0_4_RRESP(twiddle_h_rsc_0_4_RRESP),
      .twiddle_h_rsc_0_4_RDATA(twiddle_h_rsc_0_4_RDATA),
      .twiddle_h_rsc_0_4_RID(twiddle_h_rsc_0_4_RID),
      .twiddle_h_rsc_0_4_ARREADY(twiddle_h_rsc_0_4_ARREADY),
      .twiddle_h_rsc_0_4_ARVALID(twiddle_h_rsc_0_4_ARVALID),
      .twiddle_h_rsc_0_4_ARUSER(twiddle_h_rsc_0_4_ARUSER),
      .twiddle_h_rsc_0_4_ARREGION(twiddle_h_rsc_0_4_ARREGION),
      .twiddle_h_rsc_0_4_ARQOS(twiddle_h_rsc_0_4_ARQOS),
      .twiddle_h_rsc_0_4_ARPROT(twiddle_h_rsc_0_4_ARPROT),
      .twiddle_h_rsc_0_4_ARCACHE(twiddle_h_rsc_0_4_ARCACHE),
      .twiddle_h_rsc_0_4_ARLOCK(twiddle_h_rsc_0_4_ARLOCK),
      .twiddle_h_rsc_0_4_ARBURST(twiddle_h_rsc_0_4_ARBURST),
      .twiddle_h_rsc_0_4_ARSIZE(twiddle_h_rsc_0_4_ARSIZE),
      .twiddle_h_rsc_0_4_ARLEN(twiddle_h_rsc_0_4_ARLEN),
      .twiddle_h_rsc_0_4_ARADDR(twiddle_h_rsc_0_4_ARADDR),
      .twiddle_h_rsc_0_4_ARID(twiddle_h_rsc_0_4_ARID),
      .twiddle_h_rsc_0_4_BREADY(twiddle_h_rsc_0_4_BREADY),
      .twiddle_h_rsc_0_4_BVALID(twiddle_h_rsc_0_4_BVALID),
      .twiddle_h_rsc_0_4_BUSER(twiddle_h_rsc_0_4_BUSER),
      .twiddle_h_rsc_0_4_BRESP(twiddle_h_rsc_0_4_BRESP),
      .twiddle_h_rsc_0_4_BID(twiddle_h_rsc_0_4_BID),
      .twiddle_h_rsc_0_4_WREADY(twiddle_h_rsc_0_4_WREADY),
      .twiddle_h_rsc_0_4_WVALID(twiddle_h_rsc_0_4_WVALID),
      .twiddle_h_rsc_0_4_WUSER(twiddle_h_rsc_0_4_WUSER),
      .twiddle_h_rsc_0_4_WLAST(twiddle_h_rsc_0_4_WLAST),
      .twiddle_h_rsc_0_4_WSTRB(twiddle_h_rsc_0_4_WSTRB),
      .twiddle_h_rsc_0_4_WDATA(twiddle_h_rsc_0_4_WDATA),
      .twiddle_h_rsc_0_4_AWREADY(twiddle_h_rsc_0_4_AWREADY),
      .twiddle_h_rsc_0_4_AWVALID(twiddle_h_rsc_0_4_AWVALID),
      .twiddle_h_rsc_0_4_AWUSER(twiddle_h_rsc_0_4_AWUSER),
      .twiddle_h_rsc_0_4_AWREGION(twiddle_h_rsc_0_4_AWREGION),
      .twiddle_h_rsc_0_4_AWQOS(twiddle_h_rsc_0_4_AWQOS),
      .twiddle_h_rsc_0_4_AWPROT(twiddle_h_rsc_0_4_AWPROT),
      .twiddle_h_rsc_0_4_AWCACHE(twiddle_h_rsc_0_4_AWCACHE),
      .twiddle_h_rsc_0_4_AWLOCK(twiddle_h_rsc_0_4_AWLOCK),
      .twiddle_h_rsc_0_4_AWBURST(twiddle_h_rsc_0_4_AWBURST),
      .twiddle_h_rsc_0_4_AWSIZE(twiddle_h_rsc_0_4_AWSIZE),
      .twiddle_h_rsc_0_4_AWLEN(twiddle_h_rsc_0_4_AWLEN),
      .twiddle_h_rsc_0_4_AWADDR(twiddle_h_rsc_0_4_AWADDR),
      .twiddle_h_rsc_0_4_AWID(twiddle_h_rsc_0_4_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_4_i_oswt(reg_twiddle_rsc_0_4_i_oswt_cse),
      .twiddle_h_rsc_0_4_i_wen_comp(twiddle_h_rsc_0_4_i_wen_comp),
      .twiddle_h_rsc_0_4_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_4_i_inst_twiddle_h_rsc_0_4_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_4_i_s_din_mxwt(twiddle_h_rsc_0_4_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_5_i peaseNTT_core_twiddle_h_rsc_0_5_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_5_s_tdone(twiddle_h_rsc_0_5_s_tdone),
      .twiddle_h_rsc_0_5_tr_write_done(twiddle_h_rsc_0_5_tr_write_done),
      .twiddle_h_rsc_0_5_RREADY(twiddle_h_rsc_0_5_RREADY),
      .twiddle_h_rsc_0_5_RVALID(twiddle_h_rsc_0_5_RVALID),
      .twiddle_h_rsc_0_5_RUSER(twiddle_h_rsc_0_5_RUSER),
      .twiddle_h_rsc_0_5_RLAST(twiddle_h_rsc_0_5_RLAST),
      .twiddle_h_rsc_0_5_RRESP(twiddle_h_rsc_0_5_RRESP),
      .twiddle_h_rsc_0_5_RDATA(twiddle_h_rsc_0_5_RDATA),
      .twiddle_h_rsc_0_5_RID(twiddle_h_rsc_0_5_RID),
      .twiddle_h_rsc_0_5_ARREADY(twiddle_h_rsc_0_5_ARREADY),
      .twiddle_h_rsc_0_5_ARVALID(twiddle_h_rsc_0_5_ARVALID),
      .twiddle_h_rsc_0_5_ARUSER(twiddle_h_rsc_0_5_ARUSER),
      .twiddle_h_rsc_0_5_ARREGION(twiddle_h_rsc_0_5_ARREGION),
      .twiddle_h_rsc_0_5_ARQOS(twiddle_h_rsc_0_5_ARQOS),
      .twiddle_h_rsc_0_5_ARPROT(twiddle_h_rsc_0_5_ARPROT),
      .twiddle_h_rsc_0_5_ARCACHE(twiddle_h_rsc_0_5_ARCACHE),
      .twiddle_h_rsc_0_5_ARLOCK(twiddle_h_rsc_0_5_ARLOCK),
      .twiddle_h_rsc_0_5_ARBURST(twiddle_h_rsc_0_5_ARBURST),
      .twiddle_h_rsc_0_5_ARSIZE(twiddle_h_rsc_0_5_ARSIZE),
      .twiddle_h_rsc_0_5_ARLEN(twiddle_h_rsc_0_5_ARLEN),
      .twiddle_h_rsc_0_5_ARADDR(twiddle_h_rsc_0_5_ARADDR),
      .twiddle_h_rsc_0_5_ARID(twiddle_h_rsc_0_5_ARID),
      .twiddle_h_rsc_0_5_BREADY(twiddle_h_rsc_0_5_BREADY),
      .twiddle_h_rsc_0_5_BVALID(twiddle_h_rsc_0_5_BVALID),
      .twiddle_h_rsc_0_5_BUSER(twiddle_h_rsc_0_5_BUSER),
      .twiddle_h_rsc_0_5_BRESP(twiddle_h_rsc_0_5_BRESP),
      .twiddle_h_rsc_0_5_BID(twiddle_h_rsc_0_5_BID),
      .twiddle_h_rsc_0_5_WREADY(twiddle_h_rsc_0_5_WREADY),
      .twiddle_h_rsc_0_5_WVALID(twiddle_h_rsc_0_5_WVALID),
      .twiddle_h_rsc_0_5_WUSER(twiddle_h_rsc_0_5_WUSER),
      .twiddle_h_rsc_0_5_WLAST(twiddle_h_rsc_0_5_WLAST),
      .twiddle_h_rsc_0_5_WSTRB(twiddle_h_rsc_0_5_WSTRB),
      .twiddle_h_rsc_0_5_WDATA(twiddle_h_rsc_0_5_WDATA),
      .twiddle_h_rsc_0_5_AWREADY(twiddle_h_rsc_0_5_AWREADY),
      .twiddle_h_rsc_0_5_AWVALID(twiddle_h_rsc_0_5_AWVALID),
      .twiddle_h_rsc_0_5_AWUSER(twiddle_h_rsc_0_5_AWUSER),
      .twiddle_h_rsc_0_5_AWREGION(twiddle_h_rsc_0_5_AWREGION),
      .twiddle_h_rsc_0_5_AWQOS(twiddle_h_rsc_0_5_AWQOS),
      .twiddle_h_rsc_0_5_AWPROT(twiddle_h_rsc_0_5_AWPROT),
      .twiddle_h_rsc_0_5_AWCACHE(twiddle_h_rsc_0_5_AWCACHE),
      .twiddle_h_rsc_0_5_AWLOCK(twiddle_h_rsc_0_5_AWLOCK),
      .twiddle_h_rsc_0_5_AWBURST(twiddle_h_rsc_0_5_AWBURST),
      .twiddle_h_rsc_0_5_AWSIZE(twiddle_h_rsc_0_5_AWSIZE),
      .twiddle_h_rsc_0_5_AWLEN(twiddle_h_rsc_0_5_AWLEN),
      .twiddle_h_rsc_0_5_AWADDR(twiddle_h_rsc_0_5_AWADDR),
      .twiddle_h_rsc_0_5_AWID(twiddle_h_rsc_0_5_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_5_i_oswt(reg_twiddle_rsc_0_5_i_oswt_cse),
      .twiddle_h_rsc_0_5_i_wen_comp(twiddle_h_rsc_0_5_i_wen_comp),
      .twiddle_h_rsc_0_5_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_5_i_inst_twiddle_h_rsc_0_5_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_5_i_s_din_mxwt(twiddle_h_rsc_0_5_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_6_i peaseNTT_core_twiddle_h_rsc_0_6_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_6_s_tdone(twiddle_h_rsc_0_6_s_tdone),
      .twiddle_h_rsc_0_6_tr_write_done(twiddle_h_rsc_0_6_tr_write_done),
      .twiddle_h_rsc_0_6_RREADY(twiddle_h_rsc_0_6_RREADY),
      .twiddle_h_rsc_0_6_RVALID(twiddle_h_rsc_0_6_RVALID),
      .twiddle_h_rsc_0_6_RUSER(twiddle_h_rsc_0_6_RUSER),
      .twiddle_h_rsc_0_6_RLAST(twiddle_h_rsc_0_6_RLAST),
      .twiddle_h_rsc_0_6_RRESP(twiddle_h_rsc_0_6_RRESP),
      .twiddle_h_rsc_0_6_RDATA(twiddle_h_rsc_0_6_RDATA),
      .twiddle_h_rsc_0_6_RID(twiddle_h_rsc_0_6_RID),
      .twiddle_h_rsc_0_6_ARREADY(twiddle_h_rsc_0_6_ARREADY),
      .twiddle_h_rsc_0_6_ARVALID(twiddle_h_rsc_0_6_ARVALID),
      .twiddle_h_rsc_0_6_ARUSER(twiddle_h_rsc_0_6_ARUSER),
      .twiddle_h_rsc_0_6_ARREGION(twiddle_h_rsc_0_6_ARREGION),
      .twiddle_h_rsc_0_6_ARQOS(twiddle_h_rsc_0_6_ARQOS),
      .twiddle_h_rsc_0_6_ARPROT(twiddle_h_rsc_0_6_ARPROT),
      .twiddle_h_rsc_0_6_ARCACHE(twiddle_h_rsc_0_6_ARCACHE),
      .twiddle_h_rsc_0_6_ARLOCK(twiddle_h_rsc_0_6_ARLOCK),
      .twiddle_h_rsc_0_6_ARBURST(twiddle_h_rsc_0_6_ARBURST),
      .twiddle_h_rsc_0_6_ARSIZE(twiddle_h_rsc_0_6_ARSIZE),
      .twiddle_h_rsc_0_6_ARLEN(twiddle_h_rsc_0_6_ARLEN),
      .twiddle_h_rsc_0_6_ARADDR(twiddle_h_rsc_0_6_ARADDR),
      .twiddle_h_rsc_0_6_ARID(twiddle_h_rsc_0_6_ARID),
      .twiddle_h_rsc_0_6_BREADY(twiddle_h_rsc_0_6_BREADY),
      .twiddle_h_rsc_0_6_BVALID(twiddle_h_rsc_0_6_BVALID),
      .twiddle_h_rsc_0_6_BUSER(twiddle_h_rsc_0_6_BUSER),
      .twiddle_h_rsc_0_6_BRESP(twiddle_h_rsc_0_6_BRESP),
      .twiddle_h_rsc_0_6_BID(twiddle_h_rsc_0_6_BID),
      .twiddle_h_rsc_0_6_WREADY(twiddle_h_rsc_0_6_WREADY),
      .twiddle_h_rsc_0_6_WVALID(twiddle_h_rsc_0_6_WVALID),
      .twiddle_h_rsc_0_6_WUSER(twiddle_h_rsc_0_6_WUSER),
      .twiddle_h_rsc_0_6_WLAST(twiddle_h_rsc_0_6_WLAST),
      .twiddle_h_rsc_0_6_WSTRB(twiddle_h_rsc_0_6_WSTRB),
      .twiddle_h_rsc_0_6_WDATA(twiddle_h_rsc_0_6_WDATA),
      .twiddle_h_rsc_0_6_AWREADY(twiddle_h_rsc_0_6_AWREADY),
      .twiddle_h_rsc_0_6_AWVALID(twiddle_h_rsc_0_6_AWVALID),
      .twiddle_h_rsc_0_6_AWUSER(twiddle_h_rsc_0_6_AWUSER),
      .twiddle_h_rsc_0_6_AWREGION(twiddle_h_rsc_0_6_AWREGION),
      .twiddle_h_rsc_0_6_AWQOS(twiddle_h_rsc_0_6_AWQOS),
      .twiddle_h_rsc_0_6_AWPROT(twiddle_h_rsc_0_6_AWPROT),
      .twiddle_h_rsc_0_6_AWCACHE(twiddle_h_rsc_0_6_AWCACHE),
      .twiddle_h_rsc_0_6_AWLOCK(twiddle_h_rsc_0_6_AWLOCK),
      .twiddle_h_rsc_0_6_AWBURST(twiddle_h_rsc_0_6_AWBURST),
      .twiddle_h_rsc_0_6_AWSIZE(twiddle_h_rsc_0_6_AWSIZE),
      .twiddle_h_rsc_0_6_AWLEN(twiddle_h_rsc_0_6_AWLEN),
      .twiddle_h_rsc_0_6_AWADDR(twiddle_h_rsc_0_6_AWADDR),
      .twiddle_h_rsc_0_6_AWID(twiddle_h_rsc_0_6_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_6_i_oswt(reg_twiddle_rsc_0_6_i_oswt_cse),
      .twiddle_h_rsc_0_6_i_wen_comp(twiddle_h_rsc_0_6_i_wen_comp),
      .twiddle_h_rsc_0_6_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_6_i_inst_twiddle_h_rsc_0_6_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_6_i_s_din_mxwt(twiddle_h_rsc_0_6_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_7_i peaseNTT_core_twiddle_h_rsc_0_7_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_7_s_tdone(twiddle_h_rsc_0_7_s_tdone),
      .twiddle_h_rsc_0_7_tr_write_done(twiddle_h_rsc_0_7_tr_write_done),
      .twiddle_h_rsc_0_7_RREADY(twiddle_h_rsc_0_7_RREADY),
      .twiddle_h_rsc_0_7_RVALID(twiddle_h_rsc_0_7_RVALID),
      .twiddle_h_rsc_0_7_RUSER(twiddle_h_rsc_0_7_RUSER),
      .twiddle_h_rsc_0_7_RLAST(twiddle_h_rsc_0_7_RLAST),
      .twiddle_h_rsc_0_7_RRESP(twiddle_h_rsc_0_7_RRESP),
      .twiddle_h_rsc_0_7_RDATA(twiddle_h_rsc_0_7_RDATA),
      .twiddle_h_rsc_0_7_RID(twiddle_h_rsc_0_7_RID),
      .twiddle_h_rsc_0_7_ARREADY(twiddle_h_rsc_0_7_ARREADY),
      .twiddle_h_rsc_0_7_ARVALID(twiddle_h_rsc_0_7_ARVALID),
      .twiddle_h_rsc_0_7_ARUSER(twiddle_h_rsc_0_7_ARUSER),
      .twiddle_h_rsc_0_7_ARREGION(twiddle_h_rsc_0_7_ARREGION),
      .twiddle_h_rsc_0_7_ARQOS(twiddle_h_rsc_0_7_ARQOS),
      .twiddle_h_rsc_0_7_ARPROT(twiddle_h_rsc_0_7_ARPROT),
      .twiddle_h_rsc_0_7_ARCACHE(twiddle_h_rsc_0_7_ARCACHE),
      .twiddle_h_rsc_0_7_ARLOCK(twiddle_h_rsc_0_7_ARLOCK),
      .twiddle_h_rsc_0_7_ARBURST(twiddle_h_rsc_0_7_ARBURST),
      .twiddle_h_rsc_0_7_ARSIZE(twiddle_h_rsc_0_7_ARSIZE),
      .twiddle_h_rsc_0_7_ARLEN(twiddle_h_rsc_0_7_ARLEN),
      .twiddle_h_rsc_0_7_ARADDR(twiddle_h_rsc_0_7_ARADDR),
      .twiddle_h_rsc_0_7_ARID(twiddle_h_rsc_0_7_ARID),
      .twiddle_h_rsc_0_7_BREADY(twiddle_h_rsc_0_7_BREADY),
      .twiddle_h_rsc_0_7_BVALID(twiddle_h_rsc_0_7_BVALID),
      .twiddle_h_rsc_0_7_BUSER(twiddle_h_rsc_0_7_BUSER),
      .twiddle_h_rsc_0_7_BRESP(twiddle_h_rsc_0_7_BRESP),
      .twiddle_h_rsc_0_7_BID(twiddle_h_rsc_0_7_BID),
      .twiddle_h_rsc_0_7_WREADY(twiddle_h_rsc_0_7_WREADY),
      .twiddle_h_rsc_0_7_WVALID(twiddle_h_rsc_0_7_WVALID),
      .twiddle_h_rsc_0_7_WUSER(twiddle_h_rsc_0_7_WUSER),
      .twiddle_h_rsc_0_7_WLAST(twiddle_h_rsc_0_7_WLAST),
      .twiddle_h_rsc_0_7_WSTRB(twiddle_h_rsc_0_7_WSTRB),
      .twiddle_h_rsc_0_7_WDATA(twiddle_h_rsc_0_7_WDATA),
      .twiddle_h_rsc_0_7_AWREADY(twiddle_h_rsc_0_7_AWREADY),
      .twiddle_h_rsc_0_7_AWVALID(twiddle_h_rsc_0_7_AWVALID),
      .twiddle_h_rsc_0_7_AWUSER(twiddle_h_rsc_0_7_AWUSER),
      .twiddle_h_rsc_0_7_AWREGION(twiddle_h_rsc_0_7_AWREGION),
      .twiddle_h_rsc_0_7_AWQOS(twiddle_h_rsc_0_7_AWQOS),
      .twiddle_h_rsc_0_7_AWPROT(twiddle_h_rsc_0_7_AWPROT),
      .twiddle_h_rsc_0_7_AWCACHE(twiddle_h_rsc_0_7_AWCACHE),
      .twiddle_h_rsc_0_7_AWLOCK(twiddle_h_rsc_0_7_AWLOCK),
      .twiddle_h_rsc_0_7_AWBURST(twiddle_h_rsc_0_7_AWBURST),
      .twiddle_h_rsc_0_7_AWSIZE(twiddle_h_rsc_0_7_AWSIZE),
      .twiddle_h_rsc_0_7_AWLEN(twiddle_h_rsc_0_7_AWLEN),
      .twiddle_h_rsc_0_7_AWADDR(twiddle_h_rsc_0_7_AWADDR),
      .twiddle_h_rsc_0_7_AWID(twiddle_h_rsc_0_7_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_7_i_oswt(reg_twiddle_rsc_0_7_i_oswt_cse),
      .twiddle_h_rsc_0_7_i_wen_comp(twiddle_h_rsc_0_7_i_wen_comp),
      .twiddle_h_rsc_0_7_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_7_i_inst_twiddle_h_rsc_0_7_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_7_i_s_din_mxwt(twiddle_h_rsc_0_7_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_8_i peaseNTT_core_twiddle_h_rsc_0_8_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_8_s_tdone(twiddle_h_rsc_0_8_s_tdone),
      .twiddle_h_rsc_0_8_tr_write_done(twiddle_h_rsc_0_8_tr_write_done),
      .twiddle_h_rsc_0_8_RREADY(twiddle_h_rsc_0_8_RREADY),
      .twiddle_h_rsc_0_8_RVALID(twiddle_h_rsc_0_8_RVALID),
      .twiddle_h_rsc_0_8_RUSER(twiddle_h_rsc_0_8_RUSER),
      .twiddle_h_rsc_0_8_RLAST(twiddle_h_rsc_0_8_RLAST),
      .twiddle_h_rsc_0_8_RRESP(twiddle_h_rsc_0_8_RRESP),
      .twiddle_h_rsc_0_8_RDATA(twiddle_h_rsc_0_8_RDATA),
      .twiddle_h_rsc_0_8_RID(twiddle_h_rsc_0_8_RID),
      .twiddle_h_rsc_0_8_ARREADY(twiddle_h_rsc_0_8_ARREADY),
      .twiddle_h_rsc_0_8_ARVALID(twiddle_h_rsc_0_8_ARVALID),
      .twiddle_h_rsc_0_8_ARUSER(twiddle_h_rsc_0_8_ARUSER),
      .twiddle_h_rsc_0_8_ARREGION(twiddle_h_rsc_0_8_ARREGION),
      .twiddle_h_rsc_0_8_ARQOS(twiddle_h_rsc_0_8_ARQOS),
      .twiddle_h_rsc_0_8_ARPROT(twiddle_h_rsc_0_8_ARPROT),
      .twiddle_h_rsc_0_8_ARCACHE(twiddle_h_rsc_0_8_ARCACHE),
      .twiddle_h_rsc_0_8_ARLOCK(twiddle_h_rsc_0_8_ARLOCK),
      .twiddle_h_rsc_0_8_ARBURST(twiddle_h_rsc_0_8_ARBURST),
      .twiddle_h_rsc_0_8_ARSIZE(twiddle_h_rsc_0_8_ARSIZE),
      .twiddle_h_rsc_0_8_ARLEN(twiddle_h_rsc_0_8_ARLEN),
      .twiddle_h_rsc_0_8_ARADDR(twiddle_h_rsc_0_8_ARADDR),
      .twiddle_h_rsc_0_8_ARID(twiddle_h_rsc_0_8_ARID),
      .twiddle_h_rsc_0_8_BREADY(twiddle_h_rsc_0_8_BREADY),
      .twiddle_h_rsc_0_8_BVALID(twiddle_h_rsc_0_8_BVALID),
      .twiddle_h_rsc_0_8_BUSER(twiddle_h_rsc_0_8_BUSER),
      .twiddle_h_rsc_0_8_BRESP(twiddle_h_rsc_0_8_BRESP),
      .twiddle_h_rsc_0_8_BID(twiddle_h_rsc_0_8_BID),
      .twiddle_h_rsc_0_8_WREADY(twiddle_h_rsc_0_8_WREADY),
      .twiddle_h_rsc_0_8_WVALID(twiddle_h_rsc_0_8_WVALID),
      .twiddle_h_rsc_0_8_WUSER(twiddle_h_rsc_0_8_WUSER),
      .twiddle_h_rsc_0_8_WLAST(twiddle_h_rsc_0_8_WLAST),
      .twiddle_h_rsc_0_8_WSTRB(twiddle_h_rsc_0_8_WSTRB),
      .twiddle_h_rsc_0_8_WDATA(twiddle_h_rsc_0_8_WDATA),
      .twiddle_h_rsc_0_8_AWREADY(twiddle_h_rsc_0_8_AWREADY),
      .twiddle_h_rsc_0_8_AWVALID(twiddle_h_rsc_0_8_AWVALID),
      .twiddle_h_rsc_0_8_AWUSER(twiddle_h_rsc_0_8_AWUSER),
      .twiddle_h_rsc_0_8_AWREGION(twiddle_h_rsc_0_8_AWREGION),
      .twiddle_h_rsc_0_8_AWQOS(twiddle_h_rsc_0_8_AWQOS),
      .twiddle_h_rsc_0_8_AWPROT(twiddle_h_rsc_0_8_AWPROT),
      .twiddle_h_rsc_0_8_AWCACHE(twiddle_h_rsc_0_8_AWCACHE),
      .twiddle_h_rsc_0_8_AWLOCK(twiddle_h_rsc_0_8_AWLOCK),
      .twiddle_h_rsc_0_8_AWBURST(twiddle_h_rsc_0_8_AWBURST),
      .twiddle_h_rsc_0_8_AWSIZE(twiddle_h_rsc_0_8_AWSIZE),
      .twiddle_h_rsc_0_8_AWLEN(twiddle_h_rsc_0_8_AWLEN),
      .twiddle_h_rsc_0_8_AWADDR(twiddle_h_rsc_0_8_AWADDR),
      .twiddle_h_rsc_0_8_AWID(twiddle_h_rsc_0_8_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_8_i_oswt(reg_twiddle_rsc_0_8_i_oswt_cse),
      .twiddle_h_rsc_0_8_i_wen_comp(twiddle_h_rsc_0_8_i_wen_comp),
      .twiddle_h_rsc_0_8_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_8_i_inst_twiddle_h_rsc_0_8_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_8_i_s_din_mxwt(twiddle_h_rsc_0_8_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_9_i peaseNTT_core_twiddle_h_rsc_0_9_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_9_s_tdone(twiddle_h_rsc_0_9_s_tdone),
      .twiddle_h_rsc_0_9_tr_write_done(twiddle_h_rsc_0_9_tr_write_done),
      .twiddle_h_rsc_0_9_RREADY(twiddle_h_rsc_0_9_RREADY),
      .twiddle_h_rsc_0_9_RVALID(twiddle_h_rsc_0_9_RVALID),
      .twiddle_h_rsc_0_9_RUSER(twiddle_h_rsc_0_9_RUSER),
      .twiddle_h_rsc_0_9_RLAST(twiddle_h_rsc_0_9_RLAST),
      .twiddle_h_rsc_0_9_RRESP(twiddle_h_rsc_0_9_RRESP),
      .twiddle_h_rsc_0_9_RDATA(twiddle_h_rsc_0_9_RDATA),
      .twiddle_h_rsc_0_9_RID(twiddle_h_rsc_0_9_RID),
      .twiddle_h_rsc_0_9_ARREADY(twiddle_h_rsc_0_9_ARREADY),
      .twiddle_h_rsc_0_9_ARVALID(twiddle_h_rsc_0_9_ARVALID),
      .twiddle_h_rsc_0_9_ARUSER(twiddle_h_rsc_0_9_ARUSER),
      .twiddle_h_rsc_0_9_ARREGION(twiddle_h_rsc_0_9_ARREGION),
      .twiddle_h_rsc_0_9_ARQOS(twiddle_h_rsc_0_9_ARQOS),
      .twiddle_h_rsc_0_9_ARPROT(twiddle_h_rsc_0_9_ARPROT),
      .twiddle_h_rsc_0_9_ARCACHE(twiddle_h_rsc_0_9_ARCACHE),
      .twiddle_h_rsc_0_9_ARLOCK(twiddle_h_rsc_0_9_ARLOCK),
      .twiddle_h_rsc_0_9_ARBURST(twiddle_h_rsc_0_9_ARBURST),
      .twiddle_h_rsc_0_9_ARSIZE(twiddle_h_rsc_0_9_ARSIZE),
      .twiddle_h_rsc_0_9_ARLEN(twiddle_h_rsc_0_9_ARLEN),
      .twiddle_h_rsc_0_9_ARADDR(twiddle_h_rsc_0_9_ARADDR),
      .twiddle_h_rsc_0_9_ARID(twiddle_h_rsc_0_9_ARID),
      .twiddle_h_rsc_0_9_BREADY(twiddle_h_rsc_0_9_BREADY),
      .twiddle_h_rsc_0_9_BVALID(twiddle_h_rsc_0_9_BVALID),
      .twiddle_h_rsc_0_9_BUSER(twiddle_h_rsc_0_9_BUSER),
      .twiddle_h_rsc_0_9_BRESP(twiddle_h_rsc_0_9_BRESP),
      .twiddle_h_rsc_0_9_BID(twiddle_h_rsc_0_9_BID),
      .twiddle_h_rsc_0_9_WREADY(twiddle_h_rsc_0_9_WREADY),
      .twiddle_h_rsc_0_9_WVALID(twiddle_h_rsc_0_9_WVALID),
      .twiddle_h_rsc_0_9_WUSER(twiddle_h_rsc_0_9_WUSER),
      .twiddle_h_rsc_0_9_WLAST(twiddle_h_rsc_0_9_WLAST),
      .twiddle_h_rsc_0_9_WSTRB(twiddle_h_rsc_0_9_WSTRB),
      .twiddle_h_rsc_0_9_WDATA(twiddle_h_rsc_0_9_WDATA),
      .twiddle_h_rsc_0_9_AWREADY(twiddle_h_rsc_0_9_AWREADY),
      .twiddle_h_rsc_0_9_AWVALID(twiddle_h_rsc_0_9_AWVALID),
      .twiddle_h_rsc_0_9_AWUSER(twiddle_h_rsc_0_9_AWUSER),
      .twiddle_h_rsc_0_9_AWREGION(twiddle_h_rsc_0_9_AWREGION),
      .twiddle_h_rsc_0_9_AWQOS(twiddle_h_rsc_0_9_AWQOS),
      .twiddle_h_rsc_0_9_AWPROT(twiddle_h_rsc_0_9_AWPROT),
      .twiddle_h_rsc_0_9_AWCACHE(twiddle_h_rsc_0_9_AWCACHE),
      .twiddle_h_rsc_0_9_AWLOCK(twiddle_h_rsc_0_9_AWLOCK),
      .twiddle_h_rsc_0_9_AWBURST(twiddle_h_rsc_0_9_AWBURST),
      .twiddle_h_rsc_0_9_AWSIZE(twiddle_h_rsc_0_9_AWSIZE),
      .twiddle_h_rsc_0_9_AWLEN(twiddle_h_rsc_0_9_AWLEN),
      .twiddle_h_rsc_0_9_AWADDR(twiddle_h_rsc_0_9_AWADDR),
      .twiddle_h_rsc_0_9_AWID(twiddle_h_rsc_0_9_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_9_i_oswt(reg_twiddle_rsc_0_1_i_oswt_cse),
      .twiddle_h_rsc_0_9_i_wen_comp(twiddle_h_rsc_0_9_i_wen_comp),
      .twiddle_h_rsc_0_9_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_9_i_inst_twiddle_h_rsc_0_9_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_9_i_s_din_mxwt(twiddle_h_rsc_0_9_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_10_i peaseNTT_core_twiddle_h_rsc_0_10_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_10_s_tdone(twiddle_h_rsc_0_10_s_tdone),
      .twiddle_h_rsc_0_10_tr_write_done(twiddle_h_rsc_0_10_tr_write_done),
      .twiddle_h_rsc_0_10_RREADY(twiddle_h_rsc_0_10_RREADY),
      .twiddle_h_rsc_0_10_RVALID(twiddle_h_rsc_0_10_RVALID),
      .twiddle_h_rsc_0_10_RUSER(twiddle_h_rsc_0_10_RUSER),
      .twiddle_h_rsc_0_10_RLAST(twiddle_h_rsc_0_10_RLAST),
      .twiddle_h_rsc_0_10_RRESP(twiddle_h_rsc_0_10_RRESP),
      .twiddle_h_rsc_0_10_RDATA(twiddle_h_rsc_0_10_RDATA),
      .twiddle_h_rsc_0_10_RID(twiddle_h_rsc_0_10_RID),
      .twiddle_h_rsc_0_10_ARREADY(twiddle_h_rsc_0_10_ARREADY),
      .twiddle_h_rsc_0_10_ARVALID(twiddle_h_rsc_0_10_ARVALID),
      .twiddle_h_rsc_0_10_ARUSER(twiddle_h_rsc_0_10_ARUSER),
      .twiddle_h_rsc_0_10_ARREGION(twiddle_h_rsc_0_10_ARREGION),
      .twiddle_h_rsc_0_10_ARQOS(twiddle_h_rsc_0_10_ARQOS),
      .twiddle_h_rsc_0_10_ARPROT(twiddle_h_rsc_0_10_ARPROT),
      .twiddle_h_rsc_0_10_ARCACHE(twiddle_h_rsc_0_10_ARCACHE),
      .twiddle_h_rsc_0_10_ARLOCK(twiddle_h_rsc_0_10_ARLOCK),
      .twiddle_h_rsc_0_10_ARBURST(twiddle_h_rsc_0_10_ARBURST),
      .twiddle_h_rsc_0_10_ARSIZE(twiddle_h_rsc_0_10_ARSIZE),
      .twiddle_h_rsc_0_10_ARLEN(twiddle_h_rsc_0_10_ARLEN),
      .twiddle_h_rsc_0_10_ARADDR(twiddle_h_rsc_0_10_ARADDR),
      .twiddle_h_rsc_0_10_ARID(twiddle_h_rsc_0_10_ARID),
      .twiddle_h_rsc_0_10_BREADY(twiddle_h_rsc_0_10_BREADY),
      .twiddle_h_rsc_0_10_BVALID(twiddle_h_rsc_0_10_BVALID),
      .twiddle_h_rsc_0_10_BUSER(twiddle_h_rsc_0_10_BUSER),
      .twiddle_h_rsc_0_10_BRESP(twiddle_h_rsc_0_10_BRESP),
      .twiddle_h_rsc_0_10_BID(twiddle_h_rsc_0_10_BID),
      .twiddle_h_rsc_0_10_WREADY(twiddle_h_rsc_0_10_WREADY),
      .twiddle_h_rsc_0_10_WVALID(twiddle_h_rsc_0_10_WVALID),
      .twiddle_h_rsc_0_10_WUSER(twiddle_h_rsc_0_10_WUSER),
      .twiddle_h_rsc_0_10_WLAST(twiddle_h_rsc_0_10_WLAST),
      .twiddle_h_rsc_0_10_WSTRB(twiddle_h_rsc_0_10_WSTRB),
      .twiddle_h_rsc_0_10_WDATA(twiddle_h_rsc_0_10_WDATA),
      .twiddle_h_rsc_0_10_AWREADY(twiddle_h_rsc_0_10_AWREADY),
      .twiddle_h_rsc_0_10_AWVALID(twiddle_h_rsc_0_10_AWVALID),
      .twiddle_h_rsc_0_10_AWUSER(twiddle_h_rsc_0_10_AWUSER),
      .twiddle_h_rsc_0_10_AWREGION(twiddle_h_rsc_0_10_AWREGION),
      .twiddle_h_rsc_0_10_AWQOS(twiddle_h_rsc_0_10_AWQOS),
      .twiddle_h_rsc_0_10_AWPROT(twiddle_h_rsc_0_10_AWPROT),
      .twiddle_h_rsc_0_10_AWCACHE(twiddle_h_rsc_0_10_AWCACHE),
      .twiddle_h_rsc_0_10_AWLOCK(twiddle_h_rsc_0_10_AWLOCK),
      .twiddle_h_rsc_0_10_AWBURST(twiddle_h_rsc_0_10_AWBURST),
      .twiddle_h_rsc_0_10_AWSIZE(twiddle_h_rsc_0_10_AWSIZE),
      .twiddle_h_rsc_0_10_AWLEN(twiddle_h_rsc_0_10_AWLEN),
      .twiddle_h_rsc_0_10_AWADDR(twiddle_h_rsc_0_10_AWADDR),
      .twiddle_h_rsc_0_10_AWID(twiddle_h_rsc_0_10_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_10_i_oswt(reg_twiddle_rsc_0_2_i_oswt_cse),
      .twiddle_h_rsc_0_10_i_wen_comp(twiddle_h_rsc_0_10_i_wen_comp),
      .twiddle_h_rsc_0_10_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_10_i_inst_twiddle_h_rsc_0_10_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_10_i_s_din_mxwt(twiddle_h_rsc_0_10_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_11_i peaseNTT_core_twiddle_h_rsc_0_11_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_11_s_tdone(twiddle_h_rsc_0_11_s_tdone),
      .twiddle_h_rsc_0_11_tr_write_done(twiddle_h_rsc_0_11_tr_write_done),
      .twiddle_h_rsc_0_11_RREADY(twiddle_h_rsc_0_11_RREADY),
      .twiddle_h_rsc_0_11_RVALID(twiddle_h_rsc_0_11_RVALID),
      .twiddle_h_rsc_0_11_RUSER(twiddle_h_rsc_0_11_RUSER),
      .twiddle_h_rsc_0_11_RLAST(twiddle_h_rsc_0_11_RLAST),
      .twiddle_h_rsc_0_11_RRESP(twiddle_h_rsc_0_11_RRESP),
      .twiddle_h_rsc_0_11_RDATA(twiddle_h_rsc_0_11_RDATA),
      .twiddle_h_rsc_0_11_RID(twiddle_h_rsc_0_11_RID),
      .twiddle_h_rsc_0_11_ARREADY(twiddle_h_rsc_0_11_ARREADY),
      .twiddle_h_rsc_0_11_ARVALID(twiddle_h_rsc_0_11_ARVALID),
      .twiddle_h_rsc_0_11_ARUSER(twiddle_h_rsc_0_11_ARUSER),
      .twiddle_h_rsc_0_11_ARREGION(twiddle_h_rsc_0_11_ARREGION),
      .twiddle_h_rsc_0_11_ARQOS(twiddle_h_rsc_0_11_ARQOS),
      .twiddle_h_rsc_0_11_ARPROT(twiddle_h_rsc_0_11_ARPROT),
      .twiddle_h_rsc_0_11_ARCACHE(twiddle_h_rsc_0_11_ARCACHE),
      .twiddle_h_rsc_0_11_ARLOCK(twiddle_h_rsc_0_11_ARLOCK),
      .twiddle_h_rsc_0_11_ARBURST(twiddle_h_rsc_0_11_ARBURST),
      .twiddle_h_rsc_0_11_ARSIZE(twiddle_h_rsc_0_11_ARSIZE),
      .twiddle_h_rsc_0_11_ARLEN(twiddle_h_rsc_0_11_ARLEN),
      .twiddle_h_rsc_0_11_ARADDR(twiddle_h_rsc_0_11_ARADDR),
      .twiddle_h_rsc_0_11_ARID(twiddle_h_rsc_0_11_ARID),
      .twiddle_h_rsc_0_11_BREADY(twiddle_h_rsc_0_11_BREADY),
      .twiddle_h_rsc_0_11_BVALID(twiddle_h_rsc_0_11_BVALID),
      .twiddle_h_rsc_0_11_BUSER(twiddle_h_rsc_0_11_BUSER),
      .twiddle_h_rsc_0_11_BRESP(twiddle_h_rsc_0_11_BRESP),
      .twiddle_h_rsc_0_11_BID(twiddle_h_rsc_0_11_BID),
      .twiddle_h_rsc_0_11_WREADY(twiddle_h_rsc_0_11_WREADY),
      .twiddle_h_rsc_0_11_WVALID(twiddle_h_rsc_0_11_WVALID),
      .twiddle_h_rsc_0_11_WUSER(twiddle_h_rsc_0_11_WUSER),
      .twiddle_h_rsc_0_11_WLAST(twiddle_h_rsc_0_11_WLAST),
      .twiddle_h_rsc_0_11_WSTRB(twiddle_h_rsc_0_11_WSTRB),
      .twiddle_h_rsc_0_11_WDATA(twiddle_h_rsc_0_11_WDATA),
      .twiddle_h_rsc_0_11_AWREADY(twiddle_h_rsc_0_11_AWREADY),
      .twiddle_h_rsc_0_11_AWVALID(twiddle_h_rsc_0_11_AWVALID),
      .twiddle_h_rsc_0_11_AWUSER(twiddle_h_rsc_0_11_AWUSER),
      .twiddle_h_rsc_0_11_AWREGION(twiddle_h_rsc_0_11_AWREGION),
      .twiddle_h_rsc_0_11_AWQOS(twiddle_h_rsc_0_11_AWQOS),
      .twiddle_h_rsc_0_11_AWPROT(twiddle_h_rsc_0_11_AWPROT),
      .twiddle_h_rsc_0_11_AWCACHE(twiddle_h_rsc_0_11_AWCACHE),
      .twiddle_h_rsc_0_11_AWLOCK(twiddle_h_rsc_0_11_AWLOCK),
      .twiddle_h_rsc_0_11_AWBURST(twiddle_h_rsc_0_11_AWBURST),
      .twiddle_h_rsc_0_11_AWSIZE(twiddle_h_rsc_0_11_AWSIZE),
      .twiddle_h_rsc_0_11_AWLEN(twiddle_h_rsc_0_11_AWLEN),
      .twiddle_h_rsc_0_11_AWADDR(twiddle_h_rsc_0_11_AWADDR),
      .twiddle_h_rsc_0_11_AWID(twiddle_h_rsc_0_11_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_11_i_oswt(reg_twiddle_rsc_0_3_i_oswt_cse),
      .twiddle_h_rsc_0_11_i_wen_comp(twiddle_h_rsc_0_11_i_wen_comp),
      .twiddle_h_rsc_0_11_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_11_i_inst_twiddle_h_rsc_0_11_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_11_i_s_din_mxwt(twiddle_h_rsc_0_11_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_12_i peaseNTT_core_twiddle_h_rsc_0_12_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_12_s_tdone(twiddle_h_rsc_0_12_s_tdone),
      .twiddle_h_rsc_0_12_tr_write_done(twiddle_h_rsc_0_12_tr_write_done),
      .twiddle_h_rsc_0_12_RREADY(twiddle_h_rsc_0_12_RREADY),
      .twiddle_h_rsc_0_12_RVALID(twiddle_h_rsc_0_12_RVALID),
      .twiddle_h_rsc_0_12_RUSER(twiddle_h_rsc_0_12_RUSER),
      .twiddle_h_rsc_0_12_RLAST(twiddle_h_rsc_0_12_RLAST),
      .twiddle_h_rsc_0_12_RRESP(twiddle_h_rsc_0_12_RRESP),
      .twiddle_h_rsc_0_12_RDATA(twiddle_h_rsc_0_12_RDATA),
      .twiddle_h_rsc_0_12_RID(twiddle_h_rsc_0_12_RID),
      .twiddle_h_rsc_0_12_ARREADY(twiddle_h_rsc_0_12_ARREADY),
      .twiddle_h_rsc_0_12_ARVALID(twiddle_h_rsc_0_12_ARVALID),
      .twiddle_h_rsc_0_12_ARUSER(twiddle_h_rsc_0_12_ARUSER),
      .twiddle_h_rsc_0_12_ARREGION(twiddle_h_rsc_0_12_ARREGION),
      .twiddle_h_rsc_0_12_ARQOS(twiddle_h_rsc_0_12_ARQOS),
      .twiddle_h_rsc_0_12_ARPROT(twiddle_h_rsc_0_12_ARPROT),
      .twiddle_h_rsc_0_12_ARCACHE(twiddle_h_rsc_0_12_ARCACHE),
      .twiddle_h_rsc_0_12_ARLOCK(twiddle_h_rsc_0_12_ARLOCK),
      .twiddle_h_rsc_0_12_ARBURST(twiddle_h_rsc_0_12_ARBURST),
      .twiddle_h_rsc_0_12_ARSIZE(twiddle_h_rsc_0_12_ARSIZE),
      .twiddle_h_rsc_0_12_ARLEN(twiddle_h_rsc_0_12_ARLEN),
      .twiddle_h_rsc_0_12_ARADDR(twiddle_h_rsc_0_12_ARADDR),
      .twiddle_h_rsc_0_12_ARID(twiddle_h_rsc_0_12_ARID),
      .twiddle_h_rsc_0_12_BREADY(twiddle_h_rsc_0_12_BREADY),
      .twiddle_h_rsc_0_12_BVALID(twiddle_h_rsc_0_12_BVALID),
      .twiddle_h_rsc_0_12_BUSER(twiddle_h_rsc_0_12_BUSER),
      .twiddle_h_rsc_0_12_BRESP(twiddle_h_rsc_0_12_BRESP),
      .twiddle_h_rsc_0_12_BID(twiddle_h_rsc_0_12_BID),
      .twiddle_h_rsc_0_12_WREADY(twiddle_h_rsc_0_12_WREADY),
      .twiddle_h_rsc_0_12_WVALID(twiddle_h_rsc_0_12_WVALID),
      .twiddle_h_rsc_0_12_WUSER(twiddle_h_rsc_0_12_WUSER),
      .twiddle_h_rsc_0_12_WLAST(twiddle_h_rsc_0_12_WLAST),
      .twiddle_h_rsc_0_12_WSTRB(twiddle_h_rsc_0_12_WSTRB),
      .twiddle_h_rsc_0_12_WDATA(twiddle_h_rsc_0_12_WDATA),
      .twiddle_h_rsc_0_12_AWREADY(twiddle_h_rsc_0_12_AWREADY),
      .twiddle_h_rsc_0_12_AWVALID(twiddle_h_rsc_0_12_AWVALID),
      .twiddle_h_rsc_0_12_AWUSER(twiddle_h_rsc_0_12_AWUSER),
      .twiddle_h_rsc_0_12_AWREGION(twiddle_h_rsc_0_12_AWREGION),
      .twiddle_h_rsc_0_12_AWQOS(twiddle_h_rsc_0_12_AWQOS),
      .twiddle_h_rsc_0_12_AWPROT(twiddle_h_rsc_0_12_AWPROT),
      .twiddle_h_rsc_0_12_AWCACHE(twiddle_h_rsc_0_12_AWCACHE),
      .twiddle_h_rsc_0_12_AWLOCK(twiddle_h_rsc_0_12_AWLOCK),
      .twiddle_h_rsc_0_12_AWBURST(twiddle_h_rsc_0_12_AWBURST),
      .twiddle_h_rsc_0_12_AWSIZE(twiddle_h_rsc_0_12_AWSIZE),
      .twiddle_h_rsc_0_12_AWLEN(twiddle_h_rsc_0_12_AWLEN),
      .twiddle_h_rsc_0_12_AWADDR(twiddle_h_rsc_0_12_AWADDR),
      .twiddle_h_rsc_0_12_AWID(twiddle_h_rsc_0_12_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_12_i_oswt(reg_twiddle_rsc_0_4_i_oswt_cse),
      .twiddle_h_rsc_0_12_i_wen_comp(twiddle_h_rsc_0_12_i_wen_comp),
      .twiddle_h_rsc_0_12_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_12_i_inst_twiddle_h_rsc_0_12_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_12_i_s_din_mxwt(twiddle_h_rsc_0_12_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_13_i peaseNTT_core_twiddle_h_rsc_0_13_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_13_s_tdone(twiddle_h_rsc_0_13_s_tdone),
      .twiddle_h_rsc_0_13_tr_write_done(twiddle_h_rsc_0_13_tr_write_done),
      .twiddle_h_rsc_0_13_RREADY(twiddle_h_rsc_0_13_RREADY),
      .twiddle_h_rsc_0_13_RVALID(twiddle_h_rsc_0_13_RVALID),
      .twiddle_h_rsc_0_13_RUSER(twiddle_h_rsc_0_13_RUSER),
      .twiddle_h_rsc_0_13_RLAST(twiddle_h_rsc_0_13_RLAST),
      .twiddle_h_rsc_0_13_RRESP(twiddle_h_rsc_0_13_RRESP),
      .twiddle_h_rsc_0_13_RDATA(twiddle_h_rsc_0_13_RDATA),
      .twiddle_h_rsc_0_13_RID(twiddle_h_rsc_0_13_RID),
      .twiddle_h_rsc_0_13_ARREADY(twiddle_h_rsc_0_13_ARREADY),
      .twiddle_h_rsc_0_13_ARVALID(twiddle_h_rsc_0_13_ARVALID),
      .twiddle_h_rsc_0_13_ARUSER(twiddle_h_rsc_0_13_ARUSER),
      .twiddle_h_rsc_0_13_ARREGION(twiddle_h_rsc_0_13_ARREGION),
      .twiddle_h_rsc_0_13_ARQOS(twiddle_h_rsc_0_13_ARQOS),
      .twiddle_h_rsc_0_13_ARPROT(twiddle_h_rsc_0_13_ARPROT),
      .twiddle_h_rsc_0_13_ARCACHE(twiddle_h_rsc_0_13_ARCACHE),
      .twiddle_h_rsc_0_13_ARLOCK(twiddle_h_rsc_0_13_ARLOCK),
      .twiddle_h_rsc_0_13_ARBURST(twiddle_h_rsc_0_13_ARBURST),
      .twiddle_h_rsc_0_13_ARSIZE(twiddle_h_rsc_0_13_ARSIZE),
      .twiddle_h_rsc_0_13_ARLEN(twiddle_h_rsc_0_13_ARLEN),
      .twiddle_h_rsc_0_13_ARADDR(twiddle_h_rsc_0_13_ARADDR),
      .twiddle_h_rsc_0_13_ARID(twiddle_h_rsc_0_13_ARID),
      .twiddle_h_rsc_0_13_BREADY(twiddle_h_rsc_0_13_BREADY),
      .twiddle_h_rsc_0_13_BVALID(twiddle_h_rsc_0_13_BVALID),
      .twiddle_h_rsc_0_13_BUSER(twiddle_h_rsc_0_13_BUSER),
      .twiddle_h_rsc_0_13_BRESP(twiddle_h_rsc_0_13_BRESP),
      .twiddle_h_rsc_0_13_BID(twiddle_h_rsc_0_13_BID),
      .twiddle_h_rsc_0_13_WREADY(twiddle_h_rsc_0_13_WREADY),
      .twiddle_h_rsc_0_13_WVALID(twiddle_h_rsc_0_13_WVALID),
      .twiddle_h_rsc_0_13_WUSER(twiddle_h_rsc_0_13_WUSER),
      .twiddle_h_rsc_0_13_WLAST(twiddle_h_rsc_0_13_WLAST),
      .twiddle_h_rsc_0_13_WSTRB(twiddle_h_rsc_0_13_WSTRB),
      .twiddle_h_rsc_0_13_WDATA(twiddle_h_rsc_0_13_WDATA),
      .twiddle_h_rsc_0_13_AWREADY(twiddle_h_rsc_0_13_AWREADY),
      .twiddle_h_rsc_0_13_AWVALID(twiddle_h_rsc_0_13_AWVALID),
      .twiddle_h_rsc_0_13_AWUSER(twiddle_h_rsc_0_13_AWUSER),
      .twiddle_h_rsc_0_13_AWREGION(twiddle_h_rsc_0_13_AWREGION),
      .twiddle_h_rsc_0_13_AWQOS(twiddle_h_rsc_0_13_AWQOS),
      .twiddle_h_rsc_0_13_AWPROT(twiddle_h_rsc_0_13_AWPROT),
      .twiddle_h_rsc_0_13_AWCACHE(twiddle_h_rsc_0_13_AWCACHE),
      .twiddle_h_rsc_0_13_AWLOCK(twiddle_h_rsc_0_13_AWLOCK),
      .twiddle_h_rsc_0_13_AWBURST(twiddle_h_rsc_0_13_AWBURST),
      .twiddle_h_rsc_0_13_AWSIZE(twiddle_h_rsc_0_13_AWSIZE),
      .twiddle_h_rsc_0_13_AWLEN(twiddle_h_rsc_0_13_AWLEN),
      .twiddle_h_rsc_0_13_AWADDR(twiddle_h_rsc_0_13_AWADDR),
      .twiddle_h_rsc_0_13_AWID(twiddle_h_rsc_0_13_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_13_i_oswt(reg_twiddle_rsc_0_5_i_oswt_cse),
      .twiddle_h_rsc_0_13_i_wen_comp(twiddle_h_rsc_0_13_i_wen_comp),
      .twiddle_h_rsc_0_13_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_13_i_inst_twiddle_h_rsc_0_13_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_13_i_s_din_mxwt(twiddle_h_rsc_0_13_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_14_i peaseNTT_core_twiddle_h_rsc_0_14_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_14_s_tdone(twiddle_h_rsc_0_14_s_tdone),
      .twiddle_h_rsc_0_14_tr_write_done(twiddle_h_rsc_0_14_tr_write_done),
      .twiddle_h_rsc_0_14_RREADY(twiddle_h_rsc_0_14_RREADY),
      .twiddle_h_rsc_0_14_RVALID(twiddle_h_rsc_0_14_RVALID),
      .twiddle_h_rsc_0_14_RUSER(twiddle_h_rsc_0_14_RUSER),
      .twiddle_h_rsc_0_14_RLAST(twiddle_h_rsc_0_14_RLAST),
      .twiddle_h_rsc_0_14_RRESP(twiddle_h_rsc_0_14_RRESP),
      .twiddle_h_rsc_0_14_RDATA(twiddle_h_rsc_0_14_RDATA),
      .twiddle_h_rsc_0_14_RID(twiddle_h_rsc_0_14_RID),
      .twiddle_h_rsc_0_14_ARREADY(twiddle_h_rsc_0_14_ARREADY),
      .twiddle_h_rsc_0_14_ARVALID(twiddle_h_rsc_0_14_ARVALID),
      .twiddle_h_rsc_0_14_ARUSER(twiddle_h_rsc_0_14_ARUSER),
      .twiddle_h_rsc_0_14_ARREGION(twiddle_h_rsc_0_14_ARREGION),
      .twiddle_h_rsc_0_14_ARQOS(twiddle_h_rsc_0_14_ARQOS),
      .twiddle_h_rsc_0_14_ARPROT(twiddle_h_rsc_0_14_ARPROT),
      .twiddle_h_rsc_0_14_ARCACHE(twiddle_h_rsc_0_14_ARCACHE),
      .twiddle_h_rsc_0_14_ARLOCK(twiddle_h_rsc_0_14_ARLOCK),
      .twiddle_h_rsc_0_14_ARBURST(twiddle_h_rsc_0_14_ARBURST),
      .twiddle_h_rsc_0_14_ARSIZE(twiddle_h_rsc_0_14_ARSIZE),
      .twiddle_h_rsc_0_14_ARLEN(twiddle_h_rsc_0_14_ARLEN),
      .twiddle_h_rsc_0_14_ARADDR(twiddle_h_rsc_0_14_ARADDR),
      .twiddle_h_rsc_0_14_ARID(twiddle_h_rsc_0_14_ARID),
      .twiddle_h_rsc_0_14_BREADY(twiddle_h_rsc_0_14_BREADY),
      .twiddle_h_rsc_0_14_BVALID(twiddle_h_rsc_0_14_BVALID),
      .twiddle_h_rsc_0_14_BUSER(twiddle_h_rsc_0_14_BUSER),
      .twiddle_h_rsc_0_14_BRESP(twiddle_h_rsc_0_14_BRESP),
      .twiddle_h_rsc_0_14_BID(twiddle_h_rsc_0_14_BID),
      .twiddle_h_rsc_0_14_WREADY(twiddle_h_rsc_0_14_WREADY),
      .twiddle_h_rsc_0_14_WVALID(twiddle_h_rsc_0_14_WVALID),
      .twiddle_h_rsc_0_14_WUSER(twiddle_h_rsc_0_14_WUSER),
      .twiddle_h_rsc_0_14_WLAST(twiddle_h_rsc_0_14_WLAST),
      .twiddle_h_rsc_0_14_WSTRB(twiddle_h_rsc_0_14_WSTRB),
      .twiddle_h_rsc_0_14_WDATA(twiddle_h_rsc_0_14_WDATA),
      .twiddle_h_rsc_0_14_AWREADY(twiddle_h_rsc_0_14_AWREADY),
      .twiddle_h_rsc_0_14_AWVALID(twiddle_h_rsc_0_14_AWVALID),
      .twiddle_h_rsc_0_14_AWUSER(twiddle_h_rsc_0_14_AWUSER),
      .twiddle_h_rsc_0_14_AWREGION(twiddle_h_rsc_0_14_AWREGION),
      .twiddle_h_rsc_0_14_AWQOS(twiddle_h_rsc_0_14_AWQOS),
      .twiddle_h_rsc_0_14_AWPROT(twiddle_h_rsc_0_14_AWPROT),
      .twiddle_h_rsc_0_14_AWCACHE(twiddle_h_rsc_0_14_AWCACHE),
      .twiddle_h_rsc_0_14_AWLOCK(twiddle_h_rsc_0_14_AWLOCK),
      .twiddle_h_rsc_0_14_AWBURST(twiddle_h_rsc_0_14_AWBURST),
      .twiddle_h_rsc_0_14_AWSIZE(twiddle_h_rsc_0_14_AWSIZE),
      .twiddle_h_rsc_0_14_AWLEN(twiddle_h_rsc_0_14_AWLEN),
      .twiddle_h_rsc_0_14_AWADDR(twiddle_h_rsc_0_14_AWADDR),
      .twiddle_h_rsc_0_14_AWID(twiddle_h_rsc_0_14_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_14_i_oswt(reg_twiddle_rsc_0_6_i_oswt_cse),
      .twiddle_h_rsc_0_14_i_wen_comp(twiddle_h_rsc_0_14_i_wen_comp),
      .twiddle_h_rsc_0_14_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_14_i_inst_twiddle_h_rsc_0_14_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_14_i_s_din_mxwt(twiddle_h_rsc_0_14_i_s_din_mxwt)
    );
  peaseNTT_core_twiddle_h_rsc_0_15_i peaseNTT_core_twiddle_h_rsc_0_15_i_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_0_15_s_tdone(twiddle_h_rsc_0_15_s_tdone),
      .twiddle_h_rsc_0_15_tr_write_done(twiddle_h_rsc_0_15_tr_write_done),
      .twiddle_h_rsc_0_15_RREADY(twiddle_h_rsc_0_15_RREADY),
      .twiddle_h_rsc_0_15_RVALID(twiddle_h_rsc_0_15_RVALID),
      .twiddle_h_rsc_0_15_RUSER(twiddle_h_rsc_0_15_RUSER),
      .twiddle_h_rsc_0_15_RLAST(twiddle_h_rsc_0_15_RLAST),
      .twiddle_h_rsc_0_15_RRESP(twiddle_h_rsc_0_15_RRESP),
      .twiddle_h_rsc_0_15_RDATA(twiddle_h_rsc_0_15_RDATA),
      .twiddle_h_rsc_0_15_RID(twiddle_h_rsc_0_15_RID),
      .twiddle_h_rsc_0_15_ARREADY(twiddle_h_rsc_0_15_ARREADY),
      .twiddle_h_rsc_0_15_ARVALID(twiddle_h_rsc_0_15_ARVALID),
      .twiddle_h_rsc_0_15_ARUSER(twiddle_h_rsc_0_15_ARUSER),
      .twiddle_h_rsc_0_15_ARREGION(twiddle_h_rsc_0_15_ARREGION),
      .twiddle_h_rsc_0_15_ARQOS(twiddle_h_rsc_0_15_ARQOS),
      .twiddle_h_rsc_0_15_ARPROT(twiddle_h_rsc_0_15_ARPROT),
      .twiddle_h_rsc_0_15_ARCACHE(twiddle_h_rsc_0_15_ARCACHE),
      .twiddle_h_rsc_0_15_ARLOCK(twiddle_h_rsc_0_15_ARLOCK),
      .twiddle_h_rsc_0_15_ARBURST(twiddle_h_rsc_0_15_ARBURST),
      .twiddle_h_rsc_0_15_ARSIZE(twiddle_h_rsc_0_15_ARSIZE),
      .twiddle_h_rsc_0_15_ARLEN(twiddle_h_rsc_0_15_ARLEN),
      .twiddle_h_rsc_0_15_ARADDR(twiddle_h_rsc_0_15_ARADDR),
      .twiddle_h_rsc_0_15_ARID(twiddle_h_rsc_0_15_ARID),
      .twiddle_h_rsc_0_15_BREADY(twiddle_h_rsc_0_15_BREADY),
      .twiddle_h_rsc_0_15_BVALID(twiddle_h_rsc_0_15_BVALID),
      .twiddle_h_rsc_0_15_BUSER(twiddle_h_rsc_0_15_BUSER),
      .twiddle_h_rsc_0_15_BRESP(twiddle_h_rsc_0_15_BRESP),
      .twiddle_h_rsc_0_15_BID(twiddle_h_rsc_0_15_BID),
      .twiddle_h_rsc_0_15_WREADY(twiddle_h_rsc_0_15_WREADY),
      .twiddle_h_rsc_0_15_WVALID(twiddle_h_rsc_0_15_WVALID),
      .twiddle_h_rsc_0_15_WUSER(twiddle_h_rsc_0_15_WUSER),
      .twiddle_h_rsc_0_15_WLAST(twiddle_h_rsc_0_15_WLAST),
      .twiddle_h_rsc_0_15_WSTRB(twiddle_h_rsc_0_15_WSTRB),
      .twiddle_h_rsc_0_15_WDATA(twiddle_h_rsc_0_15_WDATA),
      .twiddle_h_rsc_0_15_AWREADY(twiddle_h_rsc_0_15_AWREADY),
      .twiddle_h_rsc_0_15_AWVALID(twiddle_h_rsc_0_15_AWVALID),
      .twiddle_h_rsc_0_15_AWUSER(twiddle_h_rsc_0_15_AWUSER),
      .twiddle_h_rsc_0_15_AWREGION(twiddle_h_rsc_0_15_AWREGION),
      .twiddle_h_rsc_0_15_AWQOS(twiddle_h_rsc_0_15_AWQOS),
      .twiddle_h_rsc_0_15_AWPROT(twiddle_h_rsc_0_15_AWPROT),
      .twiddle_h_rsc_0_15_AWCACHE(twiddle_h_rsc_0_15_AWCACHE),
      .twiddle_h_rsc_0_15_AWLOCK(twiddle_h_rsc_0_15_AWLOCK),
      .twiddle_h_rsc_0_15_AWBURST(twiddle_h_rsc_0_15_AWBURST),
      .twiddle_h_rsc_0_15_AWSIZE(twiddle_h_rsc_0_15_AWSIZE),
      .twiddle_h_rsc_0_15_AWLEN(twiddle_h_rsc_0_15_AWLEN),
      .twiddle_h_rsc_0_15_AWADDR(twiddle_h_rsc_0_15_AWADDR),
      .twiddle_h_rsc_0_15_AWID(twiddle_h_rsc_0_15_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsc_0_15_i_oswt(reg_twiddle_rsc_0_7_i_oswt_cse),
      .twiddle_h_rsc_0_15_i_wen_comp(twiddle_h_rsc_0_15_i_wen_comp),
      .twiddle_h_rsc_0_15_i_s_raddr_core(nl_peaseNTT_core_twiddle_h_rsc_0_15_i_inst_twiddle_h_rsc_0_15_i_s_raddr_core[5:0]),
      .twiddle_h_rsc_0_15_i_s_din_mxwt(twiddle_h_rsc_0_15_i_s_din_mxwt)
    );
  peaseNTT_core_xt_rsc_triosy_1_31_obj peaseNTT_core_xt_rsc_triosy_1_31_obj_inst
      (
      .xt_rsc_triosy_1_31_lz(xt_rsc_triosy_1_31_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_31_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_30_obj peaseNTT_core_xt_rsc_triosy_1_30_obj_inst
      (
      .xt_rsc_triosy_1_30_lz(xt_rsc_triosy_1_30_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_30_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_29_obj peaseNTT_core_xt_rsc_triosy_1_29_obj_inst
      (
      .xt_rsc_triosy_1_29_lz(xt_rsc_triosy_1_29_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_29_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_28_obj peaseNTT_core_xt_rsc_triosy_1_28_obj_inst
      (
      .xt_rsc_triosy_1_28_lz(xt_rsc_triosy_1_28_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_28_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_27_obj peaseNTT_core_xt_rsc_triosy_1_27_obj_inst
      (
      .xt_rsc_triosy_1_27_lz(xt_rsc_triosy_1_27_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_27_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_26_obj peaseNTT_core_xt_rsc_triosy_1_26_obj_inst
      (
      .xt_rsc_triosy_1_26_lz(xt_rsc_triosy_1_26_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_26_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_25_obj peaseNTT_core_xt_rsc_triosy_1_25_obj_inst
      (
      .xt_rsc_triosy_1_25_lz(xt_rsc_triosy_1_25_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_25_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_24_obj peaseNTT_core_xt_rsc_triosy_1_24_obj_inst
      (
      .xt_rsc_triosy_1_24_lz(xt_rsc_triosy_1_24_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_24_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_23_obj peaseNTT_core_xt_rsc_triosy_1_23_obj_inst
      (
      .xt_rsc_triosy_1_23_lz(xt_rsc_triosy_1_23_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_23_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_22_obj peaseNTT_core_xt_rsc_triosy_1_22_obj_inst
      (
      .xt_rsc_triosy_1_22_lz(xt_rsc_triosy_1_22_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_22_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_21_obj peaseNTT_core_xt_rsc_triosy_1_21_obj_inst
      (
      .xt_rsc_triosy_1_21_lz(xt_rsc_triosy_1_21_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_21_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_20_obj peaseNTT_core_xt_rsc_triosy_1_20_obj_inst
      (
      .xt_rsc_triosy_1_20_lz(xt_rsc_triosy_1_20_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_20_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_19_obj peaseNTT_core_xt_rsc_triosy_1_19_obj_inst
      (
      .xt_rsc_triosy_1_19_lz(xt_rsc_triosy_1_19_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_19_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_18_obj peaseNTT_core_xt_rsc_triosy_1_18_obj_inst
      (
      .xt_rsc_triosy_1_18_lz(xt_rsc_triosy_1_18_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_18_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_17_obj peaseNTT_core_xt_rsc_triosy_1_17_obj_inst
      (
      .xt_rsc_triosy_1_17_lz(xt_rsc_triosy_1_17_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_17_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_16_obj peaseNTT_core_xt_rsc_triosy_1_16_obj_inst
      (
      .xt_rsc_triosy_1_16_lz(xt_rsc_triosy_1_16_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_16_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_15_obj peaseNTT_core_xt_rsc_triosy_1_15_obj_inst
      (
      .xt_rsc_triosy_1_15_lz(xt_rsc_triosy_1_15_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_15_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_14_obj peaseNTT_core_xt_rsc_triosy_1_14_obj_inst
      (
      .xt_rsc_triosy_1_14_lz(xt_rsc_triosy_1_14_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_14_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_13_obj peaseNTT_core_xt_rsc_triosy_1_13_obj_inst
      (
      .xt_rsc_triosy_1_13_lz(xt_rsc_triosy_1_13_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_13_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_12_obj peaseNTT_core_xt_rsc_triosy_1_12_obj_inst
      (
      .xt_rsc_triosy_1_12_lz(xt_rsc_triosy_1_12_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_12_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_11_obj peaseNTT_core_xt_rsc_triosy_1_11_obj_inst
      (
      .xt_rsc_triosy_1_11_lz(xt_rsc_triosy_1_11_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_11_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_10_obj peaseNTT_core_xt_rsc_triosy_1_10_obj_inst
      (
      .xt_rsc_triosy_1_10_lz(xt_rsc_triosy_1_10_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_10_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_9_obj peaseNTT_core_xt_rsc_triosy_1_9_obj_inst (
      .xt_rsc_triosy_1_9_lz(xt_rsc_triosy_1_9_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_9_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_8_obj peaseNTT_core_xt_rsc_triosy_1_8_obj_inst (
      .xt_rsc_triosy_1_8_lz(xt_rsc_triosy_1_8_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_8_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_7_obj peaseNTT_core_xt_rsc_triosy_1_7_obj_inst (
      .xt_rsc_triosy_1_7_lz(xt_rsc_triosy_1_7_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_7_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_6_obj peaseNTT_core_xt_rsc_triosy_1_6_obj_inst (
      .xt_rsc_triosy_1_6_lz(xt_rsc_triosy_1_6_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_6_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_5_obj peaseNTT_core_xt_rsc_triosy_1_5_obj_inst (
      .xt_rsc_triosy_1_5_lz(xt_rsc_triosy_1_5_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_5_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_4_obj peaseNTT_core_xt_rsc_triosy_1_4_obj_inst (
      .xt_rsc_triosy_1_4_lz(xt_rsc_triosy_1_4_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_4_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_3_obj peaseNTT_core_xt_rsc_triosy_1_3_obj_inst (
      .xt_rsc_triosy_1_3_lz(xt_rsc_triosy_1_3_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_3_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_2_obj peaseNTT_core_xt_rsc_triosy_1_2_obj_inst (
      .xt_rsc_triosy_1_2_lz(xt_rsc_triosy_1_2_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_2_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_1_obj peaseNTT_core_xt_rsc_triosy_1_1_obj_inst (
      .xt_rsc_triosy_1_1_lz(xt_rsc_triosy_1_1_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_1_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_1_0_obj peaseNTT_core_xt_rsc_triosy_1_0_obj_inst (
      .xt_rsc_triosy_1_0_lz(xt_rsc_triosy_1_0_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_1_0_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_31_obj peaseNTT_core_xt_rsc_triosy_0_31_obj_inst
      (
      .xt_rsc_triosy_0_31_lz(xt_rsc_triosy_0_31_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_31_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_30_obj peaseNTT_core_xt_rsc_triosy_0_30_obj_inst
      (
      .xt_rsc_triosy_0_30_lz(xt_rsc_triosy_0_30_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_30_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_29_obj peaseNTT_core_xt_rsc_triosy_0_29_obj_inst
      (
      .xt_rsc_triosy_0_29_lz(xt_rsc_triosy_0_29_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_29_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_28_obj peaseNTT_core_xt_rsc_triosy_0_28_obj_inst
      (
      .xt_rsc_triosy_0_28_lz(xt_rsc_triosy_0_28_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_28_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_27_obj peaseNTT_core_xt_rsc_triosy_0_27_obj_inst
      (
      .xt_rsc_triosy_0_27_lz(xt_rsc_triosy_0_27_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_27_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_26_obj peaseNTT_core_xt_rsc_triosy_0_26_obj_inst
      (
      .xt_rsc_triosy_0_26_lz(xt_rsc_triosy_0_26_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_26_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_25_obj peaseNTT_core_xt_rsc_triosy_0_25_obj_inst
      (
      .xt_rsc_triosy_0_25_lz(xt_rsc_triosy_0_25_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_25_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_24_obj peaseNTT_core_xt_rsc_triosy_0_24_obj_inst
      (
      .xt_rsc_triosy_0_24_lz(xt_rsc_triosy_0_24_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_24_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_23_obj peaseNTT_core_xt_rsc_triosy_0_23_obj_inst
      (
      .xt_rsc_triosy_0_23_lz(xt_rsc_triosy_0_23_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_23_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_22_obj peaseNTT_core_xt_rsc_triosy_0_22_obj_inst
      (
      .xt_rsc_triosy_0_22_lz(xt_rsc_triosy_0_22_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_22_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_21_obj peaseNTT_core_xt_rsc_triosy_0_21_obj_inst
      (
      .xt_rsc_triosy_0_21_lz(xt_rsc_triosy_0_21_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_21_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_20_obj peaseNTT_core_xt_rsc_triosy_0_20_obj_inst
      (
      .xt_rsc_triosy_0_20_lz(xt_rsc_triosy_0_20_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_20_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_19_obj peaseNTT_core_xt_rsc_triosy_0_19_obj_inst
      (
      .xt_rsc_triosy_0_19_lz(xt_rsc_triosy_0_19_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_19_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_18_obj peaseNTT_core_xt_rsc_triosy_0_18_obj_inst
      (
      .xt_rsc_triosy_0_18_lz(xt_rsc_triosy_0_18_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_18_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_17_obj peaseNTT_core_xt_rsc_triosy_0_17_obj_inst
      (
      .xt_rsc_triosy_0_17_lz(xt_rsc_triosy_0_17_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_17_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_16_obj peaseNTT_core_xt_rsc_triosy_0_16_obj_inst
      (
      .xt_rsc_triosy_0_16_lz(xt_rsc_triosy_0_16_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_16_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_15_obj peaseNTT_core_xt_rsc_triosy_0_15_obj_inst
      (
      .xt_rsc_triosy_0_15_lz(xt_rsc_triosy_0_15_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_15_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_14_obj peaseNTT_core_xt_rsc_triosy_0_14_obj_inst
      (
      .xt_rsc_triosy_0_14_lz(xt_rsc_triosy_0_14_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_14_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_13_obj peaseNTT_core_xt_rsc_triosy_0_13_obj_inst
      (
      .xt_rsc_triosy_0_13_lz(xt_rsc_triosy_0_13_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_13_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_12_obj peaseNTT_core_xt_rsc_triosy_0_12_obj_inst
      (
      .xt_rsc_triosy_0_12_lz(xt_rsc_triosy_0_12_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_12_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_11_obj peaseNTT_core_xt_rsc_triosy_0_11_obj_inst
      (
      .xt_rsc_triosy_0_11_lz(xt_rsc_triosy_0_11_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_11_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_10_obj peaseNTT_core_xt_rsc_triosy_0_10_obj_inst
      (
      .xt_rsc_triosy_0_10_lz(xt_rsc_triosy_0_10_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_10_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_9_obj peaseNTT_core_xt_rsc_triosy_0_9_obj_inst (
      .xt_rsc_triosy_0_9_lz(xt_rsc_triosy_0_9_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_9_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_8_obj peaseNTT_core_xt_rsc_triosy_0_8_obj_inst (
      .xt_rsc_triosy_0_8_lz(xt_rsc_triosy_0_8_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_8_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_7_obj peaseNTT_core_xt_rsc_triosy_0_7_obj_inst (
      .xt_rsc_triosy_0_7_lz(xt_rsc_triosy_0_7_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_7_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_6_obj peaseNTT_core_xt_rsc_triosy_0_6_obj_inst (
      .xt_rsc_triosy_0_6_lz(xt_rsc_triosy_0_6_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_6_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_5_obj peaseNTT_core_xt_rsc_triosy_0_5_obj_inst (
      .xt_rsc_triosy_0_5_lz(xt_rsc_triosy_0_5_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_5_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_4_obj peaseNTT_core_xt_rsc_triosy_0_4_obj_inst (
      .xt_rsc_triosy_0_4_lz(xt_rsc_triosy_0_4_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_4_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_3_obj peaseNTT_core_xt_rsc_triosy_0_3_obj_inst (
      .xt_rsc_triosy_0_3_lz(xt_rsc_triosy_0_3_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_3_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_2_obj peaseNTT_core_xt_rsc_triosy_0_2_obj_inst (
      .xt_rsc_triosy_0_2_lz(xt_rsc_triosy_0_2_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_2_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_1_obj peaseNTT_core_xt_rsc_triosy_0_1_obj_inst (
      .xt_rsc_triosy_0_1_lz(xt_rsc_triosy_0_1_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_1_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_xt_rsc_triosy_0_0_obj peaseNTT_core_xt_rsc_triosy_0_0_obj_inst (
      .xt_rsc_triosy_0_0_lz(xt_rsc_triosy_0_0_lz),
      .core_wten(core_wten),
      .xt_rsc_triosy_0_0_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_p_rsc_triosy_obj peaseNTT_core_p_rsc_triosy_obj_inst (
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_r_rsc_triosy_obj peaseNTT_core_r_rsc_triosy_obj_inst (
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_15_obj peaseNTT_core_twiddle_rsc_triosy_0_15_obj_inst
      (
      .twiddle_rsc_triosy_0_15_lz(twiddle_rsc_triosy_0_15_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_15_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_14_obj peaseNTT_core_twiddle_rsc_triosy_0_14_obj_inst
      (
      .twiddle_rsc_triosy_0_14_lz(twiddle_rsc_triosy_0_14_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_14_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_13_obj peaseNTT_core_twiddle_rsc_triosy_0_13_obj_inst
      (
      .twiddle_rsc_triosy_0_13_lz(twiddle_rsc_triosy_0_13_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_13_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_12_obj peaseNTT_core_twiddle_rsc_triosy_0_12_obj_inst
      (
      .twiddle_rsc_triosy_0_12_lz(twiddle_rsc_triosy_0_12_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_12_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_11_obj peaseNTT_core_twiddle_rsc_triosy_0_11_obj_inst
      (
      .twiddle_rsc_triosy_0_11_lz(twiddle_rsc_triosy_0_11_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_11_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_10_obj peaseNTT_core_twiddle_rsc_triosy_0_10_obj_inst
      (
      .twiddle_rsc_triosy_0_10_lz(twiddle_rsc_triosy_0_10_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_10_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_9_obj peaseNTT_core_twiddle_rsc_triosy_0_9_obj_inst
      (
      .twiddle_rsc_triosy_0_9_lz(twiddle_rsc_triosy_0_9_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_9_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_8_obj peaseNTT_core_twiddle_rsc_triosy_0_8_obj_inst
      (
      .twiddle_rsc_triosy_0_8_lz(twiddle_rsc_triosy_0_8_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_8_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_7_obj peaseNTT_core_twiddle_rsc_triosy_0_7_obj_inst
      (
      .twiddle_rsc_triosy_0_7_lz(twiddle_rsc_triosy_0_7_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_7_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_6_obj peaseNTT_core_twiddle_rsc_triosy_0_6_obj_inst
      (
      .twiddle_rsc_triosy_0_6_lz(twiddle_rsc_triosy_0_6_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_6_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_5_obj peaseNTT_core_twiddle_rsc_triosy_0_5_obj_inst
      (
      .twiddle_rsc_triosy_0_5_lz(twiddle_rsc_triosy_0_5_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_5_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_4_obj peaseNTT_core_twiddle_rsc_triosy_0_4_obj_inst
      (
      .twiddle_rsc_triosy_0_4_lz(twiddle_rsc_triosy_0_4_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_4_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_3_obj peaseNTT_core_twiddle_rsc_triosy_0_3_obj_inst
      (
      .twiddle_rsc_triosy_0_3_lz(twiddle_rsc_triosy_0_3_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_3_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_2_obj peaseNTT_core_twiddle_rsc_triosy_0_2_obj_inst
      (
      .twiddle_rsc_triosy_0_2_lz(twiddle_rsc_triosy_0_2_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_2_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_1_obj peaseNTT_core_twiddle_rsc_triosy_0_1_obj_inst
      (
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_1_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_rsc_triosy_0_0_obj peaseNTT_core_twiddle_rsc_triosy_0_0_obj_inst
      (
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_0_0_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj peaseNTT_core_twiddle_h_rsc_triosy_0_15_obj_inst
      (
      .twiddle_h_rsc_triosy_0_15_lz(twiddle_h_rsc_triosy_0_15_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_15_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj peaseNTT_core_twiddle_h_rsc_triosy_0_14_obj_inst
      (
      .twiddle_h_rsc_triosy_0_14_lz(twiddle_h_rsc_triosy_0_14_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_14_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj peaseNTT_core_twiddle_h_rsc_triosy_0_13_obj_inst
      (
      .twiddle_h_rsc_triosy_0_13_lz(twiddle_h_rsc_triosy_0_13_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_13_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj peaseNTT_core_twiddle_h_rsc_triosy_0_12_obj_inst
      (
      .twiddle_h_rsc_triosy_0_12_lz(twiddle_h_rsc_triosy_0_12_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_12_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj peaseNTT_core_twiddle_h_rsc_triosy_0_11_obj_inst
      (
      .twiddle_h_rsc_triosy_0_11_lz(twiddle_h_rsc_triosy_0_11_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_11_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj peaseNTT_core_twiddle_h_rsc_triosy_0_10_obj_inst
      (
      .twiddle_h_rsc_triosy_0_10_lz(twiddle_h_rsc_triosy_0_10_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_10_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj peaseNTT_core_twiddle_h_rsc_triosy_0_9_obj_inst
      (
      .twiddle_h_rsc_triosy_0_9_lz(twiddle_h_rsc_triosy_0_9_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_9_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj peaseNTT_core_twiddle_h_rsc_triosy_0_8_obj_inst
      (
      .twiddle_h_rsc_triosy_0_8_lz(twiddle_h_rsc_triosy_0_8_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_8_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj peaseNTT_core_twiddle_h_rsc_triosy_0_7_obj_inst
      (
      .twiddle_h_rsc_triosy_0_7_lz(twiddle_h_rsc_triosy_0_7_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_7_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj peaseNTT_core_twiddle_h_rsc_triosy_0_6_obj_inst
      (
      .twiddle_h_rsc_triosy_0_6_lz(twiddle_h_rsc_triosy_0_6_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_6_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj peaseNTT_core_twiddle_h_rsc_triosy_0_5_obj_inst
      (
      .twiddle_h_rsc_triosy_0_5_lz(twiddle_h_rsc_triosy_0_5_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_5_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj peaseNTT_core_twiddle_h_rsc_triosy_0_4_obj_inst
      (
      .twiddle_h_rsc_triosy_0_4_lz(twiddle_h_rsc_triosy_0_4_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_4_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj peaseNTT_core_twiddle_h_rsc_triosy_0_3_obj_inst
      (
      .twiddle_h_rsc_triosy_0_3_lz(twiddle_h_rsc_triosy_0_3_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_3_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj peaseNTT_core_twiddle_h_rsc_triosy_0_2_obj_inst
      (
      .twiddle_h_rsc_triosy_0_2_lz(twiddle_h_rsc_triosy_0_2_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_2_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj peaseNTT_core_twiddle_h_rsc_triosy_0_1_obj_inst
      (
      .twiddle_h_rsc_triosy_0_1_lz(twiddle_h_rsc_triosy_0_1_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_1_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj peaseNTT_core_twiddle_h_rsc_triosy_0_0_obj_inst
      (
      .twiddle_h_rsc_triosy_0_0_lz(twiddle_h_rsc_triosy_0_0_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_0_0_obj_iswt0(reg_xt_rsc_triosy_1_31_obj_iswt0_cse)
    );
  peaseNTT_core_staller peaseNTT_core_staller_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .twiddle_rsc_0_0_i_wen_comp(twiddle_rsc_0_0_i_wen_comp),
      .twiddle_rsc_0_1_i_wen_comp(twiddle_rsc_0_1_i_wen_comp),
      .twiddle_rsc_0_2_i_wen_comp(twiddle_rsc_0_2_i_wen_comp),
      .twiddle_rsc_0_3_i_wen_comp(twiddle_rsc_0_3_i_wen_comp),
      .twiddle_rsc_0_4_i_wen_comp(twiddle_rsc_0_4_i_wen_comp),
      .twiddle_rsc_0_5_i_wen_comp(twiddle_rsc_0_5_i_wen_comp),
      .twiddle_rsc_0_6_i_wen_comp(twiddle_rsc_0_6_i_wen_comp),
      .twiddle_rsc_0_7_i_wen_comp(twiddle_rsc_0_7_i_wen_comp),
      .twiddle_rsc_0_8_i_wen_comp(twiddle_rsc_0_8_i_wen_comp),
      .twiddle_rsc_0_9_i_wen_comp(twiddle_rsc_0_9_i_wen_comp),
      .twiddle_rsc_0_10_i_wen_comp(twiddle_rsc_0_10_i_wen_comp),
      .twiddle_rsc_0_11_i_wen_comp(twiddle_rsc_0_11_i_wen_comp),
      .twiddle_rsc_0_12_i_wen_comp(twiddle_rsc_0_12_i_wen_comp),
      .twiddle_rsc_0_13_i_wen_comp(twiddle_rsc_0_13_i_wen_comp),
      .twiddle_rsc_0_14_i_wen_comp(twiddle_rsc_0_14_i_wen_comp),
      .twiddle_rsc_0_15_i_wen_comp(twiddle_rsc_0_15_i_wen_comp),
      .twiddle_h_rsc_0_0_i_wen_comp(twiddle_h_rsc_0_0_i_wen_comp),
      .twiddle_h_rsc_0_1_i_wen_comp(twiddle_h_rsc_0_1_i_wen_comp),
      .twiddle_h_rsc_0_2_i_wen_comp(twiddle_h_rsc_0_2_i_wen_comp),
      .twiddle_h_rsc_0_3_i_wen_comp(twiddle_h_rsc_0_3_i_wen_comp),
      .twiddle_h_rsc_0_4_i_wen_comp(twiddle_h_rsc_0_4_i_wen_comp),
      .twiddle_h_rsc_0_5_i_wen_comp(twiddle_h_rsc_0_5_i_wen_comp),
      .twiddle_h_rsc_0_6_i_wen_comp(twiddle_h_rsc_0_6_i_wen_comp),
      .twiddle_h_rsc_0_7_i_wen_comp(twiddle_h_rsc_0_7_i_wen_comp),
      .twiddle_h_rsc_0_8_i_wen_comp(twiddle_h_rsc_0_8_i_wen_comp),
      .twiddle_h_rsc_0_9_i_wen_comp(twiddle_h_rsc_0_9_i_wen_comp),
      .twiddle_h_rsc_0_10_i_wen_comp(twiddle_h_rsc_0_10_i_wen_comp),
      .twiddle_h_rsc_0_11_i_wen_comp(twiddle_h_rsc_0_11_i_wen_comp),
      .twiddle_h_rsc_0_12_i_wen_comp(twiddle_h_rsc_0_12_i_wen_comp),
      .twiddle_h_rsc_0_13_i_wen_comp(twiddle_h_rsc_0_13_i_wen_comp),
      .twiddle_h_rsc_0_14_i_wen_comp(twiddle_h_rsc_0_14_i_wen_comp),
      .twiddle_h_rsc_0_15_i_wen_comp(twiddle_h_rsc_0_15_i_wen_comp)
    );
  peaseNTT_core_core_fsm peaseNTT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .fsm_output(fsm_output),
      .INNER_LOOP1_C_0_tr0(INNER_LOOP1_nor_tmp),
      .INNER_LOOP2_C_0_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr0[0:0]),
      .INNER_LOOP2_C_0_tr1(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP2_C_0_tr1[0:0]),
      .INNER_LOOP3_C_0_tr0(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP3_C_0_tr0[0:0]),
      .INNER_LOOP4_C_0_tr0(and_dcpl_144),
      .INNER_LOOP4_C_0_tr1(nl_peaseNTT_core_core_fsm_inst_INNER_LOOP4_C_0_tr1[0:0])
    );
  assign or_67_rmff = ((and_dcpl_147 | ((~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_191_itm_12)
      & INNER_LOOP3_stage_0_13)) & (fsm_output[6])) | ((and_dcpl_149 | (INNER_LOOP1_stage_0_13
      & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_160_itm_12))) & (fsm_output[2]))
      | and_252_cse | and_253_cse;
  assign or_166_rmff = ((and_dcpl_155 | (INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_191_itm_12
      & INNER_LOOP3_stage_0_13)) & (fsm_output[6])) | ((and_dcpl_157 | (INNER_LOOP1_stage_0_13
      & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_160_itm_12)) & (fsm_output[2])) |
      and_252_cse | and_253_cse;
  assign or_248_rmff = ((and_dcpl_158 | and_dcpl_147) & (fsm_output[6])) | ((and_dcpl_149
      | and_dcpl_159) & (fsm_output[2])) | and_655_cse | and_656_cse;
  assign or_347_rmff = ((and_dcpl_164 | and_dcpl_155) & (fsm_output[6])) | ((and_dcpl_157
      | and_dcpl_165) & (fsm_output[2])) | and_655_cse | and_656_cse;
  assign or_429_rmff = and_1056_cse | and_1057_cse | and_1058_cse | and_1059_cse;
  assign or_435_rmff = and_1058_cse | and_1059_cse;
  assign or_436_rmff = and_1056_cse | and_1057_cse;
  assign or_512_rmff = and_1056_cse | and_1057_cse | and_1229_cse | and_1230_cse;
  assign or_517_rmff = and_1229_cse | and_1230_cse;
  assign or_578_rmff = and_1363_cse | and_1364_cse | and_1058_cse | and_1059_cse;
  assign or_584_rmff = and_1363_cse | and_1364_cse;
  assign or_660_rmff = and_1363_cse | and_1364_cse | and_1229_cse | and_1230_cse;
  assign and_1665_cse = INNER_LOOP1_stage_0 & (fsm_output[2]);
  assign and_1666_cse = INNER_LOOP2_stage_0 & (fsm_output[4]);
  assign or_833_rmff = ((INNER_LOOP3_stage_0_2 | INNER_LOOP3_stage_0_4 | INNER_LOOP3_stage_0_3)
      & (fsm_output[6])) | ((INNER_LOOP1_stage_0_3 | INNER_LOOP1_stage_0_2 | INNER_LOOP1_stage_0_4)
      & (fsm_output[2])) | ((INNER_LOOP2_stage_0_3 | INNER_LOOP2_stage_0_4 | INNER_LOOP2_stage_0_2)
      & (fsm_output[4])) | ((INNER_LOOP4_stage_0_2 | INNER_LOOP4_stage_0_4 | INNER_LOOP4_stage_0_3)
      & (fsm_output[8]));
  assign INNER_LOOP1_tw_h_and_49_cse = (operator_33_true_3_lshift_psp_1_0_sva==2'b00)
      & (fsm_output[8]);
  assign INNER_LOOP1_tw_h_and_51_cse = (operator_33_true_3_lshift_psp_1_0_sva==2'b01)
      & (fsm_output[8]);
  assign INNER_LOOP1_tw_h_and_53_cse = (operator_33_true_3_lshift_psp_1_0_sva==2'b10)
      & (fsm_output[8]);
  assign INNER_LOOP1_tw_h_and_55_cse = (operator_33_true_3_lshift_psp_1_0_sva==2'b11)
      & (fsm_output[8]);
  assign INNER_LOOP1_tw_h_and_44_cse = butterFly2_15_tw_equal_tmp_1 & (fsm_output[6]);
  assign butterFly2_7_tw_nor_cse = ~((operator_33_true_2_lshift_psp_2_0_sva[2:1]!=2'b00));
  assign INNER_LOOP1_tw_h_and_45_cse = (operator_33_true_2_lshift_psp_2_0_sva[0])
      & butterFly2_7_tw_nor_cse & (fsm_output[6]);
  assign butterFly2_7_tw_nor_1_cse = ~((operator_33_true_2_lshift_psp_2_0_sva[2])
      | (operator_33_true_2_lshift_psp_2_0_sva[0]));
  assign INNER_LOOP1_tw_h_and_46_cse = (operator_33_true_2_lshift_psp_2_0_sva[1])
      & butterFly2_7_tw_nor_1_cse & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_47_cse = butterFly2_15_tw_equal_tmp_3_1 & (fsm_output[6]);
  assign butterFly2_7_tw_nor_2_cse = ~((operator_33_true_2_lshift_psp_2_0_sva[1:0]!=2'b00));
  assign INNER_LOOP1_tw_h_and_48_cse = (operator_33_true_2_lshift_psp_2_0_sva[2])
      & butterFly2_7_tw_nor_2_cse & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_50_cse = butterFly2_15_tw_equal_tmp_5_1 & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_52_cse = butterFly2_15_tw_equal_tmp_6_1 & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_54_cse = butterFly2_15_tw_equal_tmp_7_1 & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_or_9_cse = INNER_LOOP1_tw_h_and_48_cse | INNER_LOOP1_tw_h_and_49_cse;
  assign INNER_LOOP1_tw_h_or_10_cse = INNER_LOOP1_tw_h_and_50_cse | INNER_LOOP1_tw_h_and_51_cse;
  assign INNER_LOOP1_tw_h_or_11_cse = INNER_LOOP1_tw_h_and_52_cse | INNER_LOOP1_tw_h_and_53_cse;
  assign INNER_LOOP1_tw_h_or_12_cse = INNER_LOOP1_tw_h_and_54_cse | INNER_LOOP1_tw_h_and_55_cse;
  assign INNER_LOOP1_tw_h_and_41_cse = (operator_33_true_2_lshift_psp_2_0_sva[2:1]==2'b01)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_42_cse = (operator_33_true_2_lshift_psp_2_0_sva[2:1]==2'b10)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_43_cse = (operator_33_true_2_lshift_psp_2_0_sva[2:1]==2'b11)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_40_cse = butterFly2_7_tw_nor_cse & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_37_cse = (operator_33_true_2_lshift_psp_2_0_sva[0])
      & (~ (operator_33_true_2_lshift_psp_2_0_sva[2])) & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_38_cse = (operator_33_true_2_lshift_psp_2_0_sva[2])
      & (~ (operator_33_true_2_lshift_psp_2_0_sva[0])) & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_39_cse = (operator_33_true_2_lshift_psp_2_0_sva[2])
      & (operator_33_true_2_lshift_psp_2_0_sva[0]) & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_36_cse = butterFly2_7_tw_nor_1_cse & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_30_cse = (operator_33_true_2_lshift_psp_2_0_sva[1:0]==2'b01)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_31_cse = (operator_33_true_2_lshift_psp_2_0_sva[1:0]==2'b10)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_32_cse = (operator_33_true_2_lshift_psp_2_0_sva[1:0]==2'b11)
      & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_and_29_cse = butterFly2_7_tw_nor_2_cse & (fsm_output[6]);
  assign INNER_LOOP1_tw_h_or_3_cse = or_dcpl_29 | INNER_LOOP1_tw_h_and_44_cse;
  assign INNER_LOOP1_tw_h_or_1_cse = or_dcpl_29 | INNER_LOOP1_tw_h_and_36_cse;
  assign mult_4_t_and_nl = (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1) &
      (fsm_output[2]);
  assign mult_4_t_and_1_nl = INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1 & (fsm_output[2]);
  assign mult_4_t_and_2_nl = (~ twiddle_h_rsc_0_0_i_s_raddr_core_4) & (fsm_output[6]);
  assign mult_4_t_and_3_nl = twiddle_h_rsc_0_0_i_s_raddr_core_4 & (fsm_output[6]);
  assign mult_4_t_mux1h_rmff = MUX1HOT_v_32_6_2(xt_rsc_0_9_i_qa_d_mxwt, xt_rsc_1_9_i_qa_d_mxwt,
      mult_t_mul_cmp_12_a_mx0w3, xt_rsc_0_7_i_qa_d_mxwt, xt_rsc_1_7_i_qa_d_mxwt,
      tmp_23_lpi_3_dfm_mx0, {mult_4_t_and_nl , mult_4_t_and_1_nl , (fsm_output[4])
      , mult_4_t_and_2_nl , mult_4_t_and_3_nl , (fsm_output[8])});
  assign INNER_LOOP1_tw_h_or_cse = or_dcpl_29 | INNER_LOOP1_tw_h_and_29_cse;
  assign or_956_rmff = ((INNER_LOOP3_stage_0_5 | INNER_LOOP3_stage_0_6 | INNER_LOOP3_stage_0_7)
      & (fsm_output[6])) | ((INNER_LOOP1_stage_0_6 | INNER_LOOP1_stage_0_7 | INNER_LOOP1_stage_0_5)
      & (fsm_output[2])) | ((INNER_LOOP2_stage_0_6 | INNER_LOOP2_stage_0_7 | INNER_LOOP2_stage_0_5)
      & (fsm_output[4])) | ((INNER_LOOP4_stage_0_5 | INNER_LOOP4_stage_0_6 | INNER_LOOP4_stage_0_7)
      & (fsm_output[8]));
  assign modulo_add_qelse_and_cse = core_wen & INNER_LOOP1_stage_0_11;
  assign butterFly1_and_cse = core_wen & INNER_LOOP1_stage_0_10;
  assign mult_15_if_and_cse = core_wen & INNER_LOOP1_stage_0_9;
  assign INNER_LOOP1_r_and_7_cse = core_wen & INNER_LOOP1_stage_0;
  assign mult_15_z_and_cse = core_wen & INNER_LOOP1_stage_0_8;
  assign mult_15_z_and_cse_1 = core_wen & (INNER_LOOP3_stage_0_8 | INNER_LOOP2_stage_0_8
      | INNER_LOOP4_stage_0_8 | INNER_LOOP1_stage_0_8);
  assign mult_15_z_and_1_cse = core_wen & INNER_LOOP1_stage_0_7;
  assign mult_15_z_and_2_cse = core_wen & INNER_LOOP1_stage_0_6;
  assign mult_15_z_and_3_cse = core_wen & (INNER_LOOP2_stage_0_5 | INNER_LOOP4_stage_0_5
      | INNER_LOOP1_stage_0_5 | INNER_LOOP3_stage_0_5);
  assign INNER_LOOP1_r_and_20_cse = core_wen & INNER_LOOP1_stage_0_5;
  assign INNER_LOOP1_r_and_23_cse = core_wen & INNER_LOOP1_stage_0_4;
  assign INNER_LOOP1_r_and_26_cse = core_wen & INNER_LOOP1_stage_0_3;
  assign INNER_LOOP1_r_and_29_cse = core_wen & INNER_LOOP1_stage_0_2;
  assign modulo_add_16_qelse_and_cse = core_wen & INNER_LOOP2_stage_0_11;
  assign butterFly1_31_and_cse = core_wen & INNER_LOOP2_stage_0_10;
  assign mult_31_if_and_cse = core_wen & INNER_LOOP2_stage_0_9;
  assign INNER_LOOP2_r_and_3_cse = core_wen & INNER_LOOP2_stage_0;
  assign INNER_LOOP1_r_INNER_LOOP1_r_and_2_cse = MUX_v_5_2_2(5'b00000, (z_out_33[4:0]),
      (fsm_output[4]));
  assign INNER_LOOP2_r_and_4_cse = core_wen & ((fsm_output[3]) | (INNER_LOOP2_stage_0
      & (~ (z_out_33[5])) & (fsm_output[4])));
  assign mult_31_z_and_cse = core_wen & INNER_LOOP2_stage_0_8;
  assign mult_31_z_and_1_cse = core_wen & INNER_LOOP2_stage_0_7;
  assign mult_31_z_and_2_cse = core_wen & INNER_LOOP2_stage_0_6;
  assign butterFly1_31_f1_and_4_cse = core_wen & INNER_LOOP2_stage_0_5;
  assign butterFly1_31_f1_and_5_cse = core_wen & INNER_LOOP2_stage_0_4;
  assign butterFly1_31_f1_and_6_cse = core_wen & INNER_LOOP2_stage_0_3;
  assign butterFly1_31_f1_and_7_cse = core_wen & (INNER_LOOP4_stage_0_2 | INNER_LOOP2_stage_0_2);
  assign c_or_cse = (fsm_output[4]) | (fsm_output[8]);
  assign modulo_add_32_qelse_and_cse = core_wen & INNER_LOOP3_stage_0_11;
  assign butterFly2_and_cse = core_wen & INNER_LOOP3_stage_0_10;
  assign mult_47_if_and_cse = core_wen & INNER_LOOP3_stage_0_9;
  assign butterFly2_15_tw_and_cse = core_wen & INNER_LOOP3_stage_0;
  assign INNER_LOOP3_INNER_LOOP3_and_1_cse = INNER_LOOP3_stage_0 & (fsm_output[6]);
  assign mult_47_z_and_cse = core_wen & INNER_LOOP3_stage_0_8;
  assign mult_47_z_and_1_cse = core_wen & INNER_LOOP3_stage_0_7;
  assign mult_47_z_and_2_cse = core_wen & INNER_LOOP3_stage_0_6;
  assign INNER_LOOP3_r_and_19_cse = core_wen & INNER_LOOP3_stage_0_5;
  assign INNER_LOOP3_r_and_22_cse = core_wen & INNER_LOOP3_stage_0_4;
  assign INNER_LOOP3_r_and_25_cse = core_wen & INNER_LOOP3_stage_0_3;
  assign INNER_LOOP3_r_and_28_cse = core_wen & INNER_LOOP3_stage_0_2;
  assign modulo_add_48_qelse_and_cse = core_wen & INNER_LOOP4_stage_0_11;
  assign butterFly2_31_and_cse = core_wen & INNER_LOOP4_stage_0_10;
  assign mult_63_if_and_cse = core_wen & INNER_LOOP4_stage_0_9;
  assign INNER_LOOP4_r_and_3_cse = core_wen & INNER_LOOP4_stage_0;
  assign INNER_LOOP1_r_INNER_LOOP1_r_and_6_cse = MUX_v_5_2_2(5'b00000, (INNER_LOOP4_r_9_4_sva_2[4:0]),
      (fsm_output[8]));
  assign INNER_LOOP4_INNER_LOOP4_and_1_cse = INNER_LOOP4_stage_0 & (fsm_output[8]);
  assign INNER_LOOP4_r_and_4_cse = core_wen & ((fsm_output[7]) | (INNER_LOOP4_stage_0
      & (~ (INNER_LOOP4_r_9_4_sva_2[5])) & (fsm_output[8])));
  assign mult_63_z_and_cse = core_wen & INNER_LOOP4_stage_0_8;
  assign mult_63_z_and_1_cse = core_wen & INNER_LOOP4_stage_0_7;
  assign mult_63_z_and_2_cse = core_wen & INNER_LOOP4_stage_0_6;
  assign butterFly2_31_f1_and_4_cse = core_wen & INNER_LOOP4_stage_0_5;
  assign butterFly2_31_f1_and_5_cse = core_wen & INNER_LOOP4_stage_0_4;
  assign butterFly2_31_f1_and_6_cse = core_wen & INNER_LOOP4_stage_0_3;
  assign mult_t_mul_cmp_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_31_i_qa_d_mxwt, xt_rsc_1_31_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_1_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_31_i_qa_d_mxwt, xt_rsc_1_31_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_2_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_27_i_qa_d_mxwt, xt_rsc_1_27_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_4_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_23_i_qa_d_mxwt, xt_rsc_1_23_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_5_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_21_i_qa_d_mxwt, xt_rsc_1_21_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_12_a_mx0w3 = MUX_v_32_2_2(yt_rsc_0_9_i_qa_d, yt_rsc_1_9_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_6_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_19_i_qa_d_mxwt, xt_rsc_1_19_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_11_a_mx0w3 = MUX_v_32_2_2(yt_rsc_0_11_i_qa_d, yt_rsc_1_11_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_7_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_17_i_qa_d_mxwt, xt_rsc_1_17_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_10_a_mx0w3 = MUX_v_32_2_2(yt_rsc_0_13_i_qa_d, yt_rsc_1_13_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_8_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_15_i_qa_d_mxwt, xt_rsc_1_15_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_9_a_mx0w3 = MUX_v_32_2_2(yt_rsc_0_15_i_qa_d, yt_rsc_1_15_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_9_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_15_i_qa_d_mxwt, xt_rsc_1_15_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_9_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_13_i_qa_d_mxwt, xt_rsc_1_13_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_10_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_13_i_qa_d_mxwt, xt_rsc_1_13_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_10_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_11_i_qa_d_mxwt, xt_rsc_1_11_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_11_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_11_i_qa_d_mxwt, xt_rsc_1_11_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_11_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_9_i_qa_d_mxwt, xt_rsc_1_9_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_13_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_7_i_qa_d_mxwt, xt_rsc_1_7_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_13_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_5_i_qa_d_mxwt, xt_rsc_1_5_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_14_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_5_i_qa_d_mxwt, xt_rsc_1_5_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_14_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_3_i_qa_d_mxwt, xt_rsc_1_3_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_t_mul_cmp_15_a_mx0w0 = MUX_v_32_2_2(xt_rsc_0_3_i_qa_d_mxwt, xt_rsc_1_3_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign mult_t_mul_cmp_15_a_mx0w2 = MUX_v_32_2_2(xt_rsc_0_1_i_qa_d_mxwt, xt_rsc_1_1_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign nl_operator_20_false_acc_cse_sva_mx0w0 = ({butterFly2_19_tw_asn_itm , c_1_sva})
      + 3'b111;
  assign operator_20_false_acc_cse_sva_mx0w0 = nl_operator_20_false_acc_cse_sva_mx0w0[2:0];
  assign nl_mult_res_sva_2 = mult_z_asn_itm_4 - reg_mult_z_asn_itm_1_cse;
  assign mult_res_sva_2 = nl_mult_res_sva_2[31:0];
  assign nl_mult_1_res_sva_2 = mult_1_z_asn_itm_4 - reg_mult_1_z_asn_itm_1_cse;
  assign mult_1_res_sva_2 = nl_mult_1_res_sva_2[31:0];
  assign nl_mult_2_res_sva_2 = mult_2_z_asn_itm_4 - reg_mult_2_z_asn_itm_1_cse;
  assign mult_2_res_sva_2 = nl_mult_2_res_sva_2[31:0];
  assign nl_mult_3_res_sva_2 = mult_3_z_asn_itm_4 - reg_mult_3_z_asn_itm_1_cse;
  assign mult_3_res_sva_2 = nl_mult_3_res_sva_2[31:0];
  assign nl_mult_4_res_sva_2 = mult_4_z_asn_itm_4 - reg_mult_4_z_asn_itm_1_cse;
  assign mult_4_res_sva_2 = nl_mult_4_res_sva_2[31:0];
  assign nl_mult_5_res_sva_2 = mult_5_z_asn_itm_4 - reg_mult_5_z_asn_itm_1_cse;
  assign mult_5_res_sva_2 = nl_mult_5_res_sva_2[31:0];
  assign nl_mult_6_res_sva_2 = mult_6_z_asn_itm_4 - reg_mult_6_z_asn_itm_1_cse;
  assign mult_6_res_sva_2 = nl_mult_6_res_sva_2[31:0];
  assign nl_mult_7_res_sva_2 = mult_7_z_asn_itm_4 - reg_mult_7_z_asn_itm_1_cse;
  assign mult_7_res_sva_2 = nl_mult_7_res_sva_2[31:0];
  assign nl_mult_8_res_sva_2 = mult_8_z_asn_itm_4 - reg_mult_8_z_asn_itm_1_cse;
  assign mult_8_res_sva_2 = nl_mult_8_res_sva_2[31:0];
  assign nl_mult_9_res_sva_2 = mult_9_z_asn_itm_4 - reg_mult_9_z_asn_itm_1_cse;
  assign mult_9_res_sva_2 = nl_mult_9_res_sva_2[31:0];
  assign nl_mult_10_res_sva_2 = mult_10_z_asn_itm_4 - reg_mult_10_z_asn_itm_1_cse;
  assign mult_10_res_sva_2 = nl_mult_10_res_sva_2[31:0];
  assign nl_mult_11_res_sva_2 = mult_11_z_asn_itm_4 - reg_mult_11_z_asn_itm_1_cse;
  assign mult_11_res_sva_2 = nl_mult_11_res_sva_2[31:0];
  assign nl_mult_12_res_sva_2 = mult_12_z_asn_itm_4 - reg_mult_12_z_asn_itm_1_cse;
  assign mult_12_res_sva_2 = nl_mult_12_res_sva_2[31:0];
  assign nl_mult_13_res_sva_2 = mult_13_z_asn_itm_4 - reg_mult_13_z_asn_itm_1_cse;
  assign mult_13_res_sva_2 = nl_mult_13_res_sva_2[31:0];
  assign nl_mult_14_res_sva_2 = mult_14_z_asn_itm_4 - reg_mult_14_z_asn_itm_1_cse;
  assign mult_14_res_sva_2 = nl_mult_14_res_sva_2[31:0];
  assign nl_mult_15_res_sva_2 = mult_15_z_asn_itm_4 - reg_mult_15_z_asn_itm_1_cse;
  assign mult_15_res_sva_2 = nl_mult_15_res_sva_2[31:0];
  assign tmp_93_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_29_i_qa_d_mxwt, xt_rsc_1_29_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_91_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_27_i_qa_d_mxwt, xt_rsc_1_27_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_89_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_25_i_qa_d_mxwt, xt_rsc_1_25_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_87_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_23_i_qa_d_mxwt, xt_rsc_1_23_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_85_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_21_i_qa_d_mxwt, xt_rsc_1_21_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_83_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_19_i_qa_d_mxwt, xt_rsc_1_19_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_81_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_17_i_qa_d_mxwt, xt_rsc_1_17_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign tmp_65_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_1_i_qa_d_mxwt, xt_rsc_1_1_i_qa_d_mxwt,
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
  assign nl_INNER_LOOP1_r_9_4_sva_2 = conv_u2u_5_6(INNER_LOOP1_r_9_4_sva_4_0) + 6'b000001;
  assign INNER_LOOP1_r_9_4_sva_2 = nl_INNER_LOOP1_r_9_4_sva_2[5:0];
  assign INNER_LOOP1_tw_and_psp_sva_1 = operator_33_true_return_8_4_sva & INNER_LOOP1_r_9_4_sva_4_0;
  assign mult_15_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_34, mult_15_res_sva_1, mult_15_slc_32_svs_st_1);
  assign mult_14_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_35, mult_14_res_sva_1, mult_14_slc_32_svs_st_1);
  assign mult_13_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_36, mult_13_res_sva_1, mult_13_slc_32_svs_st_1);
  assign mult_12_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_51, mult_12_res_sva_1, mult_12_slc_32_svs_st_1);
  assign mult_11_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_63, mult_11_res_sva_1, mult_11_slc_32_svs_st_1);
  assign mult_10_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_38, mult_10_res_sva_1, mult_10_slc_32_svs_st_1);
  assign mult_9_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_61, mult_9_res_sva_1, mult_9_slc_32_svs_st_1);
  assign mult_8_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_59, mult_8_res_sva_1, mult_8_slc_32_svs_st_1);
  assign mult_7_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_57, mult_7_res_sva_1, mult_7_slc_32_svs_st_1);
  assign mult_6_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_53, mult_6_res_sva_1, mult_6_slc_32_svs_st_1);
  assign mult_5_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_103, mult_5_res_sva_1, mult_5_slc_32_svs_st_1);
  assign mult_4_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_108, mult_4_res_sva_1, mult_4_slc_32_svs_st_1);
  assign mult_3_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_104, mult_3_res_sva_1, mult_3_slc_32_svs_st_1);
  assign mult_2_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_107, mult_2_res_sva_1, mult_2_slc_32_svs_st_1);
  assign mult_1_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_109, mult_1_res_sva_1, mult_1_slc_32_svs_st_1);
  assign mult_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_105, mult_res_sva_1, mult_slc_32_svs_st_1);
  assign nl_mult_25_res_sva_2 = mult_25_z_asn_itm_4 - reg_mult_9_z_asn_itm_1_cse;
  assign mult_25_res_sva_2 = nl_mult_25_res_sva_2[31:0];
  assign nl_mult_26_res_sva_2 = mult_26_z_asn_itm_4 - reg_mult_10_z_asn_itm_1_cse;
  assign mult_26_res_sva_2 = nl_mult_26_res_sva_2[31:0];
  assign nl_mult_27_res_sva_2 = mult_27_z_asn_itm_4 - reg_mult_11_z_asn_itm_1_cse;
  assign mult_27_res_sva_2 = nl_mult_27_res_sva_2[31:0];
  assign nl_mult_28_res_sva_2 = mult_28_z_asn_itm_4 - reg_mult_12_z_asn_itm_1_cse;
  assign mult_28_res_sva_2 = nl_mult_28_res_sva_2[31:0];
  assign nl_mult_29_res_sva_2 = mult_29_z_asn_itm_4 - reg_mult_13_z_asn_itm_1_cse;
  assign mult_29_res_sva_2 = nl_mult_29_res_sva_2[31:0];
  assign nl_mult_30_res_sva_2 = mult_30_z_asn_itm_4 - reg_mult_14_z_asn_itm_1_cse;
  assign mult_30_res_sva_2 = nl_mult_30_res_sva_2[31:0];
  assign nl_mult_31_res_sva_2 = mult_31_z_asn_itm_4 - reg_mult_15_z_asn_itm_1_cse;
  assign mult_31_res_sva_2 = nl_mult_31_res_sva_2[31:0];
  assign tmp_31_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_31_i_qa_d, yt_rsc_1_31_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_29_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_29_i_qa_d, yt_rsc_1_29_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_27_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_27_i_qa_d, yt_rsc_1_27_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_25_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_25_i_qa_d, yt_rsc_1_25_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_23_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_23_i_qa_d, yt_rsc_1_23_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_21_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_21_i_qa_d, yt_rsc_1_21_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_19_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_19_i_qa_d, yt_rsc_1_19_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_17_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_17_i_qa_d, yt_rsc_1_17_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_7_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_7_i_qa_d, yt_rsc_1_7_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_5_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_5_i_qa_d, yt_rsc_1_5_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_3_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_3_i_qa_d, yt_rsc_1_3_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_1_lpi_3_dfm_mx0 = MUX_v_32_2_2(yt_rsc_0_1_i_qa_d, yt_rsc_1_1_i_qa_d,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_31_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_51, mult_31_res_sva_1, mult_31_slc_32_svs_st_1);
  assign mult_30_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_34, mult_30_res_sva_1, mult_30_slc_32_svs_st_1);
  assign mult_29_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_57, mult_29_res_sva_1, mult_29_slc_32_svs_st_1);
  assign mult_28_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_63, mult_28_res_sva_1, mult_28_slc_32_svs_st_1);
  assign mult_27_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_53, mult_27_res_sva_1, mult_27_slc_32_svs_st_1);
  assign mult_26_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_36, mult_26_res_sva_1, mult_26_slc_32_svs_st_1);
  assign mult_25_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_35, mult_25_res_sva_1, mult_25_slc_32_svs_st_1);
  assign mult_24_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_59, mult_24_res_sva_1, mult_24_slc_32_svs_st_1);
  assign mult_23_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_61, mult_23_res_sva_1, mult_23_slc_32_svs_st_1);
  assign nl_mult_22_if_acc_nl = mult_22_res_sva_1 - p_sva;
  assign mult_22_if_acc_nl = nl_mult_22_if_acc_nl[31:0];
  assign mult_22_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_22_if_acc_nl, mult_22_res_sva_1,
      mult_22_slc_32_svs_st_1);
  assign nl_mult_21_if_acc_nl = mult_21_res_sva_1 - p_sva;
  assign mult_21_if_acc_nl = nl_mult_21_if_acc_nl[31:0];
  assign mult_21_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_21_if_acc_nl, mult_21_res_sva_1,
      mult_21_slc_32_svs_st_1);
  assign nl_mult_20_if_acc_nl = mult_20_res_sva_1 - p_sva;
  assign mult_20_if_acc_nl = nl_mult_20_if_acc_nl[31:0];
  assign mult_20_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_20_if_acc_nl, mult_20_res_sva_1,
      mult_20_slc_32_svs_st_1);
  assign nl_mult_19_if_acc_nl = mult_19_res_sva_1 - p_sva;
  assign mult_19_if_acc_nl = nl_mult_19_if_acc_nl[31:0];
  assign mult_19_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_19_if_acc_nl, mult_19_res_sva_1,
      mult_19_slc_32_svs_st_1);
  assign nl_mult_18_if_acc_nl = mult_18_res_sva_1 - p_sva;
  assign mult_18_if_acc_nl = nl_mult_18_if_acc_nl[31:0];
  assign mult_18_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_18_if_acc_nl, mult_18_res_sva_1,
      mult_18_slc_32_svs_st_1);
  assign nl_mult_17_if_acc_nl = mult_17_res_sva_1 - p_sva;
  assign mult_17_if_acc_nl = nl_mult_17_if_acc_nl[31:0];
  assign mult_17_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(mult_17_if_acc_nl, mult_17_res_sva_1,
      mult_17_slc_32_svs_st_1);
  assign mult_16_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_106, mult_16_res_sva_1, mult_16_slc_32_svs_st_1);
  assign nl_mult_32_res_sva_2 = mult_32_z_asn_itm_4 - reg_mult_z_asn_itm_1_cse;
  assign mult_32_res_sva_2 = nl_mult_32_res_sva_2[31:0];
  assign nl_mult_33_res_sva_2 = mult_33_z_asn_itm_4 - reg_mult_5_z_asn_itm_1_cse;
  assign mult_33_res_sva_2 = nl_mult_33_res_sva_2[31:0];
  assign nl_mult_34_res_sva_2 = mult_34_z_asn_itm_4 - reg_mult_8_z_asn_itm_1_cse;
  assign mult_34_res_sva_2 = nl_mult_34_res_sva_2[31:0];
  assign nl_mult_35_res_sva_2 = mult_35_z_asn_itm_4 - reg_mult_13_z_asn_itm_1_cse;
  assign mult_35_res_sva_2 = nl_mult_35_res_sva_2[31:0];
  assign nl_mult_36_res_sva_2 = mult_36_z_asn_itm_4 - reg_mult_15_z_asn_itm_1_cse;
  assign mult_36_res_sva_2 = nl_mult_36_res_sva_2[31:0];
  assign nl_mult_37_res_sva_2 = mult_37_z_asn_itm_4 - reg_mult_11_z_asn_itm_1_cse;
  assign mult_37_res_sva_2 = nl_mult_37_res_sva_2[31:0];
  assign nl_mult_38_res_sva_2 = mult_38_z_asn_itm_4 - reg_mult_7_z_asn_itm_1_cse;
  assign mult_38_res_sva_2 = nl_mult_38_res_sva_2[31:0];
  assign nl_mult_39_res_sva_2 = mult_39_z_asn_itm_4 - reg_mult_3_z_asn_itm_1_cse;
  assign mult_39_res_sva_2 = nl_mult_39_res_sva_2[31:0];
  assign nl_mult_40_res_sva_2 = mult_40_z_asn_itm_4 - reg_mult_2_z_asn_itm_1_cse;
  assign mult_40_res_sva_2 = nl_mult_40_res_sva_2[31:0];
  assign nl_mult_41_res_sva_2 = mult_41_z_asn_itm_4 - reg_mult_10_z_asn_itm_1_cse;
  assign mult_41_res_sva_2 = nl_mult_41_res_sva_2[31:0];
  assign nl_mult_42_res_sva_2 = mult_42_z_asn_itm_4 - reg_mult_14_z_asn_itm_1_cse;
  assign mult_42_res_sva_2 = nl_mult_42_res_sva_2[31:0];
  assign nl_mult_43_res_sva_2 = mult_43_z_asn_itm_4 - reg_mult_6_z_asn_itm_1_cse;
  assign mult_43_res_sva_2 = nl_mult_43_res_sva_2[31:0];
  assign nl_mult_44_res_sva_2 = mult_44_z_asn_itm_4 - reg_mult_4_z_asn_itm_1_cse;
  assign mult_44_res_sva_2 = nl_mult_44_res_sva_2[31:0];
  assign nl_mult_45_res_sva_2 = mult_45_z_asn_itm_4 - reg_mult_12_z_asn_itm_1_cse;
  assign mult_45_res_sva_2 = nl_mult_45_res_sva_2[31:0];
  assign nl_mult_46_res_sva_2 = mult_46_z_asn_itm_4 - reg_mult_9_z_asn_itm_1_cse;
  assign mult_46_res_sva_2 = nl_mult_46_res_sva_2[31:0];
  assign nl_mult_47_res_sva_2 = mult_47_z_asn_itm_4 - reg_mult_1_z_asn_itm_1_cse;
  assign mult_47_res_sva_2 = nl_mult_47_res_sva_2[31:0];
  assign tmp_125_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_29_i_qa_d_mxwt, xt_rsc_1_29_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign tmp_121_lpi_3_dfm_mx0 = MUX_v_32_2_2(xt_rsc_0_25_i_qa_d_mxwt, xt_rsc_1_25_i_qa_d_mxwt,
      twiddle_h_rsc_0_0_i_s_raddr_core_4);
  assign mult_47_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_51, mult_47_res_sva_1, mult_47_slc_32_svs_st_1);
  assign mult_46_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_105, mult_46_res_sva_1, mult_46_slc_32_svs_st_1);
  assign mult_45_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_107, mult_45_res_sva_1, mult_45_slc_32_svs_st_1);
  assign mult_44_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_106, mult_44_res_sva_1, mult_44_slc_32_svs_st_1);
  assign mult_43_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_102, mult_43_res_sva_1, mult_43_slc_32_svs_st_1);
  assign mult_42_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_108, mult_42_res_sva_1, mult_42_slc_32_svs_st_1);
  assign mult_41_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_103, mult_41_res_sva_1, mult_41_slc_32_svs_st_1);
  assign mult_40_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_109, mult_40_res_sva_1, mult_40_slc_32_svs_st_1);
  assign mult_39_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_104, mult_39_res_sva_1, mult_39_slc_32_svs_st_1);
  assign mult_38_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_96, mult_38_res_sva_1, mult_38_slc_32_svs_st_1);
  assign mult_37_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_95, mult_37_res_sva_1, mult_37_slc_32_svs_st_1);
  assign mult_36_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_94, mult_36_res_sva_1, mult_36_slc_32_svs_st_1);
  assign mult_35_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_93, mult_35_res_sva_1, mult_35_slc_32_svs_st_1);
  assign mult_34_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_92, mult_34_res_sva_1, mult_34_slc_32_svs_st_1);
  assign mult_33_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_88, mult_33_res_sva_1, mult_33_slc_32_svs_st_1);
  assign mult_32_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_87, mult_32_res_sva_1, mult_32_slc_32_svs_st_1);
  assign nl_mult_48_res_sva_2 = mult_48_z_asn_itm_4 - reg_mult_1_z_asn_itm_1_cse;
  assign mult_48_res_sva_2 = nl_mult_48_res_sva_2[31:0];
  assign nl_mult_49_res_sva_2 = mult_49_z_asn_itm_4 - reg_mult_9_z_asn_itm_1_cse;
  assign mult_49_res_sva_2 = nl_mult_49_res_sva_2[31:0];
  assign nl_mult_50_res_sva_2 = mult_50_z_asn_itm_4 - reg_mult_12_z_asn_itm_1_cse;
  assign mult_50_res_sva_2 = nl_mult_50_res_sva_2[31:0];
  assign nl_mult_51_res_sva_2 = mult_51_z_asn_itm_4 - reg_mult_4_z_asn_itm_1_cse;
  assign mult_51_res_sva_2 = nl_mult_51_res_sva_2[31:0];
  assign nl_mult_52_res_sva_2 = mult_52_z_asn_itm_4 - reg_mult_6_z_asn_itm_1_cse;
  assign mult_52_res_sva_2 = nl_mult_52_res_sva_2[31:0];
  assign nl_mult_53_res_sva_2 = mult_53_z_asn_itm_4 - reg_mult_14_z_asn_itm_1_cse;
  assign mult_53_res_sva_2 = nl_mult_53_res_sva_2[31:0];
  assign nl_mult_54_res_sva_2 = mult_54_z_asn_itm_4 - reg_mult_10_z_asn_itm_1_cse;
  assign mult_54_res_sva_2 = nl_mult_54_res_sva_2[31:0];
  assign nl_mult_55_res_sva_2 = mult_55_z_asn_itm_4 - reg_mult_2_z_asn_itm_1_cse;
  assign mult_55_res_sva_2 = nl_mult_55_res_sva_2[31:0];
  assign nl_mult_56_res_sva_2 = mult_56_z_asn_itm_4 - reg_mult_3_z_asn_itm_1_cse;
  assign mult_56_res_sva_2 = nl_mult_56_res_sva_2[31:0];
  assign nl_mult_57_res_sva_2 = mult_57_z_asn_itm_4 - reg_mult_7_z_asn_itm_1_cse;
  assign mult_57_res_sva_2 = nl_mult_57_res_sva_2[31:0];
  assign nl_mult_58_res_sva_2 = mult_58_z_asn_itm_4 - reg_mult_11_z_asn_itm_1_cse;
  assign mult_58_res_sva_2 = nl_mult_58_res_sva_2[31:0];
  assign nl_mult_59_res_sva_2 = mult_59_z_asn_itm_4 - reg_mult_15_z_asn_itm_1_cse;
  assign mult_59_res_sva_2 = nl_mult_59_res_sva_2[31:0];
  assign nl_mult_60_res_sva_2 = mult_60_z_asn_itm_4 - reg_mult_13_z_asn_itm_1_cse;
  assign mult_60_res_sva_2 = nl_mult_60_res_sva_2[31:0];
  assign nl_mult_61_res_sva_2 = mult_61_z_asn_itm_4 - reg_mult_8_z_asn_itm_1_cse;
  assign mult_61_res_sva_2 = nl_mult_61_res_sva_2[31:0];
  assign nl_mult_62_res_sva_2 = mult_62_z_asn_itm_4 - reg_mult_5_z_asn_itm_1_cse;
  assign mult_62_res_sva_2 = nl_mult_62_res_sva_2[31:0];
  assign nl_mult_63_res_sva_2 = mult_63_z_asn_itm_4 - reg_mult_z_asn_itm_1_cse;
  assign mult_63_res_sva_2 = nl_mult_63_res_sva_2[31:0];
  assign nl_INNER_LOOP4_r_9_4_sva_2 = conv_u2u_5_6(INNER_LOOP4_r_9_4_sva_4_0) + 6'b000001;
  assign INNER_LOOP4_r_9_4_sva_2 = nl_INNER_LOOP4_r_9_4_sva_2[5:0];
  assign mult_63_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_107, mult_63_res_sva_1, mult_63_slc_32_svs_st_1);
  assign mult_62_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_105, mult_62_res_sva_1, mult_62_slc_32_svs_st_1);
  assign mult_61_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_104, mult_61_res_sva_1, mult_61_slc_32_svs_st_1);
  assign mult_60_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_103, mult_60_res_sva_1, mult_60_slc_32_svs_st_1);
  assign mult_59_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_102, mult_59_res_sva_1, mult_59_slc_32_svs_st_1);
  assign mult_58_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_100, mult_58_res_sva_1, mult_58_slc_32_svs_st_1);
  assign mult_57_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_99, mult_57_res_sva_1, mult_57_slc_32_svs_st_1);
  assign mult_56_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_98, mult_56_res_sva_1, mult_56_slc_32_svs_st_1);
  assign mult_55_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_97, mult_55_res_sva_1, mult_55_slc_32_svs_st_1);
  assign mult_54_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_96, mult_54_res_sva_1, mult_54_slc_32_svs_st_1);
  assign mult_53_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_95, mult_53_res_sva_1, mult_53_slc_32_svs_st_1);
  assign mult_52_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_94, mult_52_res_sva_1, mult_52_slc_32_svs_st_1);
  assign mult_51_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_93, mult_51_res_sva_1, mult_51_slc_32_svs_st_1);
  assign mult_50_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_92, mult_50_res_sva_1, mult_50_slc_32_svs_st_1);
  assign mult_49_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_88, mult_49_res_sva_1, mult_49_slc_32_svs_st_1);
  assign mult_48_res_lpi_3_dfm_mx0 = MUX_v_32_2_2(z_out_87, mult_48_res_sva_1, mult_48_slc_32_svs_st_1);
  assign INNER_LOOP4_nor_tmp = ~(INNER_LOOP4_stage_0 | INNER_LOOP4_stage_0_2 | INNER_LOOP4_stage_0_3
      | INNER_LOOP4_stage_0_4 | INNER_LOOP4_stage_0_5 | INNER_LOOP4_stage_0_6 | INNER_LOOP4_stage_0_7
      | INNER_LOOP4_stage_0_8 | INNER_LOOP4_stage_0_9 | INNER_LOOP4_stage_0_10 |
      INNER_LOOP4_stage_0_11 | INNER_LOOP4_stage_0_12);
  assign INNER_LOOP2_nor_tmp = ~(INNER_LOOP2_stage_0 | INNER_LOOP2_stage_0_2 | INNER_LOOP2_stage_0_3
      | INNER_LOOP2_stage_0_4 | INNER_LOOP2_stage_0_5 | INNER_LOOP2_stage_0_6 | INNER_LOOP2_stage_0_7
      | INNER_LOOP2_stage_0_8 | INNER_LOOP2_stage_0_9 | INNER_LOOP2_stage_0_10 |
      INNER_LOOP2_stage_0_11 | INNER_LOOP2_stage_0_12);
  assign INNER_LOOP1_nor_tmp = ~(INNER_LOOP1_stage_0 | INNER_LOOP1_stage_0_2 | INNER_LOOP1_stage_0_3
      | INNER_LOOP1_stage_0_4 | INNER_LOOP1_stage_0_5 | INNER_LOOP1_stage_0_6 | INNER_LOOP1_stage_0_7
      | INNER_LOOP1_stage_0_8 | INNER_LOOP1_stage_0_9 | INNER_LOOP1_stage_0_10 |
      INNER_LOOP1_stage_0_11 | INNER_LOOP1_stage_0_12);
  assign and_dcpl_144 = INNER_LOOP4_nor_tmp & c_1_sva_1;
  assign and_dcpl_147 = INNER_LOOP3_stage_0_12 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11);
  assign and_dcpl_149 = INNER_LOOP1_stage_0_12 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11);
  assign and_dcpl_151 = INNER_LOOP2_stage_0 & (~ (INNER_LOOP2_r_9_4_sva_4_0[4]));
  assign and_dcpl_153 = INNER_LOOP4_stage_0 & (~ (INNER_LOOP4_r_9_4_sva_4_0[4]));
  assign and_dcpl_155 = INNER_LOOP3_stage_0_12 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11;
  assign and_dcpl_157 = INNER_LOOP1_stage_0_12 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11;
  assign and_dcpl_158 = (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10) &
      INNER_LOOP3_stage_0_11;
  assign and_dcpl_159 = INNER_LOOP1_stage_0_11 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10);
  assign and_dcpl_161 = INNER_LOOP2_stage_0 & (INNER_LOOP2_r_9_4_sva_4_0[4]);
  assign and_dcpl_163 = INNER_LOOP4_stage_0 & (INNER_LOOP4_r_9_4_sva_4_0[4]);
  assign and_dcpl_164 = INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10 & INNER_LOOP3_stage_0_11;
  assign and_dcpl_165 = INNER_LOOP1_stage_0_11 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10;
  assign and_dcpl_174 = INNER_LOOP3_stage_0 & (operator_33_true_2_lshift_psp_2_0_sva[0]);
  assign and_dcpl_175 = INNER_LOOP4_stage_0 & (operator_33_true_3_lshift_psp_1_0_sva[0]);
  assign and_dcpl_176 = INNER_LOOP3_stage_0 & (operator_33_true_2_lshift_psp_2_0_sva[1]);
  assign or_dcpl_29 = (fsm_output[2]) | (fsm_output[4]);
  assign and_252_cse = (and_dcpl_151 | ((~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm_1)
      & INNER_LOOP2_stage_0_2)) & (fsm_output[4]);
  assign and_253_cse = (and_dcpl_153 | (INNER_LOOP4_stage_0_2 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm_1)))
      & (fsm_output[8]);
  assign and_655_cse = (and_dcpl_161 | (INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm_1
      & INNER_LOOP2_stage_0_2)) & (fsm_output[4]);
  assign and_656_cse = (and_dcpl_163 | (INNER_LOOP4_stage_0_2 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm_1))
      & (fsm_output[8]);
  assign and_1058_cse = INNER_LOOP2_stage_0_12 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_11)
      & (fsm_output[4]);
  assign and_1059_cse = INNER_LOOP4_stage_0_12 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_11)
      & (fsm_output[8]);
  assign and_1056_cse = INNER_LOOP3_stage_0 & (~ (INNER_LOOP3_r_9_4_sva_4_0[4]))
      & (fsm_output[6]);
  assign and_1057_cse = INNER_LOOP1_stage_0 & (~ (INNER_LOOP1_r_9_4_sva_4_0[4]))
      & (fsm_output[2]);
  assign and_1229_cse = INNER_LOOP2_stage_0_12 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_11
      & (fsm_output[4]);
  assign and_1230_cse = INNER_LOOP4_stage_0_12 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_11
      & (fsm_output[8]);
  assign and_1363_cse = INNER_LOOP3_stage_0 & (INNER_LOOP3_r_9_4_sva_4_0[4]) & (fsm_output[6]);
  assign and_1364_cse = INNER_LOOP1_stage_0 & (INNER_LOOP1_r_9_4_sva_4_0[4]) & (fsm_output[2]);
  assign and_1686_cse = and_dcpl_175 & (fsm_output[8]);
  assign and_1695_cse = INNER_LOOP4_stage_0 & (operator_33_true_3_lshift_psp_1_0_sva[1])
      & (fsm_output[8]);
  assign and_1704_cse = and_dcpl_175 & (operator_33_true_3_lshift_psp_1_0_sva[1])
      & (fsm_output[8]);
  assign and_1929_cse = (~ (operator_33_true_3_lshift_psp_1_0_sva[0])) & (fsm_output[8]);
  assign or_tmp_804 = or_dcpl_29 | and_1929_cse;
  assign or_tmp_806 = (operator_33_true_3_lshift_psp_1_0_sva[0]) & (fsm_output[8]);
  assign and_1944_cse = (~ (operator_33_true_3_lshift_psp_1_0_sva[1])) & (fsm_output[8]);
  assign or_tmp_812 = (operator_33_true_2_lshift_psp_2_0_sva[2]) & (fsm_output[6]);
  assign and_1948_cse = (~ (operator_33_true_2_lshift_psp_2_0_sva[2])) & (fsm_output[6]);
  assign or_tmp_814 = (operator_33_true_3_lshift_psp_1_0_sva[1]) & (fsm_output[8]);
  assign or_tmp_827 = (operator_33_true_2_lshift_psp_2_0_sva[1]) & (fsm_output[6]);
  assign and_1978_cse = (~ (operator_33_true_2_lshift_psp_2_0_sva[1])) & (fsm_output[6]);
  assign or_tmp_835 = (operator_33_true_2_lshift_psp_2_0_sva[0]) & (fsm_output[6]);
  assign and_1994_cse = (~ (operator_33_true_2_lshift_psp_2_0_sva[0])) & (fsm_output[6]);
  assign or_tmp_888 = and_1978_cse | or_dcpl_29;
  assign or_tmp_895 = and_1994_cse | or_dcpl_29;
  assign butterFly1_and_ssc = ~((modulo_sub_base_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_and_ssc_2 = (~ (modulo_sub_base_32_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_and_ssc_3 = (modulo_sub_base_32_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_1_and_ssc = ~((modulo_sub_base_1_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_1_and_ssc_2 = (~ (modulo_sub_base_33_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_1_and_ssc_3 = (modulo_sub_base_33_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_2_and_ssc = ~((modulo_sub_base_2_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_2_and_ssc_2 = (~ (modulo_sub_base_34_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_2_and_ssc_3 = (modulo_sub_base_34_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_3_and_ssc = ~((modulo_sub_base_3_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_3_and_ssc_2 = (~ (modulo_sub_base_35_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_3_and_ssc_3 = (modulo_sub_base_35_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_4_and_ssc = ~((modulo_sub_base_4_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_4_and_ssc_2 = (~ (modulo_sub_base_36_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_4_and_ssc_3 = (modulo_sub_base_36_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_5_and_ssc = ~((modulo_sub_base_5_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_5_and_ssc_2 = (~ (modulo_sub_base_37_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_5_and_ssc_3 = (modulo_sub_base_37_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_6_and_ssc = ~((modulo_sub_base_6_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_6_and_ssc_2 = (~ (modulo_sub_base_38_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_6_and_ssc_3 = (modulo_sub_base_38_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_7_and_ssc = ~((modulo_sub_base_7_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_7_and_ssc_2 = (~ (modulo_sub_base_39_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_7_and_ssc_3 = (modulo_sub_base_39_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_8_and_ssc = ~((modulo_sub_base_8_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_8_and_ssc_2 = (~ (modulo_sub_base_40_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_8_and_ssc_3 = (modulo_sub_base_40_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_9_and_ssc = ~((modulo_sub_base_9_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_9_and_ssc_2 = (~ (modulo_sub_base_41_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_9_and_ssc_3 = (modulo_sub_base_41_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_10_and_ssc = ~((modulo_sub_base_10_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_10_and_ssc_2 = (~ (modulo_sub_base_42_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_10_and_ssc_3 = (modulo_sub_base_42_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_11_and_ssc = ~((modulo_sub_base_11_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_11_and_ssc_2 = (~ (modulo_sub_base_43_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_11_and_ssc_3 = (modulo_sub_base_43_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_12_and_ssc = ~((modulo_sub_base_12_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_12_and_ssc_2 = (~ (modulo_sub_base_44_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_12_and_ssc_3 = (modulo_sub_base_44_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_13_and_ssc = ~((modulo_sub_base_13_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_13_and_ssc_2 = (~ (modulo_sub_base_45_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_13_and_ssc_3 = (modulo_sub_base_45_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_14_and_ssc = ~((modulo_sub_base_14_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_14_and_ssc_2 = (~ (modulo_sub_base_46_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_14_and_ssc_3 = (modulo_sub_base_46_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_15_and_ssc = ~((modulo_sub_base_15_sva_1[31]) | (fsm_output[6]));
  assign butterFly1_15_and_ssc_2 = (~ (modulo_sub_base_47_sva_1[31])) & (fsm_output[6]);
  assign butterFly1_15_and_ssc_3 = (modulo_sub_base_47_sva_1[31]) & (fsm_output[6]);
  assign butterFly1_mux_nl = MUX_s_1_2_2((z_out_81[31]), (z_out_80[31]), butterFly1_and_ssc_3);
  assign butterFly1_and_4_rmff = butterFly1_mux_nl & (~(butterFly1_and_ssc | butterFly1_and_ssc_2));
  assign butterFly1_and_1_nl = (modulo_sub_base_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_sva_1[30:0]),
      (z_out_81[30:0]), (modulo_sub_base_32_sva_1[30:0]), (z_out_80[30:0]), {butterFly1_and_ssc
      , butterFly1_and_1_nl , butterFly1_and_ssc_2 , butterFly1_and_ssc_3});
  assign butterFly1_1_mux_nl = MUX_s_1_2_2((z_out_79[31]), (z_out_78[31]), butterFly1_1_and_ssc_3);
  assign butterFly1_1_and_4_rmff = butterFly1_1_mux_nl & (~(butterFly1_1_and_ssc
      | butterFly1_1_and_ssc_2));
  assign butterFly1_1_and_1_nl = (modulo_sub_base_1_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_1_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_1_sva_1[30:0]),
      (z_out_79[30:0]), (modulo_sub_base_33_sva_1[30:0]), (z_out_78[30:0]), {butterFly1_1_and_ssc
      , butterFly1_1_and_1_nl , butterFly1_1_and_ssc_2 , butterFly1_1_and_ssc_3});
  assign butterFly1_2_mux_nl = MUX_s_1_2_2((z_out_77[31]), (z_out_76[31]), butterFly1_2_and_ssc_3);
  assign butterFly1_2_and_4_rmff = butterFly1_2_mux_nl & (~(butterFly1_2_and_ssc
      | butterFly1_2_and_ssc_2));
  assign butterFly1_2_and_1_nl = (modulo_sub_base_2_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_2_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_2_sva_1[30:0]),
      (z_out_77[30:0]), (modulo_sub_base_34_sva_1[30:0]), (z_out_76[30:0]), {butterFly1_2_and_ssc
      , butterFly1_2_and_1_nl , butterFly1_2_and_ssc_2 , butterFly1_2_and_ssc_3});
  assign butterFly1_3_mux_nl = MUX_s_1_2_2((z_out_75[31]), (z_out_74[31]), butterFly1_3_and_ssc_3);
  assign butterFly1_3_and_4_rmff = butterFly1_3_mux_nl & (~(butterFly1_3_and_ssc
      | butterFly1_3_and_ssc_2));
  assign butterFly1_3_and_1_nl = (modulo_sub_base_3_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_3_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_3_sva_1[30:0]),
      (z_out_75[30:0]), (modulo_sub_base_35_sva_1[30:0]), (z_out_74[30:0]), {butterFly1_3_and_ssc
      , butterFly1_3_and_1_nl , butterFly1_3_and_ssc_2 , butterFly1_3_and_ssc_3});
  assign butterFly1_4_mux_nl = MUX_s_1_2_2((z_out_73[31]), (z_out_72[31]), butterFly1_4_and_ssc_3);
  assign butterFly1_4_and_4_rmff = butterFly1_4_mux_nl & (~(butterFly1_4_and_ssc
      | butterFly1_4_and_ssc_2));
  assign butterFly1_4_and_1_nl = (modulo_sub_base_4_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_4_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_4_sva_1[30:0]),
      (z_out_73[30:0]), (modulo_sub_base_36_sva_1[30:0]), (z_out_72[30:0]), {butterFly1_4_and_ssc
      , butterFly1_4_and_1_nl , butterFly1_4_and_ssc_2 , butterFly1_4_and_ssc_3});
  assign butterFly1_5_mux_nl = MUX_s_1_2_2((z_out_71[31]), (z_out_70[31]), butterFly1_5_and_ssc_3);
  assign butterFly1_5_and_4_rmff = butterFly1_5_mux_nl & (~(butterFly1_5_and_ssc
      | butterFly1_5_and_ssc_2));
  assign butterFly1_5_and_1_nl = (modulo_sub_base_5_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_5_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_5_sva_1[30:0]),
      (z_out_71[30:0]), (modulo_sub_base_37_sva_1[30:0]), (z_out_70[30:0]), {butterFly1_5_and_ssc
      , butterFly1_5_and_1_nl , butterFly1_5_and_ssc_2 , butterFly1_5_and_ssc_3});
  assign butterFly1_6_mux_nl = MUX_s_1_2_2((z_out_69[31]), (z_out_68[31]), butterFly1_6_and_ssc_3);
  assign butterFly1_6_and_4_rmff = butterFly1_6_mux_nl & (~(butterFly1_6_and_ssc
      | butterFly1_6_and_ssc_2));
  assign butterFly1_6_and_1_nl = (modulo_sub_base_6_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_6_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_6_sva_1[30:0]),
      (z_out_69[30:0]), (modulo_sub_base_38_sva_1[30:0]), (z_out_68[30:0]), {butterFly1_6_and_ssc
      , butterFly1_6_and_1_nl , butterFly1_6_and_ssc_2 , butterFly1_6_and_ssc_3});
  assign butterFly1_7_mux_nl = MUX_s_1_2_2((z_out_67[31]), (z_out_66[31]), butterFly1_7_and_ssc_3);
  assign butterFly1_7_and_4_rmff = butterFly1_7_mux_nl & (~(butterFly1_7_and_ssc
      | butterFly1_7_and_ssc_2));
  assign butterFly1_7_and_1_nl = (modulo_sub_base_7_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_7_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_7_sva_1[30:0]),
      (z_out_67[30:0]), (modulo_sub_base_39_sva_1[30:0]), (z_out_66[30:0]), {butterFly1_7_and_ssc
      , butterFly1_7_and_1_nl , butterFly1_7_and_ssc_2 , butterFly1_7_and_ssc_3});
  assign butterFly1_8_mux_nl = MUX_s_1_2_2((z_out_65[31]), (z_out_64[31]), butterFly1_8_and_ssc_3);
  assign butterFly1_8_and_4_rmff = butterFly1_8_mux_nl & (~(butterFly1_8_and_ssc
      | butterFly1_8_and_ssc_2));
  assign butterFly1_8_and_1_nl = (modulo_sub_base_8_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_8_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_8_sva_1[30:0]),
      (z_out_65[30:0]), (modulo_sub_base_40_sva_1[30:0]), (z_out_64[30:0]), {butterFly1_8_and_ssc
      , butterFly1_8_and_1_nl , butterFly1_8_and_ssc_2 , butterFly1_8_and_ssc_3});
  assign butterFly1_9_mux_nl = MUX_s_1_2_2((z_out_49[31]), (z_out_62[31]), butterFly1_9_and_ssc_3);
  assign butterFly1_9_and_4_rmff = butterFly1_9_mux_nl & (~(butterFly1_9_and_ssc
      | butterFly1_9_and_ssc_2));
  assign butterFly1_9_and_1_nl = (modulo_sub_base_9_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_9_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_9_sva_1[30:0]),
      (z_out_49[30:0]), (modulo_sub_base_41_sva_1[30:0]), (z_out_62[30:0]), {butterFly1_9_and_ssc
      , butterFly1_9_and_1_nl , butterFly1_9_and_ssc_2 , butterFly1_9_and_ssc_3});
  assign butterFly1_10_mux_nl = MUX_s_1_2_2((z_out_47[31]), (z_out_60[31]), butterFly1_10_and_ssc_3);
  assign butterFly1_10_and_4_rmff = butterFly1_10_mux_nl & (~(butterFly1_10_and_ssc
      | butterFly1_10_and_ssc_2));
  assign butterFly1_10_and_1_nl = (modulo_sub_base_10_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_10_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_10_sva_1[30:0]),
      (z_out_47[30:0]), (modulo_sub_base_42_sva_1[30:0]), (z_out_60[30:0]), {butterFly1_10_and_ssc
      , butterFly1_10_and_1_nl , butterFly1_10_and_ssc_2 , butterFly1_10_and_ssc_3});
  assign butterFly1_11_mux_nl = MUX_s_1_2_2((z_out_45[31]), (z_out_58[31]), butterFly1_11_and_ssc_3);
  assign butterFly1_11_and_4_rmff = butterFly1_11_mux_nl & (~(butterFly1_11_and_ssc
      | butterFly1_11_and_ssc_2));
  assign butterFly1_11_and_1_nl = (modulo_sub_base_11_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_11_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_11_sva_1[30:0]),
      (z_out_45[30:0]), (modulo_sub_base_43_sva_1[30:0]), (z_out_58[30:0]), {butterFly1_11_and_ssc
      , butterFly1_11_and_1_nl , butterFly1_11_and_ssc_2 , butterFly1_11_and_ssc_3});
  assign butterFly1_12_mux_nl = MUX_s_1_2_2((z_out_43[31]), (z_out_56[31]), butterFly1_12_and_ssc_3);
  assign butterFly1_12_and_4_rmff = butterFly1_12_mux_nl & (~(butterFly1_12_and_ssc
      | butterFly1_12_and_ssc_2));
  assign butterFly1_12_and_1_nl = (modulo_sub_base_12_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_12_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_12_sva_1[30:0]),
      (z_out_43[30:0]), (modulo_sub_base_44_sva_1[30:0]), (z_out_56[30:0]), {butterFly1_12_and_ssc
      , butterFly1_12_and_1_nl , butterFly1_12_and_ssc_2 , butterFly1_12_and_ssc_3});
  assign butterFly1_13_mux_nl = MUX_s_1_2_2((z_out_41[31]), (z_out_54[31]), butterFly1_13_and_ssc_3);
  assign butterFly1_13_and_4_rmff = butterFly1_13_mux_nl & (~(butterFly1_13_and_ssc
      | butterFly1_13_and_ssc_2));
  assign butterFly1_13_and_1_nl = (modulo_sub_base_13_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_13_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_13_sva_1[30:0]),
      (z_out_41[30:0]), (modulo_sub_base_45_sva_1[30:0]), (z_out_54[30:0]), {butterFly1_13_and_ssc
      , butterFly1_13_and_1_nl , butterFly1_13_and_ssc_2 , butterFly1_13_and_ssc_3});
  assign butterFly1_14_mux_nl = MUX_s_1_2_2((z_out_39[31]), (z_out_52[31]), butterFly1_14_and_ssc_3);
  assign butterFly1_14_and_4_rmff = butterFly1_14_mux_nl & (~(butterFly1_14_and_ssc
      | butterFly1_14_and_ssc_2));
  assign butterFly1_14_and_1_nl = (modulo_sub_base_14_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_14_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_14_sva_1[30:0]),
      (z_out_39[30:0]), (modulo_sub_base_46_sva_1[30:0]), (z_out_52[30:0]), {butterFly1_14_and_ssc
      , butterFly1_14_and_1_nl , butterFly1_14_and_ssc_2 , butterFly1_14_and_ssc_3});
  assign butterFly1_15_mux_nl = MUX_s_1_2_2((z_out_37[31]), (z_out_50[31]), butterFly1_15_and_ssc_3);
  assign butterFly1_15_and_4_rmff = butterFly1_15_mux_nl & (~(butterFly1_15_and_ssc
      | butterFly1_15_and_ssc_2));
  assign butterFly1_15_and_1_nl = (modulo_sub_base_15_sva_1[31]) & (~ (fsm_output[6]));
  assign butterFly1_15_mux1h_2_rmff = MUX1HOT_v_31_4_2((modulo_sub_base_15_sva_1[30:0]),
      (z_out_37[30:0]), (modulo_sub_base_47_sva_1[30:0]), (z_out_50[30:0]), {butterFly1_15_and_ssc
      , butterFly1_15_and_1_nl , butterFly1_15_and_ssc_2 , butterFly1_15_and_ssc_3});
  assign yt_rsc_0_0_i_adra_d_pff = MUX1HOT_v_4_4_2(INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_290_itm_11,
      (INNER_LOOP2_r_9_4_sva_4_0[3:0]), INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_321_itm_11,
      (INNER_LOOP4_r_9_4_sva_4_0[3:0]), {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6])
      , (fsm_output[8])});
  assign yt_rsc_0_0_i_da_d_pff = MUX_v_32_2_2(modulo_add_qr_lpi_3_dfm_1, modulo_add_32_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_0_i_wea_d_pff = (and_dcpl_147 & (fsm_output[6])) | (and_dcpl_149
      & (fsm_output[2]));
  assign yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff = (and_dcpl_151 & (fsm_output[4]))
      | (and_dcpl_153 & (fsm_output[8]));
  assign yt_rsc_0_1_i_da_d_pff = MUX_v_32_2_2(modulo_add_1_qr_lpi_3_dfm_1, modulo_add_33_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_2_i_da_d_pff = MUX_v_32_2_2(modulo_add_2_qr_lpi_3_dfm_1, modulo_add_34_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_3_i_da_d_pff = MUX_v_32_2_2(modulo_add_3_qr_lpi_3_dfm_1, modulo_add_35_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_4_i_da_d_pff = MUX_v_32_2_2(modulo_add_4_qr_lpi_3_dfm_1, modulo_add_36_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_5_i_da_d_pff = MUX_v_32_2_2(modulo_add_5_qr_lpi_3_dfm_1, modulo_add_37_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_6_i_da_d_pff = MUX_v_32_2_2(modulo_add_6_qr_lpi_3_dfm_1, modulo_add_38_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_7_i_da_d_pff = MUX_v_32_2_2(modulo_add_7_qr_lpi_3_dfm_1, modulo_add_39_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_8_i_da_d_pff = MUX_v_32_2_2(modulo_add_8_qr_lpi_3_dfm_1, modulo_add_40_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_9_i_da_d_pff = MUX_v_32_2_2(modulo_add_9_qr_lpi_3_dfm_1, modulo_add_41_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_10_i_da_d_pff = MUX_v_32_2_2(modulo_add_10_qr_lpi_3_dfm_1, modulo_add_42_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_11_i_da_d_pff = MUX_v_32_2_2(modulo_add_11_qr_lpi_3_dfm_1, modulo_add_43_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_12_i_da_d_pff = MUX_v_32_2_2(modulo_add_12_qr_lpi_3_dfm_1, modulo_add_44_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_13_i_da_d_pff = MUX_v_32_2_2(modulo_add_13_qr_lpi_3_dfm_1, modulo_add_45_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_14_i_da_d_pff = MUX_v_32_2_2(modulo_add_14_qr_lpi_3_dfm_1, modulo_add_46_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_15_i_da_d_pff = MUX_v_32_2_2(modulo_add_15_qr_lpi_3_dfm_1, modulo_add_47_qr_lpi_3_dfm_1,
      fsm_output[6]);
  assign yt_rsc_0_16_i_adra_d_pff = MUX1HOT_v_4_4_2(INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_306_itm_11,
      (INNER_LOOP2_r_9_4_sva_4_0[3:0]), INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_337_itm_11,
      (INNER_LOOP4_r_9_4_sva_4_0[3:0]), {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6])
      , (fsm_output[8])});
  assign yt_rsc_0_16_i_wea_d_pff = (and_dcpl_155 & (fsm_output[6])) | (and_dcpl_157
      & (fsm_output[2]));
  assign yt_rsc_1_0_i_adra_d_pff = MUX1HOT_v_4_4_2(INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_385_itm_10,
      (INNER_LOOP2_r_9_4_sva_4_0[3:0]), INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_416_itm_10,
      (INNER_LOOP4_r_9_4_sva_4_0[3:0]), {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6])
      , (fsm_output[8])});
  assign yt_rsc_1_0_i_da_d = {butterFly1_and_4_rmff , butterFly1_mux1h_2_rmff};
  assign yt_rsc_1_0_i_wea_d_pff = (and_dcpl_158 & (fsm_output[6])) | (and_dcpl_159
      & (fsm_output[2]));
  assign yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff = (and_dcpl_161 & (fsm_output[4]))
      | (and_dcpl_163 & (fsm_output[8]));
  assign yt_rsc_1_1_i_da_d = {butterFly1_1_and_4_rmff , butterFly1_1_mux1h_2_rmff};
  assign yt_rsc_1_2_i_da_d = {butterFly1_2_and_4_rmff , butterFly1_2_mux1h_2_rmff};
  assign yt_rsc_1_3_i_da_d = {butterFly1_3_and_4_rmff , butterFly1_3_mux1h_2_rmff};
  assign yt_rsc_1_4_i_da_d = {butterFly1_4_and_4_rmff , butterFly1_4_mux1h_2_rmff};
  assign yt_rsc_1_5_i_da_d = {butterFly1_5_and_4_rmff , butterFly1_5_mux1h_2_rmff};
  assign yt_rsc_1_6_i_da_d = {butterFly1_6_and_4_rmff , butterFly1_6_mux1h_2_rmff};
  assign yt_rsc_1_7_i_da_d = {butterFly1_7_and_4_rmff , butterFly1_7_mux1h_2_rmff};
  assign yt_rsc_1_8_i_da_d = {butterFly1_8_and_4_rmff , butterFly1_8_mux1h_2_rmff};
  assign yt_rsc_1_9_i_da_d = {butterFly1_9_and_4_rmff , butterFly1_9_mux1h_2_rmff};
  assign yt_rsc_1_10_i_da_d = {butterFly1_10_and_4_rmff , butterFly1_10_mux1h_2_rmff};
  assign yt_rsc_1_11_i_da_d = {butterFly1_11_and_4_rmff , butterFly1_11_mux1h_2_rmff};
  assign yt_rsc_1_12_i_da_d = {butterFly1_12_and_4_rmff , butterFly1_12_mux1h_2_rmff};
  assign yt_rsc_1_13_i_da_d = {butterFly1_13_and_4_rmff , butterFly1_13_mux1h_2_rmff};
  assign yt_rsc_1_14_i_da_d = {butterFly1_14_and_4_rmff , butterFly1_14_mux1h_2_rmff};
  assign yt_rsc_1_15_i_da_d = {butterFly1_15_and_4_rmff , butterFly1_15_mux1h_2_rmff};
  assign yt_rsc_1_16_i_adra_d_pff = MUX1HOT_v_4_4_2(INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_401_itm_10,
      (INNER_LOOP2_r_9_4_sva_4_0[3:0]), INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_432_itm_10,
      (INNER_LOOP4_r_9_4_sva_4_0[3:0]), {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6])
      , (fsm_output[8])});
  assign yt_rsc_1_16_i_da_d = {butterFly1_and_4_rmff , butterFly1_mux1h_2_rmff};
  assign yt_rsc_1_16_i_wea_d_pff = (and_dcpl_164 & (fsm_output[6])) | (and_dcpl_165
      & (fsm_output[2]));
  assign yt_rsc_1_17_i_da_d = {butterFly1_1_and_4_rmff , butterFly1_1_mux1h_2_rmff};
  assign yt_rsc_1_18_i_da_d = {butterFly1_2_and_4_rmff , butterFly1_2_mux1h_2_rmff};
  assign yt_rsc_1_19_i_da_d = {butterFly1_3_and_4_rmff , butterFly1_3_mux1h_2_rmff};
  assign yt_rsc_1_20_i_da_d = {butterFly1_4_and_4_rmff , butterFly1_4_mux1h_2_rmff};
  assign yt_rsc_1_21_i_da_d = {butterFly1_5_and_4_rmff , butterFly1_5_mux1h_2_rmff};
  assign yt_rsc_1_22_i_da_d = {butterFly1_6_and_4_rmff , butterFly1_6_mux1h_2_rmff};
  assign yt_rsc_1_23_i_da_d = {butterFly1_7_and_4_rmff , butterFly1_7_mux1h_2_rmff};
  assign yt_rsc_1_24_i_da_d = {butterFly1_8_and_4_rmff , butterFly1_8_mux1h_2_rmff};
  assign yt_rsc_1_25_i_da_d = {butterFly1_9_and_4_rmff , butterFly1_9_mux1h_2_rmff};
  assign yt_rsc_1_26_i_da_d = {butterFly1_10_and_4_rmff , butterFly1_10_mux1h_2_rmff};
  assign yt_rsc_1_27_i_da_d = {butterFly1_11_and_4_rmff , butterFly1_11_mux1h_2_rmff};
  assign yt_rsc_1_28_i_da_d = {butterFly1_12_and_4_rmff , butterFly1_12_mux1h_2_rmff};
  assign yt_rsc_1_29_i_da_d = {butterFly1_13_and_4_rmff , butterFly1_13_mux1h_2_rmff};
  assign yt_rsc_1_30_i_da_d = {butterFly1_14_and_4_rmff , butterFly1_14_mux1h_2_rmff};
  assign yt_rsc_1_31_i_da_d = {butterFly1_15_and_4_rmff , butterFly1_15_mux1h_2_rmff};
  assign xt_rsc_0_0_i_adra_d_pff = MUX1HOT_v_4_4_2((INNER_LOOP1_r_9_4_sva_4_0[3:0]),
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_290_itm_11, (INNER_LOOP3_r_9_4_sva_4_0[3:0]),
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_321_itm_11, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  assign xt_rsc_0_0_i_da_d_pff = MUX_v_32_2_2(modulo_add_16_qr_lpi_3_dfm_1, modulo_add_48_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_0_i_wea_d_pff = xt_rsc_0_0_i_wea_d_iff;
  assign xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_1_i_da_d_pff = MUX_v_32_2_2(modulo_add_17_qr_lpi_3_dfm_1, modulo_add_49_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_1_i_wea_d_pff = xt_rsc_0_1_i_wea_d_iff;
  assign xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_2_i_da_d_pff = MUX_v_32_2_2(modulo_add_18_qr_lpi_3_dfm_1, modulo_add_50_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_2_i_wea_d_pff = xt_rsc_0_2_i_wea_d_iff;
  assign xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_3_i_da_d_pff = MUX_v_32_2_2(modulo_add_19_qr_lpi_3_dfm_1, modulo_add_51_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_3_i_wea_d_pff = xt_rsc_0_3_i_wea_d_iff;
  assign xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_4_i_da_d_pff = MUX_v_32_2_2(modulo_add_20_qr_lpi_3_dfm_1, modulo_add_52_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_4_i_wea_d_pff = xt_rsc_0_4_i_wea_d_iff;
  assign xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_5_i_da_d_pff = MUX_v_32_2_2(modulo_add_21_qr_lpi_3_dfm_1, modulo_add_53_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_5_i_wea_d_pff = xt_rsc_0_5_i_wea_d_iff;
  assign xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_6_i_da_d_pff = MUX_v_32_2_2(modulo_add_22_qr_lpi_3_dfm_1, modulo_add_54_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_6_i_wea_d_pff = xt_rsc_0_6_i_wea_d_iff;
  assign xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_7_i_da_d_pff = MUX_v_32_2_2(modulo_add_23_qr_lpi_3_dfm_1, modulo_add_55_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_7_i_wea_d_pff = xt_rsc_0_7_i_wea_d_iff;
  assign xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_8_i_da_d_pff = MUX_v_32_2_2(modulo_add_24_qr_lpi_3_dfm_1, modulo_add_56_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_8_i_wea_d_pff = xt_rsc_0_8_i_wea_d_iff;
  assign xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_9_i_da_d_pff = MUX_v_32_2_2(modulo_add_25_qr_lpi_3_dfm_1, modulo_add_57_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_9_i_wea_d_pff = xt_rsc_0_9_i_wea_d_iff;
  assign xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_10_i_da_d_pff = MUX_v_32_2_2(modulo_add_26_qr_lpi_3_dfm_1, modulo_add_58_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_10_i_wea_d_pff = xt_rsc_0_10_i_wea_d_iff;
  assign xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_11_i_da_d_pff = MUX_v_32_2_2(modulo_add_27_qr_lpi_3_dfm_1, modulo_add_59_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_11_i_wea_d_pff = xt_rsc_0_11_i_wea_d_iff;
  assign xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_12_i_da_d_pff = MUX_v_32_2_2(modulo_add_28_qr_lpi_3_dfm_1, modulo_add_60_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_12_i_wea_d_pff = xt_rsc_0_12_i_wea_d_iff;
  assign xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_13_i_da_d_pff = MUX_v_32_2_2(modulo_add_29_qr_lpi_3_dfm_1, modulo_add_61_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_13_i_wea_d_pff = xt_rsc_0_13_i_wea_d_iff;
  assign xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_14_i_da_d_pff = MUX_v_32_2_2(modulo_add_30_qr_lpi_3_dfm_1, modulo_add_62_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_14_i_wea_d_pff = xt_rsc_0_14_i_wea_d_iff;
  assign xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_15_i_da_d_pff = MUX_v_32_2_2(modulo_add_31_qr_lpi_3_dfm_1, modulo_add_63_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_0_15_i_wea_d_pff = xt_rsc_0_15_i_wea_d_iff;
  assign xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_16_i_adra_d_pff = MUX1HOT_v_4_4_2((INNER_LOOP1_r_9_4_sva_4_0[3:0]),
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_306_itm_11, (INNER_LOOP3_r_9_4_sva_4_0[3:0]),
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_337_itm_11, {(fsm_output[2]) , (fsm_output[4])
      , (fsm_output[6]) , (fsm_output[8])});
  assign xt_rsc_0_16_i_wea_d_pff = xt_rsc_0_16_i_wea_d_iff;
  assign xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_17_i_wea_d_pff = xt_rsc_0_17_i_wea_d_iff;
  assign xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_18_i_wea_d_pff = xt_rsc_0_18_i_wea_d_iff;
  assign xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_19_i_wea_d_pff = xt_rsc_0_19_i_wea_d_iff;
  assign xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_20_i_wea_d_pff = xt_rsc_0_20_i_wea_d_iff;
  assign xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_21_i_wea_d_pff = xt_rsc_0_21_i_wea_d_iff;
  assign xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_22_i_wea_d_pff = xt_rsc_0_22_i_wea_d_iff;
  assign xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_23_i_wea_d_pff = xt_rsc_0_23_i_wea_d_iff;
  assign xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_24_i_wea_d_pff = xt_rsc_0_24_i_wea_d_iff;
  assign xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_25_i_wea_d_pff = xt_rsc_0_25_i_wea_d_iff;
  assign xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_26_i_wea_d_pff = xt_rsc_0_26_i_wea_d_iff;
  assign xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_27_i_wea_d_pff = xt_rsc_0_27_i_wea_d_iff;
  assign xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_28_i_wea_d_pff = xt_rsc_0_28_i_wea_d_iff;
  assign xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_29_i_wea_d_pff = xt_rsc_0_29_i_wea_d_iff;
  assign xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_30_i_wea_d_pff = xt_rsc_0_30_i_wea_d_iff;
  assign xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_0_31_i_wea_d_pff = xt_rsc_0_31_i_wea_d_iff;
  assign xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_0_i_da_d_pff = MUX_v_32_2_2(modulo_sub_16_qr_lpi_3_dfm_1, modulo_sub_48_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_0_i_wea_d_pff = xt_rsc_1_0_i_wea_d_iff;
  assign xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_1_i_da_d_pff = MUX_v_32_2_2(modulo_sub_17_qr_lpi_3_dfm_1, modulo_sub_49_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_1_i_wea_d_pff = xt_rsc_1_1_i_wea_d_iff;
  assign xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_2_i_da_d_pff = MUX_v_32_2_2(modulo_sub_18_qr_lpi_3_dfm_1, modulo_sub_50_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_2_i_wea_d_pff = xt_rsc_1_2_i_wea_d_iff;
  assign xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_3_i_da_d_pff = MUX_v_32_2_2(modulo_sub_19_qr_lpi_3_dfm_1, modulo_sub_51_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_3_i_wea_d_pff = xt_rsc_1_3_i_wea_d_iff;
  assign xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_4_i_da_d_pff = MUX_v_32_2_2(modulo_sub_20_qr_lpi_3_dfm_1, modulo_sub_52_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_4_i_wea_d_pff = xt_rsc_1_4_i_wea_d_iff;
  assign xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_5_i_da_d_pff = MUX_v_32_2_2(modulo_sub_21_qr_lpi_3_dfm_1, modulo_sub_53_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_5_i_wea_d_pff = xt_rsc_1_5_i_wea_d_iff;
  assign xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_6_i_da_d_pff = MUX_v_32_2_2(modulo_sub_22_qr_lpi_3_dfm_1, modulo_sub_54_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_6_i_wea_d_pff = xt_rsc_1_6_i_wea_d_iff;
  assign xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_7_i_da_d_pff = MUX_v_32_2_2(modulo_sub_23_qr_lpi_3_dfm_1, modulo_sub_55_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_7_i_wea_d_pff = xt_rsc_1_7_i_wea_d_iff;
  assign xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_8_i_da_d_pff = MUX_v_32_2_2(modulo_sub_24_qr_lpi_3_dfm_1, modulo_sub_56_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_8_i_wea_d_pff = xt_rsc_1_8_i_wea_d_iff;
  assign xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_9_i_da_d_pff = MUX_v_32_2_2(modulo_sub_25_qr_lpi_3_dfm_1, modulo_sub_57_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_9_i_wea_d_pff = xt_rsc_1_9_i_wea_d_iff;
  assign xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_10_i_da_d_pff = MUX_v_32_2_2(modulo_sub_26_qr_lpi_3_dfm_1, modulo_sub_58_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_10_i_wea_d_pff = xt_rsc_1_10_i_wea_d_iff;
  assign xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_11_i_da_d_pff = MUX_v_32_2_2(modulo_sub_27_qr_lpi_3_dfm_1, modulo_sub_59_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_11_i_wea_d_pff = xt_rsc_1_11_i_wea_d_iff;
  assign xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_12_i_da_d_pff = MUX_v_32_2_2(modulo_sub_28_qr_lpi_3_dfm_1, modulo_sub_60_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_12_i_wea_d_pff = xt_rsc_1_12_i_wea_d_iff;
  assign xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_13_i_da_d_pff = MUX_v_32_2_2(modulo_sub_29_qr_lpi_3_dfm_1, modulo_sub_61_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_13_i_wea_d_pff = xt_rsc_1_13_i_wea_d_iff;
  assign xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_14_i_da_d_pff = MUX_v_32_2_2(modulo_sub_30_qr_lpi_3_dfm_1, modulo_sub_62_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_14_i_wea_d_pff = xt_rsc_1_14_i_wea_d_iff;
  assign xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_15_i_da_d_pff = MUX_v_32_2_2(modulo_sub_31_qr_lpi_3_dfm_1, modulo_sub_63_qr_lpi_3_dfm_1,
      fsm_output[8]);
  assign xt_rsc_1_15_i_wea_d_pff = xt_rsc_1_15_i_wea_d_iff;
  assign xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_16_i_wea_d_pff = xt_rsc_1_16_i_wea_d_iff;
  assign xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_17_i_wea_d_pff = xt_rsc_1_17_i_wea_d_iff;
  assign xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_18_i_wea_d_pff = xt_rsc_1_18_i_wea_d_iff;
  assign xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_19_i_wea_d_pff = xt_rsc_1_19_i_wea_d_iff;
  assign xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_20_i_wea_d_pff = xt_rsc_1_20_i_wea_d_iff;
  assign xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_21_i_wea_d_pff = xt_rsc_1_21_i_wea_d_iff;
  assign xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_22_i_wea_d_pff = xt_rsc_1_22_i_wea_d_iff;
  assign xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_23_i_wea_d_pff = xt_rsc_1_23_i_wea_d_iff;
  assign xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_24_i_wea_d_pff = xt_rsc_1_24_i_wea_d_iff;
  assign xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_25_i_wea_d_pff = xt_rsc_1_25_i_wea_d_iff;
  assign xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_26_i_wea_d_pff = xt_rsc_1_26_i_wea_d_iff;
  assign xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_27_i_wea_d_pff = xt_rsc_1_27_i_wea_d_iff;
  assign xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_28_i_wea_d_pff = xt_rsc_1_28_i_wea_d_iff;
  assign xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_29_i_wea_d_pff = xt_rsc_1_29_i_wea_d_iff;
  assign xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_30_i_wea_d_pff = xt_rsc_1_30_i_wea_d_iff;
  assign xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  assign xt_rsc_1_31_i_wea_d_pff = xt_rsc_1_31_i_wea_d_iff;
  assign xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d = xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d_reg;
  always @(posedge clk) begin
    if ( core_wen & ((fsm_output[9]) | (fsm_output[0])) ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( core_wen ) begin
      c_1_sva <= (operator_20_false_acc_cse_sva[0]) | (~ (fsm_output[4]));
      reg_twiddle_rsc_0_0_i_s_raddr_core_3_0_cse <= MUX1HOT_v_4_4_2((INNER_LOOP1_tw_and_psp_sva_1[3:0]),
          INNER_LOOP2_tw_and_nl, (INNER_LOOP3_r_9_4_sva_4_0[3:0]), (INNER_LOOP4_r_9_4_sva_4_0[3:0]),
          {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
      reg_twiddle_rsc_0_1_i_s_raddr_core_4_0_cse <= MUX_v_5_2_2(INNER_LOOP3_r_9_4_sva_4_0,
          INNER_LOOP4_r_9_4_sva_4_0, fsm_output[8]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_yt_rsc_0_0_cgo_cse <= 1'b0;
      reg_yt_rsc_0_16_cgo_cse <= 1'b0;
      reg_yt_rsc_1_0_cgo_cse <= 1'b0;
      reg_yt_rsc_1_16_cgo_cse <= 1'b0;
      reg_xt_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_xt_rsc_0_16_i_oswt_cse <= 1'b0;
      reg_xt_rsc_1_0_i_oswt_cse <= 1'b0;
      reg_xt_rsc_1_16_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_1_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_2_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_3_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_4_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_5_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_6_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_7_i_oswt_cse <= 1'b0;
      reg_twiddle_rsc_0_8_i_oswt_cse <= 1'b0;
      twiddle_h_rsc_0_0_i_s_raddr_core_4 <= 1'b0;
      reg_xt_rsc_triosy_1_31_obj_iswt0_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      reg_ensig_cgo_17_cse <= 1'b0;
      butterFly2_19_tw_asn_itm <= 2'b00;
      INNER_LOOP1_stage_0 <= 1'b0;
      INNER_LOOP1_r_9_4_sva_4_0 <= 5'b00000;
      INNER_LOOP1_stage_0_2 <= 1'b0;
      INNER_LOOP1_stage_0_3 <= 1'b0;
      INNER_LOOP1_stage_0_4 <= 1'b0;
      INNER_LOOP1_stage_0_5 <= 1'b0;
      INNER_LOOP1_stage_0_6 <= 1'b0;
      INNER_LOOP1_stage_0_7 <= 1'b0;
      INNER_LOOP1_stage_0_8 <= 1'b0;
      INNER_LOOP1_stage_0_9 <= 1'b0;
      INNER_LOOP1_stage_0_10 <= 1'b0;
      INNER_LOOP1_stage_0_11 <= 1'b0;
      INNER_LOOP1_stage_0_12 <= 1'b0;
      INNER_LOOP1_stage_0_13 <= 1'b0;
      INNER_LOOP2_stage_0 <= 1'b0;
      INNER_LOOP2_r_9_4_sva_4_0 <= 5'b00000;
      INNER_LOOP2_stage_0_2 <= 1'b0;
      INNER_LOOP2_stage_0_3 <= 1'b0;
      INNER_LOOP2_stage_0_4 <= 1'b0;
      INNER_LOOP2_stage_0_5 <= 1'b0;
      INNER_LOOP2_stage_0_6 <= 1'b0;
      INNER_LOOP2_stage_0_7 <= 1'b0;
      INNER_LOOP2_stage_0_8 <= 1'b0;
      INNER_LOOP2_stage_0_9 <= 1'b0;
      INNER_LOOP2_stage_0_10 <= 1'b0;
      INNER_LOOP2_stage_0_11 <= 1'b0;
      INNER_LOOP2_stage_0_12 <= 1'b0;
      INNER_LOOP3_stage_0 <= 1'b0;
      INNER_LOOP3_r_9_4_sva_4_0 <= 5'b00000;
      INNER_LOOP3_stage_0_2 <= 1'b0;
      INNER_LOOP3_stage_0_3 <= 1'b0;
      INNER_LOOP3_stage_0_4 <= 1'b0;
      INNER_LOOP3_stage_0_5 <= 1'b0;
      INNER_LOOP3_stage_0_6 <= 1'b0;
      INNER_LOOP3_stage_0_7 <= 1'b0;
      INNER_LOOP3_stage_0_8 <= 1'b0;
      INNER_LOOP3_stage_0_9 <= 1'b0;
      INNER_LOOP3_stage_0_10 <= 1'b0;
      INNER_LOOP3_stage_0_11 <= 1'b0;
      INNER_LOOP3_stage_0_12 <= 1'b0;
      INNER_LOOP3_stage_0_13 <= 1'b0;
      INNER_LOOP4_stage_0 <= 1'b0;
      INNER_LOOP4_r_9_4_sva_4_0 <= 5'b00000;
      INNER_LOOP4_stage_0_2 <= 1'b0;
      INNER_LOOP4_stage_0_3 <= 1'b0;
      INNER_LOOP4_stage_0_4 <= 1'b0;
      INNER_LOOP4_stage_0_5 <= 1'b0;
      INNER_LOOP4_stage_0_6 <= 1'b0;
      INNER_LOOP4_stage_0_7 <= 1'b0;
      INNER_LOOP4_stage_0_8 <= 1'b0;
      INNER_LOOP4_stage_0_9 <= 1'b0;
      INNER_LOOP4_stage_0_10 <= 1'b0;
      INNER_LOOP4_stage_0_11 <= 1'b0;
      INNER_LOOP4_stage_0_12 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_yt_rsc_0_0_cgo_cse <= or_67_rmff;
      reg_yt_rsc_0_16_cgo_cse <= or_166_rmff;
      reg_yt_rsc_1_0_cgo_cse <= or_248_rmff;
      reg_yt_rsc_1_16_cgo_cse <= or_347_rmff;
      reg_xt_rsc_0_0_i_oswt_cse <= or_429_rmff;
      reg_xt_rsc_0_16_i_oswt_cse <= or_512_rmff;
      reg_xt_rsc_1_0_i_oswt_cse <= or_578_rmff;
      reg_xt_rsc_1_16_i_oswt_cse <= or_660_rmff;
      reg_twiddle_rsc_0_0_i_oswt_cse <= INNER_LOOP3_INNER_LOOP3_and_1_cse | and_1665_cse
          | and_1666_cse | INNER_LOOP4_INNER_LOOP4_and_1_cse;
      reg_twiddle_rsc_0_1_i_oswt_cse <= (and_dcpl_174 & (fsm_output[6])) | and_1686_cse;
      reg_twiddle_rsc_0_2_i_oswt_cse <= (and_dcpl_176 & (fsm_output[6])) | and_1695_cse;
      reg_twiddle_rsc_0_3_i_oswt_cse <= (and_dcpl_174 & (operator_33_true_2_lshift_psp_2_0_sva[1])
          & (fsm_output[6])) | and_1704_cse;
      reg_twiddle_rsc_0_4_i_oswt_cse <= (INNER_LOOP3_stage_0 & (operator_33_true_2_lshift_psp_2_0_sva[2])
          & (fsm_output[6])) | INNER_LOOP4_INNER_LOOP4_and_1_cse;
      reg_twiddle_rsc_0_5_i_oswt_cse <= (and_dcpl_174 & (operator_33_true_2_lshift_psp_2_0_sva[2])
          & (fsm_output[6])) | and_1686_cse;
      reg_twiddle_rsc_0_6_i_oswt_cse <= (and_dcpl_176 & (operator_33_true_2_lshift_psp_2_0_sva[2])
          & (fsm_output[6])) | and_1695_cse;
      reg_twiddle_rsc_0_7_i_oswt_cse <= (and_dcpl_174 & (operator_33_true_2_lshift_psp_2_0_sva[2:1]==2'b11)
          & (fsm_output[6])) | and_1704_cse;
      reg_twiddle_rsc_0_8_i_oswt_cse <= INNER_LOOP3_INNER_LOOP3_and_1_cse | INNER_LOOP4_INNER_LOOP4_and_1_cse;
      twiddle_h_rsc_0_0_i_s_raddr_core_4 <= MUX1HOT_s_1_4_2((INNER_LOOP1_tw_and_psp_sva_1[4]),
          (INNER_LOOP2_r_9_4_sva_4_0[4]), (INNER_LOOP3_r_9_4_sva_4_0[4]), (INNER_LOOP4_r_9_4_sva_4_0[4]),
          {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
      reg_xt_rsc_triosy_1_31_obj_iswt0_cse <= and_dcpl_144 & (fsm_output[8]);
      reg_ensig_cgo_cse <= or_833_rmff;
      reg_ensig_cgo_17_cse <= or_956_rmff;
      butterFly2_19_tw_asn_itm <= MUX1HOT_v_2_4_2(2'b10, (operator_20_false_acc_cse_sva[2:1]),
          operator_33_true_3_lshift_psp_1_0_sva_mx0w2, operator_33_true_3_lshift_psp_1_0_sva,
          {nor_4_nl , (fsm_output[4]) , (fsm_output[7]) , (fsm_output[8])});
      INNER_LOOP1_stage_0 <= ~((~(INNER_LOOP1_stage_0 & (~ (INNER_LOOP1_r_9_4_sva_2[5]))))
          & (fsm_output[2]));
      INNER_LOOP1_r_9_4_sva_4_0 <= MUX_v_5_2_2(5'b00000, (INNER_LOOP1_r_9_4_sva_2[4:0]),
          (fsm_output[2]));
      INNER_LOOP1_stage_0_2 <= and_1665_cse;
      INNER_LOOP1_stage_0_3 <= INNER_LOOP1_stage_0_2 & (fsm_output[2]);
      INNER_LOOP1_stage_0_4 <= INNER_LOOP1_stage_0_3 & (fsm_output[2]);
      INNER_LOOP1_stage_0_5 <= INNER_LOOP1_stage_0_4 & (fsm_output[2]);
      INNER_LOOP1_stage_0_6 <= INNER_LOOP1_stage_0_5 & (fsm_output[2]);
      INNER_LOOP1_stage_0_7 <= INNER_LOOP1_stage_0_6 & (fsm_output[2]);
      INNER_LOOP1_stage_0_8 <= INNER_LOOP1_stage_0_7 & (fsm_output[2]);
      INNER_LOOP1_stage_0_9 <= INNER_LOOP1_stage_0_8 & (fsm_output[2]);
      INNER_LOOP1_stage_0_10 <= INNER_LOOP1_stage_0_9 & (fsm_output[2]);
      INNER_LOOP1_stage_0_11 <= INNER_LOOP1_stage_0_10 & (fsm_output[2]);
      INNER_LOOP1_stage_0_12 <= INNER_LOOP1_stage_0_11 & (fsm_output[2]);
      INNER_LOOP1_stage_0_13 <= INNER_LOOP1_stage_0_12 & (fsm_output[2]);
      INNER_LOOP2_stage_0 <= ~((~(INNER_LOOP2_stage_0 & (~ (z_out_33[5])))) & (fsm_output[4]));
      INNER_LOOP2_r_9_4_sva_4_0 <= INNER_LOOP1_r_INNER_LOOP1_r_and_2_cse;
      INNER_LOOP2_stage_0_2 <= and_1666_cse;
      INNER_LOOP2_stage_0_3 <= INNER_LOOP2_stage_0_2 & (fsm_output[4]);
      INNER_LOOP2_stage_0_4 <= INNER_LOOP2_stage_0_3 & (fsm_output[4]);
      INNER_LOOP2_stage_0_5 <= INNER_LOOP2_stage_0_4 & (fsm_output[4]);
      INNER_LOOP2_stage_0_6 <= INNER_LOOP2_stage_0_5 & (fsm_output[4]);
      INNER_LOOP2_stage_0_7 <= INNER_LOOP2_stage_0_6 & (fsm_output[4]);
      INNER_LOOP2_stage_0_8 <= INNER_LOOP2_stage_0_7 & (fsm_output[4]);
      INNER_LOOP2_stage_0_9 <= INNER_LOOP2_stage_0_8 & (fsm_output[4]);
      INNER_LOOP2_stage_0_10 <= INNER_LOOP2_stage_0_9 & (fsm_output[4]);
      INNER_LOOP2_stage_0_11 <= INNER_LOOP2_stage_0_10 & (fsm_output[4]);
      INNER_LOOP2_stage_0_12 <= INNER_LOOP2_stage_0_11 & (fsm_output[4]);
      INNER_LOOP3_stage_0 <= ~((~(INNER_LOOP3_stage_0 & (~ (z_out_33[5])))) & (fsm_output[6]));
      INNER_LOOP3_r_9_4_sva_4_0 <= MUX_v_5_2_2(5'b00000, (z_out_33[4:0]), (fsm_output[6]));
      INNER_LOOP3_stage_0_2 <= INNER_LOOP3_INNER_LOOP3_and_1_cse;
      INNER_LOOP3_stage_0_3 <= INNER_LOOP3_stage_0_2 & (fsm_output[6]);
      INNER_LOOP3_stage_0_4 <= INNER_LOOP3_stage_0_3 & (fsm_output[6]);
      INNER_LOOP3_stage_0_5 <= INNER_LOOP3_stage_0_4 & (fsm_output[6]);
      INNER_LOOP3_stage_0_6 <= INNER_LOOP3_stage_0_5 & (fsm_output[6]);
      INNER_LOOP3_stage_0_7 <= INNER_LOOP3_stage_0_6 & (fsm_output[6]);
      INNER_LOOP3_stage_0_8 <= INNER_LOOP3_stage_0_7 & (fsm_output[6]);
      INNER_LOOP3_stage_0_9 <= INNER_LOOP3_stage_0_8 & (fsm_output[6]);
      INNER_LOOP3_stage_0_10 <= INNER_LOOP3_stage_0_9 & (fsm_output[6]);
      INNER_LOOP3_stage_0_11 <= INNER_LOOP3_stage_0_10 & (fsm_output[6]);
      INNER_LOOP3_stage_0_12 <= INNER_LOOP3_stage_0_11 & (fsm_output[6]);
      INNER_LOOP3_stage_0_13 <= INNER_LOOP3_stage_0_12 & (fsm_output[6]);
      INNER_LOOP4_stage_0 <= ~((~(INNER_LOOP4_stage_0 & (~ (INNER_LOOP4_r_9_4_sva_2[5]))))
          & (fsm_output[8]));
      INNER_LOOP4_r_9_4_sva_4_0 <= INNER_LOOP1_r_INNER_LOOP1_r_and_6_cse;
      INNER_LOOP4_stage_0_2 <= INNER_LOOP4_INNER_LOOP4_and_1_cse;
      INNER_LOOP4_stage_0_3 <= INNER_LOOP4_stage_0_2 & (fsm_output[8]);
      INNER_LOOP4_stage_0_4 <= INNER_LOOP4_stage_0_3 & (fsm_output[8]);
      INNER_LOOP4_stage_0_5 <= INNER_LOOP4_stage_0_4 & (fsm_output[8]);
      INNER_LOOP4_stage_0_6 <= INNER_LOOP4_stage_0_5 & (fsm_output[8]);
      INNER_LOOP4_stage_0_7 <= INNER_LOOP4_stage_0_6 & (fsm_output[8]);
      INNER_LOOP4_stage_0_8 <= INNER_LOOP4_stage_0_7 & (fsm_output[8]);
      INNER_LOOP4_stage_0_9 <= INNER_LOOP4_stage_0_8 & (fsm_output[8]);
      INNER_LOOP4_stage_0_10 <= INNER_LOOP4_stage_0_9 & (fsm_output[8]);
      INNER_LOOP4_stage_0_11 <= INNER_LOOP4_stage_0_10 & (fsm_output[8]);
      INNER_LOOP4_stage_0_12 <= INNER_LOOP4_stage_0_11 & (fsm_output[8]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_160_itm_12 <= 1'b0;
    end
    else if ( core_wen & INNER_LOOP1_stage_0_12 ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_160_itm_12 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11;
    end
  end
  always @(posedge clk) begin
    if ( modulo_add_qelse_and_cse ) begin
      modulo_add_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_sva_1, z_out_87,
          z_out_32_1);
      modulo_add_1_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_1_sva_1, z_out_88,
          z_out_1_32);
      modulo_add_2_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_2_sva_1, z_out_89,
          z_out_2_32);
      modulo_add_3_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_3_sva_1, z_out_90,
          z_out_3_32);
      modulo_add_4_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_4_sva_1, z_out_91,
          z_out_4_32);
      modulo_add_5_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_5_sva_1, z_out_92,
          z_out_5_32);
      modulo_add_6_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_6_sva_1, z_out_93,
          z_out_6_32);
      modulo_add_7_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_7_sva_1, z_out_94,
          z_out_7_32);
      modulo_add_8_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_8_sva_1, z_out_95,
          z_out_8_32);
      modulo_add_9_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_9_sva_1, z_out_96,
          z_out_9_32);
      modulo_add_10_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_10_sva_1, z_out_97,
          z_out_10_32);
      modulo_add_11_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_11_sva_1, z_out_98,
          z_out_11_32);
      modulo_add_12_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_12_sva_1, z_out_99,
          z_out_12_32);
      modulo_add_13_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_13_sva_1, z_out_100,
          z_out_13_32);
      modulo_add_14_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_14_sva_1, z_out_101,
          z_out_14_32);
      modulo_add_15_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_15_sva_1, z_out_102,
          z_out_15_32);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11 <= 1'b0;
    end
    else if ( modulo_add_qelse_and_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_11 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_11 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_290_itm_11 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_385_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_11 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_306_itm_11 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_401_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_and_cse ) begin
      modulo_add_base_15_sva_1 <= nl_modulo_add_base_15_sva_1[31:0];
      modulo_add_base_14_sva_1 <= nl_modulo_add_base_14_sva_1[31:0];
      modulo_add_base_13_sva_1 <= nl_modulo_add_base_13_sva_1[31:0];
      modulo_add_base_12_sva_1 <= nl_modulo_add_base_12_sva_1[31:0];
      modulo_add_base_11_sva_1 <= nl_modulo_add_base_11_sva_1[31:0];
      modulo_add_base_10_sva_1 <= z_out_85;
      modulo_add_base_9_sva_1 <= nl_modulo_add_base_9_sva_1[31:0];
      modulo_add_base_8_sva_1 <= nl_modulo_add_base_8_sva_1[31:0];
      modulo_add_base_7_sva_1 <= nl_modulo_add_base_7_sva_1[31:0];
      modulo_add_base_6_sva_1 <= nl_modulo_add_base_6_sva_1[31:0];
      modulo_add_base_5_sva_1 <= nl_modulo_add_base_5_sva_1[31:0];
      modulo_add_base_4_sva_1 <= nl_modulo_add_base_4_sva_1[31:0];
      modulo_add_base_3_sva_1 <= nl_modulo_add_base_3_sva_1[31:0];
      modulo_add_base_2_sva_1 <= nl_modulo_add_base_2_sva_1[31:0];
      modulo_add_base_1_sva_1 <= nl_modulo_add_base_1_sva_1[31:0];
      modulo_add_base_sva_1 <= nl_modulo_add_base_sva_1[31:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      modulo_sub_base_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_1_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_2_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_3_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_4_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_5_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_6_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_7_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_8_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_9_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_10_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_11_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_12_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_13_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_14_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_15_sva_1 <= 32'b00000000000000000000000000000000;
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10 <= 1'b0;
    end
    else if ( butterFly1_and_cse ) begin
      modulo_sub_base_sva_1 <= nl_modulo_sub_base_sva_1[31:0];
      modulo_sub_base_1_sva_1 <= nl_modulo_sub_base_1_sva_1[31:0];
      modulo_sub_base_2_sva_1 <= nl_modulo_sub_base_2_sva_1[31:0];
      modulo_sub_base_3_sva_1 <= nl_modulo_sub_base_3_sva_1[31:0];
      modulo_sub_base_4_sva_1 <= nl_modulo_sub_base_4_sva_1[31:0];
      modulo_sub_base_5_sva_1 <= nl_modulo_sub_base_5_sva_1[31:0];
      modulo_sub_base_6_sva_1 <= nl_modulo_sub_base_6_sva_1[31:0];
      modulo_sub_base_7_sva_1 <= nl_modulo_sub_base_7_sva_1[31:0];
      modulo_sub_base_8_sva_1 <= nl_modulo_sub_base_8_sva_1[31:0];
      modulo_sub_base_9_sva_1 <= nl_modulo_sub_base_9_sva_1[31:0];
      modulo_sub_base_10_sva_1 <= z_out_86;
      modulo_sub_base_11_sva_1 <= nl_modulo_sub_base_11_sva_1[31:0];
      modulo_sub_base_12_sva_1 <= nl_modulo_sub_base_12_sva_1[31:0];
      modulo_sub_base_13_sva_1 <= nl_modulo_sub_base_13_sva_1[31:0];
      modulo_sub_base_14_sva_1 <= nl_modulo_sub_base_14_sva_1[31:0];
      modulo_sub_base_15_sva_1 <= nl_modulo_sub_base_15_sva_1[31:0];
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_10 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_10 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_385_itm_10 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_10 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_401_itm_10 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_if_and_cse ) begin
      mult_res_sva_1 <= mult_res_sva_2;
      mult_1_res_sva_1 <= mult_1_res_sva_2;
      mult_2_res_sva_1 <= mult_2_res_sva_2;
      mult_3_res_sva_1 <= mult_3_res_sva_2;
      mult_4_res_sva_1 <= mult_4_res_sva_2;
      mult_5_res_sva_1 <= mult_5_res_sva_2;
      mult_6_res_sva_1 <= mult_6_res_sva_2;
      mult_7_res_sva_1 <= mult_7_res_sva_2;
      mult_8_res_sva_1 <= mult_8_res_sva_2;
      mult_9_res_sva_1 <= mult_9_res_sva_2;
      mult_10_res_sva_1 <= mult_10_res_sva_2;
      mult_11_res_sva_1 <= mult_11_res_sva_2;
      mult_12_res_sva_1 <= mult_12_res_sva_2;
      mult_13_res_sva_1 <= mult_13_res_sva_2;
      mult_14_res_sva_1 <= mult_14_res_sva_2;
      mult_15_res_sva_1 <= mult_15_res_sva_2;
      tmp_94_lpi_3_dfm_8 <= tmp_94_lpi_3_dfm_7;
      tmp_92_lpi_3_dfm_8 <= tmp_92_lpi_3_dfm_7;
      tmp_90_lpi_3_dfm_8 <= tmp_90_lpi_3_dfm_7;
      tmp_88_lpi_3_dfm_8 <= tmp_88_lpi_3_dfm_7;
      tmp_86_lpi_3_dfm_8 <= tmp_86_lpi_3_dfm_7;
      tmp_84_lpi_3_dfm_8 <= tmp_84_lpi_3_dfm_7;
      tmp_82_lpi_3_dfm_8 <= tmp_82_lpi_3_dfm_7;
      tmp_80_lpi_3_dfm_8 <= tmp_80_lpi_3_dfm_7;
      tmp_78_lpi_3_dfm_8 <= tmp_78_lpi_3_dfm_7;
      tmp_76_lpi_3_dfm_8 <= tmp_76_lpi_3_dfm_7;
      tmp_74_lpi_3_dfm_8 <= tmp_74_lpi_3_dfm_7;
      tmp_72_lpi_3_dfm_8 <= tmp_72_lpi_3_dfm_7;
      tmp_70_lpi_3_dfm_8 <= tmp_70_lpi_3_dfm_7;
      tmp_68_lpi_3_dfm_8 <= tmp_68_lpi_3_dfm_7;
      tmp_66_lpi_3_dfm_8 <= tmp_66_lpi_3_dfm_7;
      tmp_64_lpi_3_dfm_8 <= tmp_64_lpi_3_dfm_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      mult_15_slc_32_svs_st_1 <= 1'b0;
      mult_14_slc_32_svs_st_1 <= 1'b0;
      mult_13_slc_32_svs_st_1 <= 1'b0;
      mult_12_slc_32_svs_st_1 <= 1'b0;
      mult_11_slc_32_svs_st_1 <= 1'b0;
      mult_10_slc_32_svs_st_1 <= 1'b0;
      mult_9_slc_32_svs_st_1 <= 1'b0;
      mult_8_slc_32_svs_st_1 <= 1'b0;
      mult_7_slc_32_svs_st_1 <= 1'b0;
      mult_6_slc_32_svs_st_1 <= 1'b0;
      mult_5_slc_32_svs_st_1 <= 1'b0;
      mult_4_slc_32_svs_st_1 <= 1'b0;
      mult_3_slc_32_svs_st_1 <= 1'b0;
      mult_2_slc_32_svs_st_1 <= 1'b0;
      mult_1_slc_32_svs_st_1 <= 1'b0;
      mult_slc_32_svs_st_1 <= 1'b0;
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9 <= 1'b0;
    end
    else if ( mult_15_if_and_cse ) begin
      mult_15_slc_32_svs_st_1 <= z_out_16_32;
      mult_14_slc_32_svs_st_1 <= z_out_17_32;
      mult_13_slc_32_svs_st_1 <= z_out_18_32;
      mult_12_slc_32_svs_st_1 <= z_out_19_32;
      mult_11_slc_32_svs_st_1 <= z_out_20_32;
      mult_10_slc_32_svs_st_1 <= z_out_21_32;
      mult_9_slc_32_svs_st_1 <= z_out_22_32;
      mult_8_slc_32_svs_st_1 <= z_out_23_32;
      mult_7_slc_32_svs_st_1 <= z_out_24_32;
      mult_6_slc_32_svs_st_1 <= z_out_25_32;
      mult_5_slc_32_svs_st_1 <= z_out_26_32;
      mult_4_slc_32_svs_st_1 <= z_out_27_32;
      mult_3_slc_32_svs_st_1 <= z_out_28_32;
      mult_2_slc_32_svs_st_1 <= z_out_29_32;
      mult_1_slc_32_svs_st_1 <= z_out_30_32;
      mult_slc_32_svs_st_1 <= z_out_31_32;
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_9 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1 <= 1'b0;
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1 <= 1'b0;
    end
    else if ( INNER_LOOP1_r_and_7_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1 <= INNER_LOOP1_r_9_4_sva_4_0[4];
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & (~ (fsm_output[2])) ) begin
      operator_33_true_return_8_4_sva <= z_out_32[8:4];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_20_false_acc_cse_sva <= 3'b000;
    end
    else if ( core_wen & (fsm_output[4:2]==3'b000) ) begin
      operator_20_false_acc_cse_sva <= operator_20_false_acc_cse_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_z_and_cse ) begin
      mult_15_z_asn_itm_4 <= mult_15_z_asn_itm_3;
      mult_14_z_asn_itm_4 <= mult_14_z_asn_itm_3;
      mult_13_z_asn_itm_4 <= mult_13_z_asn_itm_3;
      mult_12_z_asn_itm_4 <= mult_12_z_asn_itm_3;
      mult_11_z_asn_itm_4 <= mult_11_z_asn_itm_3;
      mult_10_z_asn_itm_4 <= mult_10_z_asn_itm_3;
      mult_9_z_asn_itm_4 <= mult_9_z_asn_itm_3;
      mult_8_z_asn_itm_4 <= mult_8_z_asn_itm_3;
      mult_7_z_asn_itm_4 <= mult_7_z_asn_itm_3;
      mult_6_z_asn_itm_4 <= mult_6_z_asn_itm_3;
      mult_5_z_asn_itm_4 <= mult_5_z_asn_itm_3;
      mult_4_z_asn_itm_4 <= mult_4_z_asn_itm_3;
      mult_3_z_asn_itm_4 <= mult_3_z_asn_itm_3;
      mult_2_z_asn_itm_4 <= mult_2_z_asn_itm_3;
      mult_1_z_asn_itm_4 <= mult_1_z_asn_itm_3;
      mult_z_asn_itm_4 <= mult_z_asn_itm_3;
      tmp_94_lpi_3_dfm_7 <= tmp_94_lpi_3_dfm_6;
      tmp_92_lpi_3_dfm_7 <= tmp_92_lpi_3_dfm_6;
      tmp_90_lpi_3_dfm_7 <= tmp_90_lpi_3_dfm_6;
      tmp_88_lpi_3_dfm_7 <= tmp_88_lpi_3_dfm_6;
      tmp_86_lpi_3_dfm_7 <= tmp_86_lpi_3_dfm_6;
      tmp_84_lpi_3_dfm_7 <= tmp_84_lpi_3_dfm_6;
      tmp_82_lpi_3_dfm_7 <= tmp_82_lpi_3_dfm_6;
      tmp_80_lpi_3_dfm_7 <= tmp_80_lpi_3_dfm_6;
      tmp_78_lpi_3_dfm_7 <= tmp_78_lpi_3_dfm_6;
      tmp_76_lpi_3_dfm_7 <= tmp_76_lpi_3_dfm_6;
      tmp_74_lpi_3_dfm_7 <= tmp_74_lpi_3_dfm_6;
      tmp_72_lpi_3_dfm_7 <= tmp_72_lpi_3_dfm_6;
      tmp_70_lpi_3_dfm_7 <= tmp_70_lpi_3_dfm_6;
      tmp_68_lpi_3_dfm_7 <= tmp_68_lpi_3_dfm_6;
      tmp_66_lpi_3_dfm_7 <= tmp_66_lpi_3_dfm_6;
      tmp_64_lpi_3_dfm_7 <= tmp_64_lpi_3_dfm_6;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8 <= 1'b0;
    end
    else if ( mult_15_z_and_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_z_and_cse_1 ) begin
      reg_mult_15_z_asn_itm_1_cse <= mult_z_mul_cmp_1_z;
      reg_mult_14_z_asn_itm_1_cse <= mult_z_mul_cmp_3_z;
      reg_mult_13_z_asn_itm_1_cse <= mult_z_mul_cmp_5_z;
      reg_mult_12_z_asn_itm_1_cse <= mult_z_mul_cmp_7_z;
      reg_mult_11_z_asn_itm_1_cse <= mult_z_mul_cmp_9_z;
      reg_mult_10_z_asn_itm_1_cse <= mult_z_mul_cmp_11_z;
      reg_mult_9_z_asn_itm_1_cse <= mult_z_mul_cmp_13_z;
      reg_mult_8_z_asn_itm_1_cse <= mult_z_mul_cmp_15_z;
      reg_mult_7_z_asn_itm_1_cse <= mult_z_mul_cmp_17_z;
      reg_mult_6_z_asn_itm_1_cse <= mult_z_mul_cmp_19_z;
      reg_mult_5_z_asn_itm_1_cse <= mult_z_mul_cmp_21_z;
      reg_mult_4_z_asn_itm_1_cse <= mult_z_mul_cmp_23_z;
      reg_mult_3_z_asn_itm_1_cse <= mult_z_mul_cmp_25_z;
      reg_mult_2_z_asn_itm_1_cse <= mult_z_mul_cmp_27_z;
      reg_mult_1_z_asn_itm_1_cse <= mult_z_mul_cmp_29_z;
      reg_mult_z_asn_itm_1_cse <= mult_z_mul_cmp_31_z;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_9 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_9 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_9 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_8)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_9 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_8 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_8 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_8 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_8 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_z_and_1_cse ) begin
      mult_15_z_asn_itm_3 <= mult_15_z_asn_itm_2;
      mult_14_z_asn_itm_3 <= mult_14_z_asn_itm_2;
      mult_13_z_asn_itm_3 <= mult_13_z_asn_itm_2;
      mult_12_z_asn_itm_3 <= mult_12_z_asn_itm_2;
      mult_11_z_asn_itm_3 <= mult_11_z_asn_itm_2;
      mult_10_z_asn_itm_3 <= mult_10_z_asn_itm_2;
      mult_9_z_asn_itm_3 <= mult_9_z_asn_itm_2;
      mult_8_z_asn_itm_3 <= mult_8_z_asn_itm_2;
      mult_7_z_asn_itm_3 <= mult_7_z_asn_itm_2;
      mult_6_z_asn_itm_3 <= mult_6_z_asn_itm_2;
      mult_5_z_asn_itm_3 <= mult_5_z_asn_itm_2;
      mult_4_z_asn_itm_3 <= mult_4_z_asn_itm_2;
      mult_3_z_asn_itm_3 <= mult_3_z_asn_itm_2;
      mult_2_z_asn_itm_3 <= mult_2_z_asn_itm_2;
      mult_1_z_asn_itm_3 <= mult_1_z_asn_itm_2;
      mult_z_asn_itm_3 <= mult_z_asn_itm_2;
      tmp_94_lpi_3_dfm_6 <= tmp_94_lpi_3_dfm_5;
      tmp_92_lpi_3_dfm_6 <= tmp_92_lpi_3_dfm_5;
      tmp_90_lpi_3_dfm_6 <= tmp_90_lpi_3_dfm_5;
      tmp_88_lpi_3_dfm_6 <= tmp_88_lpi_3_dfm_5;
      tmp_86_lpi_3_dfm_6 <= tmp_86_lpi_3_dfm_5;
      tmp_84_lpi_3_dfm_6 <= tmp_84_lpi_3_dfm_5;
      tmp_82_lpi_3_dfm_6 <= tmp_82_lpi_3_dfm_5;
      tmp_80_lpi_3_dfm_6 <= tmp_80_lpi_3_dfm_5;
      tmp_78_lpi_3_dfm_6 <= tmp_78_lpi_3_dfm_5;
      tmp_76_lpi_3_dfm_6 <= tmp_76_lpi_3_dfm_5;
      tmp_74_lpi_3_dfm_6 <= tmp_74_lpi_3_dfm_5;
      tmp_72_lpi_3_dfm_6 <= tmp_72_lpi_3_dfm_5;
      tmp_70_lpi_3_dfm_6 <= tmp_70_lpi_3_dfm_5;
      tmp_68_lpi_3_dfm_6 <= tmp_68_lpi_3_dfm_5;
      tmp_66_lpi_3_dfm_6 <= tmp_66_lpi_3_dfm_5;
      tmp_64_lpi_3_dfm_6 <= tmp_64_lpi_3_dfm_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7 <= 1'b0;
    end
    else if ( mult_15_z_and_1_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_7 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_7 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_7 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_7 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_7 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_z_and_2_cse ) begin
      mult_15_z_asn_itm_2 <= mult_15_z_asn_itm_1;
      mult_14_z_asn_itm_2 <= mult_14_z_asn_itm_1;
      mult_13_z_asn_itm_2 <= mult_13_z_asn_itm_1;
      mult_12_z_asn_itm_2 <= mult_12_z_asn_itm_1;
      mult_11_z_asn_itm_2 <= mult_11_z_asn_itm_1;
      mult_10_z_asn_itm_2 <= mult_10_z_asn_itm_1;
      mult_9_z_asn_itm_2 <= mult_9_z_asn_itm_1;
      mult_8_z_asn_itm_2 <= mult_8_z_asn_itm_1;
      mult_7_z_asn_itm_2 <= mult_7_z_asn_itm_1;
      mult_6_z_asn_itm_2 <= mult_6_z_asn_itm_1;
      mult_5_z_asn_itm_2 <= mult_5_z_asn_itm_1;
      mult_4_z_asn_itm_2 <= mult_4_z_asn_itm_1;
      mult_3_z_asn_itm_2 <= mult_3_z_asn_itm_1;
      mult_2_z_asn_itm_2 <= mult_2_z_asn_itm_1;
      mult_1_z_asn_itm_2 <= mult_1_z_asn_itm_1;
      mult_z_asn_itm_2 <= mult_z_asn_itm_1;
      tmp_94_lpi_3_dfm_5 <= tmp_94_lpi_3_dfm_4;
      tmp_92_lpi_3_dfm_5 <= tmp_92_lpi_3_dfm_4;
      tmp_90_lpi_3_dfm_5 <= tmp_90_lpi_3_dfm_4;
      tmp_88_lpi_3_dfm_5 <= tmp_88_lpi_3_dfm_4;
      tmp_86_lpi_3_dfm_5 <= tmp_86_lpi_3_dfm_4;
      tmp_84_lpi_3_dfm_5 <= tmp_84_lpi_3_dfm_4;
      tmp_82_lpi_3_dfm_5 <= tmp_82_lpi_3_dfm_4;
      tmp_80_lpi_3_dfm_5 <= tmp_80_lpi_3_dfm_4;
      tmp_78_lpi_3_dfm_5 <= tmp_78_lpi_3_dfm_4;
      tmp_76_lpi_3_dfm_5 <= tmp_76_lpi_3_dfm_4;
      tmp_74_lpi_3_dfm_5 <= tmp_74_lpi_3_dfm_4;
      tmp_72_lpi_3_dfm_5 <= tmp_72_lpi_3_dfm_4;
      tmp_70_lpi_3_dfm_5 <= tmp_70_lpi_3_dfm_4;
      tmp_68_lpi_3_dfm_5 <= tmp_68_lpi_3_dfm_4;
      tmp_66_lpi_3_dfm_5 <= tmp_66_lpi_3_dfm_4;
      tmp_64_lpi_3_dfm_5 <= tmp_64_lpi_3_dfm_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6 <= 1'b0;
    end
    else if ( mult_15_z_and_2_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_6 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_6 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_6 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_6 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_6 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( mult_15_z_and_3_cse ) begin
      mult_15_z_asn_itm_1 <= mult_z_mul_cmp_2_z;
      mult_14_z_asn_itm_1 <= mult_z_mul_cmp_4_z;
      mult_13_z_asn_itm_1 <= mult_z_mul_cmp_6_z;
      mult_12_z_asn_itm_1 <= mult_z_mul_cmp_8_z;
      mult_11_z_asn_itm_1 <= mult_z_mul_cmp_10_z;
      mult_10_z_asn_itm_1 <= mult_z_mul_cmp_12_z;
      mult_9_z_asn_itm_1 <= mult_z_mul_cmp_14_z;
      mult_8_z_asn_itm_1 <= mult_z_mul_cmp_16_z;
      mult_7_z_asn_itm_1 <= mult_z_mul_cmp_18_z;
      mult_6_z_asn_itm_1 <= mult_z_mul_cmp_20_z;
      mult_5_z_asn_itm_1 <= mult_z_mul_cmp_22_z;
      mult_4_z_asn_itm_1 <= mult_z_mul_cmp_24_z;
      mult_3_z_asn_itm_1 <= mult_z_mul_cmp_26_z;
      mult_2_z_asn_itm_1 <= mult_z_mul_cmp_28_z;
      mult_1_z_asn_itm_1 <= mult_z_mul_cmp_30_z;
      mult_z_asn_itm_1 <= mult_z_mul_cmp_z;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP1_r_and_20_cse ) begin
      tmp_94_lpi_3_dfm_4 <= tmp_94_lpi_3_dfm_3;
      tmp_92_lpi_3_dfm_4 <= tmp_92_lpi_3_dfm_3;
      tmp_90_lpi_3_dfm_4 <= tmp_90_lpi_3_dfm_3;
      tmp_88_lpi_3_dfm_4 <= tmp_88_lpi_3_dfm_3;
      tmp_86_lpi_3_dfm_4 <= tmp_86_lpi_3_dfm_3;
      tmp_84_lpi_3_dfm_4 <= tmp_84_lpi_3_dfm_3;
      tmp_82_lpi_3_dfm_4 <= tmp_82_lpi_3_dfm_3;
      tmp_80_lpi_3_dfm_4 <= tmp_80_lpi_3_dfm_3;
      tmp_78_lpi_3_dfm_4 <= tmp_78_lpi_3_dfm_3;
      tmp_76_lpi_3_dfm_4 <= tmp_76_lpi_3_dfm_3;
      tmp_74_lpi_3_dfm_4 <= tmp_74_lpi_3_dfm_3;
      tmp_72_lpi_3_dfm_4 <= tmp_72_lpi_3_dfm_3;
      tmp_70_lpi_3_dfm_4 <= tmp_70_lpi_3_dfm_3;
      tmp_68_lpi_3_dfm_4 <= tmp_68_lpi_3_dfm_3;
      tmp_66_lpi_3_dfm_4 <= tmp_66_lpi_3_dfm_3;
      tmp_64_lpi_3_dfm_4 <= tmp_64_lpi_3_dfm_3;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5 <= 1'b0;
    end
    else if ( INNER_LOOP1_r_and_20_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_5 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_5 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_5 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_5 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_5 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP1_r_and_23_cse ) begin
      tmp_94_lpi_3_dfm_3 <= tmp_94_lpi_3_dfm_2;
      tmp_92_lpi_3_dfm_3 <= tmp_92_lpi_3_dfm_2;
      tmp_90_lpi_3_dfm_3 <= tmp_90_lpi_3_dfm_2;
      tmp_88_lpi_3_dfm_3 <= tmp_88_lpi_3_dfm_2;
      tmp_86_lpi_3_dfm_3 <= tmp_86_lpi_3_dfm_2;
      tmp_84_lpi_3_dfm_3 <= tmp_84_lpi_3_dfm_2;
      tmp_82_lpi_3_dfm_3 <= tmp_82_lpi_3_dfm_2;
      tmp_80_lpi_3_dfm_3 <= tmp_80_lpi_3_dfm_2;
      tmp_78_lpi_3_dfm_3 <= tmp_78_lpi_3_dfm_2;
      tmp_76_lpi_3_dfm_3 <= tmp_76_lpi_3_dfm_2;
      tmp_74_lpi_3_dfm_3 <= tmp_74_lpi_3_dfm_2;
      tmp_72_lpi_3_dfm_3 <= tmp_72_lpi_3_dfm_2;
      tmp_70_lpi_3_dfm_3 <= tmp_70_lpi_3_dfm_2;
      tmp_68_lpi_3_dfm_3 <= tmp_68_lpi_3_dfm_2;
      tmp_66_lpi_3_dfm_3 <= tmp_66_lpi_3_dfm_2;
      tmp_64_lpi_3_dfm_3 <= tmp_64_lpi_3_dfm_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4 <= 1'b0;
    end
    else if ( INNER_LOOP1_r_and_23_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_4 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_4 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_4 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_4 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_4 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP1_r_and_26_cse ) begin
      tmp_94_lpi_3_dfm_2 <= tmp_94_lpi_3_dfm_1;
      tmp_92_lpi_3_dfm_2 <= tmp_92_lpi_3_dfm_1;
      tmp_90_lpi_3_dfm_2 <= tmp_90_lpi_3_dfm_1;
      tmp_88_lpi_3_dfm_2 <= tmp_88_lpi_3_dfm_1;
      tmp_86_lpi_3_dfm_2 <= tmp_86_lpi_3_dfm_1;
      tmp_84_lpi_3_dfm_2 <= tmp_84_lpi_3_dfm_1;
      tmp_82_lpi_3_dfm_2 <= tmp_82_lpi_3_dfm_1;
      tmp_80_lpi_3_dfm_2 <= tmp_80_lpi_3_dfm_1;
      tmp_78_lpi_3_dfm_2 <= tmp_78_lpi_3_dfm_1;
      tmp_76_lpi_3_dfm_2 <= tmp_76_lpi_3_dfm_1;
      tmp_74_lpi_3_dfm_2 <= tmp_74_lpi_3_dfm_1;
      tmp_72_lpi_3_dfm_2 <= tmp_72_lpi_3_dfm_1;
      tmp_70_lpi_3_dfm_2 <= tmp_70_lpi_3_dfm_1;
      tmp_68_lpi_3_dfm_2 <= tmp_68_lpi_3_dfm_1;
      tmp_66_lpi_3_dfm_2 <= tmp_66_lpi_3_dfm_1;
      tmp_64_lpi_3_dfm_2 <= tmp_64_lpi_3_dfm_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3 <= 1'b0;
    end
    else if ( INNER_LOOP1_r_and_26_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_3 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_3 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_3 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_3 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_3 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP1_r_and_29_cse ) begin
      tmp_94_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_30_i_qa_d_mxwt, xt_rsc_1_30_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_92_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_28_i_qa_d_mxwt, xt_rsc_1_28_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_90_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_26_i_qa_d_mxwt, xt_rsc_1_26_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_88_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_24_i_qa_d_mxwt, xt_rsc_1_24_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_86_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_22_i_qa_d_mxwt, xt_rsc_1_22_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_84_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_20_i_qa_d_mxwt, xt_rsc_1_20_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_82_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_18_i_qa_d_mxwt, xt_rsc_1_18_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_80_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_16_i_qa_d_mxwt, xt_rsc_1_16_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_78_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_14_i_qa_d_mxwt, xt_rsc_1_14_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_76_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_12_i_qa_d_mxwt, xt_rsc_1_12_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_74_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_10_i_qa_d_mxwt, xt_rsc_1_10_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_72_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_8_i_qa_d_mxwt, xt_rsc_1_8_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_70_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_6_i_qa_d_mxwt, xt_rsc_1_6_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_68_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_4_i_qa_d_mxwt, xt_rsc_1_4_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_66_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_2_i_qa_d_mxwt, xt_rsc_1_2_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
      tmp_64_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_0_i_qa_d_mxwt, xt_rsc_1_0_i_qa_d_mxwt,
          INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_63_itm_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2 <= 1'b0;
    end
    else if ( INNER_LOOP1_r_and_29_cse ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_2 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_2 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_2 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0_2 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm_1)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_2 <= INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0 & INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_20_itm_1 <= INNER_LOOP1_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP1_stage_0 & (~ INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm)
        ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_4210_itm_1 <= INNER_LOOP1_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm <= 1'b0;
    end
    else if ( core_wen & ((fsm_output[1]) | ((~((INNER_LOOP1_r_9_4_sva_2[5]) | INNER_LOOP1_nor_tmp))
        & INNER_LOOP1_stage_0 & (fsm_output[2]))) ) begin
      INNER_LOOP1_r_slc_INNER_LOOP1_r_9_4_4_0_161_itm <= (INNER_LOOP1_r_9_4_sva_2[0])
          & (fsm_output[2]);
    end
  end
  always @(posedge clk) begin
    if ( modulo_add_16_qelse_and_cse ) begin
      modulo_add_16_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_16_sva_1, z_out_89,
          z_out_32_1);
      modulo_sub_16_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_16_sva_1[30:0])}),
          z_out_50, modulo_sub_base_16_sva_1[31]);
      modulo_add_17_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_17_sva_1, z_out_90,
          z_out_1_32);
      modulo_sub_17_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_17_sva_1[30:0])}),
          z_out_52, modulo_sub_base_17_sva_1[31]);
      modulo_add_18_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_18_sva_1, z_out_91,
          z_out_2_32);
      modulo_sub_18_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_18_sva_1[30:0])}),
          z_out_54, modulo_sub_base_18_sva_1[31]);
      modulo_add_19_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_19_sva_1, z_out_101,
          z_out_3_32);
      modulo_sub_19_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_19_sva_1[30:0])}),
          z_out_56, modulo_sub_base_19_sva_1[31]);
      modulo_add_20_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_20_sva_1, modulo_add_20_qif_acc_nl,
          z_out_4_32);
      modulo_sub_20_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_20_sva_1[30:0])}),
          z_out_58, modulo_sub_base_20_sva_1[31]);
      modulo_add_21_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_21_sva_1, modulo_add_21_qif_acc_nl,
          z_out_5_32);
      modulo_sub_21_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_21_sva_1[30:0])}),
          z_out_60, modulo_sub_base_21_sva_1[31]);
      modulo_add_22_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_22_sva_1, modulo_add_22_qif_acc_nl,
          z_out_6_32);
      modulo_sub_22_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_22_sva_1[30:0])}),
          z_out_62, modulo_sub_base_22_sva_1[31]);
      modulo_add_23_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_23_sva_1, modulo_add_23_qif_acc_nl,
          z_out_7_32);
      modulo_sub_23_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_23_sva_1[30:0])}),
          z_out_64, modulo_sub_base_23_sva_1[31]);
      modulo_add_24_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_24_sva_1, modulo_add_24_qif_acc_nl,
          z_out_8_32);
      modulo_sub_24_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_24_sva_1[30:0])}),
          z_out_66, modulo_sub_base_24_sva_1[31]);
      modulo_add_25_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_25_sva_1, modulo_add_25_qif_acc_nl,
          z_out_9_32);
      modulo_sub_25_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_25_sva_1[30:0])}),
          z_out_68, modulo_sub_base_25_sva_1[31]);
      modulo_add_26_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_26_sva_1, modulo_add_26_qif_acc_nl,
          z_out_10_32);
      modulo_sub_26_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_26_sva_1[30:0])}),
          z_out_70, modulo_sub_base_26_sva_1[31]);
      modulo_add_27_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_27_sva_1, modulo_add_27_qif_acc_nl,
          z_out_11_32);
      modulo_sub_27_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_27_sva_1[30:0])}),
          z_out_72, modulo_sub_base_27_sva_1[31]);
      modulo_add_28_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_28_sva_1, modulo_add_28_qif_acc_nl,
          z_out_12_32);
      modulo_sub_28_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_28_sva_1[30:0])}),
          z_out_74, modulo_sub_base_28_sva_1[31]);
      modulo_add_29_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_29_sva_1, modulo_add_29_qif_acc_nl,
          z_out_13_32);
      modulo_sub_29_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_29_sva_1[30:0])}),
          z_out_76, modulo_sub_base_29_sva_1[31]);
      modulo_add_30_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_30_sva_1, modulo_add_30_qif_acc_nl,
          z_out_14_32);
      modulo_sub_30_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_30_sva_1[30:0])}),
          z_out_78, modulo_sub_base_30_sva_1[31]);
      modulo_add_31_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_31_sva_1, modulo_add_31_qif_acc_nl,
          z_out_15_32);
      modulo_sub_31_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_31_sva_1[30:0])}),
          z_out_80, modulo_sub_base_31_sva_1[31]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_11 <= 1'b0;
    end
    else if ( modulo_add_16_qelse_and_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_11 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_11 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_290_itm_11 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_11 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_306_itm_11 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_31_and_cse ) begin
      modulo_add_base_31_sva_1 <= nl_modulo_add_base_31_sva_1[31:0];
      modulo_add_base_30_sva_1 <= nl_modulo_add_base_30_sva_1[31:0];
      modulo_add_base_29_sva_1 <= nl_modulo_add_base_29_sva_1[31:0];
      modulo_add_base_28_sva_1 <= nl_modulo_add_base_28_sva_1[31:0];
      modulo_add_base_27_sva_1 <= nl_modulo_add_base_27_sva_1[31:0];
      modulo_add_base_26_sva_1 <= nl_modulo_add_base_26_sva_1[31:0];
      modulo_add_base_25_sva_1 <= nl_modulo_add_base_25_sva_1[31:0];
      modulo_add_base_24_sva_1 <= nl_modulo_add_base_24_sva_1[31:0];
      modulo_add_base_23_sva_1 <= nl_modulo_add_base_23_sva_1[31:0];
      modulo_add_base_22_sva_1 <= nl_modulo_add_base_22_sva_1[31:0];
      modulo_add_base_21_sva_1 <= nl_modulo_add_base_21_sva_1[31:0];
      modulo_add_base_20_sva_1 <= nl_modulo_add_base_20_sva_1[31:0];
      modulo_add_base_19_sva_1 <= nl_modulo_add_base_19_sva_1[31:0];
      modulo_add_base_18_sva_1 <= nl_modulo_add_base_18_sva_1[31:0];
      modulo_add_base_17_sva_1 <= nl_modulo_add_base_17_sva_1[31:0];
      modulo_add_base_16_sva_1 <= nl_modulo_add_base_16_sva_1[31:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      modulo_sub_base_16_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_17_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_18_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_19_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_20_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_21_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_22_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_23_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_24_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_25_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_26_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_27_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_28_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_29_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_30_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_31_sva_1 <= 32'b00000000000000000000000000000000;
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10 <= 1'b0;
    end
    else if ( butterFly1_31_and_cse ) begin
      modulo_sub_base_16_sva_1 <= nl_modulo_sub_base_16_sva_1[31:0];
      modulo_sub_base_17_sva_1 <= nl_modulo_sub_base_17_sva_1[31:0];
      modulo_sub_base_18_sva_1 <= nl_modulo_sub_base_18_sva_1[31:0];
      modulo_sub_base_19_sva_1 <= nl_modulo_sub_base_19_sva_1[31:0];
      modulo_sub_base_20_sva_1 <= nl_modulo_sub_base_20_sva_1[31:0];
      modulo_sub_base_21_sva_1 <= nl_modulo_sub_base_21_sva_1[31:0];
      modulo_sub_base_22_sva_1 <= nl_modulo_sub_base_22_sva_1[31:0];
      modulo_sub_base_23_sva_1 <= nl_modulo_sub_base_23_sva_1[31:0];
      modulo_sub_base_24_sva_1 <= nl_modulo_sub_base_24_sva_1[31:0];
      modulo_sub_base_25_sva_1 <= nl_modulo_sub_base_25_sva_1[31:0];
      modulo_sub_base_26_sva_1 <= nl_modulo_sub_base_26_sva_1[31:0];
      modulo_sub_base_27_sva_1 <= nl_modulo_sub_base_27_sva_1[31:0];
      modulo_sub_base_28_sva_1 <= nl_modulo_sub_base_28_sva_1[31:0];
      modulo_sub_base_29_sva_1 <= nl_modulo_sub_base_29_sva_1[31:0];
      modulo_sub_base_30_sva_1 <= nl_modulo_sub_base_30_sva_1[31:0];
      modulo_sub_base_31_sva_1 <= nl_modulo_sub_base_31_sva_1[31:0];
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_10 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( mult_31_if_and_cse ) begin
      mult_16_res_sva_1 <= z_out_40;
      mult_17_res_sva_1 <= z_out_42;
      mult_18_res_sva_1 <= z_out_44;
      mult_19_res_sva_1 <= z_out_46;
      mult_20_res_sva_1 <= z_out_48;
      mult_21_res_sva_1 <= z_out_55;
      mult_22_res_sva_1 <= z_out_82;
      mult_23_res_sva_1 <= z_out_83;
      mult_24_res_sva_1 <= z_out_84;
      mult_25_res_sva_1 <= mult_25_res_sva_2;
      mult_26_res_sva_1 <= mult_26_res_sva_2;
      mult_27_res_sva_1 <= mult_27_res_sva_2;
      mult_28_res_sva_1 <= mult_28_res_sva_2;
      mult_29_res_sva_1 <= mult_29_res_sva_2;
      mult_30_res_sva_1 <= mult_30_res_sva_2;
      mult_31_res_sva_1 <= mult_31_res_sva_2;
      tmp_30_lpi_3_dfm_8 <= tmp_30_lpi_3_dfm_7;
      tmp_28_lpi_3_dfm_8 <= tmp_28_lpi_3_dfm_7;
      tmp_26_lpi_3_dfm_8 <= tmp_26_lpi_3_dfm_7;
      tmp_24_lpi_3_dfm_8 <= tmp_24_lpi_3_dfm_7;
      tmp_22_lpi_3_dfm_8 <= tmp_22_lpi_3_dfm_7;
      tmp_20_lpi_3_dfm_8 <= tmp_20_lpi_3_dfm_7;
      tmp_18_lpi_3_dfm_8 <= tmp_18_lpi_3_dfm_7;
      tmp_16_lpi_3_dfm_8 <= tmp_16_lpi_3_dfm_7;
      tmp_14_lpi_3_dfm_8 <= tmp_14_lpi_3_dfm_7;
      tmp_12_lpi_3_dfm_8 <= tmp_12_lpi_3_dfm_7;
      tmp_10_lpi_3_dfm_8 <= tmp_10_lpi_3_dfm_7;
      tmp_8_lpi_3_dfm_8 <= tmp_8_lpi_3_dfm_7;
      tmp_6_lpi_3_dfm_8 <= tmp_6_lpi_3_dfm_7;
      tmp_4_lpi_3_dfm_8 <= tmp_4_lpi_3_dfm_7;
      tmp_2_lpi_3_dfm_8 <= tmp_2_lpi_3_dfm_7;
      tmp_lpi_3_dfm_8 <= tmp_lpi_3_dfm_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      mult_31_slc_32_svs_st_1 <= 1'b0;
      mult_30_slc_32_svs_st_1 <= 1'b0;
      mult_29_slc_32_svs_st_1 <= 1'b0;
      mult_28_slc_32_svs_st_1 <= 1'b0;
      mult_27_slc_32_svs_st_1 <= 1'b0;
      mult_26_slc_32_svs_st_1 <= 1'b0;
      mult_25_slc_32_svs_st_1 <= 1'b0;
      mult_24_slc_32_svs_st_1 <= 1'b0;
      mult_23_slc_32_svs_st_1 <= 1'b0;
      mult_22_slc_32_svs_st_1 <= 1'b0;
      mult_21_slc_32_svs_st_1 <= 1'b0;
      mult_20_slc_32_svs_st_1 <= 1'b0;
      mult_19_slc_32_svs_st_1 <= 1'b0;
      mult_18_slc_32_svs_st_1 <= 1'b0;
      mult_17_slc_32_svs_st_1 <= 1'b0;
      mult_16_slc_32_svs_st_1 <= 1'b0;
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9 <= 1'b0;
    end
    else if ( mult_31_if_and_cse ) begin
      mult_31_slc_32_svs_st_1 <= readslicef_33_1_32(mult_31_if_acc_1_nl);
      mult_30_slc_32_svs_st_1 <= readslicef_33_1_32(mult_30_if_acc_1_nl);
      mult_29_slc_32_svs_st_1 <= readslicef_33_1_32(mult_29_if_acc_1_nl);
      mult_28_slc_32_svs_st_1 <= readslicef_33_1_32(mult_28_if_acc_1_nl);
      mult_27_slc_32_svs_st_1 <= readslicef_33_1_32(mult_27_if_acc_1_nl);
      mult_26_slc_32_svs_st_1 <= readslicef_33_1_32(mult_26_if_acc_1_nl);
      mult_25_slc_32_svs_st_1 <= readslicef_33_1_32(mult_25_if_acc_1_nl);
      mult_24_slc_32_svs_st_1 <= readslicef_33_1_32(mult_24_if_acc_1_nl);
      mult_23_slc_32_svs_st_1 <= readslicef_33_1_32(mult_23_if_acc_1_nl);
      mult_22_slc_32_svs_st_1 <= readslicef_33_1_32(mult_22_if_acc_1_nl);
      mult_21_slc_32_svs_st_1 <= readslicef_33_1_32(mult_21_if_acc_1_nl);
      mult_20_slc_32_svs_st_1 <= readslicef_33_1_32(mult_20_if_acc_1_nl);
      mult_19_slc_32_svs_st_1 <= readslicef_33_1_32(mult_19_if_acc_1_nl);
      mult_18_slc_32_svs_st_1 <= readslicef_33_1_32(mult_18_if_acc_1_nl);
      mult_17_slc_32_svs_st_1 <= readslicef_33_1_32(mult_17_if_acc_1_nl);
      mult_16_slc_32_svs_st_1 <= readslicef_33_1_32(mult_16_if_acc_1_nl);
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm_1 <= 1'b0;
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1 <= 1'b0;
    end
    else if ( INNER_LOOP2_r_and_3_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm_1 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm;
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & (~ (fsm_output[4])) ) begin
      operator_33_true_1_lshift_psp_7_4_sva <= z_out_32[7:4];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm <= 1'b0;
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm <= 1'b0;
    end
    else if ( INNER_LOOP2_r_and_4_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4302_itm <= INNER_LOOP1_r_INNER_LOOP1_r_and_2_cse[4];
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm <= INNER_LOOP1_r_INNER_LOOP1_r_and_2_cse[0];
    end
  end
  always @(posedge clk) begin
    if ( mult_31_z_and_cse ) begin
      mult_31_z_asn_itm_4 <= mult_31_z_asn_itm_3;
      mult_30_z_asn_itm_4 <= mult_30_z_asn_itm_3;
      mult_29_z_asn_itm_4 <= mult_29_z_asn_itm_3;
      mult_28_z_asn_itm_4 <= mult_28_z_asn_itm_3;
      mult_27_z_asn_itm_4 <= mult_27_z_asn_itm_3;
      mult_26_z_asn_itm_4 <= mult_26_z_asn_itm_3;
      mult_25_z_asn_itm_4 <= mult_25_z_asn_itm_3;
      mult_24_z_asn_itm_4 <= mult_24_z_asn_itm_3;
      mult_23_z_asn_itm_4 <= mult_23_z_asn_itm_3;
      mult_22_z_asn_itm_4 <= mult_22_z_asn_itm_3;
      mult_21_z_asn_itm_4 <= mult_21_z_asn_itm_3;
      mult_20_z_asn_itm_4 <= mult_20_z_asn_itm_3;
      mult_19_z_asn_itm_4 <= mult_19_z_asn_itm_3;
      mult_18_z_asn_itm_4 <= mult_18_z_asn_itm_3;
      mult_17_z_asn_itm_4 <= mult_17_z_asn_itm_3;
      mult_16_z_asn_itm_4 <= mult_16_z_asn_itm_3;
      tmp_30_lpi_3_dfm_7 <= tmp_30_lpi_3_dfm_6;
      tmp_28_lpi_3_dfm_7 <= tmp_28_lpi_3_dfm_6;
      tmp_26_lpi_3_dfm_7 <= tmp_26_lpi_3_dfm_6;
      tmp_24_lpi_3_dfm_7 <= tmp_24_lpi_3_dfm_6;
      tmp_22_lpi_3_dfm_7 <= tmp_22_lpi_3_dfm_6;
      tmp_20_lpi_3_dfm_7 <= tmp_20_lpi_3_dfm_6;
      tmp_18_lpi_3_dfm_7 <= tmp_18_lpi_3_dfm_6;
      tmp_16_lpi_3_dfm_7 <= tmp_16_lpi_3_dfm_6;
      tmp_14_lpi_3_dfm_7 <= tmp_14_lpi_3_dfm_6;
      tmp_12_lpi_3_dfm_7 <= tmp_12_lpi_3_dfm_6;
      tmp_10_lpi_3_dfm_7 <= tmp_10_lpi_3_dfm_6;
      tmp_8_lpi_3_dfm_7 <= tmp_8_lpi_3_dfm_6;
      tmp_6_lpi_3_dfm_7 <= tmp_6_lpi_3_dfm_6;
      tmp_4_lpi_3_dfm_7 <= tmp_4_lpi_3_dfm_6;
      tmp_2_lpi_3_dfm_7 <= tmp_2_lpi_3_dfm_6;
      tmp_lpi_3_dfm_7 <= tmp_lpi_3_dfm_6;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8 <= 1'b0;
    end
    else if ( mult_31_z_and_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_10 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_10 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_10 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_9)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_10 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_9 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_9 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_9 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_8)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_9 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( mult_31_z_and_1_cse ) begin
      mult_31_z_asn_itm_3 <= mult_31_z_asn_itm_2;
      mult_30_z_asn_itm_3 <= mult_30_z_asn_itm_2;
      mult_29_z_asn_itm_3 <= mult_29_z_asn_itm_2;
      mult_28_z_asn_itm_3 <= mult_28_z_asn_itm_2;
      mult_27_z_asn_itm_3 <= mult_27_z_asn_itm_2;
      mult_26_z_asn_itm_3 <= mult_26_z_asn_itm_2;
      mult_25_z_asn_itm_3 <= mult_25_z_asn_itm_2;
      mult_24_z_asn_itm_3 <= mult_24_z_asn_itm_2;
      mult_23_z_asn_itm_3 <= mult_23_z_asn_itm_2;
      mult_22_z_asn_itm_3 <= mult_22_z_asn_itm_2;
      mult_21_z_asn_itm_3 <= mult_21_z_asn_itm_2;
      mult_20_z_asn_itm_3 <= mult_20_z_asn_itm_2;
      mult_19_z_asn_itm_3 <= mult_19_z_asn_itm_2;
      mult_18_z_asn_itm_3 <= mult_18_z_asn_itm_2;
      mult_17_z_asn_itm_3 <= mult_17_z_asn_itm_2;
      mult_16_z_asn_itm_3 <= mult_16_z_asn_itm_2;
      tmp_30_lpi_3_dfm_6 <= tmp_30_lpi_3_dfm_5;
      tmp_28_lpi_3_dfm_6 <= tmp_28_lpi_3_dfm_5;
      tmp_26_lpi_3_dfm_6 <= tmp_26_lpi_3_dfm_5;
      tmp_24_lpi_3_dfm_6 <= tmp_24_lpi_3_dfm_5;
      tmp_22_lpi_3_dfm_6 <= tmp_22_lpi_3_dfm_5;
      tmp_20_lpi_3_dfm_6 <= tmp_20_lpi_3_dfm_5;
      tmp_18_lpi_3_dfm_6 <= tmp_18_lpi_3_dfm_5;
      tmp_16_lpi_3_dfm_6 <= tmp_16_lpi_3_dfm_5;
      tmp_14_lpi_3_dfm_6 <= tmp_14_lpi_3_dfm_5;
      tmp_12_lpi_3_dfm_6 <= tmp_12_lpi_3_dfm_5;
      tmp_10_lpi_3_dfm_6 <= tmp_10_lpi_3_dfm_5;
      tmp_8_lpi_3_dfm_6 <= tmp_8_lpi_3_dfm_5;
      tmp_6_lpi_3_dfm_6 <= tmp_6_lpi_3_dfm_5;
      tmp_4_lpi_3_dfm_6 <= tmp_4_lpi_3_dfm_5;
      tmp_2_lpi_3_dfm_6 <= tmp_2_lpi_3_dfm_5;
      tmp_lpi_3_dfm_6 <= tmp_lpi_3_dfm_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7 <= 1'b0;
    end
    else if ( mult_31_z_and_1_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_8 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_8 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_8 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_7)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_8 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( mult_31_z_and_2_cse ) begin
      mult_31_z_asn_itm_2 <= mult_15_z_asn_itm_1;
      mult_30_z_asn_itm_2 <= mult_14_z_asn_itm_1;
      mult_29_z_asn_itm_2 <= mult_13_z_asn_itm_1;
      mult_28_z_asn_itm_2 <= mult_12_z_asn_itm_1;
      mult_27_z_asn_itm_2 <= mult_11_z_asn_itm_1;
      mult_26_z_asn_itm_2 <= mult_10_z_asn_itm_1;
      mult_25_z_asn_itm_2 <= mult_9_z_asn_itm_1;
      mult_24_z_asn_itm_2 <= mult_8_z_asn_itm_1;
      mult_23_z_asn_itm_2 <= mult_7_z_asn_itm_1;
      mult_22_z_asn_itm_2 <= mult_6_z_asn_itm_1;
      mult_21_z_asn_itm_2 <= mult_5_z_asn_itm_1;
      mult_20_z_asn_itm_2 <= mult_4_z_asn_itm_1;
      mult_19_z_asn_itm_2 <= mult_3_z_asn_itm_1;
      mult_18_z_asn_itm_2 <= mult_2_z_asn_itm_1;
      mult_17_z_asn_itm_2 <= mult_1_z_asn_itm_1;
      mult_16_z_asn_itm_2 <= mult_z_asn_itm_1;
      tmp_30_lpi_3_dfm_5 <= tmp_30_lpi_3_dfm_4;
      tmp_28_lpi_3_dfm_5 <= tmp_28_lpi_3_dfm_4;
      tmp_26_lpi_3_dfm_5 <= tmp_26_lpi_3_dfm_4;
      tmp_24_lpi_3_dfm_5 <= tmp_24_lpi_3_dfm_4;
      tmp_22_lpi_3_dfm_5 <= tmp_22_lpi_3_dfm_4;
      tmp_20_lpi_3_dfm_5 <= tmp_20_lpi_3_dfm_4;
      tmp_18_lpi_3_dfm_5 <= tmp_18_lpi_3_dfm_4;
      tmp_16_lpi_3_dfm_5 <= tmp_16_lpi_3_dfm_4;
      tmp_14_lpi_3_dfm_5 <= tmp_14_lpi_3_dfm_4;
      tmp_12_lpi_3_dfm_5 <= tmp_12_lpi_3_dfm_4;
      tmp_10_lpi_3_dfm_5 <= tmp_10_lpi_3_dfm_4;
      tmp_8_lpi_3_dfm_5 <= tmp_8_lpi_3_dfm_4;
      tmp_6_lpi_3_dfm_5 <= tmp_6_lpi_3_dfm_4;
      tmp_4_lpi_3_dfm_5 <= tmp_4_lpi_3_dfm_4;
      tmp_2_lpi_3_dfm_5 <= tmp_2_lpi_3_dfm_4;
      tmp_lpi_3_dfm_5 <= tmp_lpi_3_dfm_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6 <= 1'b0;
    end
    else if ( mult_31_z_and_2_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_7 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_7 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_7 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_6)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_7 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_6 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_6 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_6 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_6 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_31_f1_and_4_cse ) begin
      tmp_30_lpi_3_dfm_4 <= tmp_30_lpi_3_dfm_3;
      tmp_28_lpi_3_dfm_4 <= tmp_28_lpi_3_dfm_3;
      tmp_26_lpi_3_dfm_4 <= tmp_26_lpi_3_dfm_3;
      tmp_24_lpi_3_dfm_4 <= tmp_24_lpi_3_dfm_3;
      tmp_22_lpi_3_dfm_4 <= tmp_22_lpi_3_dfm_3;
      tmp_20_lpi_3_dfm_4 <= tmp_20_lpi_3_dfm_3;
      tmp_18_lpi_3_dfm_4 <= tmp_18_lpi_3_dfm_3;
      tmp_16_lpi_3_dfm_4 <= tmp_16_lpi_3_dfm_3;
      tmp_14_lpi_3_dfm_4 <= tmp_14_lpi_3_dfm_3;
      tmp_12_lpi_3_dfm_4 <= tmp_12_lpi_3_dfm_3;
      tmp_10_lpi_3_dfm_4 <= tmp_10_lpi_3_dfm_3;
      tmp_8_lpi_3_dfm_4 <= tmp_8_lpi_3_dfm_3;
      tmp_6_lpi_3_dfm_4 <= tmp_6_lpi_3_dfm_3;
      tmp_4_lpi_3_dfm_4 <= tmp_4_lpi_3_dfm_3;
      tmp_2_lpi_3_dfm_4 <= tmp_2_lpi_3_dfm_3;
      tmp_lpi_3_dfm_4 <= tmp_lpi_3_dfm_3;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5 <= 1'b0;
    end
    else if ( butterFly1_31_f1_and_4_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_5 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_5 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_5 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_5 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_5 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_31_f1_and_5_cse ) begin
      tmp_30_lpi_3_dfm_3 <= tmp_30_lpi_3_dfm_2;
      tmp_28_lpi_3_dfm_3 <= tmp_28_lpi_3_dfm_2;
      tmp_26_lpi_3_dfm_3 <= tmp_26_lpi_3_dfm_2;
      tmp_24_lpi_3_dfm_3 <= tmp_24_lpi_3_dfm_2;
      tmp_22_lpi_3_dfm_3 <= tmp_22_lpi_3_dfm_2;
      tmp_20_lpi_3_dfm_3 <= tmp_20_lpi_3_dfm_2;
      tmp_18_lpi_3_dfm_3 <= tmp_18_lpi_3_dfm_2;
      tmp_16_lpi_3_dfm_3 <= tmp_16_lpi_3_dfm_2;
      tmp_14_lpi_3_dfm_3 <= tmp_14_lpi_3_dfm_2;
      tmp_12_lpi_3_dfm_3 <= tmp_12_lpi_3_dfm_2;
      tmp_10_lpi_3_dfm_3 <= tmp_10_lpi_3_dfm_2;
      tmp_8_lpi_3_dfm_3 <= tmp_8_lpi_3_dfm_2;
      tmp_6_lpi_3_dfm_3 <= tmp_6_lpi_3_dfm_2;
      tmp_4_lpi_3_dfm_3 <= tmp_4_lpi_3_dfm_2;
      tmp_2_lpi_3_dfm_3 <= tmp_2_lpi_3_dfm_2;
      tmp_lpi_3_dfm_3 <= tmp_lpi_3_dfm_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4 <= 1'b0;
    end
    else if ( butterFly1_31_f1_and_5_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_4 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_4 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_4 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_4 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_4 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_31_f1_and_6_cse ) begin
      tmp_30_lpi_3_dfm_2 <= tmp_30_lpi_3_dfm_1;
      tmp_28_lpi_3_dfm_2 <= tmp_28_lpi_3_dfm_1;
      tmp_26_lpi_3_dfm_2 <= tmp_26_lpi_3_dfm_1;
      tmp_24_lpi_3_dfm_2 <= tmp_24_lpi_3_dfm_1;
      tmp_22_lpi_3_dfm_2 <= tmp_22_lpi_3_dfm_1;
      tmp_20_lpi_3_dfm_2 <= tmp_20_lpi_3_dfm_1;
      tmp_18_lpi_3_dfm_2 <= tmp_18_lpi_3_dfm_1;
      tmp_16_lpi_3_dfm_2 <= tmp_16_lpi_3_dfm_1;
      tmp_14_lpi_3_dfm_2 <= tmp_14_lpi_3_dfm_1;
      tmp_12_lpi_3_dfm_2 <= tmp_12_lpi_3_dfm_1;
      tmp_10_lpi_3_dfm_2 <= tmp_10_lpi_3_dfm_1;
      tmp_8_lpi_3_dfm_2 <= tmp_8_lpi_3_dfm_1;
      tmp_6_lpi_3_dfm_2 <= tmp_6_lpi_3_dfm_1;
      tmp_4_lpi_3_dfm_2 <= tmp_4_lpi_3_dfm_1;
      tmp_2_lpi_3_dfm_2 <= tmp_2_lpi_3_dfm_1;
      tmp_lpi_3_dfm_2 <= tmp_lpi_3_dfm_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3 <= 1'b0;
    end
    else if ( butterFly1_31_f1_and_6_cse ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_3 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_3 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_3 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_3 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_3 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( butterFly1_31_f1_and_7_cse ) begin
      tmp_30_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_30_i_qa_d, yt_rsc_1_30_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_28_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_28_i_qa_d, yt_rsc_1_28_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_26_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_26_i_qa_d, yt_rsc_1_26_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_24_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_24_i_qa_d, yt_rsc_1_24_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_22_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_22_i_qa_d, yt_rsc_1_22_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_20_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_20_i_qa_d, yt_rsc_1_20_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_18_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_18_i_qa_d, yt_rsc_1_18_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_16_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_16_i_qa_d, yt_rsc_1_16_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_14_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_14_i_qa_d, yt_rsc_1_14_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_12_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_12_i_qa_d, yt_rsc_1_12_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_10_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_10_i_qa_d, yt_rsc_1_10_i_qa_d,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_8_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_8_i_qa_d, yt_rsc_1_8_i_qa_d, twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_6_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_6_i_qa_d, yt_rsc_1_6_i_qa_d, twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_4_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_4_i_qa_d, yt_rsc_1_4_i_qa_d, twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_2_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_2_i_qa_d, yt_rsc_1_2_i_qa_d, twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_lpi_3_dfm_1 <= MUX_v_32_2_2(yt_rsc_0_0_i_qa_d, yt_rsc_1_0_i_qa_d, twiddle_h_rsc_0_0_i_s_raddr_core_4);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2 <= 1'b0;
    end
    else if ( core_wen & INNER_LOOP2_stage_0_2 ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_2 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_2 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_2 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0_2 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm_1)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_2 <= INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0 & INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_20_itm_1 <= INNER_LOOP2_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP2_stage_0 & (~ INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_161_itm)
        ) begin
      INNER_LOOP2_r_slc_INNER_LOOP2_r_9_4_4_0_4210_itm_1 <= INNER_LOOP2_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      c_1_sva_1 <= 1'b0;
    end
    else if ( core_wen & c_or_cse ) begin
      c_1_sva_1 <= MUX_s_1_2_2((operator_20_false_acc_cse_sva[0]), butterFly2_21_tw_butterFly2_21_tw_or_nl,
          fsm_output[8]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_191_itm_12 <= 1'b0;
    end
    else if ( core_wen & INNER_LOOP3_stage_0_12 ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_191_itm_12 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11;
    end
  end
  always @(posedge clk) begin
    if ( modulo_add_32_qelse_and_cse ) begin
      modulo_add_32_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_32_sva_1, z_out_89,
          z_out_32_1);
      modulo_add_33_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_33_sva_1, z_out_90,
          z_out_1_32);
      modulo_add_34_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_34_sva_1, z_out_91,
          z_out_2_32);
      modulo_add_35_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_35_sva_1, z_out_99,
          z_out_3_32);
      modulo_add_36_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_36_sva_1, z_out_100,
          z_out_4_32);
      modulo_add_37_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_37_sva_1, z_out_98,
          z_out_5_32);
      modulo_add_38_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_38_sva_1, z_out_97,
          z_out_6_32);
      modulo_add_39_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_39_sva_1, z_out_101,
          z_out_7_32);
      modulo_add_40_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_40_sva_1, z_out_34,
          z_out_8_32);
      modulo_add_41_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_41_sva_1, z_out_35,
          z_out_9_32);
      modulo_add_42_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_42_sva_1, z_out_36,
          z_out_10_32);
      modulo_add_43_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_43_sva_1, z_out_63,
          z_out_11_32);
      modulo_add_44_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_44_sva_1, z_out_61,
          z_out_12_32);
      modulo_add_45_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_45_sva_1, z_out_59,
          z_out_13_32);
      modulo_add_46_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_46_sva_1, z_out_57,
          z_out_14_32);
      modulo_add_47_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_47_sva_1, z_out_53,
          z_out_15_32);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11 <= 1'b0;
    end
    else if ( modulo_add_32_qelse_and_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_11 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_11 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_321_itm_11 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_416_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_11 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_337_itm_11 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_432_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( butterFly2_and_cse ) begin
      modulo_add_base_47_sva_1 <= nl_modulo_add_base_47_sva_1[31:0];
      modulo_add_base_46_sva_1 <= nl_modulo_add_base_46_sva_1[31:0];
      modulo_add_base_45_sva_1 <= nl_modulo_add_base_45_sva_1[31:0];
      modulo_add_base_44_sva_1 <= z_out_85;
      modulo_add_base_43_sva_1 <= nl_modulo_add_base_43_sva_1[31:0];
      modulo_add_base_42_sva_1 <= nl_modulo_add_base_42_sva_1[31:0];
      modulo_add_base_41_sva_1 <= nl_modulo_add_base_41_sva_1[31:0];
      modulo_add_base_40_sva_1 <= nl_modulo_add_base_40_sva_1[31:0];
      modulo_add_base_39_sva_1 <= nl_modulo_add_base_39_sva_1[31:0];
      modulo_add_base_38_sva_1 <= nl_modulo_add_base_38_sva_1[31:0];
      modulo_add_base_37_sva_1 <= nl_modulo_add_base_37_sva_1[31:0];
      modulo_add_base_36_sva_1 <= nl_modulo_add_base_36_sva_1[31:0];
      modulo_add_base_35_sva_1 <= nl_modulo_add_base_35_sva_1[31:0];
      modulo_add_base_34_sva_1 <= nl_modulo_add_base_34_sva_1[31:0];
      modulo_add_base_33_sva_1 <= nl_modulo_add_base_33_sva_1[31:0];
      modulo_add_base_32_sva_1 <= nl_modulo_add_base_32_sva_1[31:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      modulo_sub_base_32_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_33_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_34_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_35_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_36_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_37_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_38_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_39_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_40_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_41_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_42_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_43_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_44_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_45_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_46_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_47_sva_1 <= 32'b00000000000000000000000000000000;
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10 <= 1'b0;
    end
    else if ( butterFly2_and_cse ) begin
      modulo_sub_base_32_sva_1 <= nl_modulo_sub_base_32_sva_1[31:0];
      modulo_sub_base_33_sva_1 <= nl_modulo_sub_base_33_sva_1[31:0];
      modulo_sub_base_34_sva_1 <= nl_modulo_sub_base_34_sva_1[31:0];
      modulo_sub_base_35_sva_1 <= nl_modulo_sub_base_35_sva_1[31:0];
      modulo_sub_base_36_sva_1 <= nl_modulo_sub_base_36_sva_1[31:0];
      modulo_sub_base_37_sva_1 <= nl_modulo_sub_base_37_sva_1[31:0];
      modulo_sub_base_38_sva_1 <= nl_modulo_sub_base_38_sva_1[31:0];
      modulo_sub_base_39_sva_1 <= nl_modulo_sub_base_39_sva_1[31:0];
      modulo_sub_base_40_sva_1 <= nl_modulo_sub_base_40_sva_1[31:0];
      modulo_sub_base_41_sva_1 <= nl_modulo_sub_base_41_sva_1[31:0];
      modulo_sub_base_42_sva_1 <= nl_modulo_sub_base_42_sva_1[31:0];
      modulo_sub_base_43_sva_1 <= nl_modulo_sub_base_43_sva_1[31:0];
      modulo_sub_base_44_sva_1 <= z_out_86;
      modulo_sub_base_45_sva_1 <= nl_modulo_sub_base_45_sva_1[31:0];
      modulo_sub_base_46_sva_1 <= nl_modulo_sub_base_46_sva_1[31:0];
      modulo_sub_base_47_sva_1 <= nl_modulo_sub_base_47_sva_1[31:0];
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_10 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_10 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_416_itm_10 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_10 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_432_itm_10 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( mult_47_if_and_cse ) begin
      mult_32_res_sva_1 <= mult_32_res_sva_2;
      mult_33_res_sva_1 <= mult_33_res_sva_2;
      mult_34_res_sva_1 <= mult_34_res_sva_2;
      mult_35_res_sva_1 <= mult_35_res_sva_2;
      mult_36_res_sva_1 <= mult_36_res_sva_2;
      mult_37_res_sva_1 <= mult_37_res_sva_2;
      mult_38_res_sva_1 <= mult_38_res_sva_2;
      mult_39_res_sva_1 <= mult_39_res_sva_2;
      mult_40_res_sva_1 <= mult_40_res_sva_2;
      mult_41_res_sva_1 <= mult_41_res_sva_2;
      mult_42_res_sva_1 <= mult_42_res_sva_2;
      mult_43_res_sva_1 <= mult_43_res_sva_2;
      mult_44_res_sva_1 <= mult_44_res_sva_2;
      mult_45_res_sva_1 <= mult_45_res_sva_2;
      mult_46_res_sva_1 <= mult_46_res_sva_2;
      mult_47_res_sva_1 <= mult_47_res_sva_2;
      tmp_126_lpi_3_dfm_8 <= tmp_126_lpi_3_dfm_7;
      tmp_124_lpi_3_dfm_8 <= tmp_124_lpi_3_dfm_7;
      tmp_122_lpi_3_dfm_8 <= tmp_122_lpi_3_dfm_7;
      tmp_120_lpi_3_dfm_8 <= tmp_120_lpi_3_dfm_7;
      tmp_118_lpi_3_dfm_8 <= tmp_118_lpi_3_dfm_7;
      tmp_116_lpi_3_dfm_8 <= tmp_116_lpi_3_dfm_7;
      tmp_114_lpi_3_dfm_8 <= tmp_114_lpi_3_dfm_7;
      tmp_112_lpi_3_dfm_8 <= tmp_112_lpi_3_dfm_7;
      tmp_110_lpi_3_dfm_8 <= tmp_110_lpi_3_dfm_7;
      tmp_108_lpi_3_dfm_8 <= tmp_108_lpi_3_dfm_7;
      tmp_106_lpi_3_dfm_8 <= tmp_106_lpi_3_dfm_7;
      tmp_104_lpi_3_dfm_8 <= tmp_104_lpi_3_dfm_7;
      tmp_102_lpi_3_dfm_8 <= tmp_102_lpi_3_dfm_7;
      tmp_100_lpi_3_dfm_8 <= tmp_100_lpi_3_dfm_7;
      tmp_98_lpi_3_dfm_8 <= tmp_98_lpi_3_dfm_7;
      tmp_96_lpi_3_dfm_8 <= tmp_96_lpi_3_dfm_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      mult_47_slc_32_svs_st_1 <= 1'b0;
      mult_46_slc_32_svs_st_1 <= 1'b0;
      mult_45_slc_32_svs_st_1 <= 1'b0;
      mult_44_slc_32_svs_st_1 <= 1'b0;
      mult_43_slc_32_svs_st_1 <= 1'b0;
      mult_42_slc_32_svs_st_1 <= 1'b0;
      mult_41_slc_32_svs_st_1 <= 1'b0;
      mult_40_slc_32_svs_st_1 <= 1'b0;
      mult_39_slc_32_svs_st_1 <= 1'b0;
      mult_38_slc_32_svs_st_1 <= 1'b0;
      mult_37_slc_32_svs_st_1 <= 1'b0;
      mult_36_slc_32_svs_st_1 <= 1'b0;
      mult_35_slc_32_svs_st_1 <= 1'b0;
      mult_34_slc_32_svs_st_1 <= 1'b0;
      mult_33_slc_32_svs_st_1 <= 1'b0;
      mult_32_slc_32_svs_st_1 <= 1'b0;
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9 <= 1'b0;
    end
    else if ( mult_47_if_and_cse ) begin
      mult_47_slc_32_svs_st_1 <= z_out_16_32;
      mult_46_slc_32_svs_st_1 <= z_out_17_32;
      mult_45_slc_32_svs_st_1 <= z_out_18_32;
      mult_44_slc_32_svs_st_1 <= z_out_25_32;
      mult_43_slc_32_svs_st_1 <= z_out_19_32;
      mult_42_slc_32_svs_st_1 <= z_out_26_32;
      mult_41_slc_32_svs_st_1 <= z_out_20_32;
      mult_40_slc_32_svs_st_1 <= z_out_27_32;
      mult_39_slc_32_svs_st_1 <= z_out_21_32;
      mult_38_slc_32_svs_st_1 <= z_out_28_32;
      mult_37_slc_32_svs_st_1 <= z_out_22_32;
      mult_36_slc_32_svs_st_1 <= z_out_29_32;
      mult_35_slc_32_svs_st_1 <= z_out_23_32;
      mult_34_slc_32_svs_st_1 <= z_out_30_32;
      mult_33_slc_32_svs_st_1 <= z_out_24_32;
      mult_32_slc_32_svs_st_1 <= z_out_31_32;
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_9 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      butterFly2_15_tw_equal_tmp_1 <= 1'b0;
      butterFly2_15_tw_equal_tmp_3_1 <= 1'b0;
      butterFly2_15_tw_equal_tmp_5_1 <= 1'b0;
      butterFly2_15_tw_equal_tmp_6_1 <= 1'b0;
      butterFly2_15_tw_equal_tmp_7_1 <= 1'b0;
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1 <= 1'b0;
    end
    else if ( butterFly2_15_tw_and_cse ) begin
      butterFly2_15_tw_equal_tmp_1 <= ~((operator_33_true_2_lshift_psp_2_0_sva!=3'b000));
      butterFly2_15_tw_equal_tmp_3_1 <= (operator_33_true_2_lshift_psp_2_0_sva==3'b011);
      butterFly2_15_tw_equal_tmp_5_1 <= (operator_33_true_2_lshift_psp_2_0_sva==3'b101);
      butterFly2_15_tw_equal_tmp_6_1 <= (operator_33_true_2_lshift_psp_2_0_sva==3'b110);
      butterFly2_15_tw_equal_tmp_7_1 <= (operator_33_true_2_lshift_psp_2_0_sva==3'b111);
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_33_true_2_lshift_psp_2_0_sva <= 3'b000;
    end
    else if ( core_wen & (~ (fsm_output[6])) ) begin
      operator_33_true_2_lshift_psp_2_0_sva <= z_out_32[2:0];
    end
  end
  always @(posedge clk) begin
    if ( mult_47_z_and_cse ) begin
      mult_47_z_asn_itm_4 <= mult_47_z_asn_itm_3;
      mult_46_z_asn_itm_4 <= mult_46_z_asn_itm_3;
      mult_45_z_asn_itm_4 <= mult_45_z_asn_itm_3;
      mult_44_z_asn_itm_4 <= mult_44_z_asn_itm_3;
      mult_43_z_asn_itm_4 <= mult_43_z_asn_itm_3;
      mult_42_z_asn_itm_4 <= mult_42_z_asn_itm_3;
      mult_41_z_asn_itm_4 <= mult_41_z_asn_itm_3;
      mult_40_z_asn_itm_4 <= mult_40_z_asn_itm_3;
      mult_39_z_asn_itm_4 <= mult_39_z_asn_itm_3;
      mult_38_z_asn_itm_4 <= mult_38_z_asn_itm_3;
      mult_37_z_asn_itm_4 <= mult_37_z_asn_itm_3;
      mult_36_z_asn_itm_4 <= mult_36_z_asn_itm_3;
      mult_35_z_asn_itm_4 <= mult_35_z_asn_itm_3;
      mult_34_z_asn_itm_4 <= mult_34_z_asn_itm_3;
      mult_33_z_asn_itm_4 <= mult_33_z_asn_itm_3;
      mult_32_z_asn_itm_4 <= mult_32_z_asn_itm_3;
      tmp_126_lpi_3_dfm_7 <= tmp_126_lpi_3_dfm_6;
      tmp_124_lpi_3_dfm_7 <= tmp_124_lpi_3_dfm_6;
      tmp_122_lpi_3_dfm_7 <= tmp_122_lpi_3_dfm_6;
      tmp_120_lpi_3_dfm_7 <= tmp_120_lpi_3_dfm_6;
      tmp_118_lpi_3_dfm_7 <= tmp_118_lpi_3_dfm_6;
      tmp_116_lpi_3_dfm_7 <= tmp_116_lpi_3_dfm_6;
      tmp_114_lpi_3_dfm_7 <= tmp_114_lpi_3_dfm_6;
      tmp_112_lpi_3_dfm_7 <= tmp_112_lpi_3_dfm_6;
      tmp_110_lpi_3_dfm_7 <= tmp_110_lpi_3_dfm_6;
      tmp_108_lpi_3_dfm_7 <= tmp_108_lpi_3_dfm_6;
      tmp_106_lpi_3_dfm_7 <= tmp_106_lpi_3_dfm_6;
      tmp_104_lpi_3_dfm_7 <= tmp_104_lpi_3_dfm_6;
      tmp_102_lpi_3_dfm_7 <= tmp_102_lpi_3_dfm_6;
      tmp_100_lpi_3_dfm_7 <= tmp_100_lpi_3_dfm_6;
      tmp_98_lpi_3_dfm_7 <= tmp_98_lpi_3_dfm_6;
      tmp_96_lpi_3_dfm_7 <= tmp_96_lpi_3_dfm_6;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8 <= 1'b0;
    end
    else if ( mult_47_z_and_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_9 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_9 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_9 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_8)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_9 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_8 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_8 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_8 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_8 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( mult_47_z_and_1_cse ) begin
      mult_47_z_asn_itm_3 <= mult_47_z_asn_itm_2;
      mult_46_z_asn_itm_3 <= mult_46_z_asn_itm_2;
      mult_45_z_asn_itm_3 <= mult_45_z_asn_itm_2;
      mult_44_z_asn_itm_3 <= mult_44_z_asn_itm_2;
      mult_43_z_asn_itm_3 <= mult_43_z_asn_itm_2;
      mult_42_z_asn_itm_3 <= mult_42_z_asn_itm_2;
      mult_41_z_asn_itm_3 <= mult_41_z_asn_itm_2;
      mult_40_z_asn_itm_3 <= mult_40_z_asn_itm_2;
      mult_39_z_asn_itm_3 <= mult_39_z_asn_itm_2;
      mult_38_z_asn_itm_3 <= mult_38_z_asn_itm_2;
      mult_37_z_asn_itm_3 <= mult_37_z_asn_itm_2;
      mult_36_z_asn_itm_3 <= mult_36_z_asn_itm_2;
      mult_35_z_asn_itm_3 <= mult_35_z_asn_itm_2;
      mult_34_z_asn_itm_3 <= mult_34_z_asn_itm_2;
      mult_33_z_asn_itm_3 <= mult_33_z_asn_itm_2;
      mult_32_z_asn_itm_3 <= mult_32_z_asn_itm_2;
      tmp_126_lpi_3_dfm_6 <= tmp_126_lpi_3_dfm_5;
      tmp_124_lpi_3_dfm_6 <= tmp_124_lpi_3_dfm_5;
      tmp_122_lpi_3_dfm_6 <= tmp_122_lpi_3_dfm_5;
      tmp_120_lpi_3_dfm_6 <= tmp_120_lpi_3_dfm_5;
      tmp_118_lpi_3_dfm_6 <= tmp_118_lpi_3_dfm_5;
      tmp_116_lpi_3_dfm_6 <= tmp_116_lpi_3_dfm_5;
      tmp_114_lpi_3_dfm_6 <= tmp_114_lpi_3_dfm_5;
      tmp_112_lpi_3_dfm_6 <= tmp_112_lpi_3_dfm_5;
      tmp_110_lpi_3_dfm_6 <= tmp_110_lpi_3_dfm_5;
      tmp_108_lpi_3_dfm_6 <= tmp_108_lpi_3_dfm_5;
      tmp_106_lpi_3_dfm_6 <= tmp_106_lpi_3_dfm_5;
      tmp_104_lpi_3_dfm_6 <= tmp_104_lpi_3_dfm_5;
      tmp_102_lpi_3_dfm_6 <= tmp_102_lpi_3_dfm_5;
      tmp_100_lpi_3_dfm_6 <= tmp_100_lpi_3_dfm_5;
      tmp_98_lpi_3_dfm_6 <= tmp_98_lpi_3_dfm_5;
      tmp_96_lpi_3_dfm_6 <= tmp_96_lpi_3_dfm_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7 <= 1'b0;
    end
    else if ( mult_47_z_and_1_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_7 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_7 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_7 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_7 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_7 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( mult_47_z_and_2_cse ) begin
      mult_47_z_asn_itm_2 <= mult_z_asn_itm_1;
      mult_46_z_asn_itm_2 <= mult_14_z_asn_itm_1;
      mult_45_z_asn_itm_2 <= mult_9_z_asn_itm_1;
      mult_44_z_asn_itm_2 <= mult_6_z_asn_itm_1;
      mult_43_z_asn_itm_2 <= mult_1_z_asn_itm_1;
      mult_42_z_asn_itm_2 <= mult_3_z_asn_itm_1;
      mult_41_z_asn_itm_2 <= mult_7_z_asn_itm_1;
      mult_40_z_asn_itm_2 <= mult_11_z_asn_itm_1;
      mult_39_z_asn_itm_2 <= mult_13_z_asn_itm_1;
      mult_38_z_asn_itm_2 <= mult_8_z_asn_itm_1;
      mult_37_z_asn_itm_2 <= mult_5_z_asn_itm_1;
      mult_36_z_asn_itm_2 <= mult_2_z_asn_itm_1;
      mult_35_z_asn_itm_2 <= mult_4_z_asn_itm_1;
      mult_34_z_asn_itm_2 <= mult_10_z_asn_itm_1;
      mult_33_z_asn_itm_2 <= mult_12_z_asn_itm_1;
      mult_32_z_asn_itm_2 <= mult_15_z_asn_itm_1;
      tmp_126_lpi_3_dfm_5 <= tmp_126_lpi_3_dfm_4;
      tmp_124_lpi_3_dfm_5 <= tmp_124_lpi_3_dfm_4;
      tmp_122_lpi_3_dfm_5 <= tmp_122_lpi_3_dfm_4;
      tmp_120_lpi_3_dfm_5 <= tmp_120_lpi_3_dfm_4;
      tmp_118_lpi_3_dfm_5 <= tmp_118_lpi_3_dfm_4;
      tmp_116_lpi_3_dfm_5 <= tmp_116_lpi_3_dfm_4;
      tmp_114_lpi_3_dfm_5 <= tmp_114_lpi_3_dfm_4;
      tmp_112_lpi_3_dfm_5 <= tmp_112_lpi_3_dfm_4;
      tmp_110_lpi_3_dfm_5 <= tmp_110_lpi_3_dfm_4;
      tmp_108_lpi_3_dfm_5 <= tmp_108_lpi_3_dfm_4;
      tmp_106_lpi_3_dfm_5 <= tmp_106_lpi_3_dfm_4;
      tmp_104_lpi_3_dfm_5 <= tmp_104_lpi_3_dfm_4;
      tmp_102_lpi_3_dfm_5 <= tmp_102_lpi_3_dfm_4;
      tmp_100_lpi_3_dfm_5 <= tmp_100_lpi_3_dfm_4;
      tmp_98_lpi_3_dfm_5 <= tmp_98_lpi_3_dfm_4;
      tmp_96_lpi_3_dfm_5 <= tmp_96_lpi_3_dfm_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6 <= 1'b0;
    end
    else if ( mult_47_z_and_2_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_6 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_6 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_6 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_6 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_6 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP3_r_and_19_cse ) begin
      tmp_126_lpi_3_dfm_4 <= tmp_126_lpi_3_dfm_3;
      tmp_124_lpi_3_dfm_4 <= tmp_124_lpi_3_dfm_3;
      tmp_122_lpi_3_dfm_4 <= tmp_122_lpi_3_dfm_3;
      tmp_120_lpi_3_dfm_4 <= tmp_120_lpi_3_dfm_3;
      tmp_118_lpi_3_dfm_4 <= tmp_118_lpi_3_dfm_3;
      tmp_116_lpi_3_dfm_4 <= tmp_116_lpi_3_dfm_3;
      tmp_114_lpi_3_dfm_4 <= tmp_114_lpi_3_dfm_3;
      tmp_112_lpi_3_dfm_4 <= tmp_112_lpi_3_dfm_3;
      tmp_110_lpi_3_dfm_4 <= tmp_110_lpi_3_dfm_3;
      tmp_108_lpi_3_dfm_4 <= tmp_108_lpi_3_dfm_3;
      tmp_106_lpi_3_dfm_4 <= tmp_106_lpi_3_dfm_3;
      tmp_104_lpi_3_dfm_4 <= tmp_104_lpi_3_dfm_3;
      tmp_102_lpi_3_dfm_4 <= tmp_102_lpi_3_dfm_3;
      tmp_100_lpi_3_dfm_4 <= tmp_100_lpi_3_dfm_3;
      tmp_98_lpi_3_dfm_4 <= tmp_98_lpi_3_dfm_3;
      tmp_96_lpi_3_dfm_4 <= tmp_96_lpi_3_dfm_3;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5 <= 1'b0;
    end
    else if ( INNER_LOOP3_r_and_19_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_5 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_5 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_5 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_5 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_5 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP3_r_and_22_cse ) begin
      tmp_126_lpi_3_dfm_3 <= tmp_126_lpi_3_dfm_2;
      tmp_124_lpi_3_dfm_3 <= tmp_124_lpi_3_dfm_2;
      tmp_122_lpi_3_dfm_3 <= tmp_122_lpi_3_dfm_2;
      tmp_120_lpi_3_dfm_3 <= tmp_120_lpi_3_dfm_2;
      tmp_118_lpi_3_dfm_3 <= tmp_118_lpi_3_dfm_2;
      tmp_116_lpi_3_dfm_3 <= tmp_116_lpi_3_dfm_2;
      tmp_114_lpi_3_dfm_3 <= tmp_114_lpi_3_dfm_2;
      tmp_112_lpi_3_dfm_3 <= tmp_112_lpi_3_dfm_2;
      tmp_110_lpi_3_dfm_3 <= tmp_110_lpi_3_dfm_2;
      tmp_108_lpi_3_dfm_3 <= tmp_108_lpi_3_dfm_2;
      tmp_106_lpi_3_dfm_3 <= tmp_106_lpi_3_dfm_2;
      tmp_104_lpi_3_dfm_3 <= tmp_104_lpi_3_dfm_2;
      tmp_102_lpi_3_dfm_3 <= tmp_102_lpi_3_dfm_2;
      tmp_100_lpi_3_dfm_3 <= tmp_100_lpi_3_dfm_2;
      tmp_98_lpi_3_dfm_3 <= tmp_98_lpi_3_dfm_2;
      tmp_96_lpi_3_dfm_3 <= tmp_96_lpi_3_dfm_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4 <= 1'b0;
    end
    else if ( INNER_LOOP3_r_and_22_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_4 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_4 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_4 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_4 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_4 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP3_r_and_25_cse ) begin
      tmp_126_lpi_3_dfm_2 <= tmp_126_lpi_3_dfm_1;
      tmp_124_lpi_3_dfm_2 <= tmp_124_lpi_3_dfm_1;
      tmp_122_lpi_3_dfm_2 <= tmp_122_lpi_3_dfm_1;
      tmp_120_lpi_3_dfm_2 <= tmp_120_lpi_3_dfm_1;
      tmp_118_lpi_3_dfm_2 <= tmp_118_lpi_3_dfm_1;
      tmp_116_lpi_3_dfm_2 <= tmp_116_lpi_3_dfm_1;
      tmp_114_lpi_3_dfm_2 <= tmp_114_lpi_3_dfm_1;
      tmp_112_lpi_3_dfm_2 <= tmp_112_lpi_3_dfm_1;
      tmp_110_lpi_3_dfm_2 <= tmp_110_lpi_3_dfm_1;
      tmp_108_lpi_3_dfm_2 <= tmp_108_lpi_3_dfm_1;
      tmp_106_lpi_3_dfm_2 <= tmp_106_lpi_3_dfm_1;
      tmp_104_lpi_3_dfm_2 <= tmp_104_lpi_3_dfm_1;
      tmp_102_lpi_3_dfm_2 <= tmp_102_lpi_3_dfm_1;
      tmp_100_lpi_3_dfm_2 <= tmp_100_lpi_3_dfm_1;
      tmp_98_lpi_3_dfm_2 <= tmp_98_lpi_3_dfm_1;
      tmp_96_lpi_3_dfm_2 <= tmp_96_lpi_3_dfm_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3 <= 1'b0;
    end
    else if ( INNER_LOOP3_r_and_25_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_3 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_3 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_3 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_3 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_3 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP3_r_and_28_cse ) begin
      tmp_126_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_30_i_qa_d_mxwt, xt_rsc_1_30_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_124_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_28_i_qa_d_mxwt, xt_rsc_1_28_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_122_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_26_i_qa_d_mxwt, xt_rsc_1_26_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_120_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_24_i_qa_d_mxwt, xt_rsc_1_24_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_118_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_22_i_qa_d_mxwt, xt_rsc_1_22_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_116_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_20_i_qa_d_mxwt, xt_rsc_1_20_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_114_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_18_i_qa_d_mxwt, xt_rsc_1_18_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_112_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_16_i_qa_d_mxwt, xt_rsc_1_16_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_110_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_14_i_qa_d_mxwt, xt_rsc_1_14_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_108_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_12_i_qa_d_mxwt, xt_rsc_1_12_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_106_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_10_i_qa_d_mxwt, xt_rsc_1_10_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_104_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_8_i_qa_d_mxwt, xt_rsc_1_8_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_102_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_6_i_qa_d_mxwt, xt_rsc_1_6_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_100_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_4_i_qa_d_mxwt, xt_rsc_1_4_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_98_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_2_i_qa_d_mxwt, xt_rsc_1_2_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
      tmp_96_lpi_3_dfm_1 <= MUX_v_32_2_2(xt_rsc_0_0_i_qa_d_mxwt, xt_rsc_1_0_i_qa_d_mxwt,
          twiddle_h_rsc_0_0_i_s_raddr_core_4);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2 <= 1'b0;
    end
    else if ( INNER_LOOP3_r_and_28_cse ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_2 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_2 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_2 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0_2 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm_1)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_2 <= INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0 & INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_20_itm_1 <= INNER_LOOP3_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP3_stage_0 & (~ INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm)
        ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_4241_itm_1 <= INNER_LOOP3_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm <= 1'b0;
    end
    else if ( core_wen & ((fsm_output[5]) | (INNER_LOOP3_stage_0 & (~ (z_out_33[5]))
        & (fsm_output[6]))) ) begin
      INNER_LOOP3_r_slc_INNER_LOOP3_r_9_4_4_0_192_itm <= (z_out_33[0]) & (fsm_output[6]);
    end
  end
  always @(posedge clk) begin
    if ( modulo_add_48_qelse_and_cse ) begin
      modulo_add_48_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_48_sva_1, z_out_90,
          z_out_15_32);
      modulo_sub_48_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_48_sva_1[30:0])}),
          z_out_79, modulo_sub_base_48_sva_1[31]);
      modulo_add_49_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_49_sva_1, z_out_101,
          z_out_14_32);
      modulo_sub_49_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_49_sva_1[30:0])}),
          z_out_81, modulo_sub_base_49_sva_1[31]);
      modulo_add_50_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_50_sva_1, z_out_91,
          z_out_13_32);
      modulo_sub_50_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_50_sva_1[30:0])}),
          z_out_77, modulo_sub_base_50_sva_1[31]);
      modulo_add_51_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_51_sva_1, z_out_108,
          z_out_12_32);
      modulo_sub_51_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_51_sva_1[30:0])}),
          z_out_75, modulo_sub_base_51_sva_1[31]);
      modulo_add_52_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_52_sva_1, z_out_89,
          z_out_11_32);
      modulo_sub_52_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_52_sva_1[30:0])}),
          z_out_73, modulo_sub_base_52_sva_1[31]);
      modulo_add_53_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_53_sva_1, z_out_109,
          z_out_10_32);
      modulo_sub_53_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_53_sva_1[30:0])}),
          z_out_71, modulo_sub_base_53_sva_1[31]);
      modulo_add_54_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_54_sva_1, z_out_55,
          z_out_9_32);
      modulo_sub_54_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_54_sva_1[30:0])}),
          z_out_69, modulo_sub_base_54_sva_1[31]);
      modulo_add_55_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_55_sva_1, z_out_83,
          z_out_8_32);
      modulo_sub_55_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_55_sva_1[30:0])}),
          z_out_67, modulo_sub_base_55_sva_1[31]);
      modulo_add_56_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_56_sva_1, z_out_84,
          z_out_7_32);
      modulo_sub_56_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_56_sva_1[30:0])}),
          z_out_65, modulo_sub_base_56_sva_1[31]);
      modulo_add_57_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_57_sva_1, z_out_82,
          z_out_6_32);
      modulo_sub_57_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_57_sva_1[30:0])}),
          z_out_49, modulo_sub_base_57_sva_1[31]);
      modulo_add_58_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_58_sva_1, z_out_48,
          z_out_5_32);
      modulo_sub_58_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_58_sva_1[30:0])}),
          z_out_47, modulo_sub_base_58_sva_1[31]);
      modulo_add_59_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_59_sva_1, z_out_46,
          z_out_4_32);
      modulo_sub_59_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_59_sva_1[30:0])}),
          z_out_45, modulo_sub_base_59_sva_1[31]);
      modulo_add_60_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_60_sva_1, z_out_44,
          z_out_3_32);
      modulo_sub_60_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_60_sva_1[30:0])}),
          z_out_43, modulo_sub_base_60_sva_1[31]);
      modulo_add_61_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_61_sva_1, z_out_42,
          z_out_2_32);
      modulo_sub_61_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_61_sva_1[30:0])}),
          z_out_41, modulo_sub_base_61_sva_1[31]);
      modulo_add_62_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_62_sva_1, z_out_40,
          z_out_1_32);
      modulo_sub_62_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_62_sva_1[30:0])}),
          z_out_39, modulo_sub_base_62_sva_1[31]);
      modulo_add_63_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(modulo_add_base_63_sva_1, z_out_38,
          z_out_32_1);
      modulo_sub_63_qr_lpi_3_dfm_1 <= MUX_v_32_2_2(({1'b0 , (modulo_sub_base_63_sva_1[30:0])}),
          z_out_37, modulo_sub_base_63_sva_1[31]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_11 <= 1'b0;
    end
    else if ( modulo_add_48_qelse_and_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_11 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_11 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_321_itm_11 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_11 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_337_itm_11 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( butterFly2_31_and_cse ) begin
      modulo_add_base_63_sva_1 <= nl_modulo_add_base_63_sva_1[31:0];
      modulo_add_base_62_sva_1 <= nl_modulo_add_base_62_sva_1[31:0];
      modulo_add_base_61_sva_1 <= nl_modulo_add_base_61_sva_1[31:0];
      modulo_add_base_60_sva_1 <= nl_modulo_add_base_60_sva_1[31:0];
      modulo_add_base_59_sva_1 <= nl_modulo_add_base_59_sva_1[31:0];
      modulo_add_base_58_sva_1 <= nl_modulo_add_base_58_sva_1[31:0];
      modulo_add_base_57_sva_1 <= nl_modulo_add_base_57_sva_1[31:0];
      modulo_add_base_56_sva_1 <= nl_modulo_add_base_56_sva_1[31:0];
      modulo_add_base_55_sva_1 <= nl_modulo_add_base_55_sva_1[31:0];
      modulo_add_base_54_sva_1 <= nl_modulo_add_base_54_sva_1[31:0];
      modulo_add_base_53_sva_1 <= nl_modulo_add_base_53_sva_1[31:0];
      modulo_add_base_52_sva_1 <= nl_modulo_add_base_52_sva_1[31:0];
      modulo_add_base_51_sva_1 <= nl_modulo_add_base_51_sva_1[31:0];
      modulo_add_base_50_sva_1 <= nl_modulo_add_base_50_sva_1[31:0];
      modulo_add_base_49_sva_1 <= nl_modulo_add_base_49_sva_1[31:0];
      modulo_add_base_48_sva_1 <= nl_modulo_add_base_48_sva_1[31:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      modulo_sub_base_48_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_49_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_50_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_51_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_52_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_53_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_54_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_55_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_56_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_57_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_58_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_59_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_60_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_61_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_62_sva_1 <= 32'b00000000000000000000000000000000;
      modulo_sub_base_63_sva_1 <= 32'b00000000000000000000000000000000;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10 <= 1'b0;
    end
    else if ( butterFly2_31_and_cse ) begin
      modulo_sub_base_48_sva_1 <= nl_modulo_sub_base_48_sva_1[31:0];
      modulo_sub_base_49_sva_1 <= nl_modulo_sub_base_49_sva_1[31:0];
      modulo_sub_base_50_sva_1 <= nl_modulo_sub_base_50_sva_1[31:0];
      modulo_sub_base_51_sva_1 <= nl_modulo_sub_base_51_sva_1[31:0];
      modulo_sub_base_52_sva_1 <= nl_modulo_sub_base_52_sva_1[31:0];
      modulo_sub_base_53_sva_1 <= nl_modulo_sub_base_53_sva_1[31:0];
      modulo_sub_base_54_sva_1 <= nl_modulo_sub_base_54_sva_1[31:0];
      modulo_sub_base_55_sva_1 <= nl_modulo_sub_base_55_sva_1[31:0];
      modulo_sub_base_56_sva_1 <= nl_modulo_sub_base_56_sva_1[31:0];
      modulo_sub_base_57_sva_1 <= nl_modulo_sub_base_57_sva_1[31:0];
      modulo_sub_base_58_sva_1 <= nl_modulo_sub_base_58_sva_1[31:0];
      modulo_sub_base_59_sva_1 <= nl_modulo_sub_base_59_sva_1[31:0];
      modulo_sub_base_60_sva_1 <= nl_modulo_sub_base_60_sva_1[31:0];
      modulo_sub_base_61_sva_1 <= nl_modulo_sub_base_61_sva_1[31:0];
      modulo_sub_base_62_sva_1 <= nl_modulo_sub_base_62_sva_1[31:0];
      modulo_sub_base_63_sva_1 <= nl_modulo_sub_base_63_sva_1[31:0];
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_10 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( mult_63_if_and_cse ) begin
      mult_48_res_sva_1 <= mult_48_res_sva_2;
      mult_49_res_sva_1 <= mult_49_res_sva_2;
      mult_50_res_sva_1 <= mult_50_res_sva_2;
      mult_51_res_sva_1 <= mult_51_res_sva_2;
      mult_52_res_sva_1 <= mult_52_res_sva_2;
      mult_53_res_sva_1 <= mult_53_res_sva_2;
      mult_54_res_sva_1 <= mult_54_res_sva_2;
      mult_55_res_sva_1 <= mult_55_res_sva_2;
      mult_56_res_sva_1 <= mult_56_res_sva_2;
      mult_57_res_sva_1 <= mult_57_res_sva_2;
      mult_58_res_sva_1 <= mult_58_res_sva_2;
      mult_59_res_sva_1 <= mult_59_res_sva_2;
      mult_60_res_sva_1 <= mult_60_res_sva_2;
      mult_61_res_sva_1 <= mult_61_res_sva_2;
      mult_62_res_sva_1 <= mult_62_res_sva_2;
      mult_63_res_sva_1 <= mult_63_res_sva_2;
      tmp_62_lpi_3_dfm_8 <= tmp_62_lpi_3_dfm_7;
      tmp_60_lpi_3_dfm_8 <= tmp_60_lpi_3_dfm_7;
      tmp_58_lpi_3_dfm_8 <= tmp_58_lpi_3_dfm_7;
      tmp_56_lpi_3_dfm_8 <= tmp_56_lpi_3_dfm_7;
      tmp_54_lpi_3_dfm_8 <= tmp_54_lpi_3_dfm_7;
      tmp_52_lpi_3_dfm_8 <= tmp_52_lpi_3_dfm_7;
      tmp_50_lpi_3_dfm_8 <= tmp_50_lpi_3_dfm_7;
      tmp_48_lpi_3_dfm_8 <= tmp_48_lpi_3_dfm_7;
      tmp_46_lpi_3_dfm_8 <= tmp_46_lpi_3_dfm_7;
      tmp_44_lpi_3_dfm_8 <= tmp_44_lpi_3_dfm_7;
      tmp_42_lpi_3_dfm_8 <= tmp_42_lpi_3_dfm_7;
      tmp_40_lpi_3_dfm_8 <= tmp_40_lpi_3_dfm_7;
      tmp_38_lpi_3_dfm_8 <= tmp_38_lpi_3_dfm_7;
      tmp_36_lpi_3_dfm_8 <= tmp_36_lpi_3_dfm_7;
      tmp_34_lpi_3_dfm_8 <= tmp_34_lpi_3_dfm_7;
      tmp_32_lpi_3_dfm_8 <= tmp_32_lpi_3_dfm_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      mult_63_slc_32_svs_st_1 <= 1'b0;
      mult_62_slc_32_svs_st_1 <= 1'b0;
      mult_61_slc_32_svs_st_1 <= 1'b0;
      mult_60_slc_32_svs_st_1 <= 1'b0;
      mult_59_slc_32_svs_st_1 <= 1'b0;
      mult_58_slc_32_svs_st_1 <= 1'b0;
      mult_57_slc_32_svs_st_1 <= 1'b0;
      mult_56_slc_32_svs_st_1 <= 1'b0;
      mult_55_slc_32_svs_st_1 <= 1'b0;
      mult_54_slc_32_svs_st_1 <= 1'b0;
      mult_53_slc_32_svs_st_1 <= 1'b0;
      mult_52_slc_32_svs_st_1 <= 1'b0;
      mult_51_slc_32_svs_st_1 <= 1'b0;
      mult_50_slc_32_svs_st_1 <= 1'b0;
      mult_49_slc_32_svs_st_1 <= 1'b0;
      mult_48_slc_32_svs_st_1 <= 1'b0;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9 <= 1'b0;
    end
    else if ( mult_63_if_and_cse ) begin
      mult_63_slc_32_svs_st_1 <= z_out_31_32;
      mult_62_slc_32_svs_st_1 <= z_out_30_32;
      mult_61_slc_32_svs_st_1 <= z_out_29_32;
      mult_60_slc_32_svs_st_1 <= z_out_28_32;
      mult_59_slc_32_svs_st_1 <= z_out_27_32;
      mult_58_slc_32_svs_st_1 <= z_out_26_32;
      mult_57_slc_32_svs_st_1 <= z_out_25_32;
      mult_56_slc_32_svs_st_1 <= z_out_24_32;
      mult_55_slc_32_svs_st_1 <= z_out_23_32;
      mult_54_slc_32_svs_st_1 <= z_out_22_32;
      mult_53_slc_32_svs_st_1 <= z_out_21_32;
      mult_52_slc_32_svs_st_1 <= z_out_20_32;
      mult_51_slc_32_svs_st_1 <= z_out_19_32;
      mult_50_slc_32_svs_st_1 <= z_out_18_32;
      mult_49_slc_32_svs_st_1 <= z_out_17_32;
      mult_48_slc_32_svs_st_1 <= z_out_16_32;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm_1 <= 1'b0;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1 <= 1'b0;
    end
    else if ( INNER_LOOP4_r_and_3_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm_1 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_33_true_3_lshift_psp_1_0_sva <= 2'b00;
    end
    else if ( core_wen & (~ (fsm_output[8])) ) begin
      operator_33_true_3_lshift_psp_1_0_sva <= operator_33_true_3_lshift_psp_1_0_sva_mx0w2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm <= 1'b0;
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm <= 1'b0;
    end
    else if ( INNER_LOOP4_r_and_4_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4377_itm <= INNER_LOOP1_r_INNER_LOOP1_r_and_6_cse[4];
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm <= INNER_LOOP1_r_INNER_LOOP1_r_and_6_cse[0];
    end
  end
  always @(posedge clk) begin
    if ( mult_63_z_and_cse ) begin
      mult_63_z_asn_itm_4 <= mult_63_z_asn_itm_3;
      mult_62_z_asn_itm_4 <= mult_62_z_asn_itm_3;
      mult_61_z_asn_itm_4 <= mult_61_z_asn_itm_3;
      mult_60_z_asn_itm_4 <= mult_60_z_asn_itm_3;
      mult_59_z_asn_itm_4 <= mult_59_z_asn_itm_3;
      mult_58_z_asn_itm_4 <= mult_58_z_asn_itm_3;
      mult_57_z_asn_itm_4 <= mult_57_z_asn_itm_3;
      mult_56_z_asn_itm_4 <= mult_56_z_asn_itm_3;
      mult_55_z_asn_itm_4 <= mult_55_z_asn_itm_3;
      mult_54_z_asn_itm_4 <= mult_54_z_asn_itm_3;
      mult_53_z_asn_itm_4 <= mult_53_z_asn_itm_3;
      mult_52_z_asn_itm_4 <= mult_52_z_asn_itm_3;
      mult_51_z_asn_itm_4 <= mult_51_z_asn_itm_3;
      mult_50_z_asn_itm_4 <= mult_50_z_asn_itm_3;
      mult_49_z_asn_itm_4 <= mult_49_z_asn_itm_3;
      mult_48_z_asn_itm_4 <= mult_48_z_asn_itm_3;
      tmp_62_lpi_3_dfm_7 <= tmp_62_lpi_3_dfm_6;
      tmp_60_lpi_3_dfm_7 <= tmp_60_lpi_3_dfm_6;
      tmp_58_lpi_3_dfm_7 <= tmp_58_lpi_3_dfm_6;
      tmp_56_lpi_3_dfm_7 <= tmp_56_lpi_3_dfm_6;
      tmp_54_lpi_3_dfm_7 <= tmp_54_lpi_3_dfm_6;
      tmp_52_lpi_3_dfm_7 <= tmp_52_lpi_3_dfm_6;
      tmp_50_lpi_3_dfm_7 <= tmp_50_lpi_3_dfm_6;
      tmp_48_lpi_3_dfm_7 <= tmp_48_lpi_3_dfm_6;
      tmp_46_lpi_3_dfm_7 <= tmp_46_lpi_3_dfm_6;
      tmp_44_lpi_3_dfm_7 <= tmp_44_lpi_3_dfm_6;
      tmp_42_lpi_3_dfm_7 <= tmp_42_lpi_3_dfm_6;
      tmp_40_lpi_3_dfm_7 <= tmp_40_lpi_3_dfm_6;
      tmp_38_lpi_3_dfm_7 <= tmp_38_lpi_3_dfm_6;
      tmp_36_lpi_3_dfm_7 <= tmp_36_lpi_3_dfm_6;
      tmp_34_lpi_3_dfm_7 <= tmp_34_lpi_3_dfm_6;
      tmp_32_lpi_3_dfm_7 <= tmp_32_lpi_3_dfm_6;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8 <= 1'b0;
    end
    else if ( mult_63_z_and_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_10 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_10 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_10 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_9)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_10 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_9;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_9 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_9 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_9 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_8)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_9 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_8;
    end
  end
  always @(posedge clk) begin
    if ( mult_63_z_and_1_cse ) begin
      mult_63_z_asn_itm_3 <= mult_63_z_asn_itm_2;
      mult_62_z_asn_itm_3 <= mult_62_z_asn_itm_2;
      mult_61_z_asn_itm_3 <= mult_61_z_asn_itm_2;
      mult_60_z_asn_itm_3 <= mult_60_z_asn_itm_2;
      mult_59_z_asn_itm_3 <= mult_59_z_asn_itm_2;
      mult_58_z_asn_itm_3 <= mult_58_z_asn_itm_2;
      mult_57_z_asn_itm_3 <= mult_57_z_asn_itm_2;
      mult_56_z_asn_itm_3 <= mult_56_z_asn_itm_2;
      mult_55_z_asn_itm_3 <= mult_55_z_asn_itm_2;
      mult_54_z_asn_itm_3 <= mult_54_z_asn_itm_2;
      mult_53_z_asn_itm_3 <= mult_53_z_asn_itm_2;
      mult_52_z_asn_itm_3 <= mult_52_z_asn_itm_2;
      mult_51_z_asn_itm_3 <= mult_51_z_asn_itm_2;
      mult_50_z_asn_itm_3 <= mult_50_z_asn_itm_2;
      mult_49_z_asn_itm_3 <= mult_49_z_asn_itm_2;
      mult_48_z_asn_itm_3 <= mult_48_z_asn_itm_2;
      tmp_62_lpi_3_dfm_6 <= tmp_62_lpi_3_dfm_5;
      tmp_60_lpi_3_dfm_6 <= tmp_60_lpi_3_dfm_5;
      tmp_58_lpi_3_dfm_6 <= tmp_58_lpi_3_dfm_5;
      tmp_56_lpi_3_dfm_6 <= tmp_56_lpi_3_dfm_5;
      tmp_54_lpi_3_dfm_6 <= tmp_54_lpi_3_dfm_5;
      tmp_52_lpi_3_dfm_6 <= tmp_52_lpi_3_dfm_5;
      tmp_50_lpi_3_dfm_6 <= tmp_50_lpi_3_dfm_5;
      tmp_48_lpi_3_dfm_6 <= tmp_48_lpi_3_dfm_5;
      tmp_46_lpi_3_dfm_6 <= tmp_46_lpi_3_dfm_5;
      tmp_44_lpi_3_dfm_6 <= tmp_44_lpi_3_dfm_5;
      tmp_42_lpi_3_dfm_6 <= tmp_42_lpi_3_dfm_5;
      tmp_40_lpi_3_dfm_6 <= tmp_40_lpi_3_dfm_5;
      tmp_38_lpi_3_dfm_6 <= tmp_38_lpi_3_dfm_5;
      tmp_36_lpi_3_dfm_6 <= tmp_36_lpi_3_dfm_5;
      tmp_34_lpi_3_dfm_6 <= tmp_34_lpi_3_dfm_5;
      tmp_32_lpi_3_dfm_6 <= tmp_32_lpi_3_dfm_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7 <= 1'b0;
    end
    else if ( mult_63_z_and_1_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_8 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_8 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_8 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_7)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_8 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_7;
    end
  end
  always @(posedge clk) begin
    if ( mult_63_z_and_2_cse ) begin
      mult_63_z_asn_itm_2 <= mult_13_z_asn_itm_1;
      mult_62_z_asn_itm_2 <= mult_9_z_asn_itm_1;
      mult_61_z_asn_itm_2 <= mult_5_z_asn_itm_1;
      mult_60_z_asn_itm_2 <= mult_1_z_asn_itm_1;
      mult_59_z_asn_itm_2 <= mult_4_z_asn_itm_1;
      mult_58_z_asn_itm_2 <= mult_7_z_asn_itm_1;
      mult_57_z_asn_itm_2 <= mult_12_z_asn_itm_1;
      mult_56_z_asn_itm_2 <= mult_15_z_asn_itm_1;
      mult_55_z_asn_itm_2 <= mult_11_z_asn_itm_1;
      mult_54_z_asn_itm_2 <= mult_3_z_asn_itm_1;
      mult_53_z_asn_itm_2 <= mult_6_z_asn_itm_1;
      mult_52_z_asn_itm_2 <= mult_14_z_asn_itm_1;
      mult_51_z_asn_itm_2 <= mult_10_z_asn_itm_1;
      mult_50_z_asn_itm_2 <= mult_2_z_asn_itm_1;
      mult_49_z_asn_itm_2 <= mult_8_z_asn_itm_1;
      mult_48_z_asn_itm_2 <= mult_z_asn_itm_1;
      tmp_62_lpi_3_dfm_5 <= tmp_62_lpi_3_dfm_4;
      tmp_60_lpi_3_dfm_5 <= tmp_60_lpi_3_dfm_4;
      tmp_58_lpi_3_dfm_5 <= tmp_58_lpi_3_dfm_4;
      tmp_56_lpi_3_dfm_5 <= tmp_56_lpi_3_dfm_4;
      tmp_54_lpi_3_dfm_5 <= tmp_54_lpi_3_dfm_4;
      tmp_52_lpi_3_dfm_5 <= tmp_52_lpi_3_dfm_4;
      tmp_50_lpi_3_dfm_5 <= tmp_50_lpi_3_dfm_4;
      tmp_48_lpi_3_dfm_5 <= tmp_48_lpi_3_dfm_4;
      tmp_46_lpi_3_dfm_5 <= tmp_46_lpi_3_dfm_4;
      tmp_44_lpi_3_dfm_5 <= tmp_44_lpi_3_dfm_4;
      tmp_42_lpi_3_dfm_5 <= tmp_42_lpi_3_dfm_4;
      tmp_40_lpi_3_dfm_5 <= tmp_40_lpi_3_dfm_4;
      tmp_38_lpi_3_dfm_5 <= tmp_38_lpi_3_dfm_4;
      tmp_36_lpi_3_dfm_5 <= tmp_36_lpi_3_dfm_4;
      tmp_34_lpi_3_dfm_5 <= tmp_34_lpi_3_dfm_4;
      tmp_32_lpi_3_dfm_5 <= tmp_32_lpi_3_dfm_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6 <= 1'b0;
    end
    else if ( mult_63_z_and_2_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_7 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_7 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_7 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_6)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_7 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_6;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_6 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_6 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_6 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_6 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_5;
    end
  end
  always @(posedge clk) begin
    if ( butterFly2_31_f1_and_4_cse ) begin
      tmp_62_lpi_3_dfm_4 <= tmp_62_lpi_3_dfm_3;
      tmp_60_lpi_3_dfm_4 <= tmp_60_lpi_3_dfm_3;
      tmp_58_lpi_3_dfm_4 <= tmp_58_lpi_3_dfm_3;
      tmp_56_lpi_3_dfm_4 <= tmp_56_lpi_3_dfm_3;
      tmp_54_lpi_3_dfm_4 <= tmp_54_lpi_3_dfm_3;
      tmp_52_lpi_3_dfm_4 <= tmp_52_lpi_3_dfm_3;
      tmp_50_lpi_3_dfm_4 <= tmp_50_lpi_3_dfm_3;
      tmp_48_lpi_3_dfm_4 <= tmp_48_lpi_3_dfm_3;
      tmp_46_lpi_3_dfm_4 <= tmp_46_lpi_3_dfm_3;
      tmp_44_lpi_3_dfm_4 <= tmp_44_lpi_3_dfm_3;
      tmp_42_lpi_3_dfm_4 <= tmp_42_lpi_3_dfm_3;
      tmp_40_lpi_3_dfm_4 <= tmp_40_lpi_3_dfm_3;
      tmp_38_lpi_3_dfm_4 <= tmp_38_lpi_3_dfm_3;
      tmp_36_lpi_3_dfm_4 <= tmp_36_lpi_3_dfm_3;
      tmp_34_lpi_3_dfm_4 <= tmp_34_lpi_3_dfm_3;
      tmp_32_lpi_3_dfm_4 <= tmp_32_lpi_3_dfm_3;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5 <= 1'b0;
    end
    else if ( butterFly2_31_f1_and_4_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_5 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_5 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_5 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_5 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_5 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_4;
    end
  end
  always @(posedge clk) begin
    if ( butterFly2_31_f1_and_5_cse ) begin
      tmp_62_lpi_3_dfm_3 <= tmp_62_lpi_3_dfm_2;
      tmp_60_lpi_3_dfm_3 <= tmp_60_lpi_3_dfm_2;
      tmp_58_lpi_3_dfm_3 <= tmp_58_lpi_3_dfm_2;
      tmp_56_lpi_3_dfm_3 <= tmp_56_lpi_3_dfm_2;
      tmp_54_lpi_3_dfm_3 <= tmp_54_lpi_3_dfm_2;
      tmp_52_lpi_3_dfm_3 <= tmp_52_lpi_3_dfm_2;
      tmp_50_lpi_3_dfm_3 <= tmp_50_lpi_3_dfm_2;
      tmp_48_lpi_3_dfm_3 <= tmp_48_lpi_3_dfm_2;
      tmp_46_lpi_3_dfm_3 <= tmp_46_lpi_3_dfm_2;
      tmp_44_lpi_3_dfm_3 <= tmp_44_lpi_3_dfm_2;
      tmp_42_lpi_3_dfm_3 <= tmp_42_lpi_3_dfm_2;
      tmp_40_lpi_3_dfm_3 <= tmp_40_lpi_3_dfm_2;
      tmp_38_lpi_3_dfm_3 <= tmp_38_lpi_3_dfm_2;
      tmp_36_lpi_3_dfm_3 <= tmp_36_lpi_3_dfm_2;
      tmp_34_lpi_3_dfm_3 <= tmp_34_lpi_3_dfm_2;
      tmp_32_lpi_3_dfm_3 <= tmp_32_lpi_3_dfm_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4 <= 1'b0;
    end
    else if ( butterFly2_31_f1_and_5_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_4 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_4 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_4 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_4 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_4 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_3;
    end
  end
  always @(posedge clk) begin
    if ( butterFly2_31_f1_and_6_cse ) begin
      tmp_62_lpi_3_dfm_2 <= tmp_30_lpi_3_dfm_1;
      tmp_60_lpi_3_dfm_2 <= tmp_28_lpi_3_dfm_1;
      tmp_58_lpi_3_dfm_2 <= tmp_26_lpi_3_dfm_1;
      tmp_56_lpi_3_dfm_2 <= tmp_24_lpi_3_dfm_1;
      tmp_54_lpi_3_dfm_2 <= tmp_22_lpi_3_dfm_1;
      tmp_52_lpi_3_dfm_2 <= tmp_20_lpi_3_dfm_1;
      tmp_50_lpi_3_dfm_2 <= tmp_18_lpi_3_dfm_1;
      tmp_48_lpi_3_dfm_2 <= tmp_16_lpi_3_dfm_1;
      tmp_46_lpi_3_dfm_2 <= tmp_14_lpi_3_dfm_1;
      tmp_44_lpi_3_dfm_2 <= tmp_12_lpi_3_dfm_1;
      tmp_42_lpi_3_dfm_2 <= tmp_10_lpi_3_dfm_1;
      tmp_40_lpi_3_dfm_2 <= tmp_8_lpi_3_dfm_1;
      tmp_38_lpi_3_dfm_2 <= tmp_6_lpi_3_dfm_1;
      tmp_36_lpi_3_dfm_2 <= tmp_4_lpi_3_dfm_1;
      tmp_34_lpi_3_dfm_2 <= tmp_2_lpi_3_dfm_1;
      tmp_32_lpi_3_dfm_2 <= tmp_lpi_3_dfm_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3 <= 1'b0;
    end
    else if ( butterFly2_31_f1_and_6_cse ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_3 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_3 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_3 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_3 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_3 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2 <= 1'b0;
    end
    else if ( core_wen & INNER_LOOP4_stage_0_2 ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_2 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_2 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_2 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0_2 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm_1)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_2 <= INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0 & INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_20_itm_1 <= INNER_LOOP4_r_9_4_sva_4_0[4:1];
    end
  end
  always @(posedge clk) begin
    if ( core_wen & INNER_LOOP4_stage_0 & (~ INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_192_itm)
        ) begin
      INNER_LOOP4_r_slc_INNER_LOOP4_r_9_4_4_0_4241_itm_1 <= INNER_LOOP4_r_9_4_sva_4_0[4:1];
    end
  end
  assign INNER_LOOP2_tw_and_nl = operator_33_true_1_lshift_psp_7_4_sva & (INNER_LOOP2_r_9_4_sva_4_0[3:0]);
  assign nor_4_nl = ~((fsm_output[7]) | (fsm_output[4]) | (fsm_output[8]));
  assign nl_modulo_sub_base_sva_1  = tmp_64_lpi_3_dfm_8 - mult_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_1_sva_1  = tmp_66_lpi_3_dfm_8 - mult_1_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_2_sva_1  = tmp_68_lpi_3_dfm_8 - mult_2_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_3_sva_1  = tmp_70_lpi_3_dfm_8 - mult_3_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_4_sva_1  = tmp_72_lpi_3_dfm_8 - mult_4_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_5_sva_1  = tmp_74_lpi_3_dfm_8 - mult_5_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_6_sva_1  = tmp_76_lpi_3_dfm_8 - mult_6_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_7_sva_1  = tmp_78_lpi_3_dfm_8 - mult_7_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_8_sva_1  = tmp_80_lpi_3_dfm_8 - mult_8_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_9_sva_1  = tmp_82_lpi_3_dfm_8 - mult_9_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_11_sva_1  = tmp_86_lpi_3_dfm_8 - mult_11_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_12_sva_1  = tmp_88_lpi_3_dfm_8 - mult_12_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_13_sva_1  = tmp_90_lpi_3_dfm_8 - mult_13_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_14_sva_1  = tmp_92_lpi_3_dfm_8 - mult_14_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_15_sva_1  = tmp_94_lpi_3_dfm_8 - mult_15_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_15_sva_1  = tmp_94_lpi_3_dfm_8 + mult_15_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_14_sva_1  = tmp_92_lpi_3_dfm_8 + mult_14_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_13_sva_1  = tmp_90_lpi_3_dfm_8 + mult_13_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_12_sva_1  = tmp_88_lpi_3_dfm_8 + mult_12_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_11_sva_1  = tmp_86_lpi_3_dfm_8 + mult_11_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_9_sva_1  = tmp_82_lpi_3_dfm_8 + mult_9_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_8_sva_1  = tmp_80_lpi_3_dfm_8 + mult_8_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_7_sva_1  = tmp_78_lpi_3_dfm_8 + mult_7_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_6_sva_1  = tmp_76_lpi_3_dfm_8 + mult_6_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_5_sva_1  = tmp_74_lpi_3_dfm_8 + mult_5_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_4_sva_1  = tmp_72_lpi_3_dfm_8 + mult_4_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_3_sva_1  = tmp_70_lpi_3_dfm_8 + mult_3_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_2_sva_1  = tmp_68_lpi_3_dfm_8 + mult_2_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_1_sva_1  = tmp_66_lpi_3_dfm_8 + mult_1_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_sva_1  = tmp_64_lpi_3_dfm_8 + mult_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_20_qif_acc_nl = modulo_add_base_20_sva_1 - p_sva;
  assign modulo_add_20_qif_acc_nl = nl_modulo_add_20_qif_acc_nl[31:0];
  assign nl_modulo_add_21_qif_acc_nl = modulo_add_base_21_sva_1 - p_sva;
  assign modulo_add_21_qif_acc_nl = nl_modulo_add_21_qif_acc_nl[31:0];
  assign nl_modulo_add_22_qif_acc_nl = modulo_add_base_22_sva_1 - p_sva;
  assign modulo_add_22_qif_acc_nl = nl_modulo_add_22_qif_acc_nl[31:0];
  assign nl_modulo_add_23_qif_acc_nl = modulo_add_base_23_sva_1 - p_sva;
  assign modulo_add_23_qif_acc_nl = nl_modulo_add_23_qif_acc_nl[31:0];
  assign nl_modulo_add_24_qif_acc_nl = modulo_add_base_24_sva_1 - p_sva;
  assign modulo_add_24_qif_acc_nl = nl_modulo_add_24_qif_acc_nl[31:0];
  assign nl_modulo_add_25_qif_acc_nl = modulo_add_base_25_sva_1 - p_sva;
  assign modulo_add_25_qif_acc_nl = nl_modulo_add_25_qif_acc_nl[31:0];
  assign nl_modulo_add_26_qif_acc_nl = modulo_add_base_26_sva_1 - p_sva;
  assign modulo_add_26_qif_acc_nl = nl_modulo_add_26_qif_acc_nl[31:0];
  assign nl_modulo_add_27_qif_acc_nl = modulo_add_base_27_sva_1 - p_sva;
  assign modulo_add_27_qif_acc_nl = nl_modulo_add_27_qif_acc_nl[31:0];
  assign nl_modulo_add_28_qif_acc_nl = modulo_add_base_28_sva_1 - p_sva;
  assign modulo_add_28_qif_acc_nl = nl_modulo_add_28_qif_acc_nl[31:0];
  assign nl_modulo_add_29_qif_acc_nl = modulo_add_base_29_sva_1 - p_sva;
  assign modulo_add_29_qif_acc_nl = nl_modulo_add_29_qif_acc_nl[31:0];
  assign nl_modulo_add_30_qif_acc_nl = modulo_add_base_30_sva_1 - p_sva;
  assign modulo_add_30_qif_acc_nl = nl_modulo_add_30_qif_acc_nl[31:0];
  assign nl_modulo_add_31_qif_acc_nl = modulo_add_base_31_sva_1 - p_sva;
  assign modulo_add_31_qif_acc_nl = nl_modulo_add_31_qif_acc_nl[31:0];
  assign nl_modulo_add_base_31_sva_1  = tmp_30_lpi_3_dfm_8 + mult_31_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_30_sva_1  = tmp_28_lpi_3_dfm_8 + mult_30_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_29_sva_1  = tmp_26_lpi_3_dfm_8 + mult_29_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_28_sva_1  = tmp_24_lpi_3_dfm_8 + mult_28_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_27_sva_1  = tmp_22_lpi_3_dfm_8 + mult_27_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_26_sva_1  = tmp_20_lpi_3_dfm_8 + mult_26_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_25_sva_1  = tmp_18_lpi_3_dfm_8 + mult_25_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_24_sva_1  = tmp_16_lpi_3_dfm_8 + mult_24_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_23_sva_1  = tmp_14_lpi_3_dfm_8 + mult_23_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_22_sva_1  = tmp_12_lpi_3_dfm_8 + mult_22_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_21_sva_1  = tmp_10_lpi_3_dfm_8 + mult_21_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_20_sva_1  = tmp_8_lpi_3_dfm_8 + mult_20_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_19_sva_1  = tmp_6_lpi_3_dfm_8 + mult_19_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_18_sva_1  = tmp_4_lpi_3_dfm_8 + mult_18_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_17_sva_1  = tmp_2_lpi_3_dfm_8 + mult_17_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_16_sva_1  = tmp_lpi_3_dfm_8 + mult_16_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_16_sva_1  = tmp_lpi_3_dfm_8 - mult_16_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_17_sva_1  = tmp_2_lpi_3_dfm_8 - mult_17_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_18_sva_1  = tmp_4_lpi_3_dfm_8 - mult_18_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_19_sva_1  = tmp_6_lpi_3_dfm_8 - mult_19_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_20_sva_1  = tmp_8_lpi_3_dfm_8 - mult_20_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_21_sva_1  = tmp_10_lpi_3_dfm_8 - mult_21_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_22_sva_1  = tmp_12_lpi_3_dfm_8 - mult_22_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_23_sva_1  = tmp_14_lpi_3_dfm_8 - mult_23_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_24_sva_1  = tmp_16_lpi_3_dfm_8 - mult_24_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_25_sva_1  = tmp_18_lpi_3_dfm_8 - mult_25_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_26_sva_1  = tmp_20_lpi_3_dfm_8 - mult_26_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_27_sva_1  = tmp_22_lpi_3_dfm_8 - mult_27_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_28_sva_1  = tmp_24_lpi_3_dfm_8 - mult_28_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_29_sva_1  = tmp_26_lpi_3_dfm_8 - mult_29_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_30_sva_1  = tmp_28_lpi_3_dfm_8 - mult_30_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_31_sva_1  = tmp_30_lpi_3_dfm_8 - mult_31_res_lpi_3_dfm_mx0;
  assign nl_mult_31_if_acc_1_nl = ({1'b1 , mult_31_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_31_if_acc_1_nl = nl_mult_31_if_acc_1_nl[32:0];
  assign nl_mult_30_if_acc_1_nl = ({1'b1 , mult_30_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_30_if_acc_1_nl = nl_mult_30_if_acc_1_nl[32:0];
  assign nl_mult_29_if_acc_1_nl = ({1'b1 , mult_29_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_29_if_acc_1_nl = nl_mult_29_if_acc_1_nl[32:0];
  assign nl_mult_28_if_acc_1_nl = ({1'b1 , mult_28_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_28_if_acc_1_nl = nl_mult_28_if_acc_1_nl[32:0];
  assign nl_mult_27_if_acc_1_nl = ({1'b1 , mult_27_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_27_if_acc_1_nl = nl_mult_27_if_acc_1_nl[32:0];
  assign nl_mult_26_if_acc_1_nl = ({1'b1 , mult_26_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_26_if_acc_1_nl = nl_mult_26_if_acc_1_nl[32:0];
  assign nl_mult_25_if_acc_1_nl = ({1'b1 , mult_25_res_sva_2}) + conv_u2u_32_33(~
      p_sva) + 33'b000000000000000000000000000000001;
  assign mult_25_if_acc_1_nl = nl_mult_25_if_acc_1_nl[32:0];
  assign nl_mult_24_if_acc_1_nl = ({1'b1 , z_out_84}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_24_if_acc_1_nl = nl_mult_24_if_acc_1_nl[32:0];
  assign nl_mult_23_if_acc_1_nl = ({1'b1 , z_out_83}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_23_if_acc_1_nl = nl_mult_23_if_acc_1_nl[32:0];
  assign nl_mult_22_if_acc_1_nl = ({1'b1 , z_out_82}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_22_if_acc_1_nl = nl_mult_22_if_acc_1_nl[32:0];
  assign nl_mult_21_if_acc_1_nl = ({1'b1 , z_out_55}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_21_if_acc_1_nl = nl_mult_21_if_acc_1_nl[32:0];
  assign nl_mult_20_if_acc_1_nl = ({1'b1 , z_out_48}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_20_if_acc_1_nl = nl_mult_20_if_acc_1_nl[32:0];
  assign nl_mult_19_if_acc_1_nl = ({1'b1 , z_out_46}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_19_if_acc_1_nl = nl_mult_19_if_acc_1_nl[32:0];
  assign nl_mult_18_if_acc_1_nl = ({1'b1 , z_out_44}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_18_if_acc_1_nl = nl_mult_18_if_acc_1_nl[32:0];
  assign nl_mult_17_if_acc_1_nl = ({1'b1 , z_out_42}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_17_if_acc_1_nl = nl_mult_17_if_acc_1_nl[32:0];
  assign nl_mult_16_if_acc_1_nl = ({1'b1 , z_out_40}) + conv_u2u_32_33(~ p_sva) +
      33'b000000000000000000000000000000001;
  assign mult_16_if_acc_1_nl = nl_mult_16_if_acc_1_nl[32:0];
  assign butterFly2_21_tw_butterFly2_21_tw_or_nl = c_1_sva_1 | INNER_LOOP4_nor_tmp;
  assign nl_modulo_sub_base_32_sva_1  = tmp_96_lpi_3_dfm_8 - mult_32_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_33_sva_1  = tmp_98_lpi_3_dfm_8 - mult_33_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_34_sva_1  = tmp_100_lpi_3_dfm_8 - mult_34_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_35_sva_1  = tmp_102_lpi_3_dfm_8 - mult_35_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_36_sva_1  = tmp_104_lpi_3_dfm_8 - mult_36_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_37_sva_1  = tmp_106_lpi_3_dfm_8 - mult_37_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_38_sva_1  = tmp_108_lpi_3_dfm_8 - mult_38_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_39_sva_1  = tmp_110_lpi_3_dfm_8 - mult_39_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_40_sva_1  = tmp_112_lpi_3_dfm_8 - mult_40_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_41_sva_1  = tmp_114_lpi_3_dfm_8 - mult_41_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_42_sva_1  = tmp_116_lpi_3_dfm_8 - mult_42_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_43_sva_1  = tmp_118_lpi_3_dfm_8 - mult_43_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_45_sva_1  = tmp_122_lpi_3_dfm_8 - mult_45_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_46_sva_1  = tmp_124_lpi_3_dfm_8 - mult_46_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_47_sva_1  = tmp_126_lpi_3_dfm_8 - mult_47_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_47_sva_1  = tmp_126_lpi_3_dfm_8 + mult_47_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_46_sva_1  = tmp_124_lpi_3_dfm_8 + mult_46_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_45_sva_1  = tmp_122_lpi_3_dfm_8 + mult_45_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_43_sva_1  = tmp_118_lpi_3_dfm_8 + mult_43_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_42_sva_1  = tmp_116_lpi_3_dfm_8 + mult_42_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_41_sva_1  = tmp_114_lpi_3_dfm_8 + mult_41_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_40_sva_1  = tmp_112_lpi_3_dfm_8 + mult_40_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_39_sva_1  = tmp_110_lpi_3_dfm_8 + mult_39_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_38_sva_1  = tmp_108_lpi_3_dfm_8 + mult_38_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_37_sva_1  = tmp_106_lpi_3_dfm_8 + mult_37_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_36_sva_1  = tmp_104_lpi_3_dfm_8 + mult_36_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_35_sva_1  = tmp_102_lpi_3_dfm_8 + mult_35_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_34_sva_1  = tmp_100_lpi_3_dfm_8 + mult_34_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_33_sva_1  = tmp_98_lpi_3_dfm_8 + mult_33_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_32_sva_1  = tmp_96_lpi_3_dfm_8 + mult_32_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_63_sva_1  = tmp_62_lpi_3_dfm_8 + mult_63_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_62_sva_1  = tmp_60_lpi_3_dfm_8 + mult_62_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_61_sva_1  = tmp_58_lpi_3_dfm_8 + mult_61_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_60_sva_1  = tmp_56_lpi_3_dfm_8 + mult_60_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_59_sva_1  = tmp_54_lpi_3_dfm_8 + mult_59_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_58_sva_1  = tmp_52_lpi_3_dfm_8 + mult_58_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_57_sva_1  = tmp_50_lpi_3_dfm_8 + mult_57_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_56_sva_1  = tmp_48_lpi_3_dfm_8 + mult_56_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_55_sva_1  = tmp_46_lpi_3_dfm_8 + mult_55_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_54_sva_1  = tmp_44_lpi_3_dfm_8 + mult_54_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_53_sva_1  = tmp_42_lpi_3_dfm_8 + mult_53_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_52_sva_1  = tmp_40_lpi_3_dfm_8 + mult_52_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_51_sva_1  = tmp_38_lpi_3_dfm_8 + mult_51_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_50_sva_1  = tmp_36_lpi_3_dfm_8 + mult_50_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_49_sva_1  = tmp_34_lpi_3_dfm_8 + mult_49_res_lpi_3_dfm_mx0;
  assign nl_modulo_add_base_48_sva_1  = tmp_32_lpi_3_dfm_8 + mult_48_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_48_sva_1  = tmp_32_lpi_3_dfm_8 - mult_48_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_49_sva_1  = tmp_34_lpi_3_dfm_8 - mult_49_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_50_sva_1  = tmp_36_lpi_3_dfm_8 - mult_50_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_51_sva_1  = tmp_38_lpi_3_dfm_8 - mult_51_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_52_sva_1  = tmp_40_lpi_3_dfm_8 - mult_52_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_53_sva_1  = tmp_42_lpi_3_dfm_8 - mult_53_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_54_sva_1  = tmp_44_lpi_3_dfm_8 - mult_54_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_55_sva_1  = tmp_46_lpi_3_dfm_8 - mult_55_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_56_sva_1  = tmp_48_lpi_3_dfm_8 - mult_56_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_57_sva_1  = tmp_50_lpi_3_dfm_8 - mult_57_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_58_sva_1  = tmp_52_lpi_3_dfm_8 - mult_58_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_59_sva_1  = tmp_54_lpi_3_dfm_8 - mult_59_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_60_sva_1  = tmp_56_lpi_3_dfm_8 - mult_60_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_61_sva_1  = tmp_58_lpi_3_dfm_8 - mult_61_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_62_sva_1  = tmp_60_lpi_3_dfm_8 - mult_62_res_lpi_3_dfm_mx0;
  assign nl_modulo_sub_base_63_sva_1  = tmp_62_lpi_3_dfm_8 - mult_63_res_lpi_3_dfm_mx0;
  assign modulo_add_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_sva_1), (~ modulo_add_base_16_sva_1),
      (~ modulo_add_base_32_sva_1), (~ modulo_add_base_63_sva_1), {(fsm_output[2])
      , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_mux1h_3_nl
      , 1'b1});
  assign acc_nl = nl_acc_nl[33:0];
  assign z_out_32_1 = readslicef_34_1_33(acc_nl);
  assign modulo_add_1_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_1_sva_1),
      (~ modulo_add_base_17_sva_1), (~ modulo_add_base_33_sva_1), (~ modulo_add_base_62_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_1_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_1_mux1h_3_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[33:0];
  assign z_out_1_32 = readslicef_34_1_33(acc_1_nl);
  assign modulo_add_2_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_2_sva_1),
      (~ modulo_add_base_18_sva_1), (~ modulo_add_base_34_sva_1), (~ modulo_add_base_61_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_2_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_2_mux1h_3_nl
      , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[33:0];
  assign z_out_2_32 = readslicef_34_1_33(acc_2_nl);
  assign modulo_add_3_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_3_sva_1),
      (~ modulo_add_base_19_sva_1), (~ modulo_add_base_35_sva_1), (~ modulo_add_base_60_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_3_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_3_mux1h_3_nl
      , 1'b1});
  assign acc_3_nl = nl_acc_3_nl[33:0];
  assign z_out_3_32 = readslicef_34_1_33(acc_3_nl);
  assign modulo_add_4_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_4_sva_1),
      (~ modulo_add_base_20_sva_1), (~ modulo_add_base_36_sva_1), (~ modulo_add_base_59_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_4_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_4_mux1h_3_nl
      , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[33:0];
  assign z_out_4_32 = readslicef_34_1_33(acc_4_nl);
  assign modulo_add_5_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_5_sva_1),
      (~ modulo_add_base_21_sva_1), (~ modulo_add_base_37_sva_1), (~ modulo_add_base_58_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_5_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_5_mux1h_3_nl
      , 1'b1});
  assign acc_5_nl = nl_acc_5_nl[33:0];
  assign z_out_5_32 = readslicef_34_1_33(acc_5_nl);
  assign modulo_add_6_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_6_sva_1),
      (~ modulo_add_base_22_sva_1), (~ modulo_add_base_38_sva_1), (~ modulo_add_base_57_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_6_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_6_mux1h_3_nl
      , 1'b1});
  assign acc_6_nl = nl_acc_6_nl[33:0];
  assign z_out_6_32 = readslicef_34_1_33(acc_6_nl);
  assign modulo_add_7_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_7_sva_1),
      (~ modulo_add_base_23_sva_1), (~ modulo_add_base_39_sva_1), (~ modulo_add_base_56_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_7_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_7_mux1h_3_nl
      , 1'b1});
  assign acc_7_nl = nl_acc_7_nl[33:0];
  assign z_out_7_32 = readslicef_34_1_33(acc_7_nl);
  assign modulo_add_8_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_8_sva_1),
      (~ modulo_add_base_24_sva_1), (~ modulo_add_base_40_sva_1), (~ modulo_add_base_55_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_8_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_8_mux1h_3_nl
      , 1'b1});
  assign acc_8_nl = nl_acc_8_nl[33:0];
  assign z_out_8_32 = readslicef_34_1_33(acc_8_nl);
  assign modulo_add_9_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_9_sva_1),
      (~ modulo_add_base_25_sva_1), (~ modulo_add_base_41_sva_1), (~ modulo_add_base_54_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_9_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_9_mux1h_3_nl
      , 1'b1});
  assign acc_9_nl = nl_acc_9_nl[33:0];
  assign z_out_9_32 = readslicef_34_1_33(acc_9_nl);
  assign modulo_add_10_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_10_sva_1),
      (~ modulo_add_base_26_sva_1), (~ modulo_add_base_42_sva_1), (~ modulo_add_base_53_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_10_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_10_mux1h_3_nl
      , 1'b1});
  assign acc_10_nl = nl_acc_10_nl[33:0];
  assign z_out_10_32 = readslicef_34_1_33(acc_10_nl);
  assign modulo_add_11_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_11_sva_1),
      (~ modulo_add_base_27_sva_1), (~ modulo_add_base_43_sva_1), (~ modulo_add_base_52_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_11_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_11_mux1h_3_nl
      , 1'b1});
  assign acc_11_nl = nl_acc_11_nl[33:0];
  assign z_out_11_32 = readslicef_34_1_33(acc_11_nl);
  assign modulo_add_12_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_12_sva_1),
      (~ modulo_add_base_28_sva_1), (~ modulo_add_base_44_sva_1), (~ modulo_add_base_51_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_12_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_12_mux1h_3_nl
      , 1'b1});
  assign acc_12_nl = nl_acc_12_nl[33:0];
  assign z_out_12_32 = readslicef_34_1_33(acc_12_nl);
  assign modulo_add_13_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_13_sva_1),
      (~ modulo_add_base_29_sva_1), (~ modulo_add_base_45_sva_1), (~ modulo_add_base_50_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_13_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_13_mux1h_3_nl
      , 1'b1});
  assign acc_13_nl = nl_acc_13_nl[33:0];
  assign z_out_13_32 = readslicef_34_1_33(acc_13_nl);
  assign modulo_add_14_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_14_sva_1),
      (~ modulo_add_base_30_sva_1), (~ modulo_add_base_46_sva_1), (~ modulo_add_base_49_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_14_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_14_mux1h_3_nl
      , 1'b1});
  assign acc_14_nl = nl_acc_14_nl[33:0];
  assign z_out_14_32 = readslicef_34_1_33(acc_14_nl);
  assign modulo_add_15_mux1h_3_nl = MUX1HOT_v_32_4_2((~ modulo_add_base_15_sva_1),
      (~ modulo_add_base_31_sva_1), (~ modulo_add_base_47_sva_1), (~ modulo_add_base_48_sva_1),
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_15_nl = ({1'b1 , p_sva , 1'b1}) + conv_u2u_33_34({modulo_add_15_mux1h_3_nl
      , 1'b1});
  assign acc_15_nl = nl_acc_15_nl[33:0];
  assign z_out_15_32 = readslicef_34_1_33(acc_15_nl);
  assign mult_15_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_15_res_sva_2, mult_47_res_sva_2,
      mult_48_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_16_nl = ({1'b1 , mult_15_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_16_nl = nl_acc_16_nl[33:0];
  assign z_out_16_32 = readslicef_34_1_33(acc_16_nl);
  assign mult_14_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_14_res_sva_2, mult_46_res_sva_2,
      mult_49_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_17_nl = ({1'b1 , mult_14_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_17_nl = nl_acc_17_nl[33:0];
  assign z_out_17_32 = readslicef_34_1_33(acc_17_nl);
  assign mult_13_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_13_res_sva_2, mult_45_res_sva_2,
      mult_50_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_18_nl = ({1'b1 , mult_13_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_18_nl = nl_acc_18_nl[33:0];
  assign z_out_18_32 = readslicef_34_1_33(acc_18_nl);
  assign mult_12_if_mux1h_6_nl = MUX1HOT_v_32_3_2(mult_12_res_sva_2, mult_43_res_sva_2,
      mult_51_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_19_nl = ({1'b1 , mult_12_if_mux1h_6_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_19_nl = nl_acc_19_nl[33:0];
  assign z_out_19_32 = readslicef_34_1_33(acc_19_nl);
  assign mult_11_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_11_res_sva_2, mult_41_res_sva_2,
      mult_52_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_20_nl = ({1'b1 , mult_11_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_20_nl = nl_acc_20_nl[33:0];
  assign z_out_20_32 = readslicef_34_1_33(acc_20_nl);
  assign mult_10_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_10_res_sva_2, mult_39_res_sva_2,
      mult_53_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_21_nl = ({1'b1 , mult_10_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_21_nl = nl_acc_21_nl[33:0];
  assign z_out_21_32 = readslicef_34_1_33(acc_21_nl);
  assign mult_9_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_9_res_sva_2, mult_37_res_sva_2,
      mult_54_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_22_nl = ({1'b1 , mult_9_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_22_nl = nl_acc_22_nl[33:0];
  assign z_out_22_32 = readslicef_34_1_33(acc_22_nl);
  assign mult_8_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_8_res_sva_2, mult_35_res_sva_2,
      mult_55_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_23_nl = ({1'b1 , mult_8_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_23_nl = nl_acc_23_nl[33:0];
  assign z_out_23_32 = readslicef_34_1_33(acc_23_nl);
  assign mult_7_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_7_res_sva_2, mult_33_res_sva_2,
      mult_56_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_24_nl = ({1'b1 , mult_7_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_24_nl = nl_acc_24_nl[33:0];
  assign z_out_24_32 = readslicef_34_1_33(acc_24_nl);
  assign mult_6_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_6_res_sva_2, mult_44_res_sva_2,
      mult_57_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_25_nl = ({1'b1 , mult_6_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_25_nl = nl_acc_25_nl[33:0];
  assign z_out_25_32 = readslicef_34_1_33(acc_25_nl);
  assign mult_5_if_mux1h_6_nl = MUX1HOT_v_32_3_2(mult_5_res_sva_2, mult_42_res_sva_2,
      mult_58_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_26_nl = ({1'b1 , mult_5_if_mux1h_6_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_26_nl = nl_acc_26_nl[33:0];
  assign z_out_26_32 = readslicef_34_1_33(acc_26_nl);
  assign mult_4_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_4_res_sva_2, mult_40_res_sva_2,
      mult_59_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_27_nl = ({1'b1 , mult_4_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_27_nl = nl_acc_27_nl[33:0];
  assign z_out_27_32 = readslicef_34_1_33(acc_27_nl);
  assign mult_3_if_mux1h_6_nl = MUX1HOT_v_32_3_2(mult_3_res_sva_2, mult_38_res_sva_2,
      mult_60_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_28_nl = ({1'b1 , mult_3_if_mux1h_6_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_28_nl = nl_acc_28_nl[33:0];
  assign z_out_28_32 = readslicef_34_1_33(acc_28_nl);
  assign mult_2_if_mux1h_6_nl = MUX1HOT_v_32_3_2(mult_2_res_sva_2, mult_36_res_sva_2,
      mult_61_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_29_nl = ({1'b1 , mult_2_if_mux1h_6_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_29_nl = nl_acc_29_nl[33:0];
  assign z_out_29_32 = readslicef_34_1_33(acc_29_nl);
  assign mult_1_if_mux1h_4_nl = MUX1HOT_v_32_3_2(mult_1_res_sva_2, mult_34_res_sva_2,
      mult_62_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_30_nl = ({1'b1 , mult_1_if_mux1h_4_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_30_nl = nl_acc_30_nl[33:0];
  assign z_out_30_32 = readslicef_34_1_33(acc_30_nl);
  assign mult_if_mux1h_6_nl = MUX1HOT_v_32_3_2(mult_res_sva_2, mult_32_res_sva_2,
      mult_63_res_sva_2, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_31_nl = ({1'b1 , mult_if_mux1h_6_nl , 1'b1}) + conv_u2u_33_34({(~
      p_sva) , 1'b1});
  assign acc_31_nl = nl_acc_31_nl[33:0];
  assign z_out_31_32 = readslicef_34_1_33(acc_31_nl);
  assign operator_20_false_1_mux_2_nl = MUX_v_5_2_2(INNER_LOOP2_r_9_4_sva_4_0, INNER_LOOP3_r_9_4_sva_4_0,
      fsm_output[6]);
  assign nl_z_out_33 = conv_u2u_5_6(operator_20_false_1_mux_2_nl) + 6'b000001;
  assign z_out_33 = nl_z_out_33[5:0];
  assign modulo_add_40_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_40_sva_1,
      mult_15_res_sva_1, mult_30_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) ,
      (fsm_output[4])});
  assign nl_acc_33_nl = ({modulo_add_40_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_33_nl = nl_acc_33_nl[32:0];
  assign z_out_34 = readslicef_33_32_1(acc_33_nl);
  assign modulo_add_41_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_41_sva_1,
      mult_14_res_sva_1, mult_25_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) ,
      (fsm_output[4])});
  assign nl_acc_34_nl = ({modulo_add_41_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_34_nl = nl_acc_34_nl[32:0];
  assign z_out_35 = readslicef_33_32_1(acc_34_nl);
  assign modulo_add_42_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_42_sva_1,
      mult_13_res_sva_1, mult_26_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) ,
      (fsm_output[4])});
  assign nl_acc_35_nl = ({modulo_add_42_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_35_nl = nl_acc_35_nl[32:0];
  assign z_out_36 = readslicef_33_32_1(acc_35_nl);
  assign modulo_sub_63_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_63_sva_1[30:0]),
      (modulo_sub_base_15_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_37 = ({1'b1 , modulo_sub_63_qif_mux_2_nl}) + p_sva;
  assign z_out_37 = nl_z_out_37[31:0];
  assign modulo_add_63_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_63_sva_1, mult_10_res_sva_1,
      fsm_output[2]);
  assign nl_acc_37_nl = ({modulo_add_63_qif_mux_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_37_nl = nl_acc_37_nl[32:0];
  assign z_out_38 = readslicef_33_32_1(acc_37_nl);
  assign modulo_sub_62_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_62_sva_1[30:0]),
      (modulo_sub_base_14_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_39 = ({1'b1 , modulo_sub_62_qif_mux_2_nl}) + p_sva;
  assign z_out_39 = nl_z_out_39[31:0];
  assign modulo_add_62_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_62_sva_1, mult_16_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_62_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_39_nl = ({modulo_add_62_qif_mux_2_nl , 1'b1}) + ({modulo_add_62_qif_mux_3_nl
      , 1'b1});
  assign acc_39_nl = nl_acc_39_nl[32:0];
  assign z_out_40 = readslicef_33_32_1(acc_39_nl);
  assign modulo_sub_61_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_61_sva_1[30:0]),
      (modulo_sub_base_13_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_41 = ({1'b1 , modulo_sub_61_qif_mux_2_nl}) + p_sva;
  assign z_out_41 = nl_z_out_41[31:0];
  assign modulo_add_61_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_61_sva_1, mult_17_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_61_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_1_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_41_nl = ({modulo_add_61_qif_mux_2_nl , 1'b1}) + ({modulo_add_61_qif_mux_3_nl
      , 1'b1});
  assign acc_41_nl = nl_acc_41_nl[32:0];
  assign z_out_42 = readslicef_33_32_1(acc_41_nl);
  assign modulo_sub_60_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_60_sva_1[30:0]),
      (modulo_sub_base_12_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_43 = ({1'b1 , modulo_sub_60_qif_mux_2_nl}) + p_sva;
  assign z_out_43 = nl_z_out_43[31:0];
  assign modulo_add_60_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_60_sva_1, mult_18_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_60_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_2_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_43_nl = ({modulo_add_60_qif_mux_2_nl , 1'b1}) + ({modulo_add_60_qif_mux_3_nl
      , 1'b1});
  assign acc_43_nl = nl_acc_43_nl[32:0];
  assign z_out_44 = readslicef_33_32_1(acc_43_nl);
  assign modulo_sub_59_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_59_sva_1[30:0]),
      (modulo_sub_base_11_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_45 = ({1'b1 , modulo_sub_59_qif_mux_2_nl}) + p_sva;
  assign z_out_45 = nl_z_out_45[31:0];
  assign modulo_add_59_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_59_sva_1, mult_19_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_59_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_3_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_45_nl = ({modulo_add_59_qif_mux_2_nl , 1'b1}) + ({modulo_add_59_qif_mux_3_nl
      , 1'b1});
  assign acc_45_nl = nl_acc_45_nl[32:0];
  assign z_out_46 = readslicef_33_32_1(acc_45_nl);
  assign modulo_sub_58_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_58_sva_1[30:0]),
      (modulo_sub_base_10_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_47 = ({1'b1 , modulo_sub_58_qif_mux_2_nl}) + p_sva;
  assign z_out_47 = nl_z_out_47[31:0];
  assign modulo_add_58_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_58_sva_1, mult_20_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_58_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_4_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_47_nl = ({modulo_add_58_qif_mux_2_nl , 1'b1}) + ({modulo_add_58_qif_mux_3_nl
      , 1'b1});
  assign acc_47_nl = nl_acc_47_nl[32:0];
  assign z_out_48 = readslicef_33_32_1(acc_47_nl);
  assign modulo_sub_57_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_57_sva_1[30:0]),
      (modulo_sub_base_9_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_49 = ({1'b1 , modulo_sub_57_qif_mux_2_nl}) + p_sva;
  assign z_out_49 = nl_z_out_49[31:0];
  assign modulo_sub_16_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_16_sva_1[30:0]),
      (modulo_sub_base_47_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_50 = ({1'b1 , modulo_sub_16_qif_mux_2_nl}) + p_sva;
  assign z_out_50 = nl_z_out_50[31:0];
  assign mult_12_if_mux1h_7_nl = MUX1HOT_v_32_3_2(mult_12_res_sva_1, mult_31_res_sva_1,
      mult_47_res_sva_1, {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6])});
  assign nl_acc_50_nl = ({mult_12_if_mux1h_7_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_50_nl = nl_acc_50_nl[32:0];
  assign z_out_51 = readslicef_33_32_1(acc_50_nl);
  assign modulo_sub_17_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_17_sva_1[30:0]),
      (modulo_sub_base_46_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_52 = ({1'b1 , modulo_sub_17_qif_mux_2_nl}) + p_sva;
  assign z_out_52 = nl_z_out_52[31:0];
  assign modulo_add_47_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_47_sva_1,
      mult_6_res_sva_1, mult_27_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) , (fsm_output[4])});
  assign nl_acc_52_nl = ({modulo_add_47_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_52_nl = nl_acc_52_nl[32:0];
  assign z_out_53 = readslicef_33_32_1(acc_52_nl);
  assign modulo_sub_18_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_18_sva_1[30:0]),
      (modulo_sub_base_45_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_54 = ({1'b1 , modulo_sub_18_qif_mux_2_nl}) + p_sva;
  assign z_out_54 = nl_z_out_54[31:0];
  assign modulo_add_54_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_54_sva_1, mult_21_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_54_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_5_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_54_nl = ({modulo_add_54_qif_mux_2_nl , 1'b1}) + ({modulo_add_54_qif_mux_3_nl
      , 1'b1});
  assign acc_54_nl = nl_acc_54_nl[32:0];
  assign z_out_55 = readslicef_33_32_1(acc_54_nl);
  assign modulo_sub_19_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_19_sva_1[30:0]),
      (modulo_sub_base_44_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_56 = ({1'b1 , modulo_sub_19_qif_mux_2_nl}) + p_sva;
  assign z_out_56 = nl_z_out_56[31:0];
  assign modulo_add_46_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_46_sva_1,
      mult_7_res_sva_1, mult_29_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) , (fsm_output[4])});
  assign nl_acc_56_nl = ({modulo_add_46_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_56_nl = nl_acc_56_nl[32:0];
  assign z_out_57 = readslicef_33_32_1(acc_56_nl);
  assign modulo_sub_20_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_20_sva_1[30:0]),
      (modulo_sub_base_43_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_58 = ({1'b1 , modulo_sub_20_qif_mux_2_nl}) + p_sva;
  assign z_out_58 = nl_z_out_58[31:0];
  assign modulo_add_45_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_45_sva_1,
      mult_8_res_sva_1, mult_24_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) , (fsm_output[4])});
  assign nl_acc_58_nl = ({modulo_add_45_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_58_nl = nl_acc_58_nl[32:0];
  assign z_out_59 = readslicef_33_32_1(acc_58_nl);
  assign modulo_sub_21_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_21_sva_1[30:0]),
      (modulo_sub_base_42_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_60 = ({1'b1 , modulo_sub_21_qif_mux_2_nl}) + p_sva;
  assign z_out_60 = nl_z_out_60[31:0];
  assign modulo_add_44_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_44_sva_1,
      mult_9_res_sva_1, mult_23_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) , (fsm_output[4])});
  assign nl_acc_60_nl = ({modulo_add_44_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_60_nl = nl_acc_60_nl[32:0];
  assign z_out_61 = readslicef_33_32_1(acc_60_nl);
  assign modulo_sub_22_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_22_sva_1[30:0]),
      (modulo_sub_base_41_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_62 = ({1'b1 , modulo_sub_22_qif_mux_2_nl}) + p_sva;
  assign z_out_62 = nl_z_out_62[31:0];
  assign modulo_add_43_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_43_sva_1,
      mult_11_res_sva_1, mult_28_res_sva_1, {(fsm_output[6]) , (fsm_output[2]) ,
      (fsm_output[4])});
  assign nl_acc_62_nl = ({modulo_add_43_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_62_nl = nl_acc_62_nl[32:0];
  assign z_out_63 = readslicef_33_32_1(acc_62_nl);
  assign modulo_sub_23_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_23_sva_1[30:0]),
      (modulo_sub_base_40_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_64 = ({1'b1 , modulo_sub_23_qif_mux_2_nl}) + p_sva;
  assign z_out_64 = nl_z_out_64[31:0];
  assign modulo_sub_56_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_56_sva_1[30:0]),
      (modulo_sub_base_8_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_65 = ({1'b1 , modulo_sub_56_qif_mux_2_nl}) + p_sva;
  assign z_out_65 = nl_z_out_65[31:0];
  assign modulo_sub_24_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_24_sva_1[30:0]),
      (modulo_sub_base_39_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_66 = ({1'b1 , modulo_sub_24_qif_mux_2_nl}) + p_sva;
  assign z_out_66 = nl_z_out_66[31:0];
  assign modulo_sub_55_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_55_sva_1[30:0]),
      (modulo_sub_base_7_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_67 = ({1'b1 , modulo_sub_55_qif_mux_2_nl}) + p_sva;
  assign z_out_67 = nl_z_out_67[31:0];
  assign modulo_sub_25_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_25_sva_1[30:0]),
      (modulo_sub_base_38_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_68 = ({1'b1 , modulo_sub_25_qif_mux_2_nl}) + p_sva;
  assign z_out_68 = nl_z_out_68[31:0];
  assign modulo_sub_54_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_54_sva_1[30:0]),
      (modulo_sub_base_6_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_69 = ({1'b1 , modulo_sub_54_qif_mux_2_nl}) + p_sva;
  assign z_out_69 = nl_z_out_69[31:0];
  assign modulo_sub_26_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_26_sva_1[30:0]),
      (modulo_sub_base_37_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_70 = ({1'b1 , modulo_sub_26_qif_mux_2_nl}) + p_sva;
  assign z_out_70 = nl_z_out_70[31:0];
  assign modulo_sub_53_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_53_sva_1[30:0]),
      (modulo_sub_base_5_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_71 = ({1'b1 , modulo_sub_53_qif_mux_2_nl}) + p_sva;
  assign z_out_71 = nl_z_out_71[31:0];
  assign modulo_sub_27_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_27_sva_1[30:0]),
      (modulo_sub_base_36_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_72 = ({1'b1 , modulo_sub_27_qif_mux_2_nl}) + p_sva;
  assign z_out_72 = nl_z_out_72[31:0];
  assign modulo_sub_52_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_52_sva_1[30:0]),
      (modulo_sub_base_4_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_73 = ({1'b1 , modulo_sub_52_qif_mux_2_nl}) + p_sva;
  assign z_out_73 = nl_z_out_73[31:0];
  assign modulo_sub_28_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_28_sva_1[30:0]),
      (modulo_sub_base_35_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_74 = ({1'b1 , modulo_sub_28_qif_mux_2_nl}) + p_sva;
  assign z_out_74 = nl_z_out_74[31:0];
  assign modulo_sub_51_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_51_sva_1[30:0]),
      (modulo_sub_base_3_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_75 = ({1'b1 , modulo_sub_51_qif_mux_2_nl}) + p_sva;
  assign z_out_75 = nl_z_out_75[31:0];
  assign modulo_sub_29_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_29_sva_1[30:0]),
      (modulo_sub_base_34_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_76 = ({1'b1 , modulo_sub_29_qif_mux_2_nl}) + p_sva;
  assign z_out_76 = nl_z_out_76[31:0];
  assign modulo_sub_50_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_50_sva_1[30:0]),
      (modulo_sub_base_2_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_77 = ({1'b1 , modulo_sub_50_qif_mux_2_nl}) + p_sva;
  assign z_out_77 = nl_z_out_77[31:0];
  assign modulo_sub_30_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_30_sva_1[30:0]),
      (modulo_sub_base_33_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_78 = ({1'b1 , modulo_sub_30_qif_mux_2_nl}) + p_sva;
  assign z_out_78 = nl_z_out_78[31:0];
  assign modulo_sub_48_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_48_sva_1[30:0]),
      (modulo_sub_base_1_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_79 = ({1'b1 , modulo_sub_48_qif_mux_2_nl}) + p_sva;
  assign z_out_79 = nl_z_out_79[31:0];
  assign modulo_sub_31_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_31_sva_1[30:0]),
      (modulo_sub_base_32_sva_1[30:0]), fsm_output[6]);
  assign nl_z_out_80 = ({1'b1 , modulo_sub_31_qif_mux_2_nl}) + p_sva;
  assign z_out_80 = nl_z_out_80[31:0];
  assign modulo_sub_49_qif_mux_2_nl = MUX_v_31_2_2((modulo_sub_base_49_sva_1[30:0]),
      (modulo_sub_base_sva_1[30:0]), fsm_output[2]);
  assign nl_z_out_81 = ({1'b1 , modulo_sub_49_qif_mux_2_nl}) + p_sva;
  assign z_out_81 = nl_z_out_81[31:0];
  assign modulo_add_57_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_57_sva_1, mult_22_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_57_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_6_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_81_nl = ({modulo_add_57_qif_mux_2_nl , 1'b1}) + ({modulo_add_57_qif_mux_3_nl
      , 1'b1});
  assign acc_81_nl = nl_acc_81_nl[32:0];
  assign z_out_82 = readslicef_33_32_1(acc_81_nl);
  assign modulo_add_55_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_55_sva_1, mult_23_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_55_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_7_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_82_nl = ({modulo_add_55_qif_mux_2_nl , 1'b1}) + ({modulo_add_55_qif_mux_3_nl
      , 1'b1});
  assign acc_82_nl = nl_acc_82_nl[32:0];
  assign z_out_83 = readslicef_33_32_1(acc_82_nl);
  assign modulo_add_56_qif_mux_2_nl = MUX_v_32_2_2(modulo_add_base_56_sva_1, mult_24_z_asn_itm_4,
      fsm_output[4]);
  assign modulo_add_56_qif_mux_3_nl = MUX_v_32_2_2((~ p_sva), (~ reg_mult_8_z_asn_itm_1_cse),
      fsm_output[4]);
  assign nl_acc_83_nl = ({modulo_add_56_qif_mux_2_nl , 1'b1}) + ({modulo_add_56_qif_mux_3_nl
      , 1'b1});
  assign acc_83_nl = nl_acc_83_nl[32:0];
  assign z_out_84 = readslicef_33_32_1(acc_83_nl);
  assign butterFly1_10_mux_7_cse = MUX_v_32_2_2(tmp_84_lpi_3_dfm_8, tmp_120_lpi_3_dfm_8,
      fsm_output[6]);
  assign butterFly1_10_mux_8_nl = MUX_v_32_2_2(mult_10_res_lpi_3_dfm_mx0, mult_44_res_lpi_3_dfm_mx0,
      fsm_output[6]);
  assign nl_z_out_85 = butterFly1_10_mux_7_cse + butterFly1_10_mux_8_nl;
  assign z_out_85 = nl_z_out_85[31:0];
  assign butterFly1_10_mux_10_nl = MUX_v_32_2_2((~ mult_10_res_lpi_3_dfm_mx0), (~
      mult_44_res_lpi_3_dfm_mx0), fsm_output[6]);
  assign nl_acc_85_nl = ({butterFly1_10_mux_7_cse , 1'b1}) + ({butterFly1_10_mux_10_nl
      , 1'b1});
  assign acc_85_nl = nl_acc_85_nl[32:0];
  assign z_out_86 = readslicef_33_32_1(acc_85_nl);
  assign modulo_add_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_sva_1, mult_32_res_sva_1,
      mult_48_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_86_nl = ({modulo_add_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_86_nl = nl_acc_86_nl[32:0];
  assign z_out_87 = readslicef_33_32_1(acc_86_nl);
  assign modulo_add_1_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_1_sva_1,
      mult_33_res_sva_1, mult_49_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_87_nl = ({modulo_add_1_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_87_nl = nl_acc_87_nl[32:0];
  assign z_out_88 = readslicef_33_32_1(acc_87_nl);
  assign modulo_add_2_qif_mux1h_2_nl = MUX1HOT_v_32_4_2(modulo_add_base_2_sva_1,
      modulo_add_base_16_sva_1, modulo_add_base_32_sva_1, modulo_add_base_52_sva_1,
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_88_nl = ({modulo_add_2_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_88_nl = nl_acc_88_nl[32:0];
  assign z_out_89 = readslicef_33_32_1(acc_88_nl);
  assign modulo_add_3_qif_mux1h_2_nl = MUX1HOT_v_32_4_2(modulo_add_base_3_sva_1,
      modulo_add_base_17_sva_1, modulo_add_base_33_sva_1, modulo_add_base_48_sva_1,
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_89_nl = ({modulo_add_3_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_89_nl = nl_acc_89_nl[32:0];
  assign z_out_90 = readslicef_33_32_1(acc_89_nl);
  assign modulo_add_4_qif_mux1h_2_nl = MUX1HOT_v_32_4_2(modulo_add_base_4_sva_1,
      modulo_add_base_18_sva_1, modulo_add_base_34_sva_1, modulo_add_base_50_sva_1,
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_90_nl = ({modulo_add_4_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_90_nl = nl_acc_90_nl[32:0];
  assign z_out_91 = readslicef_33_32_1(acc_90_nl);
  assign modulo_add_5_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_5_sva_1,
      mult_34_res_sva_1, mult_50_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_91_nl = ({modulo_add_5_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_91_nl = nl_acc_91_nl[32:0];
  assign z_out_92 = readslicef_33_32_1(acc_91_nl);
  assign modulo_add_6_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_6_sva_1,
      mult_35_res_sva_1, mult_51_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_92_nl = ({modulo_add_6_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_92_nl = nl_acc_92_nl[32:0];
  assign z_out_93 = readslicef_33_32_1(acc_92_nl);
  assign modulo_add_7_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_7_sva_1,
      mult_36_res_sva_1, mult_52_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_93_nl = ({modulo_add_7_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_93_nl = nl_acc_93_nl[32:0];
  assign z_out_94 = readslicef_33_32_1(acc_93_nl);
  assign modulo_add_8_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_8_sva_1,
      mult_37_res_sva_1, mult_53_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_94_nl = ({modulo_add_8_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_94_nl = nl_acc_94_nl[32:0];
  assign z_out_95 = readslicef_33_32_1(acc_94_nl);
  assign modulo_add_9_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_9_sva_1,
      mult_38_res_sva_1, mult_54_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_95_nl = ({modulo_add_9_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_95_nl = nl_acc_95_nl[32:0];
  assign z_out_96 = readslicef_33_32_1(acc_95_nl);
  assign modulo_add_10_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_10_sva_1,
      modulo_add_base_38_sva_1, mult_55_res_sva_1, {(fsm_output[2]) , (fsm_output[6])
      , (fsm_output[8])});
  assign nl_acc_96_nl = ({modulo_add_10_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_96_nl = nl_acc_96_nl[32:0];
  assign z_out_97 = readslicef_33_32_1(acc_96_nl);
  assign modulo_add_11_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_11_sva_1,
      modulo_add_base_37_sva_1, mult_56_res_sva_1, {(fsm_output[2]) , (fsm_output[6])
      , (fsm_output[8])});
  assign nl_acc_97_nl = ({modulo_add_11_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_97_nl = nl_acc_97_nl[32:0];
  assign z_out_98 = readslicef_33_32_1(acc_97_nl);
  assign modulo_add_12_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_12_sva_1,
      modulo_add_base_35_sva_1, mult_57_res_sva_1, {(fsm_output[2]) , (fsm_output[6])
      , (fsm_output[8])});
  assign nl_acc_98_nl = ({modulo_add_12_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_98_nl = nl_acc_98_nl[32:0];
  assign z_out_99 = readslicef_33_32_1(acc_98_nl);
  assign modulo_add_13_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_13_sva_1,
      modulo_add_base_36_sva_1, mult_58_res_sva_1, {(fsm_output[2]) , (fsm_output[6])
      , (fsm_output[8])});
  assign nl_acc_99_nl = ({modulo_add_13_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_99_nl = nl_acc_99_nl[32:0];
  assign z_out_100 = readslicef_33_32_1(acc_99_nl);
  assign modulo_add_14_qif_mux1h_2_nl = MUX1HOT_v_32_4_2(modulo_add_base_14_sva_1,
      modulo_add_base_19_sva_1, modulo_add_base_39_sva_1, modulo_add_base_49_sva_1,
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_100_nl = ({modulo_add_14_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) ,
      1'b1});
  assign acc_100_nl = nl_acc_100_nl[32:0];
  assign z_out_101 = readslicef_33_32_1(acc_100_nl);
  assign modulo_add_15_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_15_sva_1,
      mult_43_res_sva_1, mult_59_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) ,
      (fsm_output[8])});
  assign nl_acc_101_nl = ({modulo_add_15_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) ,
      1'b1});
  assign acc_101_nl = nl_acc_101_nl[32:0];
  assign z_out_102 = readslicef_33_32_1(acc_101_nl);
  assign mult_5_if_mux1h_7_nl = MUX1HOT_v_32_3_2(mult_5_res_sva_1, mult_41_res_sva_1,
      mult_60_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_102_nl = ({mult_5_if_mux1h_7_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_102_nl = nl_acc_102_nl[32:0];
  assign z_out_103 = readslicef_33_32_1(acc_102_nl);
  assign mult_3_if_mux1h_7_nl = MUX1HOT_v_32_3_2(mult_3_res_sva_1, mult_39_res_sva_1,
      mult_61_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_103_nl = ({mult_3_if_mux1h_7_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_103_nl = nl_acc_103_nl[32:0];
  assign z_out_104 = readslicef_33_32_1(acc_103_nl);
  assign mult_if_mux1h_7_nl = MUX1HOT_v_32_3_2(mult_res_sva_1, mult_46_res_sva_1,
      mult_62_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_104_nl = ({mult_if_mux1h_7_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_104_nl = nl_acc_104_nl[32:0];
  assign z_out_105 = readslicef_33_32_1(acc_104_nl);
  assign mult_16_if_mux_2_nl = MUX_v_32_2_2(mult_16_res_sva_1, mult_44_res_sva_1,
      fsm_output[6]);
  assign nl_acc_105_nl = ({mult_16_if_mux_2_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_105_nl = nl_acc_105_nl[32:0];
  assign z_out_106 = readslicef_33_32_1(acc_105_nl);
  assign mult_2_if_mux1h_7_nl = MUX1HOT_v_32_3_2(mult_2_res_sva_1, mult_45_res_sva_1,
      mult_63_res_sva_1, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[8])});
  assign nl_acc_106_nl = ({mult_2_if_mux1h_7_nl , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_106_nl = nl_acc_106_nl[32:0];
  assign z_out_107 = readslicef_33_32_1(acc_106_nl);
  assign modulo_add_51_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_51_sva_1,
      mult_4_res_sva_1, mult_42_res_sva_1, {(fsm_output[8]) , (fsm_output[2]) , (fsm_output[6])});
  assign nl_acc_107_nl = ({modulo_add_51_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) ,
      1'b1});
  assign acc_107_nl = nl_acc_107_nl[32:0];
  assign z_out_108 = readslicef_33_32_1(acc_107_nl);
  assign modulo_add_53_qif_mux1h_2_nl = MUX1HOT_v_32_3_2(modulo_add_base_53_sva_1,
      mult_1_res_sva_1, mult_40_res_sva_1, {(fsm_output[8]) , (fsm_output[2]) , (fsm_output[6])});
  assign nl_acc_108_nl = ({modulo_add_53_qif_mux1h_2_nl , 1'b1}) + ({(~ p_sva) ,
      1'b1});
  assign acc_108_nl = nl_acc_108_nl[32:0];
  assign z_out_109 = readslicef_33_32_1(acc_108_nl);

  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [30:0] MUX1HOT_v_31_4_2;
    input [30:0] input_3;
    input [30:0] input_2;
    input [30:0] input_1;
    input [30:0] input_0;
    input [3:0] sel;
    reg [30:0] result;
  begin
    result = input_0 & {31{sel[0]}};
    result = result | ( input_1 & {31{sel[1]}});
    result = result | ( input_2 & {31{sel[2]}});
    result = result | ( input_3 & {31{sel[3]}});
    MUX1HOT_v_31_4_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_12_2;
    input [31:0] input_11;
    input [31:0] input_10;
    input [31:0] input_9;
    input [31:0] input_8;
    input [31:0] input_7;
    input [31:0] input_6;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [11:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    result = result | ( input_4 & {32{sel[4]}});
    result = result | ( input_5 & {32{sel[5]}});
    result = result | ( input_6 & {32{sel[6]}});
    result = result | ( input_7 & {32{sel[7]}});
    result = result | ( input_8 & {32{sel[8]}});
    result = result | ( input_9 & {32{sel[9]}});
    result = result | ( input_10 & {32{sel[10]}});
    result = result | ( input_11 & {32{sel[11]}});
    MUX1HOT_v_32_12_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_4_2;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [3:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    MUX1HOT_v_32_4_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_5_2;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [4:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    result = result | ( input_4 & {32{sel[4]}});
    MUX1HOT_v_32_5_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_6_2;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [5:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    result = result | ( input_4 & {32{sel[4]}});
    result = result | ( input_5 & {32{sel[5]}});
    MUX1HOT_v_32_6_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_8_2;
    input [31:0] input_7;
    input [31:0] input_6;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [7:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    result = result | ( input_4 & {32{sel[4]}});
    result = result | ( input_5 & {32{sel[5]}});
    result = result | ( input_6 & {32{sel[6]}});
    result = result | ( input_7 & {32{sel[7]}});
    MUX1HOT_v_32_8_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_9_2;
    input [31:0] input_8;
    input [31:0] input_7;
    input [31:0] input_6;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [8:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    result = result | ( input_3 & {32{sel[3]}});
    result = result | ( input_4 & {32{sel[4]}});
    result = result | ( input_5 & {32{sel[5]}});
    result = result | ( input_6 & {32{sel[6]}});
    result = result | ( input_7 & {32{sel[7]}});
    result = result | ( input_8 & {32{sel[8]}});
    MUX1HOT_v_32_9_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_4_2;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [3:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [30:0] MUX_v_31_2_2;
    input [30:0] input_0;
    input [30:0] input_1;
    input [0:0] sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_33_1_32;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 32;
    readslicef_33_1_32 = tmp[0:0];
  end
  endfunction


  function automatic [31:0] readslicef_33_32_1;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_33_32_1 = tmp[31:0];
  end
  endfunction


  function automatic [0:0] readslicef_34_1_33;
    input [33:0] vector;
    reg [33:0] tmp;
  begin
    tmp = vector >> 33;
    readslicef_34_1_33 = tmp[0:0];
  end
  endfunction


  function automatic [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function automatic [32:0] conv_u2u_32_33 ;
    input [31:0]  vector ;
  begin
    conv_u2u_32_33 = {1'b0, vector};
  end
  endfunction


  function automatic [33:0] conv_u2u_33_34 ;
    input [32:0]  vector ;
  begin
    conv_u2u_33_34 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    peaseNTT
// ------------------------------------------------------------------


module peaseNTT (
  clk, rst, xt_rsc_0_0_adra, xt_rsc_0_0_da, xt_rsc_0_0_wea, xt_rsc_0_0_qa, xt_rsc_triosy_0_0_lz,
      xt_rsc_0_1_adra, xt_rsc_0_1_da, xt_rsc_0_1_wea, xt_rsc_0_1_qa, xt_rsc_triosy_0_1_lz,
      xt_rsc_0_2_adra, xt_rsc_0_2_da, xt_rsc_0_2_wea, xt_rsc_0_2_qa, xt_rsc_triosy_0_2_lz,
      xt_rsc_0_3_adra, xt_rsc_0_3_da, xt_rsc_0_3_wea, xt_rsc_0_3_qa, xt_rsc_triosy_0_3_lz,
      xt_rsc_0_4_adra, xt_rsc_0_4_da, xt_rsc_0_4_wea, xt_rsc_0_4_qa, xt_rsc_triosy_0_4_lz,
      xt_rsc_0_5_adra, xt_rsc_0_5_da, xt_rsc_0_5_wea, xt_rsc_0_5_qa, xt_rsc_triosy_0_5_lz,
      xt_rsc_0_6_adra, xt_rsc_0_6_da, xt_rsc_0_6_wea, xt_rsc_0_6_qa, xt_rsc_triosy_0_6_lz,
      xt_rsc_0_7_adra, xt_rsc_0_7_da, xt_rsc_0_7_wea, xt_rsc_0_7_qa, xt_rsc_triosy_0_7_lz,
      xt_rsc_0_8_adra, xt_rsc_0_8_da, xt_rsc_0_8_wea, xt_rsc_0_8_qa, xt_rsc_triosy_0_8_lz,
      xt_rsc_0_9_adra, xt_rsc_0_9_da, xt_rsc_0_9_wea, xt_rsc_0_9_qa, xt_rsc_triosy_0_9_lz,
      xt_rsc_0_10_adra, xt_rsc_0_10_da, xt_rsc_0_10_wea, xt_rsc_0_10_qa, xt_rsc_triosy_0_10_lz,
      xt_rsc_0_11_adra, xt_rsc_0_11_da, xt_rsc_0_11_wea, xt_rsc_0_11_qa, xt_rsc_triosy_0_11_lz,
      xt_rsc_0_12_adra, xt_rsc_0_12_da, xt_rsc_0_12_wea, xt_rsc_0_12_qa, xt_rsc_triosy_0_12_lz,
      xt_rsc_0_13_adra, xt_rsc_0_13_da, xt_rsc_0_13_wea, xt_rsc_0_13_qa, xt_rsc_triosy_0_13_lz,
      xt_rsc_0_14_adra, xt_rsc_0_14_da, xt_rsc_0_14_wea, xt_rsc_0_14_qa, xt_rsc_triosy_0_14_lz,
      xt_rsc_0_15_adra, xt_rsc_0_15_da, xt_rsc_0_15_wea, xt_rsc_0_15_qa, xt_rsc_triosy_0_15_lz,
      xt_rsc_0_16_adra, xt_rsc_0_16_da, xt_rsc_0_16_wea, xt_rsc_0_16_qa, xt_rsc_triosy_0_16_lz,
      xt_rsc_0_17_adra, xt_rsc_0_17_da, xt_rsc_0_17_wea, xt_rsc_0_17_qa, xt_rsc_triosy_0_17_lz,
      xt_rsc_0_18_adra, xt_rsc_0_18_da, xt_rsc_0_18_wea, xt_rsc_0_18_qa, xt_rsc_triosy_0_18_lz,
      xt_rsc_0_19_adra, xt_rsc_0_19_da, xt_rsc_0_19_wea, xt_rsc_0_19_qa, xt_rsc_triosy_0_19_lz,
      xt_rsc_0_20_adra, xt_rsc_0_20_da, xt_rsc_0_20_wea, xt_rsc_0_20_qa, xt_rsc_triosy_0_20_lz,
      xt_rsc_0_21_adra, xt_rsc_0_21_da, xt_rsc_0_21_wea, xt_rsc_0_21_qa, xt_rsc_triosy_0_21_lz,
      xt_rsc_0_22_adra, xt_rsc_0_22_da, xt_rsc_0_22_wea, xt_rsc_0_22_qa, xt_rsc_triosy_0_22_lz,
      xt_rsc_0_23_adra, xt_rsc_0_23_da, xt_rsc_0_23_wea, xt_rsc_0_23_qa, xt_rsc_triosy_0_23_lz,
      xt_rsc_0_24_adra, xt_rsc_0_24_da, xt_rsc_0_24_wea, xt_rsc_0_24_qa, xt_rsc_triosy_0_24_lz,
      xt_rsc_0_25_adra, xt_rsc_0_25_da, xt_rsc_0_25_wea, xt_rsc_0_25_qa, xt_rsc_triosy_0_25_lz,
      xt_rsc_0_26_adra, xt_rsc_0_26_da, xt_rsc_0_26_wea, xt_rsc_0_26_qa, xt_rsc_triosy_0_26_lz,
      xt_rsc_0_27_adra, xt_rsc_0_27_da, xt_rsc_0_27_wea, xt_rsc_0_27_qa, xt_rsc_triosy_0_27_lz,
      xt_rsc_0_28_adra, xt_rsc_0_28_da, xt_rsc_0_28_wea, xt_rsc_0_28_qa, xt_rsc_triosy_0_28_lz,
      xt_rsc_0_29_adra, xt_rsc_0_29_da, xt_rsc_0_29_wea, xt_rsc_0_29_qa, xt_rsc_triosy_0_29_lz,
      xt_rsc_0_30_adra, xt_rsc_0_30_da, xt_rsc_0_30_wea, xt_rsc_0_30_qa, xt_rsc_triosy_0_30_lz,
      xt_rsc_0_31_adra, xt_rsc_0_31_da, xt_rsc_0_31_wea, xt_rsc_0_31_qa, xt_rsc_triosy_0_31_lz,
      xt_rsc_1_0_adra, xt_rsc_1_0_da, xt_rsc_1_0_wea, xt_rsc_1_0_qa, xt_rsc_triosy_1_0_lz,
      xt_rsc_1_1_adra, xt_rsc_1_1_da, xt_rsc_1_1_wea, xt_rsc_1_1_qa, xt_rsc_triosy_1_1_lz,
      xt_rsc_1_2_adra, xt_rsc_1_2_da, xt_rsc_1_2_wea, xt_rsc_1_2_qa, xt_rsc_triosy_1_2_lz,
      xt_rsc_1_3_adra, xt_rsc_1_3_da, xt_rsc_1_3_wea, xt_rsc_1_3_qa, xt_rsc_triosy_1_3_lz,
      xt_rsc_1_4_adra, xt_rsc_1_4_da, xt_rsc_1_4_wea, xt_rsc_1_4_qa, xt_rsc_triosy_1_4_lz,
      xt_rsc_1_5_adra, xt_rsc_1_5_da, xt_rsc_1_5_wea, xt_rsc_1_5_qa, xt_rsc_triosy_1_5_lz,
      xt_rsc_1_6_adra, xt_rsc_1_6_da, xt_rsc_1_6_wea, xt_rsc_1_6_qa, xt_rsc_triosy_1_6_lz,
      xt_rsc_1_7_adra, xt_rsc_1_7_da, xt_rsc_1_7_wea, xt_rsc_1_7_qa, xt_rsc_triosy_1_7_lz,
      xt_rsc_1_8_adra, xt_rsc_1_8_da, xt_rsc_1_8_wea, xt_rsc_1_8_qa, xt_rsc_triosy_1_8_lz,
      xt_rsc_1_9_adra, xt_rsc_1_9_da, xt_rsc_1_9_wea, xt_rsc_1_9_qa, xt_rsc_triosy_1_9_lz,
      xt_rsc_1_10_adra, xt_rsc_1_10_da, xt_rsc_1_10_wea, xt_rsc_1_10_qa, xt_rsc_triosy_1_10_lz,
      xt_rsc_1_11_adra, xt_rsc_1_11_da, xt_rsc_1_11_wea, xt_rsc_1_11_qa, xt_rsc_triosy_1_11_lz,
      xt_rsc_1_12_adra, xt_rsc_1_12_da, xt_rsc_1_12_wea, xt_rsc_1_12_qa, xt_rsc_triosy_1_12_lz,
      xt_rsc_1_13_adra, xt_rsc_1_13_da, xt_rsc_1_13_wea, xt_rsc_1_13_qa, xt_rsc_triosy_1_13_lz,
      xt_rsc_1_14_adra, xt_rsc_1_14_da, xt_rsc_1_14_wea, xt_rsc_1_14_qa, xt_rsc_triosy_1_14_lz,
      xt_rsc_1_15_adra, xt_rsc_1_15_da, xt_rsc_1_15_wea, xt_rsc_1_15_qa, xt_rsc_triosy_1_15_lz,
      xt_rsc_1_16_adra, xt_rsc_1_16_da, xt_rsc_1_16_wea, xt_rsc_1_16_qa, xt_rsc_triosy_1_16_lz,
      xt_rsc_1_17_adra, xt_rsc_1_17_da, xt_rsc_1_17_wea, xt_rsc_1_17_qa, xt_rsc_triosy_1_17_lz,
      xt_rsc_1_18_adra, xt_rsc_1_18_da, xt_rsc_1_18_wea, xt_rsc_1_18_qa, xt_rsc_triosy_1_18_lz,
      xt_rsc_1_19_adra, xt_rsc_1_19_da, xt_rsc_1_19_wea, xt_rsc_1_19_qa, xt_rsc_triosy_1_19_lz,
      xt_rsc_1_20_adra, xt_rsc_1_20_da, xt_rsc_1_20_wea, xt_rsc_1_20_qa, xt_rsc_triosy_1_20_lz,
      xt_rsc_1_21_adra, xt_rsc_1_21_da, xt_rsc_1_21_wea, xt_rsc_1_21_qa, xt_rsc_triosy_1_21_lz,
      xt_rsc_1_22_adra, xt_rsc_1_22_da, xt_rsc_1_22_wea, xt_rsc_1_22_qa, xt_rsc_triosy_1_22_lz,
      xt_rsc_1_23_adra, xt_rsc_1_23_da, xt_rsc_1_23_wea, xt_rsc_1_23_qa, xt_rsc_triosy_1_23_lz,
      xt_rsc_1_24_adra, xt_rsc_1_24_da, xt_rsc_1_24_wea, xt_rsc_1_24_qa, xt_rsc_triosy_1_24_lz,
      xt_rsc_1_25_adra, xt_rsc_1_25_da, xt_rsc_1_25_wea, xt_rsc_1_25_qa, xt_rsc_triosy_1_25_lz,
      xt_rsc_1_26_adra, xt_rsc_1_26_da, xt_rsc_1_26_wea, xt_rsc_1_26_qa, xt_rsc_triosy_1_26_lz,
      xt_rsc_1_27_adra, xt_rsc_1_27_da, xt_rsc_1_27_wea, xt_rsc_1_27_qa, xt_rsc_triosy_1_27_lz,
      xt_rsc_1_28_adra, xt_rsc_1_28_da, xt_rsc_1_28_wea, xt_rsc_1_28_qa, xt_rsc_triosy_1_28_lz,
      xt_rsc_1_29_adra, xt_rsc_1_29_da, xt_rsc_1_29_wea, xt_rsc_1_29_qa, xt_rsc_triosy_1_29_lz,
      xt_rsc_1_30_adra, xt_rsc_1_30_da, xt_rsc_1_30_wea, xt_rsc_1_30_qa, xt_rsc_triosy_1_30_lz,
      xt_rsc_1_31_adra, xt_rsc_1_31_da, xt_rsc_1_31_wea, xt_rsc_1_31_qa, xt_rsc_triosy_1_31_lz,
      p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz, twiddle_rsc_0_0_s_tdone,
      twiddle_rsc_0_0_tr_write_done, twiddle_rsc_0_0_RREADY, twiddle_rsc_0_0_RVALID,
      twiddle_rsc_0_0_RUSER, twiddle_rsc_0_0_RLAST, twiddle_rsc_0_0_RRESP, twiddle_rsc_0_0_RDATA,
      twiddle_rsc_0_0_RID, twiddle_rsc_0_0_ARREADY, twiddle_rsc_0_0_ARVALID, twiddle_rsc_0_0_ARUSER,
      twiddle_rsc_0_0_ARREGION, twiddle_rsc_0_0_ARQOS, twiddle_rsc_0_0_ARPROT, twiddle_rsc_0_0_ARCACHE,
      twiddle_rsc_0_0_ARLOCK, twiddle_rsc_0_0_ARBURST, twiddle_rsc_0_0_ARSIZE, twiddle_rsc_0_0_ARLEN,
      twiddle_rsc_0_0_ARADDR, twiddle_rsc_0_0_ARID, twiddle_rsc_0_0_BREADY, twiddle_rsc_0_0_BVALID,
      twiddle_rsc_0_0_BUSER, twiddle_rsc_0_0_BRESP, twiddle_rsc_0_0_BID, twiddle_rsc_0_0_WREADY,
      twiddle_rsc_0_0_WVALID, twiddle_rsc_0_0_WUSER, twiddle_rsc_0_0_WLAST, twiddle_rsc_0_0_WSTRB,
      twiddle_rsc_0_0_WDATA, twiddle_rsc_0_0_AWREADY, twiddle_rsc_0_0_AWVALID, twiddle_rsc_0_0_AWUSER,
      twiddle_rsc_0_0_AWREGION, twiddle_rsc_0_0_AWQOS, twiddle_rsc_0_0_AWPROT, twiddle_rsc_0_0_AWCACHE,
      twiddle_rsc_0_0_AWLOCK, twiddle_rsc_0_0_AWBURST, twiddle_rsc_0_0_AWSIZE, twiddle_rsc_0_0_AWLEN,
      twiddle_rsc_0_0_AWADDR, twiddle_rsc_0_0_AWID, twiddle_rsc_triosy_0_0_lz, twiddle_rsc_0_1_s_tdone,
      twiddle_rsc_0_1_tr_write_done, twiddle_rsc_0_1_RREADY, twiddle_rsc_0_1_RVALID,
      twiddle_rsc_0_1_RUSER, twiddle_rsc_0_1_RLAST, twiddle_rsc_0_1_RRESP, twiddle_rsc_0_1_RDATA,
      twiddle_rsc_0_1_RID, twiddle_rsc_0_1_ARREADY, twiddle_rsc_0_1_ARVALID, twiddle_rsc_0_1_ARUSER,
      twiddle_rsc_0_1_ARREGION, twiddle_rsc_0_1_ARQOS, twiddle_rsc_0_1_ARPROT, twiddle_rsc_0_1_ARCACHE,
      twiddle_rsc_0_1_ARLOCK, twiddle_rsc_0_1_ARBURST, twiddle_rsc_0_1_ARSIZE, twiddle_rsc_0_1_ARLEN,
      twiddle_rsc_0_1_ARADDR, twiddle_rsc_0_1_ARID, twiddle_rsc_0_1_BREADY, twiddle_rsc_0_1_BVALID,
      twiddle_rsc_0_1_BUSER, twiddle_rsc_0_1_BRESP, twiddle_rsc_0_1_BID, twiddle_rsc_0_1_WREADY,
      twiddle_rsc_0_1_WVALID, twiddle_rsc_0_1_WUSER, twiddle_rsc_0_1_WLAST, twiddle_rsc_0_1_WSTRB,
      twiddle_rsc_0_1_WDATA, twiddle_rsc_0_1_AWREADY, twiddle_rsc_0_1_AWVALID, twiddle_rsc_0_1_AWUSER,
      twiddle_rsc_0_1_AWREGION, twiddle_rsc_0_1_AWQOS, twiddle_rsc_0_1_AWPROT, twiddle_rsc_0_1_AWCACHE,
      twiddle_rsc_0_1_AWLOCK, twiddle_rsc_0_1_AWBURST, twiddle_rsc_0_1_AWSIZE, twiddle_rsc_0_1_AWLEN,
      twiddle_rsc_0_1_AWADDR, twiddle_rsc_0_1_AWID, twiddle_rsc_triosy_0_1_lz, twiddle_rsc_0_2_s_tdone,
      twiddle_rsc_0_2_tr_write_done, twiddle_rsc_0_2_RREADY, twiddle_rsc_0_2_RVALID,
      twiddle_rsc_0_2_RUSER, twiddle_rsc_0_2_RLAST, twiddle_rsc_0_2_RRESP, twiddle_rsc_0_2_RDATA,
      twiddle_rsc_0_2_RID, twiddle_rsc_0_2_ARREADY, twiddle_rsc_0_2_ARVALID, twiddle_rsc_0_2_ARUSER,
      twiddle_rsc_0_2_ARREGION, twiddle_rsc_0_2_ARQOS, twiddle_rsc_0_2_ARPROT, twiddle_rsc_0_2_ARCACHE,
      twiddle_rsc_0_2_ARLOCK, twiddle_rsc_0_2_ARBURST, twiddle_rsc_0_2_ARSIZE, twiddle_rsc_0_2_ARLEN,
      twiddle_rsc_0_2_ARADDR, twiddle_rsc_0_2_ARID, twiddle_rsc_0_2_BREADY, twiddle_rsc_0_2_BVALID,
      twiddle_rsc_0_2_BUSER, twiddle_rsc_0_2_BRESP, twiddle_rsc_0_2_BID, twiddle_rsc_0_2_WREADY,
      twiddle_rsc_0_2_WVALID, twiddle_rsc_0_2_WUSER, twiddle_rsc_0_2_WLAST, twiddle_rsc_0_2_WSTRB,
      twiddle_rsc_0_2_WDATA, twiddle_rsc_0_2_AWREADY, twiddle_rsc_0_2_AWVALID, twiddle_rsc_0_2_AWUSER,
      twiddle_rsc_0_2_AWREGION, twiddle_rsc_0_2_AWQOS, twiddle_rsc_0_2_AWPROT, twiddle_rsc_0_2_AWCACHE,
      twiddle_rsc_0_2_AWLOCK, twiddle_rsc_0_2_AWBURST, twiddle_rsc_0_2_AWSIZE, twiddle_rsc_0_2_AWLEN,
      twiddle_rsc_0_2_AWADDR, twiddle_rsc_0_2_AWID, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_0_3_s_tdone,
      twiddle_rsc_0_3_tr_write_done, twiddle_rsc_0_3_RREADY, twiddle_rsc_0_3_RVALID,
      twiddle_rsc_0_3_RUSER, twiddle_rsc_0_3_RLAST, twiddle_rsc_0_3_RRESP, twiddle_rsc_0_3_RDATA,
      twiddle_rsc_0_3_RID, twiddle_rsc_0_3_ARREADY, twiddle_rsc_0_3_ARVALID, twiddle_rsc_0_3_ARUSER,
      twiddle_rsc_0_3_ARREGION, twiddle_rsc_0_3_ARQOS, twiddle_rsc_0_3_ARPROT, twiddle_rsc_0_3_ARCACHE,
      twiddle_rsc_0_3_ARLOCK, twiddle_rsc_0_3_ARBURST, twiddle_rsc_0_3_ARSIZE, twiddle_rsc_0_3_ARLEN,
      twiddle_rsc_0_3_ARADDR, twiddle_rsc_0_3_ARID, twiddle_rsc_0_3_BREADY, twiddle_rsc_0_3_BVALID,
      twiddle_rsc_0_3_BUSER, twiddle_rsc_0_3_BRESP, twiddle_rsc_0_3_BID, twiddle_rsc_0_3_WREADY,
      twiddle_rsc_0_3_WVALID, twiddle_rsc_0_3_WUSER, twiddle_rsc_0_3_WLAST, twiddle_rsc_0_3_WSTRB,
      twiddle_rsc_0_3_WDATA, twiddle_rsc_0_3_AWREADY, twiddle_rsc_0_3_AWVALID, twiddle_rsc_0_3_AWUSER,
      twiddle_rsc_0_3_AWREGION, twiddle_rsc_0_3_AWQOS, twiddle_rsc_0_3_AWPROT, twiddle_rsc_0_3_AWCACHE,
      twiddle_rsc_0_3_AWLOCK, twiddle_rsc_0_3_AWBURST, twiddle_rsc_0_3_AWSIZE, twiddle_rsc_0_3_AWLEN,
      twiddle_rsc_0_3_AWADDR, twiddle_rsc_0_3_AWID, twiddle_rsc_triosy_0_3_lz, twiddle_rsc_0_4_s_tdone,
      twiddle_rsc_0_4_tr_write_done, twiddle_rsc_0_4_RREADY, twiddle_rsc_0_4_RVALID,
      twiddle_rsc_0_4_RUSER, twiddle_rsc_0_4_RLAST, twiddle_rsc_0_4_RRESP, twiddle_rsc_0_4_RDATA,
      twiddle_rsc_0_4_RID, twiddle_rsc_0_4_ARREADY, twiddle_rsc_0_4_ARVALID, twiddle_rsc_0_4_ARUSER,
      twiddle_rsc_0_4_ARREGION, twiddle_rsc_0_4_ARQOS, twiddle_rsc_0_4_ARPROT, twiddle_rsc_0_4_ARCACHE,
      twiddle_rsc_0_4_ARLOCK, twiddle_rsc_0_4_ARBURST, twiddle_rsc_0_4_ARSIZE, twiddle_rsc_0_4_ARLEN,
      twiddle_rsc_0_4_ARADDR, twiddle_rsc_0_4_ARID, twiddle_rsc_0_4_BREADY, twiddle_rsc_0_4_BVALID,
      twiddle_rsc_0_4_BUSER, twiddle_rsc_0_4_BRESP, twiddle_rsc_0_4_BID, twiddle_rsc_0_4_WREADY,
      twiddle_rsc_0_4_WVALID, twiddle_rsc_0_4_WUSER, twiddle_rsc_0_4_WLAST, twiddle_rsc_0_4_WSTRB,
      twiddle_rsc_0_4_WDATA, twiddle_rsc_0_4_AWREADY, twiddle_rsc_0_4_AWVALID, twiddle_rsc_0_4_AWUSER,
      twiddle_rsc_0_4_AWREGION, twiddle_rsc_0_4_AWQOS, twiddle_rsc_0_4_AWPROT, twiddle_rsc_0_4_AWCACHE,
      twiddle_rsc_0_4_AWLOCK, twiddle_rsc_0_4_AWBURST, twiddle_rsc_0_4_AWSIZE, twiddle_rsc_0_4_AWLEN,
      twiddle_rsc_0_4_AWADDR, twiddle_rsc_0_4_AWID, twiddle_rsc_triosy_0_4_lz, twiddle_rsc_0_5_s_tdone,
      twiddle_rsc_0_5_tr_write_done, twiddle_rsc_0_5_RREADY, twiddle_rsc_0_5_RVALID,
      twiddle_rsc_0_5_RUSER, twiddle_rsc_0_5_RLAST, twiddle_rsc_0_5_RRESP, twiddle_rsc_0_5_RDATA,
      twiddle_rsc_0_5_RID, twiddle_rsc_0_5_ARREADY, twiddle_rsc_0_5_ARVALID, twiddle_rsc_0_5_ARUSER,
      twiddle_rsc_0_5_ARREGION, twiddle_rsc_0_5_ARQOS, twiddle_rsc_0_5_ARPROT, twiddle_rsc_0_5_ARCACHE,
      twiddle_rsc_0_5_ARLOCK, twiddle_rsc_0_5_ARBURST, twiddle_rsc_0_5_ARSIZE, twiddle_rsc_0_5_ARLEN,
      twiddle_rsc_0_5_ARADDR, twiddle_rsc_0_5_ARID, twiddle_rsc_0_5_BREADY, twiddle_rsc_0_5_BVALID,
      twiddle_rsc_0_5_BUSER, twiddle_rsc_0_5_BRESP, twiddle_rsc_0_5_BID, twiddle_rsc_0_5_WREADY,
      twiddle_rsc_0_5_WVALID, twiddle_rsc_0_5_WUSER, twiddle_rsc_0_5_WLAST, twiddle_rsc_0_5_WSTRB,
      twiddle_rsc_0_5_WDATA, twiddle_rsc_0_5_AWREADY, twiddle_rsc_0_5_AWVALID, twiddle_rsc_0_5_AWUSER,
      twiddle_rsc_0_5_AWREGION, twiddle_rsc_0_5_AWQOS, twiddle_rsc_0_5_AWPROT, twiddle_rsc_0_5_AWCACHE,
      twiddle_rsc_0_5_AWLOCK, twiddle_rsc_0_5_AWBURST, twiddle_rsc_0_5_AWSIZE, twiddle_rsc_0_5_AWLEN,
      twiddle_rsc_0_5_AWADDR, twiddle_rsc_0_5_AWID, twiddle_rsc_triosy_0_5_lz, twiddle_rsc_0_6_s_tdone,
      twiddle_rsc_0_6_tr_write_done, twiddle_rsc_0_6_RREADY, twiddle_rsc_0_6_RVALID,
      twiddle_rsc_0_6_RUSER, twiddle_rsc_0_6_RLAST, twiddle_rsc_0_6_RRESP, twiddle_rsc_0_6_RDATA,
      twiddle_rsc_0_6_RID, twiddle_rsc_0_6_ARREADY, twiddle_rsc_0_6_ARVALID, twiddle_rsc_0_6_ARUSER,
      twiddle_rsc_0_6_ARREGION, twiddle_rsc_0_6_ARQOS, twiddle_rsc_0_6_ARPROT, twiddle_rsc_0_6_ARCACHE,
      twiddle_rsc_0_6_ARLOCK, twiddle_rsc_0_6_ARBURST, twiddle_rsc_0_6_ARSIZE, twiddle_rsc_0_6_ARLEN,
      twiddle_rsc_0_6_ARADDR, twiddle_rsc_0_6_ARID, twiddle_rsc_0_6_BREADY, twiddle_rsc_0_6_BVALID,
      twiddle_rsc_0_6_BUSER, twiddle_rsc_0_6_BRESP, twiddle_rsc_0_6_BID, twiddle_rsc_0_6_WREADY,
      twiddle_rsc_0_6_WVALID, twiddle_rsc_0_6_WUSER, twiddle_rsc_0_6_WLAST, twiddle_rsc_0_6_WSTRB,
      twiddle_rsc_0_6_WDATA, twiddle_rsc_0_6_AWREADY, twiddle_rsc_0_6_AWVALID, twiddle_rsc_0_6_AWUSER,
      twiddle_rsc_0_6_AWREGION, twiddle_rsc_0_6_AWQOS, twiddle_rsc_0_6_AWPROT, twiddle_rsc_0_6_AWCACHE,
      twiddle_rsc_0_6_AWLOCK, twiddle_rsc_0_6_AWBURST, twiddle_rsc_0_6_AWSIZE, twiddle_rsc_0_6_AWLEN,
      twiddle_rsc_0_6_AWADDR, twiddle_rsc_0_6_AWID, twiddle_rsc_triosy_0_6_lz, twiddle_rsc_0_7_s_tdone,
      twiddle_rsc_0_7_tr_write_done, twiddle_rsc_0_7_RREADY, twiddle_rsc_0_7_RVALID,
      twiddle_rsc_0_7_RUSER, twiddle_rsc_0_7_RLAST, twiddle_rsc_0_7_RRESP, twiddle_rsc_0_7_RDATA,
      twiddle_rsc_0_7_RID, twiddle_rsc_0_7_ARREADY, twiddle_rsc_0_7_ARVALID, twiddle_rsc_0_7_ARUSER,
      twiddle_rsc_0_7_ARREGION, twiddle_rsc_0_7_ARQOS, twiddle_rsc_0_7_ARPROT, twiddle_rsc_0_7_ARCACHE,
      twiddle_rsc_0_7_ARLOCK, twiddle_rsc_0_7_ARBURST, twiddle_rsc_0_7_ARSIZE, twiddle_rsc_0_7_ARLEN,
      twiddle_rsc_0_7_ARADDR, twiddle_rsc_0_7_ARID, twiddle_rsc_0_7_BREADY, twiddle_rsc_0_7_BVALID,
      twiddle_rsc_0_7_BUSER, twiddle_rsc_0_7_BRESP, twiddle_rsc_0_7_BID, twiddle_rsc_0_7_WREADY,
      twiddle_rsc_0_7_WVALID, twiddle_rsc_0_7_WUSER, twiddle_rsc_0_7_WLAST, twiddle_rsc_0_7_WSTRB,
      twiddle_rsc_0_7_WDATA, twiddle_rsc_0_7_AWREADY, twiddle_rsc_0_7_AWVALID, twiddle_rsc_0_7_AWUSER,
      twiddle_rsc_0_7_AWREGION, twiddle_rsc_0_7_AWQOS, twiddle_rsc_0_7_AWPROT, twiddle_rsc_0_7_AWCACHE,
      twiddle_rsc_0_7_AWLOCK, twiddle_rsc_0_7_AWBURST, twiddle_rsc_0_7_AWSIZE, twiddle_rsc_0_7_AWLEN,
      twiddle_rsc_0_7_AWADDR, twiddle_rsc_0_7_AWID, twiddle_rsc_triosy_0_7_lz, twiddle_rsc_0_8_s_tdone,
      twiddle_rsc_0_8_tr_write_done, twiddle_rsc_0_8_RREADY, twiddle_rsc_0_8_RVALID,
      twiddle_rsc_0_8_RUSER, twiddle_rsc_0_8_RLAST, twiddle_rsc_0_8_RRESP, twiddle_rsc_0_8_RDATA,
      twiddle_rsc_0_8_RID, twiddle_rsc_0_8_ARREADY, twiddle_rsc_0_8_ARVALID, twiddle_rsc_0_8_ARUSER,
      twiddle_rsc_0_8_ARREGION, twiddle_rsc_0_8_ARQOS, twiddle_rsc_0_8_ARPROT, twiddle_rsc_0_8_ARCACHE,
      twiddle_rsc_0_8_ARLOCK, twiddle_rsc_0_8_ARBURST, twiddle_rsc_0_8_ARSIZE, twiddle_rsc_0_8_ARLEN,
      twiddle_rsc_0_8_ARADDR, twiddle_rsc_0_8_ARID, twiddle_rsc_0_8_BREADY, twiddle_rsc_0_8_BVALID,
      twiddle_rsc_0_8_BUSER, twiddle_rsc_0_8_BRESP, twiddle_rsc_0_8_BID, twiddle_rsc_0_8_WREADY,
      twiddle_rsc_0_8_WVALID, twiddle_rsc_0_8_WUSER, twiddle_rsc_0_8_WLAST, twiddle_rsc_0_8_WSTRB,
      twiddle_rsc_0_8_WDATA, twiddle_rsc_0_8_AWREADY, twiddle_rsc_0_8_AWVALID, twiddle_rsc_0_8_AWUSER,
      twiddle_rsc_0_8_AWREGION, twiddle_rsc_0_8_AWQOS, twiddle_rsc_0_8_AWPROT, twiddle_rsc_0_8_AWCACHE,
      twiddle_rsc_0_8_AWLOCK, twiddle_rsc_0_8_AWBURST, twiddle_rsc_0_8_AWSIZE, twiddle_rsc_0_8_AWLEN,
      twiddle_rsc_0_8_AWADDR, twiddle_rsc_0_8_AWID, twiddle_rsc_triosy_0_8_lz, twiddle_rsc_0_9_s_tdone,
      twiddle_rsc_0_9_tr_write_done, twiddle_rsc_0_9_RREADY, twiddle_rsc_0_9_RVALID,
      twiddle_rsc_0_9_RUSER, twiddle_rsc_0_9_RLAST, twiddle_rsc_0_9_RRESP, twiddle_rsc_0_9_RDATA,
      twiddle_rsc_0_9_RID, twiddle_rsc_0_9_ARREADY, twiddle_rsc_0_9_ARVALID, twiddle_rsc_0_9_ARUSER,
      twiddle_rsc_0_9_ARREGION, twiddle_rsc_0_9_ARQOS, twiddle_rsc_0_9_ARPROT, twiddle_rsc_0_9_ARCACHE,
      twiddle_rsc_0_9_ARLOCK, twiddle_rsc_0_9_ARBURST, twiddle_rsc_0_9_ARSIZE, twiddle_rsc_0_9_ARLEN,
      twiddle_rsc_0_9_ARADDR, twiddle_rsc_0_9_ARID, twiddle_rsc_0_9_BREADY, twiddle_rsc_0_9_BVALID,
      twiddle_rsc_0_9_BUSER, twiddle_rsc_0_9_BRESP, twiddle_rsc_0_9_BID, twiddle_rsc_0_9_WREADY,
      twiddle_rsc_0_9_WVALID, twiddle_rsc_0_9_WUSER, twiddle_rsc_0_9_WLAST, twiddle_rsc_0_9_WSTRB,
      twiddle_rsc_0_9_WDATA, twiddle_rsc_0_9_AWREADY, twiddle_rsc_0_9_AWVALID, twiddle_rsc_0_9_AWUSER,
      twiddle_rsc_0_9_AWREGION, twiddle_rsc_0_9_AWQOS, twiddle_rsc_0_9_AWPROT, twiddle_rsc_0_9_AWCACHE,
      twiddle_rsc_0_9_AWLOCK, twiddle_rsc_0_9_AWBURST, twiddle_rsc_0_9_AWSIZE, twiddle_rsc_0_9_AWLEN,
      twiddle_rsc_0_9_AWADDR, twiddle_rsc_0_9_AWID, twiddle_rsc_triosy_0_9_lz, twiddle_rsc_0_10_s_tdone,
      twiddle_rsc_0_10_tr_write_done, twiddle_rsc_0_10_RREADY, twiddle_rsc_0_10_RVALID,
      twiddle_rsc_0_10_RUSER, twiddle_rsc_0_10_RLAST, twiddle_rsc_0_10_RRESP, twiddle_rsc_0_10_RDATA,
      twiddle_rsc_0_10_RID, twiddle_rsc_0_10_ARREADY, twiddle_rsc_0_10_ARVALID, twiddle_rsc_0_10_ARUSER,
      twiddle_rsc_0_10_ARREGION, twiddle_rsc_0_10_ARQOS, twiddle_rsc_0_10_ARPROT,
      twiddle_rsc_0_10_ARCACHE, twiddle_rsc_0_10_ARLOCK, twiddle_rsc_0_10_ARBURST,
      twiddle_rsc_0_10_ARSIZE, twiddle_rsc_0_10_ARLEN, twiddle_rsc_0_10_ARADDR, twiddle_rsc_0_10_ARID,
      twiddle_rsc_0_10_BREADY, twiddle_rsc_0_10_BVALID, twiddle_rsc_0_10_BUSER, twiddle_rsc_0_10_BRESP,
      twiddle_rsc_0_10_BID, twiddle_rsc_0_10_WREADY, twiddle_rsc_0_10_WVALID, twiddle_rsc_0_10_WUSER,
      twiddle_rsc_0_10_WLAST, twiddle_rsc_0_10_WSTRB, twiddle_rsc_0_10_WDATA, twiddle_rsc_0_10_AWREADY,
      twiddle_rsc_0_10_AWVALID, twiddle_rsc_0_10_AWUSER, twiddle_rsc_0_10_AWREGION,
      twiddle_rsc_0_10_AWQOS, twiddle_rsc_0_10_AWPROT, twiddle_rsc_0_10_AWCACHE,
      twiddle_rsc_0_10_AWLOCK, twiddle_rsc_0_10_AWBURST, twiddle_rsc_0_10_AWSIZE,
      twiddle_rsc_0_10_AWLEN, twiddle_rsc_0_10_AWADDR, twiddle_rsc_0_10_AWID, twiddle_rsc_triosy_0_10_lz,
      twiddle_rsc_0_11_s_tdone, twiddle_rsc_0_11_tr_write_done, twiddle_rsc_0_11_RREADY,
      twiddle_rsc_0_11_RVALID, twiddle_rsc_0_11_RUSER, twiddle_rsc_0_11_RLAST, twiddle_rsc_0_11_RRESP,
      twiddle_rsc_0_11_RDATA, twiddle_rsc_0_11_RID, twiddle_rsc_0_11_ARREADY, twiddle_rsc_0_11_ARVALID,
      twiddle_rsc_0_11_ARUSER, twiddle_rsc_0_11_ARREGION, twiddle_rsc_0_11_ARQOS,
      twiddle_rsc_0_11_ARPROT, twiddle_rsc_0_11_ARCACHE, twiddle_rsc_0_11_ARLOCK,
      twiddle_rsc_0_11_ARBURST, twiddle_rsc_0_11_ARSIZE, twiddle_rsc_0_11_ARLEN,
      twiddle_rsc_0_11_ARADDR, twiddle_rsc_0_11_ARID, twiddle_rsc_0_11_BREADY, twiddle_rsc_0_11_BVALID,
      twiddle_rsc_0_11_BUSER, twiddle_rsc_0_11_BRESP, twiddle_rsc_0_11_BID, twiddle_rsc_0_11_WREADY,
      twiddle_rsc_0_11_WVALID, twiddle_rsc_0_11_WUSER, twiddle_rsc_0_11_WLAST, twiddle_rsc_0_11_WSTRB,
      twiddle_rsc_0_11_WDATA, twiddle_rsc_0_11_AWREADY, twiddle_rsc_0_11_AWVALID,
      twiddle_rsc_0_11_AWUSER, twiddle_rsc_0_11_AWREGION, twiddle_rsc_0_11_AWQOS,
      twiddle_rsc_0_11_AWPROT, twiddle_rsc_0_11_AWCACHE, twiddle_rsc_0_11_AWLOCK,
      twiddle_rsc_0_11_AWBURST, twiddle_rsc_0_11_AWSIZE, twiddle_rsc_0_11_AWLEN,
      twiddle_rsc_0_11_AWADDR, twiddle_rsc_0_11_AWID, twiddle_rsc_triosy_0_11_lz,
      twiddle_rsc_0_12_s_tdone, twiddle_rsc_0_12_tr_write_done, twiddle_rsc_0_12_RREADY,
      twiddle_rsc_0_12_RVALID, twiddle_rsc_0_12_RUSER, twiddle_rsc_0_12_RLAST, twiddle_rsc_0_12_RRESP,
      twiddle_rsc_0_12_RDATA, twiddle_rsc_0_12_RID, twiddle_rsc_0_12_ARREADY, twiddle_rsc_0_12_ARVALID,
      twiddle_rsc_0_12_ARUSER, twiddle_rsc_0_12_ARREGION, twiddle_rsc_0_12_ARQOS,
      twiddle_rsc_0_12_ARPROT, twiddle_rsc_0_12_ARCACHE, twiddle_rsc_0_12_ARLOCK,
      twiddle_rsc_0_12_ARBURST, twiddle_rsc_0_12_ARSIZE, twiddle_rsc_0_12_ARLEN,
      twiddle_rsc_0_12_ARADDR, twiddle_rsc_0_12_ARID, twiddle_rsc_0_12_BREADY, twiddle_rsc_0_12_BVALID,
      twiddle_rsc_0_12_BUSER, twiddle_rsc_0_12_BRESP, twiddle_rsc_0_12_BID, twiddle_rsc_0_12_WREADY,
      twiddle_rsc_0_12_WVALID, twiddle_rsc_0_12_WUSER, twiddle_rsc_0_12_WLAST, twiddle_rsc_0_12_WSTRB,
      twiddle_rsc_0_12_WDATA, twiddle_rsc_0_12_AWREADY, twiddle_rsc_0_12_AWVALID,
      twiddle_rsc_0_12_AWUSER, twiddle_rsc_0_12_AWREGION, twiddle_rsc_0_12_AWQOS,
      twiddle_rsc_0_12_AWPROT, twiddle_rsc_0_12_AWCACHE, twiddle_rsc_0_12_AWLOCK,
      twiddle_rsc_0_12_AWBURST, twiddle_rsc_0_12_AWSIZE, twiddle_rsc_0_12_AWLEN,
      twiddle_rsc_0_12_AWADDR, twiddle_rsc_0_12_AWID, twiddle_rsc_triosy_0_12_lz,
      twiddle_rsc_0_13_s_tdone, twiddle_rsc_0_13_tr_write_done, twiddle_rsc_0_13_RREADY,
      twiddle_rsc_0_13_RVALID, twiddle_rsc_0_13_RUSER, twiddle_rsc_0_13_RLAST, twiddle_rsc_0_13_RRESP,
      twiddle_rsc_0_13_RDATA, twiddle_rsc_0_13_RID, twiddle_rsc_0_13_ARREADY, twiddle_rsc_0_13_ARVALID,
      twiddle_rsc_0_13_ARUSER, twiddle_rsc_0_13_ARREGION, twiddle_rsc_0_13_ARQOS,
      twiddle_rsc_0_13_ARPROT, twiddle_rsc_0_13_ARCACHE, twiddle_rsc_0_13_ARLOCK,
      twiddle_rsc_0_13_ARBURST, twiddle_rsc_0_13_ARSIZE, twiddle_rsc_0_13_ARLEN,
      twiddle_rsc_0_13_ARADDR, twiddle_rsc_0_13_ARID, twiddle_rsc_0_13_BREADY, twiddle_rsc_0_13_BVALID,
      twiddle_rsc_0_13_BUSER, twiddle_rsc_0_13_BRESP, twiddle_rsc_0_13_BID, twiddle_rsc_0_13_WREADY,
      twiddle_rsc_0_13_WVALID, twiddle_rsc_0_13_WUSER, twiddle_rsc_0_13_WLAST, twiddle_rsc_0_13_WSTRB,
      twiddle_rsc_0_13_WDATA, twiddle_rsc_0_13_AWREADY, twiddle_rsc_0_13_AWVALID,
      twiddle_rsc_0_13_AWUSER, twiddle_rsc_0_13_AWREGION, twiddle_rsc_0_13_AWQOS,
      twiddle_rsc_0_13_AWPROT, twiddle_rsc_0_13_AWCACHE, twiddle_rsc_0_13_AWLOCK,
      twiddle_rsc_0_13_AWBURST, twiddle_rsc_0_13_AWSIZE, twiddle_rsc_0_13_AWLEN,
      twiddle_rsc_0_13_AWADDR, twiddle_rsc_0_13_AWID, twiddle_rsc_triosy_0_13_lz,
      twiddle_rsc_0_14_s_tdone, twiddle_rsc_0_14_tr_write_done, twiddle_rsc_0_14_RREADY,
      twiddle_rsc_0_14_RVALID, twiddle_rsc_0_14_RUSER, twiddle_rsc_0_14_RLAST, twiddle_rsc_0_14_RRESP,
      twiddle_rsc_0_14_RDATA, twiddle_rsc_0_14_RID, twiddle_rsc_0_14_ARREADY, twiddle_rsc_0_14_ARVALID,
      twiddle_rsc_0_14_ARUSER, twiddle_rsc_0_14_ARREGION, twiddle_rsc_0_14_ARQOS,
      twiddle_rsc_0_14_ARPROT, twiddle_rsc_0_14_ARCACHE, twiddle_rsc_0_14_ARLOCK,
      twiddle_rsc_0_14_ARBURST, twiddle_rsc_0_14_ARSIZE, twiddle_rsc_0_14_ARLEN,
      twiddle_rsc_0_14_ARADDR, twiddle_rsc_0_14_ARID, twiddle_rsc_0_14_BREADY, twiddle_rsc_0_14_BVALID,
      twiddle_rsc_0_14_BUSER, twiddle_rsc_0_14_BRESP, twiddle_rsc_0_14_BID, twiddle_rsc_0_14_WREADY,
      twiddle_rsc_0_14_WVALID, twiddle_rsc_0_14_WUSER, twiddle_rsc_0_14_WLAST, twiddle_rsc_0_14_WSTRB,
      twiddle_rsc_0_14_WDATA, twiddle_rsc_0_14_AWREADY, twiddle_rsc_0_14_AWVALID,
      twiddle_rsc_0_14_AWUSER, twiddle_rsc_0_14_AWREGION, twiddle_rsc_0_14_AWQOS,
      twiddle_rsc_0_14_AWPROT, twiddle_rsc_0_14_AWCACHE, twiddle_rsc_0_14_AWLOCK,
      twiddle_rsc_0_14_AWBURST, twiddle_rsc_0_14_AWSIZE, twiddle_rsc_0_14_AWLEN,
      twiddle_rsc_0_14_AWADDR, twiddle_rsc_0_14_AWID, twiddle_rsc_triosy_0_14_lz,
      twiddle_rsc_0_15_s_tdone, twiddle_rsc_0_15_tr_write_done, twiddle_rsc_0_15_RREADY,
      twiddle_rsc_0_15_RVALID, twiddle_rsc_0_15_RUSER, twiddle_rsc_0_15_RLAST, twiddle_rsc_0_15_RRESP,
      twiddle_rsc_0_15_RDATA, twiddle_rsc_0_15_RID, twiddle_rsc_0_15_ARREADY, twiddle_rsc_0_15_ARVALID,
      twiddle_rsc_0_15_ARUSER, twiddle_rsc_0_15_ARREGION, twiddle_rsc_0_15_ARQOS,
      twiddle_rsc_0_15_ARPROT, twiddle_rsc_0_15_ARCACHE, twiddle_rsc_0_15_ARLOCK,
      twiddle_rsc_0_15_ARBURST, twiddle_rsc_0_15_ARSIZE, twiddle_rsc_0_15_ARLEN,
      twiddle_rsc_0_15_ARADDR, twiddle_rsc_0_15_ARID, twiddle_rsc_0_15_BREADY, twiddle_rsc_0_15_BVALID,
      twiddle_rsc_0_15_BUSER, twiddle_rsc_0_15_BRESP, twiddle_rsc_0_15_BID, twiddle_rsc_0_15_WREADY,
      twiddle_rsc_0_15_WVALID, twiddle_rsc_0_15_WUSER, twiddle_rsc_0_15_WLAST, twiddle_rsc_0_15_WSTRB,
      twiddle_rsc_0_15_WDATA, twiddle_rsc_0_15_AWREADY, twiddle_rsc_0_15_AWVALID,
      twiddle_rsc_0_15_AWUSER, twiddle_rsc_0_15_AWREGION, twiddle_rsc_0_15_AWQOS,
      twiddle_rsc_0_15_AWPROT, twiddle_rsc_0_15_AWCACHE, twiddle_rsc_0_15_AWLOCK,
      twiddle_rsc_0_15_AWBURST, twiddle_rsc_0_15_AWSIZE, twiddle_rsc_0_15_AWLEN,
      twiddle_rsc_0_15_AWADDR, twiddle_rsc_0_15_AWID, twiddle_rsc_triosy_0_15_lz,
      twiddle_h_rsc_0_0_s_tdone, twiddle_h_rsc_0_0_tr_write_done, twiddle_h_rsc_0_0_RREADY,
      twiddle_h_rsc_0_0_RVALID, twiddle_h_rsc_0_0_RUSER, twiddle_h_rsc_0_0_RLAST,
      twiddle_h_rsc_0_0_RRESP, twiddle_h_rsc_0_0_RDATA, twiddle_h_rsc_0_0_RID, twiddle_h_rsc_0_0_ARREADY,
      twiddle_h_rsc_0_0_ARVALID, twiddle_h_rsc_0_0_ARUSER, twiddle_h_rsc_0_0_ARREGION,
      twiddle_h_rsc_0_0_ARQOS, twiddle_h_rsc_0_0_ARPROT, twiddle_h_rsc_0_0_ARCACHE,
      twiddle_h_rsc_0_0_ARLOCK, twiddle_h_rsc_0_0_ARBURST, twiddle_h_rsc_0_0_ARSIZE,
      twiddle_h_rsc_0_0_ARLEN, twiddle_h_rsc_0_0_ARADDR, twiddle_h_rsc_0_0_ARID,
      twiddle_h_rsc_0_0_BREADY, twiddle_h_rsc_0_0_BVALID, twiddle_h_rsc_0_0_BUSER,
      twiddle_h_rsc_0_0_BRESP, twiddle_h_rsc_0_0_BID, twiddle_h_rsc_0_0_WREADY, twiddle_h_rsc_0_0_WVALID,
      twiddle_h_rsc_0_0_WUSER, twiddle_h_rsc_0_0_WLAST, twiddle_h_rsc_0_0_WSTRB,
      twiddle_h_rsc_0_0_WDATA, twiddle_h_rsc_0_0_AWREADY, twiddle_h_rsc_0_0_AWVALID,
      twiddle_h_rsc_0_0_AWUSER, twiddle_h_rsc_0_0_AWREGION, twiddle_h_rsc_0_0_AWQOS,
      twiddle_h_rsc_0_0_AWPROT, twiddle_h_rsc_0_0_AWCACHE, twiddle_h_rsc_0_0_AWLOCK,
      twiddle_h_rsc_0_0_AWBURST, twiddle_h_rsc_0_0_AWSIZE, twiddle_h_rsc_0_0_AWLEN,
      twiddle_h_rsc_0_0_AWADDR, twiddle_h_rsc_0_0_AWID, twiddle_h_rsc_triosy_0_0_lz,
      twiddle_h_rsc_0_1_s_tdone, twiddle_h_rsc_0_1_tr_write_done, twiddle_h_rsc_0_1_RREADY,
      twiddle_h_rsc_0_1_RVALID, twiddle_h_rsc_0_1_RUSER, twiddle_h_rsc_0_1_RLAST,
      twiddle_h_rsc_0_1_RRESP, twiddle_h_rsc_0_1_RDATA, twiddle_h_rsc_0_1_RID, twiddle_h_rsc_0_1_ARREADY,
      twiddle_h_rsc_0_1_ARVALID, twiddle_h_rsc_0_1_ARUSER, twiddle_h_rsc_0_1_ARREGION,
      twiddle_h_rsc_0_1_ARQOS, twiddle_h_rsc_0_1_ARPROT, twiddle_h_rsc_0_1_ARCACHE,
      twiddle_h_rsc_0_1_ARLOCK, twiddle_h_rsc_0_1_ARBURST, twiddle_h_rsc_0_1_ARSIZE,
      twiddle_h_rsc_0_1_ARLEN, twiddle_h_rsc_0_1_ARADDR, twiddle_h_rsc_0_1_ARID,
      twiddle_h_rsc_0_1_BREADY, twiddle_h_rsc_0_1_BVALID, twiddle_h_rsc_0_1_BUSER,
      twiddle_h_rsc_0_1_BRESP, twiddle_h_rsc_0_1_BID, twiddle_h_rsc_0_1_WREADY, twiddle_h_rsc_0_1_WVALID,
      twiddle_h_rsc_0_1_WUSER, twiddle_h_rsc_0_1_WLAST, twiddle_h_rsc_0_1_WSTRB,
      twiddle_h_rsc_0_1_WDATA, twiddle_h_rsc_0_1_AWREADY, twiddle_h_rsc_0_1_AWVALID,
      twiddle_h_rsc_0_1_AWUSER, twiddle_h_rsc_0_1_AWREGION, twiddle_h_rsc_0_1_AWQOS,
      twiddle_h_rsc_0_1_AWPROT, twiddle_h_rsc_0_1_AWCACHE, twiddle_h_rsc_0_1_AWLOCK,
      twiddle_h_rsc_0_1_AWBURST, twiddle_h_rsc_0_1_AWSIZE, twiddle_h_rsc_0_1_AWLEN,
      twiddle_h_rsc_0_1_AWADDR, twiddle_h_rsc_0_1_AWID, twiddle_h_rsc_triosy_0_1_lz,
      twiddle_h_rsc_0_2_s_tdone, twiddle_h_rsc_0_2_tr_write_done, twiddle_h_rsc_0_2_RREADY,
      twiddle_h_rsc_0_2_RVALID, twiddle_h_rsc_0_2_RUSER, twiddle_h_rsc_0_2_RLAST,
      twiddle_h_rsc_0_2_RRESP, twiddle_h_rsc_0_2_RDATA, twiddle_h_rsc_0_2_RID, twiddle_h_rsc_0_2_ARREADY,
      twiddle_h_rsc_0_2_ARVALID, twiddle_h_rsc_0_2_ARUSER, twiddle_h_rsc_0_2_ARREGION,
      twiddle_h_rsc_0_2_ARQOS, twiddle_h_rsc_0_2_ARPROT, twiddle_h_rsc_0_2_ARCACHE,
      twiddle_h_rsc_0_2_ARLOCK, twiddle_h_rsc_0_2_ARBURST, twiddle_h_rsc_0_2_ARSIZE,
      twiddle_h_rsc_0_2_ARLEN, twiddle_h_rsc_0_2_ARADDR, twiddle_h_rsc_0_2_ARID,
      twiddle_h_rsc_0_2_BREADY, twiddle_h_rsc_0_2_BVALID, twiddle_h_rsc_0_2_BUSER,
      twiddle_h_rsc_0_2_BRESP, twiddle_h_rsc_0_2_BID, twiddle_h_rsc_0_2_WREADY, twiddle_h_rsc_0_2_WVALID,
      twiddle_h_rsc_0_2_WUSER, twiddle_h_rsc_0_2_WLAST, twiddle_h_rsc_0_2_WSTRB,
      twiddle_h_rsc_0_2_WDATA, twiddle_h_rsc_0_2_AWREADY, twiddle_h_rsc_0_2_AWVALID,
      twiddle_h_rsc_0_2_AWUSER, twiddle_h_rsc_0_2_AWREGION, twiddle_h_rsc_0_2_AWQOS,
      twiddle_h_rsc_0_2_AWPROT, twiddle_h_rsc_0_2_AWCACHE, twiddle_h_rsc_0_2_AWLOCK,
      twiddle_h_rsc_0_2_AWBURST, twiddle_h_rsc_0_2_AWSIZE, twiddle_h_rsc_0_2_AWLEN,
      twiddle_h_rsc_0_2_AWADDR, twiddle_h_rsc_0_2_AWID, twiddle_h_rsc_triosy_0_2_lz,
      twiddle_h_rsc_0_3_s_tdone, twiddle_h_rsc_0_3_tr_write_done, twiddle_h_rsc_0_3_RREADY,
      twiddle_h_rsc_0_3_RVALID, twiddle_h_rsc_0_3_RUSER, twiddle_h_rsc_0_3_RLAST,
      twiddle_h_rsc_0_3_RRESP, twiddle_h_rsc_0_3_RDATA, twiddle_h_rsc_0_3_RID, twiddle_h_rsc_0_3_ARREADY,
      twiddle_h_rsc_0_3_ARVALID, twiddle_h_rsc_0_3_ARUSER, twiddle_h_rsc_0_3_ARREGION,
      twiddle_h_rsc_0_3_ARQOS, twiddle_h_rsc_0_3_ARPROT, twiddle_h_rsc_0_3_ARCACHE,
      twiddle_h_rsc_0_3_ARLOCK, twiddle_h_rsc_0_3_ARBURST, twiddle_h_rsc_0_3_ARSIZE,
      twiddle_h_rsc_0_3_ARLEN, twiddle_h_rsc_0_3_ARADDR, twiddle_h_rsc_0_3_ARID,
      twiddle_h_rsc_0_3_BREADY, twiddle_h_rsc_0_3_BVALID, twiddle_h_rsc_0_3_BUSER,
      twiddle_h_rsc_0_3_BRESP, twiddle_h_rsc_0_3_BID, twiddle_h_rsc_0_3_WREADY, twiddle_h_rsc_0_3_WVALID,
      twiddle_h_rsc_0_3_WUSER, twiddle_h_rsc_0_3_WLAST, twiddle_h_rsc_0_3_WSTRB,
      twiddle_h_rsc_0_3_WDATA, twiddle_h_rsc_0_3_AWREADY, twiddle_h_rsc_0_3_AWVALID,
      twiddle_h_rsc_0_3_AWUSER, twiddle_h_rsc_0_3_AWREGION, twiddle_h_rsc_0_3_AWQOS,
      twiddle_h_rsc_0_3_AWPROT, twiddle_h_rsc_0_3_AWCACHE, twiddle_h_rsc_0_3_AWLOCK,
      twiddle_h_rsc_0_3_AWBURST, twiddle_h_rsc_0_3_AWSIZE, twiddle_h_rsc_0_3_AWLEN,
      twiddle_h_rsc_0_3_AWADDR, twiddle_h_rsc_0_3_AWID, twiddle_h_rsc_triosy_0_3_lz,
      twiddle_h_rsc_0_4_s_tdone, twiddle_h_rsc_0_4_tr_write_done, twiddle_h_rsc_0_4_RREADY,
      twiddle_h_rsc_0_4_RVALID, twiddle_h_rsc_0_4_RUSER, twiddle_h_rsc_0_4_RLAST,
      twiddle_h_rsc_0_4_RRESP, twiddle_h_rsc_0_4_RDATA, twiddle_h_rsc_0_4_RID, twiddle_h_rsc_0_4_ARREADY,
      twiddle_h_rsc_0_4_ARVALID, twiddle_h_rsc_0_4_ARUSER, twiddle_h_rsc_0_4_ARREGION,
      twiddle_h_rsc_0_4_ARQOS, twiddle_h_rsc_0_4_ARPROT, twiddle_h_rsc_0_4_ARCACHE,
      twiddle_h_rsc_0_4_ARLOCK, twiddle_h_rsc_0_4_ARBURST, twiddle_h_rsc_0_4_ARSIZE,
      twiddle_h_rsc_0_4_ARLEN, twiddle_h_rsc_0_4_ARADDR, twiddle_h_rsc_0_4_ARID,
      twiddle_h_rsc_0_4_BREADY, twiddle_h_rsc_0_4_BVALID, twiddle_h_rsc_0_4_BUSER,
      twiddle_h_rsc_0_4_BRESP, twiddle_h_rsc_0_4_BID, twiddle_h_rsc_0_4_WREADY, twiddle_h_rsc_0_4_WVALID,
      twiddle_h_rsc_0_4_WUSER, twiddle_h_rsc_0_4_WLAST, twiddle_h_rsc_0_4_WSTRB,
      twiddle_h_rsc_0_4_WDATA, twiddle_h_rsc_0_4_AWREADY, twiddle_h_rsc_0_4_AWVALID,
      twiddle_h_rsc_0_4_AWUSER, twiddle_h_rsc_0_4_AWREGION, twiddle_h_rsc_0_4_AWQOS,
      twiddle_h_rsc_0_4_AWPROT, twiddle_h_rsc_0_4_AWCACHE, twiddle_h_rsc_0_4_AWLOCK,
      twiddle_h_rsc_0_4_AWBURST, twiddle_h_rsc_0_4_AWSIZE, twiddle_h_rsc_0_4_AWLEN,
      twiddle_h_rsc_0_4_AWADDR, twiddle_h_rsc_0_4_AWID, twiddle_h_rsc_triosy_0_4_lz,
      twiddle_h_rsc_0_5_s_tdone, twiddle_h_rsc_0_5_tr_write_done, twiddle_h_rsc_0_5_RREADY,
      twiddle_h_rsc_0_5_RVALID, twiddle_h_rsc_0_5_RUSER, twiddle_h_rsc_0_5_RLAST,
      twiddle_h_rsc_0_5_RRESP, twiddle_h_rsc_0_5_RDATA, twiddle_h_rsc_0_5_RID, twiddle_h_rsc_0_5_ARREADY,
      twiddle_h_rsc_0_5_ARVALID, twiddle_h_rsc_0_5_ARUSER, twiddle_h_rsc_0_5_ARREGION,
      twiddle_h_rsc_0_5_ARQOS, twiddle_h_rsc_0_5_ARPROT, twiddle_h_rsc_0_5_ARCACHE,
      twiddle_h_rsc_0_5_ARLOCK, twiddle_h_rsc_0_5_ARBURST, twiddle_h_rsc_0_5_ARSIZE,
      twiddle_h_rsc_0_5_ARLEN, twiddle_h_rsc_0_5_ARADDR, twiddle_h_rsc_0_5_ARID,
      twiddle_h_rsc_0_5_BREADY, twiddle_h_rsc_0_5_BVALID, twiddle_h_rsc_0_5_BUSER,
      twiddle_h_rsc_0_5_BRESP, twiddle_h_rsc_0_5_BID, twiddle_h_rsc_0_5_WREADY, twiddle_h_rsc_0_5_WVALID,
      twiddle_h_rsc_0_5_WUSER, twiddle_h_rsc_0_5_WLAST, twiddle_h_rsc_0_5_WSTRB,
      twiddle_h_rsc_0_5_WDATA, twiddle_h_rsc_0_5_AWREADY, twiddle_h_rsc_0_5_AWVALID,
      twiddle_h_rsc_0_5_AWUSER, twiddle_h_rsc_0_5_AWREGION, twiddle_h_rsc_0_5_AWQOS,
      twiddle_h_rsc_0_5_AWPROT, twiddle_h_rsc_0_5_AWCACHE, twiddle_h_rsc_0_5_AWLOCK,
      twiddle_h_rsc_0_5_AWBURST, twiddle_h_rsc_0_5_AWSIZE, twiddle_h_rsc_0_5_AWLEN,
      twiddle_h_rsc_0_5_AWADDR, twiddle_h_rsc_0_5_AWID, twiddle_h_rsc_triosy_0_5_lz,
      twiddle_h_rsc_0_6_s_tdone, twiddle_h_rsc_0_6_tr_write_done, twiddle_h_rsc_0_6_RREADY,
      twiddle_h_rsc_0_6_RVALID, twiddle_h_rsc_0_6_RUSER, twiddle_h_rsc_0_6_RLAST,
      twiddle_h_rsc_0_6_RRESP, twiddle_h_rsc_0_6_RDATA, twiddle_h_rsc_0_6_RID, twiddle_h_rsc_0_6_ARREADY,
      twiddle_h_rsc_0_6_ARVALID, twiddle_h_rsc_0_6_ARUSER, twiddle_h_rsc_0_6_ARREGION,
      twiddle_h_rsc_0_6_ARQOS, twiddle_h_rsc_0_6_ARPROT, twiddle_h_rsc_0_6_ARCACHE,
      twiddle_h_rsc_0_6_ARLOCK, twiddle_h_rsc_0_6_ARBURST, twiddle_h_rsc_0_6_ARSIZE,
      twiddle_h_rsc_0_6_ARLEN, twiddle_h_rsc_0_6_ARADDR, twiddle_h_rsc_0_6_ARID,
      twiddle_h_rsc_0_6_BREADY, twiddle_h_rsc_0_6_BVALID, twiddle_h_rsc_0_6_BUSER,
      twiddle_h_rsc_0_6_BRESP, twiddle_h_rsc_0_6_BID, twiddle_h_rsc_0_6_WREADY, twiddle_h_rsc_0_6_WVALID,
      twiddle_h_rsc_0_6_WUSER, twiddle_h_rsc_0_6_WLAST, twiddle_h_rsc_0_6_WSTRB,
      twiddle_h_rsc_0_6_WDATA, twiddle_h_rsc_0_6_AWREADY, twiddle_h_rsc_0_6_AWVALID,
      twiddle_h_rsc_0_6_AWUSER, twiddle_h_rsc_0_6_AWREGION, twiddle_h_rsc_0_6_AWQOS,
      twiddle_h_rsc_0_6_AWPROT, twiddle_h_rsc_0_6_AWCACHE, twiddle_h_rsc_0_6_AWLOCK,
      twiddle_h_rsc_0_6_AWBURST, twiddle_h_rsc_0_6_AWSIZE, twiddle_h_rsc_0_6_AWLEN,
      twiddle_h_rsc_0_6_AWADDR, twiddle_h_rsc_0_6_AWID, twiddle_h_rsc_triosy_0_6_lz,
      twiddle_h_rsc_0_7_s_tdone, twiddle_h_rsc_0_7_tr_write_done, twiddle_h_rsc_0_7_RREADY,
      twiddle_h_rsc_0_7_RVALID, twiddle_h_rsc_0_7_RUSER, twiddle_h_rsc_0_7_RLAST,
      twiddle_h_rsc_0_7_RRESP, twiddle_h_rsc_0_7_RDATA, twiddle_h_rsc_0_7_RID, twiddle_h_rsc_0_7_ARREADY,
      twiddle_h_rsc_0_7_ARVALID, twiddle_h_rsc_0_7_ARUSER, twiddle_h_rsc_0_7_ARREGION,
      twiddle_h_rsc_0_7_ARQOS, twiddle_h_rsc_0_7_ARPROT, twiddle_h_rsc_0_7_ARCACHE,
      twiddle_h_rsc_0_7_ARLOCK, twiddle_h_rsc_0_7_ARBURST, twiddle_h_rsc_0_7_ARSIZE,
      twiddle_h_rsc_0_7_ARLEN, twiddle_h_rsc_0_7_ARADDR, twiddle_h_rsc_0_7_ARID,
      twiddle_h_rsc_0_7_BREADY, twiddle_h_rsc_0_7_BVALID, twiddle_h_rsc_0_7_BUSER,
      twiddle_h_rsc_0_7_BRESP, twiddle_h_rsc_0_7_BID, twiddle_h_rsc_0_7_WREADY, twiddle_h_rsc_0_7_WVALID,
      twiddle_h_rsc_0_7_WUSER, twiddle_h_rsc_0_7_WLAST, twiddle_h_rsc_0_7_WSTRB,
      twiddle_h_rsc_0_7_WDATA, twiddle_h_rsc_0_7_AWREADY, twiddle_h_rsc_0_7_AWVALID,
      twiddle_h_rsc_0_7_AWUSER, twiddle_h_rsc_0_7_AWREGION, twiddle_h_rsc_0_7_AWQOS,
      twiddle_h_rsc_0_7_AWPROT, twiddle_h_rsc_0_7_AWCACHE, twiddle_h_rsc_0_7_AWLOCK,
      twiddle_h_rsc_0_7_AWBURST, twiddle_h_rsc_0_7_AWSIZE, twiddle_h_rsc_0_7_AWLEN,
      twiddle_h_rsc_0_7_AWADDR, twiddle_h_rsc_0_7_AWID, twiddle_h_rsc_triosy_0_7_lz,
      twiddle_h_rsc_0_8_s_tdone, twiddle_h_rsc_0_8_tr_write_done, twiddle_h_rsc_0_8_RREADY,
      twiddle_h_rsc_0_8_RVALID, twiddle_h_rsc_0_8_RUSER, twiddle_h_rsc_0_8_RLAST,
      twiddle_h_rsc_0_8_RRESP, twiddle_h_rsc_0_8_RDATA, twiddle_h_rsc_0_8_RID, twiddle_h_rsc_0_8_ARREADY,
      twiddle_h_rsc_0_8_ARVALID, twiddle_h_rsc_0_8_ARUSER, twiddle_h_rsc_0_8_ARREGION,
      twiddle_h_rsc_0_8_ARQOS, twiddle_h_rsc_0_8_ARPROT, twiddle_h_rsc_0_8_ARCACHE,
      twiddle_h_rsc_0_8_ARLOCK, twiddle_h_rsc_0_8_ARBURST, twiddle_h_rsc_0_8_ARSIZE,
      twiddle_h_rsc_0_8_ARLEN, twiddle_h_rsc_0_8_ARADDR, twiddle_h_rsc_0_8_ARID,
      twiddle_h_rsc_0_8_BREADY, twiddle_h_rsc_0_8_BVALID, twiddle_h_rsc_0_8_BUSER,
      twiddle_h_rsc_0_8_BRESP, twiddle_h_rsc_0_8_BID, twiddle_h_rsc_0_8_WREADY, twiddle_h_rsc_0_8_WVALID,
      twiddle_h_rsc_0_8_WUSER, twiddle_h_rsc_0_8_WLAST, twiddle_h_rsc_0_8_WSTRB,
      twiddle_h_rsc_0_8_WDATA, twiddle_h_rsc_0_8_AWREADY, twiddle_h_rsc_0_8_AWVALID,
      twiddle_h_rsc_0_8_AWUSER, twiddle_h_rsc_0_8_AWREGION, twiddle_h_rsc_0_8_AWQOS,
      twiddle_h_rsc_0_8_AWPROT, twiddle_h_rsc_0_8_AWCACHE, twiddle_h_rsc_0_8_AWLOCK,
      twiddle_h_rsc_0_8_AWBURST, twiddle_h_rsc_0_8_AWSIZE, twiddle_h_rsc_0_8_AWLEN,
      twiddle_h_rsc_0_8_AWADDR, twiddle_h_rsc_0_8_AWID, twiddle_h_rsc_triosy_0_8_lz,
      twiddle_h_rsc_0_9_s_tdone, twiddle_h_rsc_0_9_tr_write_done, twiddle_h_rsc_0_9_RREADY,
      twiddle_h_rsc_0_9_RVALID, twiddle_h_rsc_0_9_RUSER, twiddle_h_rsc_0_9_RLAST,
      twiddle_h_rsc_0_9_RRESP, twiddle_h_rsc_0_9_RDATA, twiddle_h_rsc_0_9_RID, twiddle_h_rsc_0_9_ARREADY,
      twiddle_h_rsc_0_9_ARVALID, twiddle_h_rsc_0_9_ARUSER, twiddle_h_rsc_0_9_ARREGION,
      twiddle_h_rsc_0_9_ARQOS, twiddle_h_rsc_0_9_ARPROT, twiddle_h_rsc_0_9_ARCACHE,
      twiddle_h_rsc_0_9_ARLOCK, twiddle_h_rsc_0_9_ARBURST, twiddle_h_rsc_0_9_ARSIZE,
      twiddle_h_rsc_0_9_ARLEN, twiddle_h_rsc_0_9_ARADDR, twiddle_h_rsc_0_9_ARID,
      twiddle_h_rsc_0_9_BREADY, twiddle_h_rsc_0_9_BVALID, twiddle_h_rsc_0_9_BUSER,
      twiddle_h_rsc_0_9_BRESP, twiddle_h_rsc_0_9_BID, twiddle_h_rsc_0_9_WREADY, twiddle_h_rsc_0_9_WVALID,
      twiddle_h_rsc_0_9_WUSER, twiddle_h_rsc_0_9_WLAST, twiddle_h_rsc_0_9_WSTRB,
      twiddle_h_rsc_0_9_WDATA, twiddle_h_rsc_0_9_AWREADY, twiddle_h_rsc_0_9_AWVALID,
      twiddle_h_rsc_0_9_AWUSER, twiddle_h_rsc_0_9_AWREGION, twiddle_h_rsc_0_9_AWQOS,
      twiddle_h_rsc_0_9_AWPROT, twiddle_h_rsc_0_9_AWCACHE, twiddle_h_rsc_0_9_AWLOCK,
      twiddle_h_rsc_0_9_AWBURST, twiddle_h_rsc_0_9_AWSIZE, twiddle_h_rsc_0_9_AWLEN,
      twiddle_h_rsc_0_9_AWADDR, twiddle_h_rsc_0_9_AWID, twiddle_h_rsc_triosy_0_9_lz,
      twiddle_h_rsc_0_10_s_tdone, twiddle_h_rsc_0_10_tr_write_done, twiddle_h_rsc_0_10_RREADY,
      twiddle_h_rsc_0_10_RVALID, twiddle_h_rsc_0_10_RUSER, twiddle_h_rsc_0_10_RLAST,
      twiddle_h_rsc_0_10_RRESP, twiddle_h_rsc_0_10_RDATA, twiddle_h_rsc_0_10_RID,
      twiddle_h_rsc_0_10_ARREADY, twiddle_h_rsc_0_10_ARVALID, twiddle_h_rsc_0_10_ARUSER,
      twiddle_h_rsc_0_10_ARREGION, twiddle_h_rsc_0_10_ARQOS, twiddle_h_rsc_0_10_ARPROT,
      twiddle_h_rsc_0_10_ARCACHE, twiddle_h_rsc_0_10_ARLOCK, twiddle_h_rsc_0_10_ARBURST,
      twiddle_h_rsc_0_10_ARSIZE, twiddle_h_rsc_0_10_ARLEN, twiddle_h_rsc_0_10_ARADDR,
      twiddle_h_rsc_0_10_ARID, twiddle_h_rsc_0_10_BREADY, twiddle_h_rsc_0_10_BVALID,
      twiddle_h_rsc_0_10_BUSER, twiddle_h_rsc_0_10_BRESP, twiddle_h_rsc_0_10_BID,
      twiddle_h_rsc_0_10_WREADY, twiddle_h_rsc_0_10_WVALID, twiddle_h_rsc_0_10_WUSER,
      twiddle_h_rsc_0_10_WLAST, twiddle_h_rsc_0_10_WSTRB, twiddle_h_rsc_0_10_WDATA,
      twiddle_h_rsc_0_10_AWREADY, twiddle_h_rsc_0_10_AWVALID, twiddle_h_rsc_0_10_AWUSER,
      twiddle_h_rsc_0_10_AWREGION, twiddle_h_rsc_0_10_AWQOS, twiddle_h_rsc_0_10_AWPROT,
      twiddle_h_rsc_0_10_AWCACHE, twiddle_h_rsc_0_10_AWLOCK, twiddle_h_rsc_0_10_AWBURST,
      twiddle_h_rsc_0_10_AWSIZE, twiddle_h_rsc_0_10_AWLEN, twiddle_h_rsc_0_10_AWADDR,
      twiddle_h_rsc_0_10_AWID, twiddle_h_rsc_triosy_0_10_lz, twiddle_h_rsc_0_11_s_tdone,
      twiddle_h_rsc_0_11_tr_write_done, twiddle_h_rsc_0_11_RREADY, twiddle_h_rsc_0_11_RVALID,
      twiddle_h_rsc_0_11_RUSER, twiddle_h_rsc_0_11_RLAST, twiddle_h_rsc_0_11_RRESP,
      twiddle_h_rsc_0_11_RDATA, twiddle_h_rsc_0_11_RID, twiddle_h_rsc_0_11_ARREADY,
      twiddle_h_rsc_0_11_ARVALID, twiddle_h_rsc_0_11_ARUSER, twiddle_h_rsc_0_11_ARREGION,
      twiddle_h_rsc_0_11_ARQOS, twiddle_h_rsc_0_11_ARPROT, twiddle_h_rsc_0_11_ARCACHE,
      twiddle_h_rsc_0_11_ARLOCK, twiddle_h_rsc_0_11_ARBURST, twiddle_h_rsc_0_11_ARSIZE,
      twiddle_h_rsc_0_11_ARLEN, twiddle_h_rsc_0_11_ARADDR, twiddle_h_rsc_0_11_ARID,
      twiddle_h_rsc_0_11_BREADY, twiddle_h_rsc_0_11_BVALID, twiddle_h_rsc_0_11_BUSER,
      twiddle_h_rsc_0_11_BRESP, twiddle_h_rsc_0_11_BID, twiddle_h_rsc_0_11_WREADY,
      twiddle_h_rsc_0_11_WVALID, twiddle_h_rsc_0_11_WUSER, twiddle_h_rsc_0_11_WLAST,
      twiddle_h_rsc_0_11_WSTRB, twiddle_h_rsc_0_11_WDATA, twiddle_h_rsc_0_11_AWREADY,
      twiddle_h_rsc_0_11_AWVALID, twiddle_h_rsc_0_11_AWUSER, twiddle_h_rsc_0_11_AWREGION,
      twiddle_h_rsc_0_11_AWQOS, twiddle_h_rsc_0_11_AWPROT, twiddle_h_rsc_0_11_AWCACHE,
      twiddle_h_rsc_0_11_AWLOCK, twiddle_h_rsc_0_11_AWBURST, twiddle_h_rsc_0_11_AWSIZE,
      twiddle_h_rsc_0_11_AWLEN, twiddle_h_rsc_0_11_AWADDR, twiddle_h_rsc_0_11_AWID,
      twiddle_h_rsc_triosy_0_11_lz, twiddle_h_rsc_0_12_s_tdone, twiddle_h_rsc_0_12_tr_write_done,
      twiddle_h_rsc_0_12_RREADY, twiddle_h_rsc_0_12_RVALID, twiddle_h_rsc_0_12_RUSER,
      twiddle_h_rsc_0_12_RLAST, twiddle_h_rsc_0_12_RRESP, twiddle_h_rsc_0_12_RDATA,
      twiddle_h_rsc_0_12_RID, twiddle_h_rsc_0_12_ARREADY, twiddle_h_rsc_0_12_ARVALID,
      twiddle_h_rsc_0_12_ARUSER, twiddle_h_rsc_0_12_ARREGION, twiddle_h_rsc_0_12_ARQOS,
      twiddle_h_rsc_0_12_ARPROT, twiddle_h_rsc_0_12_ARCACHE, twiddle_h_rsc_0_12_ARLOCK,
      twiddle_h_rsc_0_12_ARBURST, twiddle_h_rsc_0_12_ARSIZE, twiddle_h_rsc_0_12_ARLEN,
      twiddle_h_rsc_0_12_ARADDR, twiddle_h_rsc_0_12_ARID, twiddle_h_rsc_0_12_BREADY,
      twiddle_h_rsc_0_12_BVALID, twiddle_h_rsc_0_12_BUSER, twiddle_h_rsc_0_12_BRESP,
      twiddle_h_rsc_0_12_BID, twiddle_h_rsc_0_12_WREADY, twiddle_h_rsc_0_12_WVALID,
      twiddle_h_rsc_0_12_WUSER, twiddle_h_rsc_0_12_WLAST, twiddle_h_rsc_0_12_WSTRB,
      twiddle_h_rsc_0_12_WDATA, twiddle_h_rsc_0_12_AWREADY, twiddle_h_rsc_0_12_AWVALID,
      twiddle_h_rsc_0_12_AWUSER, twiddle_h_rsc_0_12_AWREGION, twiddle_h_rsc_0_12_AWQOS,
      twiddle_h_rsc_0_12_AWPROT, twiddle_h_rsc_0_12_AWCACHE, twiddle_h_rsc_0_12_AWLOCK,
      twiddle_h_rsc_0_12_AWBURST, twiddle_h_rsc_0_12_AWSIZE, twiddle_h_rsc_0_12_AWLEN,
      twiddle_h_rsc_0_12_AWADDR, twiddle_h_rsc_0_12_AWID, twiddle_h_rsc_triosy_0_12_lz,
      twiddle_h_rsc_0_13_s_tdone, twiddle_h_rsc_0_13_tr_write_done, twiddle_h_rsc_0_13_RREADY,
      twiddle_h_rsc_0_13_RVALID, twiddle_h_rsc_0_13_RUSER, twiddle_h_rsc_0_13_RLAST,
      twiddle_h_rsc_0_13_RRESP, twiddle_h_rsc_0_13_RDATA, twiddle_h_rsc_0_13_RID,
      twiddle_h_rsc_0_13_ARREADY, twiddle_h_rsc_0_13_ARVALID, twiddle_h_rsc_0_13_ARUSER,
      twiddle_h_rsc_0_13_ARREGION, twiddle_h_rsc_0_13_ARQOS, twiddle_h_rsc_0_13_ARPROT,
      twiddle_h_rsc_0_13_ARCACHE, twiddle_h_rsc_0_13_ARLOCK, twiddle_h_rsc_0_13_ARBURST,
      twiddle_h_rsc_0_13_ARSIZE, twiddle_h_rsc_0_13_ARLEN, twiddle_h_rsc_0_13_ARADDR,
      twiddle_h_rsc_0_13_ARID, twiddle_h_rsc_0_13_BREADY, twiddle_h_rsc_0_13_BVALID,
      twiddle_h_rsc_0_13_BUSER, twiddle_h_rsc_0_13_BRESP, twiddle_h_rsc_0_13_BID,
      twiddle_h_rsc_0_13_WREADY, twiddle_h_rsc_0_13_WVALID, twiddle_h_rsc_0_13_WUSER,
      twiddle_h_rsc_0_13_WLAST, twiddle_h_rsc_0_13_WSTRB, twiddle_h_rsc_0_13_WDATA,
      twiddle_h_rsc_0_13_AWREADY, twiddle_h_rsc_0_13_AWVALID, twiddle_h_rsc_0_13_AWUSER,
      twiddle_h_rsc_0_13_AWREGION, twiddle_h_rsc_0_13_AWQOS, twiddle_h_rsc_0_13_AWPROT,
      twiddle_h_rsc_0_13_AWCACHE, twiddle_h_rsc_0_13_AWLOCK, twiddle_h_rsc_0_13_AWBURST,
      twiddle_h_rsc_0_13_AWSIZE, twiddle_h_rsc_0_13_AWLEN, twiddle_h_rsc_0_13_AWADDR,
      twiddle_h_rsc_0_13_AWID, twiddle_h_rsc_triosy_0_13_lz, twiddle_h_rsc_0_14_s_tdone,
      twiddle_h_rsc_0_14_tr_write_done, twiddle_h_rsc_0_14_RREADY, twiddle_h_rsc_0_14_RVALID,
      twiddle_h_rsc_0_14_RUSER, twiddle_h_rsc_0_14_RLAST, twiddle_h_rsc_0_14_RRESP,
      twiddle_h_rsc_0_14_RDATA, twiddle_h_rsc_0_14_RID, twiddle_h_rsc_0_14_ARREADY,
      twiddle_h_rsc_0_14_ARVALID, twiddle_h_rsc_0_14_ARUSER, twiddle_h_rsc_0_14_ARREGION,
      twiddle_h_rsc_0_14_ARQOS, twiddle_h_rsc_0_14_ARPROT, twiddle_h_rsc_0_14_ARCACHE,
      twiddle_h_rsc_0_14_ARLOCK, twiddle_h_rsc_0_14_ARBURST, twiddle_h_rsc_0_14_ARSIZE,
      twiddle_h_rsc_0_14_ARLEN, twiddle_h_rsc_0_14_ARADDR, twiddle_h_rsc_0_14_ARID,
      twiddle_h_rsc_0_14_BREADY, twiddle_h_rsc_0_14_BVALID, twiddle_h_rsc_0_14_BUSER,
      twiddle_h_rsc_0_14_BRESP, twiddle_h_rsc_0_14_BID, twiddle_h_rsc_0_14_WREADY,
      twiddle_h_rsc_0_14_WVALID, twiddle_h_rsc_0_14_WUSER, twiddle_h_rsc_0_14_WLAST,
      twiddle_h_rsc_0_14_WSTRB, twiddle_h_rsc_0_14_WDATA, twiddle_h_rsc_0_14_AWREADY,
      twiddle_h_rsc_0_14_AWVALID, twiddle_h_rsc_0_14_AWUSER, twiddle_h_rsc_0_14_AWREGION,
      twiddle_h_rsc_0_14_AWQOS, twiddle_h_rsc_0_14_AWPROT, twiddle_h_rsc_0_14_AWCACHE,
      twiddle_h_rsc_0_14_AWLOCK, twiddle_h_rsc_0_14_AWBURST, twiddle_h_rsc_0_14_AWSIZE,
      twiddle_h_rsc_0_14_AWLEN, twiddle_h_rsc_0_14_AWADDR, twiddle_h_rsc_0_14_AWID,
      twiddle_h_rsc_triosy_0_14_lz, twiddle_h_rsc_0_15_s_tdone, twiddle_h_rsc_0_15_tr_write_done,
      twiddle_h_rsc_0_15_RREADY, twiddle_h_rsc_0_15_RVALID, twiddle_h_rsc_0_15_RUSER,
      twiddle_h_rsc_0_15_RLAST, twiddle_h_rsc_0_15_RRESP, twiddle_h_rsc_0_15_RDATA,
      twiddle_h_rsc_0_15_RID, twiddle_h_rsc_0_15_ARREADY, twiddle_h_rsc_0_15_ARVALID,
      twiddle_h_rsc_0_15_ARUSER, twiddle_h_rsc_0_15_ARREGION, twiddle_h_rsc_0_15_ARQOS,
      twiddle_h_rsc_0_15_ARPROT, twiddle_h_rsc_0_15_ARCACHE, twiddle_h_rsc_0_15_ARLOCK,
      twiddle_h_rsc_0_15_ARBURST, twiddle_h_rsc_0_15_ARSIZE, twiddle_h_rsc_0_15_ARLEN,
      twiddle_h_rsc_0_15_ARADDR, twiddle_h_rsc_0_15_ARID, twiddle_h_rsc_0_15_BREADY,
      twiddle_h_rsc_0_15_BVALID, twiddle_h_rsc_0_15_BUSER, twiddle_h_rsc_0_15_BRESP,
      twiddle_h_rsc_0_15_BID, twiddle_h_rsc_0_15_WREADY, twiddle_h_rsc_0_15_WVALID,
      twiddle_h_rsc_0_15_WUSER, twiddle_h_rsc_0_15_WLAST, twiddle_h_rsc_0_15_WSTRB,
      twiddle_h_rsc_0_15_WDATA, twiddle_h_rsc_0_15_AWREADY, twiddle_h_rsc_0_15_AWVALID,
      twiddle_h_rsc_0_15_AWUSER, twiddle_h_rsc_0_15_AWREGION, twiddle_h_rsc_0_15_AWQOS,
      twiddle_h_rsc_0_15_AWPROT, twiddle_h_rsc_0_15_AWCACHE, twiddle_h_rsc_0_15_AWLOCK,
      twiddle_h_rsc_0_15_AWBURST, twiddle_h_rsc_0_15_AWSIZE, twiddle_h_rsc_0_15_AWLEN,
      twiddle_h_rsc_0_15_AWADDR, twiddle_h_rsc_0_15_AWID, twiddle_h_rsc_triosy_0_15_lz
);
  input clk;
  input rst;
  output [3:0] xt_rsc_0_0_adra;
  output [31:0] xt_rsc_0_0_da;
  output xt_rsc_0_0_wea;
  input [31:0] xt_rsc_0_0_qa;
  output xt_rsc_triosy_0_0_lz;
  output [3:0] xt_rsc_0_1_adra;
  output [31:0] xt_rsc_0_1_da;
  output xt_rsc_0_1_wea;
  input [31:0] xt_rsc_0_1_qa;
  output xt_rsc_triosy_0_1_lz;
  output [3:0] xt_rsc_0_2_adra;
  output [31:0] xt_rsc_0_2_da;
  output xt_rsc_0_2_wea;
  input [31:0] xt_rsc_0_2_qa;
  output xt_rsc_triosy_0_2_lz;
  output [3:0] xt_rsc_0_3_adra;
  output [31:0] xt_rsc_0_3_da;
  output xt_rsc_0_3_wea;
  input [31:0] xt_rsc_0_3_qa;
  output xt_rsc_triosy_0_3_lz;
  output [3:0] xt_rsc_0_4_adra;
  output [31:0] xt_rsc_0_4_da;
  output xt_rsc_0_4_wea;
  input [31:0] xt_rsc_0_4_qa;
  output xt_rsc_triosy_0_4_lz;
  output [3:0] xt_rsc_0_5_adra;
  output [31:0] xt_rsc_0_5_da;
  output xt_rsc_0_5_wea;
  input [31:0] xt_rsc_0_5_qa;
  output xt_rsc_triosy_0_5_lz;
  output [3:0] xt_rsc_0_6_adra;
  output [31:0] xt_rsc_0_6_da;
  output xt_rsc_0_6_wea;
  input [31:0] xt_rsc_0_6_qa;
  output xt_rsc_triosy_0_6_lz;
  output [3:0] xt_rsc_0_7_adra;
  output [31:0] xt_rsc_0_7_da;
  output xt_rsc_0_7_wea;
  input [31:0] xt_rsc_0_7_qa;
  output xt_rsc_triosy_0_7_lz;
  output [3:0] xt_rsc_0_8_adra;
  output [31:0] xt_rsc_0_8_da;
  output xt_rsc_0_8_wea;
  input [31:0] xt_rsc_0_8_qa;
  output xt_rsc_triosy_0_8_lz;
  output [3:0] xt_rsc_0_9_adra;
  output [31:0] xt_rsc_0_9_da;
  output xt_rsc_0_9_wea;
  input [31:0] xt_rsc_0_9_qa;
  output xt_rsc_triosy_0_9_lz;
  output [3:0] xt_rsc_0_10_adra;
  output [31:0] xt_rsc_0_10_da;
  output xt_rsc_0_10_wea;
  input [31:0] xt_rsc_0_10_qa;
  output xt_rsc_triosy_0_10_lz;
  output [3:0] xt_rsc_0_11_adra;
  output [31:0] xt_rsc_0_11_da;
  output xt_rsc_0_11_wea;
  input [31:0] xt_rsc_0_11_qa;
  output xt_rsc_triosy_0_11_lz;
  output [3:0] xt_rsc_0_12_adra;
  output [31:0] xt_rsc_0_12_da;
  output xt_rsc_0_12_wea;
  input [31:0] xt_rsc_0_12_qa;
  output xt_rsc_triosy_0_12_lz;
  output [3:0] xt_rsc_0_13_adra;
  output [31:0] xt_rsc_0_13_da;
  output xt_rsc_0_13_wea;
  input [31:0] xt_rsc_0_13_qa;
  output xt_rsc_triosy_0_13_lz;
  output [3:0] xt_rsc_0_14_adra;
  output [31:0] xt_rsc_0_14_da;
  output xt_rsc_0_14_wea;
  input [31:0] xt_rsc_0_14_qa;
  output xt_rsc_triosy_0_14_lz;
  output [3:0] xt_rsc_0_15_adra;
  output [31:0] xt_rsc_0_15_da;
  output xt_rsc_0_15_wea;
  input [31:0] xt_rsc_0_15_qa;
  output xt_rsc_triosy_0_15_lz;
  output [3:0] xt_rsc_0_16_adra;
  output [31:0] xt_rsc_0_16_da;
  output xt_rsc_0_16_wea;
  input [31:0] xt_rsc_0_16_qa;
  output xt_rsc_triosy_0_16_lz;
  output [3:0] xt_rsc_0_17_adra;
  output [31:0] xt_rsc_0_17_da;
  output xt_rsc_0_17_wea;
  input [31:0] xt_rsc_0_17_qa;
  output xt_rsc_triosy_0_17_lz;
  output [3:0] xt_rsc_0_18_adra;
  output [31:0] xt_rsc_0_18_da;
  output xt_rsc_0_18_wea;
  input [31:0] xt_rsc_0_18_qa;
  output xt_rsc_triosy_0_18_lz;
  output [3:0] xt_rsc_0_19_adra;
  output [31:0] xt_rsc_0_19_da;
  output xt_rsc_0_19_wea;
  input [31:0] xt_rsc_0_19_qa;
  output xt_rsc_triosy_0_19_lz;
  output [3:0] xt_rsc_0_20_adra;
  output [31:0] xt_rsc_0_20_da;
  output xt_rsc_0_20_wea;
  input [31:0] xt_rsc_0_20_qa;
  output xt_rsc_triosy_0_20_lz;
  output [3:0] xt_rsc_0_21_adra;
  output [31:0] xt_rsc_0_21_da;
  output xt_rsc_0_21_wea;
  input [31:0] xt_rsc_0_21_qa;
  output xt_rsc_triosy_0_21_lz;
  output [3:0] xt_rsc_0_22_adra;
  output [31:0] xt_rsc_0_22_da;
  output xt_rsc_0_22_wea;
  input [31:0] xt_rsc_0_22_qa;
  output xt_rsc_triosy_0_22_lz;
  output [3:0] xt_rsc_0_23_adra;
  output [31:0] xt_rsc_0_23_da;
  output xt_rsc_0_23_wea;
  input [31:0] xt_rsc_0_23_qa;
  output xt_rsc_triosy_0_23_lz;
  output [3:0] xt_rsc_0_24_adra;
  output [31:0] xt_rsc_0_24_da;
  output xt_rsc_0_24_wea;
  input [31:0] xt_rsc_0_24_qa;
  output xt_rsc_triosy_0_24_lz;
  output [3:0] xt_rsc_0_25_adra;
  output [31:0] xt_rsc_0_25_da;
  output xt_rsc_0_25_wea;
  input [31:0] xt_rsc_0_25_qa;
  output xt_rsc_triosy_0_25_lz;
  output [3:0] xt_rsc_0_26_adra;
  output [31:0] xt_rsc_0_26_da;
  output xt_rsc_0_26_wea;
  input [31:0] xt_rsc_0_26_qa;
  output xt_rsc_triosy_0_26_lz;
  output [3:0] xt_rsc_0_27_adra;
  output [31:0] xt_rsc_0_27_da;
  output xt_rsc_0_27_wea;
  input [31:0] xt_rsc_0_27_qa;
  output xt_rsc_triosy_0_27_lz;
  output [3:0] xt_rsc_0_28_adra;
  output [31:0] xt_rsc_0_28_da;
  output xt_rsc_0_28_wea;
  input [31:0] xt_rsc_0_28_qa;
  output xt_rsc_triosy_0_28_lz;
  output [3:0] xt_rsc_0_29_adra;
  output [31:0] xt_rsc_0_29_da;
  output xt_rsc_0_29_wea;
  input [31:0] xt_rsc_0_29_qa;
  output xt_rsc_triosy_0_29_lz;
  output [3:0] xt_rsc_0_30_adra;
  output [31:0] xt_rsc_0_30_da;
  output xt_rsc_0_30_wea;
  input [31:0] xt_rsc_0_30_qa;
  output xt_rsc_triosy_0_30_lz;
  output [3:0] xt_rsc_0_31_adra;
  output [31:0] xt_rsc_0_31_da;
  output xt_rsc_0_31_wea;
  input [31:0] xt_rsc_0_31_qa;
  output xt_rsc_triosy_0_31_lz;
  output [3:0] xt_rsc_1_0_adra;
  output [31:0] xt_rsc_1_0_da;
  output xt_rsc_1_0_wea;
  input [31:0] xt_rsc_1_0_qa;
  output xt_rsc_triosy_1_0_lz;
  output [3:0] xt_rsc_1_1_adra;
  output [31:0] xt_rsc_1_1_da;
  output xt_rsc_1_1_wea;
  input [31:0] xt_rsc_1_1_qa;
  output xt_rsc_triosy_1_1_lz;
  output [3:0] xt_rsc_1_2_adra;
  output [31:0] xt_rsc_1_2_da;
  output xt_rsc_1_2_wea;
  input [31:0] xt_rsc_1_2_qa;
  output xt_rsc_triosy_1_2_lz;
  output [3:0] xt_rsc_1_3_adra;
  output [31:0] xt_rsc_1_3_da;
  output xt_rsc_1_3_wea;
  input [31:0] xt_rsc_1_3_qa;
  output xt_rsc_triosy_1_3_lz;
  output [3:0] xt_rsc_1_4_adra;
  output [31:0] xt_rsc_1_4_da;
  output xt_rsc_1_4_wea;
  input [31:0] xt_rsc_1_4_qa;
  output xt_rsc_triosy_1_4_lz;
  output [3:0] xt_rsc_1_5_adra;
  output [31:0] xt_rsc_1_5_da;
  output xt_rsc_1_5_wea;
  input [31:0] xt_rsc_1_5_qa;
  output xt_rsc_triosy_1_5_lz;
  output [3:0] xt_rsc_1_6_adra;
  output [31:0] xt_rsc_1_6_da;
  output xt_rsc_1_6_wea;
  input [31:0] xt_rsc_1_6_qa;
  output xt_rsc_triosy_1_6_lz;
  output [3:0] xt_rsc_1_7_adra;
  output [31:0] xt_rsc_1_7_da;
  output xt_rsc_1_7_wea;
  input [31:0] xt_rsc_1_7_qa;
  output xt_rsc_triosy_1_7_lz;
  output [3:0] xt_rsc_1_8_adra;
  output [31:0] xt_rsc_1_8_da;
  output xt_rsc_1_8_wea;
  input [31:0] xt_rsc_1_8_qa;
  output xt_rsc_triosy_1_8_lz;
  output [3:0] xt_rsc_1_9_adra;
  output [31:0] xt_rsc_1_9_da;
  output xt_rsc_1_9_wea;
  input [31:0] xt_rsc_1_9_qa;
  output xt_rsc_triosy_1_9_lz;
  output [3:0] xt_rsc_1_10_adra;
  output [31:0] xt_rsc_1_10_da;
  output xt_rsc_1_10_wea;
  input [31:0] xt_rsc_1_10_qa;
  output xt_rsc_triosy_1_10_lz;
  output [3:0] xt_rsc_1_11_adra;
  output [31:0] xt_rsc_1_11_da;
  output xt_rsc_1_11_wea;
  input [31:0] xt_rsc_1_11_qa;
  output xt_rsc_triosy_1_11_lz;
  output [3:0] xt_rsc_1_12_adra;
  output [31:0] xt_rsc_1_12_da;
  output xt_rsc_1_12_wea;
  input [31:0] xt_rsc_1_12_qa;
  output xt_rsc_triosy_1_12_lz;
  output [3:0] xt_rsc_1_13_adra;
  output [31:0] xt_rsc_1_13_da;
  output xt_rsc_1_13_wea;
  input [31:0] xt_rsc_1_13_qa;
  output xt_rsc_triosy_1_13_lz;
  output [3:0] xt_rsc_1_14_adra;
  output [31:0] xt_rsc_1_14_da;
  output xt_rsc_1_14_wea;
  input [31:0] xt_rsc_1_14_qa;
  output xt_rsc_triosy_1_14_lz;
  output [3:0] xt_rsc_1_15_adra;
  output [31:0] xt_rsc_1_15_da;
  output xt_rsc_1_15_wea;
  input [31:0] xt_rsc_1_15_qa;
  output xt_rsc_triosy_1_15_lz;
  output [3:0] xt_rsc_1_16_adra;
  output [31:0] xt_rsc_1_16_da;
  output xt_rsc_1_16_wea;
  input [31:0] xt_rsc_1_16_qa;
  output xt_rsc_triosy_1_16_lz;
  output [3:0] xt_rsc_1_17_adra;
  output [31:0] xt_rsc_1_17_da;
  output xt_rsc_1_17_wea;
  input [31:0] xt_rsc_1_17_qa;
  output xt_rsc_triosy_1_17_lz;
  output [3:0] xt_rsc_1_18_adra;
  output [31:0] xt_rsc_1_18_da;
  output xt_rsc_1_18_wea;
  input [31:0] xt_rsc_1_18_qa;
  output xt_rsc_triosy_1_18_lz;
  output [3:0] xt_rsc_1_19_adra;
  output [31:0] xt_rsc_1_19_da;
  output xt_rsc_1_19_wea;
  input [31:0] xt_rsc_1_19_qa;
  output xt_rsc_triosy_1_19_lz;
  output [3:0] xt_rsc_1_20_adra;
  output [31:0] xt_rsc_1_20_da;
  output xt_rsc_1_20_wea;
  input [31:0] xt_rsc_1_20_qa;
  output xt_rsc_triosy_1_20_lz;
  output [3:0] xt_rsc_1_21_adra;
  output [31:0] xt_rsc_1_21_da;
  output xt_rsc_1_21_wea;
  input [31:0] xt_rsc_1_21_qa;
  output xt_rsc_triosy_1_21_lz;
  output [3:0] xt_rsc_1_22_adra;
  output [31:0] xt_rsc_1_22_da;
  output xt_rsc_1_22_wea;
  input [31:0] xt_rsc_1_22_qa;
  output xt_rsc_triosy_1_22_lz;
  output [3:0] xt_rsc_1_23_adra;
  output [31:0] xt_rsc_1_23_da;
  output xt_rsc_1_23_wea;
  input [31:0] xt_rsc_1_23_qa;
  output xt_rsc_triosy_1_23_lz;
  output [3:0] xt_rsc_1_24_adra;
  output [31:0] xt_rsc_1_24_da;
  output xt_rsc_1_24_wea;
  input [31:0] xt_rsc_1_24_qa;
  output xt_rsc_triosy_1_24_lz;
  output [3:0] xt_rsc_1_25_adra;
  output [31:0] xt_rsc_1_25_da;
  output xt_rsc_1_25_wea;
  input [31:0] xt_rsc_1_25_qa;
  output xt_rsc_triosy_1_25_lz;
  output [3:0] xt_rsc_1_26_adra;
  output [31:0] xt_rsc_1_26_da;
  output xt_rsc_1_26_wea;
  input [31:0] xt_rsc_1_26_qa;
  output xt_rsc_triosy_1_26_lz;
  output [3:0] xt_rsc_1_27_adra;
  output [31:0] xt_rsc_1_27_da;
  output xt_rsc_1_27_wea;
  input [31:0] xt_rsc_1_27_qa;
  output xt_rsc_triosy_1_27_lz;
  output [3:0] xt_rsc_1_28_adra;
  output [31:0] xt_rsc_1_28_da;
  output xt_rsc_1_28_wea;
  input [31:0] xt_rsc_1_28_qa;
  output xt_rsc_triosy_1_28_lz;
  output [3:0] xt_rsc_1_29_adra;
  output [31:0] xt_rsc_1_29_da;
  output xt_rsc_1_29_wea;
  input [31:0] xt_rsc_1_29_qa;
  output xt_rsc_triosy_1_29_lz;
  output [3:0] xt_rsc_1_30_adra;
  output [31:0] xt_rsc_1_30_da;
  output xt_rsc_1_30_wea;
  input [31:0] xt_rsc_1_30_qa;
  output xt_rsc_triosy_1_30_lz;
  output [3:0] xt_rsc_1_31_adra;
  output [31:0] xt_rsc_1_31_da;
  output xt_rsc_1_31_wea;
  input [31:0] xt_rsc_1_31_qa;
  output xt_rsc_triosy_1_31_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [31:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input twiddle_rsc_0_0_s_tdone;
  input twiddle_rsc_0_0_tr_write_done;
  input twiddle_rsc_0_0_RREADY;
  output twiddle_rsc_0_0_RVALID;
  output twiddle_rsc_0_0_RUSER;
  output twiddle_rsc_0_0_RLAST;
  output [1:0] twiddle_rsc_0_0_RRESP;
  output [31:0] twiddle_rsc_0_0_RDATA;
  output twiddle_rsc_0_0_RID;
  output twiddle_rsc_0_0_ARREADY;
  input twiddle_rsc_0_0_ARVALID;
  input twiddle_rsc_0_0_ARUSER;
  input [3:0] twiddle_rsc_0_0_ARREGION;
  input [3:0] twiddle_rsc_0_0_ARQOS;
  input [2:0] twiddle_rsc_0_0_ARPROT;
  input [3:0] twiddle_rsc_0_0_ARCACHE;
  input twiddle_rsc_0_0_ARLOCK;
  input [1:0] twiddle_rsc_0_0_ARBURST;
  input [2:0] twiddle_rsc_0_0_ARSIZE;
  input [7:0] twiddle_rsc_0_0_ARLEN;
  input [11:0] twiddle_rsc_0_0_ARADDR;
  input twiddle_rsc_0_0_ARID;
  input twiddle_rsc_0_0_BREADY;
  output twiddle_rsc_0_0_BVALID;
  output twiddle_rsc_0_0_BUSER;
  output [1:0] twiddle_rsc_0_0_BRESP;
  output twiddle_rsc_0_0_BID;
  output twiddle_rsc_0_0_WREADY;
  input twiddle_rsc_0_0_WVALID;
  input twiddle_rsc_0_0_WUSER;
  input twiddle_rsc_0_0_WLAST;
  input [3:0] twiddle_rsc_0_0_WSTRB;
  input [31:0] twiddle_rsc_0_0_WDATA;
  output twiddle_rsc_0_0_AWREADY;
  input twiddle_rsc_0_0_AWVALID;
  input twiddle_rsc_0_0_AWUSER;
  input [3:0] twiddle_rsc_0_0_AWREGION;
  input [3:0] twiddle_rsc_0_0_AWQOS;
  input [2:0] twiddle_rsc_0_0_AWPROT;
  input [3:0] twiddle_rsc_0_0_AWCACHE;
  input twiddle_rsc_0_0_AWLOCK;
  input [1:0] twiddle_rsc_0_0_AWBURST;
  input [2:0] twiddle_rsc_0_0_AWSIZE;
  input [7:0] twiddle_rsc_0_0_AWLEN;
  input [11:0] twiddle_rsc_0_0_AWADDR;
  input twiddle_rsc_0_0_AWID;
  output twiddle_rsc_triosy_0_0_lz;
  input twiddle_rsc_0_1_s_tdone;
  input twiddle_rsc_0_1_tr_write_done;
  input twiddle_rsc_0_1_RREADY;
  output twiddle_rsc_0_1_RVALID;
  output twiddle_rsc_0_1_RUSER;
  output twiddle_rsc_0_1_RLAST;
  output [1:0] twiddle_rsc_0_1_RRESP;
  output [31:0] twiddle_rsc_0_1_RDATA;
  output twiddle_rsc_0_1_RID;
  output twiddle_rsc_0_1_ARREADY;
  input twiddle_rsc_0_1_ARVALID;
  input twiddle_rsc_0_1_ARUSER;
  input [3:0] twiddle_rsc_0_1_ARREGION;
  input [3:0] twiddle_rsc_0_1_ARQOS;
  input [2:0] twiddle_rsc_0_1_ARPROT;
  input [3:0] twiddle_rsc_0_1_ARCACHE;
  input twiddle_rsc_0_1_ARLOCK;
  input [1:0] twiddle_rsc_0_1_ARBURST;
  input [2:0] twiddle_rsc_0_1_ARSIZE;
  input [7:0] twiddle_rsc_0_1_ARLEN;
  input [11:0] twiddle_rsc_0_1_ARADDR;
  input twiddle_rsc_0_1_ARID;
  input twiddle_rsc_0_1_BREADY;
  output twiddle_rsc_0_1_BVALID;
  output twiddle_rsc_0_1_BUSER;
  output [1:0] twiddle_rsc_0_1_BRESP;
  output twiddle_rsc_0_1_BID;
  output twiddle_rsc_0_1_WREADY;
  input twiddle_rsc_0_1_WVALID;
  input twiddle_rsc_0_1_WUSER;
  input twiddle_rsc_0_1_WLAST;
  input [3:0] twiddle_rsc_0_1_WSTRB;
  input [31:0] twiddle_rsc_0_1_WDATA;
  output twiddle_rsc_0_1_AWREADY;
  input twiddle_rsc_0_1_AWVALID;
  input twiddle_rsc_0_1_AWUSER;
  input [3:0] twiddle_rsc_0_1_AWREGION;
  input [3:0] twiddle_rsc_0_1_AWQOS;
  input [2:0] twiddle_rsc_0_1_AWPROT;
  input [3:0] twiddle_rsc_0_1_AWCACHE;
  input twiddle_rsc_0_1_AWLOCK;
  input [1:0] twiddle_rsc_0_1_AWBURST;
  input [2:0] twiddle_rsc_0_1_AWSIZE;
  input [7:0] twiddle_rsc_0_1_AWLEN;
  input [11:0] twiddle_rsc_0_1_AWADDR;
  input twiddle_rsc_0_1_AWID;
  output twiddle_rsc_triosy_0_1_lz;
  input twiddle_rsc_0_2_s_tdone;
  input twiddle_rsc_0_2_tr_write_done;
  input twiddle_rsc_0_2_RREADY;
  output twiddle_rsc_0_2_RVALID;
  output twiddle_rsc_0_2_RUSER;
  output twiddle_rsc_0_2_RLAST;
  output [1:0] twiddle_rsc_0_2_RRESP;
  output [31:0] twiddle_rsc_0_2_RDATA;
  output twiddle_rsc_0_2_RID;
  output twiddle_rsc_0_2_ARREADY;
  input twiddle_rsc_0_2_ARVALID;
  input twiddle_rsc_0_2_ARUSER;
  input [3:0] twiddle_rsc_0_2_ARREGION;
  input [3:0] twiddle_rsc_0_2_ARQOS;
  input [2:0] twiddle_rsc_0_2_ARPROT;
  input [3:0] twiddle_rsc_0_2_ARCACHE;
  input twiddle_rsc_0_2_ARLOCK;
  input [1:0] twiddle_rsc_0_2_ARBURST;
  input [2:0] twiddle_rsc_0_2_ARSIZE;
  input [7:0] twiddle_rsc_0_2_ARLEN;
  input [11:0] twiddle_rsc_0_2_ARADDR;
  input twiddle_rsc_0_2_ARID;
  input twiddle_rsc_0_2_BREADY;
  output twiddle_rsc_0_2_BVALID;
  output twiddle_rsc_0_2_BUSER;
  output [1:0] twiddle_rsc_0_2_BRESP;
  output twiddle_rsc_0_2_BID;
  output twiddle_rsc_0_2_WREADY;
  input twiddle_rsc_0_2_WVALID;
  input twiddle_rsc_0_2_WUSER;
  input twiddle_rsc_0_2_WLAST;
  input [3:0] twiddle_rsc_0_2_WSTRB;
  input [31:0] twiddle_rsc_0_2_WDATA;
  output twiddle_rsc_0_2_AWREADY;
  input twiddle_rsc_0_2_AWVALID;
  input twiddle_rsc_0_2_AWUSER;
  input [3:0] twiddle_rsc_0_2_AWREGION;
  input [3:0] twiddle_rsc_0_2_AWQOS;
  input [2:0] twiddle_rsc_0_2_AWPROT;
  input [3:0] twiddle_rsc_0_2_AWCACHE;
  input twiddle_rsc_0_2_AWLOCK;
  input [1:0] twiddle_rsc_0_2_AWBURST;
  input [2:0] twiddle_rsc_0_2_AWSIZE;
  input [7:0] twiddle_rsc_0_2_AWLEN;
  input [11:0] twiddle_rsc_0_2_AWADDR;
  input twiddle_rsc_0_2_AWID;
  output twiddle_rsc_triosy_0_2_lz;
  input twiddle_rsc_0_3_s_tdone;
  input twiddle_rsc_0_3_tr_write_done;
  input twiddle_rsc_0_3_RREADY;
  output twiddle_rsc_0_3_RVALID;
  output twiddle_rsc_0_3_RUSER;
  output twiddle_rsc_0_3_RLAST;
  output [1:0] twiddle_rsc_0_3_RRESP;
  output [31:0] twiddle_rsc_0_3_RDATA;
  output twiddle_rsc_0_3_RID;
  output twiddle_rsc_0_3_ARREADY;
  input twiddle_rsc_0_3_ARVALID;
  input twiddle_rsc_0_3_ARUSER;
  input [3:0] twiddle_rsc_0_3_ARREGION;
  input [3:0] twiddle_rsc_0_3_ARQOS;
  input [2:0] twiddle_rsc_0_3_ARPROT;
  input [3:0] twiddle_rsc_0_3_ARCACHE;
  input twiddle_rsc_0_3_ARLOCK;
  input [1:0] twiddle_rsc_0_3_ARBURST;
  input [2:0] twiddle_rsc_0_3_ARSIZE;
  input [7:0] twiddle_rsc_0_3_ARLEN;
  input [11:0] twiddle_rsc_0_3_ARADDR;
  input twiddle_rsc_0_3_ARID;
  input twiddle_rsc_0_3_BREADY;
  output twiddle_rsc_0_3_BVALID;
  output twiddle_rsc_0_3_BUSER;
  output [1:0] twiddle_rsc_0_3_BRESP;
  output twiddle_rsc_0_3_BID;
  output twiddle_rsc_0_3_WREADY;
  input twiddle_rsc_0_3_WVALID;
  input twiddle_rsc_0_3_WUSER;
  input twiddle_rsc_0_3_WLAST;
  input [3:0] twiddle_rsc_0_3_WSTRB;
  input [31:0] twiddle_rsc_0_3_WDATA;
  output twiddle_rsc_0_3_AWREADY;
  input twiddle_rsc_0_3_AWVALID;
  input twiddle_rsc_0_3_AWUSER;
  input [3:0] twiddle_rsc_0_3_AWREGION;
  input [3:0] twiddle_rsc_0_3_AWQOS;
  input [2:0] twiddle_rsc_0_3_AWPROT;
  input [3:0] twiddle_rsc_0_3_AWCACHE;
  input twiddle_rsc_0_3_AWLOCK;
  input [1:0] twiddle_rsc_0_3_AWBURST;
  input [2:0] twiddle_rsc_0_3_AWSIZE;
  input [7:0] twiddle_rsc_0_3_AWLEN;
  input [11:0] twiddle_rsc_0_3_AWADDR;
  input twiddle_rsc_0_3_AWID;
  output twiddle_rsc_triosy_0_3_lz;
  input twiddle_rsc_0_4_s_tdone;
  input twiddle_rsc_0_4_tr_write_done;
  input twiddle_rsc_0_4_RREADY;
  output twiddle_rsc_0_4_RVALID;
  output twiddle_rsc_0_4_RUSER;
  output twiddle_rsc_0_4_RLAST;
  output [1:0] twiddle_rsc_0_4_RRESP;
  output [31:0] twiddle_rsc_0_4_RDATA;
  output twiddle_rsc_0_4_RID;
  output twiddle_rsc_0_4_ARREADY;
  input twiddle_rsc_0_4_ARVALID;
  input twiddle_rsc_0_4_ARUSER;
  input [3:0] twiddle_rsc_0_4_ARREGION;
  input [3:0] twiddle_rsc_0_4_ARQOS;
  input [2:0] twiddle_rsc_0_4_ARPROT;
  input [3:0] twiddle_rsc_0_4_ARCACHE;
  input twiddle_rsc_0_4_ARLOCK;
  input [1:0] twiddle_rsc_0_4_ARBURST;
  input [2:0] twiddle_rsc_0_4_ARSIZE;
  input [7:0] twiddle_rsc_0_4_ARLEN;
  input [11:0] twiddle_rsc_0_4_ARADDR;
  input twiddle_rsc_0_4_ARID;
  input twiddle_rsc_0_4_BREADY;
  output twiddle_rsc_0_4_BVALID;
  output twiddle_rsc_0_4_BUSER;
  output [1:0] twiddle_rsc_0_4_BRESP;
  output twiddle_rsc_0_4_BID;
  output twiddle_rsc_0_4_WREADY;
  input twiddle_rsc_0_4_WVALID;
  input twiddle_rsc_0_4_WUSER;
  input twiddle_rsc_0_4_WLAST;
  input [3:0] twiddle_rsc_0_4_WSTRB;
  input [31:0] twiddle_rsc_0_4_WDATA;
  output twiddle_rsc_0_4_AWREADY;
  input twiddle_rsc_0_4_AWVALID;
  input twiddle_rsc_0_4_AWUSER;
  input [3:0] twiddle_rsc_0_4_AWREGION;
  input [3:0] twiddle_rsc_0_4_AWQOS;
  input [2:0] twiddle_rsc_0_4_AWPROT;
  input [3:0] twiddle_rsc_0_4_AWCACHE;
  input twiddle_rsc_0_4_AWLOCK;
  input [1:0] twiddle_rsc_0_4_AWBURST;
  input [2:0] twiddle_rsc_0_4_AWSIZE;
  input [7:0] twiddle_rsc_0_4_AWLEN;
  input [11:0] twiddle_rsc_0_4_AWADDR;
  input twiddle_rsc_0_4_AWID;
  output twiddle_rsc_triosy_0_4_lz;
  input twiddle_rsc_0_5_s_tdone;
  input twiddle_rsc_0_5_tr_write_done;
  input twiddle_rsc_0_5_RREADY;
  output twiddle_rsc_0_5_RVALID;
  output twiddle_rsc_0_5_RUSER;
  output twiddle_rsc_0_5_RLAST;
  output [1:0] twiddle_rsc_0_5_RRESP;
  output [31:0] twiddle_rsc_0_5_RDATA;
  output twiddle_rsc_0_5_RID;
  output twiddle_rsc_0_5_ARREADY;
  input twiddle_rsc_0_5_ARVALID;
  input twiddle_rsc_0_5_ARUSER;
  input [3:0] twiddle_rsc_0_5_ARREGION;
  input [3:0] twiddle_rsc_0_5_ARQOS;
  input [2:0] twiddle_rsc_0_5_ARPROT;
  input [3:0] twiddle_rsc_0_5_ARCACHE;
  input twiddle_rsc_0_5_ARLOCK;
  input [1:0] twiddle_rsc_0_5_ARBURST;
  input [2:0] twiddle_rsc_0_5_ARSIZE;
  input [7:0] twiddle_rsc_0_5_ARLEN;
  input [11:0] twiddle_rsc_0_5_ARADDR;
  input twiddle_rsc_0_5_ARID;
  input twiddle_rsc_0_5_BREADY;
  output twiddle_rsc_0_5_BVALID;
  output twiddle_rsc_0_5_BUSER;
  output [1:0] twiddle_rsc_0_5_BRESP;
  output twiddle_rsc_0_5_BID;
  output twiddle_rsc_0_5_WREADY;
  input twiddle_rsc_0_5_WVALID;
  input twiddle_rsc_0_5_WUSER;
  input twiddle_rsc_0_5_WLAST;
  input [3:0] twiddle_rsc_0_5_WSTRB;
  input [31:0] twiddle_rsc_0_5_WDATA;
  output twiddle_rsc_0_5_AWREADY;
  input twiddle_rsc_0_5_AWVALID;
  input twiddle_rsc_0_5_AWUSER;
  input [3:0] twiddle_rsc_0_5_AWREGION;
  input [3:0] twiddle_rsc_0_5_AWQOS;
  input [2:0] twiddle_rsc_0_5_AWPROT;
  input [3:0] twiddle_rsc_0_5_AWCACHE;
  input twiddle_rsc_0_5_AWLOCK;
  input [1:0] twiddle_rsc_0_5_AWBURST;
  input [2:0] twiddle_rsc_0_5_AWSIZE;
  input [7:0] twiddle_rsc_0_5_AWLEN;
  input [11:0] twiddle_rsc_0_5_AWADDR;
  input twiddle_rsc_0_5_AWID;
  output twiddle_rsc_triosy_0_5_lz;
  input twiddle_rsc_0_6_s_tdone;
  input twiddle_rsc_0_6_tr_write_done;
  input twiddle_rsc_0_6_RREADY;
  output twiddle_rsc_0_6_RVALID;
  output twiddle_rsc_0_6_RUSER;
  output twiddle_rsc_0_6_RLAST;
  output [1:0] twiddle_rsc_0_6_RRESP;
  output [31:0] twiddle_rsc_0_6_RDATA;
  output twiddle_rsc_0_6_RID;
  output twiddle_rsc_0_6_ARREADY;
  input twiddle_rsc_0_6_ARVALID;
  input twiddle_rsc_0_6_ARUSER;
  input [3:0] twiddle_rsc_0_6_ARREGION;
  input [3:0] twiddle_rsc_0_6_ARQOS;
  input [2:0] twiddle_rsc_0_6_ARPROT;
  input [3:0] twiddle_rsc_0_6_ARCACHE;
  input twiddle_rsc_0_6_ARLOCK;
  input [1:0] twiddle_rsc_0_6_ARBURST;
  input [2:0] twiddle_rsc_0_6_ARSIZE;
  input [7:0] twiddle_rsc_0_6_ARLEN;
  input [11:0] twiddle_rsc_0_6_ARADDR;
  input twiddle_rsc_0_6_ARID;
  input twiddle_rsc_0_6_BREADY;
  output twiddle_rsc_0_6_BVALID;
  output twiddle_rsc_0_6_BUSER;
  output [1:0] twiddle_rsc_0_6_BRESP;
  output twiddle_rsc_0_6_BID;
  output twiddle_rsc_0_6_WREADY;
  input twiddle_rsc_0_6_WVALID;
  input twiddle_rsc_0_6_WUSER;
  input twiddle_rsc_0_6_WLAST;
  input [3:0] twiddle_rsc_0_6_WSTRB;
  input [31:0] twiddle_rsc_0_6_WDATA;
  output twiddle_rsc_0_6_AWREADY;
  input twiddle_rsc_0_6_AWVALID;
  input twiddle_rsc_0_6_AWUSER;
  input [3:0] twiddle_rsc_0_6_AWREGION;
  input [3:0] twiddle_rsc_0_6_AWQOS;
  input [2:0] twiddle_rsc_0_6_AWPROT;
  input [3:0] twiddle_rsc_0_6_AWCACHE;
  input twiddle_rsc_0_6_AWLOCK;
  input [1:0] twiddle_rsc_0_6_AWBURST;
  input [2:0] twiddle_rsc_0_6_AWSIZE;
  input [7:0] twiddle_rsc_0_6_AWLEN;
  input [11:0] twiddle_rsc_0_6_AWADDR;
  input twiddle_rsc_0_6_AWID;
  output twiddle_rsc_triosy_0_6_lz;
  input twiddle_rsc_0_7_s_tdone;
  input twiddle_rsc_0_7_tr_write_done;
  input twiddle_rsc_0_7_RREADY;
  output twiddle_rsc_0_7_RVALID;
  output twiddle_rsc_0_7_RUSER;
  output twiddle_rsc_0_7_RLAST;
  output [1:0] twiddle_rsc_0_7_RRESP;
  output [31:0] twiddle_rsc_0_7_RDATA;
  output twiddle_rsc_0_7_RID;
  output twiddle_rsc_0_7_ARREADY;
  input twiddle_rsc_0_7_ARVALID;
  input twiddle_rsc_0_7_ARUSER;
  input [3:0] twiddle_rsc_0_7_ARREGION;
  input [3:0] twiddle_rsc_0_7_ARQOS;
  input [2:0] twiddle_rsc_0_7_ARPROT;
  input [3:0] twiddle_rsc_0_7_ARCACHE;
  input twiddle_rsc_0_7_ARLOCK;
  input [1:0] twiddle_rsc_0_7_ARBURST;
  input [2:0] twiddle_rsc_0_7_ARSIZE;
  input [7:0] twiddle_rsc_0_7_ARLEN;
  input [11:0] twiddle_rsc_0_7_ARADDR;
  input twiddle_rsc_0_7_ARID;
  input twiddle_rsc_0_7_BREADY;
  output twiddle_rsc_0_7_BVALID;
  output twiddle_rsc_0_7_BUSER;
  output [1:0] twiddle_rsc_0_7_BRESP;
  output twiddle_rsc_0_7_BID;
  output twiddle_rsc_0_7_WREADY;
  input twiddle_rsc_0_7_WVALID;
  input twiddle_rsc_0_7_WUSER;
  input twiddle_rsc_0_7_WLAST;
  input [3:0] twiddle_rsc_0_7_WSTRB;
  input [31:0] twiddle_rsc_0_7_WDATA;
  output twiddle_rsc_0_7_AWREADY;
  input twiddle_rsc_0_7_AWVALID;
  input twiddle_rsc_0_7_AWUSER;
  input [3:0] twiddle_rsc_0_7_AWREGION;
  input [3:0] twiddle_rsc_0_7_AWQOS;
  input [2:0] twiddle_rsc_0_7_AWPROT;
  input [3:0] twiddle_rsc_0_7_AWCACHE;
  input twiddle_rsc_0_7_AWLOCK;
  input [1:0] twiddle_rsc_0_7_AWBURST;
  input [2:0] twiddle_rsc_0_7_AWSIZE;
  input [7:0] twiddle_rsc_0_7_AWLEN;
  input [11:0] twiddle_rsc_0_7_AWADDR;
  input twiddle_rsc_0_7_AWID;
  output twiddle_rsc_triosy_0_7_lz;
  input twiddle_rsc_0_8_s_tdone;
  input twiddle_rsc_0_8_tr_write_done;
  input twiddle_rsc_0_8_RREADY;
  output twiddle_rsc_0_8_RVALID;
  output twiddle_rsc_0_8_RUSER;
  output twiddle_rsc_0_8_RLAST;
  output [1:0] twiddle_rsc_0_8_RRESP;
  output [31:0] twiddle_rsc_0_8_RDATA;
  output twiddle_rsc_0_8_RID;
  output twiddle_rsc_0_8_ARREADY;
  input twiddle_rsc_0_8_ARVALID;
  input twiddle_rsc_0_8_ARUSER;
  input [3:0] twiddle_rsc_0_8_ARREGION;
  input [3:0] twiddle_rsc_0_8_ARQOS;
  input [2:0] twiddle_rsc_0_8_ARPROT;
  input [3:0] twiddle_rsc_0_8_ARCACHE;
  input twiddle_rsc_0_8_ARLOCK;
  input [1:0] twiddle_rsc_0_8_ARBURST;
  input [2:0] twiddle_rsc_0_8_ARSIZE;
  input [7:0] twiddle_rsc_0_8_ARLEN;
  input [11:0] twiddle_rsc_0_8_ARADDR;
  input twiddle_rsc_0_8_ARID;
  input twiddle_rsc_0_8_BREADY;
  output twiddle_rsc_0_8_BVALID;
  output twiddle_rsc_0_8_BUSER;
  output [1:0] twiddle_rsc_0_8_BRESP;
  output twiddle_rsc_0_8_BID;
  output twiddle_rsc_0_8_WREADY;
  input twiddle_rsc_0_8_WVALID;
  input twiddle_rsc_0_8_WUSER;
  input twiddle_rsc_0_8_WLAST;
  input [3:0] twiddle_rsc_0_8_WSTRB;
  input [31:0] twiddle_rsc_0_8_WDATA;
  output twiddle_rsc_0_8_AWREADY;
  input twiddle_rsc_0_8_AWVALID;
  input twiddle_rsc_0_8_AWUSER;
  input [3:0] twiddle_rsc_0_8_AWREGION;
  input [3:0] twiddle_rsc_0_8_AWQOS;
  input [2:0] twiddle_rsc_0_8_AWPROT;
  input [3:0] twiddle_rsc_0_8_AWCACHE;
  input twiddle_rsc_0_8_AWLOCK;
  input [1:0] twiddle_rsc_0_8_AWBURST;
  input [2:0] twiddle_rsc_0_8_AWSIZE;
  input [7:0] twiddle_rsc_0_8_AWLEN;
  input [11:0] twiddle_rsc_0_8_AWADDR;
  input twiddle_rsc_0_8_AWID;
  output twiddle_rsc_triosy_0_8_lz;
  input twiddle_rsc_0_9_s_tdone;
  input twiddle_rsc_0_9_tr_write_done;
  input twiddle_rsc_0_9_RREADY;
  output twiddle_rsc_0_9_RVALID;
  output twiddle_rsc_0_9_RUSER;
  output twiddle_rsc_0_9_RLAST;
  output [1:0] twiddle_rsc_0_9_RRESP;
  output [31:0] twiddle_rsc_0_9_RDATA;
  output twiddle_rsc_0_9_RID;
  output twiddle_rsc_0_9_ARREADY;
  input twiddle_rsc_0_9_ARVALID;
  input twiddle_rsc_0_9_ARUSER;
  input [3:0] twiddle_rsc_0_9_ARREGION;
  input [3:0] twiddle_rsc_0_9_ARQOS;
  input [2:0] twiddle_rsc_0_9_ARPROT;
  input [3:0] twiddle_rsc_0_9_ARCACHE;
  input twiddle_rsc_0_9_ARLOCK;
  input [1:0] twiddle_rsc_0_9_ARBURST;
  input [2:0] twiddle_rsc_0_9_ARSIZE;
  input [7:0] twiddle_rsc_0_9_ARLEN;
  input [11:0] twiddle_rsc_0_9_ARADDR;
  input twiddle_rsc_0_9_ARID;
  input twiddle_rsc_0_9_BREADY;
  output twiddle_rsc_0_9_BVALID;
  output twiddle_rsc_0_9_BUSER;
  output [1:0] twiddle_rsc_0_9_BRESP;
  output twiddle_rsc_0_9_BID;
  output twiddle_rsc_0_9_WREADY;
  input twiddle_rsc_0_9_WVALID;
  input twiddle_rsc_0_9_WUSER;
  input twiddle_rsc_0_9_WLAST;
  input [3:0] twiddle_rsc_0_9_WSTRB;
  input [31:0] twiddle_rsc_0_9_WDATA;
  output twiddle_rsc_0_9_AWREADY;
  input twiddle_rsc_0_9_AWVALID;
  input twiddle_rsc_0_9_AWUSER;
  input [3:0] twiddle_rsc_0_9_AWREGION;
  input [3:0] twiddle_rsc_0_9_AWQOS;
  input [2:0] twiddle_rsc_0_9_AWPROT;
  input [3:0] twiddle_rsc_0_9_AWCACHE;
  input twiddle_rsc_0_9_AWLOCK;
  input [1:0] twiddle_rsc_0_9_AWBURST;
  input [2:0] twiddle_rsc_0_9_AWSIZE;
  input [7:0] twiddle_rsc_0_9_AWLEN;
  input [11:0] twiddle_rsc_0_9_AWADDR;
  input twiddle_rsc_0_9_AWID;
  output twiddle_rsc_triosy_0_9_lz;
  input twiddle_rsc_0_10_s_tdone;
  input twiddle_rsc_0_10_tr_write_done;
  input twiddle_rsc_0_10_RREADY;
  output twiddle_rsc_0_10_RVALID;
  output twiddle_rsc_0_10_RUSER;
  output twiddle_rsc_0_10_RLAST;
  output [1:0] twiddle_rsc_0_10_RRESP;
  output [31:0] twiddle_rsc_0_10_RDATA;
  output twiddle_rsc_0_10_RID;
  output twiddle_rsc_0_10_ARREADY;
  input twiddle_rsc_0_10_ARVALID;
  input twiddle_rsc_0_10_ARUSER;
  input [3:0] twiddle_rsc_0_10_ARREGION;
  input [3:0] twiddle_rsc_0_10_ARQOS;
  input [2:0] twiddle_rsc_0_10_ARPROT;
  input [3:0] twiddle_rsc_0_10_ARCACHE;
  input twiddle_rsc_0_10_ARLOCK;
  input [1:0] twiddle_rsc_0_10_ARBURST;
  input [2:0] twiddle_rsc_0_10_ARSIZE;
  input [7:0] twiddle_rsc_0_10_ARLEN;
  input [11:0] twiddle_rsc_0_10_ARADDR;
  input twiddle_rsc_0_10_ARID;
  input twiddle_rsc_0_10_BREADY;
  output twiddle_rsc_0_10_BVALID;
  output twiddle_rsc_0_10_BUSER;
  output [1:0] twiddle_rsc_0_10_BRESP;
  output twiddle_rsc_0_10_BID;
  output twiddle_rsc_0_10_WREADY;
  input twiddle_rsc_0_10_WVALID;
  input twiddle_rsc_0_10_WUSER;
  input twiddle_rsc_0_10_WLAST;
  input [3:0] twiddle_rsc_0_10_WSTRB;
  input [31:0] twiddle_rsc_0_10_WDATA;
  output twiddle_rsc_0_10_AWREADY;
  input twiddle_rsc_0_10_AWVALID;
  input twiddle_rsc_0_10_AWUSER;
  input [3:0] twiddle_rsc_0_10_AWREGION;
  input [3:0] twiddle_rsc_0_10_AWQOS;
  input [2:0] twiddle_rsc_0_10_AWPROT;
  input [3:0] twiddle_rsc_0_10_AWCACHE;
  input twiddle_rsc_0_10_AWLOCK;
  input [1:0] twiddle_rsc_0_10_AWBURST;
  input [2:0] twiddle_rsc_0_10_AWSIZE;
  input [7:0] twiddle_rsc_0_10_AWLEN;
  input [11:0] twiddle_rsc_0_10_AWADDR;
  input twiddle_rsc_0_10_AWID;
  output twiddle_rsc_triosy_0_10_lz;
  input twiddle_rsc_0_11_s_tdone;
  input twiddle_rsc_0_11_tr_write_done;
  input twiddle_rsc_0_11_RREADY;
  output twiddle_rsc_0_11_RVALID;
  output twiddle_rsc_0_11_RUSER;
  output twiddle_rsc_0_11_RLAST;
  output [1:0] twiddle_rsc_0_11_RRESP;
  output [31:0] twiddle_rsc_0_11_RDATA;
  output twiddle_rsc_0_11_RID;
  output twiddle_rsc_0_11_ARREADY;
  input twiddle_rsc_0_11_ARVALID;
  input twiddle_rsc_0_11_ARUSER;
  input [3:0] twiddle_rsc_0_11_ARREGION;
  input [3:0] twiddle_rsc_0_11_ARQOS;
  input [2:0] twiddle_rsc_0_11_ARPROT;
  input [3:0] twiddle_rsc_0_11_ARCACHE;
  input twiddle_rsc_0_11_ARLOCK;
  input [1:0] twiddle_rsc_0_11_ARBURST;
  input [2:0] twiddle_rsc_0_11_ARSIZE;
  input [7:0] twiddle_rsc_0_11_ARLEN;
  input [11:0] twiddle_rsc_0_11_ARADDR;
  input twiddle_rsc_0_11_ARID;
  input twiddle_rsc_0_11_BREADY;
  output twiddle_rsc_0_11_BVALID;
  output twiddle_rsc_0_11_BUSER;
  output [1:0] twiddle_rsc_0_11_BRESP;
  output twiddle_rsc_0_11_BID;
  output twiddle_rsc_0_11_WREADY;
  input twiddle_rsc_0_11_WVALID;
  input twiddle_rsc_0_11_WUSER;
  input twiddle_rsc_0_11_WLAST;
  input [3:0] twiddle_rsc_0_11_WSTRB;
  input [31:0] twiddle_rsc_0_11_WDATA;
  output twiddle_rsc_0_11_AWREADY;
  input twiddle_rsc_0_11_AWVALID;
  input twiddle_rsc_0_11_AWUSER;
  input [3:0] twiddle_rsc_0_11_AWREGION;
  input [3:0] twiddle_rsc_0_11_AWQOS;
  input [2:0] twiddle_rsc_0_11_AWPROT;
  input [3:0] twiddle_rsc_0_11_AWCACHE;
  input twiddle_rsc_0_11_AWLOCK;
  input [1:0] twiddle_rsc_0_11_AWBURST;
  input [2:0] twiddle_rsc_0_11_AWSIZE;
  input [7:0] twiddle_rsc_0_11_AWLEN;
  input [11:0] twiddle_rsc_0_11_AWADDR;
  input twiddle_rsc_0_11_AWID;
  output twiddle_rsc_triosy_0_11_lz;
  input twiddle_rsc_0_12_s_tdone;
  input twiddle_rsc_0_12_tr_write_done;
  input twiddle_rsc_0_12_RREADY;
  output twiddle_rsc_0_12_RVALID;
  output twiddle_rsc_0_12_RUSER;
  output twiddle_rsc_0_12_RLAST;
  output [1:0] twiddle_rsc_0_12_RRESP;
  output [31:0] twiddle_rsc_0_12_RDATA;
  output twiddle_rsc_0_12_RID;
  output twiddle_rsc_0_12_ARREADY;
  input twiddle_rsc_0_12_ARVALID;
  input twiddle_rsc_0_12_ARUSER;
  input [3:0] twiddle_rsc_0_12_ARREGION;
  input [3:0] twiddle_rsc_0_12_ARQOS;
  input [2:0] twiddle_rsc_0_12_ARPROT;
  input [3:0] twiddle_rsc_0_12_ARCACHE;
  input twiddle_rsc_0_12_ARLOCK;
  input [1:0] twiddle_rsc_0_12_ARBURST;
  input [2:0] twiddle_rsc_0_12_ARSIZE;
  input [7:0] twiddle_rsc_0_12_ARLEN;
  input [11:0] twiddle_rsc_0_12_ARADDR;
  input twiddle_rsc_0_12_ARID;
  input twiddle_rsc_0_12_BREADY;
  output twiddle_rsc_0_12_BVALID;
  output twiddle_rsc_0_12_BUSER;
  output [1:0] twiddle_rsc_0_12_BRESP;
  output twiddle_rsc_0_12_BID;
  output twiddle_rsc_0_12_WREADY;
  input twiddle_rsc_0_12_WVALID;
  input twiddle_rsc_0_12_WUSER;
  input twiddle_rsc_0_12_WLAST;
  input [3:0] twiddle_rsc_0_12_WSTRB;
  input [31:0] twiddle_rsc_0_12_WDATA;
  output twiddle_rsc_0_12_AWREADY;
  input twiddle_rsc_0_12_AWVALID;
  input twiddle_rsc_0_12_AWUSER;
  input [3:0] twiddle_rsc_0_12_AWREGION;
  input [3:0] twiddle_rsc_0_12_AWQOS;
  input [2:0] twiddle_rsc_0_12_AWPROT;
  input [3:0] twiddle_rsc_0_12_AWCACHE;
  input twiddle_rsc_0_12_AWLOCK;
  input [1:0] twiddle_rsc_0_12_AWBURST;
  input [2:0] twiddle_rsc_0_12_AWSIZE;
  input [7:0] twiddle_rsc_0_12_AWLEN;
  input [11:0] twiddle_rsc_0_12_AWADDR;
  input twiddle_rsc_0_12_AWID;
  output twiddle_rsc_triosy_0_12_lz;
  input twiddle_rsc_0_13_s_tdone;
  input twiddle_rsc_0_13_tr_write_done;
  input twiddle_rsc_0_13_RREADY;
  output twiddle_rsc_0_13_RVALID;
  output twiddle_rsc_0_13_RUSER;
  output twiddle_rsc_0_13_RLAST;
  output [1:0] twiddle_rsc_0_13_RRESP;
  output [31:0] twiddle_rsc_0_13_RDATA;
  output twiddle_rsc_0_13_RID;
  output twiddle_rsc_0_13_ARREADY;
  input twiddle_rsc_0_13_ARVALID;
  input twiddle_rsc_0_13_ARUSER;
  input [3:0] twiddle_rsc_0_13_ARREGION;
  input [3:0] twiddle_rsc_0_13_ARQOS;
  input [2:0] twiddle_rsc_0_13_ARPROT;
  input [3:0] twiddle_rsc_0_13_ARCACHE;
  input twiddle_rsc_0_13_ARLOCK;
  input [1:0] twiddle_rsc_0_13_ARBURST;
  input [2:0] twiddle_rsc_0_13_ARSIZE;
  input [7:0] twiddle_rsc_0_13_ARLEN;
  input [11:0] twiddle_rsc_0_13_ARADDR;
  input twiddle_rsc_0_13_ARID;
  input twiddle_rsc_0_13_BREADY;
  output twiddle_rsc_0_13_BVALID;
  output twiddle_rsc_0_13_BUSER;
  output [1:0] twiddle_rsc_0_13_BRESP;
  output twiddle_rsc_0_13_BID;
  output twiddle_rsc_0_13_WREADY;
  input twiddle_rsc_0_13_WVALID;
  input twiddle_rsc_0_13_WUSER;
  input twiddle_rsc_0_13_WLAST;
  input [3:0] twiddle_rsc_0_13_WSTRB;
  input [31:0] twiddle_rsc_0_13_WDATA;
  output twiddle_rsc_0_13_AWREADY;
  input twiddle_rsc_0_13_AWVALID;
  input twiddle_rsc_0_13_AWUSER;
  input [3:0] twiddle_rsc_0_13_AWREGION;
  input [3:0] twiddle_rsc_0_13_AWQOS;
  input [2:0] twiddle_rsc_0_13_AWPROT;
  input [3:0] twiddle_rsc_0_13_AWCACHE;
  input twiddle_rsc_0_13_AWLOCK;
  input [1:0] twiddle_rsc_0_13_AWBURST;
  input [2:0] twiddle_rsc_0_13_AWSIZE;
  input [7:0] twiddle_rsc_0_13_AWLEN;
  input [11:0] twiddle_rsc_0_13_AWADDR;
  input twiddle_rsc_0_13_AWID;
  output twiddle_rsc_triosy_0_13_lz;
  input twiddle_rsc_0_14_s_tdone;
  input twiddle_rsc_0_14_tr_write_done;
  input twiddle_rsc_0_14_RREADY;
  output twiddle_rsc_0_14_RVALID;
  output twiddle_rsc_0_14_RUSER;
  output twiddle_rsc_0_14_RLAST;
  output [1:0] twiddle_rsc_0_14_RRESP;
  output [31:0] twiddle_rsc_0_14_RDATA;
  output twiddle_rsc_0_14_RID;
  output twiddle_rsc_0_14_ARREADY;
  input twiddle_rsc_0_14_ARVALID;
  input twiddle_rsc_0_14_ARUSER;
  input [3:0] twiddle_rsc_0_14_ARREGION;
  input [3:0] twiddle_rsc_0_14_ARQOS;
  input [2:0] twiddle_rsc_0_14_ARPROT;
  input [3:0] twiddle_rsc_0_14_ARCACHE;
  input twiddle_rsc_0_14_ARLOCK;
  input [1:0] twiddle_rsc_0_14_ARBURST;
  input [2:0] twiddle_rsc_0_14_ARSIZE;
  input [7:0] twiddle_rsc_0_14_ARLEN;
  input [11:0] twiddle_rsc_0_14_ARADDR;
  input twiddle_rsc_0_14_ARID;
  input twiddle_rsc_0_14_BREADY;
  output twiddle_rsc_0_14_BVALID;
  output twiddle_rsc_0_14_BUSER;
  output [1:0] twiddle_rsc_0_14_BRESP;
  output twiddle_rsc_0_14_BID;
  output twiddle_rsc_0_14_WREADY;
  input twiddle_rsc_0_14_WVALID;
  input twiddle_rsc_0_14_WUSER;
  input twiddle_rsc_0_14_WLAST;
  input [3:0] twiddle_rsc_0_14_WSTRB;
  input [31:0] twiddle_rsc_0_14_WDATA;
  output twiddle_rsc_0_14_AWREADY;
  input twiddle_rsc_0_14_AWVALID;
  input twiddle_rsc_0_14_AWUSER;
  input [3:0] twiddle_rsc_0_14_AWREGION;
  input [3:0] twiddle_rsc_0_14_AWQOS;
  input [2:0] twiddle_rsc_0_14_AWPROT;
  input [3:0] twiddle_rsc_0_14_AWCACHE;
  input twiddle_rsc_0_14_AWLOCK;
  input [1:0] twiddle_rsc_0_14_AWBURST;
  input [2:0] twiddle_rsc_0_14_AWSIZE;
  input [7:0] twiddle_rsc_0_14_AWLEN;
  input [11:0] twiddle_rsc_0_14_AWADDR;
  input twiddle_rsc_0_14_AWID;
  output twiddle_rsc_triosy_0_14_lz;
  input twiddle_rsc_0_15_s_tdone;
  input twiddle_rsc_0_15_tr_write_done;
  input twiddle_rsc_0_15_RREADY;
  output twiddle_rsc_0_15_RVALID;
  output twiddle_rsc_0_15_RUSER;
  output twiddle_rsc_0_15_RLAST;
  output [1:0] twiddle_rsc_0_15_RRESP;
  output [31:0] twiddle_rsc_0_15_RDATA;
  output twiddle_rsc_0_15_RID;
  output twiddle_rsc_0_15_ARREADY;
  input twiddle_rsc_0_15_ARVALID;
  input twiddle_rsc_0_15_ARUSER;
  input [3:0] twiddle_rsc_0_15_ARREGION;
  input [3:0] twiddle_rsc_0_15_ARQOS;
  input [2:0] twiddle_rsc_0_15_ARPROT;
  input [3:0] twiddle_rsc_0_15_ARCACHE;
  input twiddle_rsc_0_15_ARLOCK;
  input [1:0] twiddle_rsc_0_15_ARBURST;
  input [2:0] twiddle_rsc_0_15_ARSIZE;
  input [7:0] twiddle_rsc_0_15_ARLEN;
  input [11:0] twiddle_rsc_0_15_ARADDR;
  input twiddle_rsc_0_15_ARID;
  input twiddle_rsc_0_15_BREADY;
  output twiddle_rsc_0_15_BVALID;
  output twiddle_rsc_0_15_BUSER;
  output [1:0] twiddle_rsc_0_15_BRESP;
  output twiddle_rsc_0_15_BID;
  output twiddle_rsc_0_15_WREADY;
  input twiddle_rsc_0_15_WVALID;
  input twiddle_rsc_0_15_WUSER;
  input twiddle_rsc_0_15_WLAST;
  input [3:0] twiddle_rsc_0_15_WSTRB;
  input [31:0] twiddle_rsc_0_15_WDATA;
  output twiddle_rsc_0_15_AWREADY;
  input twiddle_rsc_0_15_AWVALID;
  input twiddle_rsc_0_15_AWUSER;
  input [3:0] twiddle_rsc_0_15_AWREGION;
  input [3:0] twiddle_rsc_0_15_AWQOS;
  input [2:0] twiddle_rsc_0_15_AWPROT;
  input [3:0] twiddle_rsc_0_15_AWCACHE;
  input twiddle_rsc_0_15_AWLOCK;
  input [1:0] twiddle_rsc_0_15_AWBURST;
  input [2:0] twiddle_rsc_0_15_AWSIZE;
  input [7:0] twiddle_rsc_0_15_AWLEN;
  input [11:0] twiddle_rsc_0_15_AWADDR;
  input twiddle_rsc_0_15_AWID;
  output twiddle_rsc_triosy_0_15_lz;
  input twiddle_h_rsc_0_0_s_tdone;
  input twiddle_h_rsc_0_0_tr_write_done;
  input twiddle_h_rsc_0_0_RREADY;
  output twiddle_h_rsc_0_0_RVALID;
  output twiddle_h_rsc_0_0_RUSER;
  output twiddle_h_rsc_0_0_RLAST;
  output [1:0] twiddle_h_rsc_0_0_RRESP;
  output [31:0] twiddle_h_rsc_0_0_RDATA;
  output twiddle_h_rsc_0_0_RID;
  output twiddle_h_rsc_0_0_ARREADY;
  input twiddle_h_rsc_0_0_ARVALID;
  input twiddle_h_rsc_0_0_ARUSER;
  input [3:0] twiddle_h_rsc_0_0_ARREGION;
  input [3:0] twiddle_h_rsc_0_0_ARQOS;
  input [2:0] twiddle_h_rsc_0_0_ARPROT;
  input [3:0] twiddle_h_rsc_0_0_ARCACHE;
  input twiddle_h_rsc_0_0_ARLOCK;
  input [1:0] twiddle_h_rsc_0_0_ARBURST;
  input [2:0] twiddle_h_rsc_0_0_ARSIZE;
  input [7:0] twiddle_h_rsc_0_0_ARLEN;
  input [11:0] twiddle_h_rsc_0_0_ARADDR;
  input twiddle_h_rsc_0_0_ARID;
  input twiddle_h_rsc_0_0_BREADY;
  output twiddle_h_rsc_0_0_BVALID;
  output twiddle_h_rsc_0_0_BUSER;
  output [1:0] twiddle_h_rsc_0_0_BRESP;
  output twiddle_h_rsc_0_0_BID;
  output twiddle_h_rsc_0_0_WREADY;
  input twiddle_h_rsc_0_0_WVALID;
  input twiddle_h_rsc_0_0_WUSER;
  input twiddle_h_rsc_0_0_WLAST;
  input [3:0] twiddle_h_rsc_0_0_WSTRB;
  input [31:0] twiddle_h_rsc_0_0_WDATA;
  output twiddle_h_rsc_0_0_AWREADY;
  input twiddle_h_rsc_0_0_AWVALID;
  input twiddle_h_rsc_0_0_AWUSER;
  input [3:0] twiddle_h_rsc_0_0_AWREGION;
  input [3:0] twiddle_h_rsc_0_0_AWQOS;
  input [2:0] twiddle_h_rsc_0_0_AWPROT;
  input [3:0] twiddle_h_rsc_0_0_AWCACHE;
  input twiddle_h_rsc_0_0_AWLOCK;
  input [1:0] twiddle_h_rsc_0_0_AWBURST;
  input [2:0] twiddle_h_rsc_0_0_AWSIZE;
  input [7:0] twiddle_h_rsc_0_0_AWLEN;
  input [11:0] twiddle_h_rsc_0_0_AWADDR;
  input twiddle_h_rsc_0_0_AWID;
  output twiddle_h_rsc_triosy_0_0_lz;
  input twiddle_h_rsc_0_1_s_tdone;
  input twiddle_h_rsc_0_1_tr_write_done;
  input twiddle_h_rsc_0_1_RREADY;
  output twiddle_h_rsc_0_1_RVALID;
  output twiddle_h_rsc_0_1_RUSER;
  output twiddle_h_rsc_0_1_RLAST;
  output [1:0] twiddle_h_rsc_0_1_RRESP;
  output [31:0] twiddle_h_rsc_0_1_RDATA;
  output twiddle_h_rsc_0_1_RID;
  output twiddle_h_rsc_0_1_ARREADY;
  input twiddle_h_rsc_0_1_ARVALID;
  input twiddle_h_rsc_0_1_ARUSER;
  input [3:0] twiddle_h_rsc_0_1_ARREGION;
  input [3:0] twiddle_h_rsc_0_1_ARQOS;
  input [2:0] twiddle_h_rsc_0_1_ARPROT;
  input [3:0] twiddle_h_rsc_0_1_ARCACHE;
  input twiddle_h_rsc_0_1_ARLOCK;
  input [1:0] twiddle_h_rsc_0_1_ARBURST;
  input [2:0] twiddle_h_rsc_0_1_ARSIZE;
  input [7:0] twiddle_h_rsc_0_1_ARLEN;
  input [11:0] twiddle_h_rsc_0_1_ARADDR;
  input twiddle_h_rsc_0_1_ARID;
  input twiddle_h_rsc_0_1_BREADY;
  output twiddle_h_rsc_0_1_BVALID;
  output twiddle_h_rsc_0_1_BUSER;
  output [1:0] twiddle_h_rsc_0_1_BRESP;
  output twiddle_h_rsc_0_1_BID;
  output twiddle_h_rsc_0_1_WREADY;
  input twiddle_h_rsc_0_1_WVALID;
  input twiddle_h_rsc_0_1_WUSER;
  input twiddle_h_rsc_0_1_WLAST;
  input [3:0] twiddle_h_rsc_0_1_WSTRB;
  input [31:0] twiddle_h_rsc_0_1_WDATA;
  output twiddle_h_rsc_0_1_AWREADY;
  input twiddle_h_rsc_0_1_AWVALID;
  input twiddle_h_rsc_0_1_AWUSER;
  input [3:0] twiddle_h_rsc_0_1_AWREGION;
  input [3:0] twiddle_h_rsc_0_1_AWQOS;
  input [2:0] twiddle_h_rsc_0_1_AWPROT;
  input [3:0] twiddle_h_rsc_0_1_AWCACHE;
  input twiddle_h_rsc_0_1_AWLOCK;
  input [1:0] twiddle_h_rsc_0_1_AWBURST;
  input [2:0] twiddle_h_rsc_0_1_AWSIZE;
  input [7:0] twiddle_h_rsc_0_1_AWLEN;
  input [11:0] twiddle_h_rsc_0_1_AWADDR;
  input twiddle_h_rsc_0_1_AWID;
  output twiddle_h_rsc_triosy_0_1_lz;
  input twiddle_h_rsc_0_2_s_tdone;
  input twiddle_h_rsc_0_2_tr_write_done;
  input twiddle_h_rsc_0_2_RREADY;
  output twiddle_h_rsc_0_2_RVALID;
  output twiddle_h_rsc_0_2_RUSER;
  output twiddle_h_rsc_0_2_RLAST;
  output [1:0] twiddle_h_rsc_0_2_RRESP;
  output [31:0] twiddle_h_rsc_0_2_RDATA;
  output twiddle_h_rsc_0_2_RID;
  output twiddle_h_rsc_0_2_ARREADY;
  input twiddle_h_rsc_0_2_ARVALID;
  input twiddle_h_rsc_0_2_ARUSER;
  input [3:0] twiddle_h_rsc_0_2_ARREGION;
  input [3:0] twiddle_h_rsc_0_2_ARQOS;
  input [2:0] twiddle_h_rsc_0_2_ARPROT;
  input [3:0] twiddle_h_rsc_0_2_ARCACHE;
  input twiddle_h_rsc_0_2_ARLOCK;
  input [1:0] twiddle_h_rsc_0_2_ARBURST;
  input [2:0] twiddle_h_rsc_0_2_ARSIZE;
  input [7:0] twiddle_h_rsc_0_2_ARLEN;
  input [11:0] twiddle_h_rsc_0_2_ARADDR;
  input twiddle_h_rsc_0_2_ARID;
  input twiddle_h_rsc_0_2_BREADY;
  output twiddle_h_rsc_0_2_BVALID;
  output twiddle_h_rsc_0_2_BUSER;
  output [1:0] twiddle_h_rsc_0_2_BRESP;
  output twiddle_h_rsc_0_2_BID;
  output twiddle_h_rsc_0_2_WREADY;
  input twiddle_h_rsc_0_2_WVALID;
  input twiddle_h_rsc_0_2_WUSER;
  input twiddle_h_rsc_0_2_WLAST;
  input [3:0] twiddle_h_rsc_0_2_WSTRB;
  input [31:0] twiddle_h_rsc_0_2_WDATA;
  output twiddle_h_rsc_0_2_AWREADY;
  input twiddle_h_rsc_0_2_AWVALID;
  input twiddle_h_rsc_0_2_AWUSER;
  input [3:0] twiddle_h_rsc_0_2_AWREGION;
  input [3:0] twiddle_h_rsc_0_2_AWQOS;
  input [2:0] twiddle_h_rsc_0_2_AWPROT;
  input [3:0] twiddle_h_rsc_0_2_AWCACHE;
  input twiddle_h_rsc_0_2_AWLOCK;
  input [1:0] twiddle_h_rsc_0_2_AWBURST;
  input [2:0] twiddle_h_rsc_0_2_AWSIZE;
  input [7:0] twiddle_h_rsc_0_2_AWLEN;
  input [11:0] twiddle_h_rsc_0_2_AWADDR;
  input twiddle_h_rsc_0_2_AWID;
  output twiddle_h_rsc_triosy_0_2_lz;
  input twiddle_h_rsc_0_3_s_tdone;
  input twiddle_h_rsc_0_3_tr_write_done;
  input twiddle_h_rsc_0_3_RREADY;
  output twiddle_h_rsc_0_3_RVALID;
  output twiddle_h_rsc_0_3_RUSER;
  output twiddle_h_rsc_0_3_RLAST;
  output [1:0] twiddle_h_rsc_0_3_RRESP;
  output [31:0] twiddle_h_rsc_0_3_RDATA;
  output twiddle_h_rsc_0_3_RID;
  output twiddle_h_rsc_0_3_ARREADY;
  input twiddle_h_rsc_0_3_ARVALID;
  input twiddle_h_rsc_0_3_ARUSER;
  input [3:0] twiddle_h_rsc_0_3_ARREGION;
  input [3:0] twiddle_h_rsc_0_3_ARQOS;
  input [2:0] twiddle_h_rsc_0_3_ARPROT;
  input [3:0] twiddle_h_rsc_0_3_ARCACHE;
  input twiddle_h_rsc_0_3_ARLOCK;
  input [1:0] twiddle_h_rsc_0_3_ARBURST;
  input [2:0] twiddle_h_rsc_0_3_ARSIZE;
  input [7:0] twiddle_h_rsc_0_3_ARLEN;
  input [11:0] twiddle_h_rsc_0_3_ARADDR;
  input twiddle_h_rsc_0_3_ARID;
  input twiddle_h_rsc_0_3_BREADY;
  output twiddle_h_rsc_0_3_BVALID;
  output twiddle_h_rsc_0_3_BUSER;
  output [1:0] twiddle_h_rsc_0_3_BRESP;
  output twiddle_h_rsc_0_3_BID;
  output twiddle_h_rsc_0_3_WREADY;
  input twiddle_h_rsc_0_3_WVALID;
  input twiddle_h_rsc_0_3_WUSER;
  input twiddle_h_rsc_0_3_WLAST;
  input [3:0] twiddle_h_rsc_0_3_WSTRB;
  input [31:0] twiddle_h_rsc_0_3_WDATA;
  output twiddle_h_rsc_0_3_AWREADY;
  input twiddle_h_rsc_0_3_AWVALID;
  input twiddle_h_rsc_0_3_AWUSER;
  input [3:0] twiddle_h_rsc_0_3_AWREGION;
  input [3:0] twiddle_h_rsc_0_3_AWQOS;
  input [2:0] twiddle_h_rsc_0_3_AWPROT;
  input [3:0] twiddle_h_rsc_0_3_AWCACHE;
  input twiddle_h_rsc_0_3_AWLOCK;
  input [1:0] twiddle_h_rsc_0_3_AWBURST;
  input [2:0] twiddle_h_rsc_0_3_AWSIZE;
  input [7:0] twiddle_h_rsc_0_3_AWLEN;
  input [11:0] twiddle_h_rsc_0_3_AWADDR;
  input twiddle_h_rsc_0_3_AWID;
  output twiddle_h_rsc_triosy_0_3_lz;
  input twiddle_h_rsc_0_4_s_tdone;
  input twiddle_h_rsc_0_4_tr_write_done;
  input twiddle_h_rsc_0_4_RREADY;
  output twiddle_h_rsc_0_4_RVALID;
  output twiddle_h_rsc_0_4_RUSER;
  output twiddle_h_rsc_0_4_RLAST;
  output [1:0] twiddle_h_rsc_0_4_RRESP;
  output [31:0] twiddle_h_rsc_0_4_RDATA;
  output twiddle_h_rsc_0_4_RID;
  output twiddle_h_rsc_0_4_ARREADY;
  input twiddle_h_rsc_0_4_ARVALID;
  input twiddle_h_rsc_0_4_ARUSER;
  input [3:0] twiddle_h_rsc_0_4_ARREGION;
  input [3:0] twiddle_h_rsc_0_4_ARQOS;
  input [2:0] twiddle_h_rsc_0_4_ARPROT;
  input [3:0] twiddle_h_rsc_0_4_ARCACHE;
  input twiddle_h_rsc_0_4_ARLOCK;
  input [1:0] twiddle_h_rsc_0_4_ARBURST;
  input [2:0] twiddle_h_rsc_0_4_ARSIZE;
  input [7:0] twiddle_h_rsc_0_4_ARLEN;
  input [11:0] twiddle_h_rsc_0_4_ARADDR;
  input twiddle_h_rsc_0_4_ARID;
  input twiddle_h_rsc_0_4_BREADY;
  output twiddle_h_rsc_0_4_BVALID;
  output twiddle_h_rsc_0_4_BUSER;
  output [1:0] twiddle_h_rsc_0_4_BRESP;
  output twiddle_h_rsc_0_4_BID;
  output twiddle_h_rsc_0_4_WREADY;
  input twiddle_h_rsc_0_4_WVALID;
  input twiddle_h_rsc_0_4_WUSER;
  input twiddle_h_rsc_0_4_WLAST;
  input [3:0] twiddle_h_rsc_0_4_WSTRB;
  input [31:0] twiddle_h_rsc_0_4_WDATA;
  output twiddle_h_rsc_0_4_AWREADY;
  input twiddle_h_rsc_0_4_AWVALID;
  input twiddle_h_rsc_0_4_AWUSER;
  input [3:0] twiddle_h_rsc_0_4_AWREGION;
  input [3:0] twiddle_h_rsc_0_4_AWQOS;
  input [2:0] twiddle_h_rsc_0_4_AWPROT;
  input [3:0] twiddle_h_rsc_0_4_AWCACHE;
  input twiddle_h_rsc_0_4_AWLOCK;
  input [1:0] twiddle_h_rsc_0_4_AWBURST;
  input [2:0] twiddle_h_rsc_0_4_AWSIZE;
  input [7:0] twiddle_h_rsc_0_4_AWLEN;
  input [11:0] twiddle_h_rsc_0_4_AWADDR;
  input twiddle_h_rsc_0_4_AWID;
  output twiddle_h_rsc_triosy_0_4_lz;
  input twiddle_h_rsc_0_5_s_tdone;
  input twiddle_h_rsc_0_5_tr_write_done;
  input twiddle_h_rsc_0_5_RREADY;
  output twiddle_h_rsc_0_5_RVALID;
  output twiddle_h_rsc_0_5_RUSER;
  output twiddle_h_rsc_0_5_RLAST;
  output [1:0] twiddle_h_rsc_0_5_RRESP;
  output [31:0] twiddle_h_rsc_0_5_RDATA;
  output twiddle_h_rsc_0_5_RID;
  output twiddle_h_rsc_0_5_ARREADY;
  input twiddle_h_rsc_0_5_ARVALID;
  input twiddle_h_rsc_0_5_ARUSER;
  input [3:0] twiddle_h_rsc_0_5_ARREGION;
  input [3:0] twiddle_h_rsc_0_5_ARQOS;
  input [2:0] twiddle_h_rsc_0_5_ARPROT;
  input [3:0] twiddle_h_rsc_0_5_ARCACHE;
  input twiddle_h_rsc_0_5_ARLOCK;
  input [1:0] twiddle_h_rsc_0_5_ARBURST;
  input [2:0] twiddle_h_rsc_0_5_ARSIZE;
  input [7:0] twiddle_h_rsc_0_5_ARLEN;
  input [11:0] twiddle_h_rsc_0_5_ARADDR;
  input twiddle_h_rsc_0_5_ARID;
  input twiddle_h_rsc_0_5_BREADY;
  output twiddle_h_rsc_0_5_BVALID;
  output twiddle_h_rsc_0_5_BUSER;
  output [1:0] twiddle_h_rsc_0_5_BRESP;
  output twiddle_h_rsc_0_5_BID;
  output twiddle_h_rsc_0_5_WREADY;
  input twiddle_h_rsc_0_5_WVALID;
  input twiddle_h_rsc_0_5_WUSER;
  input twiddle_h_rsc_0_5_WLAST;
  input [3:0] twiddle_h_rsc_0_5_WSTRB;
  input [31:0] twiddle_h_rsc_0_5_WDATA;
  output twiddle_h_rsc_0_5_AWREADY;
  input twiddle_h_rsc_0_5_AWVALID;
  input twiddle_h_rsc_0_5_AWUSER;
  input [3:0] twiddle_h_rsc_0_5_AWREGION;
  input [3:0] twiddle_h_rsc_0_5_AWQOS;
  input [2:0] twiddle_h_rsc_0_5_AWPROT;
  input [3:0] twiddle_h_rsc_0_5_AWCACHE;
  input twiddle_h_rsc_0_5_AWLOCK;
  input [1:0] twiddle_h_rsc_0_5_AWBURST;
  input [2:0] twiddle_h_rsc_0_5_AWSIZE;
  input [7:0] twiddle_h_rsc_0_5_AWLEN;
  input [11:0] twiddle_h_rsc_0_5_AWADDR;
  input twiddle_h_rsc_0_5_AWID;
  output twiddle_h_rsc_triosy_0_5_lz;
  input twiddle_h_rsc_0_6_s_tdone;
  input twiddle_h_rsc_0_6_tr_write_done;
  input twiddle_h_rsc_0_6_RREADY;
  output twiddle_h_rsc_0_6_RVALID;
  output twiddle_h_rsc_0_6_RUSER;
  output twiddle_h_rsc_0_6_RLAST;
  output [1:0] twiddle_h_rsc_0_6_RRESP;
  output [31:0] twiddle_h_rsc_0_6_RDATA;
  output twiddle_h_rsc_0_6_RID;
  output twiddle_h_rsc_0_6_ARREADY;
  input twiddle_h_rsc_0_6_ARVALID;
  input twiddle_h_rsc_0_6_ARUSER;
  input [3:0] twiddle_h_rsc_0_6_ARREGION;
  input [3:0] twiddle_h_rsc_0_6_ARQOS;
  input [2:0] twiddle_h_rsc_0_6_ARPROT;
  input [3:0] twiddle_h_rsc_0_6_ARCACHE;
  input twiddle_h_rsc_0_6_ARLOCK;
  input [1:0] twiddle_h_rsc_0_6_ARBURST;
  input [2:0] twiddle_h_rsc_0_6_ARSIZE;
  input [7:0] twiddle_h_rsc_0_6_ARLEN;
  input [11:0] twiddle_h_rsc_0_6_ARADDR;
  input twiddle_h_rsc_0_6_ARID;
  input twiddle_h_rsc_0_6_BREADY;
  output twiddle_h_rsc_0_6_BVALID;
  output twiddle_h_rsc_0_6_BUSER;
  output [1:0] twiddle_h_rsc_0_6_BRESP;
  output twiddle_h_rsc_0_6_BID;
  output twiddle_h_rsc_0_6_WREADY;
  input twiddle_h_rsc_0_6_WVALID;
  input twiddle_h_rsc_0_6_WUSER;
  input twiddle_h_rsc_0_6_WLAST;
  input [3:0] twiddle_h_rsc_0_6_WSTRB;
  input [31:0] twiddle_h_rsc_0_6_WDATA;
  output twiddle_h_rsc_0_6_AWREADY;
  input twiddle_h_rsc_0_6_AWVALID;
  input twiddle_h_rsc_0_6_AWUSER;
  input [3:0] twiddle_h_rsc_0_6_AWREGION;
  input [3:0] twiddle_h_rsc_0_6_AWQOS;
  input [2:0] twiddle_h_rsc_0_6_AWPROT;
  input [3:0] twiddle_h_rsc_0_6_AWCACHE;
  input twiddle_h_rsc_0_6_AWLOCK;
  input [1:0] twiddle_h_rsc_0_6_AWBURST;
  input [2:0] twiddle_h_rsc_0_6_AWSIZE;
  input [7:0] twiddle_h_rsc_0_6_AWLEN;
  input [11:0] twiddle_h_rsc_0_6_AWADDR;
  input twiddle_h_rsc_0_6_AWID;
  output twiddle_h_rsc_triosy_0_6_lz;
  input twiddle_h_rsc_0_7_s_tdone;
  input twiddle_h_rsc_0_7_tr_write_done;
  input twiddle_h_rsc_0_7_RREADY;
  output twiddle_h_rsc_0_7_RVALID;
  output twiddle_h_rsc_0_7_RUSER;
  output twiddle_h_rsc_0_7_RLAST;
  output [1:0] twiddle_h_rsc_0_7_RRESP;
  output [31:0] twiddle_h_rsc_0_7_RDATA;
  output twiddle_h_rsc_0_7_RID;
  output twiddle_h_rsc_0_7_ARREADY;
  input twiddle_h_rsc_0_7_ARVALID;
  input twiddle_h_rsc_0_7_ARUSER;
  input [3:0] twiddle_h_rsc_0_7_ARREGION;
  input [3:0] twiddle_h_rsc_0_7_ARQOS;
  input [2:0] twiddle_h_rsc_0_7_ARPROT;
  input [3:0] twiddle_h_rsc_0_7_ARCACHE;
  input twiddle_h_rsc_0_7_ARLOCK;
  input [1:0] twiddle_h_rsc_0_7_ARBURST;
  input [2:0] twiddle_h_rsc_0_7_ARSIZE;
  input [7:0] twiddle_h_rsc_0_7_ARLEN;
  input [11:0] twiddle_h_rsc_0_7_ARADDR;
  input twiddle_h_rsc_0_7_ARID;
  input twiddle_h_rsc_0_7_BREADY;
  output twiddle_h_rsc_0_7_BVALID;
  output twiddle_h_rsc_0_7_BUSER;
  output [1:0] twiddle_h_rsc_0_7_BRESP;
  output twiddle_h_rsc_0_7_BID;
  output twiddle_h_rsc_0_7_WREADY;
  input twiddle_h_rsc_0_7_WVALID;
  input twiddle_h_rsc_0_7_WUSER;
  input twiddle_h_rsc_0_7_WLAST;
  input [3:0] twiddle_h_rsc_0_7_WSTRB;
  input [31:0] twiddle_h_rsc_0_7_WDATA;
  output twiddle_h_rsc_0_7_AWREADY;
  input twiddle_h_rsc_0_7_AWVALID;
  input twiddle_h_rsc_0_7_AWUSER;
  input [3:0] twiddle_h_rsc_0_7_AWREGION;
  input [3:0] twiddle_h_rsc_0_7_AWQOS;
  input [2:0] twiddle_h_rsc_0_7_AWPROT;
  input [3:0] twiddle_h_rsc_0_7_AWCACHE;
  input twiddle_h_rsc_0_7_AWLOCK;
  input [1:0] twiddle_h_rsc_0_7_AWBURST;
  input [2:0] twiddle_h_rsc_0_7_AWSIZE;
  input [7:0] twiddle_h_rsc_0_7_AWLEN;
  input [11:0] twiddle_h_rsc_0_7_AWADDR;
  input twiddle_h_rsc_0_7_AWID;
  output twiddle_h_rsc_triosy_0_7_lz;
  input twiddle_h_rsc_0_8_s_tdone;
  input twiddle_h_rsc_0_8_tr_write_done;
  input twiddle_h_rsc_0_8_RREADY;
  output twiddle_h_rsc_0_8_RVALID;
  output twiddle_h_rsc_0_8_RUSER;
  output twiddle_h_rsc_0_8_RLAST;
  output [1:0] twiddle_h_rsc_0_8_RRESP;
  output [31:0] twiddle_h_rsc_0_8_RDATA;
  output twiddle_h_rsc_0_8_RID;
  output twiddle_h_rsc_0_8_ARREADY;
  input twiddle_h_rsc_0_8_ARVALID;
  input twiddle_h_rsc_0_8_ARUSER;
  input [3:0] twiddle_h_rsc_0_8_ARREGION;
  input [3:0] twiddle_h_rsc_0_8_ARQOS;
  input [2:0] twiddle_h_rsc_0_8_ARPROT;
  input [3:0] twiddle_h_rsc_0_8_ARCACHE;
  input twiddle_h_rsc_0_8_ARLOCK;
  input [1:0] twiddle_h_rsc_0_8_ARBURST;
  input [2:0] twiddle_h_rsc_0_8_ARSIZE;
  input [7:0] twiddle_h_rsc_0_8_ARLEN;
  input [11:0] twiddle_h_rsc_0_8_ARADDR;
  input twiddle_h_rsc_0_8_ARID;
  input twiddle_h_rsc_0_8_BREADY;
  output twiddle_h_rsc_0_8_BVALID;
  output twiddle_h_rsc_0_8_BUSER;
  output [1:0] twiddle_h_rsc_0_8_BRESP;
  output twiddle_h_rsc_0_8_BID;
  output twiddle_h_rsc_0_8_WREADY;
  input twiddle_h_rsc_0_8_WVALID;
  input twiddle_h_rsc_0_8_WUSER;
  input twiddle_h_rsc_0_8_WLAST;
  input [3:0] twiddle_h_rsc_0_8_WSTRB;
  input [31:0] twiddle_h_rsc_0_8_WDATA;
  output twiddle_h_rsc_0_8_AWREADY;
  input twiddle_h_rsc_0_8_AWVALID;
  input twiddle_h_rsc_0_8_AWUSER;
  input [3:0] twiddle_h_rsc_0_8_AWREGION;
  input [3:0] twiddle_h_rsc_0_8_AWQOS;
  input [2:0] twiddle_h_rsc_0_8_AWPROT;
  input [3:0] twiddle_h_rsc_0_8_AWCACHE;
  input twiddle_h_rsc_0_8_AWLOCK;
  input [1:0] twiddle_h_rsc_0_8_AWBURST;
  input [2:0] twiddle_h_rsc_0_8_AWSIZE;
  input [7:0] twiddle_h_rsc_0_8_AWLEN;
  input [11:0] twiddle_h_rsc_0_8_AWADDR;
  input twiddle_h_rsc_0_8_AWID;
  output twiddle_h_rsc_triosy_0_8_lz;
  input twiddle_h_rsc_0_9_s_tdone;
  input twiddle_h_rsc_0_9_tr_write_done;
  input twiddle_h_rsc_0_9_RREADY;
  output twiddle_h_rsc_0_9_RVALID;
  output twiddle_h_rsc_0_9_RUSER;
  output twiddle_h_rsc_0_9_RLAST;
  output [1:0] twiddle_h_rsc_0_9_RRESP;
  output [31:0] twiddle_h_rsc_0_9_RDATA;
  output twiddle_h_rsc_0_9_RID;
  output twiddle_h_rsc_0_9_ARREADY;
  input twiddle_h_rsc_0_9_ARVALID;
  input twiddle_h_rsc_0_9_ARUSER;
  input [3:0] twiddle_h_rsc_0_9_ARREGION;
  input [3:0] twiddle_h_rsc_0_9_ARQOS;
  input [2:0] twiddle_h_rsc_0_9_ARPROT;
  input [3:0] twiddle_h_rsc_0_9_ARCACHE;
  input twiddle_h_rsc_0_9_ARLOCK;
  input [1:0] twiddle_h_rsc_0_9_ARBURST;
  input [2:0] twiddle_h_rsc_0_9_ARSIZE;
  input [7:0] twiddle_h_rsc_0_9_ARLEN;
  input [11:0] twiddle_h_rsc_0_9_ARADDR;
  input twiddle_h_rsc_0_9_ARID;
  input twiddle_h_rsc_0_9_BREADY;
  output twiddle_h_rsc_0_9_BVALID;
  output twiddle_h_rsc_0_9_BUSER;
  output [1:0] twiddle_h_rsc_0_9_BRESP;
  output twiddle_h_rsc_0_9_BID;
  output twiddle_h_rsc_0_9_WREADY;
  input twiddle_h_rsc_0_9_WVALID;
  input twiddle_h_rsc_0_9_WUSER;
  input twiddle_h_rsc_0_9_WLAST;
  input [3:0] twiddle_h_rsc_0_9_WSTRB;
  input [31:0] twiddle_h_rsc_0_9_WDATA;
  output twiddle_h_rsc_0_9_AWREADY;
  input twiddle_h_rsc_0_9_AWVALID;
  input twiddle_h_rsc_0_9_AWUSER;
  input [3:0] twiddle_h_rsc_0_9_AWREGION;
  input [3:0] twiddle_h_rsc_0_9_AWQOS;
  input [2:0] twiddle_h_rsc_0_9_AWPROT;
  input [3:0] twiddle_h_rsc_0_9_AWCACHE;
  input twiddle_h_rsc_0_9_AWLOCK;
  input [1:0] twiddle_h_rsc_0_9_AWBURST;
  input [2:0] twiddle_h_rsc_0_9_AWSIZE;
  input [7:0] twiddle_h_rsc_0_9_AWLEN;
  input [11:0] twiddle_h_rsc_0_9_AWADDR;
  input twiddle_h_rsc_0_9_AWID;
  output twiddle_h_rsc_triosy_0_9_lz;
  input twiddle_h_rsc_0_10_s_tdone;
  input twiddle_h_rsc_0_10_tr_write_done;
  input twiddle_h_rsc_0_10_RREADY;
  output twiddle_h_rsc_0_10_RVALID;
  output twiddle_h_rsc_0_10_RUSER;
  output twiddle_h_rsc_0_10_RLAST;
  output [1:0] twiddle_h_rsc_0_10_RRESP;
  output [31:0] twiddle_h_rsc_0_10_RDATA;
  output twiddle_h_rsc_0_10_RID;
  output twiddle_h_rsc_0_10_ARREADY;
  input twiddle_h_rsc_0_10_ARVALID;
  input twiddle_h_rsc_0_10_ARUSER;
  input [3:0] twiddle_h_rsc_0_10_ARREGION;
  input [3:0] twiddle_h_rsc_0_10_ARQOS;
  input [2:0] twiddle_h_rsc_0_10_ARPROT;
  input [3:0] twiddle_h_rsc_0_10_ARCACHE;
  input twiddle_h_rsc_0_10_ARLOCK;
  input [1:0] twiddle_h_rsc_0_10_ARBURST;
  input [2:0] twiddle_h_rsc_0_10_ARSIZE;
  input [7:0] twiddle_h_rsc_0_10_ARLEN;
  input [11:0] twiddle_h_rsc_0_10_ARADDR;
  input twiddle_h_rsc_0_10_ARID;
  input twiddle_h_rsc_0_10_BREADY;
  output twiddle_h_rsc_0_10_BVALID;
  output twiddle_h_rsc_0_10_BUSER;
  output [1:0] twiddle_h_rsc_0_10_BRESP;
  output twiddle_h_rsc_0_10_BID;
  output twiddle_h_rsc_0_10_WREADY;
  input twiddle_h_rsc_0_10_WVALID;
  input twiddle_h_rsc_0_10_WUSER;
  input twiddle_h_rsc_0_10_WLAST;
  input [3:0] twiddle_h_rsc_0_10_WSTRB;
  input [31:0] twiddle_h_rsc_0_10_WDATA;
  output twiddle_h_rsc_0_10_AWREADY;
  input twiddle_h_rsc_0_10_AWVALID;
  input twiddle_h_rsc_0_10_AWUSER;
  input [3:0] twiddle_h_rsc_0_10_AWREGION;
  input [3:0] twiddle_h_rsc_0_10_AWQOS;
  input [2:0] twiddle_h_rsc_0_10_AWPROT;
  input [3:0] twiddle_h_rsc_0_10_AWCACHE;
  input twiddle_h_rsc_0_10_AWLOCK;
  input [1:0] twiddle_h_rsc_0_10_AWBURST;
  input [2:0] twiddle_h_rsc_0_10_AWSIZE;
  input [7:0] twiddle_h_rsc_0_10_AWLEN;
  input [11:0] twiddle_h_rsc_0_10_AWADDR;
  input twiddle_h_rsc_0_10_AWID;
  output twiddle_h_rsc_triosy_0_10_lz;
  input twiddle_h_rsc_0_11_s_tdone;
  input twiddle_h_rsc_0_11_tr_write_done;
  input twiddle_h_rsc_0_11_RREADY;
  output twiddle_h_rsc_0_11_RVALID;
  output twiddle_h_rsc_0_11_RUSER;
  output twiddle_h_rsc_0_11_RLAST;
  output [1:0] twiddle_h_rsc_0_11_RRESP;
  output [31:0] twiddle_h_rsc_0_11_RDATA;
  output twiddle_h_rsc_0_11_RID;
  output twiddle_h_rsc_0_11_ARREADY;
  input twiddle_h_rsc_0_11_ARVALID;
  input twiddle_h_rsc_0_11_ARUSER;
  input [3:0] twiddle_h_rsc_0_11_ARREGION;
  input [3:0] twiddle_h_rsc_0_11_ARQOS;
  input [2:0] twiddle_h_rsc_0_11_ARPROT;
  input [3:0] twiddle_h_rsc_0_11_ARCACHE;
  input twiddle_h_rsc_0_11_ARLOCK;
  input [1:0] twiddle_h_rsc_0_11_ARBURST;
  input [2:0] twiddle_h_rsc_0_11_ARSIZE;
  input [7:0] twiddle_h_rsc_0_11_ARLEN;
  input [11:0] twiddle_h_rsc_0_11_ARADDR;
  input twiddle_h_rsc_0_11_ARID;
  input twiddle_h_rsc_0_11_BREADY;
  output twiddle_h_rsc_0_11_BVALID;
  output twiddle_h_rsc_0_11_BUSER;
  output [1:0] twiddle_h_rsc_0_11_BRESP;
  output twiddle_h_rsc_0_11_BID;
  output twiddle_h_rsc_0_11_WREADY;
  input twiddle_h_rsc_0_11_WVALID;
  input twiddle_h_rsc_0_11_WUSER;
  input twiddle_h_rsc_0_11_WLAST;
  input [3:0] twiddle_h_rsc_0_11_WSTRB;
  input [31:0] twiddle_h_rsc_0_11_WDATA;
  output twiddle_h_rsc_0_11_AWREADY;
  input twiddle_h_rsc_0_11_AWVALID;
  input twiddle_h_rsc_0_11_AWUSER;
  input [3:0] twiddle_h_rsc_0_11_AWREGION;
  input [3:0] twiddle_h_rsc_0_11_AWQOS;
  input [2:0] twiddle_h_rsc_0_11_AWPROT;
  input [3:0] twiddle_h_rsc_0_11_AWCACHE;
  input twiddle_h_rsc_0_11_AWLOCK;
  input [1:0] twiddle_h_rsc_0_11_AWBURST;
  input [2:0] twiddle_h_rsc_0_11_AWSIZE;
  input [7:0] twiddle_h_rsc_0_11_AWLEN;
  input [11:0] twiddle_h_rsc_0_11_AWADDR;
  input twiddle_h_rsc_0_11_AWID;
  output twiddle_h_rsc_triosy_0_11_lz;
  input twiddle_h_rsc_0_12_s_tdone;
  input twiddle_h_rsc_0_12_tr_write_done;
  input twiddle_h_rsc_0_12_RREADY;
  output twiddle_h_rsc_0_12_RVALID;
  output twiddle_h_rsc_0_12_RUSER;
  output twiddle_h_rsc_0_12_RLAST;
  output [1:0] twiddle_h_rsc_0_12_RRESP;
  output [31:0] twiddle_h_rsc_0_12_RDATA;
  output twiddle_h_rsc_0_12_RID;
  output twiddle_h_rsc_0_12_ARREADY;
  input twiddle_h_rsc_0_12_ARVALID;
  input twiddle_h_rsc_0_12_ARUSER;
  input [3:0] twiddle_h_rsc_0_12_ARREGION;
  input [3:0] twiddle_h_rsc_0_12_ARQOS;
  input [2:0] twiddle_h_rsc_0_12_ARPROT;
  input [3:0] twiddle_h_rsc_0_12_ARCACHE;
  input twiddle_h_rsc_0_12_ARLOCK;
  input [1:0] twiddle_h_rsc_0_12_ARBURST;
  input [2:0] twiddle_h_rsc_0_12_ARSIZE;
  input [7:0] twiddle_h_rsc_0_12_ARLEN;
  input [11:0] twiddle_h_rsc_0_12_ARADDR;
  input twiddle_h_rsc_0_12_ARID;
  input twiddle_h_rsc_0_12_BREADY;
  output twiddle_h_rsc_0_12_BVALID;
  output twiddle_h_rsc_0_12_BUSER;
  output [1:0] twiddle_h_rsc_0_12_BRESP;
  output twiddle_h_rsc_0_12_BID;
  output twiddle_h_rsc_0_12_WREADY;
  input twiddle_h_rsc_0_12_WVALID;
  input twiddle_h_rsc_0_12_WUSER;
  input twiddle_h_rsc_0_12_WLAST;
  input [3:0] twiddle_h_rsc_0_12_WSTRB;
  input [31:0] twiddle_h_rsc_0_12_WDATA;
  output twiddle_h_rsc_0_12_AWREADY;
  input twiddle_h_rsc_0_12_AWVALID;
  input twiddle_h_rsc_0_12_AWUSER;
  input [3:0] twiddle_h_rsc_0_12_AWREGION;
  input [3:0] twiddle_h_rsc_0_12_AWQOS;
  input [2:0] twiddle_h_rsc_0_12_AWPROT;
  input [3:0] twiddle_h_rsc_0_12_AWCACHE;
  input twiddle_h_rsc_0_12_AWLOCK;
  input [1:0] twiddle_h_rsc_0_12_AWBURST;
  input [2:0] twiddle_h_rsc_0_12_AWSIZE;
  input [7:0] twiddle_h_rsc_0_12_AWLEN;
  input [11:0] twiddle_h_rsc_0_12_AWADDR;
  input twiddle_h_rsc_0_12_AWID;
  output twiddle_h_rsc_triosy_0_12_lz;
  input twiddle_h_rsc_0_13_s_tdone;
  input twiddle_h_rsc_0_13_tr_write_done;
  input twiddle_h_rsc_0_13_RREADY;
  output twiddle_h_rsc_0_13_RVALID;
  output twiddle_h_rsc_0_13_RUSER;
  output twiddle_h_rsc_0_13_RLAST;
  output [1:0] twiddle_h_rsc_0_13_RRESP;
  output [31:0] twiddle_h_rsc_0_13_RDATA;
  output twiddle_h_rsc_0_13_RID;
  output twiddle_h_rsc_0_13_ARREADY;
  input twiddle_h_rsc_0_13_ARVALID;
  input twiddle_h_rsc_0_13_ARUSER;
  input [3:0] twiddle_h_rsc_0_13_ARREGION;
  input [3:0] twiddle_h_rsc_0_13_ARQOS;
  input [2:0] twiddle_h_rsc_0_13_ARPROT;
  input [3:0] twiddle_h_rsc_0_13_ARCACHE;
  input twiddle_h_rsc_0_13_ARLOCK;
  input [1:0] twiddle_h_rsc_0_13_ARBURST;
  input [2:0] twiddle_h_rsc_0_13_ARSIZE;
  input [7:0] twiddle_h_rsc_0_13_ARLEN;
  input [11:0] twiddle_h_rsc_0_13_ARADDR;
  input twiddle_h_rsc_0_13_ARID;
  input twiddle_h_rsc_0_13_BREADY;
  output twiddle_h_rsc_0_13_BVALID;
  output twiddle_h_rsc_0_13_BUSER;
  output [1:0] twiddle_h_rsc_0_13_BRESP;
  output twiddle_h_rsc_0_13_BID;
  output twiddle_h_rsc_0_13_WREADY;
  input twiddle_h_rsc_0_13_WVALID;
  input twiddle_h_rsc_0_13_WUSER;
  input twiddle_h_rsc_0_13_WLAST;
  input [3:0] twiddle_h_rsc_0_13_WSTRB;
  input [31:0] twiddle_h_rsc_0_13_WDATA;
  output twiddle_h_rsc_0_13_AWREADY;
  input twiddle_h_rsc_0_13_AWVALID;
  input twiddle_h_rsc_0_13_AWUSER;
  input [3:0] twiddle_h_rsc_0_13_AWREGION;
  input [3:0] twiddle_h_rsc_0_13_AWQOS;
  input [2:0] twiddle_h_rsc_0_13_AWPROT;
  input [3:0] twiddle_h_rsc_0_13_AWCACHE;
  input twiddle_h_rsc_0_13_AWLOCK;
  input [1:0] twiddle_h_rsc_0_13_AWBURST;
  input [2:0] twiddle_h_rsc_0_13_AWSIZE;
  input [7:0] twiddle_h_rsc_0_13_AWLEN;
  input [11:0] twiddle_h_rsc_0_13_AWADDR;
  input twiddle_h_rsc_0_13_AWID;
  output twiddle_h_rsc_triosy_0_13_lz;
  input twiddle_h_rsc_0_14_s_tdone;
  input twiddle_h_rsc_0_14_tr_write_done;
  input twiddle_h_rsc_0_14_RREADY;
  output twiddle_h_rsc_0_14_RVALID;
  output twiddle_h_rsc_0_14_RUSER;
  output twiddle_h_rsc_0_14_RLAST;
  output [1:0] twiddle_h_rsc_0_14_RRESP;
  output [31:0] twiddle_h_rsc_0_14_RDATA;
  output twiddle_h_rsc_0_14_RID;
  output twiddle_h_rsc_0_14_ARREADY;
  input twiddle_h_rsc_0_14_ARVALID;
  input twiddle_h_rsc_0_14_ARUSER;
  input [3:0] twiddle_h_rsc_0_14_ARREGION;
  input [3:0] twiddle_h_rsc_0_14_ARQOS;
  input [2:0] twiddle_h_rsc_0_14_ARPROT;
  input [3:0] twiddle_h_rsc_0_14_ARCACHE;
  input twiddle_h_rsc_0_14_ARLOCK;
  input [1:0] twiddle_h_rsc_0_14_ARBURST;
  input [2:0] twiddle_h_rsc_0_14_ARSIZE;
  input [7:0] twiddle_h_rsc_0_14_ARLEN;
  input [11:0] twiddle_h_rsc_0_14_ARADDR;
  input twiddle_h_rsc_0_14_ARID;
  input twiddle_h_rsc_0_14_BREADY;
  output twiddle_h_rsc_0_14_BVALID;
  output twiddle_h_rsc_0_14_BUSER;
  output [1:0] twiddle_h_rsc_0_14_BRESP;
  output twiddle_h_rsc_0_14_BID;
  output twiddle_h_rsc_0_14_WREADY;
  input twiddle_h_rsc_0_14_WVALID;
  input twiddle_h_rsc_0_14_WUSER;
  input twiddle_h_rsc_0_14_WLAST;
  input [3:0] twiddle_h_rsc_0_14_WSTRB;
  input [31:0] twiddle_h_rsc_0_14_WDATA;
  output twiddle_h_rsc_0_14_AWREADY;
  input twiddle_h_rsc_0_14_AWVALID;
  input twiddle_h_rsc_0_14_AWUSER;
  input [3:0] twiddle_h_rsc_0_14_AWREGION;
  input [3:0] twiddle_h_rsc_0_14_AWQOS;
  input [2:0] twiddle_h_rsc_0_14_AWPROT;
  input [3:0] twiddle_h_rsc_0_14_AWCACHE;
  input twiddle_h_rsc_0_14_AWLOCK;
  input [1:0] twiddle_h_rsc_0_14_AWBURST;
  input [2:0] twiddle_h_rsc_0_14_AWSIZE;
  input [7:0] twiddle_h_rsc_0_14_AWLEN;
  input [11:0] twiddle_h_rsc_0_14_AWADDR;
  input twiddle_h_rsc_0_14_AWID;
  output twiddle_h_rsc_triosy_0_14_lz;
  input twiddle_h_rsc_0_15_s_tdone;
  input twiddle_h_rsc_0_15_tr_write_done;
  input twiddle_h_rsc_0_15_RREADY;
  output twiddle_h_rsc_0_15_RVALID;
  output twiddle_h_rsc_0_15_RUSER;
  output twiddle_h_rsc_0_15_RLAST;
  output [1:0] twiddle_h_rsc_0_15_RRESP;
  output [31:0] twiddle_h_rsc_0_15_RDATA;
  output twiddle_h_rsc_0_15_RID;
  output twiddle_h_rsc_0_15_ARREADY;
  input twiddle_h_rsc_0_15_ARVALID;
  input twiddle_h_rsc_0_15_ARUSER;
  input [3:0] twiddle_h_rsc_0_15_ARREGION;
  input [3:0] twiddle_h_rsc_0_15_ARQOS;
  input [2:0] twiddle_h_rsc_0_15_ARPROT;
  input [3:0] twiddle_h_rsc_0_15_ARCACHE;
  input twiddle_h_rsc_0_15_ARLOCK;
  input [1:0] twiddle_h_rsc_0_15_ARBURST;
  input [2:0] twiddle_h_rsc_0_15_ARSIZE;
  input [7:0] twiddle_h_rsc_0_15_ARLEN;
  input [11:0] twiddle_h_rsc_0_15_ARADDR;
  input twiddle_h_rsc_0_15_ARID;
  input twiddle_h_rsc_0_15_BREADY;
  output twiddle_h_rsc_0_15_BVALID;
  output twiddle_h_rsc_0_15_BUSER;
  output [1:0] twiddle_h_rsc_0_15_BRESP;
  output twiddle_h_rsc_0_15_BID;
  output twiddle_h_rsc_0_15_WREADY;
  input twiddle_h_rsc_0_15_WVALID;
  input twiddle_h_rsc_0_15_WUSER;
  input twiddle_h_rsc_0_15_WLAST;
  input [3:0] twiddle_h_rsc_0_15_WSTRB;
  input [31:0] twiddle_h_rsc_0_15_WDATA;
  output twiddle_h_rsc_0_15_AWREADY;
  input twiddle_h_rsc_0_15_AWVALID;
  input twiddle_h_rsc_0_15_AWUSER;
  input [3:0] twiddle_h_rsc_0_15_AWREGION;
  input [3:0] twiddle_h_rsc_0_15_AWQOS;
  input [2:0] twiddle_h_rsc_0_15_AWPROT;
  input [3:0] twiddle_h_rsc_0_15_AWCACHE;
  input twiddle_h_rsc_0_15_AWLOCK;
  input [1:0] twiddle_h_rsc_0_15_AWBURST;
  input [2:0] twiddle_h_rsc_0_15_AWSIZE;
  input [7:0] twiddle_h_rsc_0_15_AWLEN;
  input [11:0] twiddle_h_rsc_0_15_AWADDR;
  input twiddle_h_rsc_0_15_AWID;
  output twiddle_h_rsc_triosy_0_15_lz;


  // Interconnect Declarations
  wire yt_rsc_0_0_i_clken_d;
  wire [31:0] yt_rsc_0_0_i_qa_d;
  wire [31:0] yt_rsc_0_1_i_qa_d;
  wire [31:0] yt_rsc_0_2_i_qa_d;
  wire [31:0] yt_rsc_0_3_i_qa_d;
  wire [31:0] yt_rsc_0_4_i_qa_d;
  wire [31:0] yt_rsc_0_5_i_qa_d;
  wire [31:0] yt_rsc_0_6_i_qa_d;
  wire [31:0] yt_rsc_0_7_i_qa_d;
  wire [31:0] yt_rsc_0_8_i_qa_d;
  wire [31:0] yt_rsc_0_9_i_qa_d;
  wire [31:0] yt_rsc_0_10_i_qa_d;
  wire [31:0] yt_rsc_0_11_i_qa_d;
  wire [31:0] yt_rsc_0_12_i_qa_d;
  wire [31:0] yt_rsc_0_13_i_qa_d;
  wire [31:0] yt_rsc_0_14_i_qa_d;
  wire [31:0] yt_rsc_0_15_i_qa_d;
  wire yt_rsc_0_16_i_clken_d;
  wire [31:0] yt_rsc_0_16_i_qa_d;
  wire [31:0] yt_rsc_0_17_i_qa_d;
  wire [31:0] yt_rsc_0_18_i_qa_d;
  wire [31:0] yt_rsc_0_19_i_qa_d;
  wire [31:0] yt_rsc_0_20_i_qa_d;
  wire [31:0] yt_rsc_0_21_i_qa_d;
  wire [31:0] yt_rsc_0_22_i_qa_d;
  wire [31:0] yt_rsc_0_23_i_qa_d;
  wire [31:0] yt_rsc_0_24_i_qa_d;
  wire [31:0] yt_rsc_0_25_i_qa_d;
  wire [31:0] yt_rsc_0_26_i_qa_d;
  wire [31:0] yt_rsc_0_27_i_qa_d;
  wire [31:0] yt_rsc_0_28_i_qa_d;
  wire [31:0] yt_rsc_0_29_i_qa_d;
  wire [31:0] yt_rsc_0_30_i_qa_d;
  wire [31:0] yt_rsc_0_31_i_qa_d;
  wire yt_rsc_1_0_i_clken_d;
  wire [31:0] yt_rsc_1_0_i_da_d;
  wire [31:0] yt_rsc_1_0_i_qa_d;
  wire [31:0] yt_rsc_1_1_i_da_d;
  wire [31:0] yt_rsc_1_1_i_qa_d;
  wire [31:0] yt_rsc_1_2_i_da_d;
  wire [31:0] yt_rsc_1_2_i_qa_d;
  wire [31:0] yt_rsc_1_3_i_da_d;
  wire [31:0] yt_rsc_1_3_i_qa_d;
  wire [31:0] yt_rsc_1_4_i_da_d;
  wire [31:0] yt_rsc_1_4_i_qa_d;
  wire [31:0] yt_rsc_1_5_i_da_d;
  wire [31:0] yt_rsc_1_5_i_qa_d;
  wire [31:0] yt_rsc_1_6_i_da_d;
  wire [31:0] yt_rsc_1_6_i_qa_d;
  wire [31:0] yt_rsc_1_7_i_da_d;
  wire [31:0] yt_rsc_1_7_i_qa_d;
  wire [31:0] yt_rsc_1_8_i_da_d;
  wire [31:0] yt_rsc_1_8_i_qa_d;
  wire [31:0] yt_rsc_1_9_i_da_d;
  wire [31:0] yt_rsc_1_9_i_qa_d;
  wire [31:0] yt_rsc_1_10_i_da_d;
  wire [31:0] yt_rsc_1_10_i_qa_d;
  wire [31:0] yt_rsc_1_11_i_da_d;
  wire [31:0] yt_rsc_1_11_i_qa_d;
  wire [31:0] yt_rsc_1_12_i_da_d;
  wire [31:0] yt_rsc_1_12_i_qa_d;
  wire [31:0] yt_rsc_1_13_i_da_d;
  wire [31:0] yt_rsc_1_13_i_qa_d;
  wire [31:0] yt_rsc_1_14_i_da_d;
  wire [31:0] yt_rsc_1_14_i_qa_d;
  wire [31:0] yt_rsc_1_15_i_da_d;
  wire [31:0] yt_rsc_1_15_i_qa_d;
  wire yt_rsc_1_16_i_clken_d;
  wire [31:0] yt_rsc_1_16_i_da_d;
  wire [31:0] yt_rsc_1_16_i_qa_d;
  wire [31:0] yt_rsc_1_17_i_da_d;
  wire [31:0] yt_rsc_1_17_i_qa_d;
  wire [31:0] yt_rsc_1_18_i_da_d;
  wire [31:0] yt_rsc_1_18_i_qa_d;
  wire [31:0] yt_rsc_1_19_i_da_d;
  wire [31:0] yt_rsc_1_19_i_qa_d;
  wire [31:0] yt_rsc_1_20_i_da_d;
  wire [31:0] yt_rsc_1_20_i_qa_d;
  wire [31:0] yt_rsc_1_21_i_da_d;
  wire [31:0] yt_rsc_1_21_i_qa_d;
  wire [31:0] yt_rsc_1_22_i_da_d;
  wire [31:0] yt_rsc_1_22_i_qa_d;
  wire [31:0] yt_rsc_1_23_i_da_d;
  wire [31:0] yt_rsc_1_23_i_qa_d;
  wire [31:0] yt_rsc_1_24_i_da_d;
  wire [31:0] yt_rsc_1_24_i_qa_d;
  wire [31:0] yt_rsc_1_25_i_da_d;
  wire [31:0] yt_rsc_1_25_i_qa_d;
  wire [31:0] yt_rsc_1_26_i_da_d;
  wire [31:0] yt_rsc_1_26_i_qa_d;
  wire [31:0] yt_rsc_1_27_i_da_d;
  wire [31:0] yt_rsc_1_27_i_qa_d;
  wire [31:0] yt_rsc_1_28_i_da_d;
  wire [31:0] yt_rsc_1_28_i_qa_d;
  wire [31:0] yt_rsc_1_29_i_da_d;
  wire [31:0] yt_rsc_1_29_i_qa_d;
  wire [31:0] yt_rsc_1_30_i_da_d;
  wire [31:0] yt_rsc_1_30_i_qa_d;
  wire [31:0] yt_rsc_1_31_i_da_d;
  wire [31:0] yt_rsc_1_31_i_qa_d;
  wire [31:0] xt_rsc_0_0_i_qa_d;
  wire xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_1_i_qa_d;
  wire xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_2_i_qa_d;
  wire xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_3_i_qa_d;
  wire xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_4_i_qa_d;
  wire xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_5_i_qa_d;
  wire xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_6_i_qa_d;
  wire xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_7_i_qa_d;
  wire xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_8_i_qa_d;
  wire xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_9_i_qa_d;
  wire xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_10_i_qa_d;
  wire xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_11_i_qa_d;
  wire xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_12_i_qa_d;
  wire xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_13_i_qa_d;
  wire xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_14_i_qa_d;
  wire xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_15_i_qa_d;
  wire xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_16_i_qa_d;
  wire xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_17_i_qa_d;
  wire xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_18_i_qa_d;
  wire xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_19_i_qa_d;
  wire xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_20_i_qa_d;
  wire xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_21_i_qa_d;
  wire xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_22_i_qa_d;
  wire xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_23_i_qa_d;
  wire xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_24_i_qa_d;
  wire xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_25_i_qa_d;
  wire xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_26_i_qa_d;
  wire xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_27_i_qa_d;
  wire xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_28_i_qa_d;
  wire xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_29_i_qa_d;
  wire xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_30_i_qa_d;
  wire xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_0_31_i_qa_d;
  wire xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_0_i_qa_d;
  wire xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_1_i_qa_d;
  wire xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_2_i_qa_d;
  wire xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_3_i_qa_d;
  wire xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_4_i_qa_d;
  wire xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_5_i_qa_d;
  wire xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_6_i_qa_d;
  wire xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_7_i_qa_d;
  wire xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_8_i_qa_d;
  wire xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_9_i_qa_d;
  wire xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_10_i_qa_d;
  wire xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_11_i_qa_d;
  wire xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_12_i_qa_d;
  wire xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_13_i_qa_d;
  wire xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_14_i_qa_d;
  wire xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_15_i_qa_d;
  wire xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_16_i_qa_d;
  wire xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_17_i_qa_d;
  wire xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_18_i_qa_d;
  wire xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_19_i_qa_d;
  wire xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_20_i_qa_d;
  wire xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_21_i_qa_d;
  wire xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_22_i_qa_d;
  wire xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_23_i_qa_d;
  wire xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_24_i_qa_d;
  wire xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_25_i_qa_d;
  wire xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_26_i_qa_d;
  wire xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_27_i_qa_d;
  wire xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_28_i_qa_d;
  wire xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_29_i_qa_d;
  wire xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_30_i_qa_d;
  wire xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire [31:0] xt_rsc_1_31_i_qa_d;
  wire xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_0_clken;
  wire [31:0] yt_rsc_0_0_qa;
  wire yt_rsc_0_0_wea;
  wire [31:0] yt_rsc_0_0_da;
  wire [3:0] yt_rsc_0_0_adra;
  wire [31:0] yt_rsc_0_0_unc_1;
  wire yt_rsc_0_1_clken;
  wire [31:0] yt_rsc_0_1_qa;
  wire yt_rsc_0_1_wea;
  wire [31:0] yt_rsc_0_1_da;
  wire [3:0] yt_rsc_0_1_adra;
  wire [31:0] yt_rsc_0_1_unc_1;
  wire yt_rsc_0_2_clken;
  wire [31:0] yt_rsc_0_2_qa;
  wire yt_rsc_0_2_wea;
  wire [31:0] yt_rsc_0_2_da;
  wire [3:0] yt_rsc_0_2_adra;
  wire [31:0] yt_rsc_0_2_unc_1;
  wire yt_rsc_0_3_clken;
  wire [31:0] yt_rsc_0_3_qa;
  wire yt_rsc_0_3_wea;
  wire [31:0] yt_rsc_0_3_da;
  wire [3:0] yt_rsc_0_3_adra;
  wire [31:0] yt_rsc_0_3_unc_1;
  wire yt_rsc_0_4_clken;
  wire [31:0] yt_rsc_0_4_qa;
  wire yt_rsc_0_4_wea;
  wire [31:0] yt_rsc_0_4_da;
  wire [3:0] yt_rsc_0_4_adra;
  wire [31:0] yt_rsc_0_4_unc_1;
  wire yt_rsc_0_5_clken;
  wire [31:0] yt_rsc_0_5_qa;
  wire yt_rsc_0_5_wea;
  wire [31:0] yt_rsc_0_5_da;
  wire [3:0] yt_rsc_0_5_adra;
  wire [31:0] yt_rsc_0_5_unc_1;
  wire yt_rsc_0_6_clken;
  wire [31:0] yt_rsc_0_6_qa;
  wire yt_rsc_0_6_wea;
  wire [31:0] yt_rsc_0_6_da;
  wire [3:0] yt_rsc_0_6_adra;
  wire [31:0] yt_rsc_0_6_unc_1;
  wire yt_rsc_0_7_clken;
  wire [31:0] yt_rsc_0_7_qa;
  wire yt_rsc_0_7_wea;
  wire [31:0] yt_rsc_0_7_da;
  wire [3:0] yt_rsc_0_7_adra;
  wire [31:0] yt_rsc_0_7_unc_1;
  wire yt_rsc_0_8_clken;
  wire [31:0] yt_rsc_0_8_qa;
  wire yt_rsc_0_8_wea;
  wire [31:0] yt_rsc_0_8_da;
  wire [3:0] yt_rsc_0_8_adra;
  wire [31:0] yt_rsc_0_8_unc_1;
  wire yt_rsc_0_9_clken;
  wire [31:0] yt_rsc_0_9_qa;
  wire yt_rsc_0_9_wea;
  wire [31:0] yt_rsc_0_9_da;
  wire [3:0] yt_rsc_0_9_adra;
  wire [31:0] yt_rsc_0_9_unc_1;
  wire yt_rsc_0_10_clken;
  wire [31:0] yt_rsc_0_10_qa;
  wire yt_rsc_0_10_wea;
  wire [31:0] yt_rsc_0_10_da;
  wire [3:0] yt_rsc_0_10_adra;
  wire [31:0] yt_rsc_0_10_unc_1;
  wire yt_rsc_0_11_clken;
  wire [31:0] yt_rsc_0_11_qa;
  wire yt_rsc_0_11_wea;
  wire [31:0] yt_rsc_0_11_da;
  wire [3:0] yt_rsc_0_11_adra;
  wire [31:0] yt_rsc_0_11_unc_1;
  wire yt_rsc_0_12_clken;
  wire [31:0] yt_rsc_0_12_qa;
  wire yt_rsc_0_12_wea;
  wire [31:0] yt_rsc_0_12_da;
  wire [3:0] yt_rsc_0_12_adra;
  wire [31:0] yt_rsc_0_12_unc_1;
  wire yt_rsc_0_13_clken;
  wire [31:0] yt_rsc_0_13_qa;
  wire yt_rsc_0_13_wea;
  wire [31:0] yt_rsc_0_13_da;
  wire [3:0] yt_rsc_0_13_adra;
  wire [31:0] yt_rsc_0_13_unc_1;
  wire yt_rsc_0_14_clken;
  wire [31:0] yt_rsc_0_14_qa;
  wire yt_rsc_0_14_wea;
  wire [31:0] yt_rsc_0_14_da;
  wire [3:0] yt_rsc_0_14_adra;
  wire [31:0] yt_rsc_0_14_unc_1;
  wire yt_rsc_0_15_clken;
  wire [31:0] yt_rsc_0_15_qa;
  wire yt_rsc_0_15_wea;
  wire [31:0] yt_rsc_0_15_da;
  wire [3:0] yt_rsc_0_15_adra;
  wire [31:0] yt_rsc_0_15_unc_1;
  wire yt_rsc_0_16_clken;
  wire [31:0] yt_rsc_0_16_qa;
  wire yt_rsc_0_16_wea;
  wire [31:0] yt_rsc_0_16_da;
  wire [3:0] yt_rsc_0_16_adra;
  wire [31:0] yt_rsc_0_16_unc_1;
  wire yt_rsc_0_17_clken;
  wire [31:0] yt_rsc_0_17_qa;
  wire yt_rsc_0_17_wea;
  wire [31:0] yt_rsc_0_17_da;
  wire [3:0] yt_rsc_0_17_adra;
  wire [31:0] yt_rsc_0_17_unc_1;
  wire yt_rsc_0_18_clken;
  wire [31:0] yt_rsc_0_18_qa;
  wire yt_rsc_0_18_wea;
  wire [31:0] yt_rsc_0_18_da;
  wire [3:0] yt_rsc_0_18_adra;
  wire [31:0] yt_rsc_0_18_unc_1;
  wire yt_rsc_0_19_clken;
  wire [31:0] yt_rsc_0_19_qa;
  wire yt_rsc_0_19_wea;
  wire [31:0] yt_rsc_0_19_da;
  wire [3:0] yt_rsc_0_19_adra;
  wire [31:0] yt_rsc_0_19_unc_1;
  wire yt_rsc_0_20_clken;
  wire [31:0] yt_rsc_0_20_qa;
  wire yt_rsc_0_20_wea;
  wire [31:0] yt_rsc_0_20_da;
  wire [3:0] yt_rsc_0_20_adra;
  wire [31:0] yt_rsc_0_20_unc_1;
  wire yt_rsc_0_21_clken;
  wire [31:0] yt_rsc_0_21_qa;
  wire yt_rsc_0_21_wea;
  wire [31:0] yt_rsc_0_21_da;
  wire [3:0] yt_rsc_0_21_adra;
  wire [31:0] yt_rsc_0_21_unc_1;
  wire yt_rsc_0_22_clken;
  wire [31:0] yt_rsc_0_22_qa;
  wire yt_rsc_0_22_wea;
  wire [31:0] yt_rsc_0_22_da;
  wire [3:0] yt_rsc_0_22_adra;
  wire [31:0] yt_rsc_0_22_unc_1;
  wire yt_rsc_0_23_clken;
  wire [31:0] yt_rsc_0_23_qa;
  wire yt_rsc_0_23_wea;
  wire [31:0] yt_rsc_0_23_da;
  wire [3:0] yt_rsc_0_23_adra;
  wire [31:0] yt_rsc_0_23_unc_1;
  wire yt_rsc_0_24_clken;
  wire [31:0] yt_rsc_0_24_qa;
  wire yt_rsc_0_24_wea;
  wire [31:0] yt_rsc_0_24_da;
  wire [3:0] yt_rsc_0_24_adra;
  wire [31:0] yt_rsc_0_24_unc_1;
  wire yt_rsc_0_25_clken;
  wire [31:0] yt_rsc_0_25_qa;
  wire yt_rsc_0_25_wea;
  wire [31:0] yt_rsc_0_25_da;
  wire [3:0] yt_rsc_0_25_adra;
  wire [31:0] yt_rsc_0_25_unc_1;
  wire yt_rsc_0_26_clken;
  wire [31:0] yt_rsc_0_26_qa;
  wire yt_rsc_0_26_wea;
  wire [31:0] yt_rsc_0_26_da;
  wire [3:0] yt_rsc_0_26_adra;
  wire [31:0] yt_rsc_0_26_unc_1;
  wire yt_rsc_0_27_clken;
  wire [31:0] yt_rsc_0_27_qa;
  wire yt_rsc_0_27_wea;
  wire [31:0] yt_rsc_0_27_da;
  wire [3:0] yt_rsc_0_27_adra;
  wire [31:0] yt_rsc_0_27_unc_1;
  wire yt_rsc_0_28_clken;
  wire [31:0] yt_rsc_0_28_qa;
  wire yt_rsc_0_28_wea;
  wire [31:0] yt_rsc_0_28_da;
  wire [3:0] yt_rsc_0_28_adra;
  wire [31:0] yt_rsc_0_28_unc_1;
  wire yt_rsc_0_29_clken;
  wire [31:0] yt_rsc_0_29_qa;
  wire yt_rsc_0_29_wea;
  wire [31:0] yt_rsc_0_29_da;
  wire [3:0] yt_rsc_0_29_adra;
  wire [31:0] yt_rsc_0_29_unc_1;
  wire yt_rsc_0_30_clken;
  wire [31:0] yt_rsc_0_30_qa;
  wire yt_rsc_0_30_wea;
  wire [31:0] yt_rsc_0_30_da;
  wire [3:0] yt_rsc_0_30_adra;
  wire [31:0] yt_rsc_0_30_unc_1;
  wire yt_rsc_0_31_clken;
  wire [31:0] yt_rsc_0_31_qa;
  wire yt_rsc_0_31_wea;
  wire [31:0] yt_rsc_0_31_da;
  wire [3:0] yt_rsc_0_31_adra;
  wire [31:0] yt_rsc_0_31_unc_1;
  wire yt_rsc_1_0_clken;
  wire [31:0] yt_rsc_1_0_qa;
  wire yt_rsc_1_0_wea;
  wire [31:0] yt_rsc_1_0_da;
  wire [3:0] yt_rsc_1_0_adra;
  wire [31:0] yt_rsc_1_0_unc_1;
  wire yt_rsc_1_1_clken;
  wire [31:0] yt_rsc_1_1_qa;
  wire yt_rsc_1_1_wea;
  wire [31:0] yt_rsc_1_1_da;
  wire [3:0] yt_rsc_1_1_adra;
  wire [31:0] yt_rsc_1_1_unc_1;
  wire yt_rsc_1_2_clken;
  wire [31:0] yt_rsc_1_2_qa;
  wire yt_rsc_1_2_wea;
  wire [31:0] yt_rsc_1_2_da;
  wire [3:0] yt_rsc_1_2_adra;
  wire [31:0] yt_rsc_1_2_unc_1;
  wire yt_rsc_1_3_clken;
  wire [31:0] yt_rsc_1_3_qa;
  wire yt_rsc_1_3_wea;
  wire [31:0] yt_rsc_1_3_da;
  wire [3:0] yt_rsc_1_3_adra;
  wire [31:0] yt_rsc_1_3_unc_1;
  wire yt_rsc_1_4_clken;
  wire [31:0] yt_rsc_1_4_qa;
  wire yt_rsc_1_4_wea;
  wire [31:0] yt_rsc_1_4_da;
  wire [3:0] yt_rsc_1_4_adra;
  wire [31:0] yt_rsc_1_4_unc_1;
  wire yt_rsc_1_5_clken;
  wire [31:0] yt_rsc_1_5_qa;
  wire yt_rsc_1_5_wea;
  wire [31:0] yt_rsc_1_5_da;
  wire [3:0] yt_rsc_1_5_adra;
  wire [31:0] yt_rsc_1_5_unc_1;
  wire yt_rsc_1_6_clken;
  wire [31:0] yt_rsc_1_6_qa;
  wire yt_rsc_1_6_wea;
  wire [31:0] yt_rsc_1_6_da;
  wire [3:0] yt_rsc_1_6_adra;
  wire [31:0] yt_rsc_1_6_unc_1;
  wire yt_rsc_1_7_clken;
  wire [31:0] yt_rsc_1_7_qa;
  wire yt_rsc_1_7_wea;
  wire [31:0] yt_rsc_1_7_da;
  wire [3:0] yt_rsc_1_7_adra;
  wire [31:0] yt_rsc_1_7_unc_1;
  wire yt_rsc_1_8_clken;
  wire [31:0] yt_rsc_1_8_qa;
  wire yt_rsc_1_8_wea;
  wire [31:0] yt_rsc_1_8_da;
  wire [3:0] yt_rsc_1_8_adra;
  wire [31:0] yt_rsc_1_8_unc_1;
  wire yt_rsc_1_9_clken;
  wire [31:0] yt_rsc_1_9_qa;
  wire yt_rsc_1_9_wea;
  wire [31:0] yt_rsc_1_9_da;
  wire [3:0] yt_rsc_1_9_adra;
  wire [31:0] yt_rsc_1_9_unc_1;
  wire yt_rsc_1_10_clken;
  wire [31:0] yt_rsc_1_10_qa;
  wire yt_rsc_1_10_wea;
  wire [31:0] yt_rsc_1_10_da;
  wire [3:0] yt_rsc_1_10_adra;
  wire [31:0] yt_rsc_1_10_unc_1;
  wire yt_rsc_1_11_clken;
  wire [31:0] yt_rsc_1_11_qa;
  wire yt_rsc_1_11_wea;
  wire [31:0] yt_rsc_1_11_da;
  wire [3:0] yt_rsc_1_11_adra;
  wire [31:0] yt_rsc_1_11_unc_1;
  wire yt_rsc_1_12_clken;
  wire [31:0] yt_rsc_1_12_qa;
  wire yt_rsc_1_12_wea;
  wire [31:0] yt_rsc_1_12_da;
  wire [3:0] yt_rsc_1_12_adra;
  wire [31:0] yt_rsc_1_12_unc_1;
  wire yt_rsc_1_13_clken;
  wire [31:0] yt_rsc_1_13_qa;
  wire yt_rsc_1_13_wea;
  wire [31:0] yt_rsc_1_13_da;
  wire [3:0] yt_rsc_1_13_adra;
  wire [31:0] yt_rsc_1_13_unc_1;
  wire yt_rsc_1_14_clken;
  wire [31:0] yt_rsc_1_14_qa;
  wire yt_rsc_1_14_wea;
  wire [31:0] yt_rsc_1_14_da;
  wire [3:0] yt_rsc_1_14_adra;
  wire [31:0] yt_rsc_1_14_unc_1;
  wire yt_rsc_1_15_clken;
  wire [31:0] yt_rsc_1_15_qa;
  wire yt_rsc_1_15_wea;
  wire [31:0] yt_rsc_1_15_da;
  wire [3:0] yt_rsc_1_15_adra;
  wire [31:0] yt_rsc_1_15_unc_1;
  wire yt_rsc_1_16_clken;
  wire [31:0] yt_rsc_1_16_qa;
  wire yt_rsc_1_16_wea;
  wire [31:0] yt_rsc_1_16_da;
  wire [3:0] yt_rsc_1_16_adra;
  wire [31:0] yt_rsc_1_16_unc_1;
  wire yt_rsc_1_17_clken;
  wire [31:0] yt_rsc_1_17_qa;
  wire yt_rsc_1_17_wea;
  wire [31:0] yt_rsc_1_17_da;
  wire [3:0] yt_rsc_1_17_adra;
  wire [31:0] yt_rsc_1_17_unc_1;
  wire yt_rsc_1_18_clken;
  wire [31:0] yt_rsc_1_18_qa;
  wire yt_rsc_1_18_wea;
  wire [31:0] yt_rsc_1_18_da;
  wire [3:0] yt_rsc_1_18_adra;
  wire [31:0] yt_rsc_1_18_unc_1;
  wire yt_rsc_1_19_clken;
  wire [31:0] yt_rsc_1_19_qa;
  wire yt_rsc_1_19_wea;
  wire [31:0] yt_rsc_1_19_da;
  wire [3:0] yt_rsc_1_19_adra;
  wire [31:0] yt_rsc_1_19_unc_1;
  wire yt_rsc_1_20_clken;
  wire [31:0] yt_rsc_1_20_qa;
  wire yt_rsc_1_20_wea;
  wire [31:0] yt_rsc_1_20_da;
  wire [3:0] yt_rsc_1_20_adra;
  wire [31:0] yt_rsc_1_20_unc_1;
  wire yt_rsc_1_21_clken;
  wire [31:0] yt_rsc_1_21_qa;
  wire yt_rsc_1_21_wea;
  wire [31:0] yt_rsc_1_21_da;
  wire [3:0] yt_rsc_1_21_adra;
  wire [31:0] yt_rsc_1_21_unc_1;
  wire yt_rsc_1_22_clken;
  wire [31:0] yt_rsc_1_22_qa;
  wire yt_rsc_1_22_wea;
  wire [31:0] yt_rsc_1_22_da;
  wire [3:0] yt_rsc_1_22_adra;
  wire [31:0] yt_rsc_1_22_unc_1;
  wire yt_rsc_1_23_clken;
  wire [31:0] yt_rsc_1_23_qa;
  wire yt_rsc_1_23_wea;
  wire [31:0] yt_rsc_1_23_da;
  wire [3:0] yt_rsc_1_23_adra;
  wire [31:0] yt_rsc_1_23_unc_1;
  wire yt_rsc_1_24_clken;
  wire [31:0] yt_rsc_1_24_qa;
  wire yt_rsc_1_24_wea;
  wire [31:0] yt_rsc_1_24_da;
  wire [3:0] yt_rsc_1_24_adra;
  wire [31:0] yt_rsc_1_24_unc_1;
  wire yt_rsc_1_25_clken;
  wire [31:0] yt_rsc_1_25_qa;
  wire yt_rsc_1_25_wea;
  wire [31:0] yt_rsc_1_25_da;
  wire [3:0] yt_rsc_1_25_adra;
  wire [31:0] yt_rsc_1_25_unc_1;
  wire yt_rsc_1_26_clken;
  wire [31:0] yt_rsc_1_26_qa;
  wire yt_rsc_1_26_wea;
  wire [31:0] yt_rsc_1_26_da;
  wire [3:0] yt_rsc_1_26_adra;
  wire [31:0] yt_rsc_1_26_unc_1;
  wire yt_rsc_1_27_clken;
  wire [31:0] yt_rsc_1_27_qa;
  wire yt_rsc_1_27_wea;
  wire [31:0] yt_rsc_1_27_da;
  wire [3:0] yt_rsc_1_27_adra;
  wire [31:0] yt_rsc_1_27_unc_1;
  wire yt_rsc_1_28_clken;
  wire [31:0] yt_rsc_1_28_qa;
  wire yt_rsc_1_28_wea;
  wire [31:0] yt_rsc_1_28_da;
  wire [3:0] yt_rsc_1_28_adra;
  wire [31:0] yt_rsc_1_28_unc_1;
  wire yt_rsc_1_29_clken;
  wire [31:0] yt_rsc_1_29_qa;
  wire yt_rsc_1_29_wea;
  wire [31:0] yt_rsc_1_29_da;
  wire [3:0] yt_rsc_1_29_adra;
  wire [31:0] yt_rsc_1_29_unc_1;
  wire yt_rsc_1_30_clken;
  wire [31:0] yt_rsc_1_30_qa;
  wire yt_rsc_1_30_wea;
  wire [31:0] yt_rsc_1_30_da;
  wire [3:0] yt_rsc_1_30_adra;
  wire [31:0] yt_rsc_1_30_unc_1;
  wire yt_rsc_1_31_clken;
  wire [31:0] yt_rsc_1_31_qa;
  wire yt_rsc_1_31_wea;
  wire [31:0] yt_rsc_1_31_da;
  wire [3:0] yt_rsc_1_31_adra;
  wire [31:0] yt_rsc_1_31_unc_1;
  wire [3:0] yt_rsc_0_0_i_adra_d_iff;
  wire [31:0] yt_rsc_0_0_i_da_d_iff;
  wire yt_rsc_0_0_i_wea_d_iff;
  wire yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff;
  wire [31:0] yt_rsc_0_1_i_da_d_iff;
  wire [31:0] yt_rsc_0_2_i_da_d_iff;
  wire [31:0] yt_rsc_0_3_i_da_d_iff;
  wire [31:0] yt_rsc_0_4_i_da_d_iff;
  wire [31:0] yt_rsc_0_5_i_da_d_iff;
  wire [31:0] yt_rsc_0_6_i_da_d_iff;
  wire [31:0] yt_rsc_0_7_i_da_d_iff;
  wire [31:0] yt_rsc_0_8_i_da_d_iff;
  wire [31:0] yt_rsc_0_9_i_da_d_iff;
  wire [31:0] yt_rsc_0_10_i_da_d_iff;
  wire [31:0] yt_rsc_0_11_i_da_d_iff;
  wire [31:0] yt_rsc_0_12_i_da_d_iff;
  wire [31:0] yt_rsc_0_13_i_da_d_iff;
  wire [31:0] yt_rsc_0_14_i_da_d_iff;
  wire [31:0] yt_rsc_0_15_i_da_d_iff;
  wire [3:0] yt_rsc_0_16_i_adra_d_iff;
  wire yt_rsc_0_16_i_wea_d_iff;
  wire [3:0] yt_rsc_1_0_i_adra_d_iff;
  wire yt_rsc_1_0_i_wea_d_iff;
  wire yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff;
  wire [3:0] yt_rsc_1_16_i_adra_d_iff;
  wire yt_rsc_1_16_i_wea_d_iff;
  wire [3:0] xt_rsc_0_0_i_adra_d_iff;
  wire [31:0] xt_rsc_0_0_i_da_d_iff;
  wire xt_rsc_0_0_i_wea_d_iff;
  wire [31:0] xt_rsc_0_1_i_da_d_iff;
  wire xt_rsc_0_1_i_wea_d_iff;
  wire [31:0] xt_rsc_0_2_i_da_d_iff;
  wire xt_rsc_0_2_i_wea_d_iff;
  wire [31:0] xt_rsc_0_3_i_da_d_iff;
  wire xt_rsc_0_3_i_wea_d_iff;
  wire [31:0] xt_rsc_0_4_i_da_d_iff;
  wire xt_rsc_0_4_i_wea_d_iff;
  wire [31:0] xt_rsc_0_5_i_da_d_iff;
  wire xt_rsc_0_5_i_wea_d_iff;
  wire [31:0] xt_rsc_0_6_i_da_d_iff;
  wire xt_rsc_0_6_i_wea_d_iff;
  wire [31:0] xt_rsc_0_7_i_da_d_iff;
  wire xt_rsc_0_7_i_wea_d_iff;
  wire [31:0] xt_rsc_0_8_i_da_d_iff;
  wire xt_rsc_0_8_i_wea_d_iff;
  wire [31:0] xt_rsc_0_9_i_da_d_iff;
  wire xt_rsc_0_9_i_wea_d_iff;
  wire [31:0] xt_rsc_0_10_i_da_d_iff;
  wire xt_rsc_0_10_i_wea_d_iff;
  wire [31:0] xt_rsc_0_11_i_da_d_iff;
  wire xt_rsc_0_11_i_wea_d_iff;
  wire [31:0] xt_rsc_0_12_i_da_d_iff;
  wire xt_rsc_0_12_i_wea_d_iff;
  wire [31:0] xt_rsc_0_13_i_da_d_iff;
  wire xt_rsc_0_13_i_wea_d_iff;
  wire [31:0] xt_rsc_0_14_i_da_d_iff;
  wire xt_rsc_0_14_i_wea_d_iff;
  wire [31:0] xt_rsc_0_15_i_da_d_iff;
  wire xt_rsc_0_15_i_wea_d_iff;
  wire [3:0] xt_rsc_0_16_i_adra_d_iff;
  wire xt_rsc_0_16_i_wea_d_iff;
  wire xt_rsc_0_17_i_wea_d_iff;
  wire xt_rsc_0_18_i_wea_d_iff;
  wire xt_rsc_0_19_i_wea_d_iff;
  wire xt_rsc_0_20_i_wea_d_iff;
  wire xt_rsc_0_21_i_wea_d_iff;
  wire xt_rsc_0_22_i_wea_d_iff;
  wire xt_rsc_0_23_i_wea_d_iff;
  wire xt_rsc_0_24_i_wea_d_iff;
  wire xt_rsc_0_25_i_wea_d_iff;
  wire xt_rsc_0_26_i_wea_d_iff;
  wire xt_rsc_0_27_i_wea_d_iff;
  wire xt_rsc_0_28_i_wea_d_iff;
  wire xt_rsc_0_29_i_wea_d_iff;
  wire xt_rsc_0_30_i_wea_d_iff;
  wire xt_rsc_0_31_i_wea_d_iff;
  wire [31:0] xt_rsc_1_0_i_da_d_iff;
  wire xt_rsc_1_0_i_wea_d_iff;
  wire [31:0] xt_rsc_1_1_i_da_d_iff;
  wire xt_rsc_1_1_i_wea_d_iff;
  wire [31:0] xt_rsc_1_2_i_da_d_iff;
  wire xt_rsc_1_2_i_wea_d_iff;
  wire [31:0] xt_rsc_1_3_i_da_d_iff;
  wire xt_rsc_1_3_i_wea_d_iff;
  wire [31:0] xt_rsc_1_4_i_da_d_iff;
  wire xt_rsc_1_4_i_wea_d_iff;
  wire [31:0] xt_rsc_1_5_i_da_d_iff;
  wire xt_rsc_1_5_i_wea_d_iff;
  wire [31:0] xt_rsc_1_6_i_da_d_iff;
  wire xt_rsc_1_6_i_wea_d_iff;
  wire [31:0] xt_rsc_1_7_i_da_d_iff;
  wire xt_rsc_1_7_i_wea_d_iff;
  wire [31:0] xt_rsc_1_8_i_da_d_iff;
  wire xt_rsc_1_8_i_wea_d_iff;
  wire [31:0] xt_rsc_1_9_i_da_d_iff;
  wire xt_rsc_1_9_i_wea_d_iff;
  wire [31:0] xt_rsc_1_10_i_da_d_iff;
  wire xt_rsc_1_10_i_wea_d_iff;
  wire [31:0] xt_rsc_1_11_i_da_d_iff;
  wire xt_rsc_1_11_i_wea_d_iff;
  wire [31:0] xt_rsc_1_12_i_da_d_iff;
  wire xt_rsc_1_12_i_wea_d_iff;
  wire [31:0] xt_rsc_1_13_i_da_d_iff;
  wire xt_rsc_1_13_i_wea_d_iff;
  wire [31:0] xt_rsc_1_14_i_da_d_iff;
  wire xt_rsc_1_14_i_wea_d_iff;
  wire [31:0] xt_rsc_1_15_i_da_d_iff;
  wire xt_rsc_1_15_i_wea_d_iff;
  wire xt_rsc_1_16_i_wea_d_iff;
  wire xt_rsc_1_17_i_wea_d_iff;
  wire xt_rsc_1_18_i_wea_d_iff;
  wire xt_rsc_1_19_i_wea_d_iff;
  wire xt_rsc_1_20_i_wea_d_iff;
  wire xt_rsc_1_21_i_wea_d_iff;
  wire xt_rsc_1_22_i_wea_d_iff;
  wire xt_rsc_1_23_i_wea_d_iff;
  wire xt_rsc_1_24_i_wea_d_iff;
  wire xt_rsc_1_25_i_wea_d_iff;
  wire xt_rsc_1_26_i_wea_d_iff;
  wire xt_rsc_1_27_i_wea_d_iff;
  wire xt_rsc_1_28_i_wea_d_iff;
  wire xt_rsc_1_29_i_wea_d_iff;
  wire xt_rsc_1_30_i_wea_d_iff;
  wire xt_rsc_1_31_i_wea_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_0_comp (
      .adra(yt_rsc_0_0_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_0_clken),
      .da(yt_rsc_0_0_da),
      .qa(yt_rsc_0_0_qa),
      .qb(yt_rsc_0_0_unc_1),
      .wea(yt_rsc_0_0_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_1_comp (
      .adra(yt_rsc_0_1_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_1_clken),
      .da(yt_rsc_0_1_da),
      .qa(yt_rsc_0_1_qa),
      .qb(yt_rsc_0_1_unc_1),
      .wea(yt_rsc_0_1_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_2_comp (
      .adra(yt_rsc_0_2_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_2_clken),
      .da(yt_rsc_0_2_da),
      .qa(yt_rsc_0_2_qa),
      .qb(yt_rsc_0_2_unc_1),
      .wea(yt_rsc_0_2_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_3_comp (
      .adra(yt_rsc_0_3_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_3_clken),
      .da(yt_rsc_0_3_da),
      .qa(yt_rsc_0_3_qa),
      .qb(yt_rsc_0_3_unc_1),
      .wea(yt_rsc_0_3_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_4_comp (
      .adra(yt_rsc_0_4_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_4_clken),
      .da(yt_rsc_0_4_da),
      .qa(yt_rsc_0_4_qa),
      .qb(yt_rsc_0_4_unc_1),
      .wea(yt_rsc_0_4_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_5_comp (
      .adra(yt_rsc_0_5_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_5_clken),
      .da(yt_rsc_0_5_da),
      .qa(yt_rsc_0_5_qa),
      .qb(yt_rsc_0_5_unc_1),
      .wea(yt_rsc_0_5_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_6_comp (
      .adra(yt_rsc_0_6_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_6_clken),
      .da(yt_rsc_0_6_da),
      .qa(yt_rsc_0_6_qa),
      .qb(yt_rsc_0_6_unc_1),
      .wea(yt_rsc_0_6_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_7_comp (
      .adra(yt_rsc_0_7_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_7_clken),
      .da(yt_rsc_0_7_da),
      .qa(yt_rsc_0_7_qa),
      .qb(yt_rsc_0_7_unc_1),
      .wea(yt_rsc_0_7_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_8_comp (
      .adra(yt_rsc_0_8_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_8_clken),
      .da(yt_rsc_0_8_da),
      .qa(yt_rsc_0_8_qa),
      .qb(yt_rsc_0_8_unc_1),
      .wea(yt_rsc_0_8_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_9_comp (
      .adra(yt_rsc_0_9_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_9_clken),
      .da(yt_rsc_0_9_da),
      .qa(yt_rsc_0_9_qa),
      .qb(yt_rsc_0_9_unc_1),
      .wea(yt_rsc_0_9_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_10_comp (
      .adra(yt_rsc_0_10_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_10_clken),
      .da(yt_rsc_0_10_da),
      .qa(yt_rsc_0_10_qa),
      .qb(yt_rsc_0_10_unc_1),
      .wea(yt_rsc_0_10_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_11_comp (
      .adra(yt_rsc_0_11_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_11_clken),
      .da(yt_rsc_0_11_da),
      .qa(yt_rsc_0_11_qa),
      .qb(yt_rsc_0_11_unc_1),
      .wea(yt_rsc_0_11_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_12_comp (
      .adra(yt_rsc_0_12_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_12_clken),
      .da(yt_rsc_0_12_da),
      .qa(yt_rsc_0_12_qa),
      .qb(yt_rsc_0_12_unc_1),
      .wea(yt_rsc_0_12_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_13_comp (
      .adra(yt_rsc_0_13_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_13_clken),
      .da(yt_rsc_0_13_da),
      .qa(yt_rsc_0_13_qa),
      .qb(yt_rsc_0_13_unc_1),
      .wea(yt_rsc_0_13_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_14_comp (
      .adra(yt_rsc_0_14_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_14_clken),
      .da(yt_rsc_0_14_da),
      .qa(yt_rsc_0_14_qa),
      .qb(yt_rsc_0_14_unc_1),
      .wea(yt_rsc_0_14_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_15_comp (
      .adra(yt_rsc_0_15_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_15_clken),
      .da(yt_rsc_0_15_da),
      .qa(yt_rsc_0_15_qa),
      .qb(yt_rsc_0_15_unc_1),
      .wea(yt_rsc_0_15_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_16_comp (
      .adra(yt_rsc_0_16_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_16_clken),
      .da(yt_rsc_0_16_da),
      .qa(yt_rsc_0_16_qa),
      .qb(yt_rsc_0_16_unc_1),
      .wea(yt_rsc_0_16_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_17_comp (
      .adra(yt_rsc_0_17_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_17_clken),
      .da(yt_rsc_0_17_da),
      .qa(yt_rsc_0_17_qa),
      .qb(yt_rsc_0_17_unc_1),
      .wea(yt_rsc_0_17_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_18_comp (
      .adra(yt_rsc_0_18_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_18_clken),
      .da(yt_rsc_0_18_da),
      .qa(yt_rsc_0_18_qa),
      .qb(yt_rsc_0_18_unc_1),
      .wea(yt_rsc_0_18_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_19_comp (
      .adra(yt_rsc_0_19_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_19_clken),
      .da(yt_rsc_0_19_da),
      .qa(yt_rsc_0_19_qa),
      .qb(yt_rsc_0_19_unc_1),
      .wea(yt_rsc_0_19_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_20_comp (
      .adra(yt_rsc_0_20_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_20_clken),
      .da(yt_rsc_0_20_da),
      .qa(yt_rsc_0_20_qa),
      .qb(yt_rsc_0_20_unc_1),
      .wea(yt_rsc_0_20_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_21_comp (
      .adra(yt_rsc_0_21_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_21_clken),
      .da(yt_rsc_0_21_da),
      .qa(yt_rsc_0_21_qa),
      .qb(yt_rsc_0_21_unc_1),
      .wea(yt_rsc_0_21_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_22_comp (
      .adra(yt_rsc_0_22_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_22_clken),
      .da(yt_rsc_0_22_da),
      .qa(yt_rsc_0_22_qa),
      .qb(yt_rsc_0_22_unc_1),
      .wea(yt_rsc_0_22_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_23_comp (
      .adra(yt_rsc_0_23_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_23_clken),
      .da(yt_rsc_0_23_da),
      .qa(yt_rsc_0_23_qa),
      .qb(yt_rsc_0_23_unc_1),
      .wea(yt_rsc_0_23_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_24_comp (
      .adra(yt_rsc_0_24_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_24_clken),
      .da(yt_rsc_0_24_da),
      .qa(yt_rsc_0_24_qa),
      .qb(yt_rsc_0_24_unc_1),
      .wea(yt_rsc_0_24_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_25_comp (
      .adra(yt_rsc_0_25_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_25_clken),
      .da(yt_rsc_0_25_da),
      .qa(yt_rsc_0_25_qa),
      .qb(yt_rsc_0_25_unc_1),
      .wea(yt_rsc_0_25_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_26_comp (
      .adra(yt_rsc_0_26_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_26_clken),
      .da(yt_rsc_0_26_da),
      .qa(yt_rsc_0_26_qa),
      .qb(yt_rsc_0_26_unc_1),
      .wea(yt_rsc_0_26_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_27_comp (
      .adra(yt_rsc_0_27_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_27_clken),
      .da(yt_rsc_0_27_da),
      .qa(yt_rsc_0_27_qa),
      .qb(yt_rsc_0_27_unc_1),
      .wea(yt_rsc_0_27_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_28_comp (
      .adra(yt_rsc_0_28_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_28_clken),
      .da(yt_rsc_0_28_da),
      .qa(yt_rsc_0_28_qa),
      .qb(yt_rsc_0_28_unc_1),
      .wea(yt_rsc_0_28_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_29_comp (
      .adra(yt_rsc_0_29_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_29_clken),
      .da(yt_rsc_0_29_da),
      .qa(yt_rsc_0_29_qa),
      .qb(yt_rsc_0_29_unc_1),
      .wea(yt_rsc_0_29_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_30_comp (
      .adra(yt_rsc_0_30_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_30_clken),
      .da(yt_rsc_0_30_da),
      .qa(yt_rsc_0_30_qa),
      .qb(yt_rsc_0_30_unc_1),
      .wea(yt_rsc_0_30_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_0_31_comp (
      .adra(yt_rsc_0_31_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_0_31_clken),
      .da(yt_rsc_0_31_da),
      .qa(yt_rsc_0_31_qa),
      .qb(yt_rsc_0_31_unc_1),
      .wea(yt_rsc_0_31_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_0_comp (
      .adra(yt_rsc_1_0_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_0_clken),
      .da(yt_rsc_1_0_da),
      .qa(yt_rsc_1_0_qa),
      .qb(yt_rsc_1_0_unc_1),
      .wea(yt_rsc_1_0_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_1_comp (
      .adra(yt_rsc_1_1_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_1_clken),
      .da(yt_rsc_1_1_da),
      .qa(yt_rsc_1_1_qa),
      .qb(yt_rsc_1_1_unc_1),
      .wea(yt_rsc_1_1_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_2_comp (
      .adra(yt_rsc_1_2_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_2_clken),
      .da(yt_rsc_1_2_da),
      .qa(yt_rsc_1_2_qa),
      .qb(yt_rsc_1_2_unc_1),
      .wea(yt_rsc_1_2_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_3_comp (
      .adra(yt_rsc_1_3_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_3_clken),
      .da(yt_rsc_1_3_da),
      .qa(yt_rsc_1_3_qa),
      .qb(yt_rsc_1_3_unc_1),
      .wea(yt_rsc_1_3_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_4_comp (
      .adra(yt_rsc_1_4_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_4_clken),
      .da(yt_rsc_1_4_da),
      .qa(yt_rsc_1_4_qa),
      .qb(yt_rsc_1_4_unc_1),
      .wea(yt_rsc_1_4_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_5_comp (
      .adra(yt_rsc_1_5_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_5_clken),
      .da(yt_rsc_1_5_da),
      .qa(yt_rsc_1_5_qa),
      .qb(yt_rsc_1_5_unc_1),
      .wea(yt_rsc_1_5_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_6_comp (
      .adra(yt_rsc_1_6_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_6_clken),
      .da(yt_rsc_1_6_da),
      .qa(yt_rsc_1_6_qa),
      .qb(yt_rsc_1_6_unc_1),
      .wea(yt_rsc_1_6_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_7_comp (
      .adra(yt_rsc_1_7_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_7_clken),
      .da(yt_rsc_1_7_da),
      .qa(yt_rsc_1_7_qa),
      .qb(yt_rsc_1_7_unc_1),
      .wea(yt_rsc_1_7_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_8_comp (
      .adra(yt_rsc_1_8_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_8_clken),
      .da(yt_rsc_1_8_da),
      .qa(yt_rsc_1_8_qa),
      .qb(yt_rsc_1_8_unc_1),
      .wea(yt_rsc_1_8_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_9_comp (
      .adra(yt_rsc_1_9_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_9_clken),
      .da(yt_rsc_1_9_da),
      .qa(yt_rsc_1_9_qa),
      .qb(yt_rsc_1_9_unc_1),
      .wea(yt_rsc_1_9_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_10_comp (
      .adra(yt_rsc_1_10_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_10_clken),
      .da(yt_rsc_1_10_da),
      .qa(yt_rsc_1_10_qa),
      .qb(yt_rsc_1_10_unc_1),
      .wea(yt_rsc_1_10_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_11_comp (
      .adra(yt_rsc_1_11_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_11_clken),
      .da(yt_rsc_1_11_da),
      .qa(yt_rsc_1_11_qa),
      .qb(yt_rsc_1_11_unc_1),
      .wea(yt_rsc_1_11_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_12_comp (
      .adra(yt_rsc_1_12_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_12_clken),
      .da(yt_rsc_1_12_da),
      .qa(yt_rsc_1_12_qa),
      .qb(yt_rsc_1_12_unc_1),
      .wea(yt_rsc_1_12_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_13_comp (
      .adra(yt_rsc_1_13_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_13_clken),
      .da(yt_rsc_1_13_da),
      .qa(yt_rsc_1_13_qa),
      .qb(yt_rsc_1_13_unc_1),
      .wea(yt_rsc_1_13_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_14_comp (
      .adra(yt_rsc_1_14_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_14_clken),
      .da(yt_rsc_1_14_da),
      .qa(yt_rsc_1_14_qa),
      .qb(yt_rsc_1_14_unc_1),
      .wea(yt_rsc_1_14_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_15_comp (
      .adra(yt_rsc_1_15_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_15_clken),
      .da(yt_rsc_1_15_da),
      .qa(yt_rsc_1_15_qa),
      .qb(yt_rsc_1_15_unc_1),
      .wea(yt_rsc_1_15_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_16_comp (
      .adra(yt_rsc_1_16_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_16_clken),
      .da(yt_rsc_1_16_da),
      .qa(yt_rsc_1_16_qa),
      .qb(yt_rsc_1_16_unc_1),
      .wea(yt_rsc_1_16_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_17_comp (
      .adra(yt_rsc_1_17_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_17_clken),
      .da(yt_rsc_1_17_da),
      .qa(yt_rsc_1_17_qa),
      .qb(yt_rsc_1_17_unc_1),
      .wea(yt_rsc_1_17_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_18_comp (
      .adra(yt_rsc_1_18_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_18_clken),
      .da(yt_rsc_1_18_da),
      .qa(yt_rsc_1_18_qa),
      .qb(yt_rsc_1_18_unc_1),
      .wea(yt_rsc_1_18_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_19_comp (
      .adra(yt_rsc_1_19_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_19_clken),
      .da(yt_rsc_1_19_da),
      .qa(yt_rsc_1_19_qa),
      .qb(yt_rsc_1_19_unc_1),
      .wea(yt_rsc_1_19_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_20_comp (
      .adra(yt_rsc_1_20_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_20_clken),
      .da(yt_rsc_1_20_da),
      .qa(yt_rsc_1_20_qa),
      .qb(yt_rsc_1_20_unc_1),
      .wea(yt_rsc_1_20_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_21_comp (
      .adra(yt_rsc_1_21_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_21_clken),
      .da(yt_rsc_1_21_da),
      .qa(yt_rsc_1_21_qa),
      .qb(yt_rsc_1_21_unc_1),
      .wea(yt_rsc_1_21_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_22_comp (
      .adra(yt_rsc_1_22_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_22_clken),
      .da(yt_rsc_1_22_da),
      .qa(yt_rsc_1_22_qa),
      .qb(yt_rsc_1_22_unc_1),
      .wea(yt_rsc_1_22_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_23_comp (
      .adra(yt_rsc_1_23_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_23_clken),
      .da(yt_rsc_1_23_da),
      .qa(yt_rsc_1_23_qa),
      .qb(yt_rsc_1_23_unc_1),
      .wea(yt_rsc_1_23_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_24_comp (
      .adra(yt_rsc_1_24_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_24_clken),
      .da(yt_rsc_1_24_da),
      .qa(yt_rsc_1_24_qa),
      .qb(yt_rsc_1_24_unc_1),
      .wea(yt_rsc_1_24_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_25_comp (
      .adra(yt_rsc_1_25_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_25_clken),
      .da(yt_rsc_1_25_da),
      .qa(yt_rsc_1_25_qa),
      .qb(yt_rsc_1_25_unc_1),
      .wea(yt_rsc_1_25_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_26_comp (
      .adra(yt_rsc_1_26_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_26_clken),
      .da(yt_rsc_1_26_da),
      .qa(yt_rsc_1_26_qa),
      .qb(yt_rsc_1_26_unc_1),
      .wea(yt_rsc_1_26_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_27_comp (
      .adra(yt_rsc_1_27_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_27_clken),
      .da(yt_rsc_1_27_da),
      .qa(yt_rsc_1_27_qa),
      .qb(yt_rsc_1_27_unc_1),
      .wea(yt_rsc_1_27_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_28_comp (
      .adra(yt_rsc_1_28_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_28_clken),
      .da(yt_rsc_1_28_da),
      .qa(yt_rsc_1_28_qa),
      .qb(yt_rsc_1_28_unc_1),
      .wea(yt_rsc_1_28_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_29_comp (
      .adra(yt_rsc_1_29_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_29_clken),
      .da(yt_rsc_1_29_da),
      .qa(yt_rsc_1_29_qa),
      .qb(yt_rsc_1_29_unc_1),
      .wea(yt_rsc_1_29_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_30_comp (
      .adra(yt_rsc_1_30_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_30_clken),
      .da(yt_rsc_1_30_da),
      .qa(yt_rsc_1_30_qa),
      .qb(yt_rsc_1_30_unc_1),
      .wea(yt_rsc_1_30_wea)
    );
  BLOCK_2R1W_RBW #(.addr_width(32'sd4),
  .data_width(32'sd32),
  .depth(32'sd16),
  .latency(32'sd1)) yt_rsc_1_31_comp (
      .adra(yt_rsc_1_31_adra),
      .adrb(4'b0000),
      .clk(clk),
      .clken(yt_rsc_1_31_clken),
      .da(yt_rsc_1_31_da),
      .qa(yt_rsc_1_31_qa),
      .qb(yt_rsc_1_31_unc_1),
      .wea(yt_rsc_1_31_wea)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_7_4_32_16_16_32_1_gen yt_rsc_0_0_i
      (
      .clken(yt_rsc_0_0_clken),
      .qa(yt_rsc_0_0_qa),
      .wea(yt_rsc_0_0_wea),
      .da(yt_rsc_0_0_da),
      .adra(yt_rsc_0_0_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_0_i_da_d_iff),
      .qa_d(yt_rsc_0_0_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_8_4_32_16_16_32_1_gen yt_rsc_0_1_i
      (
      .clken(yt_rsc_0_1_clken),
      .qa(yt_rsc_0_1_qa),
      .wea(yt_rsc_0_1_wea),
      .da(yt_rsc_0_1_da),
      .adra(yt_rsc_0_1_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_1_i_da_d_iff),
      .qa_d(yt_rsc_0_1_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_9_4_32_16_16_32_1_gen yt_rsc_0_2_i
      (
      .clken(yt_rsc_0_2_clken),
      .qa(yt_rsc_0_2_qa),
      .wea(yt_rsc_0_2_wea),
      .da(yt_rsc_0_2_da),
      .adra(yt_rsc_0_2_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_2_i_da_d_iff),
      .qa_d(yt_rsc_0_2_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_10_4_32_16_16_32_1_gen yt_rsc_0_3_i
      (
      .clken(yt_rsc_0_3_clken),
      .qa(yt_rsc_0_3_qa),
      .wea(yt_rsc_0_3_wea),
      .da(yt_rsc_0_3_da),
      .adra(yt_rsc_0_3_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_3_i_da_d_iff),
      .qa_d(yt_rsc_0_3_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_11_4_32_16_16_32_1_gen yt_rsc_0_4_i
      (
      .clken(yt_rsc_0_4_clken),
      .qa(yt_rsc_0_4_qa),
      .wea(yt_rsc_0_4_wea),
      .da(yt_rsc_0_4_da),
      .adra(yt_rsc_0_4_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_4_i_da_d_iff),
      .qa_d(yt_rsc_0_4_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_12_4_32_16_16_32_1_gen yt_rsc_0_5_i
      (
      .clken(yt_rsc_0_5_clken),
      .qa(yt_rsc_0_5_qa),
      .wea(yt_rsc_0_5_wea),
      .da(yt_rsc_0_5_da),
      .adra(yt_rsc_0_5_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_5_i_da_d_iff),
      .qa_d(yt_rsc_0_5_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_13_4_32_16_16_32_1_gen yt_rsc_0_6_i
      (
      .clken(yt_rsc_0_6_clken),
      .qa(yt_rsc_0_6_qa),
      .wea(yt_rsc_0_6_wea),
      .da(yt_rsc_0_6_da),
      .adra(yt_rsc_0_6_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_6_i_da_d_iff),
      .qa_d(yt_rsc_0_6_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_14_4_32_16_16_32_1_gen yt_rsc_0_7_i
      (
      .clken(yt_rsc_0_7_clken),
      .qa(yt_rsc_0_7_qa),
      .wea(yt_rsc_0_7_wea),
      .da(yt_rsc_0_7_da),
      .adra(yt_rsc_0_7_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_7_i_da_d_iff),
      .qa_d(yt_rsc_0_7_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_15_4_32_16_16_32_1_gen yt_rsc_0_8_i
      (
      .clken(yt_rsc_0_8_clken),
      .qa(yt_rsc_0_8_qa),
      .wea(yt_rsc_0_8_wea),
      .da(yt_rsc_0_8_da),
      .adra(yt_rsc_0_8_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_8_i_da_d_iff),
      .qa_d(yt_rsc_0_8_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_16_4_32_16_16_32_1_gen yt_rsc_0_9_i
      (
      .clken(yt_rsc_0_9_clken),
      .qa(yt_rsc_0_9_qa),
      .wea(yt_rsc_0_9_wea),
      .da(yt_rsc_0_9_da),
      .adra(yt_rsc_0_9_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_9_i_da_d_iff),
      .qa_d(yt_rsc_0_9_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_17_4_32_16_16_32_1_gen yt_rsc_0_10_i
      (
      .clken(yt_rsc_0_10_clken),
      .qa(yt_rsc_0_10_qa),
      .wea(yt_rsc_0_10_wea),
      .da(yt_rsc_0_10_da),
      .adra(yt_rsc_0_10_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_10_i_da_d_iff),
      .qa_d(yt_rsc_0_10_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_18_4_32_16_16_32_1_gen yt_rsc_0_11_i
      (
      .clken(yt_rsc_0_11_clken),
      .qa(yt_rsc_0_11_qa),
      .wea(yt_rsc_0_11_wea),
      .da(yt_rsc_0_11_da),
      .adra(yt_rsc_0_11_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_11_i_da_d_iff),
      .qa_d(yt_rsc_0_11_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_19_4_32_16_16_32_1_gen yt_rsc_0_12_i
      (
      .clken(yt_rsc_0_12_clken),
      .qa(yt_rsc_0_12_qa),
      .wea(yt_rsc_0_12_wea),
      .da(yt_rsc_0_12_da),
      .adra(yt_rsc_0_12_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_12_i_da_d_iff),
      .qa_d(yt_rsc_0_12_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_20_4_32_16_16_32_1_gen yt_rsc_0_13_i
      (
      .clken(yt_rsc_0_13_clken),
      .qa(yt_rsc_0_13_qa),
      .wea(yt_rsc_0_13_wea),
      .da(yt_rsc_0_13_da),
      .adra(yt_rsc_0_13_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_13_i_da_d_iff),
      .qa_d(yt_rsc_0_13_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_21_4_32_16_16_32_1_gen yt_rsc_0_14_i
      (
      .clken(yt_rsc_0_14_clken),
      .qa(yt_rsc_0_14_qa),
      .wea(yt_rsc_0_14_wea),
      .da(yt_rsc_0_14_da),
      .adra(yt_rsc_0_14_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_14_i_da_d_iff),
      .qa_d(yt_rsc_0_14_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_22_4_32_16_16_32_1_gen yt_rsc_0_15_i
      (
      .clken(yt_rsc_0_15_clken),
      .qa(yt_rsc_0_15_qa),
      .wea(yt_rsc_0_15_wea),
      .da(yt_rsc_0_15_da),
      .adra(yt_rsc_0_15_adra),
      .adra_d(yt_rsc_0_0_i_adra_d_iff),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .da_d(yt_rsc_0_15_i_da_d_iff),
      .qa_d(yt_rsc_0_15_i_qa_d),
      .wea_d(yt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_23_4_32_16_16_32_1_gen yt_rsc_0_16_i
      (
      .clken(yt_rsc_0_16_clken),
      .qa(yt_rsc_0_16_qa),
      .wea(yt_rsc_0_16_wea),
      .da(yt_rsc_0_16_da),
      .adra(yt_rsc_0_16_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_0_i_da_d_iff),
      .qa_d(yt_rsc_0_16_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_24_4_32_16_16_32_1_gen yt_rsc_0_17_i
      (
      .clken(yt_rsc_0_17_clken),
      .qa(yt_rsc_0_17_qa),
      .wea(yt_rsc_0_17_wea),
      .da(yt_rsc_0_17_da),
      .adra(yt_rsc_0_17_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_1_i_da_d_iff),
      .qa_d(yt_rsc_0_17_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_25_4_32_16_16_32_1_gen yt_rsc_0_18_i
      (
      .clken(yt_rsc_0_18_clken),
      .qa(yt_rsc_0_18_qa),
      .wea(yt_rsc_0_18_wea),
      .da(yt_rsc_0_18_da),
      .adra(yt_rsc_0_18_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_2_i_da_d_iff),
      .qa_d(yt_rsc_0_18_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_26_4_32_16_16_32_1_gen yt_rsc_0_19_i
      (
      .clken(yt_rsc_0_19_clken),
      .qa(yt_rsc_0_19_qa),
      .wea(yt_rsc_0_19_wea),
      .da(yt_rsc_0_19_da),
      .adra(yt_rsc_0_19_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_3_i_da_d_iff),
      .qa_d(yt_rsc_0_19_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_27_4_32_16_16_32_1_gen yt_rsc_0_20_i
      (
      .clken(yt_rsc_0_20_clken),
      .qa(yt_rsc_0_20_qa),
      .wea(yt_rsc_0_20_wea),
      .da(yt_rsc_0_20_da),
      .adra(yt_rsc_0_20_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_4_i_da_d_iff),
      .qa_d(yt_rsc_0_20_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_28_4_32_16_16_32_1_gen yt_rsc_0_21_i
      (
      .clken(yt_rsc_0_21_clken),
      .qa(yt_rsc_0_21_qa),
      .wea(yt_rsc_0_21_wea),
      .da(yt_rsc_0_21_da),
      .adra(yt_rsc_0_21_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_5_i_da_d_iff),
      .qa_d(yt_rsc_0_21_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_29_4_32_16_16_32_1_gen yt_rsc_0_22_i
      (
      .clken(yt_rsc_0_22_clken),
      .qa(yt_rsc_0_22_qa),
      .wea(yt_rsc_0_22_wea),
      .da(yt_rsc_0_22_da),
      .adra(yt_rsc_0_22_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_6_i_da_d_iff),
      .qa_d(yt_rsc_0_22_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_30_4_32_16_16_32_1_gen yt_rsc_0_23_i
      (
      .clken(yt_rsc_0_23_clken),
      .qa(yt_rsc_0_23_qa),
      .wea(yt_rsc_0_23_wea),
      .da(yt_rsc_0_23_da),
      .adra(yt_rsc_0_23_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_7_i_da_d_iff),
      .qa_d(yt_rsc_0_23_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_31_4_32_16_16_32_1_gen yt_rsc_0_24_i
      (
      .clken(yt_rsc_0_24_clken),
      .qa(yt_rsc_0_24_qa),
      .wea(yt_rsc_0_24_wea),
      .da(yt_rsc_0_24_da),
      .adra(yt_rsc_0_24_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_8_i_da_d_iff),
      .qa_d(yt_rsc_0_24_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_32_4_32_16_16_32_1_gen yt_rsc_0_25_i
      (
      .clken(yt_rsc_0_25_clken),
      .qa(yt_rsc_0_25_qa),
      .wea(yt_rsc_0_25_wea),
      .da(yt_rsc_0_25_da),
      .adra(yt_rsc_0_25_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_9_i_da_d_iff),
      .qa_d(yt_rsc_0_25_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_33_4_32_16_16_32_1_gen yt_rsc_0_26_i
      (
      .clken(yt_rsc_0_26_clken),
      .qa(yt_rsc_0_26_qa),
      .wea(yt_rsc_0_26_wea),
      .da(yt_rsc_0_26_da),
      .adra(yt_rsc_0_26_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_10_i_da_d_iff),
      .qa_d(yt_rsc_0_26_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_34_4_32_16_16_32_1_gen yt_rsc_0_27_i
      (
      .clken(yt_rsc_0_27_clken),
      .qa(yt_rsc_0_27_qa),
      .wea(yt_rsc_0_27_wea),
      .da(yt_rsc_0_27_da),
      .adra(yt_rsc_0_27_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_11_i_da_d_iff),
      .qa_d(yt_rsc_0_27_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_35_4_32_16_16_32_1_gen yt_rsc_0_28_i
      (
      .clken(yt_rsc_0_28_clken),
      .qa(yt_rsc_0_28_qa),
      .wea(yt_rsc_0_28_wea),
      .da(yt_rsc_0_28_da),
      .adra(yt_rsc_0_28_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_12_i_da_d_iff),
      .qa_d(yt_rsc_0_28_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_36_4_32_16_16_32_1_gen yt_rsc_0_29_i
      (
      .clken(yt_rsc_0_29_clken),
      .qa(yt_rsc_0_29_qa),
      .wea(yt_rsc_0_29_wea),
      .da(yt_rsc_0_29_da),
      .adra(yt_rsc_0_29_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_13_i_da_d_iff),
      .qa_d(yt_rsc_0_29_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_37_4_32_16_16_32_1_gen yt_rsc_0_30_i
      (
      .clken(yt_rsc_0_30_clken),
      .qa(yt_rsc_0_30_qa),
      .wea(yt_rsc_0_30_wea),
      .da(yt_rsc_0_30_da),
      .adra(yt_rsc_0_30_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_14_i_da_d_iff),
      .qa_d(yt_rsc_0_30_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_38_4_32_16_16_32_1_gen yt_rsc_0_31_i
      (
      .clken(yt_rsc_0_31_clken),
      .qa(yt_rsc_0_31_qa),
      .wea(yt_rsc_0_31_wea),
      .da(yt_rsc_0_31_da),
      .adra(yt_rsc_0_31_adra),
      .adra_d(yt_rsc_0_16_i_adra_d_iff),
      .clken_d(yt_rsc_0_16_i_clken_d),
      .da_d(yt_rsc_0_15_i_da_d_iff),
      .qa_d(yt_rsc_0_31_i_qa_d),
      .wea_d(yt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_39_4_32_16_16_32_1_gen yt_rsc_1_0_i
      (
      .clken(yt_rsc_1_0_clken),
      .qa(yt_rsc_1_0_qa),
      .wea(yt_rsc_1_0_wea),
      .da(yt_rsc_1_0_da),
      .adra(yt_rsc_1_0_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_0_i_da_d),
      .qa_d(yt_rsc_1_0_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_40_4_32_16_16_32_1_gen yt_rsc_1_1_i
      (
      .clken(yt_rsc_1_1_clken),
      .qa(yt_rsc_1_1_qa),
      .wea(yt_rsc_1_1_wea),
      .da(yt_rsc_1_1_da),
      .adra(yt_rsc_1_1_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_1_i_da_d),
      .qa_d(yt_rsc_1_1_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_41_4_32_16_16_32_1_gen yt_rsc_1_2_i
      (
      .clken(yt_rsc_1_2_clken),
      .qa(yt_rsc_1_2_qa),
      .wea(yt_rsc_1_2_wea),
      .da(yt_rsc_1_2_da),
      .adra(yt_rsc_1_2_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_2_i_da_d),
      .qa_d(yt_rsc_1_2_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_42_4_32_16_16_32_1_gen yt_rsc_1_3_i
      (
      .clken(yt_rsc_1_3_clken),
      .qa(yt_rsc_1_3_qa),
      .wea(yt_rsc_1_3_wea),
      .da(yt_rsc_1_3_da),
      .adra(yt_rsc_1_3_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_3_i_da_d),
      .qa_d(yt_rsc_1_3_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_43_4_32_16_16_32_1_gen yt_rsc_1_4_i
      (
      .clken(yt_rsc_1_4_clken),
      .qa(yt_rsc_1_4_qa),
      .wea(yt_rsc_1_4_wea),
      .da(yt_rsc_1_4_da),
      .adra(yt_rsc_1_4_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_4_i_da_d),
      .qa_d(yt_rsc_1_4_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_44_4_32_16_16_32_1_gen yt_rsc_1_5_i
      (
      .clken(yt_rsc_1_5_clken),
      .qa(yt_rsc_1_5_qa),
      .wea(yt_rsc_1_5_wea),
      .da(yt_rsc_1_5_da),
      .adra(yt_rsc_1_5_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_5_i_da_d),
      .qa_d(yt_rsc_1_5_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_45_4_32_16_16_32_1_gen yt_rsc_1_6_i
      (
      .clken(yt_rsc_1_6_clken),
      .qa(yt_rsc_1_6_qa),
      .wea(yt_rsc_1_6_wea),
      .da(yt_rsc_1_6_da),
      .adra(yt_rsc_1_6_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_6_i_da_d),
      .qa_d(yt_rsc_1_6_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_46_4_32_16_16_32_1_gen yt_rsc_1_7_i
      (
      .clken(yt_rsc_1_7_clken),
      .qa(yt_rsc_1_7_qa),
      .wea(yt_rsc_1_7_wea),
      .da(yt_rsc_1_7_da),
      .adra(yt_rsc_1_7_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_7_i_da_d),
      .qa_d(yt_rsc_1_7_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_47_4_32_16_16_32_1_gen yt_rsc_1_8_i
      (
      .clken(yt_rsc_1_8_clken),
      .qa(yt_rsc_1_8_qa),
      .wea(yt_rsc_1_8_wea),
      .da(yt_rsc_1_8_da),
      .adra(yt_rsc_1_8_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_8_i_da_d),
      .qa_d(yt_rsc_1_8_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_48_4_32_16_16_32_1_gen yt_rsc_1_9_i
      (
      .clken(yt_rsc_1_9_clken),
      .qa(yt_rsc_1_9_qa),
      .wea(yt_rsc_1_9_wea),
      .da(yt_rsc_1_9_da),
      .adra(yt_rsc_1_9_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_9_i_da_d),
      .qa_d(yt_rsc_1_9_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_49_4_32_16_16_32_1_gen yt_rsc_1_10_i
      (
      .clken(yt_rsc_1_10_clken),
      .qa(yt_rsc_1_10_qa),
      .wea(yt_rsc_1_10_wea),
      .da(yt_rsc_1_10_da),
      .adra(yt_rsc_1_10_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_10_i_da_d),
      .qa_d(yt_rsc_1_10_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_50_4_32_16_16_32_1_gen yt_rsc_1_11_i
      (
      .clken(yt_rsc_1_11_clken),
      .qa(yt_rsc_1_11_qa),
      .wea(yt_rsc_1_11_wea),
      .da(yt_rsc_1_11_da),
      .adra(yt_rsc_1_11_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_11_i_da_d),
      .qa_d(yt_rsc_1_11_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_51_4_32_16_16_32_1_gen yt_rsc_1_12_i
      (
      .clken(yt_rsc_1_12_clken),
      .qa(yt_rsc_1_12_qa),
      .wea(yt_rsc_1_12_wea),
      .da(yt_rsc_1_12_da),
      .adra(yt_rsc_1_12_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_12_i_da_d),
      .qa_d(yt_rsc_1_12_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_52_4_32_16_16_32_1_gen yt_rsc_1_13_i
      (
      .clken(yt_rsc_1_13_clken),
      .qa(yt_rsc_1_13_qa),
      .wea(yt_rsc_1_13_wea),
      .da(yt_rsc_1_13_da),
      .adra(yt_rsc_1_13_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_13_i_da_d),
      .qa_d(yt_rsc_1_13_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_53_4_32_16_16_32_1_gen yt_rsc_1_14_i
      (
      .clken(yt_rsc_1_14_clken),
      .qa(yt_rsc_1_14_qa),
      .wea(yt_rsc_1_14_wea),
      .da(yt_rsc_1_14_da),
      .adra(yt_rsc_1_14_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_14_i_da_d),
      .qa_d(yt_rsc_1_14_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_54_4_32_16_16_32_1_gen yt_rsc_1_15_i
      (
      .clken(yt_rsc_1_15_clken),
      .qa(yt_rsc_1_15_qa),
      .wea(yt_rsc_1_15_wea),
      .da(yt_rsc_1_15_da),
      .adra(yt_rsc_1_15_adra),
      .adra_d(yt_rsc_1_0_i_adra_d_iff),
      .clken_d(yt_rsc_1_0_i_clken_d),
      .da_d(yt_rsc_1_15_i_da_d),
      .qa_d(yt_rsc_1_15_i_qa_d),
      .wea_d(yt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_55_4_32_16_16_32_1_gen yt_rsc_1_16_i
      (
      .clken(yt_rsc_1_16_clken),
      .qa(yt_rsc_1_16_qa),
      .wea(yt_rsc_1_16_wea),
      .da(yt_rsc_1_16_da),
      .adra(yt_rsc_1_16_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_16_i_da_d),
      .qa_d(yt_rsc_1_16_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_56_4_32_16_16_32_1_gen yt_rsc_1_17_i
      (
      .clken(yt_rsc_1_17_clken),
      .qa(yt_rsc_1_17_qa),
      .wea(yt_rsc_1_17_wea),
      .da(yt_rsc_1_17_da),
      .adra(yt_rsc_1_17_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_17_i_da_d),
      .qa_d(yt_rsc_1_17_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_57_4_32_16_16_32_1_gen yt_rsc_1_18_i
      (
      .clken(yt_rsc_1_18_clken),
      .qa(yt_rsc_1_18_qa),
      .wea(yt_rsc_1_18_wea),
      .da(yt_rsc_1_18_da),
      .adra(yt_rsc_1_18_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_18_i_da_d),
      .qa_d(yt_rsc_1_18_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_58_4_32_16_16_32_1_gen yt_rsc_1_19_i
      (
      .clken(yt_rsc_1_19_clken),
      .qa(yt_rsc_1_19_qa),
      .wea(yt_rsc_1_19_wea),
      .da(yt_rsc_1_19_da),
      .adra(yt_rsc_1_19_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_19_i_da_d),
      .qa_d(yt_rsc_1_19_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_59_4_32_16_16_32_1_gen yt_rsc_1_20_i
      (
      .clken(yt_rsc_1_20_clken),
      .qa(yt_rsc_1_20_qa),
      .wea(yt_rsc_1_20_wea),
      .da(yt_rsc_1_20_da),
      .adra(yt_rsc_1_20_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_20_i_da_d),
      .qa_d(yt_rsc_1_20_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_60_4_32_16_16_32_1_gen yt_rsc_1_21_i
      (
      .clken(yt_rsc_1_21_clken),
      .qa(yt_rsc_1_21_qa),
      .wea(yt_rsc_1_21_wea),
      .da(yt_rsc_1_21_da),
      .adra(yt_rsc_1_21_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_21_i_da_d),
      .qa_d(yt_rsc_1_21_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_61_4_32_16_16_32_1_gen yt_rsc_1_22_i
      (
      .clken(yt_rsc_1_22_clken),
      .qa(yt_rsc_1_22_qa),
      .wea(yt_rsc_1_22_wea),
      .da(yt_rsc_1_22_da),
      .adra(yt_rsc_1_22_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_22_i_da_d),
      .qa_d(yt_rsc_1_22_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_62_4_32_16_16_32_1_gen yt_rsc_1_23_i
      (
      .clken(yt_rsc_1_23_clken),
      .qa(yt_rsc_1_23_qa),
      .wea(yt_rsc_1_23_wea),
      .da(yt_rsc_1_23_da),
      .adra(yt_rsc_1_23_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_23_i_da_d),
      .qa_d(yt_rsc_1_23_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_63_4_32_16_16_32_1_gen yt_rsc_1_24_i
      (
      .clken(yt_rsc_1_24_clken),
      .qa(yt_rsc_1_24_qa),
      .wea(yt_rsc_1_24_wea),
      .da(yt_rsc_1_24_da),
      .adra(yt_rsc_1_24_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_24_i_da_d),
      .qa_d(yt_rsc_1_24_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_64_4_32_16_16_32_1_gen yt_rsc_1_25_i
      (
      .clken(yt_rsc_1_25_clken),
      .qa(yt_rsc_1_25_qa),
      .wea(yt_rsc_1_25_wea),
      .da(yt_rsc_1_25_da),
      .adra(yt_rsc_1_25_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_25_i_da_d),
      .qa_d(yt_rsc_1_25_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_65_4_32_16_16_32_1_gen yt_rsc_1_26_i
      (
      .clken(yt_rsc_1_26_clken),
      .qa(yt_rsc_1_26_qa),
      .wea(yt_rsc_1_26_wea),
      .da(yt_rsc_1_26_da),
      .adra(yt_rsc_1_26_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_26_i_da_d),
      .qa_d(yt_rsc_1_26_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_66_4_32_16_16_32_1_gen yt_rsc_1_27_i
      (
      .clken(yt_rsc_1_27_clken),
      .qa(yt_rsc_1_27_qa),
      .wea(yt_rsc_1_27_wea),
      .da(yt_rsc_1_27_da),
      .adra(yt_rsc_1_27_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_27_i_da_d),
      .qa_d(yt_rsc_1_27_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_67_4_32_16_16_32_1_gen yt_rsc_1_28_i
      (
      .clken(yt_rsc_1_28_clken),
      .qa(yt_rsc_1_28_qa),
      .wea(yt_rsc_1_28_wea),
      .da(yt_rsc_1_28_da),
      .adra(yt_rsc_1_28_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_28_i_da_d),
      .qa_d(yt_rsc_1_28_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_68_4_32_16_16_32_1_gen yt_rsc_1_29_i
      (
      .clken(yt_rsc_1_29_clken),
      .qa(yt_rsc_1_29_qa),
      .wea(yt_rsc_1_29_wea),
      .da(yt_rsc_1_29_da),
      .adra(yt_rsc_1_29_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_29_i_da_d),
      .qa_d(yt_rsc_1_29_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_69_4_32_16_16_32_1_gen yt_rsc_1_30_i
      (
      .clken(yt_rsc_1_30_clken),
      .qa(yt_rsc_1_30_qa),
      .wea(yt_rsc_1_30_wea),
      .da(yt_rsc_1_30_da),
      .adra(yt_rsc_1_30_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_30_i_da_d),
      .qa_d(yt_rsc_1_30_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_en_70_4_32_16_16_32_1_gen yt_rsc_1_31_i
      (
      .clken(yt_rsc_1_31_clken),
      .qa(yt_rsc_1_31_qa),
      .wea(yt_rsc_1_31_wea),
      .da(yt_rsc_1_31_da),
      .adra(yt_rsc_1_31_adra),
      .adra_d(yt_rsc_1_16_i_adra_d_iff),
      .clken_d(yt_rsc_1_16_i_clken_d),
      .da_d(yt_rsc_1_31_i_da_d),
      .qa_d(yt_rsc_1_31_i_qa_d),
      .wea_d(yt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .rwA_rw_ram_ir_internal_WMASK_B_d(yt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_71_4_32_16_16_32_1_gen xt_rsc_0_0_i
      (
      .qa(xt_rsc_0_0_qa),
      .wea(xt_rsc_0_0_wea),
      .da(xt_rsc_0_0_da),
      .adra(xt_rsc_0_0_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_0_i_da_d_iff),
      .qa_d(xt_rsc_0_0_i_qa_d),
      .wea_d(xt_rsc_0_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_72_4_32_16_16_32_1_gen xt_rsc_0_1_i
      (
      .qa(xt_rsc_0_1_qa),
      .wea(xt_rsc_0_1_wea),
      .da(xt_rsc_0_1_da),
      .adra(xt_rsc_0_1_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_1_i_da_d_iff),
      .qa_d(xt_rsc_0_1_i_qa_d),
      .wea_d(xt_rsc_0_1_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_1_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_73_4_32_16_16_32_1_gen xt_rsc_0_2_i
      (
      .qa(xt_rsc_0_2_qa),
      .wea(xt_rsc_0_2_wea),
      .da(xt_rsc_0_2_da),
      .adra(xt_rsc_0_2_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_2_i_da_d_iff),
      .qa_d(xt_rsc_0_2_i_qa_d),
      .wea_d(xt_rsc_0_2_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_2_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_74_4_32_16_16_32_1_gen xt_rsc_0_3_i
      (
      .qa(xt_rsc_0_3_qa),
      .wea(xt_rsc_0_3_wea),
      .da(xt_rsc_0_3_da),
      .adra(xt_rsc_0_3_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_3_i_da_d_iff),
      .qa_d(xt_rsc_0_3_i_qa_d),
      .wea_d(xt_rsc_0_3_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_3_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_75_4_32_16_16_32_1_gen xt_rsc_0_4_i
      (
      .qa(xt_rsc_0_4_qa),
      .wea(xt_rsc_0_4_wea),
      .da(xt_rsc_0_4_da),
      .adra(xt_rsc_0_4_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_4_i_da_d_iff),
      .qa_d(xt_rsc_0_4_i_qa_d),
      .wea_d(xt_rsc_0_4_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_4_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_76_4_32_16_16_32_1_gen xt_rsc_0_5_i
      (
      .qa(xt_rsc_0_5_qa),
      .wea(xt_rsc_0_5_wea),
      .da(xt_rsc_0_5_da),
      .adra(xt_rsc_0_5_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_5_i_da_d_iff),
      .qa_d(xt_rsc_0_5_i_qa_d),
      .wea_d(xt_rsc_0_5_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_5_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_77_4_32_16_16_32_1_gen xt_rsc_0_6_i
      (
      .qa(xt_rsc_0_6_qa),
      .wea(xt_rsc_0_6_wea),
      .da(xt_rsc_0_6_da),
      .adra(xt_rsc_0_6_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_6_i_da_d_iff),
      .qa_d(xt_rsc_0_6_i_qa_d),
      .wea_d(xt_rsc_0_6_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_6_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_78_4_32_16_16_32_1_gen xt_rsc_0_7_i
      (
      .qa(xt_rsc_0_7_qa),
      .wea(xt_rsc_0_7_wea),
      .da(xt_rsc_0_7_da),
      .adra(xt_rsc_0_7_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_7_i_da_d_iff),
      .qa_d(xt_rsc_0_7_i_qa_d),
      .wea_d(xt_rsc_0_7_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_7_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_79_4_32_16_16_32_1_gen xt_rsc_0_8_i
      (
      .qa(xt_rsc_0_8_qa),
      .wea(xt_rsc_0_8_wea),
      .da(xt_rsc_0_8_da),
      .adra(xt_rsc_0_8_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_8_i_da_d_iff),
      .qa_d(xt_rsc_0_8_i_qa_d),
      .wea_d(xt_rsc_0_8_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_8_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_80_4_32_16_16_32_1_gen xt_rsc_0_9_i
      (
      .qa(xt_rsc_0_9_qa),
      .wea(xt_rsc_0_9_wea),
      .da(xt_rsc_0_9_da),
      .adra(xt_rsc_0_9_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_9_i_da_d_iff),
      .qa_d(xt_rsc_0_9_i_qa_d),
      .wea_d(xt_rsc_0_9_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_9_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_81_4_32_16_16_32_1_gen xt_rsc_0_10_i
      (
      .qa(xt_rsc_0_10_qa),
      .wea(xt_rsc_0_10_wea),
      .da(xt_rsc_0_10_da),
      .adra(xt_rsc_0_10_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_10_i_da_d_iff),
      .qa_d(xt_rsc_0_10_i_qa_d),
      .wea_d(xt_rsc_0_10_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_10_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_82_4_32_16_16_32_1_gen xt_rsc_0_11_i
      (
      .qa(xt_rsc_0_11_qa),
      .wea(xt_rsc_0_11_wea),
      .da(xt_rsc_0_11_da),
      .adra(xt_rsc_0_11_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_11_i_da_d_iff),
      .qa_d(xt_rsc_0_11_i_qa_d),
      .wea_d(xt_rsc_0_11_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_11_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_83_4_32_16_16_32_1_gen xt_rsc_0_12_i
      (
      .qa(xt_rsc_0_12_qa),
      .wea(xt_rsc_0_12_wea),
      .da(xt_rsc_0_12_da),
      .adra(xt_rsc_0_12_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_12_i_da_d_iff),
      .qa_d(xt_rsc_0_12_i_qa_d),
      .wea_d(xt_rsc_0_12_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_12_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_84_4_32_16_16_32_1_gen xt_rsc_0_13_i
      (
      .qa(xt_rsc_0_13_qa),
      .wea(xt_rsc_0_13_wea),
      .da(xt_rsc_0_13_da),
      .adra(xt_rsc_0_13_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_13_i_da_d_iff),
      .qa_d(xt_rsc_0_13_i_qa_d),
      .wea_d(xt_rsc_0_13_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_13_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_85_4_32_16_16_32_1_gen xt_rsc_0_14_i
      (
      .qa(xt_rsc_0_14_qa),
      .wea(xt_rsc_0_14_wea),
      .da(xt_rsc_0_14_da),
      .adra(xt_rsc_0_14_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_14_i_da_d_iff),
      .qa_d(xt_rsc_0_14_i_qa_d),
      .wea_d(xt_rsc_0_14_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_14_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_86_4_32_16_16_32_1_gen xt_rsc_0_15_i
      (
      .qa(xt_rsc_0_15_qa),
      .wea(xt_rsc_0_15_wea),
      .da(xt_rsc_0_15_da),
      .adra(xt_rsc_0_15_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_0_15_i_da_d_iff),
      .qa_d(xt_rsc_0_15_i_qa_d),
      .wea_d(xt_rsc_0_15_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_15_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_87_4_32_16_16_32_1_gen xt_rsc_0_16_i
      (
      .qa(xt_rsc_0_16_qa),
      .wea(xt_rsc_0_16_wea),
      .da(xt_rsc_0_16_da),
      .adra(xt_rsc_0_16_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_0_i_da_d_iff),
      .qa_d(xt_rsc_0_16_i_qa_d),
      .wea_d(xt_rsc_0_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_88_4_32_16_16_32_1_gen xt_rsc_0_17_i
      (
      .qa(xt_rsc_0_17_qa),
      .wea(xt_rsc_0_17_wea),
      .da(xt_rsc_0_17_da),
      .adra(xt_rsc_0_17_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_1_i_da_d_iff),
      .qa_d(xt_rsc_0_17_i_qa_d),
      .wea_d(xt_rsc_0_17_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_17_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_89_4_32_16_16_32_1_gen xt_rsc_0_18_i
      (
      .qa(xt_rsc_0_18_qa),
      .wea(xt_rsc_0_18_wea),
      .da(xt_rsc_0_18_da),
      .adra(xt_rsc_0_18_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_2_i_da_d_iff),
      .qa_d(xt_rsc_0_18_i_qa_d),
      .wea_d(xt_rsc_0_18_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_18_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_90_4_32_16_16_32_1_gen xt_rsc_0_19_i
      (
      .qa(xt_rsc_0_19_qa),
      .wea(xt_rsc_0_19_wea),
      .da(xt_rsc_0_19_da),
      .adra(xt_rsc_0_19_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_3_i_da_d_iff),
      .qa_d(xt_rsc_0_19_i_qa_d),
      .wea_d(xt_rsc_0_19_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_19_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_91_4_32_16_16_32_1_gen xt_rsc_0_20_i
      (
      .qa(xt_rsc_0_20_qa),
      .wea(xt_rsc_0_20_wea),
      .da(xt_rsc_0_20_da),
      .adra(xt_rsc_0_20_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_4_i_da_d_iff),
      .qa_d(xt_rsc_0_20_i_qa_d),
      .wea_d(xt_rsc_0_20_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_20_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_92_4_32_16_16_32_1_gen xt_rsc_0_21_i
      (
      .qa(xt_rsc_0_21_qa),
      .wea(xt_rsc_0_21_wea),
      .da(xt_rsc_0_21_da),
      .adra(xt_rsc_0_21_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_5_i_da_d_iff),
      .qa_d(xt_rsc_0_21_i_qa_d),
      .wea_d(xt_rsc_0_21_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_21_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_93_4_32_16_16_32_1_gen xt_rsc_0_22_i
      (
      .qa(xt_rsc_0_22_qa),
      .wea(xt_rsc_0_22_wea),
      .da(xt_rsc_0_22_da),
      .adra(xt_rsc_0_22_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_6_i_da_d_iff),
      .qa_d(xt_rsc_0_22_i_qa_d),
      .wea_d(xt_rsc_0_22_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_22_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_94_4_32_16_16_32_1_gen xt_rsc_0_23_i
      (
      .qa(xt_rsc_0_23_qa),
      .wea(xt_rsc_0_23_wea),
      .da(xt_rsc_0_23_da),
      .adra(xt_rsc_0_23_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_7_i_da_d_iff),
      .qa_d(xt_rsc_0_23_i_qa_d),
      .wea_d(xt_rsc_0_23_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_23_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_95_4_32_16_16_32_1_gen xt_rsc_0_24_i
      (
      .qa(xt_rsc_0_24_qa),
      .wea(xt_rsc_0_24_wea),
      .da(xt_rsc_0_24_da),
      .adra(xt_rsc_0_24_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_8_i_da_d_iff),
      .qa_d(xt_rsc_0_24_i_qa_d),
      .wea_d(xt_rsc_0_24_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_24_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_96_4_32_16_16_32_1_gen xt_rsc_0_25_i
      (
      .qa(xt_rsc_0_25_qa),
      .wea(xt_rsc_0_25_wea),
      .da(xt_rsc_0_25_da),
      .adra(xt_rsc_0_25_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_9_i_da_d_iff),
      .qa_d(xt_rsc_0_25_i_qa_d),
      .wea_d(xt_rsc_0_25_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_25_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_97_4_32_16_16_32_1_gen xt_rsc_0_26_i
      (
      .qa(xt_rsc_0_26_qa),
      .wea(xt_rsc_0_26_wea),
      .da(xt_rsc_0_26_da),
      .adra(xt_rsc_0_26_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_10_i_da_d_iff),
      .qa_d(xt_rsc_0_26_i_qa_d),
      .wea_d(xt_rsc_0_26_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_26_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_98_4_32_16_16_32_1_gen xt_rsc_0_27_i
      (
      .qa(xt_rsc_0_27_qa),
      .wea(xt_rsc_0_27_wea),
      .da(xt_rsc_0_27_da),
      .adra(xt_rsc_0_27_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_11_i_da_d_iff),
      .qa_d(xt_rsc_0_27_i_qa_d),
      .wea_d(xt_rsc_0_27_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_27_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_99_4_32_16_16_32_1_gen xt_rsc_0_28_i
      (
      .qa(xt_rsc_0_28_qa),
      .wea(xt_rsc_0_28_wea),
      .da(xt_rsc_0_28_da),
      .adra(xt_rsc_0_28_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_12_i_da_d_iff),
      .qa_d(xt_rsc_0_28_i_qa_d),
      .wea_d(xt_rsc_0_28_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_28_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_100_4_32_16_16_32_1_gen xt_rsc_0_29_i
      (
      .qa(xt_rsc_0_29_qa),
      .wea(xt_rsc_0_29_wea),
      .da(xt_rsc_0_29_da),
      .adra(xt_rsc_0_29_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_13_i_da_d_iff),
      .qa_d(xt_rsc_0_29_i_qa_d),
      .wea_d(xt_rsc_0_29_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_29_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_101_4_32_16_16_32_1_gen xt_rsc_0_30_i
      (
      .qa(xt_rsc_0_30_qa),
      .wea(xt_rsc_0_30_wea),
      .da(xt_rsc_0_30_da),
      .adra(xt_rsc_0_30_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_14_i_da_d_iff),
      .qa_d(xt_rsc_0_30_i_qa_d),
      .wea_d(xt_rsc_0_30_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_30_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_102_4_32_16_16_32_1_gen xt_rsc_0_31_i
      (
      .qa(xt_rsc_0_31_qa),
      .wea(xt_rsc_0_31_wea),
      .da(xt_rsc_0_31_da),
      .adra(xt_rsc_0_31_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_0_15_i_da_d_iff),
      .qa_d(xt_rsc_0_31_i_qa_d),
      .wea_d(xt_rsc_0_31_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_0_31_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_103_4_32_16_16_32_1_gen xt_rsc_1_0_i
      (
      .qa(xt_rsc_1_0_qa),
      .wea(xt_rsc_1_0_wea),
      .da(xt_rsc_1_0_da),
      .adra(xt_rsc_1_0_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_0_i_da_d_iff),
      .qa_d(xt_rsc_1_0_i_qa_d),
      .wea_d(xt_rsc_1_0_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_0_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_104_4_32_16_16_32_1_gen xt_rsc_1_1_i
      (
      .qa(xt_rsc_1_1_qa),
      .wea(xt_rsc_1_1_wea),
      .da(xt_rsc_1_1_da),
      .adra(xt_rsc_1_1_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_1_i_da_d_iff),
      .qa_d(xt_rsc_1_1_i_qa_d),
      .wea_d(xt_rsc_1_1_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_1_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_105_4_32_16_16_32_1_gen xt_rsc_1_2_i
      (
      .qa(xt_rsc_1_2_qa),
      .wea(xt_rsc_1_2_wea),
      .da(xt_rsc_1_2_da),
      .adra(xt_rsc_1_2_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_2_i_da_d_iff),
      .qa_d(xt_rsc_1_2_i_qa_d),
      .wea_d(xt_rsc_1_2_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_2_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_106_4_32_16_16_32_1_gen xt_rsc_1_3_i
      (
      .qa(xt_rsc_1_3_qa),
      .wea(xt_rsc_1_3_wea),
      .da(xt_rsc_1_3_da),
      .adra(xt_rsc_1_3_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_3_i_da_d_iff),
      .qa_d(xt_rsc_1_3_i_qa_d),
      .wea_d(xt_rsc_1_3_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_3_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_107_4_32_16_16_32_1_gen xt_rsc_1_4_i
      (
      .qa(xt_rsc_1_4_qa),
      .wea(xt_rsc_1_4_wea),
      .da(xt_rsc_1_4_da),
      .adra(xt_rsc_1_4_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_4_i_da_d_iff),
      .qa_d(xt_rsc_1_4_i_qa_d),
      .wea_d(xt_rsc_1_4_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_4_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_108_4_32_16_16_32_1_gen xt_rsc_1_5_i
      (
      .qa(xt_rsc_1_5_qa),
      .wea(xt_rsc_1_5_wea),
      .da(xt_rsc_1_5_da),
      .adra(xt_rsc_1_5_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_5_i_da_d_iff),
      .qa_d(xt_rsc_1_5_i_qa_d),
      .wea_d(xt_rsc_1_5_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_5_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_109_4_32_16_16_32_1_gen xt_rsc_1_6_i
      (
      .qa(xt_rsc_1_6_qa),
      .wea(xt_rsc_1_6_wea),
      .da(xt_rsc_1_6_da),
      .adra(xt_rsc_1_6_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_6_i_da_d_iff),
      .qa_d(xt_rsc_1_6_i_qa_d),
      .wea_d(xt_rsc_1_6_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_6_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_110_4_32_16_16_32_1_gen xt_rsc_1_7_i
      (
      .qa(xt_rsc_1_7_qa),
      .wea(xt_rsc_1_7_wea),
      .da(xt_rsc_1_7_da),
      .adra(xt_rsc_1_7_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_7_i_da_d_iff),
      .qa_d(xt_rsc_1_7_i_qa_d),
      .wea_d(xt_rsc_1_7_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_7_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_111_4_32_16_16_32_1_gen xt_rsc_1_8_i
      (
      .qa(xt_rsc_1_8_qa),
      .wea(xt_rsc_1_8_wea),
      .da(xt_rsc_1_8_da),
      .adra(xt_rsc_1_8_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_8_i_da_d_iff),
      .qa_d(xt_rsc_1_8_i_qa_d),
      .wea_d(xt_rsc_1_8_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_8_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_112_4_32_16_16_32_1_gen xt_rsc_1_9_i
      (
      .qa(xt_rsc_1_9_qa),
      .wea(xt_rsc_1_9_wea),
      .da(xt_rsc_1_9_da),
      .adra(xt_rsc_1_9_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_9_i_da_d_iff),
      .qa_d(xt_rsc_1_9_i_qa_d),
      .wea_d(xt_rsc_1_9_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_9_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_113_4_32_16_16_32_1_gen xt_rsc_1_10_i
      (
      .qa(xt_rsc_1_10_qa),
      .wea(xt_rsc_1_10_wea),
      .da(xt_rsc_1_10_da),
      .adra(xt_rsc_1_10_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_10_i_da_d_iff),
      .qa_d(xt_rsc_1_10_i_qa_d),
      .wea_d(xt_rsc_1_10_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_10_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_114_4_32_16_16_32_1_gen xt_rsc_1_11_i
      (
      .qa(xt_rsc_1_11_qa),
      .wea(xt_rsc_1_11_wea),
      .da(xt_rsc_1_11_da),
      .adra(xt_rsc_1_11_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_11_i_da_d_iff),
      .qa_d(xt_rsc_1_11_i_qa_d),
      .wea_d(xt_rsc_1_11_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_11_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_115_4_32_16_16_32_1_gen xt_rsc_1_12_i
      (
      .qa(xt_rsc_1_12_qa),
      .wea(xt_rsc_1_12_wea),
      .da(xt_rsc_1_12_da),
      .adra(xt_rsc_1_12_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_12_i_da_d_iff),
      .qa_d(xt_rsc_1_12_i_qa_d),
      .wea_d(xt_rsc_1_12_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_12_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_116_4_32_16_16_32_1_gen xt_rsc_1_13_i
      (
      .qa(xt_rsc_1_13_qa),
      .wea(xt_rsc_1_13_wea),
      .da(xt_rsc_1_13_da),
      .adra(xt_rsc_1_13_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_13_i_da_d_iff),
      .qa_d(xt_rsc_1_13_i_qa_d),
      .wea_d(xt_rsc_1_13_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_13_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_117_4_32_16_16_32_1_gen xt_rsc_1_14_i
      (
      .qa(xt_rsc_1_14_qa),
      .wea(xt_rsc_1_14_wea),
      .da(xt_rsc_1_14_da),
      .adra(xt_rsc_1_14_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_14_i_da_d_iff),
      .qa_d(xt_rsc_1_14_i_qa_d),
      .wea_d(xt_rsc_1_14_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_14_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_118_4_32_16_16_32_1_gen xt_rsc_1_15_i
      (
      .qa(xt_rsc_1_15_qa),
      .wea(xt_rsc_1_15_wea),
      .da(xt_rsc_1_15_da),
      .adra(xt_rsc_1_15_adra),
      .adra_d(xt_rsc_0_0_i_adra_d_iff),
      .da_d(xt_rsc_1_15_i_da_d_iff),
      .qa_d(xt_rsc_1_15_i_qa_d),
      .wea_d(xt_rsc_1_15_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_15_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_119_4_32_16_16_32_1_gen xt_rsc_1_16_i
      (
      .qa(xt_rsc_1_16_qa),
      .wea(xt_rsc_1_16_wea),
      .da(xt_rsc_1_16_da),
      .adra(xt_rsc_1_16_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_0_i_da_d_iff),
      .qa_d(xt_rsc_1_16_i_qa_d),
      .wea_d(xt_rsc_1_16_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_16_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_120_4_32_16_16_32_1_gen xt_rsc_1_17_i
      (
      .qa(xt_rsc_1_17_qa),
      .wea(xt_rsc_1_17_wea),
      .da(xt_rsc_1_17_da),
      .adra(xt_rsc_1_17_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_1_i_da_d_iff),
      .qa_d(xt_rsc_1_17_i_qa_d),
      .wea_d(xt_rsc_1_17_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_17_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_121_4_32_16_16_32_1_gen xt_rsc_1_18_i
      (
      .qa(xt_rsc_1_18_qa),
      .wea(xt_rsc_1_18_wea),
      .da(xt_rsc_1_18_da),
      .adra(xt_rsc_1_18_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_2_i_da_d_iff),
      .qa_d(xt_rsc_1_18_i_qa_d),
      .wea_d(xt_rsc_1_18_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_18_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_122_4_32_16_16_32_1_gen xt_rsc_1_19_i
      (
      .qa(xt_rsc_1_19_qa),
      .wea(xt_rsc_1_19_wea),
      .da(xt_rsc_1_19_da),
      .adra(xt_rsc_1_19_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_3_i_da_d_iff),
      .qa_d(xt_rsc_1_19_i_qa_d),
      .wea_d(xt_rsc_1_19_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_19_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_123_4_32_16_16_32_1_gen xt_rsc_1_20_i
      (
      .qa(xt_rsc_1_20_qa),
      .wea(xt_rsc_1_20_wea),
      .da(xt_rsc_1_20_da),
      .adra(xt_rsc_1_20_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_4_i_da_d_iff),
      .qa_d(xt_rsc_1_20_i_qa_d),
      .wea_d(xt_rsc_1_20_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_20_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_124_4_32_16_16_32_1_gen xt_rsc_1_21_i
      (
      .qa(xt_rsc_1_21_qa),
      .wea(xt_rsc_1_21_wea),
      .da(xt_rsc_1_21_da),
      .adra(xt_rsc_1_21_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_5_i_da_d_iff),
      .qa_d(xt_rsc_1_21_i_qa_d),
      .wea_d(xt_rsc_1_21_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_21_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_125_4_32_16_16_32_1_gen xt_rsc_1_22_i
      (
      .qa(xt_rsc_1_22_qa),
      .wea(xt_rsc_1_22_wea),
      .da(xt_rsc_1_22_da),
      .adra(xt_rsc_1_22_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_6_i_da_d_iff),
      .qa_d(xt_rsc_1_22_i_qa_d),
      .wea_d(xt_rsc_1_22_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_22_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_126_4_32_16_16_32_1_gen xt_rsc_1_23_i
      (
      .qa(xt_rsc_1_23_qa),
      .wea(xt_rsc_1_23_wea),
      .da(xt_rsc_1_23_da),
      .adra(xt_rsc_1_23_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_7_i_da_d_iff),
      .qa_d(xt_rsc_1_23_i_qa_d),
      .wea_d(xt_rsc_1_23_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_23_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_127_4_32_16_16_32_1_gen xt_rsc_1_24_i
      (
      .qa(xt_rsc_1_24_qa),
      .wea(xt_rsc_1_24_wea),
      .da(xt_rsc_1_24_da),
      .adra(xt_rsc_1_24_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_8_i_da_d_iff),
      .qa_d(xt_rsc_1_24_i_qa_d),
      .wea_d(xt_rsc_1_24_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_24_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_128_4_32_16_16_32_1_gen xt_rsc_1_25_i
      (
      .qa(xt_rsc_1_25_qa),
      .wea(xt_rsc_1_25_wea),
      .da(xt_rsc_1_25_da),
      .adra(xt_rsc_1_25_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_9_i_da_d_iff),
      .qa_d(xt_rsc_1_25_i_qa_d),
      .wea_d(xt_rsc_1_25_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_25_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_129_4_32_16_16_32_1_gen xt_rsc_1_26_i
      (
      .qa(xt_rsc_1_26_qa),
      .wea(xt_rsc_1_26_wea),
      .da(xt_rsc_1_26_da),
      .adra(xt_rsc_1_26_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_10_i_da_d_iff),
      .qa_d(xt_rsc_1_26_i_qa_d),
      .wea_d(xt_rsc_1_26_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_26_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_130_4_32_16_16_32_1_gen xt_rsc_1_27_i
      (
      .qa(xt_rsc_1_27_qa),
      .wea(xt_rsc_1_27_wea),
      .da(xt_rsc_1_27_da),
      .adra(xt_rsc_1_27_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_11_i_da_d_iff),
      .qa_d(xt_rsc_1_27_i_qa_d),
      .wea_d(xt_rsc_1_27_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_27_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_131_4_32_16_16_32_1_gen xt_rsc_1_28_i
      (
      .qa(xt_rsc_1_28_qa),
      .wea(xt_rsc_1_28_wea),
      .da(xt_rsc_1_28_da),
      .adra(xt_rsc_1_28_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_12_i_da_d_iff),
      .qa_d(xt_rsc_1_28_i_qa_d),
      .wea_d(xt_rsc_1_28_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_28_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_132_4_32_16_16_32_1_gen xt_rsc_1_29_i
      (
      .qa(xt_rsc_1_29_qa),
      .wea(xt_rsc_1_29_wea),
      .da(xt_rsc_1_29_da),
      .adra(xt_rsc_1_29_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_13_i_da_d_iff),
      .qa_d(xt_rsc_1_29_i_qa_d),
      .wea_d(xt_rsc_1_29_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_29_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_133_4_32_16_16_32_1_gen xt_rsc_1_30_i
      (
      .qa(xt_rsc_1_30_qa),
      .wea(xt_rsc_1_30_wea),
      .da(xt_rsc_1_30_da),
      .adra(xt_rsc_1_30_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_14_i_da_d_iff),
      .qa_d(xt_rsc_1_30_i_qa_d),
      .wea_d(xt_rsc_1_30_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_30_i_wea_d_iff)
    );
  peaseNTT_Xilinx_RAMS_BLOCK_2R1W_RBW_rwport_134_4_32_16_16_32_1_gen xt_rsc_1_31_i
      (
      .qa(xt_rsc_1_31_qa),
      .wea(xt_rsc_1_31_wea),
      .da(xt_rsc_1_31_da),
      .adra(xt_rsc_1_31_adra),
      .adra_d(xt_rsc_0_16_i_adra_d_iff),
      .da_d(xt_rsc_1_15_i_da_d_iff),
      .qa_d(xt_rsc_1_31_i_qa_d),
      .wea_d(xt_rsc_1_31_i_wea_d_iff),
      .rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .rwA_rw_ram_ir_internal_WMASK_B_d(xt_rsc_1_31_i_wea_d_iff)
    );
  peaseNTT_core peaseNTT_core_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_triosy_0_0_lz(xt_rsc_triosy_0_0_lz),
      .xt_rsc_triosy_0_1_lz(xt_rsc_triosy_0_1_lz),
      .xt_rsc_triosy_0_2_lz(xt_rsc_triosy_0_2_lz),
      .xt_rsc_triosy_0_3_lz(xt_rsc_triosy_0_3_lz),
      .xt_rsc_triosy_0_4_lz(xt_rsc_triosy_0_4_lz),
      .xt_rsc_triosy_0_5_lz(xt_rsc_triosy_0_5_lz),
      .xt_rsc_triosy_0_6_lz(xt_rsc_triosy_0_6_lz),
      .xt_rsc_triosy_0_7_lz(xt_rsc_triosy_0_7_lz),
      .xt_rsc_triosy_0_8_lz(xt_rsc_triosy_0_8_lz),
      .xt_rsc_triosy_0_9_lz(xt_rsc_triosy_0_9_lz),
      .xt_rsc_triosy_0_10_lz(xt_rsc_triosy_0_10_lz),
      .xt_rsc_triosy_0_11_lz(xt_rsc_triosy_0_11_lz),
      .xt_rsc_triosy_0_12_lz(xt_rsc_triosy_0_12_lz),
      .xt_rsc_triosy_0_13_lz(xt_rsc_triosy_0_13_lz),
      .xt_rsc_triosy_0_14_lz(xt_rsc_triosy_0_14_lz),
      .xt_rsc_triosy_0_15_lz(xt_rsc_triosy_0_15_lz),
      .xt_rsc_triosy_0_16_lz(xt_rsc_triosy_0_16_lz),
      .xt_rsc_triosy_0_17_lz(xt_rsc_triosy_0_17_lz),
      .xt_rsc_triosy_0_18_lz(xt_rsc_triosy_0_18_lz),
      .xt_rsc_triosy_0_19_lz(xt_rsc_triosy_0_19_lz),
      .xt_rsc_triosy_0_20_lz(xt_rsc_triosy_0_20_lz),
      .xt_rsc_triosy_0_21_lz(xt_rsc_triosy_0_21_lz),
      .xt_rsc_triosy_0_22_lz(xt_rsc_triosy_0_22_lz),
      .xt_rsc_triosy_0_23_lz(xt_rsc_triosy_0_23_lz),
      .xt_rsc_triosy_0_24_lz(xt_rsc_triosy_0_24_lz),
      .xt_rsc_triosy_0_25_lz(xt_rsc_triosy_0_25_lz),
      .xt_rsc_triosy_0_26_lz(xt_rsc_triosy_0_26_lz),
      .xt_rsc_triosy_0_27_lz(xt_rsc_triosy_0_27_lz),
      .xt_rsc_triosy_0_28_lz(xt_rsc_triosy_0_28_lz),
      .xt_rsc_triosy_0_29_lz(xt_rsc_triosy_0_29_lz),
      .xt_rsc_triosy_0_30_lz(xt_rsc_triosy_0_30_lz),
      .xt_rsc_triosy_0_31_lz(xt_rsc_triosy_0_31_lz),
      .xt_rsc_triosy_1_0_lz(xt_rsc_triosy_1_0_lz),
      .xt_rsc_triosy_1_1_lz(xt_rsc_triosy_1_1_lz),
      .xt_rsc_triosy_1_2_lz(xt_rsc_triosy_1_2_lz),
      .xt_rsc_triosy_1_3_lz(xt_rsc_triosy_1_3_lz),
      .xt_rsc_triosy_1_4_lz(xt_rsc_triosy_1_4_lz),
      .xt_rsc_triosy_1_5_lz(xt_rsc_triosy_1_5_lz),
      .xt_rsc_triosy_1_6_lz(xt_rsc_triosy_1_6_lz),
      .xt_rsc_triosy_1_7_lz(xt_rsc_triosy_1_7_lz),
      .xt_rsc_triosy_1_8_lz(xt_rsc_triosy_1_8_lz),
      .xt_rsc_triosy_1_9_lz(xt_rsc_triosy_1_9_lz),
      .xt_rsc_triosy_1_10_lz(xt_rsc_triosy_1_10_lz),
      .xt_rsc_triosy_1_11_lz(xt_rsc_triosy_1_11_lz),
      .xt_rsc_triosy_1_12_lz(xt_rsc_triosy_1_12_lz),
      .xt_rsc_triosy_1_13_lz(xt_rsc_triosy_1_13_lz),
      .xt_rsc_triosy_1_14_lz(xt_rsc_triosy_1_14_lz),
      .xt_rsc_triosy_1_15_lz(xt_rsc_triosy_1_15_lz),
      .xt_rsc_triosy_1_16_lz(xt_rsc_triosy_1_16_lz),
      .xt_rsc_triosy_1_17_lz(xt_rsc_triosy_1_17_lz),
      .xt_rsc_triosy_1_18_lz(xt_rsc_triosy_1_18_lz),
      .xt_rsc_triosy_1_19_lz(xt_rsc_triosy_1_19_lz),
      .xt_rsc_triosy_1_20_lz(xt_rsc_triosy_1_20_lz),
      .xt_rsc_triosy_1_21_lz(xt_rsc_triosy_1_21_lz),
      .xt_rsc_triosy_1_22_lz(xt_rsc_triosy_1_22_lz),
      .xt_rsc_triosy_1_23_lz(xt_rsc_triosy_1_23_lz),
      .xt_rsc_triosy_1_24_lz(xt_rsc_triosy_1_24_lz),
      .xt_rsc_triosy_1_25_lz(xt_rsc_triosy_1_25_lz),
      .xt_rsc_triosy_1_26_lz(xt_rsc_triosy_1_26_lz),
      .xt_rsc_triosy_1_27_lz(xt_rsc_triosy_1_27_lz),
      .xt_rsc_triosy_1_28_lz(xt_rsc_triosy_1_28_lz),
      .xt_rsc_triosy_1_29_lz(xt_rsc_triosy_1_29_lz),
      .xt_rsc_triosy_1_30_lz(xt_rsc_triosy_1_30_lz),
      .xt_rsc_triosy_1_31_lz(xt_rsc_triosy_1_31_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_0_0_s_tdone(twiddle_rsc_0_0_s_tdone),
      .twiddle_rsc_0_0_tr_write_done(twiddle_rsc_0_0_tr_write_done),
      .twiddle_rsc_0_0_RREADY(twiddle_rsc_0_0_RREADY),
      .twiddle_rsc_0_0_RVALID(twiddle_rsc_0_0_RVALID),
      .twiddle_rsc_0_0_RUSER(twiddle_rsc_0_0_RUSER),
      .twiddle_rsc_0_0_RLAST(twiddle_rsc_0_0_RLAST),
      .twiddle_rsc_0_0_RRESP(twiddle_rsc_0_0_RRESP),
      .twiddle_rsc_0_0_RDATA(twiddle_rsc_0_0_RDATA),
      .twiddle_rsc_0_0_RID(twiddle_rsc_0_0_RID),
      .twiddle_rsc_0_0_ARREADY(twiddle_rsc_0_0_ARREADY),
      .twiddle_rsc_0_0_ARVALID(twiddle_rsc_0_0_ARVALID),
      .twiddle_rsc_0_0_ARUSER(twiddle_rsc_0_0_ARUSER),
      .twiddle_rsc_0_0_ARREGION(twiddle_rsc_0_0_ARREGION),
      .twiddle_rsc_0_0_ARQOS(twiddle_rsc_0_0_ARQOS),
      .twiddle_rsc_0_0_ARPROT(twiddle_rsc_0_0_ARPROT),
      .twiddle_rsc_0_0_ARCACHE(twiddle_rsc_0_0_ARCACHE),
      .twiddle_rsc_0_0_ARLOCK(twiddle_rsc_0_0_ARLOCK),
      .twiddle_rsc_0_0_ARBURST(twiddle_rsc_0_0_ARBURST),
      .twiddle_rsc_0_0_ARSIZE(twiddle_rsc_0_0_ARSIZE),
      .twiddle_rsc_0_0_ARLEN(twiddle_rsc_0_0_ARLEN),
      .twiddle_rsc_0_0_ARADDR(twiddle_rsc_0_0_ARADDR),
      .twiddle_rsc_0_0_ARID(twiddle_rsc_0_0_ARID),
      .twiddle_rsc_0_0_BREADY(twiddle_rsc_0_0_BREADY),
      .twiddle_rsc_0_0_BVALID(twiddle_rsc_0_0_BVALID),
      .twiddle_rsc_0_0_BUSER(twiddle_rsc_0_0_BUSER),
      .twiddle_rsc_0_0_BRESP(twiddle_rsc_0_0_BRESP),
      .twiddle_rsc_0_0_BID(twiddle_rsc_0_0_BID),
      .twiddle_rsc_0_0_WREADY(twiddle_rsc_0_0_WREADY),
      .twiddle_rsc_0_0_WVALID(twiddle_rsc_0_0_WVALID),
      .twiddle_rsc_0_0_WUSER(twiddle_rsc_0_0_WUSER),
      .twiddle_rsc_0_0_WLAST(twiddle_rsc_0_0_WLAST),
      .twiddle_rsc_0_0_WSTRB(twiddle_rsc_0_0_WSTRB),
      .twiddle_rsc_0_0_WDATA(twiddle_rsc_0_0_WDATA),
      .twiddle_rsc_0_0_AWREADY(twiddle_rsc_0_0_AWREADY),
      .twiddle_rsc_0_0_AWVALID(twiddle_rsc_0_0_AWVALID),
      .twiddle_rsc_0_0_AWUSER(twiddle_rsc_0_0_AWUSER),
      .twiddle_rsc_0_0_AWREGION(twiddle_rsc_0_0_AWREGION),
      .twiddle_rsc_0_0_AWQOS(twiddle_rsc_0_0_AWQOS),
      .twiddle_rsc_0_0_AWPROT(twiddle_rsc_0_0_AWPROT),
      .twiddle_rsc_0_0_AWCACHE(twiddle_rsc_0_0_AWCACHE),
      .twiddle_rsc_0_0_AWLOCK(twiddle_rsc_0_0_AWLOCK),
      .twiddle_rsc_0_0_AWBURST(twiddle_rsc_0_0_AWBURST),
      .twiddle_rsc_0_0_AWSIZE(twiddle_rsc_0_0_AWSIZE),
      .twiddle_rsc_0_0_AWLEN(twiddle_rsc_0_0_AWLEN),
      .twiddle_rsc_0_0_AWADDR(twiddle_rsc_0_0_AWADDR),
      .twiddle_rsc_0_0_AWID(twiddle_rsc_0_0_AWID),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_0_1_s_tdone(twiddle_rsc_0_1_s_tdone),
      .twiddle_rsc_0_1_tr_write_done(twiddle_rsc_0_1_tr_write_done),
      .twiddle_rsc_0_1_RREADY(twiddle_rsc_0_1_RREADY),
      .twiddle_rsc_0_1_RVALID(twiddle_rsc_0_1_RVALID),
      .twiddle_rsc_0_1_RUSER(twiddle_rsc_0_1_RUSER),
      .twiddle_rsc_0_1_RLAST(twiddle_rsc_0_1_RLAST),
      .twiddle_rsc_0_1_RRESP(twiddle_rsc_0_1_RRESP),
      .twiddle_rsc_0_1_RDATA(twiddle_rsc_0_1_RDATA),
      .twiddle_rsc_0_1_RID(twiddle_rsc_0_1_RID),
      .twiddle_rsc_0_1_ARREADY(twiddle_rsc_0_1_ARREADY),
      .twiddle_rsc_0_1_ARVALID(twiddle_rsc_0_1_ARVALID),
      .twiddle_rsc_0_1_ARUSER(twiddle_rsc_0_1_ARUSER),
      .twiddle_rsc_0_1_ARREGION(twiddle_rsc_0_1_ARREGION),
      .twiddle_rsc_0_1_ARQOS(twiddle_rsc_0_1_ARQOS),
      .twiddle_rsc_0_1_ARPROT(twiddle_rsc_0_1_ARPROT),
      .twiddle_rsc_0_1_ARCACHE(twiddle_rsc_0_1_ARCACHE),
      .twiddle_rsc_0_1_ARLOCK(twiddle_rsc_0_1_ARLOCK),
      .twiddle_rsc_0_1_ARBURST(twiddle_rsc_0_1_ARBURST),
      .twiddle_rsc_0_1_ARSIZE(twiddle_rsc_0_1_ARSIZE),
      .twiddle_rsc_0_1_ARLEN(twiddle_rsc_0_1_ARLEN),
      .twiddle_rsc_0_1_ARADDR(twiddle_rsc_0_1_ARADDR),
      .twiddle_rsc_0_1_ARID(twiddle_rsc_0_1_ARID),
      .twiddle_rsc_0_1_BREADY(twiddle_rsc_0_1_BREADY),
      .twiddle_rsc_0_1_BVALID(twiddle_rsc_0_1_BVALID),
      .twiddle_rsc_0_1_BUSER(twiddle_rsc_0_1_BUSER),
      .twiddle_rsc_0_1_BRESP(twiddle_rsc_0_1_BRESP),
      .twiddle_rsc_0_1_BID(twiddle_rsc_0_1_BID),
      .twiddle_rsc_0_1_WREADY(twiddle_rsc_0_1_WREADY),
      .twiddle_rsc_0_1_WVALID(twiddle_rsc_0_1_WVALID),
      .twiddle_rsc_0_1_WUSER(twiddle_rsc_0_1_WUSER),
      .twiddle_rsc_0_1_WLAST(twiddle_rsc_0_1_WLAST),
      .twiddle_rsc_0_1_WSTRB(twiddle_rsc_0_1_WSTRB),
      .twiddle_rsc_0_1_WDATA(twiddle_rsc_0_1_WDATA),
      .twiddle_rsc_0_1_AWREADY(twiddle_rsc_0_1_AWREADY),
      .twiddle_rsc_0_1_AWVALID(twiddle_rsc_0_1_AWVALID),
      .twiddle_rsc_0_1_AWUSER(twiddle_rsc_0_1_AWUSER),
      .twiddle_rsc_0_1_AWREGION(twiddle_rsc_0_1_AWREGION),
      .twiddle_rsc_0_1_AWQOS(twiddle_rsc_0_1_AWQOS),
      .twiddle_rsc_0_1_AWPROT(twiddle_rsc_0_1_AWPROT),
      .twiddle_rsc_0_1_AWCACHE(twiddle_rsc_0_1_AWCACHE),
      .twiddle_rsc_0_1_AWLOCK(twiddle_rsc_0_1_AWLOCK),
      .twiddle_rsc_0_1_AWBURST(twiddle_rsc_0_1_AWBURST),
      .twiddle_rsc_0_1_AWSIZE(twiddle_rsc_0_1_AWSIZE),
      .twiddle_rsc_0_1_AWLEN(twiddle_rsc_0_1_AWLEN),
      .twiddle_rsc_0_1_AWADDR(twiddle_rsc_0_1_AWADDR),
      .twiddle_rsc_0_1_AWID(twiddle_rsc_0_1_AWID),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .twiddle_rsc_0_2_s_tdone(twiddle_rsc_0_2_s_tdone),
      .twiddle_rsc_0_2_tr_write_done(twiddle_rsc_0_2_tr_write_done),
      .twiddle_rsc_0_2_RREADY(twiddle_rsc_0_2_RREADY),
      .twiddle_rsc_0_2_RVALID(twiddle_rsc_0_2_RVALID),
      .twiddle_rsc_0_2_RUSER(twiddle_rsc_0_2_RUSER),
      .twiddle_rsc_0_2_RLAST(twiddle_rsc_0_2_RLAST),
      .twiddle_rsc_0_2_RRESP(twiddle_rsc_0_2_RRESP),
      .twiddle_rsc_0_2_RDATA(twiddle_rsc_0_2_RDATA),
      .twiddle_rsc_0_2_RID(twiddle_rsc_0_2_RID),
      .twiddle_rsc_0_2_ARREADY(twiddle_rsc_0_2_ARREADY),
      .twiddle_rsc_0_2_ARVALID(twiddle_rsc_0_2_ARVALID),
      .twiddle_rsc_0_2_ARUSER(twiddle_rsc_0_2_ARUSER),
      .twiddle_rsc_0_2_ARREGION(twiddle_rsc_0_2_ARREGION),
      .twiddle_rsc_0_2_ARQOS(twiddle_rsc_0_2_ARQOS),
      .twiddle_rsc_0_2_ARPROT(twiddle_rsc_0_2_ARPROT),
      .twiddle_rsc_0_2_ARCACHE(twiddle_rsc_0_2_ARCACHE),
      .twiddle_rsc_0_2_ARLOCK(twiddle_rsc_0_2_ARLOCK),
      .twiddle_rsc_0_2_ARBURST(twiddle_rsc_0_2_ARBURST),
      .twiddle_rsc_0_2_ARSIZE(twiddle_rsc_0_2_ARSIZE),
      .twiddle_rsc_0_2_ARLEN(twiddle_rsc_0_2_ARLEN),
      .twiddle_rsc_0_2_ARADDR(twiddle_rsc_0_2_ARADDR),
      .twiddle_rsc_0_2_ARID(twiddle_rsc_0_2_ARID),
      .twiddle_rsc_0_2_BREADY(twiddle_rsc_0_2_BREADY),
      .twiddle_rsc_0_2_BVALID(twiddle_rsc_0_2_BVALID),
      .twiddle_rsc_0_2_BUSER(twiddle_rsc_0_2_BUSER),
      .twiddle_rsc_0_2_BRESP(twiddle_rsc_0_2_BRESP),
      .twiddle_rsc_0_2_BID(twiddle_rsc_0_2_BID),
      .twiddle_rsc_0_2_WREADY(twiddle_rsc_0_2_WREADY),
      .twiddle_rsc_0_2_WVALID(twiddle_rsc_0_2_WVALID),
      .twiddle_rsc_0_2_WUSER(twiddle_rsc_0_2_WUSER),
      .twiddle_rsc_0_2_WLAST(twiddle_rsc_0_2_WLAST),
      .twiddle_rsc_0_2_WSTRB(twiddle_rsc_0_2_WSTRB),
      .twiddle_rsc_0_2_WDATA(twiddle_rsc_0_2_WDATA),
      .twiddle_rsc_0_2_AWREADY(twiddle_rsc_0_2_AWREADY),
      .twiddle_rsc_0_2_AWVALID(twiddle_rsc_0_2_AWVALID),
      .twiddle_rsc_0_2_AWUSER(twiddle_rsc_0_2_AWUSER),
      .twiddle_rsc_0_2_AWREGION(twiddle_rsc_0_2_AWREGION),
      .twiddle_rsc_0_2_AWQOS(twiddle_rsc_0_2_AWQOS),
      .twiddle_rsc_0_2_AWPROT(twiddle_rsc_0_2_AWPROT),
      .twiddle_rsc_0_2_AWCACHE(twiddle_rsc_0_2_AWCACHE),
      .twiddle_rsc_0_2_AWLOCK(twiddle_rsc_0_2_AWLOCK),
      .twiddle_rsc_0_2_AWBURST(twiddle_rsc_0_2_AWBURST),
      .twiddle_rsc_0_2_AWSIZE(twiddle_rsc_0_2_AWSIZE),
      .twiddle_rsc_0_2_AWLEN(twiddle_rsc_0_2_AWLEN),
      .twiddle_rsc_0_2_AWADDR(twiddle_rsc_0_2_AWADDR),
      .twiddle_rsc_0_2_AWID(twiddle_rsc_0_2_AWID),
      .twiddle_rsc_triosy_0_2_lz(twiddle_rsc_triosy_0_2_lz),
      .twiddle_rsc_0_3_s_tdone(twiddle_rsc_0_3_s_tdone),
      .twiddle_rsc_0_3_tr_write_done(twiddle_rsc_0_3_tr_write_done),
      .twiddle_rsc_0_3_RREADY(twiddle_rsc_0_3_RREADY),
      .twiddle_rsc_0_3_RVALID(twiddle_rsc_0_3_RVALID),
      .twiddle_rsc_0_3_RUSER(twiddle_rsc_0_3_RUSER),
      .twiddle_rsc_0_3_RLAST(twiddle_rsc_0_3_RLAST),
      .twiddle_rsc_0_3_RRESP(twiddle_rsc_0_3_RRESP),
      .twiddle_rsc_0_3_RDATA(twiddle_rsc_0_3_RDATA),
      .twiddle_rsc_0_3_RID(twiddle_rsc_0_3_RID),
      .twiddle_rsc_0_3_ARREADY(twiddle_rsc_0_3_ARREADY),
      .twiddle_rsc_0_3_ARVALID(twiddle_rsc_0_3_ARVALID),
      .twiddle_rsc_0_3_ARUSER(twiddle_rsc_0_3_ARUSER),
      .twiddle_rsc_0_3_ARREGION(twiddle_rsc_0_3_ARREGION),
      .twiddle_rsc_0_3_ARQOS(twiddle_rsc_0_3_ARQOS),
      .twiddle_rsc_0_3_ARPROT(twiddle_rsc_0_3_ARPROT),
      .twiddle_rsc_0_3_ARCACHE(twiddle_rsc_0_3_ARCACHE),
      .twiddle_rsc_0_3_ARLOCK(twiddle_rsc_0_3_ARLOCK),
      .twiddle_rsc_0_3_ARBURST(twiddle_rsc_0_3_ARBURST),
      .twiddle_rsc_0_3_ARSIZE(twiddle_rsc_0_3_ARSIZE),
      .twiddle_rsc_0_3_ARLEN(twiddle_rsc_0_3_ARLEN),
      .twiddle_rsc_0_3_ARADDR(twiddle_rsc_0_3_ARADDR),
      .twiddle_rsc_0_3_ARID(twiddle_rsc_0_3_ARID),
      .twiddle_rsc_0_3_BREADY(twiddle_rsc_0_3_BREADY),
      .twiddle_rsc_0_3_BVALID(twiddle_rsc_0_3_BVALID),
      .twiddle_rsc_0_3_BUSER(twiddle_rsc_0_3_BUSER),
      .twiddle_rsc_0_3_BRESP(twiddle_rsc_0_3_BRESP),
      .twiddle_rsc_0_3_BID(twiddle_rsc_0_3_BID),
      .twiddle_rsc_0_3_WREADY(twiddle_rsc_0_3_WREADY),
      .twiddle_rsc_0_3_WVALID(twiddle_rsc_0_3_WVALID),
      .twiddle_rsc_0_3_WUSER(twiddle_rsc_0_3_WUSER),
      .twiddle_rsc_0_3_WLAST(twiddle_rsc_0_3_WLAST),
      .twiddle_rsc_0_3_WSTRB(twiddle_rsc_0_3_WSTRB),
      .twiddle_rsc_0_3_WDATA(twiddle_rsc_0_3_WDATA),
      .twiddle_rsc_0_3_AWREADY(twiddle_rsc_0_3_AWREADY),
      .twiddle_rsc_0_3_AWVALID(twiddle_rsc_0_3_AWVALID),
      .twiddle_rsc_0_3_AWUSER(twiddle_rsc_0_3_AWUSER),
      .twiddle_rsc_0_3_AWREGION(twiddle_rsc_0_3_AWREGION),
      .twiddle_rsc_0_3_AWQOS(twiddle_rsc_0_3_AWQOS),
      .twiddle_rsc_0_3_AWPROT(twiddle_rsc_0_3_AWPROT),
      .twiddle_rsc_0_3_AWCACHE(twiddle_rsc_0_3_AWCACHE),
      .twiddle_rsc_0_3_AWLOCK(twiddle_rsc_0_3_AWLOCK),
      .twiddle_rsc_0_3_AWBURST(twiddle_rsc_0_3_AWBURST),
      .twiddle_rsc_0_3_AWSIZE(twiddle_rsc_0_3_AWSIZE),
      .twiddle_rsc_0_3_AWLEN(twiddle_rsc_0_3_AWLEN),
      .twiddle_rsc_0_3_AWADDR(twiddle_rsc_0_3_AWADDR),
      .twiddle_rsc_0_3_AWID(twiddle_rsc_0_3_AWID),
      .twiddle_rsc_triosy_0_3_lz(twiddle_rsc_triosy_0_3_lz),
      .twiddle_rsc_0_4_s_tdone(twiddle_rsc_0_4_s_tdone),
      .twiddle_rsc_0_4_tr_write_done(twiddle_rsc_0_4_tr_write_done),
      .twiddle_rsc_0_4_RREADY(twiddle_rsc_0_4_RREADY),
      .twiddle_rsc_0_4_RVALID(twiddle_rsc_0_4_RVALID),
      .twiddle_rsc_0_4_RUSER(twiddle_rsc_0_4_RUSER),
      .twiddle_rsc_0_4_RLAST(twiddle_rsc_0_4_RLAST),
      .twiddle_rsc_0_4_RRESP(twiddle_rsc_0_4_RRESP),
      .twiddle_rsc_0_4_RDATA(twiddle_rsc_0_4_RDATA),
      .twiddle_rsc_0_4_RID(twiddle_rsc_0_4_RID),
      .twiddle_rsc_0_4_ARREADY(twiddle_rsc_0_4_ARREADY),
      .twiddle_rsc_0_4_ARVALID(twiddle_rsc_0_4_ARVALID),
      .twiddle_rsc_0_4_ARUSER(twiddle_rsc_0_4_ARUSER),
      .twiddle_rsc_0_4_ARREGION(twiddle_rsc_0_4_ARREGION),
      .twiddle_rsc_0_4_ARQOS(twiddle_rsc_0_4_ARQOS),
      .twiddle_rsc_0_4_ARPROT(twiddle_rsc_0_4_ARPROT),
      .twiddle_rsc_0_4_ARCACHE(twiddle_rsc_0_4_ARCACHE),
      .twiddle_rsc_0_4_ARLOCK(twiddle_rsc_0_4_ARLOCK),
      .twiddle_rsc_0_4_ARBURST(twiddle_rsc_0_4_ARBURST),
      .twiddle_rsc_0_4_ARSIZE(twiddle_rsc_0_4_ARSIZE),
      .twiddle_rsc_0_4_ARLEN(twiddle_rsc_0_4_ARLEN),
      .twiddle_rsc_0_4_ARADDR(twiddle_rsc_0_4_ARADDR),
      .twiddle_rsc_0_4_ARID(twiddle_rsc_0_4_ARID),
      .twiddle_rsc_0_4_BREADY(twiddle_rsc_0_4_BREADY),
      .twiddle_rsc_0_4_BVALID(twiddle_rsc_0_4_BVALID),
      .twiddle_rsc_0_4_BUSER(twiddle_rsc_0_4_BUSER),
      .twiddle_rsc_0_4_BRESP(twiddle_rsc_0_4_BRESP),
      .twiddle_rsc_0_4_BID(twiddle_rsc_0_4_BID),
      .twiddle_rsc_0_4_WREADY(twiddle_rsc_0_4_WREADY),
      .twiddle_rsc_0_4_WVALID(twiddle_rsc_0_4_WVALID),
      .twiddle_rsc_0_4_WUSER(twiddle_rsc_0_4_WUSER),
      .twiddle_rsc_0_4_WLAST(twiddle_rsc_0_4_WLAST),
      .twiddle_rsc_0_4_WSTRB(twiddle_rsc_0_4_WSTRB),
      .twiddle_rsc_0_4_WDATA(twiddle_rsc_0_4_WDATA),
      .twiddle_rsc_0_4_AWREADY(twiddle_rsc_0_4_AWREADY),
      .twiddle_rsc_0_4_AWVALID(twiddle_rsc_0_4_AWVALID),
      .twiddle_rsc_0_4_AWUSER(twiddle_rsc_0_4_AWUSER),
      .twiddle_rsc_0_4_AWREGION(twiddle_rsc_0_4_AWREGION),
      .twiddle_rsc_0_4_AWQOS(twiddle_rsc_0_4_AWQOS),
      .twiddle_rsc_0_4_AWPROT(twiddle_rsc_0_4_AWPROT),
      .twiddle_rsc_0_4_AWCACHE(twiddle_rsc_0_4_AWCACHE),
      .twiddle_rsc_0_4_AWLOCK(twiddle_rsc_0_4_AWLOCK),
      .twiddle_rsc_0_4_AWBURST(twiddle_rsc_0_4_AWBURST),
      .twiddle_rsc_0_4_AWSIZE(twiddle_rsc_0_4_AWSIZE),
      .twiddle_rsc_0_4_AWLEN(twiddle_rsc_0_4_AWLEN),
      .twiddle_rsc_0_4_AWADDR(twiddle_rsc_0_4_AWADDR),
      .twiddle_rsc_0_4_AWID(twiddle_rsc_0_4_AWID),
      .twiddle_rsc_triosy_0_4_lz(twiddle_rsc_triosy_0_4_lz),
      .twiddle_rsc_0_5_s_tdone(twiddle_rsc_0_5_s_tdone),
      .twiddle_rsc_0_5_tr_write_done(twiddle_rsc_0_5_tr_write_done),
      .twiddle_rsc_0_5_RREADY(twiddle_rsc_0_5_RREADY),
      .twiddle_rsc_0_5_RVALID(twiddle_rsc_0_5_RVALID),
      .twiddle_rsc_0_5_RUSER(twiddle_rsc_0_5_RUSER),
      .twiddle_rsc_0_5_RLAST(twiddle_rsc_0_5_RLAST),
      .twiddle_rsc_0_5_RRESP(twiddle_rsc_0_5_RRESP),
      .twiddle_rsc_0_5_RDATA(twiddle_rsc_0_5_RDATA),
      .twiddle_rsc_0_5_RID(twiddle_rsc_0_5_RID),
      .twiddle_rsc_0_5_ARREADY(twiddle_rsc_0_5_ARREADY),
      .twiddle_rsc_0_5_ARVALID(twiddle_rsc_0_5_ARVALID),
      .twiddle_rsc_0_5_ARUSER(twiddle_rsc_0_5_ARUSER),
      .twiddle_rsc_0_5_ARREGION(twiddle_rsc_0_5_ARREGION),
      .twiddle_rsc_0_5_ARQOS(twiddle_rsc_0_5_ARQOS),
      .twiddle_rsc_0_5_ARPROT(twiddle_rsc_0_5_ARPROT),
      .twiddle_rsc_0_5_ARCACHE(twiddle_rsc_0_5_ARCACHE),
      .twiddle_rsc_0_5_ARLOCK(twiddle_rsc_0_5_ARLOCK),
      .twiddle_rsc_0_5_ARBURST(twiddle_rsc_0_5_ARBURST),
      .twiddle_rsc_0_5_ARSIZE(twiddle_rsc_0_5_ARSIZE),
      .twiddle_rsc_0_5_ARLEN(twiddle_rsc_0_5_ARLEN),
      .twiddle_rsc_0_5_ARADDR(twiddle_rsc_0_5_ARADDR),
      .twiddle_rsc_0_5_ARID(twiddle_rsc_0_5_ARID),
      .twiddle_rsc_0_5_BREADY(twiddle_rsc_0_5_BREADY),
      .twiddle_rsc_0_5_BVALID(twiddle_rsc_0_5_BVALID),
      .twiddle_rsc_0_5_BUSER(twiddle_rsc_0_5_BUSER),
      .twiddle_rsc_0_5_BRESP(twiddle_rsc_0_5_BRESP),
      .twiddle_rsc_0_5_BID(twiddle_rsc_0_5_BID),
      .twiddle_rsc_0_5_WREADY(twiddle_rsc_0_5_WREADY),
      .twiddle_rsc_0_5_WVALID(twiddle_rsc_0_5_WVALID),
      .twiddle_rsc_0_5_WUSER(twiddle_rsc_0_5_WUSER),
      .twiddle_rsc_0_5_WLAST(twiddle_rsc_0_5_WLAST),
      .twiddle_rsc_0_5_WSTRB(twiddle_rsc_0_5_WSTRB),
      .twiddle_rsc_0_5_WDATA(twiddle_rsc_0_5_WDATA),
      .twiddle_rsc_0_5_AWREADY(twiddle_rsc_0_5_AWREADY),
      .twiddle_rsc_0_5_AWVALID(twiddle_rsc_0_5_AWVALID),
      .twiddle_rsc_0_5_AWUSER(twiddle_rsc_0_5_AWUSER),
      .twiddle_rsc_0_5_AWREGION(twiddle_rsc_0_5_AWREGION),
      .twiddle_rsc_0_5_AWQOS(twiddle_rsc_0_5_AWQOS),
      .twiddle_rsc_0_5_AWPROT(twiddle_rsc_0_5_AWPROT),
      .twiddle_rsc_0_5_AWCACHE(twiddle_rsc_0_5_AWCACHE),
      .twiddle_rsc_0_5_AWLOCK(twiddle_rsc_0_5_AWLOCK),
      .twiddle_rsc_0_5_AWBURST(twiddle_rsc_0_5_AWBURST),
      .twiddle_rsc_0_5_AWSIZE(twiddle_rsc_0_5_AWSIZE),
      .twiddle_rsc_0_5_AWLEN(twiddle_rsc_0_5_AWLEN),
      .twiddle_rsc_0_5_AWADDR(twiddle_rsc_0_5_AWADDR),
      .twiddle_rsc_0_5_AWID(twiddle_rsc_0_5_AWID),
      .twiddle_rsc_triosy_0_5_lz(twiddle_rsc_triosy_0_5_lz),
      .twiddle_rsc_0_6_s_tdone(twiddle_rsc_0_6_s_tdone),
      .twiddle_rsc_0_6_tr_write_done(twiddle_rsc_0_6_tr_write_done),
      .twiddle_rsc_0_6_RREADY(twiddle_rsc_0_6_RREADY),
      .twiddle_rsc_0_6_RVALID(twiddle_rsc_0_6_RVALID),
      .twiddle_rsc_0_6_RUSER(twiddle_rsc_0_6_RUSER),
      .twiddle_rsc_0_6_RLAST(twiddle_rsc_0_6_RLAST),
      .twiddle_rsc_0_6_RRESP(twiddle_rsc_0_6_RRESP),
      .twiddle_rsc_0_6_RDATA(twiddle_rsc_0_6_RDATA),
      .twiddle_rsc_0_6_RID(twiddle_rsc_0_6_RID),
      .twiddle_rsc_0_6_ARREADY(twiddle_rsc_0_6_ARREADY),
      .twiddle_rsc_0_6_ARVALID(twiddle_rsc_0_6_ARVALID),
      .twiddle_rsc_0_6_ARUSER(twiddle_rsc_0_6_ARUSER),
      .twiddle_rsc_0_6_ARREGION(twiddle_rsc_0_6_ARREGION),
      .twiddle_rsc_0_6_ARQOS(twiddle_rsc_0_6_ARQOS),
      .twiddle_rsc_0_6_ARPROT(twiddle_rsc_0_6_ARPROT),
      .twiddle_rsc_0_6_ARCACHE(twiddle_rsc_0_6_ARCACHE),
      .twiddle_rsc_0_6_ARLOCK(twiddle_rsc_0_6_ARLOCK),
      .twiddle_rsc_0_6_ARBURST(twiddle_rsc_0_6_ARBURST),
      .twiddle_rsc_0_6_ARSIZE(twiddle_rsc_0_6_ARSIZE),
      .twiddle_rsc_0_6_ARLEN(twiddle_rsc_0_6_ARLEN),
      .twiddle_rsc_0_6_ARADDR(twiddle_rsc_0_6_ARADDR),
      .twiddle_rsc_0_6_ARID(twiddle_rsc_0_6_ARID),
      .twiddle_rsc_0_6_BREADY(twiddle_rsc_0_6_BREADY),
      .twiddle_rsc_0_6_BVALID(twiddle_rsc_0_6_BVALID),
      .twiddle_rsc_0_6_BUSER(twiddle_rsc_0_6_BUSER),
      .twiddle_rsc_0_6_BRESP(twiddle_rsc_0_6_BRESP),
      .twiddle_rsc_0_6_BID(twiddle_rsc_0_6_BID),
      .twiddle_rsc_0_6_WREADY(twiddle_rsc_0_6_WREADY),
      .twiddle_rsc_0_6_WVALID(twiddle_rsc_0_6_WVALID),
      .twiddle_rsc_0_6_WUSER(twiddle_rsc_0_6_WUSER),
      .twiddle_rsc_0_6_WLAST(twiddle_rsc_0_6_WLAST),
      .twiddle_rsc_0_6_WSTRB(twiddle_rsc_0_6_WSTRB),
      .twiddle_rsc_0_6_WDATA(twiddle_rsc_0_6_WDATA),
      .twiddle_rsc_0_6_AWREADY(twiddle_rsc_0_6_AWREADY),
      .twiddle_rsc_0_6_AWVALID(twiddle_rsc_0_6_AWVALID),
      .twiddle_rsc_0_6_AWUSER(twiddle_rsc_0_6_AWUSER),
      .twiddle_rsc_0_6_AWREGION(twiddle_rsc_0_6_AWREGION),
      .twiddle_rsc_0_6_AWQOS(twiddle_rsc_0_6_AWQOS),
      .twiddle_rsc_0_6_AWPROT(twiddle_rsc_0_6_AWPROT),
      .twiddle_rsc_0_6_AWCACHE(twiddle_rsc_0_6_AWCACHE),
      .twiddle_rsc_0_6_AWLOCK(twiddle_rsc_0_6_AWLOCK),
      .twiddle_rsc_0_6_AWBURST(twiddle_rsc_0_6_AWBURST),
      .twiddle_rsc_0_6_AWSIZE(twiddle_rsc_0_6_AWSIZE),
      .twiddle_rsc_0_6_AWLEN(twiddle_rsc_0_6_AWLEN),
      .twiddle_rsc_0_6_AWADDR(twiddle_rsc_0_6_AWADDR),
      .twiddle_rsc_0_6_AWID(twiddle_rsc_0_6_AWID),
      .twiddle_rsc_triosy_0_6_lz(twiddle_rsc_triosy_0_6_lz),
      .twiddle_rsc_0_7_s_tdone(twiddle_rsc_0_7_s_tdone),
      .twiddle_rsc_0_7_tr_write_done(twiddle_rsc_0_7_tr_write_done),
      .twiddle_rsc_0_7_RREADY(twiddle_rsc_0_7_RREADY),
      .twiddle_rsc_0_7_RVALID(twiddle_rsc_0_7_RVALID),
      .twiddle_rsc_0_7_RUSER(twiddle_rsc_0_7_RUSER),
      .twiddle_rsc_0_7_RLAST(twiddle_rsc_0_7_RLAST),
      .twiddle_rsc_0_7_RRESP(twiddle_rsc_0_7_RRESP),
      .twiddle_rsc_0_7_RDATA(twiddle_rsc_0_7_RDATA),
      .twiddle_rsc_0_7_RID(twiddle_rsc_0_7_RID),
      .twiddle_rsc_0_7_ARREADY(twiddle_rsc_0_7_ARREADY),
      .twiddle_rsc_0_7_ARVALID(twiddle_rsc_0_7_ARVALID),
      .twiddle_rsc_0_7_ARUSER(twiddle_rsc_0_7_ARUSER),
      .twiddle_rsc_0_7_ARREGION(twiddle_rsc_0_7_ARREGION),
      .twiddle_rsc_0_7_ARQOS(twiddle_rsc_0_7_ARQOS),
      .twiddle_rsc_0_7_ARPROT(twiddle_rsc_0_7_ARPROT),
      .twiddle_rsc_0_7_ARCACHE(twiddle_rsc_0_7_ARCACHE),
      .twiddle_rsc_0_7_ARLOCK(twiddle_rsc_0_7_ARLOCK),
      .twiddle_rsc_0_7_ARBURST(twiddle_rsc_0_7_ARBURST),
      .twiddle_rsc_0_7_ARSIZE(twiddle_rsc_0_7_ARSIZE),
      .twiddle_rsc_0_7_ARLEN(twiddle_rsc_0_7_ARLEN),
      .twiddle_rsc_0_7_ARADDR(twiddle_rsc_0_7_ARADDR),
      .twiddle_rsc_0_7_ARID(twiddle_rsc_0_7_ARID),
      .twiddle_rsc_0_7_BREADY(twiddle_rsc_0_7_BREADY),
      .twiddle_rsc_0_7_BVALID(twiddle_rsc_0_7_BVALID),
      .twiddle_rsc_0_7_BUSER(twiddle_rsc_0_7_BUSER),
      .twiddle_rsc_0_7_BRESP(twiddle_rsc_0_7_BRESP),
      .twiddle_rsc_0_7_BID(twiddle_rsc_0_7_BID),
      .twiddle_rsc_0_7_WREADY(twiddle_rsc_0_7_WREADY),
      .twiddle_rsc_0_7_WVALID(twiddle_rsc_0_7_WVALID),
      .twiddle_rsc_0_7_WUSER(twiddle_rsc_0_7_WUSER),
      .twiddle_rsc_0_7_WLAST(twiddle_rsc_0_7_WLAST),
      .twiddle_rsc_0_7_WSTRB(twiddle_rsc_0_7_WSTRB),
      .twiddle_rsc_0_7_WDATA(twiddle_rsc_0_7_WDATA),
      .twiddle_rsc_0_7_AWREADY(twiddle_rsc_0_7_AWREADY),
      .twiddle_rsc_0_7_AWVALID(twiddle_rsc_0_7_AWVALID),
      .twiddle_rsc_0_7_AWUSER(twiddle_rsc_0_7_AWUSER),
      .twiddle_rsc_0_7_AWREGION(twiddle_rsc_0_7_AWREGION),
      .twiddle_rsc_0_7_AWQOS(twiddle_rsc_0_7_AWQOS),
      .twiddle_rsc_0_7_AWPROT(twiddle_rsc_0_7_AWPROT),
      .twiddle_rsc_0_7_AWCACHE(twiddle_rsc_0_7_AWCACHE),
      .twiddle_rsc_0_7_AWLOCK(twiddle_rsc_0_7_AWLOCK),
      .twiddle_rsc_0_7_AWBURST(twiddle_rsc_0_7_AWBURST),
      .twiddle_rsc_0_7_AWSIZE(twiddle_rsc_0_7_AWSIZE),
      .twiddle_rsc_0_7_AWLEN(twiddle_rsc_0_7_AWLEN),
      .twiddle_rsc_0_7_AWADDR(twiddle_rsc_0_7_AWADDR),
      .twiddle_rsc_0_7_AWID(twiddle_rsc_0_7_AWID),
      .twiddle_rsc_triosy_0_7_lz(twiddle_rsc_triosy_0_7_lz),
      .twiddle_rsc_0_8_s_tdone(twiddle_rsc_0_8_s_tdone),
      .twiddle_rsc_0_8_tr_write_done(twiddle_rsc_0_8_tr_write_done),
      .twiddle_rsc_0_8_RREADY(twiddle_rsc_0_8_RREADY),
      .twiddle_rsc_0_8_RVALID(twiddle_rsc_0_8_RVALID),
      .twiddle_rsc_0_8_RUSER(twiddle_rsc_0_8_RUSER),
      .twiddle_rsc_0_8_RLAST(twiddle_rsc_0_8_RLAST),
      .twiddle_rsc_0_8_RRESP(twiddle_rsc_0_8_RRESP),
      .twiddle_rsc_0_8_RDATA(twiddle_rsc_0_8_RDATA),
      .twiddle_rsc_0_8_RID(twiddle_rsc_0_8_RID),
      .twiddle_rsc_0_8_ARREADY(twiddle_rsc_0_8_ARREADY),
      .twiddle_rsc_0_8_ARVALID(twiddle_rsc_0_8_ARVALID),
      .twiddle_rsc_0_8_ARUSER(twiddle_rsc_0_8_ARUSER),
      .twiddle_rsc_0_8_ARREGION(twiddle_rsc_0_8_ARREGION),
      .twiddle_rsc_0_8_ARQOS(twiddle_rsc_0_8_ARQOS),
      .twiddle_rsc_0_8_ARPROT(twiddle_rsc_0_8_ARPROT),
      .twiddle_rsc_0_8_ARCACHE(twiddle_rsc_0_8_ARCACHE),
      .twiddle_rsc_0_8_ARLOCK(twiddle_rsc_0_8_ARLOCK),
      .twiddle_rsc_0_8_ARBURST(twiddle_rsc_0_8_ARBURST),
      .twiddle_rsc_0_8_ARSIZE(twiddle_rsc_0_8_ARSIZE),
      .twiddle_rsc_0_8_ARLEN(twiddle_rsc_0_8_ARLEN),
      .twiddle_rsc_0_8_ARADDR(twiddle_rsc_0_8_ARADDR),
      .twiddle_rsc_0_8_ARID(twiddle_rsc_0_8_ARID),
      .twiddle_rsc_0_8_BREADY(twiddle_rsc_0_8_BREADY),
      .twiddle_rsc_0_8_BVALID(twiddle_rsc_0_8_BVALID),
      .twiddle_rsc_0_8_BUSER(twiddle_rsc_0_8_BUSER),
      .twiddle_rsc_0_8_BRESP(twiddle_rsc_0_8_BRESP),
      .twiddle_rsc_0_8_BID(twiddle_rsc_0_8_BID),
      .twiddle_rsc_0_8_WREADY(twiddle_rsc_0_8_WREADY),
      .twiddle_rsc_0_8_WVALID(twiddle_rsc_0_8_WVALID),
      .twiddle_rsc_0_8_WUSER(twiddle_rsc_0_8_WUSER),
      .twiddle_rsc_0_8_WLAST(twiddle_rsc_0_8_WLAST),
      .twiddle_rsc_0_8_WSTRB(twiddle_rsc_0_8_WSTRB),
      .twiddle_rsc_0_8_WDATA(twiddle_rsc_0_8_WDATA),
      .twiddle_rsc_0_8_AWREADY(twiddle_rsc_0_8_AWREADY),
      .twiddle_rsc_0_8_AWVALID(twiddle_rsc_0_8_AWVALID),
      .twiddle_rsc_0_8_AWUSER(twiddle_rsc_0_8_AWUSER),
      .twiddle_rsc_0_8_AWREGION(twiddle_rsc_0_8_AWREGION),
      .twiddle_rsc_0_8_AWQOS(twiddle_rsc_0_8_AWQOS),
      .twiddle_rsc_0_8_AWPROT(twiddle_rsc_0_8_AWPROT),
      .twiddle_rsc_0_8_AWCACHE(twiddle_rsc_0_8_AWCACHE),
      .twiddle_rsc_0_8_AWLOCK(twiddle_rsc_0_8_AWLOCK),
      .twiddle_rsc_0_8_AWBURST(twiddle_rsc_0_8_AWBURST),
      .twiddle_rsc_0_8_AWSIZE(twiddle_rsc_0_8_AWSIZE),
      .twiddle_rsc_0_8_AWLEN(twiddle_rsc_0_8_AWLEN),
      .twiddle_rsc_0_8_AWADDR(twiddle_rsc_0_8_AWADDR),
      .twiddle_rsc_0_8_AWID(twiddle_rsc_0_8_AWID),
      .twiddle_rsc_triosy_0_8_lz(twiddle_rsc_triosy_0_8_lz),
      .twiddle_rsc_0_9_s_tdone(twiddle_rsc_0_9_s_tdone),
      .twiddle_rsc_0_9_tr_write_done(twiddle_rsc_0_9_tr_write_done),
      .twiddle_rsc_0_9_RREADY(twiddle_rsc_0_9_RREADY),
      .twiddle_rsc_0_9_RVALID(twiddle_rsc_0_9_RVALID),
      .twiddle_rsc_0_9_RUSER(twiddle_rsc_0_9_RUSER),
      .twiddle_rsc_0_9_RLAST(twiddle_rsc_0_9_RLAST),
      .twiddle_rsc_0_9_RRESP(twiddle_rsc_0_9_RRESP),
      .twiddle_rsc_0_9_RDATA(twiddle_rsc_0_9_RDATA),
      .twiddle_rsc_0_9_RID(twiddle_rsc_0_9_RID),
      .twiddle_rsc_0_9_ARREADY(twiddle_rsc_0_9_ARREADY),
      .twiddle_rsc_0_9_ARVALID(twiddle_rsc_0_9_ARVALID),
      .twiddle_rsc_0_9_ARUSER(twiddle_rsc_0_9_ARUSER),
      .twiddle_rsc_0_9_ARREGION(twiddle_rsc_0_9_ARREGION),
      .twiddle_rsc_0_9_ARQOS(twiddle_rsc_0_9_ARQOS),
      .twiddle_rsc_0_9_ARPROT(twiddle_rsc_0_9_ARPROT),
      .twiddle_rsc_0_9_ARCACHE(twiddle_rsc_0_9_ARCACHE),
      .twiddle_rsc_0_9_ARLOCK(twiddle_rsc_0_9_ARLOCK),
      .twiddle_rsc_0_9_ARBURST(twiddle_rsc_0_9_ARBURST),
      .twiddle_rsc_0_9_ARSIZE(twiddle_rsc_0_9_ARSIZE),
      .twiddle_rsc_0_9_ARLEN(twiddle_rsc_0_9_ARLEN),
      .twiddle_rsc_0_9_ARADDR(twiddle_rsc_0_9_ARADDR),
      .twiddle_rsc_0_9_ARID(twiddle_rsc_0_9_ARID),
      .twiddle_rsc_0_9_BREADY(twiddle_rsc_0_9_BREADY),
      .twiddle_rsc_0_9_BVALID(twiddle_rsc_0_9_BVALID),
      .twiddle_rsc_0_9_BUSER(twiddle_rsc_0_9_BUSER),
      .twiddle_rsc_0_9_BRESP(twiddle_rsc_0_9_BRESP),
      .twiddle_rsc_0_9_BID(twiddle_rsc_0_9_BID),
      .twiddle_rsc_0_9_WREADY(twiddle_rsc_0_9_WREADY),
      .twiddle_rsc_0_9_WVALID(twiddle_rsc_0_9_WVALID),
      .twiddle_rsc_0_9_WUSER(twiddle_rsc_0_9_WUSER),
      .twiddle_rsc_0_9_WLAST(twiddle_rsc_0_9_WLAST),
      .twiddle_rsc_0_9_WSTRB(twiddle_rsc_0_9_WSTRB),
      .twiddle_rsc_0_9_WDATA(twiddle_rsc_0_9_WDATA),
      .twiddle_rsc_0_9_AWREADY(twiddle_rsc_0_9_AWREADY),
      .twiddle_rsc_0_9_AWVALID(twiddle_rsc_0_9_AWVALID),
      .twiddle_rsc_0_9_AWUSER(twiddle_rsc_0_9_AWUSER),
      .twiddle_rsc_0_9_AWREGION(twiddle_rsc_0_9_AWREGION),
      .twiddle_rsc_0_9_AWQOS(twiddle_rsc_0_9_AWQOS),
      .twiddle_rsc_0_9_AWPROT(twiddle_rsc_0_9_AWPROT),
      .twiddle_rsc_0_9_AWCACHE(twiddle_rsc_0_9_AWCACHE),
      .twiddle_rsc_0_9_AWLOCK(twiddle_rsc_0_9_AWLOCK),
      .twiddle_rsc_0_9_AWBURST(twiddle_rsc_0_9_AWBURST),
      .twiddle_rsc_0_9_AWSIZE(twiddle_rsc_0_9_AWSIZE),
      .twiddle_rsc_0_9_AWLEN(twiddle_rsc_0_9_AWLEN),
      .twiddle_rsc_0_9_AWADDR(twiddle_rsc_0_9_AWADDR),
      .twiddle_rsc_0_9_AWID(twiddle_rsc_0_9_AWID),
      .twiddle_rsc_triosy_0_9_lz(twiddle_rsc_triosy_0_9_lz),
      .twiddle_rsc_0_10_s_tdone(twiddle_rsc_0_10_s_tdone),
      .twiddle_rsc_0_10_tr_write_done(twiddle_rsc_0_10_tr_write_done),
      .twiddle_rsc_0_10_RREADY(twiddle_rsc_0_10_RREADY),
      .twiddle_rsc_0_10_RVALID(twiddle_rsc_0_10_RVALID),
      .twiddle_rsc_0_10_RUSER(twiddle_rsc_0_10_RUSER),
      .twiddle_rsc_0_10_RLAST(twiddle_rsc_0_10_RLAST),
      .twiddle_rsc_0_10_RRESP(twiddle_rsc_0_10_RRESP),
      .twiddle_rsc_0_10_RDATA(twiddle_rsc_0_10_RDATA),
      .twiddle_rsc_0_10_RID(twiddle_rsc_0_10_RID),
      .twiddle_rsc_0_10_ARREADY(twiddle_rsc_0_10_ARREADY),
      .twiddle_rsc_0_10_ARVALID(twiddle_rsc_0_10_ARVALID),
      .twiddle_rsc_0_10_ARUSER(twiddle_rsc_0_10_ARUSER),
      .twiddle_rsc_0_10_ARREGION(twiddle_rsc_0_10_ARREGION),
      .twiddle_rsc_0_10_ARQOS(twiddle_rsc_0_10_ARQOS),
      .twiddle_rsc_0_10_ARPROT(twiddle_rsc_0_10_ARPROT),
      .twiddle_rsc_0_10_ARCACHE(twiddle_rsc_0_10_ARCACHE),
      .twiddle_rsc_0_10_ARLOCK(twiddle_rsc_0_10_ARLOCK),
      .twiddle_rsc_0_10_ARBURST(twiddle_rsc_0_10_ARBURST),
      .twiddle_rsc_0_10_ARSIZE(twiddle_rsc_0_10_ARSIZE),
      .twiddle_rsc_0_10_ARLEN(twiddle_rsc_0_10_ARLEN),
      .twiddle_rsc_0_10_ARADDR(twiddle_rsc_0_10_ARADDR),
      .twiddle_rsc_0_10_ARID(twiddle_rsc_0_10_ARID),
      .twiddle_rsc_0_10_BREADY(twiddle_rsc_0_10_BREADY),
      .twiddle_rsc_0_10_BVALID(twiddle_rsc_0_10_BVALID),
      .twiddle_rsc_0_10_BUSER(twiddle_rsc_0_10_BUSER),
      .twiddle_rsc_0_10_BRESP(twiddle_rsc_0_10_BRESP),
      .twiddle_rsc_0_10_BID(twiddle_rsc_0_10_BID),
      .twiddle_rsc_0_10_WREADY(twiddle_rsc_0_10_WREADY),
      .twiddle_rsc_0_10_WVALID(twiddle_rsc_0_10_WVALID),
      .twiddle_rsc_0_10_WUSER(twiddle_rsc_0_10_WUSER),
      .twiddle_rsc_0_10_WLAST(twiddle_rsc_0_10_WLAST),
      .twiddle_rsc_0_10_WSTRB(twiddle_rsc_0_10_WSTRB),
      .twiddle_rsc_0_10_WDATA(twiddle_rsc_0_10_WDATA),
      .twiddle_rsc_0_10_AWREADY(twiddle_rsc_0_10_AWREADY),
      .twiddle_rsc_0_10_AWVALID(twiddle_rsc_0_10_AWVALID),
      .twiddle_rsc_0_10_AWUSER(twiddle_rsc_0_10_AWUSER),
      .twiddle_rsc_0_10_AWREGION(twiddle_rsc_0_10_AWREGION),
      .twiddle_rsc_0_10_AWQOS(twiddle_rsc_0_10_AWQOS),
      .twiddle_rsc_0_10_AWPROT(twiddle_rsc_0_10_AWPROT),
      .twiddle_rsc_0_10_AWCACHE(twiddle_rsc_0_10_AWCACHE),
      .twiddle_rsc_0_10_AWLOCK(twiddle_rsc_0_10_AWLOCK),
      .twiddle_rsc_0_10_AWBURST(twiddle_rsc_0_10_AWBURST),
      .twiddle_rsc_0_10_AWSIZE(twiddle_rsc_0_10_AWSIZE),
      .twiddle_rsc_0_10_AWLEN(twiddle_rsc_0_10_AWLEN),
      .twiddle_rsc_0_10_AWADDR(twiddle_rsc_0_10_AWADDR),
      .twiddle_rsc_0_10_AWID(twiddle_rsc_0_10_AWID),
      .twiddle_rsc_triosy_0_10_lz(twiddle_rsc_triosy_0_10_lz),
      .twiddle_rsc_0_11_s_tdone(twiddle_rsc_0_11_s_tdone),
      .twiddle_rsc_0_11_tr_write_done(twiddle_rsc_0_11_tr_write_done),
      .twiddle_rsc_0_11_RREADY(twiddle_rsc_0_11_RREADY),
      .twiddle_rsc_0_11_RVALID(twiddle_rsc_0_11_RVALID),
      .twiddle_rsc_0_11_RUSER(twiddle_rsc_0_11_RUSER),
      .twiddle_rsc_0_11_RLAST(twiddle_rsc_0_11_RLAST),
      .twiddle_rsc_0_11_RRESP(twiddle_rsc_0_11_RRESP),
      .twiddle_rsc_0_11_RDATA(twiddle_rsc_0_11_RDATA),
      .twiddle_rsc_0_11_RID(twiddle_rsc_0_11_RID),
      .twiddle_rsc_0_11_ARREADY(twiddle_rsc_0_11_ARREADY),
      .twiddle_rsc_0_11_ARVALID(twiddle_rsc_0_11_ARVALID),
      .twiddle_rsc_0_11_ARUSER(twiddle_rsc_0_11_ARUSER),
      .twiddle_rsc_0_11_ARREGION(twiddle_rsc_0_11_ARREGION),
      .twiddle_rsc_0_11_ARQOS(twiddle_rsc_0_11_ARQOS),
      .twiddle_rsc_0_11_ARPROT(twiddle_rsc_0_11_ARPROT),
      .twiddle_rsc_0_11_ARCACHE(twiddle_rsc_0_11_ARCACHE),
      .twiddle_rsc_0_11_ARLOCK(twiddle_rsc_0_11_ARLOCK),
      .twiddle_rsc_0_11_ARBURST(twiddle_rsc_0_11_ARBURST),
      .twiddle_rsc_0_11_ARSIZE(twiddle_rsc_0_11_ARSIZE),
      .twiddle_rsc_0_11_ARLEN(twiddle_rsc_0_11_ARLEN),
      .twiddle_rsc_0_11_ARADDR(twiddle_rsc_0_11_ARADDR),
      .twiddle_rsc_0_11_ARID(twiddle_rsc_0_11_ARID),
      .twiddle_rsc_0_11_BREADY(twiddle_rsc_0_11_BREADY),
      .twiddle_rsc_0_11_BVALID(twiddle_rsc_0_11_BVALID),
      .twiddle_rsc_0_11_BUSER(twiddle_rsc_0_11_BUSER),
      .twiddle_rsc_0_11_BRESP(twiddle_rsc_0_11_BRESP),
      .twiddle_rsc_0_11_BID(twiddle_rsc_0_11_BID),
      .twiddle_rsc_0_11_WREADY(twiddle_rsc_0_11_WREADY),
      .twiddle_rsc_0_11_WVALID(twiddle_rsc_0_11_WVALID),
      .twiddle_rsc_0_11_WUSER(twiddle_rsc_0_11_WUSER),
      .twiddle_rsc_0_11_WLAST(twiddle_rsc_0_11_WLAST),
      .twiddle_rsc_0_11_WSTRB(twiddle_rsc_0_11_WSTRB),
      .twiddle_rsc_0_11_WDATA(twiddle_rsc_0_11_WDATA),
      .twiddle_rsc_0_11_AWREADY(twiddle_rsc_0_11_AWREADY),
      .twiddle_rsc_0_11_AWVALID(twiddle_rsc_0_11_AWVALID),
      .twiddle_rsc_0_11_AWUSER(twiddle_rsc_0_11_AWUSER),
      .twiddle_rsc_0_11_AWREGION(twiddle_rsc_0_11_AWREGION),
      .twiddle_rsc_0_11_AWQOS(twiddle_rsc_0_11_AWQOS),
      .twiddle_rsc_0_11_AWPROT(twiddle_rsc_0_11_AWPROT),
      .twiddle_rsc_0_11_AWCACHE(twiddle_rsc_0_11_AWCACHE),
      .twiddle_rsc_0_11_AWLOCK(twiddle_rsc_0_11_AWLOCK),
      .twiddle_rsc_0_11_AWBURST(twiddle_rsc_0_11_AWBURST),
      .twiddle_rsc_0_11_AWSIZE(twiddle_rsc_0_11_AWSIZE),
      .twiddle_rsc_0_11_AWLEN(twiddle_rsc_0_11_AWLEN),
      .twiddle_rsc_0_11_AWADDR(twiddle_rsc_0_11_AWADDR),
      .twiddle_rsc_0_11_AWID(twiddle_rsc_0_11_AWID),
      .twiddle_rsc_triosy_0_11_lz(twiddle_rsc_triosy_0_11_lz),
      .twiddle_rsc_0_12_s_tdone(twiddle_rsc_0_12_s_tdone),
      .twiddle_rsc_0_12_tr_write_done(twiddle_rsc_0_12_tr_write_done),
      .twiddle_rsc_0_12_RREADY(twiddle_rsc_0_12_RREADY),
      .twiddle_rsc_0_12_RVALID(twiddle_rsc_0_12_RVALID),
      .twiddle_rsc_0_12_RUSER(twiddle_rsc_0_12_RUSER),
      .twiddle_rsc_0_12_RLAST(twiddle_rsc_0_12_RLAST),
      .twiddle_rsc_0_12_RRESP(twiddle_rsc_0_12_RRESP),
      .twiddle_rsc_0_12_RDATA(twiddle_rsc_0_12_RDATA),
      .twiddle_rsc_0_12_RID(twiddle_rsc_0_12_RID),
      .twiddle_rsc_0_12_ARREADY(twiddle_rsc_0_12_ARREADY),
      .twiddle_rsc_0_12_ARVALID(twiddle_rsc_0_12_ARVALID),
      .twiddle_rsc_0_12_ARUSER(twiddle_rsc_0_12_ARUSER),
      .twiddle_rsc_0_12_ARREGION(twiddle_rsc_0_12_ARREGION),
      .twiddle_rsc_0_12_ARQOS(twiddle_rsc_0_12_ARQOS),
      .twiddle_rsc_0_12_ARPROT(twiddle_rsc_0_12_ARPROT),
      .twiddle_rsc_0_12_ARCACHE(twiddle_rsc_0_12_ARCACHE),
      .twiddle_rsc_0_12_ARLOCK(twiddle_rsc_0_12_ARLOCK),
      .twiddle_rsc_0_12_ARBURST(twiddle_rsc_0_12_ARBURST),
      .twiddle_rsc_0_12_ARSIZE(twiddle_rsc_0_12_ARSIZE),
      .twiddle_rsc_0_12_ARLEN(twiddle_rsc_0_12_ARLEN),
      .twiddle_rsc_0_12_ARADDR(twiddle_rsc_0_12_ARADDR),
      .twiddle_rsc_0_12_ARID(twiddle_rsc_0_12_ARID),
      .twiddle_rsc_0_12_BREADY(twiddle_rsc_0_12_BREADY),
      .twiddle_rsc_0_12_BVALID(twiddle_rsc_0_12_BVALID),
      .twiddle_rsc_0_12_BUSER(twiddle_rsc_0_12_BUSER),
      .twiddle_rsc_0_12_BRESP(twiddle_rsc_0_12_BRESP),
      .twiddle_rsc_0_12_BID(twiddle_rsc_0_12_BID),
      .twiddle_rsc_0_12_WREADY(twiddle_rsc_0_12_WREADY),
      .twiddle_rsc_0_12_WVALID(twiddle_rsc_0_12_WVALID),
      .twiddle_rsc_0_12_WUSER(twiddle_rsc_0_12_WUSER),
      .twiddle_rsc_0_12_WLAST(twiddle_rsc_0_12_WLAST),
      .twiddle_rsc_0_12_WSTRB(twiddle_rsc_0_12_WSTRB),
      .twiddle_rsc_0_12_WDATA(twiddle_rsc_0_12_WDATA),
      .twiddle_rsc_0_12_AWREADY(twiddle_rsc_0_12_AWREADY),
      .twiddle_rsc_0_12_AWVALID(twiddle_rsc_0_12_AWVALID),
      .twiddle_rsc_0_12_AWUSER(twiddle_rsc_0_12_AWUSER),
      .twiddle_rsc_0_12_AWREGION(twiddle_rsc_0_12_AWREGION),
      .twiddle_rsc_0_12_AWQOS(twiddle_rsc_0_12_AWQOS),
      .twiddle_rsc_0_12_AWPROT(twiddle_rsc_0_12_AWPROT),
      .twiddle_rsc_0_12_AWCACHE(twiddle_rsc_0_12_AWCACHE),
      .twiddle_rsc_0_12_AWLOCK(twiddle_rsc_0_12_AWLOCK),
      .twiddle_rsc_0_12_AWBURST(twiddle_rsc_0_12_AWBURST),
      .twiddle_rsc_0_12_AWSIZE(twiddle_rsc_0_12_AWSIZE),
      .twiddle_rsc_0_12_AWLEN(twiddle_rsc_0_12_AWLEN),
      .twiddle_rsc_0_12_AWADDR(twiddle_rsc_0_12_AWADDR),
      .twiddle_rsc_0_12_AWID(twiddle_rsc_0_12_AWID),
      .twiddle_rsc_triosy_0_12_lz(twiddle_rsc_triosy_0_12_lz),
      .twiddle_rsc_0_13_s_tdone(twiddle_rsc_0_13_s_tdone),
      .twiddle_rsc_0_13_tr_write_done(twiddle_rsc_0_13_tr_write_done),
      .twiddle_rsc_0_13_RREADY(twiddle_rsc_0_13_RREADY),
      .twiddle_rsc_0_13_RVALID(twiddle_rsc_0_13_RVALID),
      .twiddle_rsc_0_13_RUSER(twiddle_rsc_0_13_RUSER),
      .twiddle_rsc_0_13_RLAST(twiddle_rsc_0_13_RLAST),
      .twiddle_rsc_0_13_RRESP(twiddle_rsc_0_13_RRESP),
      .twiddle_rsc_0_13_RDATA(twiddle_rsc_0_13_RDATA),
      .twiddle_rsc_0_13_RID(twiddle_rsc_0_13_RID),
      .twiddle_rsc_0_13_ARREADY(twiddle_rsc_0_13_ARREADY),
      .twiddle_rsc_0_13_ARVALID(twiddle_rsc_0_13_ARVALID),
      .twiddle_rsc_0_13_ARUSER(twiddle_rsc_0_13_ARUSER),
      .twiddle_rsc_0_13_ARREGION(twiddle_rsc_0_13_ARREGION),
      .twiddle_rsc_0_13_ARQOS(twiddle_rsc_0_13_ARQOS),
      .twiddle_rsc_0_13_ARPROT(twiddle_rsc_0_13_ARPROT),
      .twiddle_rsc_0_13_ARCACHE(twiddle_rsc_0_13_ARCACHE),
      .twiddle_rsc_0_13_ARLOCK(twiddle_rsc_0_13_ARLOCK),
      .twiddle_rsc_0_13_ARBURST(twiddle_rsc_0_13_ARBURST),
      .twiddle_rsc_0_13_ARSIZE(twiddle_rsc_0_13_ARSIZE),
      .twiddle_rsc_0_13_ARLEN(twiddle_rsc_0_13_ARLEN),
      .twiddle_rsc_0_13_ARADDR(twiddle_rsc_0_13_ARADDR),
      .twiddle_rsc_0_13_ARID(twiddle_rsc_0_13_ARID),
      .twiddle_rsc_0_13_BREADY(twiddle_rsc_0_13_BREADY),
      .twiddle_rsc_0_13_BVALID(twiddle_rsc_0_13_BVALID),
      .twiddle_rsc_0_13_BUSER(twiddle_rsc_0_13_BUSER),
      .twiddle_rsc_0_13_BRESP(twiddle_rsc_0_13_BRESP),
      .twiddle_rsc_0_13_BID(twiddle_rsc_0_13_BID),
      .twiddle_rsc_0_13_WREADY(twiddle_rsc_0_13_WREADY),
      .twiddle_rsc_0_13_WVALID(twiddle_rsc_0_13_WVALID),
      .twiddle_rsc_0_13_WUSER(twiddle_rsc_0_13_WUSER),
      .twiddle_rsc_0_13_WLAST(twiddle_rsc_0_13_WLAST),
      .twiddle_rsc_0_13_WSTRB(twiddle_rsc_0_13_WSTRB),
      .twiddle_rsc_0_13_WDATA(twiddle_rsc_0_13_WDATA),
      .twiddle_rsc_0_13_AWREADY(twiddle_rsc_0_13_AWREADY),
      .twiddle_rsc_0_13_AWVALID(twiddle_rsc_0_13_AWVALID),
      .twiddle_rsc_0_13_AWUSER(twiddle_rsc_0_13_AWUSER),
      .twiddle_rsc_0_13_AWREGION(twiddle_rsc_0_13_AWREGION),
      .twiddle_rsc_0_13_AWQOS(twiddle_rsc_0_13_AWQOS),
      .twiddle_rsc_0_13_AWPROT(twiddle_rsc_0_13_AWPROT),
      .twiddle_rsc_0_13_AWCACHE(twiddle_rsc_0_13_AWCACHE),
      .twiddle_rsc_0_13_AWLOCK(twiddle_rsc_0_13_AWLOCK),
      .twiddle_rsc_0_13_AWBURST(twiddle_rsc_0_13_AWBURST),
      .twiddle_rsc_0_13_AWSIZE(twiddle_rsc_0_13_AWSIZE),
      .twiddle_rsc_0_13_AWLEN(twiddle_rsc_0_13_AWLEN),
      .twiddle_rsc_0_13_AWADDR(twiddle_rsc_0_13_AWADDR),
      .twiddle_rsc_0_13_AWID(twiddle_rsc_0_13_AWID),
      .twiddle_rsc_triosy_0_13_lz(twiddle_rsc_triosy_0_13_lz),
      .twiddle_rsc_0_14_s_tdone(twiddle_rsc_0_14_s_tdone),
      .twiddle_rsc_0_14_tr_write_done(twiddle_rsc_0_14_tr_write_done),
      .twiddle_rsc_0_14_RREADY(twiddle_rsc_0_14_RREADY),
      .twiddle_rsc_0_14_RVALID(twiddle_rsc_0_14_RVALID),
      .twiddle_rsc_0_14_RUSER(twiddle_rsc_0_14_RUSER),
      .twiddle_rsc_0_14_RLAST(twiddle_rsc_0_14_RLAST),
      .twiddle_rsc_0_14_RRESP(twiddle_rsc_0_14_RRESP),
      .twiddle_rsc_0_14_RDATA(twiddle_rsc_0_14_RDATA),
      .twiddle_rsc_0_14_RID(twiddle_rsc_0_14_RID),
      .twiddle_rsc_0_14_ARREADY(twiddle_rsc_0_14_ARREADY),
      .twiddle_rsc_0_14_ARVALID(twiddle_rsc_0_14_ARVALID),
      .twiddle_rsc_0_14_ARUSER(twiddle_rsc_0_14_ARUSER),
      .twiddle_rsc_0_14_ARREGION(twiddle_rsc_0_14_ARREGION),
      .twiddle_rsc_0_14_ARQOS(twiddle_rsc_0_14_ARQOS),
      .twiddle_rsc_0_14_ARPROT(twiddle_rsc_0_14_ARPROT),
      .twiddle_rsc_0_14_ARCACHE(twiddle_rsc_0_14_ARCACHE),
      .twiddle_rsc_0_14_ARLOCK(twiddle_rsc_0_14_ARLOCK),
      .twiddle_rsc_0_14_ARBURST(twiddle_rsc_0_14_ARBURST),
      .twiddle_rsc_0_14_ARSIZE(twiddle_rsc_0_14_ARSIZE),
      .twiddle_rsc_0_14_ARLEN(twiddle_rsc_0_14_ARLEN),
      .twiddle_rsc_0_14_ARADDR(twiddle_rsc_0_14_ARADDR),
      .twiddle_rsc_0_14_ARID(twiddle_rsc_0_14_ARID),
      .twiddle_rsc_0_14_BREADY(twiddle_rsc_0_14_BREADY),
      .twiddle_rsc_0_14_BVALID(twiddle_rsc_0_14_BVALID),
      .twiddle_rsc_0_14_BUSER(twiddle_rsc_0_14_BUSER),
      .twiddle_rsc_0_14_BRESP(twiddle_rsc_0_14_BRESP),
      .twiddle_rsc_0_14_BID(twiddle_rsc_0_14_BID),
      .twiddle_rsc_0_14_WREADY(twiddle_rsc_0_14_WREADY),
      .twiddle_rsc_0_14_WVALID(twiddle_rsc_0_14_WVALID),
      .twiddle_rsc_0_14_WUSER(twiddle_rsc_0_14_WUSER),
      .twiddle_rsc_0_14_WLAST(twiddle_rsc_0_14_WLAST),
      .twiddle_rsc_0_14_WSTRB(twiddle_rsc_0_14_WSTRB),
      .twiddle_rsc_0_14_WDATA(twiddle_rsc_0_14_WDATA),
      .twiddle_rsc_0_14_AWREADY(twiddle_rsc_0_14_AWREADY),
      .twiddle_rsc_0_14_AWVALID(twiddle_rsc_0_14_AWVALID),
      .twiddle_rsc_0_14_AWUSER(twiddle_rsc_0_14_AWUSER),
      .twiddle_rsc_0_14_AWREGION(twiddle_rsc_0_14_AWREGION),
      .twiddle_rsc_0_14_AWQOS(twiddle_rsc_0_14_AWQOS),
      .twiddle_rsc_0_14_AWPROT(twiddle_rsc_0_14_AWPROT),
      .twiddle_rsc_0_14_AWCACHE(twiddle_rsc_0_14_AWCACHE),
      .twiddle_rsc_0_14_AWLOCK(twiddle_rsc_0_14_AWLOCK),
      .twiddle_rsc_0_14_AWBURST(twiddle_rsc_0_14_AWBURST),
      .twiddle_rsc_0_14_AWSIZE(twiddle_rsc_0_14_AWSIZE),
      .twiddle_rsc_0_14_AWLEN(twiddle_rsc_0_14_AWLEN),
      .twiddle_rsc_0_14_AWADDR(twiddle_rsc_0_14_AWADDR),
      .twiddle_rsc_0_14_AWID(twiddle_rsc_0_14_AWID),
      .twiddle_rsc_triosy_0_14_lz(twiddle_rsc_triosy_0_14_lz),
      .twiddle_rsc_0_15_s_tdone(twiddle_rsc_0_15_s_tdone),
      .twiddle_rsc_0_15_tr_write_done(twiddle_rsc_0_15_tr_write_done),
      .twiddle_rsc_0_15_RREADY(twiddle_rsc_0_15_RREADY),
      .twiddle_rsc_0_15_RVALID(twiddle_rsc_0_15_RVALID),
      .twiddle_rsc_0_15_RUSER(twiddle_rsc_0_15_RUSER),
      .twiddle_rsc_0_15_RLAST(twiddle_rsc_0_15_RLAST),
      .twiddle_rsc_0_15_RRESP(twiddle_rsc_0_15_RRESP),
      .twiddle_rsc_0_15_RDATA(twiddle_rsc_0_15_RDATA),
      .twiddle_rsc_0_15_RID(twiddle_rsc_0_15_RID),
      .twiddle_rsc_0_15_ARREADY(twiddle_rsc_0_15_ARREADY),
      .twiddle_rsc_0_15_ARVALID(twiddle_rsc_0_15_ARVALID),
      .twiddle_rsc_0_15_ARUSER(twiddle_rsc_0_15_ARUSER),
      .twiddle_rsc_0_15_ARREGION(twiddle_rsc_0_15_ARREGION),
      .twiddle_rsc_0_15_ARQOS(twiddle_rsc_0_15_ARQOS),
      .twiddle_rsc_0_15_ARPROT(twiddle_rsc_0_15_ARPROT),
      .twiddle_rsc_0_15_ARCACHE(twiddle_rsc_0_15_ARCACHE),
      .twiddle_rsc_0_15_ARLOCK(twiddle_rsc_0_15_ARLOCK),
      .twiddle_rsc_0_15_ARBURST(twiddle_rsc_0_15_ARBURST),
      .twiddle_rsc_0_15_ARSIZE(twiddle_rsc_0_15_ARSIZE),
      .twiddle_rsc_0_15_ARLEN(twiddle_rsc_0_15_ARLEN),
      .twiddle_rsc_0_15_ARADDR(twiddle_rsc_0_15_ARADDR),
      .twiddle_rsc_0_15_ARID(twiddle_rsc_0_15_ARID),
      .twiddle_rsc_0_15_BREADY(twiddle_rsc_0_15_BREADY),
      .twiddle_rsc_0_15_BVALID(twiddle_rsc_0_15_BVALID),
      .twiddle_rsc_0_15_BUSER(twiddle_rsc_0_15_BUSER),
      .twiddle_rsc_0_15_BRESP(twiddle_rsc_0_15_BRESP),
      .twiddle_rsc_0_15_BID(twiddle_rsc_0_15_BID),
      .twiddle_rsc_0_15_WREADY(twiddle_rsc_0_15_WREADY),
      .twiddle_rsc_0_15_WVALID(twiddle_rsc_0_15_WVALID),
      .twiddle_rsc_0_15_WUSER(twiddle_rsc_0_15_WUSER),
      .twiddle_rsc_0_15_WLAST(twiddle_rsc_0_15_WLAST),
      .twiddle_rsc_0_15_WSTRB(twiddle_rsc_0_15_WSTRB),
      .twiddle_rsc_0_15_WDATA(twiddle_rsc_0_15_WDATA),
      .twiddle_rsc_0_15_AWREADY(twiddle_rsc_0_15_AWREADY),
      .twiddle_rsc_0_15_AWVALID(twiddle_rsc_0_15_AWVALID),
      .twiddle_rsc_0_15_AWUSER(twiddle_rsc_0_15_AWUSER),
      .twiddle_rsc_0_15_AWREGION(twiddle_rsc_0_15_AWREGION),
      .twiddle_rsc_0_15_AWQOS(twiddle_rsc_0_15_AWQOS),
      .twiddle_rsc_0_15_AWPROT(twiddle_rsc_0_15_AWPROT),
      .twiddle_rsc_0_15_AWCACHE(twiddle_rsc_0_15_AWCACHE),
      .twiddle_rsc_0_15_AWLOCK(twiddle_rsc_0_15_AWLOCK),
      .twiddle_rsc_0_15_AWBURST(twiddle_rsc_0_15_AWBURST),
      .twiddle_rsc_0_15_AWSIZE(twiddle_rsc_0_15_AWSIZE),
      .twiddle_rsc_0_15_AWLEN(twiddle_rsc_0_15_AWLEN),
      .twiddle_rsc_0_15_AWADDR(twiddle_rsc_0_15_AWADDR),
      .twiddle_rsc_0_15_AWID(twiddle_rsc_0_15_AWID),
      .twiddle_rsc_triosy_0_15_lz(twiddle_rsc_triosy_0_15_lz),
      .twiddle_h_rsc_0_0_s_tdone(twiddle_h_rsc_0_0_s_tdone),
      .twiddle_h_rsc_0_0_tr_write_done(twiddle_h_rsc_0_0_tr_write_done),
      .twiddle_h_rsc_0_0_RREADY(twiddle_h_rsc_0_0_RREADY),
      .twiddle_h_rsc_0_0_RVALID(twiddle_h_rsc_0_0_RVALID),
      .twiddle_h_rsc_0_0_RUSER(twiddle_h_rsc_0_0_RUSER),
      .twiddle_h_rsc_0_0_RLAST(twiddle_h_rsc_0_0_RLAST),
      .twiddle_h_rsc_0_0_RRESP(twiddle_h_rsc_0_0_RRESP),
      .twiddle_h_rsc_0_0_RDATA(twiddle_h_rsc_0_0_RDATA),
      .twiddle_h_rsc_0_0_RID(twiddle_h_rsc_0_0_RID),
      .twiddle_h_rsc_0_0_ARREADY(twiddle_h_rsc_0_0_ARREADY),
      .twiddle_h_rsc_0_0_ARVALID(twiddle_h_rsc_0_0_ARVALID),
      .twiddle_h_rsc_0_0_ARUSER(twiddle_h_rsc_0_0_ARUSER),
      .twiddle_h_rsc_0_0_ARREGION(twiddle_h_rsc_0_0_ARREGION),
      .twiddle_h_rsc_0_0_ARQOS(twiddle_h_rsc_0_0_ARQOS),
      .twiddle_h_rsc_0_0_ARPROT(twiddle_h_rsc_0_0_ARPROT),
      .twiddle_h_rsc_0_0_ARCACHE(twiddle_h_rsc_0_0_ARCACHE),
      .twiddle_h_rsc_0_0_ARLOCK(twiddle_h_rsc_0_0_ARLOCK),
      .twiddle_h_rsc_0_0_ARBURST(twiddle_h_rsc_0_0_ARBURST),
      .twiddle_h_rsc_0_0_ARSIZE(twiddle_h_rsc_0_0_ARSIZE),
      .twiddle_h_rsc_0_0_ARLEN(twiddle_h_rsc_0_0_ARLEN),
      .twiddle_h_rsc_0_0_ARADDR(twiddle_h_rsc_0_0_ARADDR),
      .twiddle_h_rsc_0_0_ARID(twiddle_h_rsc_0_0_ARID),
      .twiddle_h_rsc_0_0_BREADY(twiddle_h_rsc_0_0_BREADY),
      .twiddle_h_rsc_0_0_BVALID(twiddle_h_rsc_0_0_BVALID),
      .twiddle_h_rsc_0_0_BUSER(twiddle_h_rsc_0_0_BUSER),
      .twiddle_h_rsc_0_0_BRESP(twiddle_h_rsc_0_0_BRESP),
      .twiddle_h_rsc_0_0_BID(twiddle_h_rsc_0_0_BID),
      .twiddle_h_rsc_0_0_WREADY(twiddle_h_rsc_0_0_WREADY),
      .twiddle_h_rsc_0_0_WVALID(twiddle_h_rsc_0_0_WVALID),
      .twiddle_h_rsc_0_0_WUSER(twiddle_h_rsc_0_0_WUSER),
      .twiddle_h_rsc_0_0_WLAST(twiddle_h_rsc_0_0_WLAST),
      .twiddle_h_rsc_0_0_WSTRB(twiddle_h_rsc_0_0_WSTRB),
      .twiddle_h_rsc_0_0_WDATA(twiddle_h_rsc_0_0_WDATA),
      .twiddle_h_rsc_0_0_AWREADY(twiddle_h_rsc_0_0_AWREADY),
      .twiddle_h_rsc_0_0_AWVALID(twiddle_h_rsc_0_0_AWVALID),
      .twiddle_h_rsc_0_0_AWUSER(twiddle_h_rsc_0_0_AWUSER),
      .twiddle_h_rsc_0_0_AWREGION(twiddle_h_rsc_0_0_AWREGION),
      .twiddle_h_rsc_0_0_AWQOS(twiddle_h_rsc_0_0_AWQOS),
      .twiddle_h_rsc_0_0_AWPROT(twiddle_h_rsc_0_0_AWPROT),
      .twiddle_h_rsc_0_0_AWCACHE(twiddle_h_rsc_0_0_AWCACHE),
      .twiddle_h_rsc_0_0_AWLOCK(twiddle_h_rsc_0_0_AWLOCK),
      .twiddle_h_rsc_0_0_AWBURST(twiddle_h_rsc_0_0_AWBURST),
      .twiddle_h_rsc_0_0_AWSIZE(twiddle_h_rsc_0_0_AWSIZE),
      .twiddle_h_rsc_0_0_AWLEN(twiddle_h_rsc_0_0_AWLEN),
      .twiddle_h_rsc_0_0_AWADDR(twiddle_h_rsc_0_0_AWADDR),
      .twiddle_h_rsc_0_0_AWID(twiddle_h_rsc_0_0_AWID),
      .twiddle_h_rsc_triosy_0_0_lz(twiddle_h_rsc_triosy_0_0_lz),
      .twiddle_h_rsc_0_1_s_tdone(twiddle_h_rsc_0_1_s_tdone),
      .twiddle_h_rsc_0_1_tr_write_done(twiddle_h_rsc_0_1_tr_write_done),
      .twiddle_h_rsc_0_1_RREADY(twiddle_h_rsc_0_1_RREADY),
      .twiddle_h_rsc_0_1_RVALID(twiddle_h_rsc_0_1_RVALID),
      .twiddle_h_rsc_0_1_RUSER(twiddle_h_rsc_0_1_RUSER),
      .twiddle_h_rsc_0_1_RLAST(twiddle_h_rsc_0_1_RLAST),
      .twiddle_h_rsc_0_1_RRESP(twiddle_h_rsc_0_1_RRESP),
      .twiddle_h_rsc_0_1_RDATA(twiddle_h_rsc_0_1_RDATA),
      .twiddle_h_rsc_0_1_RID(twiddle_h_rsc_0_1_RID),
      .twiddle_h_rsc_0_1_ARREADY(twiddle_h_rsc_0_1_ARREADY),
      .twiddle_h_rsc_0_1_ARVALID(twiddle_h_rsc_0_1_ARVALID),
      .twiddle_h_rsc_0_1_ARUSER(twiddle_h_rsc_0_1_ARUSER),
      .twiddle_h_rsc_0_1_ARREGION(twiddle_h_rsc_0_1_ARREGION),
      .twiddle_h_rsc_0_1_ARQOS(twiddle_h_rsc_0_1_ARQOS),
      .twiddle_h_rsc_0_1_ARPROT(twiddle_h_rsc_0_1_ARPROT),
      .twiddle_h_rsc_0_1_ARCACHE(twiddle_h_rsc_0_1_ARCACHE),
      .twiddle_h_rsc_0_1_ARLOCK(twiddle_h_rsc_0_1_ARLOCK),
      .twiddle_h_rsc_0_1_ARBURST(twiddle_h_rsc_0_1_ARBURST),
      .twiddle_h_rsc_0_1_ARSIZE(twiddle_h_rsc_0_1_ARSIZE),
      .twiddle_h_rsc_0_1_ARLEN(twiddle_h_rsc_0_1_ARLEN),
      .twiddle_h_rsc_0_1_ARADDR(twiddle_h_rsc_0_1_ARADDR),
      .twiddle_h_rsc_0_1_ARID(twiddle_h_rsc_0_1_ARID),
      .twiddle_h_rsc_0_1_BREADY(twiddle_h_rsc_0_1_BREADY),
      .twiddle_h_rsc_0_1_BVALID(twiddle_h_rsc_0_1_BVALID),
      .twiddle_h_rsc_0_1_BUSER(twiddle_h_rsc_0_1_BUSER),
      .twiddle_h_rsc_0_1_BRESP(twiddle_h_rsc_0_1_BRESP),
      .twiddle_h_rsc_0_1_BID(twiddle_h_rsc_0_1_BID),
      .twiddle_h_rsc_0_1_WREADY(twiddle_h_rsc_0_1_WREADY),
      .twiddle_h_rsc_0_1_WVALID(twiddle_h_rsc_0_1_WVALID),
      .twiddle_h_rsc_0_1_WUSER(twiddle_h_rsc_0_1_WUSER),
      .twiddle_h_rsc_0_1_WLAST(twiddle_h_rsc_0_1_WLAST),
      .twiddle_h_rsc_0_1_WSTRB(twiddle_h_rsc_0_1_WSTRB),
      .twiddle_h_rsc_0_1_WDATA(twiddle_h_rsc_0_1_WDATA),
      .twiddle_h_rsc_0_1_AWREADY(twiddle_h_rsc_0_1_AWREADY),
      .twiddle_h_rsc_0_1_AWVALID(twiddle_h_rsc_0_1_AWVALID),
      .twiddle_h_rsc_0_1_AWUSER(twiddle_h_rsc_0_1_AWUSER),
      .twiddle_h_rsc_0_1_AWREGION(twiddle_h_rsc_0_1_AWREGION),
      .twiddle_h_rsc_0_1_AWQOS(twiddle_h_rsc_0_1_AWQOS),
      .twiddle_h_rsc_0_1_AWPROT(twiddle_h_rsc_0_1_AWPROT),
      .twiddle_h_rsc_0_1_AWCACHE(twiddle_h_rsc_0_1_AWCACHE),
      .twiddle_h_rsc_0_1_AWLOCK(twiddle_h_rsc_0_1_AWLOCK),
      .twiddle_h_rsc_0_1_AWBURST(twiddle_h_rsc_0_1_AWBURST),
      .twiddle_h_rsc_0_1_AWSIZE(twiddle_h_rsc_0_1_AWSIZE),
      .twiddle_h_rsc_0_1_AWLEN(twiddle_h_rsc_0_1_AWLEN),
      .twiddle_h_rsc_0_1_AWADDR(twiddle_h_rsc_0_1_AWADDR),
      .twiddle_h_rsc_0_1_AWID(twiddle_h_rsc_0_1_AWID),
      .twiddle_h_rsc_triosy_0_1_lz(twiddle_h_rsc_triosy_0_1_lz),
      .twiddle_h_rsc_0_2_s_tdone(twiddle_h_rsc_0_2_s_tdone),
      .twiddle_h_rsc_0_2_tr_write_done(twiddle_h_rsc_0_2_tr_write_done),
      .twiddle_h_rsc_0_2_RREADY(twiddle_h_rsc_0_2_RREADY),
      .twiddle_h_rsc_0_2_RVALID(twiddle_h_rsc_0_2_RVALID),
      .twiddle_h_rsc_0_2_RUSER(twiddle_h_rsc_0_2_RUSER),
      .twiddle_h_rsc_0_2_RLAST(twiddle_h_rsc_0_2_RLAST),
      .twiddle_h_rsc_0_2_RRESP(twiddle_h_rsc_0_2_RRESP),
      .twiddle_h_rsc_0_2_RDATA(twiddle_h_rsc_0_2_RDATA),
      .twiddle_h_rsc_0_2_RID(twiddle_h_rsc_0_2_RID),
      .twiddle_h_rsc_0_2_ARREADY(twiddle_h_rsc_0_2_ARREADY),
      .twiddle_h_rsc_0_2_ARVALID(twiddle_h_rsc_0_2_ARVALID),
      .twiddle_h_rsc_0_2_ARUSER(twiddle_h_rsc_0_2_ARUSER),
      .twiddle_h_rsc_0_2_ARREGION(twiddle_h_rsc_0_2_ARREGION),
      .twiddle_h_rsc_0_2_ARQOS(twiddle_h_rsc_0_2_ARQOS),
      .twiddle_h_rsc_0_2_ARPROT(twiddle_h_rsc_0_2_ARPROT),
      .twiddle_h_rsc_0_2_ARCACHE(twiddle_h_rsc_0_2_ARCACHE),
      .twiddle_h_rsc_0_2_ARLOCK(twiddle_h_rsc_0_2_ARLOCK),
      .twiddle_h_rsc_0_2_ARBURST(twiddle_h_rsc_0_2_ARBURST),
      .twiddle_h_rsc_0_2_ARSIZE(twiddle_h_rsc_0_2_ARSIZE),
      .twiddle_h_rsc_0_2_ARLEN(twiddle_h_rsc_0_2_ARLEN),
      .twiddle_h_rsc_0_2_ARADDR(twiddle_h_rsc_0_2_ARADDR),
      .twiddle_h_rsc_0_2_ARID(twiddle_h_rsc_0_2_ARID),
      .twiddle_h_rsc_0_2_BREADY(twiddle_h_rsc_0_2_BREADY),
      .twiddle_h_rsc_0_2_BVALID(twiddle_h_rsc_0_2_BVALID),
      .twiddle_h_rsc_0_2_BUSER(twiddle_h_rsc_0_2_BUSER),
      .twiddle_h_rsc_0_2_BRESP(twiddle_h_rsc_0_2_BRESP),
      .twiddle_h_rsc_0_2_BID(twiddle_h_rsc_0_2_BID),
      .twiddle_h_rsc_0_2_WREADY(twiddle_h_rsc_0_2_WREADY),
      .twiddle_h_rsc_0_2_WVALID(twiddle_h_rsc_0_2_WVALID),
      .twiddle_h_rsc_0_2_WUSER(twiddle_h_rsc_0_2_WUSER),
      .twiddle_h_rsc_0_2_WLAST(twiddle_h_rsc_0_2_WLAST),
      .twiddle_h_rsc_0_2_WSTRB(twiddle_h_rsc_0_2_WSTRB),
      .twiddle_h_rsc_0_2_WDATA(twiddle_h_rsc_0_2_WDATA),
      .twiddle_h_rsc_0_2_AWREADY(twiddle_h_rsc_0_2_AWREADY),
      .twiddle_h_rsc_0_2_AWVALID(twiddle_h_rsc_0_2_AWVALID),
      .twiddle_h_rsc_0_2_AWUSER(twiddle_h_rsc_0_2_AWUSER),
      .twiddle_h_rsc_0_2_AWREGION(twiddle_h_rsc_0_2_AWREGION),
      .twiddle_h_rsc_0_2_AWQOS(twiddle_h_rsc_0_2_AWQOS),
      .twiddle_h_rsc_0_2_AWPROT(twiddle_h_rsc_0_2_AWPROT),
      .twiddle_h_rsc_0_2_AWCACHE(twiddle_h_rsc_0_2_AWCACHE),
      .twiddle_h_rsc_0_2_AWLOCK(twiddle_h_rsc_0_2_AWLOCK),
      .twiddle_h_rsc_0_2_AWBURST(twiddle_h_rsc_0_2_AWBURST),
      .twiddle_h_rsc_0_2_AWSIZE(twiddle_h_rsc_0_2_AWSIZE),
      .twiddle_h_rsc_0_2_AWLEN(twiddle_h_rsc_0_2_AWLEN),
      .twiddle_h_rsc_0_2_AWADDR(twiddle_h_rsc_0_2_AWADDR),
      .twiddle_h_rsc_0_2_AWID(twiddle_h_rsc_0_2_AWID),
      .twiddle_h_rsc_triosy_0_2_lz(twiddle_h_rsc_triosy_0_2_lz),
      .twiddle_h_rsc_0_3_s_tdone(twiddle_h_rsc_0_3_s_tdone),
      .twiddle_h_rsc_0_3_tr_write_done(twiddle_h_rsc_0_3_tr_write_done),
      .twiddle_h_rsc_0_3_RREADY(twiddle_h_rsc_0_3_RREADY),
      .twiddle_h_rsc_0_3_RVALID(twiddle_h_rsc_0_3_RVALID),
      .twiddle_h_rsc_0_3_RUSER(twiddle_h_rsc_0_3_RUSER),
      .twiddle_h_rsc_0_3_RLAST(twiddle_h_rsc_0_3_RLAST),
      .twiddle_h_rsc_0_3_RRESP(twiddle_h_rsc_0_3_RRESP),
      .twiddle_h_rsc_0_3_RDATA(twiddle_h_rsc_0_3_RDATA),
      .twiddle_h_rsc_0_3_RID(twiddle_h_rsc_0_3_RID),
      .twiddle_h_rsc_0_3_ARREADY(twiddle_h_rsc_0_3_ARREADY),
      .twiddle_h_rsc_0_3_ARVALID(twiddle_h_rsc_0_3_ARVALID),
      .twiddle_h_rsc_0_3_ARUSER(twiddle_h_rsc_0_3_ARUSER),
      .twiddle_h_rsc_0_3_ARREGION(twiddle_h_rsc_0_3_ARREGION),
      .twiddle_h_rsc_0_3_ARQOS(twiddle_h_rsc_0_3_ARQOS),
      .twiddle_h_rsc_0_3_ARPROT(twiddle_h_rsc_0_3_ARPROT),
      .twiddle_h_rsc_0_3_ARCACHE(twiddle_h_rsc_0_3_ARCACHE),
      .twiddle_h_rsc_0_3_ARLOCK(twiddle_h_rsc_0_3_ARLOCK),
      .twiddle_h_rsc_0_3_ARBURST(twiddle_h_rsc_0_3_ARBURST),
      .twiddle_h_rsc_0_3_ARSIZE(twiddle_h_rsc_0_3_ARSIZE),
      .twiddle_h_rsc_0_3_ARLEN(twiddle_h_rsc_0_3_ARLEN),
      .twiddle_h_rsc_0_3_ARADDR(twiddle_h_rsc_0_3_ARADDR),
      .twiddle_h_rsc_0_3_ARID(twiddle_h_rsc_0_3_ARID),
      .twiddle_h_rsc_0_3_BREADY(twiddle_h_rsc_0_3_BREADY),
      .twiddle_h_rsc_0_3_BVALID(twiddle_h_rsc_0_3_BVALID),
      .twiddle_h_rsc_0_3_BUSER(twiddle_h_rsc_0_3_BUSER),
      .twiddle_h_rsc_0_3_BRESP(twiddle_h_rsc_0_3_BRESP),
      .twiddle_h_rsc_0_3_BID(twiddle_h_rsc_0_3_BID),
      .twiddle_h_rsc_0_3_WREADY(twiddle_h_rsc_0_3_WREADY),
      .twiddle_h_rsc_0_3_WVALID(twiddle_h_rsc_0_3_WVALID),
      .twiddle_h_rsc_0_3_WUSER(twiddle_h_rsc_0_3_WUSER),
      .twiddle_h_rsc_0_3_WLAST(twiddle_h_rsc_0_3_WLAST),
      .twiddle_h_rsc_0_3_WSTRB(twiddle_h_rsc_0_3_WSTRB),
      .twiddle_h_rsc_0_3_WDATA(twiddle_h_rsc_0_3_WDATA),
      .twiddle_h_rsc_0_3_AWREADY(twiddle_h_rsc_0_3_AWREADY),
      .twiddle_h_rsc_0_3_AWVALID(twiddle_h_rsc_0_3_AWVALID),
      .twiddle_h_rsc_0_3_AWUSER(twiddle_h_rsc_0_3_AWUSER),
      .twiddle_h_rsc_0_3_AWREGION(twiddle_h_rsc_0_3_AWREGION),
      .twiddle_h_rsc_0_3_AWQOS(twiddle_h_rsc_0_3_AWQOS),
      .twiddle_h_rsc_0_3_AWPROT(twiddle_h_rsc_0_3_AWPROT),
      .twiddle_h_rsc_0_3_AWCACHE(twiddle_h_rsc_0_3_AWCACHE),
      .twiddle_h_rsc_0_3_AWLOCK(twiddle_h_rsc_0_3_AWLOCK),
      .twiddle_h_rsc_0_3_AWBURST(twiddle_h_rsc_0_3_AWBURST),
      .twiddle_h_rsc_0_3_AWSIZE(twiddle_h_rsc_0_3_AWSIZE),
      .twiddle_h_rsc_0_3_AWLEN(twiddle_h_rsc_0_3_AWLEN),
      .twiddle_h_rsc_0_3_AWADDR(twiddle_h_rsc_0_3_AWADDR),
      .twiddle_h_rsc_0_3_AWID(twiddle_h_rsc_0_3_AWID),
      .twiddle_h_rsc_triosy_0_3_lz(twiddle_h_rsc_triosy_0_3_lz),
      .twiddle_h_rsc_0_4_s_tdone(twiddle_h_rsc_0_4_s_tdone),
      .twiddle_h_rsc_0_4_tr_write_done(twiddle_h_rsc_0_4_tr_write_done),
      .twiddle_h_rsc_0_4_RREADY(twiddle_h_rsc_0_4_RREADY),
      .twiddle_h_rsc_0_4_RVALID(twiddle_h_rsc_0_4_RVALID),
      .twiddle_h_rsc_0_4_RUSER(twiddle_h_rsc_0_4_RUSER),
      .twiddle_h_rsc_0_4_RLAST(twiddle_h_rsc_0_4_RLAST),
      .twiddle_h_rsc_0_4_RRESP(twiddle_h_rsc_0_4_RRESP),
      .twiddle_h_rsc_0_4_RDATA(twiddle_h_rsc_0_4_RDATA),
      .twiddle_h_rsc_0_4_RID(twiddle_h_rsc_0_4_RID),
      .twiddle_h_rsc_0_4_ARREADY(twiddle_h_rsc_0_4_ARREADY),
      .twiddle_h_rsc_0_4_ARVALID(twiddle_h_rsc_0_4_ARVALID),
      .twiddle_h_rsc_0_4_ARUSER(twiddle_h_rsc_0_4_ARUSER),
      .twiddle_h_rsc_0_4_ARREGION(twiddle_h_rsc_0_4_ARREGION),
      .twiddle_h_rsc_0_4_ARQOS(twiddle_h_rsc_0_4_ARQOS),
      .twiddle_h_rsc_0_4_ARPROT(twiddle_h_rsc_0_4_ARPROT),
      .twiddle_h_rsc_0_4_ARCACHE(twiddle_h_rsc_0_4_ARCACHE),
      .twiddle_h_rsc_0_4_ARLOCK(twiddle_h_rsc_0_4_ARLOCK),
      .twiddle_h_rsc_0_4_ARBURST(twiddle_h_rsc_0_4_ARBURST),
      .twiddle_h_rsc_0_4_ARSIZE(twiddle_h_rsc_0_4_ARSIZE),
      .twiddle_h_rsc_0_4_ARLEN(twiddle_h_rsc_0_4_ARLEN),
      .twiddle_h_rsc_0_4_ARADDR(twiddle_h_rsc_0_4_ARADDR),
      .twiddle_h_rsc_0_4_ARID(twiddle_h_rsc_0_4_ARID),
      .twiddle_h_rsc_0_4_BREADY(twiddle_h_rsc_0_4_BREADY),
      .twiddle_h_rsc_0_4_BVALID(twiddle_h_rsc_0_4_BVALID),
      .twiddle_h_rsc_0_4_BUSER(twiddle_h_rsc_0_4_BUSER),
      .twiddle_h_rsc_0_4_BRESP(twiddle_h_rsc_0_4_BRESP),
      .twiddle_h_rsc_0_4_BID(twiddle_h_rsc_0_4_BID),
      .twiddle_h_rsc_0_4_WREADY(twiddle_h_rsc_0_4_WREADY),
      .twiddle_h_rsc_0_4_WVALID(twiddle_h_rsc_0_4_WVALID),
      .twiddle_h_rsc_0_4_WUSER(twiddle_h_rsc_0_4_WUSER),
      .twiddle_h_rsc_0_4_WLAST(twiddle_h_rsc_0_4_WLAST),
      .twiddle_h_rsc_0_4_WSTRB(twiddle_h_rsc_0_4_WSTRB),
      .twiddle_h_rsc_0_4_WDATA(twiddle_h_rsc_0_4_WDATA),
      .twiddle_h_rsc_0_4_AWREADY(twiddle_h_rsc_0_4_AWREADY),
      .twiddle_h_rsc_0_4_AWVALID(twiddle_h_rsc_0_4_AWVALID),
      .twiddle_h_rsc_0_4_AWUSER(twiddle_h_rsc_0_4_AWUSER),
      .twiddle_h_rsc_0_4_AWREGION(twiddle_h_rsc_0_4_AWREGION),
      .twiddle_h_rsc_0_4_AWQOS(twiddle_h_rsc_0_4_AWQOS),
      .twiddle_h_rsc_0_4_AWPROT(twiddle_h_rsc_0_4_AWPROT),
      .twiddle_h_rsc_0_4_AWCACHE(twiddle_h_rsc_0_4_AWCACHE),
      .twiddle_h_rsc_0_4_AWLOCK(twiddle_h_rsc_0_4_AWLOCK),
      .twiddle_h_rsc_0_4_AWBURST(twiddle_h_rsc_0_4_AWBURST),
      .twiddle_h_rsc_0_4_AWSIZE(twiddle_h_rsc_0_4_AWSIZE),
      .twiddle_h_rsc_0_4_AWLEN(twiddle_h_rsc_0_4_AWLEN),
      .twiddle_h_rsc_0_4_AWADDR(twiddle_h_rsc_0_4_AWADDR),
      .twiddle_h_rsc_0_4_AWID(twiddle_h_rsc_0_4_AWID),
      .twiddle_h_rsc_triosy_0_4_lz(twiddle_h_rsc_triosy_0_4_lz),
      .twiddle_h_rsc_0_5_s_tdone(twiddle_h_rsc_0_5_s_tdone),
      .twiddle_h_rsc_0_5_tr_write_done(twiddle_h_rsc_0_5_tr_write_done),
      .twiddle_h_rsc_0_5_RREADY(twiddle_h_rsc_0_5_RREADY),
      .twiddle_h_rsc_0_5_RVALID(twiddle_h_rsc_0_5_RVALID),
      .twiddle_h_rsc_0_5_RUSER(twiddle_h_rsc_0_5_RUSER),
      .twiddle_h_rsc_0_5_RLAST(twiddle_h_rsc_0_5_RLAST),
      .twiddle_h_rsc_0_5_RRESP(twiddle_h_rsc_0_5_RRESP),
      .twiddle_h_rsc_0_5_RDATA(twiddle_h_rsc_0_5_RDATA),
      .twiddle_h_rsc_0_5_RID(twiddle_h_rsc_0_5_RID),
      .twiddle_h_rsc_0_5_ARREADY(twiddle_h_rsc_0_5_ARREADY),
      .twiddle_h_rsc_0_5_ARVALID(twiddle_h_rsc_0_5_ARVALID),
      .twiddle_h_rsc_0_5_ARUSER(twiddle_h_rsc_0_5_ARUSER),
      .twiddle_h_rsc_0_5_ARREGION(twiddle_h_rsc_0_5_ARREGION),
      .twiddle_h_rsc_0_5_ARQOS(twiddle_h_rsc_0_5_ARQOS),
      .twiddle_h_rsc_0_5_ARPROT(twiddle_h_rsc_0_5_ARPROT),
      .twiddle_h_rsc_0_5_ARCACHE(twiddle_h_rsc_0_5_ARCACHE),
      .twiddle_h_rsc_0_5_ARLOCK(twiddle_h_rsc_0_5_ARLOCK),
      .twiddle_h_rsc_0_5_ARBURST(twiddle_h_rsc_0_5_ARBURST),
      .twiddle_h_rsc_0_5_ARSIZE(twiddle_h_rsc_0_5_ARSIZE),
      .twiddle_h_rsc_0_5_ARLEN(twiddle_h_rsc_0_5_ARLEN),
      .twiddle_h_rsc_0_5_ARADDR(twiddle_h_rsc_0_5_ARADDR),
      .twiddle_h_rsc_0_5_ARID(twiddle_h_rsc_0_5_ARID),
      .twiddle_h_rsc_0_5_BREADY(twiddle_h_rsc_0_5_BREADY),
      .twiddle_h_rsc_0_5_BVALID(twiddle_h_rsc_0_5_BVALID),
      .twiddle_h_rsc_0_5_BUSER(twiddle_h_rsc_0_5_BUSER),
      .twiddle_h_rsc_0_5_BRESP(twiddle_h_rsc_0_5_BRESP),
      .twiddle_h_rsc_0_5_BID(twiddle_h_rsc_0_5_BID),
      .twiddle_h_rsc_0_5_WREADY(twiddle_h_rsc_0_5_WREADY),
      .twiddle_h_rsc_0_5_WVALID(twiddle_h_rsc_0_5_WVALID),
      .twiddle_h_rsc_0_5_WUSER(twiddle_h_rsc_0_5_WUSER),
      .twiddle_h_rsc_0_5_WLAST(twiddle_h_rsc_0_5_WLAST),
      .twiddle_h_rsc_0_5_WSTRB(twiddle_h_rsc_0_5_WSTRB),
      .twiddle_h_rsc_0_5_WDATA(twiddle_h_rsc_0_5_WDATA),
      .twiddle_h_rsc_0_5_AWREADY(twiddle_h_rsc_0_5_AWREADY),
      .twiddle_h_rsc_0_5_AWVALID(twiddle_h_rsc_0_5_AWVALID),
      .twiddle_h_rsc_0_5_AWUSER(twiddle_h_rsc_0_5_AWUSER),
      .twiddle_h_rsc_0_5_AWREGION(twiddle_h_rsc_0_5_AWREGION),
      .twiddle_h_rsc_0_5_AWQOS(twiddle_h_rsc_0_5_AWQOS),
      .twiddle_h_rsc_0_5_AWPROT(twiddle_h_rsc_0_5_AWPROT),
      .twiddle_h_rsc_0_5_AWCACHE(twiddle_h_rsc_0_5_AWCACHE),
      .twiddle_h_rsc_0_5_AWLOCK(twiddle_h_rsc_0_5_AWLOCK),
      .twiddle_h_rsc_0_5_AWBURST(twiddle_h_rsc_0_5_AWBURST),
      .twiddle_h_rsc_0_5_AWSIZE(twiddle_h_rsc_0_5_AWSIZE),
      .twiddle_h_rsc_0_5_AWLEN(twiddle_h_rsc_0_5_AWLEN),
      .twiddle_h_rsc_0_5_AWADDR(twiddle_h_rsc_0_5_AWADDR),
      .twiddle_h_rsc_0_5_AWID(twiddle_h_rsc_0_5_AWID),
      .twiddle_h_rsc_triosy_0_5_lz(twiddle_h_rsc_triosy_0_5_lz),
      .twiddle_h_rsc_0_6_s_tdone(twiddle_h_rsc_0_6_s_tdone),
      .twiddle_h_rsc_0_6_tr_write_done(twiddle_h_rsc_0_6_tr_write_done),
      .twiddle_h_rsc_0_6_RREADY(twiddle_h_rsc_0_6_RREADY),
      .twiddle_h_rsc_0_6_RVALID(twiddle_h_rsc_0_6_RVALID),
      .twiddle_h_rsc_0_6_RUSER(twiddle_h_rsc_0_6_RUSER),
      .twiddle_h_rsc_0_6_RLAST(twiddle_h_rsc_0_6_RLAST),
      .twiddle_h_rsc_0_6_RRESP(twiddle_h_rsc_0_6_RRESP),
      .twiddle_h_rsc_0_6_RDATA(twiddle_h_rsc_0_6_RDATA),
      .twiddle_h_rsc_0_6_RID(twiddle_h_rsc_0_6_RID),
      .twiddle_h_rsc_0_6_ARREADY(twiddle_h_rsc_0_6_ARREADY),
      .twiddle_h_rsc_0_6_ARVALID(twiddle_h_rsc_0_6_ARVALID),
      .twiddle_h_rsc_0_6_ARUSER(twiddle_h_rsc_0_6_ARUSER),
      .twiddle_h_rsc_0_6_ARREGION(twiddle_h_rsc_0_6_ARREGION),
      .twiddle_h_rsc_0_6_ARQOS(twiddle_h_rsc_0_6_ARQOS),
      .twiddle_h_rsc_0_6_ARPROT(twiddle_h_rsc_0_6_ARPROT),
      .twiddle_h_rsc_0_6_ARCACHE(twiddle_h_rsc_0_6_ARCACHE),
      .twiddle_h_rsc_0_6_ARLOCK(twiddle_h_rsc_0_6_ARLOCK),
      .twiddle_h_rsc_0_6_ARBURST(twiddle_h_rsc_0_6_ARBURST),
      .twiddle_h_rsc_0_6_ARSIZE(twiddle_h_rsc_0_6_ARSIZE),
      .twiddle_h_rsc_0_6_ARLEN(twiddle_h_rsc_0_6_ARLEN),
      .twiddle_h_rsc_0_6_ARADDR(twiddle_h_rsc_0_6_ARADDR),
      .twiddle_h_rsc_0_6_ARID(twiddle_h_rsc_0_6_ARID),
      .twiddle_h_rsc_0_6_BREADY(twiddle_h_rsc_0_6_BREADY),
      .twiddle_h_rsc_0_6_BVALID(twiddle_h_rsc_0_6_BVALID),
      .twiddle_h_rsc_0_6_BUSER(twiddle_h_rsc_0_6_BUSER),
      .twiddle_h_rsc_0_6_BRESP(twiddle_h_rsc_0_6_BRESP),
      .twiddle_h_rsc_0_6_BID(twiddle_h_rsc_0_6_BID),
      .twiddle_h_rsc_0_6_WREADY(twiddle_h_rsc_0_6_WREADY),
      .twiddle_h_rsc_0_6_WVALID(twiddle_h_rsc_0_6_WVALID),
      .twiddle_h_rsc_0_6_WUSER(twiddle_h_rsc_0_6_WUSER),
      .twiddle_h_rsc_0_6_WLAST(twiddle_h_rsc_0_6_WLAST),
      .twiddle_h_rsc_0_6_WSTRB(twiddle_h_rsc_0_6_WSTRB),
      .twiddle_h_rsc_0_6_WDATA(twiddle_h_rsc_0_6_WDATA),
      .twiddle_h_rsc_0_6_AWREADY(twiddle_h_rsc_0_6_AWREADY),
      .twiddle_h_rsc_0_6_AWVALID(twiddle_h_rsc_0_6_AWVALID),
      .twiddle_h_rsc_0_6_AWUSER(twiddle_h_rsc_0_6_AWUSER),
      .twiddle_h_rsc_0_6_AWREGION(twiddle_h_rsc_0_6_AWREGION),
      .twiddle_h_rsc_0_6_AWQOS(twiddle_h_rsc_0_6_AWQOS),
      .twiddle_h_rsc_0_6_AWPROT(twiddle_h_rsc_0_6_AWPROT),
      .twiddle_h_rsc_0_6_AWCACHE(twiddle_h_rsc_0_6_AWCACHE),
      .twiddle_h_rsc_0_6_AWLOCK(twiddle_h_rsc_0_6_AWLOCK),
      .twiddle_h_rsc_0_6_AWBURST(twiddle_h_rsc_0_6_AWBURST),
      .twiddle_h_rsc_0_6_AWSIZE(twiddle_h_rsc_0_6_AWSIZE),
      .twiddle_h_rsc_0_6_AWLEN(twiddle_h_rsc_0_6_AWLEN),
      .twiddle_h_rsc_0_6_AWADDR(twiddle_h_rsc_0_6_AWADDR),
      .twiddle_h_rsc_0_6_AWID(twiddle_h_rsc_0_6_AWID),
      .twiddle_h_rsc_triosy_0_6_lz(twiddle_h_rsc_triosy_0_6_lz),
      .twiddle_h_rsc_0_7_s_tdone(twiddle_h_rsc_0_7_s_tdone),
      .twiddle_h_rsc_0_7_tr_write_done(twiddle_h_rsc_0_7_tr_write_done),
      .twiddle_h_rsc_0_7_RREADY(twiddle_h_rsc_0_7_RREADY),
      .twiddle_h_rsc_0_7_RVALID(twiddle_h_rsc_0_7_RVALID),
      .twiddle_h_rsc_0_7_RUSER(twiddle_h_rsc_0_7_RUSER),
      .twiddle_h_rsc_0_7_RLAST(twiddle_h_rsc_0_7_RLAST),
      .twiddle_h_rsc_0_7_RRESP(twiddle_h_rsc_0_7_RRESP),
      .twiddle_h_rsc_0_7_RDATA(twiddle_h_rsc_0_7_RDATA),
      .twiddle_h_rsc_0_7_RID(twiddle_h_rsc_0_7_RID),
      .twiddle_h_rsc_0_7_ARREADY(twiddle_h_rsc_0_7_ARREADY),
      .twiddle_h_rsc_0_7_ARVALID(twiddle_h_rsc_0_7_ARVALID),
      .twiddle_h_rsc_0_7_ARUSER(twiddle_h_rsc_0_7_ARUSER),
      .twiddle_h_rsc_0_7_ARREGION(twiddle_h_rsc_0_7_ARREGION),
      .twiddle_h_rsc_0_7_ARQOS(twiddle_h_rsc_0_7_ARQOS),
      .twiddle_h_rsc_0_7_ARPROT(twiddle_h_rsc_0_7_ARPROT),
      .twiddle_h_rsc_0_7_ARCACHE(twiddle_h_rsc_0_7_ARCACHE),
      .twiddle_h_rsc_0_7_ARLOCK(twiddle_h_rsc_0_7_ARLOCK),
      .twiddle_h_rsc_0_7_ARBURST(twiddle_h_rsc_0_7_ARBURST),
      .twiddle_h_rsc_0_7_ARSIZE(twiddle_h_rsc_0_7_ARSIZE),
      .twiddle_h_rsc_0_7_ARLEN(twiddle_h_rsc_0_7_ARLEN),
      .twiddle_h_rsc_0_7_ARADDR(twiddle_h_rsc_0_7_ARADDR),
      .twiddle_h_rsc_0_7_ARID(twiddle_h_rsc_0_7_ARID),
      .twiddle_h_rsc_0_7_BREADY(twiddle_h_rsc_0_7_BREADY),
      .twiddle_h_rsc_0_7_BVALID(twiddle_h_rsc_0_7_BVALID),
      .twiddle_h_rsc_0_7_BUSER(twiddle_h_rsc_0_7_BUSER),
      .twiddle_h_rsc_0_7_BRESP(twiddle_h_rsc_0_7_BRESP),
      .twiddle_h_rsc_0_7_BID(twiddle_h_rsc_0_7_BID),
      .twiddle_h_rsc_0_7_WREADY(twiddle_h_rsc_0_7_WREADY),
      .twiddle_h_rsc_0_7_WVALID(twiddle_h_rsc_0_7_WVALID),
      .twiddle_h_rsc_0_7_WUSER(twiddle_h_rsc_0_7_WUSER),
      .twiddle_h_rsc_0_7_WLAST(twiddle_h_rsc_0_7_WLAST),
      .twiddle_h_rsc_0_7_WSTRB(twiddle_h_rsc_0_7_WSTRB),
      .twiddle_h_rsc_0_7_WDATA(twiddle_h_rsc_0_7_WDATA),
      .twiddle_h_rsc_0_7_AWREADY(twiddle_h_rsc_0_7_AWREADY),
      .twiddle_h_rsc_0_7_AWVALID(twiddle_h_rsc_0_7_AWVALID),
      .twiddle_h_rsc_0_7_AWUSER(twiddle_h_rsc_0_7_AWUSER),
      .twiddle_h_rsc_0_7_AWREGION(twiddle_h_rsc_0_7_AWREGION),
      .twiddle_h_rsc_0_7_AWQOS(twiddle_h_rsc_0_7_AWQOS),
      .twiddle_h_rsc_0_7_AWPROT(twiddle_h_rsc_0_7_AWPROT),
      .twiddle_h_rsc_0_7_AWCACHE(twiddle_h_rsc_0_7_AWCACHE),
      .twiddle_h_rsc_0_7_AWLOCK(twiddle_h_rsc_0_7_AWLOCK),
      .twiddle_h_rsc_0_7_AWBURST(twiddle_h_rsc_0_7_AWBURST),
      .twiddle_h_rsc_0_7_AWSIZE(twiddle_h_rsc_0_7_AWSIZE),
      .twiddle_h_rsc_0_7_AWLEN(twiddle_h_rsc_0_7_AWLEN),
      .twiddle_h_rsc_0_7_AWADDR(twiddle_h_rsc_0_7_AWADDR),
      .twiddle_h_rsc_0_7_AWID(twiddle_h_rsc_0_7_AWID),
      .twiddle_h_rsc_triosy_0_7_lz(twiddle_h_rsc_triosy_0_7_lz),
      .twiddle_h_rsc_0_8_s_tdone(twiddle_h_rsc_0_8_s_tdone),
      .twiddle_h_rsc_0_8_tr_write_done(twiddle_h_rsc_0_8_tr_write_done),
      .twiddle_h_rsc_0_8_RREADY(twiddle_h_rsc_0_8_RREADY),
      .twiddle_h_rsc_0_8_RVALID(twiddle_h_rsc_0_8_RVALID),
      .twiddle_h_rsc_0_8_RUSER(twiddle_h_rsc_0_8_RUSER),
      .twiddle_h_rsc_0_8_RLAST(twiddle_h_rsc_0_8_RLAST),
      .twiddle_h_rsc_0_8_RRESP(twiddle_h_rsc_0_8_RRESP),
      .twiddle_h_rsc_0_8_RDATA(twiddle_h_rsc_0_8_RDATA),
      .twiddle_h_rsc_0_8_RID(twiddle_h_rsc_0_8_RID),
      .twiddle_h_rsc_0_8_ARREADY(twiddle_h_rsc_0_8_ARREADY),
      .twiddle_h_rsc_0_8_ARVALID(twiddle_h_rsc_0_8_ARVALID),
      .twiddle_h_rsc_0_8_ARUSER(twiddle_h_rsc_0_8_ARUSER),
      .twiddle_h_rsc_0_8_ARREGION(twiddle_h_rsc_0_8_ARREGION),
      .twiddle_h_rsc_0_8_ARQOS(twiddle_h_rsc_0_8_ARQOS),
      .twiddle_h_rsc_0_8_ARPROT(twiddle_h_rsc_0_8_ARPROT),
      .twiddle_h_rsc_0_8_ARCACHE(twiddle_h_rsc_0_8_ARCACHE),
      .twiddle_h_rsc_0_8_ARLOCK(twiddle_h_rsc_0_8_ARLOCK),
      .twiddle_h_rsc_0_8_ARBURST(twiddle_h_rsc_0_8_ARBURST),
      .twiddle_h_rsc_0_8_ARSIZE(twiddle_h_rsc_0_8_ARSIZE),
      .twiddle_h_rsc_0_8_ARLEN(twiddle_h_rsc_0_8_ARLEN),
      .twiddle_h_rsc_0_8_ARADDR(twiddle_h_rsc_0_8_ARADDR),
      .twiddle_h_rsc_0_8_ARID(twiddle_h_rsc_0_8_ARID),
      .twiddle_h_rsc_0_8_BREADY(twiddle_h_rsc_0_8_BREADY),
      .twiddle_h_rsc_0_8_BVALID(twiddle_h_rsc_0_8_BVALID),
      .twiddle_h_rsc_0_8_BUSER(twiddle_h_rsc_0_8_BUSER),
      .twiddle_h_rsc_0_8_BRESP(twiddle_h_rsc_0_8_BRESP),
      .twiddle_h_rsc_0_8_BID(twiddle_h_rsc_0_8_BID),
      .twiddle_h_rsc_0_8_WREADY(twiddle_h_rsc_0_8_WREADY),
      .twiddle_h_rsc_0_8_WVALID(twiddle_h_rsc_0_8_WVALID),
      .twiddle_h_rsc_0_8_WUSER(twiddle_h_rsc_0_8_WUSER),
      .twiddle_h_rsc_0_8_WLAST(twiddle_h_rsc_0_8_WLAST),
      .twiddle_h_rsc_0_8_WSTRB(twiddle_h_rsc_0_8_WSTRB),
      .twiddle_h_rsc_0_8_WDATA(twiddle_h_rsc_0_8_WDATA),
      .twiddle_h_rsc_0_8_AWREADY(twiddle_h_rsc_0_8_AWREADY),
      .twiddle_h_rsc_0_8_AWVALID(twiddle_h_rsc_0_8_AWVALID),
      .twiddle_h_rsc_0_8_AWUSER(twiddle_h_rsc_0_8_AWUSER),
      .twiddle_h_rsc_0_8_AWREGION(twiddle_h_rsc_0_8_AWREGION),
      .twiddle_h_rsc_0_8_AWQOS(twiddle_h_rsc_0_8_AWQOS),
      .twiddle_h_rsc_0_8_AWPROT(twiddle_h_rsc_0_8_AWPROT),
      .twiddle_h_rsc_0_8_AWCACHE(twiddle_h_rsc_0_8_AWCACHE),
      .twiddle_h_rsc_0_8_AWLOCK(twiddle_h_rsc_0_8_AWLOCK),
      .twiddle_h_rsc_0_8_AWBURST(twiddle_h_rsc_0_8_AWBURST),
      .twiddle_h_rsc_0_8_AWSIZE(twiddle_h_rsc_0_8_AWSIZE),
      .twiddle_h_rsc_0_8_AWLEN(twiddle_h_rsc_0_8_AWLEN),
      .twiddle_h_rsc_0_8_AWADDR(twiddle_h_rsc_0_8_AWADDR),
      .twiddle_h_rsc_0_8_AWID(twiddle_h_rsc_0_8_AWID),
      .twiddle_h_rsc_triosy_0_8_lz(twiddle_h_rsc_triosy_0_8_lz),
      .twiddle_h_rsc_0_9_s_tdone(twiddle_h_rsc_0_9_s_tdone),
      .twiddle_h_rsc_0_9_tr_write_done(twiddle_h_rsc_0_9_tr_write_done),
      .twiddle_h_rsc_0_9_RREADY(twiddle_h_rsc_0_9_RREADY),
      .twiddle_h_rsc_0_9_RVALID(twiddle_h_rsc_0_9_RVALID),
      .twiddle_h_rsc_0_9_RUSER(twiddle_h_rsc_0_9_RUSER),
      .twiddle_h_rsc_0_9_RLAST(twiddle_h_rsc_0_9_RLAST),
      .twiddle_h_rsc_0_9_RRESP(twiddle_h_rsc_0_9_RRESP),
      .twiddle_h_rsc_0_9_RDATA(twiddle_h_rsc_0_9_RDATA),
      .twiddle_h_rsc_0_9_RID(twiddle_h_rsc_0_9_RID),
      .twiddle_h_rsc_0_9_ARREADY(twiddle_h_rsc_0_9_ARREADY),
      .twiddle_h_rsc_0_9_ARVALID(twiddle_h_rsc_0_9_ARVALID),
      .twiddle_h_rsc_0_9_ARUSER(twiddle_h_rsc_0_9_ARUSER),
      .twiddle_h_rsc_0_9_ARREGION(twiddle_h_rsc_0_9_ARREGION),
      .twiddle_h_rsc_0_9_ARQOS(twiddle_h_rsc_0_9_ARQOS),
      .twiddle_h_rsc_0_9_ARPROT(twiddle_h_rsc_0_9_ARPROT),
      .twiddle_h_rsc_0_9_ARCACHE(twiddle_h_rsc_0_9_ARCACHE),
      .twiddle_h_rsc_0_9_ARLOCK(twiddle_h_rsc_0_9_ARLOCK),
      .twiddle_h_rsc_0_9_ARBURST(twiddle_h_rsc_0_9_ARBURST),
      .twiddle_h_rsc_0_9_ARSIZE(twiddle_h_rsc_0_9_ARSIZE),
      .twiddle_h_rsc_0_9_ARLEN(twiddle_h_rsc_0_9_ARLEN),
      .twiddle_h_rsc_0_9_ARADDR(twiddle_h_rsc_0_9_ARADDR),
      .twiddle_h_rsc_0_9_ARID(twiddle_h_rsc_0_9_ARID),
      .twiddle_h_rsc_0_9_BREADY(twiddle_h_rsc_0_9_BREADY),
      .twiddle_h_rsc_0_9_BVALID(twiddle_h_rsc_0_9_BVALID),
      .twiddle_h_rsc_0_9_BUSER(twiddle_h_rsc_0_9_BUSER),
      .twiddle_h_rsc_0_9_BRESP(twiddle_h_rsc_0_9_BRESP),
      .twiddle_h_rsc_0_9_BID(twiddle_h_rsc_0_9_BID),
      .twiddle_h_rsc_0_9_WREADY(twiddle_h_rsc_0_9_WREADY),
      .twiddle_h_rsc_0_9_WVALID(twiddle_h_rsc_0_9_WVALID),
      .twiddle_h_rsc_0_9_WUSER(twiddle_h_rsc_0_9_WUSER),
      .twiddle_h_rsc_0_9_WLAST(twiddle_h_rsc_0_9_WLAST),
      .twiddle_h_rsc_0_9_WSTRB(twiddle_h_rsc_0_9_WSTRB),
      .twiddle_h_rsc_0_9_WDATA(twiddle_h_rsc_0_9_WDATA),
      .twiddle_h_rsc_0_9_AWREADY(twiddle_h_rsc_0_9_AWREADY),
      .twiddle_h_rsc_0_9_AWVALID(twiddle_h_rsc_0_9_AWVALID),
      .twiddle_h_rsc_0_9_AWUSER(twiddle_h_rsc_0_9_AWUSER),
      .twiddle_h_rsc_0_9_AWREGION(twiddle_h_rsc_0_9_AWREGION),
      .twiddle_h_rsc_0_9_AWQOS(twiddle_h_rsc_0_9_AWQOS),
      .twiddle_h_rsc_0_9_AWPROT(twiddle_h_rsc_0_9_AWPROT),
      .twiddle_h_rsc_0_9_AWCACHE(twiddle_h_rsc_0_9_AWCACHE),
      .twiddle_h_rsc_0_9_AWLOCK(twiddle_h_rsc_0_9_AWLOCK),
      .twiddle_h_rsc_0_9_AWBURST(twiddle_h_rsc_0_9_AWBURST),
      .twiddle_h_rsc_0_9_AWSIZE(twiddle_h_rsc_0_9_AWSIZE),
      .twiddle_h_rsc_0_9_AWLEN(twiddle_h_rsc_0_9_AWLEN),
      .twiddle_h_rsc_0_9_AWADDR(twiddle_h_rsc_0_9_AWADDR),
      .twiddle_h_rsc_0_9_AWID(twiddle_h_rsc_0_9_AWID),
      .twiddle_h_rsc_triosy_0_9_lz(twiddle_h_rsc_triosy_0_9_lz),
      .twiddle_h_rsc_0_10_s_tdone(twiddle_h_rsc_0_10_s_tdone),
      .twiddle_h_rsc_0_10_tr_write_done(twiddle_h_rsc_0_10_tr_write_done),
      .twiddle_h_rsc_0_10_RREADY(twiddle_h_rsc_0_10_RREADY),
      .twiddle_h_rsc_0_10_RVALID(twiddle_h_rsc_0_10_RVALID),
      .twiddle_h_rsc_0_10_RUSER(twiddle_h_rsc_0_10_RUSER),
      .twiddle_h_rsc_0_10_RLAST(twiddle_h_rsc_0_10_RLAST),
      .twiddle_h_rsc_0_10_RRESP(twiddle_h_rsc_0_10_RRESP),
      .twiddle_h_rsc_0_10_RDATA(twiddle_h_rsc_0_10_RDATA),
      .twiddle_h_rsc_0_10_RID(twiddle_h_rsc_0_10_RID),
      .twiddle_h_rsc_0_10_ARREADY(twiddle_h_rsc_0_10_ARREADY),
      .twiddle_h_rsc_0_10_ARVALID(twiddle_h_rsc_0_10_ARVALID),
      .twiddle_h_rsc_0_10_ARUSER(twiddle_h_rsc_0_10_ARUSER),
      .twiddle_h_rsc_0_10_ARREGION(twiddle_h_rsc_0_10_ARREGION),
      .twiddle_h_rsc_0_10_ARQOS(twiddle_h_rsc_0_10_ARQOS),
      .twiddle_h_rsc_0_10_ARPROT(twiddle_h_rsc_0_10_ARPROT),
      .twiddle_h_rsc_0_10_ARCACHE(twiddle_h_rsc_0_10_ARCACHE),
      .twiddle_h_rsc_0_10_ARLOCK(twiddle_h_rsc_0_10_ARLOCK),
      .twiddle_h_rsc_0_10_ARBURST(twiddle_h_rsc_0_10_ARBURST),
      .twiddle_h_rsc_0_10_ARSIZE(twiddle_h_rsc_0_10_ARSIZE),
      .twiddle_h_rsc_0_10_ARLEN(twiddle_h_rsc_0_10_ARLEN),
      .twiddle_h_rsc_0_10_ARADDR(twiddle_h_rsc_0_10_ARADDR),
      .twiddle_h_rsc_0_10_ARID(twiddle_h_rsc_0_10_ARID),
      .twiddle_h_rsc_0_10_BREADY(twiddle_h_rsc_0_10_BREADY),
      .twiddle_h_rsc_0_10_BVALID(twiddle_h_rsc_0_10_BVALID),
      .twiddle_h_rsc_0_10_BUSER(twiddle_h_rsc_0_10_BUSER),
      .twiddle_h_rsc_0_10_BRESP(twiddle_h_rsc_0_10_BRESP),
      .twiddle_h_rsc_0_10_BID(twiddle_h_rsc_0_10_BID),
      .twiddle_h_rsc_0_10_WREADY(twiddle_h_rsc_0_10_WREADY),
      .twiddle_h_rsc_0_10_WVALID(twiddle_h_rsc_0_10_WVALID),
      .twiddle_h_rsc_0_10_WUSER(twiddle_h_rsc_0_10_WUSER),
      .twiddle_h_rsc_0_10_WLAST(twiddle_h_rsc_0_10_WLAST),
      .twiddle_h_rsc_0_10_WSTRB(twiddle_h_rsc_0_10_WSTRB),
      .twiddle_h_rsc_0_10_WDATA(twiddle_h_rsc_0_10_WDATA),
      .twiddle_h_rsc_0_10_AWREADY(twiddle_h_rsc_0_10_AWREADY),
      .twiddle_h_rsc_0_10_AWVALID(twiddle_h_rsc_0_10_AWVALID),
      .twiddle_h_rsc_0_10_AWUSER(twiddle_h_rsc_0_10_AWUSER),
      .twiddle_h_rsc_0_10_AWREGION(twiddle_h_rsc_0_10_AWREGION),
      .twiddle_h_rsc_0_10_AWQOS(twiddle_h_rsc_0_10_AWQOS),
      .twiddle_h_rsc_0_10_AWPROT(twiddle_h_rsc_0_10_AWPROT),
      .twiddle_h_rsc_0_10_AWCACHE(twiddle_h_rsc_0_10_AWCACHE),
      .twiddle_h_rsc_0_10_AWLOCK(twiddle_h_rsc_0_10_AWLOCK),
      .twiddle_h_rsc_0_10_AWBURST(twiddle_h_rsc_0_10_AWBURST),
      .twiddle_h_rsc_0_10_AWSIZE(twiddle_h_rsc_0_10_AWSIZE),
      .twiddle_h_rsc_0_10_AWLEN(twiddle_h_rsc_0_10_AWLEN),
      .twiddle_h_rsc_0_10_AWADDR(twiddle_h_rsc_0_10_AWADDR),
      .twiddle_h_rsc_0_10_AWID(twiddle_h_rsc_0_10_AWID),
      .twiddle_h_rsc_triosy_0_10_lz(twiddle_h_rsc_triosy_0_10_lz),
      .twiddle_h_rsc_0_11_s_tdone(twiddle_h_rsc_0_11_s_tdone),
      .twiddle_h_rsc_0_11_tr_write_done(twiddle_h_rsc_0_11_tr_write_done),
      .twiddle_h_rsc_0_11_RREADY(twiddle_h_rsc_0_11_RREADY),
      .twiddle_h_rsc_0_11_RVALID(twiddle_h_rsc_0_11_RVALID),
      .twiddle_h_rsc_0_11_RUSER(twiddle_h_rsc_0_11_RUSER),
      .twiddle_h_rsc_0_11_RLAST(twiddle_h_rsc_0_11_RLAST),
      .twiddle_h_rsc_0_11_RRESP(twiddle_h_rsc_0_11_RRESP),
      .twiddle_h_rsc_0_11_RDATA(twiddle_h_rsc_0_11_RDATA),
      .twiddle_h_rsc_0_11_RID(twiddle_h_rsc_0_11_RID),
      .twiddle_h_rsc_0_11_ARREADY(twiddle_h_rsc_0_11_ARREADY),
      .twiddle_h_rsc_0_11_ARVALID(twiddle_h_rsc_0_11_ARVALID),
      .twiddle_h_rsc_0_11_ARUSER(twiddle_h_rsc_0_11_ARUSER),
      .twiddle_h_rsc_0_11_ARREGION(twiddle_h_rsc_0_11_ARREGION),
      .twiddle_h_rsc_0_11_ARQOS(twiddle_h_rsc_0_11_ARQOS),
      .twiddle_h_rsc_0_11_ARPROT(twiddle_h_rsc_0_11_ARPROT),
      .twiddle_h_rsc_0_11_ARCACHE(twiddle_h_rsc_0_11_ARCACHE),
      .twiddle_h_rsc_0_11_ARLOCK(twiddle_h_rsc_0_11_ARLOCK),
      .twiddle_h_rsc_0_11_ARBURST(twiddle_h_rsc_0_11_ARBURST),
      .twiddle_h_rsc_0_11_ARSIZE(twiddle_h_rsc_0_11_ARSIZE),
      .twiddle_h_rsc_0_11_ARLEN(twiddle_h_rsc_0_11_ARLEN),
      .twiddle_h_rsc_0_11_ARADDR(twiddle_h_rsc_0_11_ARADDR),
      .twiddle_h_rsc_0_11_ARID(twiddle_h_rsc_0_11_ARID),
      .twiddle_h_rsc_0_11_BREADY(twiddle_h_rsc_0_11_BREADY),
      .twiddle_h_rsc_0_11_BVALID(twiddle_h_rsc_0_11_BVALID),
      .twiddle_h_rsc_0_11_BUSER(twiddle_h_rsc_0_11_BUSER),
      .twiddle_h_rsc_0_11_BRESP(twiddle_h_rsc_0_11_BRESP),
      .twiddle_h_rsc_0_11_BID(twiddle_h_rsc_0_11_BID),
      .twiddle_h_rsc_0_11_WREADY(twiddle_h_rsc_0_11_WREADY),
      .twiddle_h_rsc_0_11_WVALID(twiddle_h_rsc_0_11_WVALID),
      .twiddle_h_rsc_0_11_WUSER(twiddle_h_rsc_0_11_WUSER),
      .twiddle_h_rsc_0_11_WLAST(twiddle_h_rsc_0_11_WLAST),
      .twiddle_h_rsc_0_11_WSTRB(twiddle_h_rsc_0_11_WSTRB),
      .twiddle_h_rsc_0_11_WDATA(twiddle_h_rsc_0_11_WDATA),
      .twiddle_h_rsc_0_11_AWREADY(twiddle_h_rsc_0_11_AWREADY),
      .twiddle_h_rsc_0_11_AWVALID(twiddle_h_rsc_0_11_AWVALID),
      .twiddle_h_rsc_0_11_AWUSER(twiddle_h_rsc_0_11_AWUSER),
      .twiddle_h_rsc_0_11_AWREGION(twiddle_h_rsc_0_11_AWREGION),
      .twiddle_h_rsc_0_11_AWQOS(twiddle_h_rsc_0_11_AWQOS),
      .twiddle_h_rsc_0_11_AWPROT(twiddle_h_rsc_0_11_AWPROT),
      .twiddle_h_rsc_0_11_AWCACHE(twiddle_h_rsc_0_11_AWCACHE),
      .twiddle_h_rsc_0_11_AWLOCK(twiddle_h_rsc_0_11_AWLOCK),
      .twiddle_h_rsc_0_11_AWBURST(twiddle_h_rsc_0_11_AWBURST),
      .twiddle_h_rsc_0_11_AWSIZE(twiddle_h_rsc_0_11_AWSIZE),
      .twiddle_h_rsc_0_11_AWLEN(twiddle_h_rsc_0_11_AWLEN),
      .twiddle_h_rsc_0_11_AWADDR(twiddle_h_rsc_0_11_AWADDR),
      .twiddle_h_rsc_0_11_AWID(twiddle_h_rsc_0_11_AWID),
      .twiddle_h_rsc_triosy_0_11_lz(twiddle_h_rsc_triosy_0_11_lz),
      .twiddle_h_rsc_0_12_s_tdone(twiddle_h_rsc_0_12_s_tdone),
      .twiddle_h_rsc_0_12_tr_write_done(twiddle_h_rsc_0_12_tr_write_done),
      .twiddle_h_rsc_0_12_RREADY(twiddle_h_rsc_0_12_RREADY),
      .twiddle_h_rsc_0_12_RVALID(twiddle_h_rsc_0_12_RVALID),
      .twiddle_h_rsc_0_12_RUSER(twiddle_h_rsc_0_12_RUSER),
      .twiddle_h_rsc_0_12_RLAST(twiddle_h_rsc_0_12_RLAST),
      .twiddle_h_rsc_0_12_RRESP(twiddle_h_rsc_0_12_RRESP),
      .twiddle_h_rsc_0_12_RDATA(twiddle_h_rsc_0_12_RDATA),
      .twiddle_h_rsc_0_12_RID(twiddle_h_rsc_0_12_RID),
      .twiddle_h_rsc_0_12_ARREADY(twiddle_h_rsc_0_12_ARREADY),
      .twiddle_h_rsc_0_12_ARVALID(twiddle_h_rsc_0_12_ARVALID),
      .twiddle_h_rsc_0_12_ARUSER(twiddle_h_rsc_0_12_ARUSER),
      .twiddle_h_rsc_0_12_ARREGION(twiddle_h_rsc_0_12_ARREGION),
      .twiddle_h_rsc_0_12_ARQOS(twiddle_h_rsc_0_12_ARQOS),
      .twiddle_h_rsc_0_12_ARPROT(twiddle_h_rsc_0_12_ARPROT),
      .twiddle_h_rsc_0_12_ARCACHE(twiddle_h_rsc_0_12_ARCACHE),
      .twiddle_h_rsc_0_12_ARLOCK(twiddle_h_rsc_0_12_ARLOCK),
      .twiddle_h_rsc_0_12_ARBURST(twiddle_h_rsc_0_12_ARBURST),
      .twiddle_h_rsc_0_12_ARSIZE(twiddle_h_rsc_0_12_ARSIZE),
      .twiddle_h_rsc_0_12_ARLEN(twiddle_h_rsc_0_12_ARLEN),
      .twiddle_h_rsc_0_12_ARADDR(twiddle_h_rsc_0_12_ARADDR),
      .twiddle_h_rsc_0_12_ARID(twiddle_h_rsc_0_12_ARID),
      .twiddle_h_rsc_0_12_BREADY(twiddle_h_rsc_0_12_BREADY),
      .twiddle_h_rsc_0_12_BVALID(twiddle_h_rsc_0_12_BVALID),
      .twiddle_h_rsc_0_12_BUSER(twiddle_h_rsc_0_12_BUSER),
      .twiddle_h_rsc_0_12_BRESP(twiddle_h_rsc_0_12_BRESP),
      .twiddle_h_rsc_0_12_BID(twiddle_h_rsc_0_12_BID),
      .twiddle_h_rsc_0_12_WREADY(twiddle_h_rsc_0_12_WREADY),
      .twiddle_h_rsc_0_12_WVALID(twiddle_h_rsc_0_12_WVALID),
      .twiddle_h_rsc_0_12_WUSER(twiddle_h_rsc_0_12_WUSER),
      .twiddle_h_rsc_0_12_WLAST(twiddle_h_rsc_0_12_WLAST),
      .twiddle_h_rsc_0_12_WSTRB(twiddle_h_rsc_0_12_WSTRB),
      .twiddle_h_rsc_0_12_WDATA(twiddle_h_rsc_0_12_WDATA),
      .twiddle_h_rsc_0_12_AWREADY(twiddle_h_rsc_0_12_AWREADY),
      .twiddle_h_rsc_0_12_AWVALID(twiddle_h_rsc_0_12_AWVALID),
      .twiddle_h_rsc_0_12_AWUSER(twiddle_h_rsc_0_12_AWUSER),
      .twiddle_h_rsc_0_12_AWREGION(twiddle_h_rsc_0_12_AWREGION),
      .twiddle_h_rsc_0_12_AWQOS(twiddle_h_rsc_0_12_AWQOS),
      .twiddle_h_rsc_0_12_AWPROT(twiddle_h_rsc_0_12_AWPROT),
      .twiddle_h_rsc_0_12_AWCACHE(twiddle_h_rsc_0_12_AWCACHE),
      .twiddle_h_rsc_0_12_AWLOCK(twiddle_h_rsc_0_12_AWLOCK),
      .twiddle_h_rsc_0_12_AWBURST(twiddle_h_rsc_0_12_AWBURST),
      .twiddle_h_rsc_0_12_AWSIZE(twiddle_h_rsc_0_12_AWSIZE),
      .twiddle_h_rsc_0_12_AWLEN(twiddle_h_rsc_0_12_AWLEN),
      .twiddle_h_rsc_0_12_AWADDR(twiddle_h_rsc_0_12_AWADDR),
      .twiddle_h_rsc_0_12_AWID(twiddle_h_rsc_0_12_AWID),
      .twiddle_h_rsc_triosy_0_12_lz(twiddle_h_rsc_triosy_0_12_lz),
      .twiddle_h_rsc_0_13_s_tdone(twiddle_h_rsc_0_13_s_tdone),
      .twiddle_h_rsc_0_13_tr_write_done(twiddle_h_rsc_0_13_tr_write_done),
      .twiddle_h_rsc_0_13_RREADY(twiddle_h_rsc_0_13_RREADY),
      .twiddle_h_rsc_0_13_RVALID(twiddle_h_rsc_0_13_RVALID),
      .twiddle_h_rsc_0_13_RUSER(twiddle_h_rsc_0_13_RUSER),
      .twiddle_h_rsc_0_13_RLAST(twiddle_h_rsc_0_13_RLAST),
      .twiddle_h_rsc_0_13_RRESP(twiddle_h_rsc_0_13_RRESP),
      .twiddle_h_rsc_0_13_RDATA(twiddle_h_rsc_0_13_RDATA),
      .twiddle_h_rsc_0_13_RID(twiddle_h_rsc_0_13_RID),
      .twiddle_h_rsc_0_13_ARREADY(twiddle_h_rsc_0_13_ARREADY),
      .twiddle_h_rsc_0_13_ARVALID(twiddle_h_rsc_0_13_ARVALID),
      .twiddle_h_rsc_0_13_ARUSER(twiddle_h_rsc_0_13_ARUSER),
      .twiddle_h_rsc_0_13_ARREGION(twiddle_h_rsc_0_13_ARREGION),
      .twiddle_h_rsc_0_13_ARQOS(twiddle_h_rsc_0_13_ARQOS),
      .twiddle_h_rsc_0_13_ARPROT(twiddle_h_rsc_0_13_ARPROT),
      .twiddle_h_rsc_0_13_ARCACHE(twiddle_h_rsc_0_13_ARCACHE),
      .twiddle_h_rsc_0_13_ARLOCK(twiddle_h_rsc_0_13_ARLOCK),
      .twiddle_h_rsc_0_13_ARBURST(twiddle_h_rsc_0_13_ARBURST),
      .twiddle_h_rsc_0_13_ARSIZE(twiddle_h_rsc_0_13_ARSIZE),
      .twiddle_h_rsc_0_13_ARLEN(twiddle_h_rsc_0_13_ARLEN),
      .twiddle_h_rsc_0_13_ARADDR(twiddle_h_rsc_0_13_ARADDR),
      .twiddle_h_rsc_0_13_ARID(twiddle_h_rsc_0_13_ARID),
      .twiddle_h_rsc_0_13_BREADY(twiddle_h_rsc_0_13_BREADY),
      .twiddle_h_rsc_0_13_BVALID(twiddle_h_rsc_0_13_BVALID),
      .twiddle_h_rsc_0_13_BUSER(twiddle_h_rsc_0_13_BUSER),
      .twiddle_h_rsc_0_13_BRESP(twiddle_h_rsc_0_13_BRESP),
      .twiddle_h_rsc_0_13_BID(twiddle_h_rsc_0_13_BID),
      .twiddle_h_rsc_0_13_WREADY(twiddle_h_rsc_0_13_WREADY),
      .twiddle_h_rsc_0_13_WVALID(twiddle_h_rsc_0_13_WVALID),
      .twiddle_h_rsc_0_13_WUSER(twiddle_h_rsc_0_13_WUSER),
      .twiddle_h_rsc_0_13_WLAST(twiddle_h_rsc_0_13_WLAST),
      .twiddle_h_rsc_0_13_WSTRB(twiddle_h_rsc_0_13_WSTRB),
      .twiddle_h_rsc_0_13_WDATA(twiddle_h_rsc_0_13_WDATA),
      .twiddle_h_rsc_0_13_AWREADY(twiddle_h_rsc_0_13_AWREADY),
      .twiddle_h_rsc_0_13_AWVALID(twiddle_h_rsc_0_13_AWVALID),
      .twiddle_h_rsc_0_13_AWUSER(twiddle_h_rsc_0_13_AWUSER),
      .twiddle_h_rsc_0_13_AWREGION(twiddle_h_rsc_0_13_AWREGION),
      .twiddle_h_rsc_0_13_AWQOS(twiddle_h_rsc_0_13_AWQOS),
      .twiddle_h_rsc_0_13_AWPROT(twiddle_h_rsc_0_13_AWPROT),
      .twiddle_h_rsc_0_13_AWCACHE(twiddle_h_rsc_0_13_AWCACHE),
      .twiddle_h_rsc_0_13_AWLOCK(twiddle_h_rsc_0_13_AWLOCK),
      .twiddle_h_rsc_0_13_AWBURST(twiddle_h_rsc_0_13_AWBURST),
      .twiddle_h_rsc_0_13_AWSIZE(twiddle_h_rsc_0_13_AWSIZE),
      .twiddle_h_rsc_0_13_AWLEN(twiddle_h_rsc_0_13_AWLEN),
      .twiddle_h_rsc_0_13_AWADDR(twiddle_h_rsc_0_13_AWADDR),
      .twiddle_h_rsc_0_13_AWID(twiddle_h_rsc_0_13_AWID),
      .twiddle_h_rsc_triosy_0_13_lz(twiddle_h_rsc_triosy_0_13_lz),
      .twiddle_h_rsc_0_14_s_tdone(twiddle_h_rsc_0_14_s_tdone),
      .twiddle_h_rsc_0_14_tr_write_done(twiddle_h_rsc_0_14_tr_write_done),
      .twiddle_h_rsc_0_14_RREADY(twiddle_h_rsc_0_14_RREADY),
      .twiddle_h_rsc_0_14_RVALID(twiddle_h_rsc_0_14_RVALID),
      .twiddle_h_rsc_0_14_RUSER(twiddle_h_rsc_0_14_RUSER),
      .twiddle_h_rsc_0_14_RLAST(twiddle_h_rsc_0_14_RLAST),
      .twiddle_h_rsc_0_14_RRESP(twiddle_h_rsc_0_14_RRESP),
      .twiddle_h_rsc_0_14_RDATA(twiddle_h_rsc_0_14_RDATA),
      .twiddle_h_rsc_0_14_RID(twiddle_h_rsc_0_14_RID),
      .twiddle_h_rsc_0_14_ARREADY(twiddle_h_rsc_0_14_ARREADY),
      .twiddle_h_rsc_0_14_ARVALID(twiddle_h_rsc_0_14_ARVALID),
      .twiddle_h_rsc_0_14_ARUSER(twiddle_h_rsc_0_14_ARUSER),
      .twiddle_h_rsc_0_14_ARREGION(twiddle_h_rsc_0_14_ARREGION),
      .twiddle_h_rsc_0_14_ARQOS(twiddle_h_rsc_0_14_ARQOS),
      .twiddle_h_rsc_0_14_ARPROT(twiddle_h_rsc_0_14_ARPROT),
      .twiddle_h_rsc_0_14_ARCACHE(twiddle_h_rsc_0_14_ARCACHE),
      .twiddle_h_rsc_0_14_ARLOCK(twiddle_h_rsc_0_14_ARLOCK),
      .twiddle_h_rsc_0_14_ARBURST(twiddle_h_rsc_0_14_ARBURST),
      .twiddle_h_rsc_0_14_ARSIZE(twiddle_h_rsc_0_14_ARSIZE),
      .twiddle_h_rsc_0_14_ARLEN(twiddle_h_rsc_0_14_ARLEN),
      .twiddle_h_rsc_0_14_ARADDR(twiddle_h_rsc_0_14_ARADDR),
      .twiddle_h_rsc_0_14_ARID(twiddle_h_rsc_0_14_ARID),
      .twiddle_h_rsc_0_14_BREADY(twiddle_h_rsc_0_14_BREADY),
      .twiddle_h_rsc_0_14_BVALID(twiddle_h_rsc_0_14_BVALID),
      .twiddle_h_rsc_0_14_BUSER(twiddle_h_rsc_0_14_BUSER),
      .twiddle_h_rsc_0_14_BRESP(twiddle_h_rsc_0_14_BRESP),
      .twiddle_h_rsc_0_14_BID(twiddle_h_rsc_0_14_BID),
      .twiddle_h_rsc_0_14_WREADY(twiddle_h_rsc_0_14_WREADY),
      .twiddle_h_rsc_0_14_WVALID(twiddle_h_rsc_0_14_WVALID),
      .twiddle_h_rsc_0_14_WUSER(twiddle_h_rsc_0_14_WUSER),
      .twiddle_h_rsc_0_14_WLAST(twiddle_h_rsc_0_14_WLAST),
      .twiddle_h_rsc_0_14_WSTRB(twiddle_h_rsc_0_14_WSTRB),
      .twiddle_h_rsc_0_14_WDATA(twiddle_h_rsc_0_14_WDATA),
      .twiddle_h_rsc_0_14_AWREADY(twiddle_h_rsc_0_14_AWREADY),
      .twiddle_h_rsc_0_14_AWVALID(twiddle_h_rsc_0_14_AWVALID),
      .twiddle_h_rsc_0_14_AWUSER(twiddle_h_rsc_0_14_AWUSER),
      .twiddle_h_rsc_0_14_AWREGION(twiddle_h_rsc_0_14_AWREGION),
      .twiddle_h_rsc_0_14_AWQOS(twiddle_h_rsc_0_14_AWQOS),
      .twiddle_h_rsc_0_14_AWPROT(twiddle_h_rsc_0_14_AWPROT),
      .twiddle_h_rsc_0_14_AWCACHE(twiddle_h_rsc_0_14_AWCACHE),
      .twiddle_h_rsc_0_14_AWLOCK(twiddle_h_rsc_0_14_AWLOCK),
      .twiddle_h_rsc_0_14_AWBURST(twiddle_h_rsc_0_14_AWBURST),
      .twiddle_h_rsc_0_14_AWSIZE(twiddle_h_rsc_0_14_AWSIZE),
      .twiddle_h_rsc_0_14_AWLEN(twiddle_h_rsc_0_14_AWLEN),
      .twiddle_h_rsc_0_14_AWADDR(twiddle_h_rsc_0_14_AWADDR),
      .twiddle_h_rsc_0_14_AWID(twiddle_h_rsc_0_14_AWID),
      .twiddle_h_rsc_triosy_0_14_lz(twiddle_h_rsc_triosy_0_14_lz),
      .twiddle_h_rsc_0_15_s_tdone(twiddle_h_rsc_0_15_s_tdone),
      .twiddle_h_rsc_0_15_tr_write_done(twiddle_h_rsc_0_15_tr_write_done),
      .twiddle_h_rsc_0_15_RREADY(twiddle_h_rsc_0_15_RREADY),
      .twiddle_h_rsc_0_15_RVALID(twiddle_h_rsc_0_15_RVALID),
      .twiddle_h_rsc_0_15_RUSER(twiddle_h_rsc_0_15_RUSER),
      .twiddle_h_rsc_0_15_RLAST(twiddle_h_rsc_0_15_RLAST),
      .twiddle_h_rsc_0_15_RRESP(twiddle_h_rsc_0_15_RRESP),
      .twiddle_h_rsc_0_15_RDATA(twiddle_h_rsc_0_15_RDATA),
      .twiddle_h_rsc_0_15_RID(twiddle_h_rsc_0_15_RID),
      .twiddle_h_rsc_0_15_ARREADY(twiddle_h_rsc_0_15_ARREADY),
      .twiddle_h_rsc_0_15_ARVALID(twiddle_h_rsc_0_15_ARVALID),
      .twiddle_h_rsc_0_15_ARUSER(twiddle_h_rsc_0_15_ARUSER),
      .twiddle_h_rsc_0_15_ARREGION(twiddle_h_rsc_0_15_ARREGION),
      .twiddle_h_rsc_0_15_ARQOS(twiddle_h_rsc_0_15_ARQOS),
      .twiddle_h_rsc_0_15_ARPROT(twiddle_h_rsc_0_15_ARPROT),
      .twiddle_h_rsc_0_15_ARCACHE(twiddle_h_rsc_0_15_ARCACHE),
      .twiddle_h_rsc_0_15_ARLOCK(twiddle_h_rsc_0_15_ARLOCK),
      .twiddle_h_rsc_0_15_ARBURST(twiddle_h_rsc_0_15_ARBURST),
      .twiddle_h_rsc_0_15_ARSIZE(twiddle_h_rsc_0_15_ARSIZE),
      .twiddle_h_rsc_0_15_ARLEN(twiddle_h_rsc_0_15_ARLEN),
      .twiddle_h_rsc_0_15_ARADDR(twiddle_h_rsc_0_15_ARADDR),
      .twiddle_h_rsc_0_15_ARID(twiddle_h_rsc_0_15_ARID),
      .twiddle_h_rsc_0_15_BREADY(twiddle_h_rsc_0_15_BREADY),
      .twiddle_h_rsc_0_15_BVALID(twiddle_h_rsc_0_15_BVALID),
      .twiddle_h_rsc_0_15_BUSER(twiddle_h_rsc_0_15_BUSER),
      .twiddle_h_rsc_0_15_BRESP(twiddle_h_rsc_0_15_BRESP),
      .twiddle_h_rsc_0_15_BID(twiddle_h_rsc_0_15_BID),
      .twiddle_h_rsc_0_15_WREADY(twiddle_h_rsc_0_15_WREADY),
      .twiddle_h_rsc_0_15_WVALID(twiddle_h_rsc_0_15_WVALID),
      .twiddle_h_rsc_0_15_WUSER(twiddle_h_rsc_0_15_WUSER),
      .twiddle_h_rsc_0_15_WLAST(twiddle_h_rsc_0_15_WLAST),
      .twiddle_h_rsc_0_15_WSTRB(twiddle_h_rsc_0_15_WSTRB),
      .twiddle_h_rsc_0_15_WDATA(twiddle_h_rsc_0_15_WDATA),
      .twiddle_h_rsc_0_15_AWREADY(twiddle_h_rsc_0_15_AWREADY),
      .twiddle_h_rsc_0_15_AWVALID(twiddle_h_rsc_0_15_AWVALID),
      .twiddle_h_rsc_0_15_AWUSER(twiddle_h_rsc_0_15_AWUSER),
      .twiddle_h_rsc_0_15_AWREGION(twiddle_h_rsc_0_15_AWREGION),
      .twiddle_h_rsc_0_15_AWQOS(twiddle_h_rsc_0_15_AWQOS),
      .twiddle_h_rsc_0_15_AWPROT(twiddle_h_rsc_0_15_AWPROT),
      .twiddle_h_rsc_0_15_AWCACHE(twiddle_h_rsc_0_15_AWCACHE),
      .twiddle_h_rsc_0_15_AWLOCK(twiddle_h_rsc_0_15_AWLOCK),
      .twiddle_h_rsc_0_15_AWBURST(twiddle_h_rsc_0_15_AWBURST),
      .twiddle_h_rsc_0_15_AWSIZE(twiddle_h_rsc_0_15_AWSIZE),
      .twiddle_h_rsc_0_15_AWLEN(twiddle_h_rsc_0_15_AWLEN),
      .twiddle_h_rsc_0_15_AWADDR(twiddle_h_rsc_0_15_AWADDR),
      .twiddle_h_rsc_0_15_AWID(twiddle_h_rsc_0_15_AWID),
      .twiddle_h_rsc_triosy_0_15_lz(twiddle_h_rsc_triosy_0_15_lz),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_0_i_qa_d(yt_rsc_0_0_i_qa_d),
      .yt_rsc_0_1_i_qa_d(yt_rsc_0_1_i_qa_d),
      .yt_rsc_0_2_i_qa_d(yt_rsc_0_2_i_qa_d),
      .yt_rsc_0_3_i_qa_d(yt_rsc_0_3_i_qa_d),
      .yt_rsc_0_4_i_qa_d(yt_rsc_0_4_i_qa_d),
      .yt_rsc_0_5_i_qa_d(yt_rsc_0_5_i_qa_d),
      .yt_rsc_0_6_i_qa_d(yt_rsc_0_6_i_qa_d),
      .yt_rsc_0_7_i_qa_d(yt_rsc_0_7_i_qa_d),
      .yt_rsc_0_8_i_qa_d(yt_rsc_0_8_i_qa_d),
      .yt_rsc_0_9_i_qa_d(yt_rsc_0_9_i_qa_d),
      .yt_rsc_0_10_i_qa_d(yt_rsc_0_10_i_qa_d),
      .yt_rsc_0_11_i_qa_d(yt_rsc_0_11_i_qa_d),
      .yt_rsc_0_12_i_qa_d(yt_rsc_0_12_i_qa_d),
      .yt_rsc_0_13_i_qa_d(yt_rsc_0_13_i_qa_d),
      .yt_rsc_0_14_i_qa_d(yt_rsc_0_14_i_qa_d),
      .yt_rsc_0_15_i_qa_d(yt_rsc_0_15_i_qa_d),
      .yt_rsc_0_16_i_clken_d(yt_rsc_0_16_i_clken_d),
      .yt_rsc_0_16_i_qa_d(yt_rsc_0_16_i_qa_d),
      .yt_rsc_0_17_i_qa_d(yt_rsc_0_17_i_qa_d),
      .yt_rsc_0_18_i_qa_d(yt_rsc_0_18_i_qa_d),
      .yt_rsc_0_19_i_qa_d(yt_rsc_0_19_i_qa_d),
      .yt_rsc_0_20_i_qa_d(yt_rsc_0_20_i_qa_d),
      .yt_rsc_0_21_i_qa_d(yt_rsc_0_21_i_qa_d),
      .yt_rsc_0_22_i_qa_d(yt_rsc_0_22_i_qa_d),
      .yt_rsc_0_23_i_qa_d(yt_rsc_0_23_i_qa_d),
      .yt_rsc_0_24_i_qa_d(yt_rsc_0_24_i_qa_d),
      .yt_rsc_0_25_i_qa_d(yt_rsc_0_25_i_qa_d),
      .yt_rsc_0_26_i_qa_d(yt_rsc_0_26_i_qa_d),
      .yt_rsc_0_27_i_qa_d(yt_rsc_0_27_i_qa_d),
      .yt_rsc_0_28_i_qa_d(yt_rsc_0_28_i_qa_d),
      .yt_rsc_0_29_i_qa_d(yt_rsc_0_29_i_qa_d),
      .yt_rsc_0_30_i_qa_d(yt_rsc_0_30_i_qa_d),
      .yt_rsc_0_31_i_qa_d(yt_rsc_0_31_i_qa_d),
      .yt_rsc_1_0_i_clken_d(yt_rsc_1_0_i_clken_d),
      .yt_rsc_1_0_i_da_d(yt_rsc_1_0_i_da_d),
      .yt_rsc_1_0_i_qa_d(yt_rsc_1_0_i_qa_d),
      .yt_rsc_1_1_i_da_d(yt_rsc_1_1_i_da_d),
      .yt_rsc_1_1_i_qa_d(yt_rsc_1_1_i_qa_d),
      .yt_rsc_1_2_i_da_d(yt_rsc_1_2_i_da_d),
      .yt_rsc_1_2_i_qa_d(yt_rsc_1_2_i_qa_d),
      .yt_rsc_1_3_i_da_d(yt_rsc_1_3_i_da_d),
      .yt_rsc_1_3_i_qa_d(yt_rsc_1_3_i_qa_d),
      .yt_rsc_1_4_i_da_d(yt_rsc_1_4_i_da_d),
      .yt_rsc_1_4_i_qa_d(yt_rsc_1_4_i_qa_d),
      .yt_rsc_1_5_i_da_d(yt_rsc_1_5_i_da_d),
      .yt_rsc_1_5_i_qa_d(yt_rsc_1_5_i_qa_d),
      .yt_rsc_1_6_i_da_d(yt_rsc_1_6_i_da_d),
      .yt_rsc_1_6_i_qa_d(yt_rsc_1_6_i_qa_d),
      .yt_rsc_1_7_i_da_d(yt_rsc_1_7_i_da_d),
      .yt_rsc_1_7_i_qa_d(yt_rsc_1_7_i_qa_d),
      .yt_rsc_1_8_i_da_d(yt_rsc_1_8_i_da_d),
      .yt_rsc_1_8_i_qa_d(yt_rsc_1_8_i_qa_d),
      .yt_rsc_1_9_i_da_d(yt_rsc_1_9_i_da_d),
      .yt_rsc_1_9_i_qa_d(yt_rsc_1_9_i_qa_d),
      .yt_rsc_1_10_i_da_d(yt_rsc_1_10_i_da_d),
      .yt_rsc_1_10_i_qa_d(yt_rsc_1_10_i_qa_d),
      .yt_rsc_1_11_i_da_d(yt_rsc_1_11_i_da_d),
      .yt_rsc_1_11_i_qa_d(yt_rsc_1_11_i_qa_d),
      .yt_rsc_1_12_i_da_d(yt_rsc_1_12_i_da_d),
      .yt_rsc_1_12_i_qa_d(yt_rsc_1_12_i_qa_d),
      .yt_rsc_1_13_i_da_d(yt_rsc_1_13_i_da_d),
      .yt_rsc_1_13_i_qa_d(yt_rsc_1_13_i_qa_d),
      .yt_rsc_1_14_i_da_d(yt_rsc_1_14_i_da_d),
      .yt_rsc_1_14_i_qa_d(yt_rsc_1_14_i_qa_d),
      .yt_rsc_1_15_i_da_d(yt_rsc_1_15_i_da_d),
      .yt_rsc_1_15_i_qa_d(yt_rsc_1_15_i_qa_d),
      .yt_rsc_1_16_i_clken_d(yt_rsc_1_16_i_clken_d),
      .yt_rsc_1_16_i_da_d(yt_rsc_1_16_i_da_d),
      .yt_rsc_1_16_i_qa_d(yt_rsc_1_16_i_qa_d),
      .yt_rsc_1_17_i_da_d(yt_rsc_1_17_i_da_d),
      .yt_rsc_1_17_i_qa_d(yt_rsc_1_17_i_qa_d),
      .yt_rsc_1_18_i_da_d(yt_rsc_1_18_i_da_d),
      .yt_rsc_1_18_i_qa_d(yt_rsc_1_18_i_qa_d),
      .yt_rsc_1_19_i_da_d(yt_rsc_1_19_i_da_d),
      .yt_rsc_1_19_i_qa_d(yt_rsc_1_19_i_qa_d),
      .yt_rsc_1_20_i_da_d(yt_rsc_1_20_i_da_d),
      .yt_rsc_1_20_i_qa_d(yt_rsc_1_20_i_qa_d),
      .yt_rsc_1_21_i_da_d(yt_rsc_1_21_i_da_d),
      .yt_rsc_1_21_i_qa_d(yt_rsc_1_21_i_qa_d),
      .yt_rsc_1_22_i_da_d(yt_rsc_1_22_i_da_d),
      .yt_rsc_1_22_i_qa_d(yt_rsc_1_22_i_qa_d),
      .yt_rsc_1_23_i_da_d(yt_rsc_1_23_i_da_d),
      .yt_rsc_1_23_i_qa_d(yt_rsc_1_23_i_qa_d),
      .yt_rsc_1_24_i_da_d(yt_rsc_1_24_i_da_d),
      .yt_rsc_1_24_i_qa_d(yt_rsc_1_24_i_qa_d),
      .yt_rsc_1_25_i_da_d(yt_rsc_1_25_i_da_d),
      .yt_rsc_1_25_i_qa_d(yt_rsc_1_25_i_qa_d),
      .yt_rsc_1_26_i_da_d(yt_rsc_1_26_i_da_d),
      .yt_rsc_1_26_i_qa_d(yt_rsc_1_26_i_qa_d),
      .yt_rsc_1_27_i_da_d(yt_rsc_1_27_i_da_d),
      .yt_rsc_1_27_i_qa_d(yt_rsc_1_27_i_qa_d),
      .yt_rsc_1_28_i_da_d(yt_rsc_1_28_i_da_d),
      .yt_rsc_1_28_i_qa_d(yt_rsc_1_28_i_qa_d),
      .yt_rsc_1_29_i_da_d(yt_rsc_1_29_i_da_d),
      .yt_rsc_1_29_i_qa_d(yt_rsc_1_29_i_qa_d),
      .yt_rsc_1_30_i_da_d(yt_rsc_1_30_i_da_d),
      .yt_rsc_1_30_i_qa_d(yt_rsc_1_30_i_qa_d),
      .yt_rsc_1_31_i_da_d(yt_rsc_1_31_i_da_d),
      .yt_rsc_1_31_i_qa_d(yt_rsc_1_31_i_qa_d),
      .xt_rsc_0_0_i_qa_d(xt_rsc_0_0_i_qa_d),
      .xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_1_i_qa_d(xt_rsc_0_1_i_qa_d),
      .xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_2_i_qa_d(xt_rsc_0_2_i_qa_d),
      .xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_3_i_qa_d(xt_rsc_0_3_i_qa_d),
      .xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_4_i_qa_d(xt_rsc_0_4_i_qa_d),
      .xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_4_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_5_i_qa_d(xt_rsc_0_5_i_qa_d),
      .xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_5_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_6_i_qa_d(xt_rsc_0_6_i_qa_d),
      .xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_6_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_7_i_qa_d(xt_rsc_0_7_i_qa_d),
      .xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_7_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_8_i_qa_d(xt_rsc_0_8_i_qa_d),
      .xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_8_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_9_i_qa_d(xt_rsc_0_9_i_qa_d),
      .xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_9_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_10_i_qa_d(xt_rsc_0_10_i_qa_d),
      .xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_10_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_11_i_qa_d(xt_rsc_0_11_i_qa_d),
      .xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_11_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_12_i_qa_d(xt_rsc_0_12_i_qa_d),
      .xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_12_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_13_i_qa_d(xt_rsc_0_13_i_qa_d),
      .xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_13_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_14_i_qa_d(xt_rsc_0_14_i_qa_d),
      .xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_14_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_15_i_qa_d(xt_rsc_0_15_i_qa_d),
      .xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_15_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_16_i_qa_d(xt_rsc_0_16_i_qa_d),
      .xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_16_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_17_i_qa_d(xt_rsc_0_17_i_qa_d),
      .xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_17_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_18_i_qa_d(xt_rsc_0_18_i_qa_d),
      .xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_18_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_19_i_qa_d(xt_rsc_0_19_i_qa_d),
      .xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_19_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_20_i_qa_d(xt_rsc_0_20_i_qa_d),
      .xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_20_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_21_i_qa_d(xt_rsc_0_21_i_qa_d),
      .xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_21_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_22_i_qa_d(xt_rsc_0_22_i_qa_d),
      .xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_22_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_23_i_qa_d(xt_rsc_0_23_i_qa_d),
      .xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_23_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_24_i_qa_d(xt_rsc_0_24_i_qa_d),
      .xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_24_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_25_i_qa_d(xt_rsc_0_25_i_qa_d),
      .xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_25_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_26_i_qa_d(xt_rsc_0_26_i_qa_d),
      .xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_26_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_27_i_qa_d(xt_rsc_0_27_i_qa_d),
      .xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_27_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_28_i_qa_d(xt_rsc_0_28_i_qa_d),
      .xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_28_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_29_i_qa_d(xt_rsc_0_29_i_qa_d),
      .xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_29_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_30_i_qa_d(xt_rsc_0_30_i_qa_d),
      .xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_30_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_31_i_qa_d(xt_rsc_0_31_i_qa_d),
      .xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_0_31_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_0_i_qa_d(xt_rsc_1_0_i_qa_d),
      .xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_1_i_qa_d(xt_rsc_1_1_i_qa_d),
      .xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_1_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_2_i_qa_d(xt_rsc_1_2_i_qa_d),
      .xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_2_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_3_i_qa_d(xt_rsc_1_3_i_qa_d),
      .xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_3_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_4_i_qa_d(xt_rsc_1_4_i_qa_d),
      .xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_4_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_5_i_qa_d(xt_rsc_1_5_i_qa_d),
      .xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_5_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_6_i_qa_d(xt_rsc_1_6_i_qa_d),
      .xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_6_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_7_i_qa_d(xt_rsc_1_7_i_qa_d),
      .xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_7_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_8_i_qa_d(xt_rsc_1_8_i_qa_d),
      .xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_8_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_9_i_qa_d(xt_rsc_1_9_i_qa_d),
      .xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_9_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_10_i_qa_d(xt_rsc_1_10_i_qa_d),
      .xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_10_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_11_i_qa_d(xt_rsc_1_11_i_qa_d),
      .xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_11_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_12_i_qa_d(xt_rsc_1_12_i_qa_d),
      .xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_12_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_13_i_qa_d(xt_rsc_1_13_i_qa_d),
      .xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_13_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_14_i_qa_d(xt_rsc_1_14_i_qa_d),
      .xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_14_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_15_i_qa_d(xt_rsc_1_15_i_qa_d),
      .xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_15_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_16_i_qa_d(xt_rsc_1_16_i_qa_d),
      .xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_16_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_17_i_qa_d(xt_rsc_1_17_i_qa_d),
      .xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_17_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_18_i_qa_d(xt_rsc_1_18_i_qa_d),
      .xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_18_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_19_i_qa_d(xt_rsc_1_19_i_qa_d),
      .xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_19_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_20_i_qa_d(xt_rsc_1_20_i_qa_d),
      .xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_20_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_21_i_qa_d(xt_rsc_1_21_i_qa_d),
      .xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_21_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_22_i_qa_d(xt_rsc_1_22_i_qa_d),
      .xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_22_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_23_i_qa_d(xt_rsc_1_23_i_qa_d),
      .xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_23_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_24_i_qa_d(xt_rsc_1_24_i_qa_d),
      .xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_24_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_25_i_qa_d(xt_rsc_1_25_i_qa_d),
      .xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_25_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_26_i_qa_d(xt_rsc_1_26_i_qa_d),
      .xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_26_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_27_i_qa_d(xt_rsc_1_27_i_qa_d),
      .xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_27_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_28_i_qa_d(xt_rsc_1_28_i_qa_d),
      .xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_28_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_29_i_qa_d(xt_rsc_1_29_i_qa_d),
      .xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_29_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_30_i_qa_d(xt_rsc_1_30_i_qa_d),
      .xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_30_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .xt_rsc_1_31_i_qa_d(xt_rsc_1_31_i_qa_d),
      .xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d(xt_rsc_1_31_i_rwA_rw_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_0_i_adra_d_pff(yt_rsc_0_0_i_adra_d_iff),
      .yt_rsc_0_0_i_da_d_pff(yt_rsc_0_0_i_da_d_iff),
      .yt_rsc_0_0_i_wea_d_pff(yt_rsc_0_0_i_wea_d_iff),
      .yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff(yt_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .yt_rsc_0_1_i_da_d_pff(yt_rsc_0_1_i_da_d_iff),
      .yt_rsc_0_2_i_da_d_pff(yt_rsc_0_2_i_da_d_iff),
      .yt_rsc_0_3_i_da_d_pff(yt_rsc_0_3_i_da_d_iff),
      .yt_rsc_0_4_i_da_d_pff(yt_rsc_0_4_i_da_d_iff),
      .yt_rsc_0_5_i_da_d_pff(yt_rsc_0_5_i_da_d_iff),
      .yt_rsc_0_6_i_da_d_pff(yt_rsc_0_6_i_da_d_iff),
      .yt_rsc_0_7_i_da_d_pff(yt_rsc_0_7_i_da_d_iff),
      .yt_rsc_0_8_i_da_d_pff(yt_rsc_0_8_i_da_d_iff),
      .yt_rsc_0_9_i_da_d_pff(yt_rsc_0_9_i_da_d_iff),
      .yt_rsc_0_10_i_da_d_pff(yt_rsc_0_10_i_da_d_iff),
      .yt_rsc_0_11_i_da_d_pff(yt_rsc_0_11_i_da_d_iff),
      .yt_rsc_0_12_i_da_d_pff(yt_rsc_0_12_i_da_d_iff),
      .yt_rsc_0_13_i_da_d_pff(yt_rsc_0_13_i_da_d_iff),
      .yt_rsc_0_14_i_da_d_pff(yt_rsc_0_14_i_da_d_iff),
      .yt_rsc_0_15_i_da_d_pff(yt_rsc_0_15_i_da_d_iff),
      .yt_rsc_0_16_i_adra_d_pff(yt_rsc_0_16_i_adra_d_iff),
      .yt_rsc_0_16_i_wea_d_pff(yt_rsc_0_16_i_wea_d_iff),
      .yt_rsc_1_0_i_adra_d_pff(yt_rsc_1_0_i_adra_d_iff),
      .yt_rsc_1_0_i_wea_d_pff(yt_rsc_1_0_i_wea_d_iff),
      .yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_pff(yt_rsc_1_0_i_rwA_rw_ram_ir_internal_RMASK_B_d_iff),
      .yt_rsc_1_16_i_adra_d_pff(yt_rsc_1_16_i_adra_d_iff),
      .yt_rsc_1_16_i_wea_d_pff(yt_rsc_1_16_i_wea_d_iff),
      .xt_rsc_0_0_i_adra_d_pff(xt_rsc_0_0_i_adra_d_iff),
      .xt_rsc_0_0_i_da_d_pff(xt_rsc_0_0_i_da_d_iff),
      .xt_rsc_0_0_i_wea_d_pff(xt_rsc_0_0_i_wea_d_iff),
      .xt_rsc_0_1_i_da_d_pff(xt_rsc_0_1_i_da_d_iff),
      .xt_rsc_0_1_i_wea_d_pff(xt_rsc_0_1_i_wea_d_iff),
      .xt_rsc_0_2_i_da_d_pff(xt_rsc_0_2_i_da_d_iff),
      .xt_rsc_0_2_i_wea_d_pff(xt_rsc_0_2_i_wea_d_iff),
      .xt_rsc_0_3_i_da_d_pff(xt_rsc_0_3_i_da_d_iff),
      .xt_rsc_0_3_i_wea_d_pff(xt_rsc_0_3_i_wea_d_iff),
      .xt_rsc_0_4_i_da_d_pff(xt_rsc_0_4_i_da_d_iff),
      .xt_rsc_0_4_i_wea_d_pff(xt_rsc_0_4_i_wea_d_iff),
      .xt_rsc_0_5_i_da_d_pff(xt_rsc_0_5_i_da_d_iff),
      .xt_rsc_0_5_i_wea_d_pff(xt_rsc_0_5_i_wea_d_iff),
      .xt_rsc_0_6_i_da_d_pff(xt_rsc_0_6_i_da_d_iff),
      .xt_rsc_0_6_i_wea_d_pff(xt_rsc_0_6_i_wea_d_iff),
      .xt_rsc_0_7_i_da_d_pff(xt_rsc_0_7_i_da_d_iff),
      .xt_rsc_0_7_i_wea_d_pff(xt_rsc_0_7_i_wea_d_iff),
      .xt_rsc_0_8_i_da_d_pff(xt_rsc_0_8_i_da_d_iff),
      .xt_rsc_0_8_i_wea_d_pff(xt_rsc_0_8_i_wea_d_iff),
      .xt_rsc_0_9_i_da_d_pff(xt_rsc_0_9_i_da_d_iff),
      .xt_rsc_0_9_i_wea_d_pff(xt_rsc_0_9_i_wea_d_iff),
      .xt_rsc_0_10_i_da_d_pff(xt_rsc_0_10_i_da_d_iff),
      .xt_rsc_0_10_i_wea_d_pff(xt_rsc_0_10_i_wea_d_iff),
      .xt_rsc_0_11_i_da_d_pff(xt_rsc_0_11_i_da_d_iff),
      .xt_rsc_0_11_i_wea_d_pff(xt_rsc_0_11_i_wea_d_iff),
      .xt_rsc_0_12_i_da_d_pff(xt_rsc_0_12_i_da_d_iff),
      .xt_rsc_0_12_i_wea_d_pff(xt_rsc_0_12_i_wea_d_iff),
      .xt_rsc_0_13_i_da_d_pff(xt_rsc_0_13_i_da_d_iff),
      .xt_rsc_0_13_i_wea_d_pff(xt_rsc_0_13_i_wea_d_iff),
      .xt_rsc_0_14_i_da_d_pff(xt_rsc_0_14_i_da_d_iff),
      .xt_rsc_0_14_i_wea_d_pff(xt_rsc_0_14_i_wea_d_iff),
      .xt_rsc_0_15_i_da_d_pff(xt_rsc_0_15_i_da_d_iff),
      .xt_rsc_0_15_i_wea_d_pff(xt_rsc_0_15_i_wea_d_iff),
      .xt_rsc_0_16_i_adra_d_pff(xt_rsc_0_16_i_adra_d_iff),
      .xt_rsc_0_16_i_wea_d_pff(xt_rsc_0_16_i_wea_d_iff),
      .xt_rsc_0_17_i_wea_d_pff(xt_rsc_0_17_i_wea_d_iff),
      .xt_rsc_0_18_i_wea_d_pff(xt_rsc_0_18_i_wea_d_iff),
      .xt_rsc_0_19_i_wea_d_pff(xt_rsc_0_19_i_wea_d_iff),
      .xt_rsc_0_20_i_wea_d_pff(xt_rsc_0_20_i_wea_d_iff),
      .xt_rsc_0_21_i_wea_d_pff(xt_rsc_0_21_i_wea_d_iff),
      .xt_rsc_0_22_i_wea_d_pff(xt_rsc_0_22_i_wea_d_iff),
      .xt_rsc_0_23_i_wea_d_pff(xt_rsc_0_23_i_wea_d_iff),
      .xt_rsc_0_24_i_wea_d_pff(xt_rsc_0_24_i_wea_d_iff),
      .xt_rsc_0_25_i_wea_d_pff(xt_rsc_0_25_i_wea_d_iff),
      .xt_rsc_0_26_i_wea_d_pff(xt_rsc_0_26_i_wea_d_iff),
      .xt_rsc_0_27_i_wea_d_pff(xt_rsc_0_27_i_wea_d_iff),
      .xt_rsc_0_28_i_wea_d_pff(xt_rsc_0_28_i_wea_d_iff),
      .xt_rsc_0_29_i_wea_d_pff(xt_rsc_0_29_i_wea_d_iff),
      .xt_rsc_0_30_i_wea_d_pff(xt_rsc_0_30_i_wea_d_iff),
      .xt_rsc_0_31_i_wea_d_pff(xt_rsc_0_31_i_wea_d_iff),
      .xt_rsc_1_0_i_da_d_pff(xt_rsc_1_0_i_da_d_iff),
      .xt_rsc_1_0_i_wea_d_pff(xt_rsc_1_0_i_wea_d_iff),
      .xt_rsc_1_1_i_da_d_pff(xt_rsc_1_1_i_da_d_iff),
      .xt_rsc_1_1_i_wea_d_pff(xt_rsc_1_1_i_wea_d_iff),
      .xt_rsc_1_2_i_da_d_pff(xt_rsc_1_2_i_da_d_iff),
      .xt_rsc_1_2_i_wea_d_pff(xt_rsc_1_2_i_wea_d_iff),
      .xt_rsc_1_3_i_da_d_pff(xt_rsc_1_3_i_da_d_iff),
      .xt_rsc_1_3_i_wea_d_pff(xt_rsc_1_3_i_wea_d_iff),
      .xt_rsc_1_4_i_da_d_pff(xt_rsc_1_4_i_da_d_iff),
      .xt_rsc_1_4_i_wea_d_pff(xt_rsc_1_4_i_wea_d_iff),
      .xt_rsc_1_5_i_da_d_pff(xt_rsc_1_5_i_da_d_iff),
      .xt_rsc_1_5_i_wea_d_pff(xt_rsc_1_5_i_wea_d_iff),
      .xt_rsc_1_6_i_da_d_pff(xt_rsc_1_6_i_da_d_iff),
      .xt_rsc_1_6_i_wea_d_pff(xt_rsc_1_6_i_wea_d_iff),
      .xt_rsc_1_7_i_da_d_pff(xt_rsc_1_7_i_da_d_iff),
      .xt_rsc_1_7_i_wea_d_pff(xt_rsc_1_7_i_wea_d_iff),
      .xt_rsc_1_8_i_da_d_pff(xt_rsc_1_8_i_da_d_iff),
      .xt_rsc_1_8_i_wea_d_pff(xt_rsc_1_8_i_wea_d_iff),
      .xt_rsc_1_9_i_da_d_pff(xt_rsc_1_9_i_da_d_iff),
      .xt_rsc_1_9_i_wea_d_pff(xt_rsc_1_9_i_wea_d_iff),
      .xt_rsc_1_10_i_da_d_pff(xt_rsc_1_10_i_da_d_iff),
      .xt_rsc_1_10_i_wea_d_pff(xt_rsc_1_10_i_wea_d_iff),
      .xt_rsc_1_11_i_da_d_pff(xt_rsc_1_11_i_da_d_iff),
      .xt_rsc_1_11_i_wea_d_pff(xt_rsc_1_11_i_wea_d_iff),
      .xt_rsc_1_12_i_da_d_pff(xt_rsc_1_12_i_da_d_iff),
      .xt_rsc_1_12_i_wea_d_pff(xt_rsc_1_12_i_wea_d_iff),
      .xt_rsc_1_13_i_da_d_pff(xt_rsc_1_13_i_da_d_iff),
      .xt_rsc_1_13_i_wea_d_pff(xt_rsc_1_13_i_wea_d_iff),
      .xt_rsc_1_14_i_da_d_pff(xt_rsc_1_14_i_da_d_iff),
      .xt_rsc_1_14_i_wea_d_pff(xt_rsc_1_14_i_wea_d_iff),
      .xt_rsc_1_15_i_da_d_pff(xt_rsc_1_15_i_da_d_iff),
      .xt_rsc_1_15_i_wea_d_pff(xt_rsc_1_15_i_wea_d_iff),
      .xt_rsc_1_16_i_wea_d_pff(xt_rsc_1_16_i_wea_d_iff),
      .xt_rsc_1_17_i_wea_d_pff(xt_rsc_1_17_i_wea_d_iff),
      .xt_rsc_1_18_i_wea_d_pff(xt_rsc_1_18_i_wea_d_iff),
      .xt_rsc_1_19_i_wea_d_pff(xt_rsc_1_19_i_wea_d_iff),
      .xt_rsc_1_20_i_wea_d_pff(xt_rsc_1_20_i_wea_d_iff),
      .xt_rsc_1_21_i_wea_d_pff(xt_rsc_1_21_i_wea_d_iff),
      .xt_rsc_1_22_i_wea_d_pff(xt_rsc_1_22_i_wea_d_iff),
      .xt_rsc_1_23_i_wea_d_pff(xt_rsc_1_23_i_wea_d_iff),
      .xt_rsc_1_24_i_wea_d_pff(xt_rsc_1_24_i_wea_d_iff),
      .xt_rsc_1_25_i_wea_d_pff(xt_rsc_1_25_i_wea_d_iff),
      .xt_rsc_1_26_i_wea_d_pff(xt_rsc_1_26_i_wea_d_iff),
      .xt_rsc_1_27_i_wea_d_pff(xt_rsc_1_27_i_wea_d_iff),
      .xt_rsc_1_28_i_wea_d_pff(xt_rsc_1_28_i_wea_d_iff),
      .xt_rsc_1_29_i_wea_d_pff(xt_rsc_1_29_i_wea_d_iff),
      .xt_rsc_1_30_i_wea_d_pff(xt_rsc_1_30_i_wea_d_iff),
      .xt_rsc_1_31_i_wea_d_pff(xt_rsc_1_31_i_wea_d_iff)
    );
endmodule



