// ----------------------------------------------------------------------------
// SLEC wrapper around original function
//
//    HLS version: 8.2
//   SLEC version: SLEC design-checking-10.5c
//
//   Generated by: jd4691
// Generated date: Sun Sep 12 00:00:03 EDT 2021
//
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Original function
//
//
// ----------------------------------------------------------------------------
// spec_wrapper
// SystemC transaction wrapper around original C function
// ----------------------------------------------------------------------------
//
#include "spec_wrapper.h"
#include <mc_typeconv.h>


extern "C++"  void peaseNTT(ac_int<32, false > xt[1024], ac_int<32, false > p, ac_int<32, false > r, ac_int<32, false > twiddle[1024], ac_int<32, false > twiddle_h[1024]);

#ifdef SLEC_CAT2SLEC_TB
#ifdef __SYNTHESIS__
#error "Testbenches should not be compiled with -D__SYNTHESIS__ specified"
#endif //__SYNTHESIS__
#endif //SLEC_CAT2SLEC_TB

#ifdef SLEC_CHANNEL_CAT2SLEC_TB
#define STREAM_READ(x,y) x.read(y)
#define STREAM_WRITE(x,y) x.write(y)
#else //SLEC_CHANNEL_CAT2SLEC_TB
#define STREAM_READ(x,y) x.rdy.write(1); y = x.dat.read()
#define STREAM_WRITE(x,y) x.dat.write(y); x.vld.write(1)
#endif //SLEC_CHANNEL_CAT2SLEC_TB


// ============================================
// Function: resetData
// --------------------------------------------

void spec_wrapper::resetData()
{

    Calypto_transaction_done.write(0);

    _Calypto_function_call_counter = 1;

    #ifndef SLEC_CHANNEL_CAT2SLEC_TB
    // Reset function call of channels

    #endif //SLEC_CHANNEL_CAT2SLEC_TB

    #ifdef SLEC_CHANNEL_CAT2SLEC_TB
    #endif //SLEC_CHANNEL_CAT2SLEC_TB

    // Reset variables for outputs to 0
}


// ============================================
// Function: readData
// --------------------------------------------

void spec_wrapper::readData()
{

    // ----------------------------------------------------------------------------
    // Translate data read from wrapper input into format of original function interface

#ifdef SLEC_FLAT_CAT2SLEC_TB
    if (!tb_latch_nonstream.read())
        return;
#endif //SLEC_FLAT_CAT2SLEC_TB

    // READ - Create assignment statements for p
    sc_lv<32> temp_lv_p_2_3;
    temp_lv_p_2_3 = (slecIN_p_idx_0.read());
    vector_to_type(temp_lv_p_2_3,0,&p);

    // READ - Create assignment statements for r
    sc_lv<32> temp_lv_r_4_5;
    temp_lv_r_4_5 = (slecIN_r_idx_0.read());
    vector_to_type(temp_lv_r_4_5,0,&r);
}


// ============================================
// Function: writeData
// --------------------------------------------

void spec_wrapper::writeData()
{

    // ----------------------------------------------------------------------------
    // Translate original function interface outputs into format of wrapper output
}

// ---------------------------------------------------------------
// Process: SC_METHOD set_constants
// Static sensitivity: sensitive << clk.pos();

void spec_wrapper::set_constants() {
    net_always_zero.write(0);
    net_always_one.write(1);
}

// ---------------------------------------------------------------
// Process: SC_METHOD generate_clk_rst
// Static sensitivity: sensitive << clk;
// Static sensitivity: sensitive << rst;

void spec_wrapper::generate_clk_rst() {
    clk_neg.write(!clk);
    rst_neg.write(!rst);

}

// ---------------------------------------------------------------
// Process: SC_CTHREAD doit
// Static sensitivity: clk.pos();
// Reset: reset_signal_is(rst,true);

void spec_wrapper::doit() {
    resetData();
    wait();
    while(1) {
        Calypto_transaction_done.write(0);
        readData();
        ac_int<32, false > xt[1024];
        ac_int<32, false > twiddle[1024];
        ac_int<32, false > twiddle_h[1024];
        #ifdef SLEC_FLAT_CAT2SLEC_TB
        if (tb_run_dut.read())
        {
            try {
            _TB_SHOW("Design is running");
            peaseNTT(xt,p,r,twiddle,twiddle_h);
            _TB_SHOW("Design is done");
            }
            catch(...) {
               std::cout << sc_time_stamp() << " : CALYPTO_TESTBENCH_WARNING: Encountered an unknown exception. Simulation will terminate." << std::endl;
            }
        }
        #else //SLEC_FLAT_CAT2SLEC_TB
        peaseNTT(xt,p,r,twiddle,twiddle_h);
        #endif //SLEC_FLAT_CAT2SLEC_TB
        writeData();
        Calypto_transaction_done.write(1);
        _Calypto_function_call_counter++;
        wait();
    }
}

#ifndef SLEC_CHANNEL_CAT2SLEC_TB
#else //SLEC_CHANNEL_CAT2SLEC_TB
// ---------------------------------------------------------------
// Process: SC_METHOD counter_reset
// Static sensitivity: sensitive << clk.pos();

void spec_wrapper::counter_reset() {
    static int cycle_in_trans=SPEC_THROUGHPUT-1;

    _TB_SHOW("Cycle in transaction: " << cycle_in_trans);

    tb_reset_istream_counters.write((cycle_in_trans==SPEC_THROUGHPUT-1));
    if (cycle_in_trans==SPEC_THROUGHPUT-1)
    {
        _TB_SHOW(" input channels reset");
    }
    tb_reset_ostream_counters.write((cycle_in_trans==SPEC_THROUGHPUT-1));
    if (cycle_in_trans==SPEC_THROUGHPUT-1)
    {
        _TB_SHOW(" output channels reset");
    }

    cycle_in_trans=(cycle_in_trans+1)%SPEC_THROUGHPUT;
}

#endif //SLEC_CHANNEL_CAT2SLEC_TB
