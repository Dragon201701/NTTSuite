// ----------------------------------------------------------------------------
// SLEC wrapper around original function
//
//    HLS version: 8.2
//   SLEC version: SLEC design-checking-10.5c
//
//   Generated by: jd4691
// Generated date: Sun Sep 12 00:00:03 EDT 2021
//
// ----------------------------------------------------------------------------
//

#ifndef INCLUDED_SPEC_WRAPPER_H
#define INCLUDED_SPEC_WRAPPER_H

#ifndef SLEC_TB_HELPERS
#define SLEC_TB_HELPERS
#ifdef SLEC_CAT2SLEC_TB
#include <iostream>
extern bool gen_tb_debug_output;
#define _TB_NAME sc_core::sc_get_current_process_b()->get_parent()->basename()
#define _TB_TIME() if (gen_tb_debug_output) std::cout << "@" << sc_time_stamp() << std::endl
#define _TB_SHOW(x) if (gen_tb_debug_output) std::cout << "@" << sc_time_stamp() << " in(" << _TB_NAME << "): " << x << std::endl
#else //SLEC_CAT2SLEC_TB
#define _TB_TIME()
#define _TB_SHOW(x)
#endif //SLEC_CAT2SLEC_TB
#endif //SLEC_TB_HELPERS

// Includes
#include "ntt.h"
#include <systemc.h>
#include <ac_int.h>

class spec_wrapper : public sc_module
{
public:

    // Interface Ports
    sc_in<bool> clk;
    sc_in<bool> rst;
    sc_in< sc_lv<32> > slecIN_p_idx_0;
    sc_in< sc_lv<32> > slecIN_r_idx_0;
#ifdef SLEC_FLAT_CAT2SLEC_TB
    sc_in< bool > tb_run_dut;
    sc_in< bool > tb_latch_nonstream;
#endif //SLEC_FLAT_CAT2SLEC_TB
#ifdef SLEC_CHANNEL_CAT2SLEC_TB
    sc_signal< sc_lv<1> > tb_reset_istream_counters;
    sc_signal< sc_lv<1> > tb_reset_ostream_counters;
#endif //SLEC_CHANNEL_CAT2SLEC_TB

    // Data Objects
    sc_signal< bool > clk_neg;
    sc_signal< bool > rst_neg;
    sc_signal< bool > Calypto_transaction_done;
    int _Calypto_function_call_counter;
    ac_int<32, false > p;
    ac_int<32, false > r;
    sc_signal< bool > net_always_zero;
    sc_signal< bool > net_always_one;

    // Module Instance Declaration

    // Declare processes
    void set_constants();
    void generate_clk_rst();
    void doit();

#ifndef SLEC_CHANNEL_CAT2SLEC_TB

#else //SLEC_CHANNEL_CAT2SLEC_TB
    void counter_reset();

#endif //SLEC_CHANNEL_CAT2SLEC_TB
    // Constructor
    SC_HAS_PROCESS(spec_wrapper);
    spec_wrapper(
        sc_module_name name
    )
    {
        // Instance Binding

        // Register processes
        SC_METHOD(set_constants);
        sensitive << clk.pos();

        SC_METHOD(generate_clk_rst);
        sensitive << clk;
        sensitive << rst;

        SC_CTHREAD(doit,clk.pos());
        reset_signal_is(rst,true);

#ifndef SLEC_CHANNEL_CAT2SLEC_TB
#else //SLEC_CHANNEL_CAT2SLEC_TB
        SC_METHOD(counter_reset);
        sensitive << clk.pos();

#endif //SLEC_CHANNEL_CAT2SLEC_TB

        // Other constructor statements

    }

    ~spec_wrapper()
    {
    }

    // C++ class functions
    public:
        void resetData();
    public:
        void readData();
    public:
        void writeData();
};
#endif
