-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   jd4691@newnano.poly.edu
--  Generated date: Wed Jul 28 21:17:36 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen;

ARCHITECTURE v14 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen
    IS
  PORT(
    qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    adrb_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    qb_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    readB_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen;

ARCHITECTURE v14 OF stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  qb_d <= qb;
  adrb <= (adrb_d);
END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen
    IS
  PORT(
    qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea : OUT STD_LOGIC;
    da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    adra : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    adra_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen;

ARCHITECTURE v14 OF stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen
    IS
  -- Default Constants

BEGIN
  qa_d <= qa;
  wea <= (rwA_rw_ram_ir_internal_WMASK_B_d);
  da <= (da_d);
  adra <= (adra_d);
END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    INNER_LOOP_C_123_tr0 : IN STD_LOGIC;
    OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
  );
END stockham_DIT_core_core_fsm;

ARCHITECTURE v14 OF stockham_DIT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  TYPE stockham_DIT_core_core_fsm_1_ST IS (main_C_0, OUTER_LOOP_C_0, INNER_LOOP_C_0,
      INNER_LOOP_C_1, INNER_LOOP_C_2, INNER_LOOP_C_3, INNER_LOOP_C_4, INNER_LOOP_C_5,
      INNER_LOOP_C_6, INNER_LOOP_C_7, INNER_LOOP_C_8, INNER_LOOP_C_9, INNER_LOOP_C_10,
      INNER_LOOP_C_11, INNER_LOOP_C_12, INNER_LOOP_C_13, INNER_LOOP_C_14, INNER_LOOP_C_15,
      INNER_LOOP_C_16, INNER_LOOP_C_17, INNER_LOOP_C_18, INNER_LOOP_C_19, INNER_LOOP_C_20,
      INNER_LOOP_C_21, INNER_LOOP_C_22, INNER_LOOP_C_23, INNER_LOOP_C_24, INNER_LOOP_C_25,
      INNER_LOOP_C_26, INNER_LOOP_C_27, INNER_LOOP_C_28, INNER_LOOP_C_29, INNER_LOOP_C_30,
      INNER_LOOP_C_31, INNER_LOOP_C_32, INNER_LOOP_C_33, INNER_LOOP_C_34, INNER_LOOP_C_35,
      INNER_LOOP_C_36, INNER_LOOP_C_37, INNER_LOOP_C_38, INNER_LOOP_C_39, INNER_LOOP_C_40,
      INNER_LOOP_C_41, INNER_LOOP_C_42, INNER_LOOP_C_43, INNER_LOOP_C_44, INNER_LOOP_C_45,
      INNER_LOOP_C_46, INNER_LOOP_C_47, INNER_LOOP_C_48, INNER_LOOP_C_49, INNER_LOOP_C_50,
      INNER_LOOP_C_51, INNER_LOOP_C_52, INNER_LOOP_C_53, INNER_LOOP_C_54, INNER_LOOP_C_55,
      INNER_LOOP_C_56, INNER_LOOP_C_57, INNER_LOOP_C_58, INNER_LOOP_C_59, INNER_LOOP_C_60,
      INNER_LOOP_C_61, INNER_LOOP_C_62, INNER_LOOP_C_63, INNER_LOOP_C_64, INNER_LOOP_C_65,
      INNER_LOOP_C_66, INNER_LOOP_C_67, INNER_LOOP_C_68, INNER_LOOP_C_69, INNER_LOOP_C_70,
      INNER_LOOP_C_71, INNER_LOOP_C_72, INNER_LOOP_C_73, INNER_LOOP_C_74, INNER_LOOP_C_75,
      INNER_LOOP_C_76, INNER_LOOP_C_77, INNER_LOOP_C_78, INNER_LOOP_C_79, INNER_LOOP_C_80,
      INNER_LOOP_C_81, INNER_LOOP_C_82, INNER_LOOP_C_83, INNER_LOOP_C_84, INNER_LOOP_C_85,
      INNER_LOOP_C_86, INNER_LOOP_C_87, INNER_LOOP_C_88, INNER_LOOP_C_89, INNER_LOOP_C_90,
      INNER_LOOP_C_91, INNER_LOOP_C_92, INNER_LOOP_C_93, INNER_LOOP_C_94, INNER_LOOP_C_95,
      INNER_LOOP_C_96, INNER_LOOP_C_97, INNER_LOOP_C_98, INNER_LOOP_C_99, INNER_LOOP_C_100,
      INNER_LOOP_C_101, INNER_LOOP_C_102, INNER_LOOP_C_103, INNER_LOOP_C_104, INNER_LOOP_C_105,
      INNER_LOOP_C_106, INNER_LOOP_C_107, INNER_LOOP_C_108, INNER_LOOP_C_109, INNER_LOOP_C_110,
      INNER_LOOP_C_111, INNER_LOOP_C_112, INNER_LOOP_C_113, INNER_LOOP_C_114, INNER_LOOP_C_115,
      INNER_LOOP_C_116, INNER_LOOP_C_117, INNER_LOOP_C_118, INNER_LOOP_C_119, INNER_LOOP_C_120,
      INNER_LOOP_C_121, INNER_LOOP_C_122, INNER_LOOP_C_123, OUTER_LOOP_C_1, main_C_1);

  SIGNAL state_var : stockham_DIT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : stockham_DIT_core_core_fsm_1_ST;

BEGIN
  stockham_DIT_core_core_fsm_1 : PROCESS (INNER_LOOP_C_123_tr0, OUTER_LOOP_C_1_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN OUTER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000001");
        state_var_NS <= INNER_LOOP_C_0;
      WHEN INNER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000010");
        state_var_NS <= INNER_LOOP_C_1;
      WHEN INNER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000011");
        state_var_NS <= INNER_LOOP_C_2;
      WHEN INNER_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000100");
        state_var_NS <= INNER_LOOP_C_3;
      WHEN INNER_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000101");
        state_var_NS <= INNER_LOOP_C_4;
      WHEN INNER_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000110");
        state_var_NS <= INNER_LOOP_C_5;
      WHEN INNER_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000111");
        state_var_NS <= INNER_LOOP_C_6;
      WHEN INNER_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001000");
        state_var_NS <= INNER_LOOP_C_7;
      WHEN INNER_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001001");
        state_var_NS <= INNER_LOOP_C_8;
      WHEN INNER_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001010");
        state_var_NS <= INNER_LOOP_C_9;
      WHEN INNER_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001011");
        state_var_NS <= INNER_LOOP_C_10;
      WHEN INNER_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001100");
        state_var_NS <= INNER_LOOP_C_11;
      WHEN INNER_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001101");
        state_var_NS <= INNER_LOOP_C_12;
      WHEN INNER_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001110");
        state_var_NS <= INNER_LOOP_C_13;
      WHEN INNER_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001111");
        state_var_NS <= INNER_LOOP_C_14;
      WHEN INNER_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010000");
        state_var_NS <= INNER_LOOP_C_15;
      WHEN INNER_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010001");
        state_var_NS <= INNER_LOOP_C_16;
      WHEN INNER_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010010");
        state_var_NS <= INNER_LOOP_C_17;
      WHEN INNER_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010011");
        state_var_NS <= INNER_LOOP_C_18;
      WHEN INNER_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010100");
        state_var_NS <= INNER_LOOP_C_19;
      WHEN INNER_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010101");
        state_var_NS <= INNER_LOOP_C_20;
      WHEN INNER_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010110");
        state_var_NS <= INNER_LOOP_C_21;
      WHEN INNER_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010111");
        state_var_NS <= INNER_LOOP_C_22;
      WHEN INNER_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011000");
        state_var_NS <= INNER_LOOP_C_23;
      WHEN INNER_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011001");
        state_var_NS <= INNER_LOOP_C_24;
      WHEN INNER_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011010");
        state_var_NS <= INNER_LOOP_C_25;
      WHEN INNER_LOOP_C_25 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011011");
        state_var_NS <= INNER_LOOP_C_26;
      WHEN INNER_LOOP_C_26 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011100");
        state_var_NS <= INNER_LOOP_C_27;
      WHEN INNER_LOOP_C_27 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011101");
        state_var_NS <= INNER_LOOP_C_28;
      WHEN INNER_LOOP_C_28 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011110");
        state_var_NS <= INNER_LOOP_C_29;
      WHEN INNER_LOOP_C_29 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011111");
        state_var_NS <= INNER_LOOP_C_30;
      WHEN INNER_LOOP_C_30 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100000");
        state_var_NS <= INNER_LOOP_C_31;
      WHEN INNER_LOOP_C_31 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100001");
        state_var_NS <= INNER_LOOP_C_32;
      WHEN INNER_LOOP_C_32 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100010");
        state_var_NS <= INNER_LOOP_C_33;
      WHEN INNER_LOOP_C_33 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100011");
        state_var_NS <= INNER_LOOP_C_34;
      WHEN INNER_LOOP_C_34 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100100");
        state_var_NS <= INNER_LOOP_C_35;
      WHEN INNER_LOOP_C_35 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100101");
        state_var_NS <= INNER_LOOP_C_36;
      WHEN INNER_LOOP_C_36 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100110");
        state_var_NS <= INNER_LOOP_C_37;
      WHEN INNER_LOOP_C_37 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100111");
        state_var_NS <= INNER_LOOP_C_38;
      WHEN INNER_LOOP_C_38 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101000");
        state_var_NS <= INNER_LOOP_C_39;
      WHEN INNER_LOOP_C_39 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101001");
        state_var_NS <= INNER_LOOP_C_40;
      WHEN INNER_LOOP_C_40 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101010");
        state_var_NS <= INNER_LOOP_C_41;
      WHEN INNER_LOOP_C_41 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101011");
        state_var_NS <= INNER_LOOP_C_42;
      WHEN INNER_LOOP_C_42 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101100");
        state_var_NS <= INNER_LOOP_C_43;
      WHEN INNER_LOOP_C_43 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101101");
        state_var_NS <= INNER_LOOP_C_44;
      WHEN INNER_LOOP_C_44 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101110");
        state_var_NS <= INNER_LOOP_C_45;
      WHEN INNER_LOOP_C_45 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101111");
        state_var_NS <= INNER_LOOP_C_46;
      WHEN INNER_LOOP_C_46 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110000");
        state_var_NS <= INNER_LOOP_C_47;
      WHEN INNER_LOOP_C_47 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110001");
        state_var_NS <= INNER_LOOP_C_48;
      WHEN INNER_LOOP_C_48 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110010");
        state_var_NS <= INNER_LOOP_C_49;
      WHEN INNER_LOOP_C_49 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110011");
        state_var_NS <= INNER_LOOP_C_50;
      WHEN INNER_LOOP_C_50 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110100");
        state_var_NS <= INNER_LOOP_C_51;
      WHEN INNER_LOOP_C_51 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110101");
        state_var_NS <= INNER_LOOP_C_52;
      WHEN INNER_LOOP_C_52 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110110");
        state_var_NS <= INNER_LOOP_C_53;
      WHEN INNER_LOOP_C_53 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110111");
        state_var_NS <= INNER_LOOP_C_54;
      WHEN INNER_LOOP_C_54 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111000");
        state_var_NS <= INNER_LOOP_C_55;
      WHEN INNER_LOOP_C_55 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111001");
        state_var_NS <= INNER_LOOP_C_56;
      WHEN INNER_LOOP_C_56 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111010");
        state_var_NS <= INNER_LOOP_C_57;
      WHEN INNER_LOOP_C_57 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111011");
        state_var_NS <= INNER_LOOP_C_58;
      WHEN INNER_LOOP_C_58 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111100");
        state_var_NS <= INNER_LOOP_C_59;
      WHEN INNER_LOOP_C_59 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111101");
        state_var_NS <= INNER_LOOP_C_60;
      WHEN INNER_LOOP_C_60 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111110");
        state_var_NS <= INNER_LOOP_C_61;
      WHEN INNER_LOOP_C_61 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111111");
        state_var_NS <= INNER_LOOP_C_62;
      WHEN INNER_LOOP_C_62 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000000");
        state_var_NS <= INNER_LOOP_C_63;
      WHEN INNER_LOOP_C_63 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000001");
        state_var_NS <= INNER_LOOP_C_64;
      WHEN INNER_LOOP_C_64 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000010");
        state_var_NS <= INNER_LOOP_C_65;
      WHEN INNER_LOOP_C_65 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000011");
        state_var_NS <= INNER_LOOP_C_66;
      WHEN INNER_LOOP_C_66 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000100");
        state_var_NS <= INNER_LOOP_C_67;
      WHEN INNER_LOOP_C_67 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000101");
        state_var_NS <= INNER_LOOP_C_68;
      WHEN INNER_LOOP_C_68 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000110");
        state_var_NS <= INNER_LOOP_C_69;
      WHEN INNER_LOOP_C_69 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000111");
        state_var_NS <= INNER_LOOP_C_70;
      WHEN INNER_LOOP_C_70 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001000");
        state_var_NS <= INNER_LOOP_C_71;
      WHEN INNER_LOOP_C_71 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001001");
        state_var_NS <= INNER_LOOP_C_72;
      WHEN INNER_LOOP_C_72 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001010");
        state_var_NS <= INNER_LOOP_C_73;
      WHEN INNER_LOOP_C_73 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001011");
        state_var_NS <= INNER_LOOP_C_74;
      WHEN INNER_LOOP_C_74 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001100");
        state_var_NS <= INNER_LOOP_C_75;
      WHEN INNER_LOOP_C_75 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001101");
        state_var_NS <= INNER_LOOP_C_76;
      WHEN INNER_LOOP_C_76 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001110");
        state_var_NS <= INNER_LOOP_C_77;
      WHEN INNER_LOOP_C_77 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001111");
        state_var_NS <= INNER_LOOP_C_78;
      WHEN INNER_LOOP_C_78 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010000");
        state_var_NS <= INNER_LOOP_C_79;
      WHEN INNER_LOOP_C_79 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010001");
        state_var_NS <= INNER_LOOP_C_80;
      WHEN INNER_LOOP_C_80 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010010");
        state_var_NS <= INNER_LOOP_C_81;
      WHEN INNER_LOOP_C_81 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010011");
        state_var_NS <= INNER_LOOP_C_82;
      WHEN INNER_LOOP_C_82 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010100");
        state_var_NS <= INNER_LOOP_C_83;
      WHEN INNER_LOOP_C_83 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010101");
        state_var_NS <= INNER_LOOP_C_84;
      WHEN INNER_LOOP_C_84 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010110");
        state_var_NS <= INNER_LOOP_C_85;
      WHEN INNER_LOOP_C_85 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1010111");
        state_var_NS <= INNER_LOOP_C_86;
      WHEN INNER_LOOP_C_86 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011000");
        state_var_NS <= INNER_LOOP_C_87;
      WHEN INNER_LOOP_C_87 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011001");
        state_var_NS <= INNER_LOOP_C_88;
      WHEN INNER_LOOP_C_88 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011010");
        state_var_NS <= INNER_LOOP_C_89;
      WHEN INNER_LOOP_C_89 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011011");
        state_var_NS <= INNER_LOOP_C_90;
      WHEN INNER_LOOP_C_90 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011100");
        state_var_NS <= INNER_LOOP_C_91;
      WHEN INNER_LOOP_C_91 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011101");
        state_var_NS <= INNER_LOOP_C_92;
      WHEN INNER_LOOP_C_92 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011110");
        state_var_NS <= INNER_LOOP_C_93;
      WHEN INNER_LOOP_C_93 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1011111");
        state_var_NS <= INNER_LOOP_C_94;
      WHEN INNER_LOOP_C_94 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100000");
        state_var_NS <= INNER_LOOP_C_95;
      WHEN INNER_LOOP_C_95 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100001");
        state_var_NS <= INNER_LOOP_C_96;
      WHEN INNER_LOOP_C_96 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100010");
        state_var_NS <= INNER_LOOP_C_97;
      WHEN INNER_LOOP_C_97 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100011");
        state_var_NS <= INNER_LOOP_C_98;
      WHEN INNER_LOOP_C_98 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100100");
        state_var_NS <= INNER_LOOP_C_99;
      WHEN INNER_LOOP_C_99 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100101");
        state_var_NS <= INNER_LOOP_C_100;
      WHEN INNER_LOOP_C_100 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100110");
        state_var_NS <= INNER_LOOP_C_101;
      WHEN INNER_LOOP_C_101 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1100111");
        state_var_NS <= INNER_LOOP_C_102;
      WHEN INNER_LOOP_C_102 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101000");
        state_var_NS <= INNER_LOOP_C_103;
      WHEN INNER_LOOP_C_103 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101001");
        state_var_NS <= INNER_LOOP_C_104;
      WHEN INNER_LOOP_C_104 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101010");
        state_var_NS <= INNER_LOOP_C_105;
      WHEN INNER_LOOP_C_105 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101011");
        state_var_NS <= INNER_LOOP_C_106;
      WHEN INNER_LOOP_C_106 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101100");
        state_var_NS <= INNER_LOOP_C_107;
      WHEN INNER_LOOP_C_107 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101101");
        state_var_NS <= INNER_LOOP_C_108;
      WHEN INNER_LOOP_C_108 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101110");
        state_var_NS <= INNER_LOOP_C_109;
      WHEN INNER_LOOP_C_109 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1101111");
        state_var_NS <= INNER_LOOP_C_110;
      WHEN INNER_LOOP_C_110 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110000");
        state_var_NS <= INNER_LOOP_C_111;
      WHEN INNER_LOOP_C_111 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110001");
        state_var_NS <= INNER_LOOP_C_112;
      WHEN INNER_LOOP_C_112 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110010");
        state_var_NS <= INNER_LOOP_C_113;
      WHEN INNER_LOOP_C_113 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110011");
        state_var_NS <= INNER_LOOP_C_114;
      WHEN INNER_LOOP_C_114 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110100");
        state_var_NS <= INNER_LOOP_C_115;
      WHEN INNER_LOOP_C_115 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110101");
        state_var_NS <= INNER_LOOP_C_116;
      WHEN INNER_LOOP_C_116 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110110");
        state_var_NS <= INNER_LOOP_C_117;
      WHEN INNER_LOOP_C_117 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1110111");
        state_var_NS <= INNER_LOOP_C_118;
      WHEN INNER_LOOP_C_118 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111000");
        state_var_NS <= INNER_LOOP_C_119;
      WHEN INNER_LOOP_C_119 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111001");
        state_var_NS <= INNER_LOOP_C_120;
      WHEN INNER_LOOP_C_120 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111010");
        state_var_NS <= INNER_LOOP_C_121;
      WHEN INNER_LOOP_C_121 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111011");
        state_var_NS <= INNER_LOOP_C_122;
      WHEN INNER_LOOP_C_122 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111100");
        state_var_NS <= INNER_LOOP_C_123;
      WHEN INNER_LOOP_C_123 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111101");
        IF ( INNER_LOOP_C_123_tr0 = '1' ) THEN
          state_var_NS <= OUTER_LOOP_C_1;
        ELSE
          state_var_NS <= INNER_LOOP_C_0;
        END IF;
      WHEN OUTER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111110");
        IF ( OUTER_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= OUTER_LOOP_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1111111");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000");
        state_var_NS <= OUTER_LOOP_C_0;
    END CASE;
  END PROCESS stockham_DIT_core_core_fsm_1;

  stockham_DIT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS stockham_DIT_core_core_fsm_1_REG;

END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_wait_dp IS
  PORT(
    clk : IN STD_LOGIC;
    yt_rsc_cgo_iro : IN STD_LOGIC;
    yt_rsci_clken_d : OUT STD_LOGIC;
    INNER_LOOP_1_b_rem_cmp_z : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_cgo : IN STD_LOGIC;
    INNER_LOOP_1_b_rem_cmp_z_oreg : OUT STD_LOGIC_VECTOR (63 DOWNTO 0)
  );
END stockham_DIT_core_wait_dp;

ARCHITECTURE v14 OF stockham_DIT_core_wait_dp IS
  -- Default Constants

BEGIN
  yt_rsci_clken_d <= yt_rsc_cgo OR yt_rsc_cgo_iro;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      INNER_LOOP_1_b_rem_cmp_z_oreg <= INNER_LOOP_1_b_rem_cmp_z;
    END IF;
  END PROCESS;
END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_lz : OUT STD_LOGIC;
    xt_rsci_adra_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsci_da_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsci_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsci_adrb_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsci_qb_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsci_clken_d : OUT STD_LOGIC;
    yt_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    yt_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    INNER_LOOP_1_b_rem_cmp_a : OUT STD_LOGIC_VECTOR (127 DOWNTO 0);
    INNER_LOOP_1_b_rem_cmp_b : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    INNER_LOOP_1_b_rem_cmp_z : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsci_wea_d_pff : OUT STD_LOGIC;
    yt_rsci_we_d_pff : OUT STD_LOGIC
  );
END stockham_DIT_core;

ARCHITECTURE v14 OF stockham_DIT_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_result_rem_cmp_z : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z_oreg : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_result_rem_cmp_a_63_0 : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL xor_dcpl_3 : STD_LOGIC;
  SIGNAL and_dcpl_8 : STD_LOGIC;
  SIGNAL and_dcpl_9 : STD_LOGIC;
  SIGNAL and_dcpl_10 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_12 : STD_LOGIC;
  SIGNAL and_dcpl_13 : STD_LOGIC;
  SIGNAL and_dcpl_15 : STD_LOGIC;
  SIGNAL and_dcpl_17 : STD_LOGIC;
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL and_dcpl_19 : STD_LOGIC;
  SIGNAL and_dcpl_20 : STD_LOGIC;
  SIGNAL and_dcpl_22 : STD_LOGIC;
  SIGNAL and_dcpl_24 : STD_LOGIC;
  SIGNAL and_dcpl_25 : STD_LOGIC;
  SIGNAL and_dcpl_26 : STD_LOGIC;
  SIGNAL and_dcpl_27 : STD_LOGIC;
  SIGNAL and_dcpl_28 : STD_LOGIC;
  SIGNAL and_dcpl_30 : STD_LOGIC;
  SIGNAL and_dcpl_31 : STD_LOGIC;
  SIGNAL and_dcpl_32 : STD_LOGIC;
  SIGNAL and_dcpl_35 : STD_LOGIC;
  SIGNAL and_dcpl_36 : STD_LOGIC;
  SIGNAL and_dcpl_37 : STD_LOGIC;
  SIGNAL and_dcpl_39 : STD_LOGIC;
  SIGNAL and_dcpl_40 : STD_LOGIC;
  SIGNAL and_dcpl_41 : STD_LOGIC;
  SIGNAL mux_tmp_9 : STD_LOGIC;
  SIGNAL or_tmp_10 : STD_LOGIC;
  SIGNAL or_tmp_11 : STD_LOGIC;
  SIGNAL not_tmp_32 : STD_LOGIC;
  SIGNAL and_dcpl_53 : STD_LOGIC;
  SIGNAL and_dcpl_55 : STD_LOGIC;
  SIGNAL xor_dcpl_4 : STD_LOGIC;
  SIGNAL and_dcpl_59 : STD_LOGIC;
  SIGNAL and_dcpl_70 : STD_LOGIC;
  SIGNAL or_tmp_23 : STD_LOGIC;
  SIGNAL or_tmp_26 : STD_LOGIC;
  SIGNAL nor_tmp_12 : STD_LOGIC;
  SIGNAL mux_tmp_28 : STD_LOGIC;
  SIGNAL and_dcpl_90 : STD_LOGIC;
  SIGNAL and_tmp : STD_LOGIC;
  SIGNAL or_dcpl_8 : STD_LOGIC;
  SIGNAL or_dcpl_12 : STD_LOGIC;
  SIGNAL or_dcpl_13 : STD_LOGIC;
  SIGNAL and_dcpl_94 : STD_LOGIC;
  SIGNAL and_dcpl_98 : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_7 : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_9 : STD_LOGIC;
  SIGNAL y_3_sva : STD_LOGIC;
  SIGNAL y_1_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_b_nor_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL x_3_sva : STD_LOGIC;
  SIGNAL x_1_sva : STD_LOGIC;
  SIGNAL OUTER_LOOP_nn_or_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_cgo_cse : STD_LOGIC;
  SIGNAL reg_xt_rsc_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL or_70_cse : STD_LOGIC;
  SIGNAL reg_INNER_LOOP_1_modulo_dev_result_rem_cmp_b_63_0_cse : STD_LOGIC_VECTOR
      (63 DOWNTO 0);
  SIGNAL and_106_cse : STD_LOGIC;
  SIGNAL modulo_dev_qelse_mux_1_cse : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_112_cse : STD_LOGIC;
  SIGNAL nor_24_cse : STD_LOGIC;
  SIGNAL mux_8_cse : STD_LOGIC;
  SIGNAL mux_22_rmff : STD_LOGIC;
  SIGNAL xt_rsci_adra_d_mx0w0_9_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_a_acc_psp_2_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_acc_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL pref_y_idx_pref_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL s_0_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_upper_slc_INNER_LOOP_upper_acc_psp_10_8_0_1_0_2_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva : STD_LOGIC_VECTOR
      (8 DOWNTO 0);
  SIGNAL pref_x_idx_pref_1_9_0_1_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pref_x_idx_pref_1_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_adra_d_mx0c2 : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_2_psp : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_upper_and_psp_sva_mx0w1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL OUTER_LOOP_acc_2_itm : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_upper_and_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_upper_acc_psp_10_8_0_1_sva_0 : STD_LOGIC;
  SIGNAL and_dcpl_105 : STD_LOGIC;
  SIGNAL and_dcpl_106 : STD_LOGIC;
  SIGNAL and_dcpl_111 : STD_LOGIC;
  SIGNAL and_dcpl_112 : STD_LOGIC;
  SIGNAL and_dcpl_115 : STD_LOGIC;
  SIGNAL and_dcpl_118 : STD_LOGIC;
  SIGNAL z_out : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL and_dcpl_127 : STD_LOGIC;
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_dcpl_137 : STD_LOGIC;
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL and_dcpl_145 : STD_LOGIC;
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_dcpl_152 : STD_LOGIC;
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL s_4_sva : STD_LOGIC;
  SIGNAL s_5_sva : STD_LOGIC;
  SIGNAL s_3_sva : STD_LOGIC;
  SIGNAL s_6_sva : STD_LOGIC;
  SIGNAL s_2_sva : STD_LOGIC;
  SIGNAL s_7_sva : STD_LOGIC;
  SIGNAL s_1_sva : STD_LOGIC;
  SIGNAL s_8_sva : STD_LOGIC;
  SIGNAL s_9_sva : STD_LOGIC;
  SIGNAL OUTER_LOOP_nn_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL OUTER_LOOP_m_lshift_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_2_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_acc_5_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_w_asn_3_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_acc_2_psp_mx0w0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_mx0c : STD_LOGIC;
  SIGNAL INNER_LOOP_1_q_and_psp_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 : STD_LOGIC_VECTOR
      (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_acc_2_psp_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_2_psp_mx0c1 : STD_LOGIC;
  SIGNAL and_87_rgt : STD_LOGIC;
  SIGNAL OUTER_LOOP_or_1_ssc : STD_LOGIC;
  SIGNAL OUTER_LOOP_nor_itm : STD_LOGIC;
  SIGNAL OUTER_LOOP_m_or_itm : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_itm_2_1 : STD_LOGIC;

  SIGNAL s_mux_nl : STD_LOGIC;
  SIGNAL nor_17_nl : STD_LOGIC;
  SIGNAL mux_21_nl : STD_LOGIC;
  SIGNAL mux_20_nl : STD_LOGIC;
  SIGNAL or_26_nl : STD_LOGIC;
  SIGNAL or_24_nl : STD_LOGIC;
  SIGNAL or_22_nl : STD_LOGIC;
  SIGNAL and_109_nl : STD_LOGIC;
  SIGNAL mux_19_nl : STD_LOGIC;
  SIGNAL nor_18_nl : STD_LOGIC;
  SIGNAL mux_18_nl : STD_LOGIC;
  SIGNAL nor_6_nl : STD_LOGIC;
  SIGNAL mux_25_nl : STD_LOGIC;
  SIGNAL mux_24_nl : STD_LOGIC;
  SIGNAL mux_23_nl : STD_LOGIC;
  SIGNAL nand_1_nl : STD_LOGIC;
  SIGNAL and_72_nl : STD_LOGIC;
  SIGNAL nor_35_nl : STD_LOGIC;
  SIGNAL mux_26_nl : STD_LOGIC;
  SIGNAL or_32_nl : STD_LOGIC;
  SIGNAL nor_33_nl : STD_LOGIC;
  SIGNAL mux_27_nl : STD_LOGIC;
  SIGNAL and_107_nl : STD_LOGIC;
  SIGNAL and_80_nl : STD_LOGIC;
  SIGNAL mux_28_nl : STD_LOGIC;
  SIGNAL or_35_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_t_mux_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_89_nl : STD_LOGIC;
  SIGNAL mux_31_nl : STD_LOGIC;
  SIGNAL nor_38_nl : STD_LOGIC;
  SIGNAL nor_39_nl : STD_LOGIC;
  SIGNAL mux_35_nl : STD_LOGIC;
  SIGNAL mux_34_nl : STD_LOGIC;
  SIGNAL mux_38_nl : STD_LOGIC;
  SIGNAL mux_37_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_3_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL mux_40_nl : STD_LOGIC;
  SIGNAL mux_39_nl : STD_LOGIC;
  SIGNAL mux_42_nl : STD_LOGIC;
  SIGNAL or_50_nl : STD_LOGIC;
  SIGNAL or_49_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL nor_25_nl : STD_LOGIC;
  SIGNAL and_113_nl : STD_LOGIC;
  SIGNAL or_11_nl : STD_LOGIC;
  SIGNAL nor_19_nl : STD_LOGIC;
  SIGNAL mux_16_nl : STD_LOGIC;
  SIGNAL mux_15_nl : STD_LOGIC;
  SIGNAL nor_20_nl : STD_LOGIC;
  SIGNAL nor_21_nl : STD_LOGIC;
  SIGNAL nor_16_nl : STD_LOGIC;
  SIGNAL mux_33_nl : STD_LOGIC;
  SIGNAL nor_15_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL INNER_LOOP_a_mux1h_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_a_or_2_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_mux1h_9_nl : STD_LOGIC;
  SIGNAL and_44_nl : STD_LOGIC;
  SIGNAL mux_14_nl : STD_LOGIC;
  SIGNAL or_12_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_mux1h_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_a_and_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_mux1h_10_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_mux1h_3_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_a_or_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_or_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_mux_1_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_5_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_5_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_6_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_6_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_7_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_7_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_8_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_8_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_9_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_9_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux1h_4_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux1h_5_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL OUTER_LOOP_OUTER_LOOP_or_1_nl : STD_LOGIC;
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL modulo_dev_qelse_mux_3_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_dev_qelse_or_1_nl : STD_LOGIC;
  SIGNAL modulo_dev_qelse_mux_4_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_mux_5_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_mux_6_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL INNER_LOOP_1_modulo_dev_result_rem_cmp_a : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_result_rem_cmp_b : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_result_rem_cmp_z_1 : STD_LOGIC_VECTOR (64 DOWNTO
      0);

  SIGNAL INNER_LOOP_1_w_rshift_rg_a : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_z : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL INNER_LOOP_1_w_lshift_rg_a : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT stockham_DIT_core_wait_dp
    PORT(
      clk : IN STD_LOGIC;
      yt_rsc_cgo_iro : IN STD_LOGIC;
      yt_rsci_clken_d : OUT STD_LOGIC;
      INNER_LOOP_1_b_rem_cmp_z : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_cgo : IN STD_LOGIC;
      INNER_LOOP_1_b_rem_cmp_z_oreg : OUT STD_LOGIC_VECTOR (63 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z : STD_LOGIC_VECTOR
      (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z_oreg : STD_LOGIC_VECTOR
      (63 DOWNTO 0);

  COMPONENT stockham_DIT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      INNER_LOOP_C_123_tr0 : IN STD_LOGIC;
      OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_123_tr0 : STD_LOGIC;
  SIGNAL stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_5_2(input_4 : STD_LOGIC;
  input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
      tmp := sel(4);
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_128_3_2(input_2 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(127 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(127 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_3_3_2(input_2 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_3_2(input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_4_2(input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_3_2(input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_4_2(input_3 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_7_2(input_6 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 2,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  xt_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_obj_ld_cse,
      lz => xt_rsc_triosy_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  g_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_obj_ld_cse,
      lz => g_rsc_triosy_lz
    );
  twiddle_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_obj_ld_cse,
      lz => twiddle_rsc_triosy_lz
    );
  INNER_LOOP_1_modulo_dev_result_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 65,
      width_b => 65,
      signd => 1
      )
    PORT MAP(
      a => INNER_LOOP_1_modulo_dev_result_rem_cmp_a,
      b => INNER_LOOP_1_modulo_dev_result_rem_cmp_b,
      z => INNER_LOOP_1_modulo_dev_result_rem_cmp_z_1
    );
  INNER_LOOP_1_modulo_dev_result_rem_cmp_a <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(INNER_LOOP_1_modulo_dev_result_rem_cmp_a_63_0),65));
  INNER_LOOP_1_modulo_dev_result_rem_cmp_b <= STD_LOGIC_VECTOR(UNSIGNED'( "0") &
      UNSIGNED(reg_INNER_LOOP_1_modulo_dev_result_rem_cmp_b_63_0_cse));
  INNER_LOOP_1_modulo_dev_result_rem_cmp_z <= INNER_LOOP_1_modulo_dev_result_rem_cmp_z_1;

  INNER_LOOP_1_w_rshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_r_v5
    GENERIC MAP(
      width_a => 9,
      signd_a => 0,
      width_s => 4,
      width_z => 8
      )
    PORT MAP(
      a => INNER_LOOP_1_w_rshift_rg_a,
      s => INNER_LOOP_1_w_rshift_rg_s,
      z => INNER_LOOP_1_w_rshift_rg_z
    );
  INNER_LOOP_1_w_rshift_rg_a <= (MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1,
      INNER_LOOP_1_upper_and_psp_sva, and_dcpl_145)) & ((NOT INNER_LOOP_upper_acc_psp_10_8_0_1_sva_0)
      AND and_dcpl_145);
  INNER_LOOP_1_w_rshift_rg_s <= OUTER_LOOP_acc_2_itm;
  z_out_3 <= INNER_LOOP_1_w_rshift_rg_z;

  INNER_LOOP_1_w_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 8,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => INNER_LOOP_1_w_lshift_rg_a,
      s => INNER_LOOP_1_w_lshift_rg_s,
      z => INNER_LOOP_1_w_lshift_rg_z
    );
  INNER_LOOP_1_w_lshift_rg_a <= MUX_v_8_2_2(STD_LOGIC_VECTOR'( "00000001"), z_out_3,
      OUTER_LOOP_m_or_itm);
  INNER_LOOP_1_w_lshift_rg_s <= MUX_v_4_2_2((z_out(3 DOWNTO 0)), OUTER_LOOP_acc_2_itm,
      OUTER_LOOP_m_or_itm);
  z_out_4 <= INNER_LOOP_1_w_lshift_rg_z;

  stockham_DIT_core_wait_dp_inst : stockham_DIT_core_wait_dp
    PORT MAP(
      clk => clk,
      yt_rsc_cgo_iro => mux_22_rmff,
      yt_rsci_clken_d => yt_rsci_clken_d,
      INNER_LOOP_1_b_rem_cmp_z => stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z,
      yt_rsc_cgo => reg_yt_rsc_cgo_cse,
      INNER_LOOP_1_b_rem_cmp_z_oreg => stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z_oreg
    );
  stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z <= INNER_LOOP_1_b_rem_cmp_z;
  INNER_LOOP_1_b_rem_cmp_z_oreg <= stockham_DIT_core_wait_dp_inst_INNER_LOOP_1_b_rem_cmp_z_oreg;

  stockham_DIT_core_core_fsm_inst : stockham_DIT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => stockham_DIT_core_core_fsm_inst_fsm_output,
      INNER_LOOP_C_123_tr0 => stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_123_tr0,
      OUTER_LOOP_C_1_tr0 => stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0
    );
  fsm_output <= stockham_DIT_core_core_fsm_inst_fsm_output;
  stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_123_tr0 <= INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(8);
  stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 <= NOT OUTER_LOOP_acc_itm_2_1;

  OUTER_LOOP_nn_or_cse <= and_dcpl_19 OR and_dcpl_13;
  or_26_nl <= (fsm_output(4)) OR (NOT (fsm_output(1))) OR y_1_sva OR (NOT y_3_sva);
  or_24_nl <= (fsm_output(4)) OR (fsm_output(1)) OR y_1_sva OR (NOT y_3_sva);
  mux_20_nl <= MUX_s_1_2_2(or_26_nl, or_24_nl, fsm_output(6));
  or_22_nl <= (fsm_output(6)) OR (fsm_output(0)) OR (fsm_output(4)) OR (fsm_output(1))
      OR y_1_sva OR (NOT y_3_sva);
  mux_21_nl <= MUX_s_1_2_2(mux_20_nl, or_22_nl, fsm_output(2));
  nor_17_nl <= NOT((fsm_output(5)) OR mux_21_nl);
  nor_18_nl <= NOT((fsm_output(6)) OR (NOT (fsm_output(0))) OR (NOT (fsm_output(4)))
      OR (NOT (fsm_output(1))) OR y_1_sva OR (NOT y_3_sva));
  mux_18_nl <= MUX_s_1_2_2((fsm_output(1)), (NOT (fsm_output(1))), fsm_output(6));
  nor_6_nl <= NOT(x_1_sva OR (NOT x_3_sva));
  mux_19_nl <= MUX_s_1_2_2(nor_18_nl, mux_18_nl, nor_6_nl);
  and_109_nl <= (fsm_output(5)) AND (fsm_output(2)) AND mux_19_nl;
  mux_22_rmff <= MUX_s_1_2_2(nor_17_nl, and_109_nl, fsm_output(3));
  or_70_cse <= (fsm_output(1)) OR (fsm_output(6));
  and_106_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  INNER_LOOP_1_b_rem_cmp_b <= reg_INNER_LOOP_1_modulo_dev_result_rem_cmp_b_63_0_cse;
  and_87_rgt <= and_dcpl_12 AND and_dcpl_36 AND (fsm_output(0)) AND (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(8));
  modulo_dev_qelse_mux_1_cse <= MUX_v_64_2_2((INNER_LOOP_1_modulo_dev_result_rem_cmp_z(63
      DOWNTO 0)), z_out_1, INNER_LOOP_1_modulo_dev_result_rem_cmp_z(63));
  INNER_LOOP_b_acc_2_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1
      & '0') + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      8), 9), 9));
  xt_rsci_adra_d_mx0w0_9_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(INNER_LOOP_b_acc_2_nl),
      9) + UNSIGNED'( s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva &
      s_3_sva & s_2_sva & s_1_sva), 9));
  INNER_LOOP_1_acc_2_psp_mx0w0 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(INNER_LOOP_1_acc_2_psp)
      + SIGNED(INNER_LOOP_1_b_rem_cmp_z_oreg), 64));
  INNER_LOOP_1_upper_and_psp_sva_mx0w1 <= (NOT (z_out(8 DOWNTO 1))) AND INNER_LOOP_1_upper_and_psp_sva;
  INNER_LOOP_1_q_and_psp_sva_1 <= (z_out(8 DOWNTO 1)) AND INNER_LOOP_1_upper_and_psp_sva;
  INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      8), 9) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1),
      8), 9), 9));
  INNER_LOOP_b_INNER_LOOP_b_and_7 <= y_1_sva AND (NOT y_3_sva);
  INNER_LOOP_b_INNER_LOOP_b_and_9 <= y_3_sva AND (NOT y_1_sva);
  xor_dcpl_3 <= y_3_sva XOR y_1_sva;
  and_112_cse <= (fsm_output(6)) AND (fsm_output(2)) AND (fsm_output(1)) AND (fsm_output(4))
      AND (fsm_output(3));
  nor_24_cse <= NOT((fsm_output(6)) OR (fsm_output(2)) OR (fsm_output(1)) OR (fsm_output(4))
      OR (fsm_output(3)));
  nor_25_nl <= NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("000000")));
  and_113_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 1)=STD_LOGIC_VECTOR'("111111"));
  mux_8_cse <= MUX_s_1_2_2(nor_25_nl, and_113_nl, fsm_output(0));
  and_dcpl_8 <= (fsm_output(1)) AND (fsm_output(5));
  and_dcpl_9 <= and_dcpl_8 AND (NOT (fsm_output(0)));
  and_dcpl_10 <= (fsm_output(2)) AND (fsm_output(6));
  and_dcpl_11 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11"));
  and_dcpl_12 <= and_dcpl_11 AND and_dcpl_10;
  and_dcpl_13 <= and_dcpl_12 AND and_dcpl_9;
  and_dcpl_15 <= NOT((fsm_output(1)) OR (fsm_output(5)) OR (fsm_output(0)));
  and_dcpl_17 <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_18 <= and_dcpl_17 AND (NOT (fsm_output(2))) AND (NOT (fsm_output(6)));
  and_dcpl_19 <= and_dcpl_18 AND and_dcpl_15;
  and_dcpl_20 <= (fsm_output(1)) AND (NOT (fsm_output(5)));
  and_dcpl_22 <= and_dcpl_18 AND and_dcpl_20 AND (NOT (fsm_output(0)));
  and_dcpl_24 <= and_dcpl_18 AND and_dcpl_20 AND (fsm_output(0));
  and_dcpl_25 <= and_dcpl_8 AND (fsm_output(0));
  and_dcpl_26 <= (fsm_output(2)) AND (NOT (fsm_output(6)));
  and_dcpl_27 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_28 <= and_dcpl_27 AND and_dcpl_26;
  and_dcpl_30 <= and_dcpl_11 AND and_dcpl_26;
  and_dcpl_31 <= and_dcpl_30 AND and_dcpl_9;
  and_dcpl_32 <= and_dcpl_30 AND and_dcpl_25;
  and_dcpl_35 <= and_dcpl_17 AND (NOT (fsm_output(2))) AND (fsm_output(6)) AND and_dcpl_15;
  and_dcpl_36 <= (NOT (fsm_output(1))) AND (fsm_output(5));
  and_dcpl_37 <= and_dcpl_36 AND (NOT (fsm_output(0)));
  and_dcpl_39 <= and_dcpl_27 AND and_dcpl_10 AND and_dcpl_37;
  and_dcpl_40 <= and_dcpl_12 AND and_dcpl_37;
  and_dcpl_41 <= (fsm_output(2)) AND (fsm_output(5));
  or_11_nl <= (fsm_output(6)) OR (NOT (fsm_output(4)));
  mux_tmp_9 <= MUX_s_1_2_2((NOT (fsm_output(6))), or_11_nl, fsm_output(1));
  or_tmp_10 <= (fsm_output(6)) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  or_tmp_11 <= (NOT (fsm_output(6))) OR (fsm_output(2)) OR (fsm_output(3)) OR (fsm_output(4));
  mux_16_nl <= MUX_s_1_2_2(or_tmp_11, or_tmp_10, fsm_output(1));
  nor_19_nl <= NOT((fsm_output(5)) OR mux_16_nl);
  nor_20_nl <= NOT((NOT (fsm_output(1))) OR (fsm_output(6)) OR (fsm_output(2)) OR
      (fsm_output(3)) OR (fsm_output(4)));
  nor_21_nl <= NOT((NOT (fsm_output(1))) OR (fsm_output(6)) OR (NOT(CONV_SL_1_1(fsm_output(4
      DOWNTO 2)=STD_LOGIC_VECTOR'("111")))));
  mux_15_nl <= MUX_s_1_2_2(nor_20_nl, nor_21_nl, fsm_output(5));
  not_tmp_32 <= MUX_s_1_2_2(nor_19_nl, mux_15_nl, fsm_output(0));
  and_dcpl_53 <= and_dcpl_17 AND (NOT (fsm_output(2)));
  and_dcpl_55 <= and_dcpl_28 AND and_dcpl_9;
  xor_dcpl_4 <= (fsm_output(6)) XOR (fsm_output(1));
  and_dcpl_59 <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("11"));
  and_dcpl_70 <= and_dcpl_11 AND xor_dcpl_4 AND (fsm_output(2)) AND (NOT (fsm_output(5)))
      AND (NOT (fsm_output(0)));
  or_tmp_23 <= (or_70_cse AND CONV_SL_1_1(fsm_output(3 DOWNTO 2)=STD_LOGIC_VECTOR'("11")))
      OR (fsm_output(4));
  or_tmp_26 <= (fsm_output(6)) OR (NOT (fsm_output(2)));
  nor_tmp_12 <= CONV_SL_1_1(fsm_output(4 DOWNTO 1)=STD_LOGIC_VECTOR'("1111"));
  nor_16_nl <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 1)/=STD_LOGIC_VECTOR'("0000")));
  mux_tmp_28 <= MUX_s_1_2_2(nor_16_nl, nor_tmp_12, fsm_output(5));
  nor_15_nl <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 2)/=STD_LOGIC_VECTOR'("0000")));
  mux_33_nl <= MUX_s_1_2_2(nor_15_nl, mux_tmp_28, fsm_output(0));
  and_dcpl_90 <= NOT(mux_33_nl OR (fsm_output(6)));
  and_tmp <= (fsm_output(6)) AND (and_dcpl_59 OR (fsm_output(4)));
  or_dcpl_8 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_12 <= (NOT (fsm_output(1))) OR (fsm_output(5)) OR (fsm_output(0));
  or_dcpl_13 <= or_tmp_10 OR or_dcpl_12;
  and_dcpl_94 <= NOT((fsm_output(5)) OR (fsm_output(0)));
  and_dcpl_98 <= NOT((NOT((fsm_output(2)) XOR (fsm_output(6)))) OR (fsm_output(4))
      OR (fsm_output(3)) OR (fsm_output(1)));
  xt_rsci_adra_d_mx0c2 <= and_dcpl_28 AND and_dcpl_25;
  drf_y_smx_lpi_3_dfm_mx0c <= and_dcpl_17 AND xor_dcpl_4 AND (NOT (fsm_output(2)))
      AND (NOT (fsm_output(5))) AND (fsm_output(0));
  INNER_LOOP_1_acc_2_psp_mx0c0 <= and_dcpl_98 AND and_dcpl_94 AND INNER_LOOP_b_INNER_LOOP_b_and_9;
  INNER_LOOP_1_acc_2_psp_mx0c1 <= and_dcpl_98 AND and_dcpl_94 AND ((NOT y_3_sva)
      OR y_1_sva);
  OUTER_LOOP_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out(3 DOWNTO 1)) + SIGNED'(
      "011"), 3));
  OUTER_LOOP_acc_itm_2_1 <= OUTER_LOOP_acc_nl(2);
  INNER_LOOP_a_or_2_nl <= xt_rsci_adra_d_mx0c2 OR and_dcpl_39;
  INNER_LOOP_a_mux1h_nl <= MUX1HOT_v_9_7_2(xt_rsci_adra_d_mx0w0_9_1, (INNER_LOOP_a_acc_psp_2_sva
      & INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO 1)), INNER_LOOP_a_acc_psp_sva, (pref_y_idx_pref_9_0_sva(9
      DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9 DOWNTO 1)), STD_LOGIC_VECTOR'( and_dcpl_22
      & and_dcpl_24 & INNER_LOOP_a_or_2_nl & and_dcpl_31 & and_dcpl_32 & and_dcpl_35
      & and_dcpl_40));
  INNER_LOOP_a_mux1h_9_nl <= MUX1HOT_s_1_5_2(s_0_sva, (pref_x_idx_pref_1_9_0_1_sva(0)),
      INNER_LOOP_upper_slc_INNER_LOOP_upper_acc_psp_10_8_0_1_0_2_itm, (pref_y_idx_pref_9_0_sva(0)),
      (pref_x_idx_pref_1_9_0_sva(0)), STD_LOGIC_VECTOR'( and_dcpl_22 & and_dcpl_31
      & and_dcpl_32 & and_dcpl_35 & and_dcpl_40));
  INNER_LOOP_a_or_nl <= (INNER_LOOP_a_mux1h_9_nl AND (NOT(and_dcpl_24 OR xt_rsci_adra_d_mx0c2)))
      OR and_dcpl_39;
  xt_rsci_adra_d <= INNER_LOOP_a_mux1h_nl & INNER_LOOP_a_or_nl;
  and_44_nl <= (NOT mux_tmp_9) AND (fsm_output(3)) AND and_dcpl_41 AND (NOT (fsm_output(0)));
  xt_rsci_da_d <= MUX_v_64_2_2(INNER_LOOP_1_acc_2_psp, modulo_dev_qelse_mux_1_cse,
      and_44_nl);
  or_12_nl <= (NOT (fsm_output(1))) OR (fsm_output(6)) OR (fsm_output(4));
  mux_14_nl <= MUX_s_1_2_2(mux_tmp_9, or_12_nl, fsm_output(0));
  xt_rsci_wea_d_pff <= (NOT mux_14_nl) AND (fsm_output(3)) AND and_dcpl_41 AND (NOT
      x_3_sva) AND x_1_sva;
  xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d <= not_tmp_32 AND (NOT y_3_sva) AND y_1_sva;
  twiddle_rsci_adrb_d <= z_out_4;
  twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d <= and_dcpl_53 AND (NOT (fsm_output(6)))
      AND (fsm_output(1)) AND (NOT (fsm_output(5)));
  yt_rsci_d_d <= modulo_dev_qelse_mux_1_cse;
  INNER_LOOP_a_mux1h_2_nl <= MUX1HOT_v_9_4_2(xt_rsci_adra_d_mx0w0_9_1, (INNER_LOOP_a_acc_psp_2_sva
      & INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm), INNER_LOOP_a_acc_psp_sva,
      (pref_y_idx_pref_9_0_sva(9 DOWNTO 1)), STD_LOGIC_VECTOR'( and_dcpl_22 & and_dcpl_24
      & and_dcpl_32 & and_dcpl_35));
  INNER_LOOP_a_mux1h_10_nl <= MUX1HOT_s_1_3_2(s_0_sva, INNER_LOOP_upper_slc_INNER_LOOP_upper_acc_psp_10_8_0_1_0_2_itm,
      (pref_y_idx_pref_9_0_sva(0)), STD_LOGIC_VECTOR'( and_dcpl_22 & and_dcpl_32
      & and_dcpl_35));
  INNER_LOOP_a_and_nl <= INNER_LOOP_a_mux1h_10_nl AND (NOT and_dcpl_24);
  yt_rsci_radr_d <= INNER_LOOP_a_mux1h_2_nl & INNER_LOOP_a_and_nl;
  INNER_LOOP_a_or_1_nl <= and_dcpl_55 OR and_dcpl_39;
  INNER_LOOP_a_mux1h_3_nl <= MUX1HOT_v_9_3_2(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9 DOWNTO
      1)), STD_LOGIC_VECTOR'( INNER_LOOP_a_or_1_nl & and_dcpl_31 & and_dcpl_40));
  INNER_LOOP_a_mux_1_nl <= MUX_s_1_2_2((pref_x_idx_pref_1_9_0_1_sva(0)), (pref_x_idx_pref_1_9_0_sva(0)),
      and_dcpl_40);
  INNER_LOOP_a_INNER_LOOP_a_or_nl <= (INNER_LOOP_a_mux_1_nl AND (NOT and_dcpl_55))
      OR and_dcpl_39;
  yt_rsci_wadr_d <= INNER_LOOP_a_mux1h_3_nl & INNER_LOOP_a_INNER_LOOP_a_or_nl;
  yt_rsci_we_d_pff <= and_dcpl_59 AND xor_dcpl_4 AND (fsm_output(5)) AND (NOT (fsm_output(0)))
      AND x_3_sva AND (NOT x_1_sva);
  yt_rsci_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_32 AND INNER_LOOP_b_INNER_LOOP_b_and_9;
  and_dcpl_105 <= CONV_SL_1_1(fsm_output(5 DOWNTO 2)=STD_LOGIC_VECTOR'("1111"));
  and_dcpl_106 <= and_dcpl_105 AND (NOT (fsm_output(1))) AND (fsm_output(6)) AND
      (fsm_output(0));
  and_dcpl_111 <= and_dcpl_17 AND (NOT((fsm_output(2)) OR (fsm_output(5))));
  and_dcpl_112 <= and_dcpl_111 AND (NOT (fsm_output(1))) AND (NOT (fsm_output(6)))
      AND (fsm_output(0));
  and_dcpl_115 <= and_dcpl_105 AND (fsm_output(1)) AND (fsm_output(6)) AND (NOT (fsm_output(0)));
  and_dcpl_118 <= and_dcpl_111 AND (fsm_output(1)) AND (NOT (fsm_output(6))) AND
      (NOT (fsm_output(0)));
  and_dcpl_127 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11")) AND
      xor_dcpl_4 AND (fsm_output(2)) AND (NOT (fsm_output(5))) AND (NOT (fsm_output(0)));
  and_dcpl_137 <= NOT(CONV_SL_1_1(fsm_output/=STD_LOGIC_VECTOR'("0000010")));
  and_dcpl_145 <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("0000011"));
  and_dcpl_152 <= (fsm_output(1)) AND (NOT (fsm_output(6)));
  OUTER_LOOP_or_1_ssc <= and_dcpl_112 OR and_dcpl_115;
  OUTER_LOOP_nor_itm <= NOT(and_dcpl_112 OR and_dcpl_115);
  OUTER_LOOP_m_or_itm <= (and_dcpl_111 AND and_dcpl_152 AND (NOT (fsm_output(0))))
      OR (and_dcpl_111 AND and_dcpl_152 AND (fsm_output(0)));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_yt_rsc_cgo_cse <= '0';
        reg_xt_rsc_triosy_obj_ld_cse <= '0';
      ELSE
        reg_yt_rsc_cgo_cse <= mux_22_rmff;
        reg_xt_rsc_triosy_obj_ld_cse <= and_dcpl_12 AND and_dcpl_8 AND (NOT (fsm_output(0)))
            AND (NOT OUTER_LOOP_acc_itm_2_1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      s_0_sva <= s_mux_nl AND (NOT mux_8_cse);
      INNER_LOOP_1_modulo_dev_result_rem_cmp_a_63_0 <= MUX1HOT_v_64_3_2(INNER_LOOP_1_acc_2_psp_mx0w0,
          INNER_LOOP_1_acc_2_psp, INNER_LOOP_1_acc_5_itm, STD_LOGIC_VECTOR'( and_dcpl_70
          & (NOT mux_25_nl) & and_72_nl));
      reg_INNER_LOOP_1_modulo_dev_result_rem_cmp_b_63_0_cse <= p_sva;
      INNER_LOOP_1_b_rem_cmp_a <= MUX1HOT_v_128_3_2(z_out_2, INNER_LOOP_1_b_mul_mut,
          INNER_LOOP_2_b_mul_mut, STD_LOGIC_VECTOR'( nor_35_nl & nor_33_nl & and_80_nl));
      INNER_LOOP_1_upper_and_psp_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"),
          INNER_LOOP_t_mux_nl, mux_31_nl);
      INNER_LOOP_upper_acc_psp_10_8_0_1_sva_0 <= z_out(0);
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( mux_8_cse = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( OUTER_LOOP_nn_or_cse = '1' ) THEN
        OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "0001"), (z_out(3
            DOWNTO 0)), and_dcpl_13);
        s_9_sva <= NOT and_dcpl_13;
        s_8_sva <= s_9_sva AND and_dcpl_13;
        s_7_sva <= s_8_sva AND and_dcpl_13;
        s_6_sva <= s_7_sva AND and_dcpl_13;
        s_5_sva <= s_6_sva AND and_dcpl_13;
        s_4_sva <= s_5_sva AND and_dcpl_13;
        s_3_sva <= s_4_sva AND and_dcpl_13;
        s_2_sva <= s_3_sva AND and_dcpl_13;
        s_1_sva <= s_2_sva AND and_dcpl_13;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        x_3_sva <= '0';
        x_1_sva <= '0';
        y_1_sva <= '0';
        y_3_sva <= '0';
      ELSIF ( OUTER_LOOP_nn_or_cse = '1' ) THEN
        x_3_sva <= y_3_sva OR and_dcpl_19;
        x_1_sva <= y_1_sva AND (NOT and_dcpl_19);
        y_1_sva <= x_1_sva OR and_dcpl_19;
        y_3_sva <= x_3_sva AND (NOT and_dcpl_19);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (((NOT INNER_LOOP_b_nor_itm) OR INNER_LOOP_b_INNER_LOOP_b_and_7 OR INNER_LOOP_b_INNER_LOOP_b_and_9)
          AND drf_y_smx_lpi_3_dfm_mx0c) = '1' ) THEN
        drf_y_smx_lpi_3_dfm <= MUX_v_64_2_2(xt_rsci_qa_d, yt_rsci_q_d, INNER_LOOP_b_and_1_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_8_cse OR and_87_rgt) = '1' ) THEN
        OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "1001"), (z_out(3
            DOWNTO 0)), and_87_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(nor_24_cse, and_112_cse, fsm_output(5))) = '1' ) THEN
        OUTER_LOOP_m_lshift_psp_sva <= z_out_4(8 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( xor_dcpl_3 = '1' ) THEN
        INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm <= INNER_LOOP_1_q_and_psp_sva_1(0);
        INNER_LOOP_a_acc_psp_2_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1(7
            DOWNTO 1)), 7), 8) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1),
            8));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_90 = '0' ) THEN
        INNER_LOOP_upper_slc_INNER_LOOP_upper_acc_psp_10_8_0_1_0_2_itm <= z_out(0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_35_nl, mux_34_nl, fsm_output(0))) = '1' ) THEN
        INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva <= INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_38_nl OR (fsm_output(6))) = '1' ) THEN
        pref_x_idx_pref_1_9_0_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
            & '0') + UNSIGNED(z_out_2(9 DOWNTO 0)), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_90 = '0' ) THEN
        INNER_LOOP_a_acc_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
            8), 9) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1 & (NOT (z_out(0)))),
            9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((NOT(or_dcpl_8 OR (fsm_output(2)) OR and_106_cse OR (fsm_output(5))))
          OR (fsm_output(6))) = '1' ) THEN
        pref_y_idx_pref_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_3_nl),
            10) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1 & '0' & s_0_sva),
            10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_40_nl, mux_39_nl, fsm_output(0))) = '1' ) THEN
        pref_x_idx_pref_1_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
            & '1') + UNSIGNED(z_out_2(9 DOWNTO 0)), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( or_dcpl_13 = '0' ) THEN
        INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva),
            8), 9) + SIGNED'( "000000001"), 9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_nor_itm <= '0';
      ELSIF ( or_dcpl_13 = '0' ) THEN
        INNER_LOOP_b_nor_itm <= NOT(INNER_LOOP_b_INNER_LOOP_b_and_7 OR INNER_LOOP_b_INNER_LOOP_b_and_9);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_dcpl_8 OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00"))
          OR mux_42_nl)) = '1' ) THEN
        INNER_LOOP_w_asn_3_itm <= twiddle_rsci_qb_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_dcpl_8 OR or_tmp_26 OR (fsm_output(1)) OR (fsm_output(5)) OR (fsm_output(0))))
          = '1' ) THEN
        INNER_LOOP_1_b_mul_mut <= z_out_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (INNER_LOOP_1_acc_2_psp_mx0c0 OR INNER_LOOP_1_acc_2_psp_mx0c1 OR and_dcpl_70
          OR and_dcpl_55) = '1' ) THEN
        INNER_LOOP_1_acc_2_psp <= MUX1HOT_v_64_4_2(yt_rsci_q_d, xt_rsci_qa_d, INNER_LOOP_1_acc_2_psp_mx0w0,
            modulo_dev_qelse_mux_1_cse, STD_LOGIC_VECTOR'( INNER_LOOP_1_acc_2_psp_mx0c0
            & INNER_LOOP_1_acc_2_psp_mx0c1 & and_dcpl_70 & and_dcpl_55));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("11")) OR (NOT((fsm_output(6))
          XOR (fsm_output(1)))) OR (NOT (fsm_output(2))) OR (fsm_output(5)) OR (fsm_output(0))))
          = '1' ) THEN
        INNER_LOOP_1_acc_5_itm <= z_out_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_tmp_11 OR or_dcpl_12)) = '1' ) THEN
        INNER_LOOP_2_b_mul_mut <= z_out_2;
      END IF;
    END IF;
  END PROCESS;
  s_mux_nl <= MUX_s_1_2_2(s_0_sva, s_1_sva, and_dcpl_13);
  mux_24_nl <= MUX_s_1_2_2((NOT and_112_cse), or_tmp_23, fsm_output(5));
  nand_1_nl <= NOT(or_70_cse AND CONV_SL_1_1(fsm_output(4 DOWNTO 2)=STD_LOGIC_VECTOR'("111")));
  mux_23_nl <= MUX_s_1_2_2(nand_1_nl, or_tmp_23, fsm_output(5));
  mux_25_nl <= MUX_s_1_2_2(mux_24_nl, mux_23_nl, fsm_output(0));
  and_72_nl <= ((and_dcpl_59 AND or_70_cse) XOR (fsm_output(4))) AND (fsm_output(5));
  or_32_nl <= (NOT (fsm_output(6))) OR (fsm_output(2));
  mux_26_nl <= MUX_s_1_2_2(or_tmp_26, or_32_nl, fsm_output(1));
  nor_35_nl <= NOT(mux_26_nl OR (fsm_output(4)) OR (fsm_output(3)) OR (fsm_output(5))
      OR (fsm_output(0)));
  and_107_nl <= (CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))) AND
      (fsm_output(2));
  mux_27_nl <= MUX_s_1_2_2(and_dcpl_17, and_dcpl_11, and_107_nl);
  nor_33_nl <= NOT(mux_27_nl OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00")));
  or_35_nl <= and_106_cse OR (fsm_output(2));
  mux_28_nl <= MUX_s_1_2_2(and_dcpl_17, and_dcpl_11, or_35_nl);
  and_80_nl <= (NOT mux_28_nl) AND CONV_SL_1_1(fsm_output(6 DOWNTO 5)=STD_LOGIC_VECTOR'("10"));
  and_89_nl <= and_dcpl_12 AND and_dcpl_36 AND (fsm_output(0));
  INNER_LOOP_t_mux_nl <= MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1, (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(7
      DOWNTO 0)), and_89_nl);
  nor_38_nl <= NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("000001")));
  nor_39_nl <= NOT((NOT (fsm_output(5))) OR (fsm_output(1)) OR (NOT and_dcpl_12));
  mux_31_nl <= MUX_s_1_2_2(nor_38_nl, nor_39_nl, fsm_output(0));
  INNER_LOOP_b_and_1_nl <= INNER_LOOP_b_INNER_LOOP_b_and_9 AND drf_y_smx_lpi_3_dfm_mx0c;
  mux_35_nl <= MUX_s_1_2_2(and_dcpl_18, and_tmp, fsm_output(5));
  mux_34_nl <= MUX_s_1_2_2(nor_24_cse, and_tmp, fsm_output(5));
  mux_37_nl <= MUX_s_1_2_2(and_dcpl_53, nor_tmp_12, fsm_output(5));
  mux_38_nl <= MUX_s_1_2_2(mux_37_nl, mux_tmp_28, fsm_output(0));
  INNER_LOOP_b_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(s_9_sva & INNER_LOOP_1_q_and_psp_sva_1
      & '0') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( s_8_sva & s_7_sva & s_6_sva
      & s_5_sva & s_4_sva & s_3_sva & s_2_sva & s_1_sva & '1'), 9), 10) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT
      (z_out(0)), 1), 1), 10), 10));
  mux_40_nl <= MUX_s_1_2_2(and_dcpl_18, and_dcpl_12, fsm_output(5));
  mux_39_nl <= MUX_s_1_2_2(nor_24_cse, and_dcpl_12, fsm_output(5));
  or_50_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("10"));
  or_49_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("01"));
  mux_42_nl <= MUX_s_1_2_2(or_50_nl, or_49_nl, fsm_output(0));
  OUTER_LOOP_mux_5_nl <= MUX_s_1_2_2((OUTER_LOOP_acc_2_itm(3)), s_8_sva, and_dcpl_118);
  OUTER_LOOP_OUTER_LOOP_and_5_nl <= OUTER_LOOP_mux_5_nl AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_mux_6_nl <= MUX_s_1_2_2((OUTER_LOOP_acc_2_itm(3)), s_7_sva, and_dcpl_118);
  OUTER_LOOP_OUTER_LOOP_and_6_nl <= OUTER_LOOP_mux_6_nl AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_mux_7_nl <= MUX_s_1_2_2((OUTER_LOOP_acc_2_itm(3)), s_6_sva, and_dcpl_118);
  OUTER_LOOP_OUTER_LOOP_and_7_nl <= OUTER_LOOP_mux_7_nl AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_mux_8_nl <= MUX_s_1_2_2((OUTER_LOOP_acc_2_itm(3)), s_5_sva, and_dcpl_118);
  OUTER_LOOP_OUTER_LOOP_and_8_nl <= OUTER_LOOP_mux_8_nl AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_mux_9_nl <= MUX_s_1_2_2((OUTER_LOOP_acc_2_itm(3)), s_4_sva, and_dcpl_118);
  OUTER_LOOP_OUTER_LOOP_and_9_nl <= OUTER_LOOP_mux_9_nl AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_mux1h_4_nl <= MUX1HOT_s_1_3_2((OUTER_LOOP_acc_2_itm(3)), (OUTER_LOOP_nn_3_0_sva(3)),
      s_3_sva, STD_LOGIC_VECTOR'( and_dcpl_106 & OUTER_LOOP_or_1_ssc & and_dcpl_118));
  OUTER_LOOP_mux1h_5_nl <= MUX1HOT_v_3_3_2((OUTER_LOOP_acc_2_itm(2 DOWNTO 0)), (OUTER_LOOP_nn_3_0_sva(2
      DOWNTO 0)), STD_LOGIC_VECTOR'( s_2_sva & s_1_sva & s_0_sva), STD_LOGIC_VECTOR'(
      and_dcpl_106 & OUTER_LOOP_or_1_ssc & and_dcpl_118));
  OUTER_LOOP_OUTER_LOOP_or_1_nl <= and_dcpl_106 OR and_dcpl_112 OR and_dcpl_118;
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(OUTER_LOOP_OUTER_LOOP_and_5_nl
      & OUTER_LOOP_OUTER_LOOP_and_6_nl & OUTER_LOOP_OUTER_LOOP_and_7_nl & OUTER_LOOP_OUTER_LOOP_and_8_nl
      & OUTER_LOOP_OUTER_LOOP_and_9_nl & OUTER_LOOP_mux1h_4_nl & OUTER_LOOP_mux1h_5_nl)
      + CONV_UNSIGNED(CONV_SIGNED(SIGNED'( OUTER_LOOP_OUTER_LOOP_or_1_nl & '1'),
      2), 9), 9));
  modulo_dev_qelse_mux_3_nl <= MUX_v_64_2_2((INNER_LOOP_1_modulo_dev_result_rem_cmp_z(63
      DOWNTO 0)), INNER_LOOP_1_acc_2_psp, and_dcpl_127);
  modulo_dev_qelse_or_1_nl <= (NOT(xor_dcpl_4 AND (fsm_output(3)) AND (fsm_output(2))
      AND (fsm_output(5)) AND (NOT (fsm_output(0))))) OR and_dcpl_127;
  modulo_dev_qelse_mux_4_nl <= MUX_v_64_2_2(p_sva, (NOT INNER_LOOP_1_b_rem_cmp_z_oreg),
      and_dcpl_127);
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(modulo_dev_qelse_mux_3_nl &
      modulo_dev_qelse_or_1_nl) + UNSIGNED(modulo_dev_qelse_mux_4_nl & '1'), 65));
  z_out_1 <= acc_1_nl(64 DOWNTO 1);
  INNER_LOOP_b_mux_5_nl <= MUX_v_64_2_2(drf_y_smx_lpi_3_dfm, STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'(
      s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva & s_3_sva & s_2_sva
      & s_1_sva & s_0_sva),64)), and_dcpl_137);
  INNER_LOOP_b_mux_6_nl <= MUX_v_64_2_2(INNER_LOOP_w_asn_3_itm, (STD_LOGIC_VECTOR'(
      "0000000000000000000000000000000000000000000000000000000") & OUTER_LOOP_m_lshift_psp_sva),
      and_dcpl_137);
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(INNER_LOOP_b_mux_5_nl)
      * UNSIGNED(INNER_LOOP_b_mux_6_nl)), 128));
END v14;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_adra : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    xt_rsc_da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_wea : OUT STD_LOGIC;
    xt_rsc_qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    twiddle_rsc_qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_lz : OUT STD_LOGIC
  );
END stockham_DIT;

ARCHITECTURE v14 OF stockham_DIT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL xt_rsci_adra_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_da_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_qa_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsci_adrb_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_qb_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsci_clken_d : STD_LOGIC;
  SIGNAL yt_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL INNER_LOOP_1_b_rem_cmp_a : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_b : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_clken : STD_LOGIC;
  SIGNAL yt_rsc_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsc_we : STD_LOGIC;
  SIGNAL yt_rsc_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_wea_d_iff : STD_LOGIC;
  SIGNAL yt_rsci_we_d_iff : STD_LOGIC;

  SIGNAL INNER_LOOP_1_b_rem_cmp_a_1 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_b_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL yt_rsc_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_comp_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsc_comp_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen
    PORT(
      qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea : OUT STD_LOGIC;
      da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      adra : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      adra_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsci_qa : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_da : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_adra : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_adra_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL xt_rsci_da_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsci_qa_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen
    PORT(
      qb : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      adrb : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      adrb_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      qb_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      readB_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsci_qb : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsci_adrb : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_adrb_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL twiddle_rsci_qb_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsci_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_d_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsci_radr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL yt_rsci_wadr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT stockham_DIT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsc_triosy_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      g_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_lz : OUT STD_LOGIC;
      xt_rsci_adra_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      xt_rsci_da_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsci_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsci_adrb_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      twiddle_rsci_qb_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsci_clken_d : OUT STD_LOGIC;
      yt_rsci_d_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsci_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      yt_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      yt_rsci_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      INNER_LOOP_1_b_rem_cmp_a : OUT STD_LOGIC_VECTOR (127 DOWNTO 0);
      INNER_LOOP_1_b_rem_cmp_b : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      INNER_LOOP_1_b_rem_cmp_z : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsci_wea_d_pff : OUT STD_LOGIC;
      yt_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsci_adra_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsci_da_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsci_qa_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsci_adrb_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsci_qb_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsci_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsci_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_a : STD_LOGIC_VECTOR (127
      DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_b : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_z : STD_LOGIC_VECTOR (63 DOWNTO
      0);

BEGIN
  INNER_LOOP_1_b_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 128,
      width_b => 64,
      signd => 0
      )
    PORT MAP(
      a => INNER_LOOP_1_b_rem_cmp_a_1,
      b => INNER_LOOP_1_b_rem_cmp_b_1,
      z => INNER_LOOP_1_b_rem_cmp_z_1
    );
  INNER_LOOP_1_b_rem_cmp_a_1 <= INNER_LOOP_1_b_rem_cmp_a;
  INNER_LOOP_1_b_rem_cmp_b_1 <= INNER_LOOP_1_b_rem_cmp_b;
  INNER_LOOP_1_b_rem_cmp_z <= INNER_LOOP_1_b_rem_cmp_z_1;

  yt_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 10,
      data_width => 64,
      depth => 1024,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_clken,
      d => yt_rsc_comp_d,
      q => yt_rsc_comp_q,
      radr => yt_rsc_comp_radr,
      wadr => yt_rsc_comp_wadr,
      we => yt_rsc_we
    );
  yt_rsc_comp_d <= yt_rsc_d;
  yt_rsc_q <= yt_rsc_comp_q;
  yt_rsc_comp_radr <= yt_rsc_radr;
  yt_rsc_comp_wadr <= yt_rsc_wadr;

  xt_rsci : stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_1_10_64_1024_1024_64_1_gen
    PORT MAP(
      qa => xt_rsci_qa,
      wea => xt_rsc_wea,
      da => xt_rsci_da,
      adra => xt_rsci_adra,
      adra_d => xt_rsci_adra_d_1,
      da_d => xt_rsci_da_d_1,
      qa_d => xt_rsci_qa_d_1,
      wea_d => xt_rsci_wea_d_iff,
      rwA_rw_ram_ir_internal_RMASK_B_d => xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d => xt_rsci_wea_d_iff
    );
  xt_rsci_qa <= xt_rsc_qa;
  xt_rsc_da <= xt_rsci_da;
  xt_rsc_adra <= xt_rsci_adra;
  xt_rsci_adra_d_1 <= xt_rsci_adra_d;
  xt_rsci_da_d_1 <= xt_rsci_da_d;
  xt_rsci_qa_d <= xt_rsci_qa_d_1;

  twiddle_rsci : stockham_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rport_4_10_64_1024_1024_64_1_gen
    PORT MAP(
      qb => twiddle_rsci_qb,
      adrb => twiddle_rsci_adrb,
      adrb_d => twiddle_rsci_adrb_d_1,
      qb_d => twiddle_rsci_qb_d_1,
      readB_r_ram_ir_internal_RMASK_B_d => twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsci_qb <= twiddle_rsc_qb;
  twiddle_rsc_adrb <= twiddle_rsci_adrb;
  twiddle_rsci_adrb_d_1 <= twiddle_rsci_adrb_d;
  twiddle_rsci_qb_d <= twiddle_rsci_qb_d_1;

  yt_rsci : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_10_64_1024_1024_64_1_gen
    PORT MAP(
      clken => yt_rsc_clken,
      q => yt_rsci_q,
      radr => yt_rsci_radr,
      we => yt_rsc_we,
      d => yt_rsci_d,
      wadr => yt_rsci_wadr,
      clken_d => yt_rsci_clken_d,
      d_d => yt_rsci_d_d_1,
      q_d => yt_rsci_q_d_1,
      radr_d => yt_rsci_radr_d_1,
      wadr_d => yt_rsci_wadr_d_1,
      we_d => yt_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsci_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsci_q <= yt_rsc_q;
  yt_rsc_radr <= yt_rsci_radr;
  yt_rsc_d <= yt_rsci_d;
  yt_rsc_wadr <= yt_rsci_wadr;
  yt_rsci_d_d_1 <= yt_rsci_d_d;
  yt_rsci_q_d <= yt_rsci_q_d_1;
  yt_rsci_radr_d_1 <= yt_rsci_radr_d;
  yt_rsci_wadr_d_1 <= yt_rsci_wadr_d;

  stockham_DIT_core_inst : stockham_DIT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsc_triosy_lz => xt_rsc_triosy_lz,
      p_rsc_dat => stockham_DIT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      g_rsc_triosy_lz => g_rsc_triosy_lz,
      twiddle_rsc_triosy_lz => twiddle_rsc_triosy_lz,
      xt_rsci_adra_d => stockham_DIT_core_inst_xt_rsci_adra_d,
      xt_rsci_da_d => stockham_DIT_core_inst_xt_rsci_da_d,
      xt_rsci_qa_d => stockham_DIT_core_inst_xt_rsci_qa_d,
      xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d => xt_rsci_rwA_rw_ram_ir_internal_RMASK_B_d,
      twiddle_rsci_adrb_d => stockham_DIT_core_inst_twiddle_rsci_adrb_d,
      twiddle_rsci_qb_d => stockham_DIT_core_inst_twiddle_rsci_qb_d,
      twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d => twiddle_rsci_readB_r_ram_ir_internal_RMASK_B_d,
      yt_rsci_clken_d => yt_rsci_clken_d,
      yt_rsci_d_d => stockham_DIT_core_inst_yt_rsci_d_d,
      yt_rsci_q_d => stockham_DIT_core_inst_yt_rsci_q_d,
      yt_rsci_radr_d => stockham_DIT_core_inst_yt_rsci_radr_d,
      yt_rsci_wadr_d => stockham_DIT_core_inst_yt_rsci_wadr_d,
      yt_rsci_readA_r_ram_ir_internal_RMASK_B_d => yt_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      INNER_LOOP_1_b_rem_cmp_a => stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_a,
      INNER_LOOP_1_b_rem_cmp_b => stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_b,
      INNER_LOOP_1_b_rem_cmp_z => stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_z,
      xt_rsci_wea_d_pff => xt_rsci_wea_d_iff,
      yt_rsci_we_d_pff => yt_rsci_we_d_iff
    );
  stockham_DIT_core_inst_p_rsc_dat <= p_rsc_dat;
  xt_rsci_adra_d <= stockham_DIT_core_inst_xt_rsci_adra_d;
  xt_rsci_da_d <= stockham_DIT_core_inst_xt_rsci_da_d;
  stockham_DIT_core_inst_xt_rsci_qa_d <= xt_rsci_qa_d;
  twiddle_rsci_adrb_d <= stockham_DIT_core_inst_twiddle_rsci_adrb_d;
  stockham_DIT_core_inst_twiddle_rsci_qb_d <= twiddle_rsci_qb_d;
  yt_rsci_d_d <= stockham_DIT_core_inst_yt_rsci_d_d;
  stockham_DIT_core_inst_yt_rsci_q_d <= yt_rsci_q_d;
  yt_rsci_radr_d <= stockham_DIT_core_inst_yt_rsci_radr_d;
  yt_rsci_wadr_d <= stockham_DIT_core_inst_yt_rsci_wadr_d;
  INNER_LOOP_1_b_rem_cmp_a <= stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_a;
  INNER_LOOP_1_b_rem_cmp_b <= stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_b;
  stockham_DIT_core_inst_INNER_LOOP_1_b_rem_cmp_z <= INNER_LOOP_1_b_rem_cmp_z;

END v14;



