// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Thu Jul 29 10:46:03 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output [63:0] q_d;
  input [8:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output [63:0] q_d;
  input [8:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module stockham_DIT_core_core_fsm (
  clk, rst, fsm_output, INNER_LOOP_C_73_tr0, OUTER_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input INNER_LOOP_C_73_tr0;
  input OUTER_LOOP_C_1_tr0;


  // FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  parameter
    main_C_0 = 7'd0,
    OUTER_LOOP_C_0 = 7'd1,
    INNER_LOOP_C_0 = 7'd2,
    INNER_LOOP_C_1 = 7'd3,
    INNER_LOOP_C_2 = 7'd4,
    INNER_LOOP_C_3 = 7'd5,
    INNER_LOOP_C_4 = 7'd6,
    INNER_LOOP_C_5 = 7'd7,
    INNER_LOOP_C_6 = 7'd8,
    INNER_LOOP_C_7 = 7'd9,
    INNER_LOOP_C_8 = 7'd10,
    INNER_LOOP_C_9 = 7'd11,
    INNER_LOOP_C_10 = 7'd12,
    INNER_LOOP_C_11 = 7'd13,
    INNER_LOOP_C_12 = 7'd14,
    INNER_LOOP_C_13 = 7'd15,
    INNER_LOOP_C_14 = 7'd16,
    INNER_LOOP_C_15 = 7'd17,
    INNER_LOOP_C_16 = 7'd18,
    INNER_LOOP_C_17 = 7'd19,
    INNER_LOOP_C_18 = 7'd20,
    INNER_LOOP_C_19 = 7'd21,
    INNER_LOOP_C_20 = 7'd22,
    INNER_LOOP_C_21 = 7'd23,
    INNER_LOOP_C_22 = 7'd24,
    INNER_LOOP_C_23 = 7'd25,
    INNER_LOOP_C_24 = 7'd26,
    INNER_LOOP_C_25 = 7'd27,
    INNER_LOOP_C_26 = 7'd28,
    INNER_LOOP_C_27 = 7'd29,
    INNER_LOOP_C_28 = 7'd30,
    INNER_LOOP_C_29 = 7'd31,
    INNER_LOOP_C_30 = 7'd32,
    INNER_LOOP_C_31 = 7'd33,
    INNER_LOOP_C_32 = 7'd34,
    INNER_LOOP_C_33 = 7'd35,
    INNER_LOOP_C_34 = 7'd36,
    INNER_LOOP_C_35 = 7'd37,
    INNER_LOOP_C_36 = 7'd38,
    INNER_LOOP_C_37 = 7'd39,
    INNER_LOOP_C_38 = 7'd40,
    INNER_LOOP_C_39 = 7'd41,
    INNER_LOOP_C_40 = 7'd42,
    INNER_LOOP_C_41 = 7'd43,
    INNER_LOOP_C_42 = 7'd44,
    INNER_LOOP_C_43 = 7'd45,
    INNER_LOOP_C_44 = 7'd46,
    INNER_LOOP_C_45 = 7'd47,
    INNER_LOOP_C_46 = 7'd48,
    INNER_LOOP_C_47 = 7'd49,
    INNER_LOOP_C_48 = 7'd50,
    INNER_LOOP_C_49 = 7'd51,
    INNER_LOOP_C_50 = 7'd52,
    INNER_LOOP_C_51 = 7'd53,
    INNER_LOOP_C_52 = 7'd54,
    INNER_LOOP_C_53 = 7'd55,
    INNER_LOOP_C_54 = 7'd56,
    INNER_LOOP_C_55 = 7'd57,
    INNER_LOOP_C_56 = 7'd58,
    INNER_LOOP_C_57 = 7'd59,
    INNER_LOOP_C_58 = 7'd60,
    INNER_LOOP_C_59 = 7'd61,
    INNER_LOOP_C_60 = 7'd62,
    INNER_LOOP_C_61 = 7'd63,
    INNER_LOOP_C_62 = 7'd64,
    INNER_LOOP_C_63 = 7'd65,
    INNER_LOOP_C_64 = 7'd66,
    INNER_LOOP_C_65 = 7'd67,
    INNER_LOOP_C_66 = 7'd68,
    INNER_LOOP_C_67 = 7'd69,
    INNER_LOOP_C_68 = 7'd70,
    INNER_LOOP_C_69 = 7'd71,
    INNER_LOOP_C_70 = 7'd72,
    INNER_LOOP_C_71 = 7'd73,
    INNER_LOOP_C_72 = 7'd74,
    INNER_LOOP_C_73 = 7'd75,
    OUTER_LOOP_C_1 = 7'd76,
    main_C_1 = 7'd77;

  reg [6:0] state_var;
  reg [6:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : stockham_DIT_core_core_fsm_1
    case (state_var)
      OUTER_LOOP_C_0 : begin
        fsm_output = 7'b0000001;
        state_var_NS = INNER_LOOP_C_0;
      end
      INNER_LOOP_C_0 : begin
        fsm_output = 7'b0000010;
        state_var_NS = INNER_LOOP_C_1;
      end
      INNER_LOOP_C_1 : begin
        fsm_output = 7'b0000011;
        state_var_NS = INNER_LOOP_C_2;
      end
      INNER_LOOP_C_2 : begin
        fsm_output = 7'b0000100;
        state_var_NS = INNER_LOOP_C_3;
      end
      INNER_LOOP_C_3 : begin
        fsm_output = 7'b0000101;
        state_var_NS = INNER_LOOP_C_4;
      end
      INNER_LOOP_C_4 : begin
        fsm_output = 7'b0000110;
        state_var_NS = INNER_LOOP_C_5;
      end
      INNER_LOOP_C_5 : begin
        fsm_output = 7'b0000111;
        state_var_NS = INNER_LOOP_C_6;
      end
      INNER_LOOP_C_6 : begin
        fsm_output = 7'b0001000;
        state_var_NS = INNER_LOOP_C_7;
      end
      INNER_LOOP_C_7 : begin
        fsm_output = 7'b0001001;
        state_var_NS = INNER_LOOP_C_8;
      end
      INNER_LOOP_C_8 : begin
        fsm_output = 7'b0001010;
        state_var_NS = INNER_LOOP_C_9;
      end
      INNER_LOOP_C_9 : begin
        fsm_output = 7'b0001011;
        state_var_NS = INNER_LOOP_C_10;
      end
      INNER_LOOP_C_10 : begin
        fsm_output = 7'b0001100;
        state_var_NS = INNER_LOOP_C_11;
      end
      INNER_LOOP_C_11 : begin
        fsm_output = 7'b0001101;
        state_var_NS = INNER_LOOP_C_12;
      end
      INNER_LOOP_C_12 : begin
        fsm_output = 7'b0001110;
        state_var_NS = INNER_LOOP_C_13;
      end
      INNER_LOOP_C_13 : begin
        fsm_output = 7'b0001111;
        state_var_NS = INNER_LOOP_C_14;
      end
      INNER_LOOP_C_14 : begin
        fsm_output = 7'b0010000;
        state_var_NS = INNER_LOOP_C_15;
      end
      INNER_LOOP_C_15 : begin
        fsm_output = 7'b0010001;
        state_var_NS = INNER_LOOP_C_16;
      end
      INNER_LOOP_C_16 : begin
        fsm_output = 7'b0010010;
        state_var_NS = INNER_LOOP_C_17;
      end
      INNER_LOOP_C_17 : begin
        fsm_output = 7'b0010011;
        state_var_NS = INNER_LOOP_C_18;
      end
      INNER_LOOP_C_18 : begin
        fsm_output = 7'b0010100;
        state_var_NS = INNER_LOOP_C_19;
      end
      INNER_LOOP_C_19 : begin
        fsm_output = 7'b0010101;
        state_var_NS = INNER_LOOP_C_20;
      end
      INNER_LOOP_C_20 : begin
        fsm_output = 7'b0010110;
        state_var_NS = INNER_LOOP_C_21;
      end
      INNER_LOOP_C_21 : begin
        fsm_output = 7'b0010111;
        state_var_NS = INNER_LOOP_C_22;
      end
      INNER_LOOP_C_22 : begin
        fsm_output = 7'b0011000;
        state_var_NS = INNER_LOOP_C_23;
      end
      INNER_LOOP_C_23 : begin
        fsm_output = 7'b0011001;
        state_var_NS = INNER_LOOP_C_24;
      end
      INNER_LOOP_C_24 : begin
        fsm_output = 7'b0011010;
        state_var_NS = INNER_LOOP_C_25;
      end
      INNER_LOOP_C_25 : begin
        fsm_output = 7'b0011011;
        state_var_NS = INNER_LOOP_C_26;
      end
      INNER_LOOP_C_26 : begin
        fsm_output = 7'b0011100;
        state_var_NS = INNER_LOOP_C_27;
      end
      INNER_LOOP_C_27 : begin
        fsm_output = 7'b0011101;
        state_var_NS = INNER_LOOP_C_28;
      end
      INNER_LOOP_C_28 : begin
        fsm_output = 7'b0011110;
        state_var_NS = INNER_LOOP_C_29;
      end
      INNER_LOOP_C_29 : begin
        fsm_output = 7'b0011111;
        state_var_NS = INNER_LOOP_C_30;
      end
      INNER_LOOP_C_30 : begin
        fsm_output = 7'b0100000;
        state_var_NS = INNER_LOOP_C_31;
      end
      INNER_LOOP_C_31 : begin
        fsm_output = 7'b0100001;
        state_var_NS = INNER_LOOP_C_32;
      end
      INNER_LOOP_C_32 : begin
        fsm_output = 7'b0100010;
        state_var_NS = INNER_LOOP_C_33;
      end
      INNER_LOOP_C_33 : begin
        fsm_output = 7'b0100011;
        state_var_NS = INNER_LOOP_C_34;
      end
      INNER_LOOP_C_34 : begin
        fsm_output = 7'b0100100;
        state_var_NS = INNER_LOOP_C_35;
      end
      INNER_LOOP_C_35 : begin
        fsm_output = 7'b0100101;
        state_var_NS = INNER_LOOP_C_36;
      end
      INNER_LOOP_C_36 : begin
        fsm_output = 7'b0100110;
        state_var_NS = INNER_LOOP_C_37;
      end
      INNER_LOOP_C_37 : begin
        fsm_output = 7'b0100111;
        state_var_NS = INNER_LOOP_C_38;
      end
      INNER_LOOP_C_38 : begin
        fsm_output = 7'b0101000;
        state_var_NS = INNER_LOOP_C_39;
      end
      INNER_LOOP_C_39 : begin
        fsm_output = 7'b0101001;
        state_var_NS = INNER_LOOP_C_40;
      end
      INNER_LOOP_C_40 : begin
        fsm_output = 7'b0101010;
        state_var_NS = INNER_LOOP_C_41;
      end
      INNER_LOOP_C_41 : begin
        fsm_output = 7'b0101011;
        state_var_NS = INNER_LOOP_C_42;
      end
      INNER_LOOP_C_42 : begin
        fsm_output = 7'b0101100;
        state_var_NS = INNER_LOOP_C_43;
      end
      INNER_LOOP_C_43 : begin
        fsm_output = 7'b0101101;
        state_var_NS = INNER_LOOP_C_44;
      end
      INNER_LOOP_C_44 : begin
        fsm_output = 7'b0101110;
        state_var_NS = INNER_LOOP_C_45;
      end
      INNER_LOOP_C_45 : begin
        fsm_output = 7'b0101111;
        state_var_NS = INNER_LOOP_C_46;
      end
      INNER_LOOP_C_46 : begin
        fsm_output = 7'b0110000;
        state_var_NS = INNER_LOOP_C_47;
      end
      INNER_LOOP_C_47 : begin
        fsm_output = 7'b0110001;
        state_var_NS = INNER_LOOP_C_48;
      end
      INNER_LOOP_C_48 : begin
        fsm_output = 7'b0110010;
        state_var_NS = INNER_LOOP_C_49;
      end
      INNER_LOOP_C_49 : begin
        fsm_output = 7'b0110011;
        state_var_NS = INNER_LOOP_C_50;
      end
      INNER_LOOP_C_50 : begin
        fsm_output = 7'b0110100;
        state_var_NS = INNER_LOOP_C_51;
      end
      INNER_LOOP_C_51 : begin
        fsm_output = 7'b0110101;
        state_var_NS = INNER_LOOP_C_52;
      end
      INNER_LOOP_C_52 : begin
        fsm_output = 7'b0110110;
        state_var_NS = INNER_LOOP_C_53;
      end
      INNER_LOOP_C_53 : begin
        fsm_output = 7'b0110111;
        state_var_NS = INNER_LOOP_C_54;
      end
      INNER_LOOP_C_54 : begin
        fsm_output = 7'b0111000;
        state_var_NS = INNER_LOOP_C_55;
      end
      INNER_LOOP_C_55 : begin
        fsm_output = 7'b0111001;
        state_var_NS = INNER_LOOP_C_56;
      end
      INNER_LOOP_C_56 : begin
        fsm_output = 7'b0111010;
        state_var_NS = INNER_LOOP_C_57;
      end
      INNER_LOOP_C_57 : begin
        fsm_output = 7'b0111011;
        state_var_NS = INNER_LOOP_C_58;
      end
      INNER_LOOP_C_58 : begin
        fsm_output = 7'b0111100;
        state_var_NS = INNER_LOOP_C_59;
      end
      INNER_LOOP_C_59 : begin
        fsm_output = 7'b0111101;
        state_var_NS = INNER_LOOP_C_60;
      end
      INNER_LOOP_C_60 : begin
        fsm_output = 7'b0111110;
        state_var_NS = INNER_LOOP_C_61;
      end
      INNER_LOOP_C_61 : begin
        fsm_output = 7'b0111111;
        state_var_NS = INNER_LOOP_C_62;
      end
      INNER_LOOP_C_62 : begin
        fsm_output = 7'b1000000;
        state_var_NS = INNER_LOOP_C_63;
      end
      INNER_LOOP_C_63 : begin
        fsm_output = 7'b1000001;
        state_var_NS = INNER_LOOP_C_64;
      end
      INNER_LOOP_C_64 : begin
        fsm_output = 7'b1000010;
        state_var_NS = INNER_LOOP_C_65;
      end
      INNER_LOOP_C_65 : begin
        fsm_output = 7'b1000011;
        state_var_NS = INNER_LOOP_C_66;
      end
      INNER_LOOP_C_66 : begin
        fsm_output = 7'b1000100;
        state_var_NS = INNER_LOOP_C_67;
      end
      INNER_LOOP_C_67 : begin
        fsm_output = 7'b1000101;
        state_var_NS = INNER_LOOP_C_68;
      end
      INNER_LOOP_C_68 : begin
        fsm_output = 7'b1000110;
        state_var_NS = INNER_LOOP_C_69;
      end
      INNER_LOOP_C_69 : begin
        fsm_output = 7'b1000111;
        state_var_NS = INNER_LOOP_C_70;
      end
      INNER_LOOP_C_70 : begin
        fsm_output = 7'b1001000;
        state_var_NS = INNER_LOOP_C_71;
      end
      INNER_LOOP_C_71 : begin
        fsm_output = 7'b1001001;
        state_var_NS = INNER_LOOP_C_72;
      end
      INNER_LOOP_C_72 : begin
        fsm_output = 7'b1001010;
        state_var_NS = INNER_LOOP_C_73;
      end
      INNER_LOOP_C_73 : begin
        fsm_output = 7'b1001011;
        if ( INNER_LOOP_C_73_tr0 ) begin
          state_var_NS = OUTER_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP_C_0;
        end
      end
      OUTER_LOOP_C_1 : begin
        fsm_output = 7'b1001100;
        if ( OUTER_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = OUTER_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 7'b1001101;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = OUTER_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_wait_dp
// ------------------------------------------------------------------


module stockham_DIT_core_wait_dp (
  yt_rsc_0_0_cgo_iro, yt_rsc_0_0_i_clken_d, yt_rsc_0_1_cgo_iro, yt_rsc_0_1_i_clken_d,
      ensig_cgo_iro, yt_rsc_0_0_cgo, yt_rsc_0_1_cgo, ensig_cgo, INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
);
  input yt_rsc_0_0_cgo_iro;
  output yt_rsc_0_0_i_clken_d;
  input yt_rsc_0_1_cgo_iro;
  output yt_rsc_0_1_i_clken_d;
  input ensig_cgo_iro;
  input yt_rsc_0_0_cgo;
  input yt_rsc_0_1_cgo;
  input ensig_cgo;
  output INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign yt_rsc_0_0_i_clken_d = yt_rsc_0_0_cgo | yt_rsc_0_0_cgo_iro;
  assign yt_rsc_0_1_i_clken_d = yt_rsc_0_1_cgo | yt_rsc_0_1_cgo_iro;
  assign INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core
// ------------------------------------------------------------------


module stockham_DIT_core (
  clk, rst, xt_rsc_triosy_0_0_lz, xt_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz,
      g_rsc_triosy_lz, twiddle_rsc_triosy_0_0_lz, twiddle_rsc_triosy_0_1_lz, yt_rsc_0_0_i_clken_d,
      yt_rsc_0_0_i_q_d, yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, yt_rsc_0_1_i_clken_d,
      yt_rsc_0_1_i_q_d, yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, xt_rsc_0_0_i_q_d,
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, xt_rsc_0_1_i_q_d, xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_0_i_d_d_pff, yt_rsc_0_0_i_radr_d_pff, yt_rsc_0_0_i_wadr_d_pff, yt_rsc_0_0_i_we_d_pff,
      yt_rsc_0_1_i_radr_d_pff, yt_rsc_0_1_i_wadr_d_pff, yt_rsc_0_1_i_we_d_pff, xt_rsc_0_0_i_we_d_pff,
      xt_rsc_0_1_i_we_d_pff, twiddle_rsc_0_0_i_radr_d_pff
);
  input clk;
  input rst;
  output xt_rsc_triosy_0_0_lz;
  output xt_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output g_rsc_triosy_lz;
  output twiddle_rsc_triosy_0_0_lz;
  output twiddle_rsc_triosy_0_1_lz;
  output yt_rsc_0_0_i_clken_d;
  input [63:0] yt_rsc_0_0_i_q_d;
  output yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsc_0_1_i_clken_d;
  input [63:0] yt_rsc_0_1_i_q_d;
  output yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_0_i_q_d;
  output xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_1_i_q_d;
  output xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_0_i_q_d;
  output twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_1_i_q_d;
  output twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] yt_rsc_0_0_i_d_d_pff;
  output [8:0] yt_rsc_0_0_i_radr_d_pff;
  output [8:0] yt_rsc_0_0_i_wadr_d_pff;
  output yt_rsc_0_0_i_we_d_pff;
  output [8:0] yt_rsc_0_1_i_radr_d_pff;
  output [8:0] yt_rsc_0_1_i_wadr_d_pff;
  output yt_rsc_0_1_i_we_d_pff;
  output xt_rsc_0_0_i_we_d_pff;
  output xt_rsc_0_1_i_we_d_pff;
  output [8:0] twiddle_rsc_0_0_i_radr_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  reg [127:0] INNER_LOOP_1_b_rem_cmp_a;
  wire [63:0] INNER_LOOP_1_b_rem_cmp_z;
  wire [6:0] fsm_output;
  wire xor_dcpl_3;
  wire or_tmp;
  wire or_tmp_1;
  wire mux_tmp_7;
  wire mux_tmp_8;
  wire and_dcpl_7;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_13;
  wire and_dcpl_14;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire or_tmp_9;
  wire and_tmp;
  wire mux_tmp_12;
  wire mux_tmp_14;
  wire and_dcpl_18;
  wire and_dcpl_19;
  wire and_dcpl_21;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_26;
  wire and_dcpl_27;
  wire and_dcpl_28;
  wire and_dcpl_30;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_34;
  wire and_dcpl_36;
  wire and_dcpl_38;
  wire and_dcpl_40;
  wire and_dcpl_41;
  wire and_dcpl_43;
  wire not_tmp_31;
  wire and_dcpl_48;
  wire or_tmp_26;
  wire mux_tmp_31;
  wire or_tmp_29;
  wire or_tmp_31;
  wire not_tmp_36;
  wire mux_tmp_49;
  wire and_dcpl_56;
  wire and_dcpl_61;
  wire and_dcpl_66;
  wire nor_tmp_11;
  wire not_tmp_42;
  wire mux_tmp_54;
  wire mux_tmp_56;
  wire mux_tmp_57;
  wire and_dcpl_74;
  wire and_dcpl_80;
  wire not_tmp_49;
  wire not_tmp_57;
  wire mux_tmp_85;
  wire or_dcpl_13;
  wire or_dcpl_14;
  wire or_dcpl_17;
  wire and_dcpl_97;
  reg y_3_sva;
  reg y_1_sva;
  wire [8:0] INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1;
  wire [9:0] nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1;
  wire [9:0] INNER_LOOP_1_mul_cse_sva_1;
  wire [18:0] nl_INNER_LOOP_1_mul_cse_sva_1;
  reg s_9_sva;
  wire [7:0] INNER_LOOP_1_q_and_psp_sva_1;
  reg s_8_sva;
  reg s_7_sva;
  reg s_6_sva;
  reg s_5_sva;
  reg s_4_sva;
  reg s_3_sva;
  reg s_2_sva;
  reg s_1_sva;
  wire [7:0] INNER_LOOP_1_upper_and_psp_sva_mx0w1;
  reg s_0_sva;
  wire INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
  wire INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
  reg [8:0] INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva;
  wire [9:0] nl_INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva;
  reg [9:0] pref_y_idx_pref_9_0_sva;
  wire [10:0] nl_pref_y_idx_pref_9_0_sva;
  reg [9:0] pref_x_idx_pref_1_9_0_1_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_1_sva;
  reg x_1_sva;
  reg x_3_sva;
  reg [9:0] pref_x_idx_pref_1_9_0_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_sva;
  reg INNER_LOOP_b_INNER_LOOP_b_and_1_m1c;
  reg reg_INNER_LOOP_upper_acc_ftd_8;
  reg reg_INNER_LOOP_1_w_lshift_idiv_ftd_9;
  wire OUTER_LOOP_nn_or_cse;
  reg reg_yt_rsc_0_0_cgo_cse;
  reg reg_yt_rsc_0_1_cgo_cse;
  reg reg_xt_rsc_triosy_0_1_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire and_111_cse;
  wire INNER_LOOP_a_nor_cse;
  wire or_58_cse;
  wire nor_41_cse;
  wire or_67_cse;
  wire nor_48_rmff;
  wire nor_47_rmff;
  wire mux_70_rmff;
  reg [63:0] INNER_LOOP_1_acc_5_itm;
  reg [63:0] drf_y_smx_lpi_2;
  reg [63:0] INNER_LOOP_b_sva;
  reg [7:0] INNER_LOOP_a_acc_psp_2_sva;
  wire [8:0] nl_INNER_LOOP_a_acc_psp_2_sva;
  reg INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm;
  reg [8:0] INNER_LOOP_a_acc_psp_sva;
  wire [9:0] nl_INNER_LOOP_a_acc_psp_sva;
  reg [8:0] INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva;
  reg [63:0] p_sva;
  wire [8:0] INNER_LOOP_b_acc_itm;
  wire [9:0] nl_INNER_LOOP_b_acc_itm;
  wire mux_39_itm;
  wire and_dcpl_112;
  wire and_dcpl_116;
  wire and_dcpl_117;
  wire and_dcpl_122;
  wire and_dcpl_125;
  wire [8:0] z_out;
  wire [9:0] nl_z_out;
  wire and_dcpl_161;
  wire [127:0] z_out_3;
  wire and_dcpl_170;
  wire [7:0] z_out_4;
  wire [9:0] z_out_5;
  reg [3:0] OUTER_LOOP_nn_3_0_sva;
  reg [8:0] OUTER_LOOP_m_lshift_psp_sva;
  reg [7:0] INNER_LOOP_1_upper_and_psp_sva;
  reg INNER_LOOP_b_INNER_LOOP_b_and_m1c;
  reg [127:0] INNER_LOOP_1_b_mul_mut;
  reg INNER_LOOP_b_nor_itm;
  reg [63:0] INNER_LOOP_w_mux_1_itm;
  reg [3:0] OUTER_LOOP_acc_2_itm;
  wire [63:0] drf_y_smx_lpi_3_dfm_2;
  wire [63:0] drf_y_smx_lpi_3_dfm_3;
  wire INNER_LOOP_w_mux_1_itm_mx0c1;
  wire INNER_LOOP_1_acc_5_itm_mx0c0;
  wire and_87_rgt;
  wire OUTER_LOOP_nor_itm;
  wire OUTER_LOOP_m_or_1_itm;
  wire OUTER_LOOP_acc_itm_2_1;
  wire and_202_cse;

  wire[0:0] s_mux_10_nl;
  wire[0:0] and_23_nl;
  wire[0:0] mux_26_nl;
  wire[0:0] mux_25_nl;
  wire[0:0] mux_24_nl;
  wire[0:0] and_123_nl;
  wire[0:0] mux_22_nl;
  wire[0:0] or_15_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] nand_4_nl;
  wire[0:0] or_94_nl;
  wire[0:0] or_95_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] nand_5_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] or_20_nl;
  wire[0:0] mux_29_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] or_19_nl;
  wire[0:0] nor_5_nl;
  wire[0:0] or_18_nl;
  wire[0:0] or_96_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] or_43_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] mux_47_nl;
  wire[0:0] or_42_nl;
  wire[0:0] mux_46_nl;
  wire[0:0] or_41_nl;
  wire[0:0] or_39_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] or_37_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] nor_7_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] and_116_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] or_52_nl;
  wire[0:0] nor_51_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] or_57_nl;
  wire[0:0] nor_23_nl;
  wire[0:0] mux_18_nl;
  wire[7:0] INNER_LOOP_t_mux_nl;
  wire[0:0] and_89_nl;
  wire[0:0] nor_53_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] or_90_nl;
  wire[0:0] nand_3_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] or_65_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] mux_95_nl;
  wire[0:0] mux_98_nl;
  wire[9:0] INNER_LOOP_b_acc_2_nl;
  wire[11:0] nl_INNER_LOOP_b_acc_2_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] and_95_nl;
  wire[64:0] acc_1_nl;
  wire[65:0] nl_acc_1_nl;
  wire[63:0] INNER_LOOP_mux_4_nl;
  wire[0:0] INNER_LOOP_a_or_nl;
  wire[0:0] INNER_LOOP_a_or_1_nl;
  wire[0:0] INNER_LOOP_a_or_2_nl;
  wire[0:0] INNER_LOOP_a_and_2_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] or_88_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] nor_21_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] nand_2_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] or_86_nl;
  wire[8:0] INNER_LOOP_b_acc_1_nl;
  wire[9:0] nl_INNER_LOOP_b_acc_1_nl;
  wire[0:0] INNER_LOOP_b_and_nl;
  wire[0:0] INNER_LOOP_b_and_1_nl;
  wire[0:0] INNER_LOOP_b_and_2_nl;
  wire[0:0] INNER_LOOP_b_and_3_nl;
  wire[0:0] and_124_nl;
  wire[0:0] nor_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] nor_33_nl;
  wire[0:0] nor_34_nl;
  wire[0:0] nor_35_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] or_31_nl;
  wire[0:0] or_30_nl;
  wire[0:0] mux_37_nl;
  wire[0:0] or_29_nl;
  wire[0:0] or_35_nl;
  wire[0:0] or_34_nl;
  wire[0:0] nor_28_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] nor_29_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] nor_30_nl;
  wire[0:0] nor_31_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] nor_27_nl;
  wire[0:0] and_118_nl;
  wire[0:0] and_119_nl;
  wire[0:0] mux_107_nl;
  wire[2:0] OUTER_LOOP_acc_nl;
  wire[3:0] nl_OUTER_LOOP_acc_nl;
  wire[0:0] and_36_nl;
  wire[0:0] and_53_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_5_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_6_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_7_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_8_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_9_nl;
  wire[3:0] OUTER_LOOP_mux1h_3_nl;
  wire[0:0] OUTER_LOOP_or_3_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_or_1_nl;
  wire[63:0] INNER_LOOP_b_mux_4_nl;
  wire[63:0] INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_nor_1_nl;
  wire[0:0] INNER_LOOP_b_and_6_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[63:0] INNER_LOOP_acc_1_nl;
  wire[64:0] nl_INNER_LOOP_acc_1_nl;
  wire[63:0] INNER_LOOP_mux_5_nl;
  wire[0:0] and_79_nl;
  wire[0:0] mux_71_nl;
  wire [63:0] nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign INNER_LOOP_mux_5_nl = MUX_v_64_2_2(drf_y_smx_lpi_2, INNER_LOOP_b_sva, and_202_cse);
  assign nl_INNER_LOOP_acc_1_nl = INNER_LOOP_1_acc_5_itm + INNER_LOOP_mux_5_nl;
  assign INNER_LOOP_acc_1_nl = nl_INNER_LOOP_acc_1_nl[63:0];
  assign mux_71_nl = MUX_s_1_2_2(and_dcpl_14, and_dcpl_25, fsm_output[0]);
  assign and_79_nl = mux_71_nl & (fsm_output[4]) & (fsm_output[3]) & (~ (fsm_output[1]))
      & (~ (fsm_output[6]));
  assign nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(INNER_LOOP_acc_1_nl,
      INNER_LOOP_1_acc_5_itm, and_79_nl);
  wire [63:0] nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] nor_25_nl;
  wire[0:0] and_115_nl;
  wire[0:0] and_114_nl;
  wire[0:0] nor_26_nl;
  wire [0:0] nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nor_25_nl = ~((fsm_output[5]) | (~ (fsm_output[3])));
  assign and_115_nl = (fsm_output[5]) & (fsm_output[3]);
  assign mux_72_nl = MUX_s_1_2_2(nor_25_nl, and_115_nl, fsm_output[2]);
  assign and_114_nl = (fsm_output[2]) & (fsm_output[5]) & (fsm_output[3]);
  assign mux_73_nl = MUX_s_1_2_2(mux_72_nl, and_114_nl, fsm_output[0]);
  assign nor_26_nl = ~((~ (fsm_output[0])) | (~ (fsm_output[2])) | (fsm_output[5])
      | (fsm_output[3]));
  assign mux_74_nl = MUX_s_1_2_2(mux_73_nl, nor_26_nl, fsm_output[1]);
  assign nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = mux_74_nl & (fsm_output[4])
      & (~ (fsm_output[6]));
  wire[7:0] INNER_LOOP_w_mux_5_nl;
  wire[0:0] INNER_LOOP_w_INNER_LOOP_w_and_nl;
  wire [8:0] nl_INNER_LOOP_1_w_rshift_rg_a;
  assign INNER_LOOP_w_mux_5_nl = MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1,
      INNER_LOOP_1_upper_and_psp_sva, and_dcpl_170);
  assign INNER_LOOP_w_INNER_LOOP_w_and_nl = (~ reg_INNER_LOOP_upper_acc_ftd_8) &
      and_dcpl_170;
  assign nl_INNER_LOOP_1_w_rshift_rg_a = {INNER_LOOP_w_mux_5_nl , INNER_LOOP_w_INNER_LOOP_w_and_nl};
  wire [7:0] nl_INNER_LOOP_1_w_lshift_rg_a;
  assign nl_INNER_LOOP_1_w_lshift_rg_a = MUX_v_8_2_2(8'b00000001, z_out_4, OUTER_LOOP_m_or_1_itm);
  wire [3:0] nl_INNER_LOOP_1_w_lshift_rg_s;
  assign nl_INNER_LOOP_1_w_lshift_rg_s = MUX_v_4_2_2((z_out[3:0]), OUTER_LOOP_acc_2_itm,
      OUTER_LOOP_m_or_1_itm);
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0 = INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva[8];
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 = ~ OUTER_LOOP_acc_itm_2_1;
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_1_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(xt_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_0_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(xt_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) g_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(g_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(reg_xt_rsc_triosy_0_1_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  modulo_dev  INNER_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(INNER_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd128),
  .width_b(32'sd64),
  .signd(32'sd0)) INNER_LOOP_1_b_rem_cmp (
      .a(INNER_LOOP_1_b_rem_cmp_a),
      .b(reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse),
      .z(INNER_LOOP_1_b_rem_cmp_z)
    );
  mgc_shift_r_v5 #(.width_a(32'sd9),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd8)) INNER_LOOP_1_w_rshift_rg (
      .a(nl_INNER_LOOP_1_w_rshift_rg_a[8:0]),
      .s(OUTER_LOOP_acc_2_itm),
      .z(z_out_4)
    );
  mgc_shift_l_v5 #(.width_a(32'sd8),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) INNER_LOOP_1_w_lshift_rg (
      .a(nl_INNER_LOOP_1_w_lshift_rg_a[7:0]),
      .s(nl_INNER_LOOP_1_w_lshift_rg_s[3:0]),
      .z(z_out_5)
    );
  stockham_DIT_core_wait_dp stockham_DIT_core_wait_dp_inst (
      .yt_rsc_0_0_cgo_iro(nor_48_rmff),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_1_cgo_iro(nor_47_rmff),
      .yt_rsc_0_1_i_clken_d(yt_rsc_0_1_i_clken_d),
      .ensig_cgo_iro(mux_70_rmff),
      .yt_rsc_0_0_cgo(reg_yt_rsc_0_0_cgo_cse),
      .yt_rsc_0_1_cgo(reg_yt_rsc_0_1_cgo_cse),
      .ensig_cgo(reg_ensig_cgo_cse),
      .INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en(INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  stockham_DIT_core_core_fsm stockham_DIT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .INNER_LOOP_C_73_tr0(nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0[0:0]),
      .OUTER_LOOP_C_1_tr0(nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0[0:0])
    );
  assign nor_41_cse = ~((fsm_output[4:3]!=2'b00));
  assign OUTER_LOOP_nn_or_cse = and_dcpl_17 | and_dcpl_12;
  assign nand_4_nl = ~((fsm_output[1]) & (~((~((fsm_output[0]) | (~ s_0_sva))) |
      y_1_sva | (~ y_3_sva) | (fsm_output[6]))));
  assign or_94_nl = (fsm_output[1:0]!=2'b00) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign mux_32_nl = MUX_s_1_2_2(nand_4_nl, or_94_nl, fsm_output[2]);
  assign or_95_nl = (fsm_output[2:1]!=2'b01) | x_1_sva | (~ x_3_sva) | (pref_x_idx_pref_1_9_0_sva[0])
      | (~ (fsm_output[6]));
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, or_95_nl, fsm_output[3]);
  assign or_20_nl = x_1_sva | (~ x_3_sva) | (fsm_output[6]);
  assign or_19_nl = (pref_y_idx_pref_9_0_sva[0]) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign nor_5_nl = ~((pref_x_idx_pref_1_9_0_1_sva[0]) | x_1_sva | (~ x_3_sva));
  assign mux_28_nl = MUX_s_1_2_2(or_19_nl, (fsm_output[6]), nor_5_nl);
  assign or_18_nl = (reg_INNER_LOOP_upper_acc_ftd_8 & (pref_y_idx_pref_9_0_sva[0]))
      | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign mux_29_nl = MUX_s_1_2_2(mux_28_nl, or_18_nl, fsm_output[0]);
  assign mux_30_nl = MUX_s_1_2_2(or_20_nl, mux_29_nl, fsm_output[1]);
  assign nand_5_nl = ~((fsm_output[2]) & (~ mux_30_nl));
  assign or_96_nl = (fsm_output[2:0]!=3'b000) | reg_INNER_LOOP_upper_acc_ftd_8 |
      y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign mux_31_nl = MUX_s_1_2_2(nand_5_nl, or_96_nl, fsm_output[3]);
  assign mux_34_nl = MUX_s_1_2_2(mux_33_nl, mux_31_nl, fsm_output[5]);
  assign nor_48_rmff = ~(mux_34_nl | (fsm_output[4]));
  assign or_43_nl = (fsm_output[0]) | (fsm_output[2]) | (~ (pref_y_idx_pref_9_0_sva[0]))
      | (~ (fsm_output[3])) | (~ (fsm_output[5])) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign mux_50_nl = MUX_s_1_2_2(or_tmp_29, or_tmp_31, fsm_output[2]);
  assign mux_49_nl = MUX_s_1_2_2(or_tmp_29, or_tmp_26, fsm_output[2]);
  assign mux_51_nl = MUX_s_1_2_2(mux_50_nl, mux_49_nl, fsm_output[0]);
  assign mux_52_nl = MUX_s_1_2_2(or_43_nl, mux_51_nl, fsm_output[1]);
  assign or_42_nl = (fsm_output[2]) | (~ (pref_y_idx_pref_9_0_sva[0])) | (~ (fsm_output[3]))
      | (~ (fsm_output[5])) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign or_41_nl = (~ (fsm_output[3])) | (fsm_output[5]) | (~ (fsm_output[6]));
  assign or_39_nl = (~ (pref_x_idx_pref_1_9_0_1_sva[0])) | (fsm_output[3]) | (~ (fsm_output[5]))
      | (fsm_output[6]);
  assign mux_46_nl = MUX_s_1_2_2(or_41_nl, or_39_nl, fsm_output[2]);
  assign mux_47_nl = MUX_s_1_2_2(or_42_nl, mux_46_nl, fsm_output[0]);
  assign or_37_nl = (fsm_output[3]) | (~ (fsm_output[5])) | (fsm_output[6]);
  assign mux_43_nl = MUX_s_1_2_2(or_tmp_31, or_37_nl, pref_x_idx_pref_1_9_0_1_sva[0]);
  assign mux_44_nl = MUX_s_1_2_2(mux_tmp_31, mux_43_nl, fsm_output[2]);
  assign mux_41_nl = MUX_s_1_2_2(or_tmp_29, mux_tmp_31, pref_x_idx_pref_1_9_0_sva[0]);
  assign mux_42_nl = MUX_s_1_2_2(mux_41_nl, or_tmp_26, fsm_output[2]);
  assign mux_45_nl = MUX_s_1_2_2(mux_44_nl, mux_42_nl, fsm_output[0]);
  assign mux_48_nl = MUX_s_1_2_2(mux_47_nl, mux_45_nl, fsm_output[1]);
  assign nor_7_nl = ~(x_1_sva | (~ x_3_sva));
  assign mux_53_nl = MUX_s_1_2_2(mux_52_nl, mux_48_nl, nor_7_nl);
  assign nor_47_rmff = ~(mux_53_nl | (fsm_output[4]));
  assign mux_67_nl = MUX_s_1_2_2(not_tmp_42, mux_tmp_57, fsm_output[2]);
  assign mux_68_nl = MUX_s_1_2_2(mux_67_nl, mux_tmp_54, fsm_output[0]);
  assign and_116_nl = or_58_cse & (fsm_output[4]);
  assign mux_62_nl = MUX_s_1_2_2(not_tmp_42, and_116_nl, fsm_output[2]);
  assign mux_64_nl = MUX_s_1_2_2(mux_tmp_54, mux_62_nl, fsm_output[0]);
  assign mux_69_nl = MUX_s_1_2_2(mux_68_nl, mux_64_nl, fsm_output[1]);
  assign or_52_nl = (fsm_output[2:1]!=2'b00);
  assign mux_60_nl = MUX_s_1_2_2(or_tmp_1, or_tmp, or_52_nl);
  assign mux_70_rmff = MUX_s_1_2_2(mux_69_nl, (~ mux_60_nl), fsm_output[6]);
  assign or_58_cse = (~ (fsm_output[5])) | (fsm_output[3]);
  assign and_87_rgt = and_dcpl_40 & and_111_cse & (fsm_output[6]) & (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva[8]);
  assign and_111_cse = (fsm_output[1:0]==2'b11);
  assign or_67_cse = and_111_cse | (fsm_output[2]);
  assign INNER_LOOP_a_nor_cse = ~(INNER_LOOP_b_INNER_LOOP_b_and_1_m1c | reg_INNER_LOOP_upper_acc_ftd_8);
  assign drf_y_smx_lpi_3_dfm_2 = MUX1HOT_v_64_3_2(xt_rsc_0_1_i_q_d, yt_rsc_0_1_i_q_d,
      INNER_LOOP_b_sva, {INNER_LOOP_b_INNER_LOOP_b_and_m1c , INNER_LOOP_b_INNER_LOOP_b_and_1_m1c
      , INNER_LOOP_b_nor_itm});
  assign nl_INNER_LOOP_b_acc_1_nl = ({INNER_LOOP_1_upper_and_psp_sva_mx0w1 , 1'b0})
      + conv_u2s_8_9(INNER_LOOP_1_q_and_psp_sva_1);
  assign INNER_LOOP_b_acc_1_nl = nl_INNER_LOOP_b_acc_1_nl[8:0];
  assign nl_INNER_LOOP_b_acc_itm = INNER_LOOP_b_acc_1_nl + ({s_9_sva , s_8_sva ,
      s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva , s_1_sva});
  assign INNER_LOOP_b_acc_itm = nl_INNER_LOOP_b_acc_itm[8:0];
  assign INNER_LOOP_1_upper_and_psp_sva_mx0w1 = (~ (z_out[8:1])) & INNER_LOOP_1_upper_and_psp_sva;
  assign INNER_LOOP_1_q_and_psp_sva_1 = (z_out[8:1]) & INNER_LOOP_1_upper_and_psp_sva;
  assign nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 = conv_u2u_8_9(INNER_LOOP_1_q_and_psp_sva_1)
      + conv_u2u_8_9(INNER_LOOP_1_upper_and_psp_sva_mx0w1);
  assign INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 = nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1[8:0];
  assign nl_INNER_LOOP_1_mul_cse_sva_1 = ({s_9_sva , s_8_sva , s_7_sva , s_6_sva
      , s_5_sva , s_4_sva , s_3_sva , s_2_sva , s_1_sva , s_0_sva}) * OUTER_LOOP_m_lshift_psp_sva;
  assign INNER_LOOP_1_mul_cse_sva_1 = nl_INNER_LOOP_1_mul_cse_sva_1[9:0];
  assign INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0 = y_1_sva & (~ y_3_sva);
  assign INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0 = y_3_sva & (~ y_1_sva);
  assign INNER_LOOP_b_and_nl = (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
  assign INNER_LOOP_b_and_1_nl = s_0_sva & INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
  assign INNER_LOOP_b_and_2_nl = (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
  assign INNER_LOOP_b_and_3_nl = s_0_sva & INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
  assign drf_y_smx_lpi_3_dfm_3 = MUX1HOT_v_64_5_2(xt_rsc_0_0_i_q_d, xt_rsc_0_1_i_q_d,
      yt_rsc_0_0_i_q_d, yt_rsc_0_1_i_q_d, drf_y_smx_lpi_2, {INNER_LOOP_b_and_nl ,
      INNER_LOOP_b_and_1_nl , INNER_LOOP_b_and_2_nl , INNER_LOOP_b_and_3_nl , INNER_LOOP_b_nor_itm});
  assign xor_dcpl_3 = y_3_sva ^ y_1_sva;
  assign or_tmp = (fsm_output[5:3]!=3'b000);
  assign or_tmp_1 = (fsm_output[5:4]!=2'b00);
  assign and_124_nl = ((fsm_output[1:0]!=2'b00)) & (fsm_output[2]);
  assign mux_tmp_7 = MUX_s_1_2_2(or_tmp_1, or_tmp, and_124_nl);
  assign nor_nl = ~((fsm_output[5:0]!=6'b000000));
  assign mux_tmp_8 = MUX_s_1_2_2(nor_nl, mux_tmp_7, fsm_output[6]);
  assign and_dcpl_7 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_9 = (~ (fsm_output[5])) & (fsm_output[2]);
  assign and_dcpl_10 = (fsm_output[4:3]==2'b01);
  assign and_dcpl_11 = and_dcpl_10 & and_dcpl_9;
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_7 & (fsm_output[6]);
  assign and_dcpl_13 = and_dcpl_7 & (~ (fsm_output[6]));
  assign and_dcpl_14 = ~((fsm_output[5]) | (fsm_output[2]));
  assign and_dcpl_16 = nor_41_cse & and_dcpl_14;
  assign and_dcpl_17 = and_dcpl_16 & and_dcpl_13;
  assign or_tmp_9 = (fsm_output[4:3]!=2'b00);
  assign and_tmp = (fsm_output[5]) & or_tmp_9;
  assign mux_tmp_12 = MUX_s_1_2_2(nor_41_cse, or_tmp_9, fsm_output[5]);
  assign mux_tmp_14 = MUX_s_1_2_2(mux_tmp_12, and_tmp, fsm_output[2]);
  assign and_dcpl_18 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_19 = and_dcpl_18 & (~ (fsm_output[6]));
  assign and_dcpl_21 = (fsm_output[4:3]==2'b10) & and_dcpl_9;
  assign and_dcpl_24 = and_111_cse & (~ (fsm_output[6]));
  assign and_dcpl_25 = (fsm_output[5]) & (fsm_output[2]);
  assign and_dcpl_26 = nor_41_cse & and_dcpl_25;
  assign and_dcpl_27 = and_dcpl_26 & and_dcpl_24;
  assign and_dcpl_28 = (fsm_output[5]) & (~ (fsm_output[2]));
  assign and_dcpl_30 = and_dcpl_10 & and_dcpl_28 & and_dcpl_13;
  assign and_dcpl_32 = and_dcpl_16 & and_dcpl_19;
  assign and_dcpl_33 = and_dcpl_16 & and_dcpl_24;
  assign and_dcpl_34 = and_dcpl_26 & and_dcpl_19;
  assign and_dcpl_36 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_38 = and_dcpl_26 & and_dcpl_36 & (~ (fsm_output[6]));
  assign and_dcpl_40 = and_dcpl_10 & and_dcpl_14;
  assign and_dcpl_41 = and_dcpl_40 & and_dcpl_18 & (fsm_output[6]);
  assign and_dcpl_43 = (~ (fsm_output[4])) & x_3_sva & (~ x_1_sva);
  assign nor_33_nl = ~((fsm_output[1]) | (~ (fsm_output[2])) | (~ (fsm_output[5]))
      | (fsm_output[3]));
  assign nor_34_nl = ~((fsm_output[1]) | (fsm_output[0]) | (~ (fsm_output[2])) |
      (~ (fsm_output[5])) | (fsm_output[3]));
  assign mux_35_nl = MUX_s_1_2_2(nor_33_nl, nor_34_nl, pref_x_idx_pref_1_9_0_1_sva[0]);
  assign nor_35_nl = ~((pref_x_idx_pref_1_9_0_sva[0]) | (~ (fsm_output[1])) | (fsm_output[0])
      | (fsm_output[2]) | (fsm_output[5]) | (~ (fsm_output[3])));
  assign not_tmp_31 = MUX_s_1_2_2(mux_35_nl, nor_35_nl, fsm_output[6]);
  assign and_dcpl_48 = nor_41_cse & y_3_sva & (~ y_1_sva) & (fsm_output[1]) & (~
      (fsm_output[6]));
  assign or_31_nl = s_0_sva | (fsm_output[5]);
  assign or_30_nl = (pref_y_idx_pref_9_0_sva[0]) | (~ (fsm_output[5]));
  assign mux_38_nl = MUX_s_1_2_2(or_31_nl, or_30_nl, fsm_output[2]);
  assign or_29_nl = reg_INNER_LOOP_upper_acc_ftd_8 | (~ (fsm_output[5]));
  assign mux_37_nl = MUX_s_1_2_2((fsm_output[5]), or_29_nl, fsm_output[2]);
  assign mux_39_itm = MUX_s_1_2_2(mux_38_nl, mux_37_nl, fsm_output[0]);
  assign or_tmp_26 = (~((pref_y_idx_pref_9_0_sva[0]) | reg_INNER_LOOP_upper_acc_ftd_8))
      | (fsm_output[3]) | (~ (fsm_output[5])) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign or_35_nl = (fsm_output[5]) | (~ s_0_sva) | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign or_34_nl = (fsm_output[6:5]!=2'b10);
  assign mux_tmp_31 = MUX_s_1_2_2(or_35_nl, or_34_nl, fsm_output[3]);
  assign or_tmp_29 = (fsm_output[3]) | (fsm_output[5]) | (~ s_0_sva) | y_1_sva |
      (~ y_3_sva) | (fsm_output[6]);
  assign or_tmp_31 = (~ reg_INNER_LOOP_upper_acc_ftd_8) | (fsm_output[3]) | (~ (fsm_output[5]))
      | y_1_sva | (~ y_3_sva) | (fsm_output[6]);
  assign nor_28_nl = ~((~ (pref_x_idx_pref_1_9_0_1_sva[0])) | (fsm_output[1]) | (~
      (fsm_output[0])) | (~ (fsm_output[2])) | (~ (fsm_output[5])) | (fsm_output[3]));
  assign nor_29_nl = ~((fsm_output[1]) | (~ (fsm_output[0])) | (fsm_output[2]) |
      (fsm_output[5]) | (~ (fsm_output[3])));
  assign nor_30_nl = ~((~ (fsm_output[0])) | (fsm_output[2]) | (fsm_output[5]) |
      (~ (fsm_output[3])));
  assign nor_31_nl = ~((fsm_output[0]) | (fsm_output[2]) | (fsm_output[5]) | (~ (fsm_output[3])));
  assign mux_54_nl = MUX_s_1_2_2(nor_30_nl, nor_31_nl, fsm_output[1]);
  assign mux_55_nl = MUX_s_1_2_2(nor_29_nl, mux_54_nl, pref_x_idx_pref_1_9_0_sva[0]);
  assign not_tmp_36 = MUX_s_1_2_2(nor_28_nl, mux_55_nl, fsm_output[6]);
  assign nor_27_nl = ~((~ s_0_sva) | (fsm_output[5]));
  assign and_118_nl = reg_INNER_LOOP_upper_acc_ftd_8 & (fsm_output[5]);
  assign mux_57_nl = MUX_s_1_2_2(nor_27_nl, and_118_nl, fsm_output[2]);
  assign and_119_nl = (fsm_output[2]) & (pref_y_idx_pref_9_0_sva[0]) & (fsm_output[5]);
  assign mux_tmp_49 = MUX_s_1_2_2(mux_57_nl, and_119_nl, fsm_output[0]);
  assign and_dcpl_56 = (~ (fsm_output[4])) & (~ x_3_sva) & x_1_sva;
  assign and_dcpl_61 = nor_41_cse & (~ y_3_sva) & y_1_sva & (fsm_output[1]) & (~
      (fsm_output[6]));
  assign and_dcpl_66 = and_dcpl_14 & (fsm_output[1]) & (~ (fsm_output[6]));
  assign nor_tmp_11 = (fsm_output[4:3]==2'b11);
  assign not_tmp_42 = MUX_s_1_2_2(nor_tmp_11, (~ or_tmp_9), fsm_output[5]);
  assign mux_107_nl = MUX_s_1_2_2(nor_tmp_11, (~ or_tmp_9), fsm_output[5]);
  assign mux_tmp_54 = MUX_s_1_2_2(mux_107_nl, nor_tmp_11, fsm_output[2]);
  assign mux_tmp_56 = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[3]);
  assign mux_tmp_57 = MUX_s_1_2_2(nor_tmp_11, mux_tmp_56, fsm_output[5]);
  assign and_dcpl_74 = and_dcpl_21 & and_dcpl_24;
  assign and_dcpl_80 = nor_tmp_11 & and_dcpl_25 & and_dcpl_13;
  assign not_tmp_49 = MUX_s_1_2_2(mux_tmp_56, (~ or_tmp_9), fsm_output[5]);
  assign not_tmp_57 = ~(and_111_cse | (fsm_output[5:2]!=4'b0000));
  assign mux_tmp_85 = MUX_s_1_2_2(and_tmp, (fsm_output[5]), fsm_output[2]);
  assign or_dcpl_13 = or_tmp_9 | (fsm_output[5]) | (fsm_output[2]);
  assign or_dcpl_14 = or_dcpl_13 | (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[6]);
  assign or_dcpl_17 = or_dcpl_13 | (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[6]);
  assign and_dcpl_97 = nor_41_cse & and_dcpl_9;
  assign INNER_LOOP_w_mux_1_itm_mx0c1 = and_dcpl_97 & and_dcpl_7 & (~ (fsm_output[6]))
      & reg_INNER_LOOP_1_w_lshift_idiv_ftd_9;
  assign INNER_LOOP_1_acc_5_itm_mx0c0 = and_dcpl_97 & and_dcpl_7 & (~ (fsm_output[6]))
      & INNER_LOOP_b_INNER_LOOP_b_and_1_m1c;
  assign nl_OUTER_LOOP_acc_nl = (z_out[3:1]) + 3'b011;
  assign OUTER_LOOP_acc_nl = nl_OUTER_LOOP_acc_nl[2:0];
  assign OUTER_LOOP_acc_itm_2_1 = readslicef_3_1_2(OUTER_LOOP_acc_nl);
  assign yt_rsc_0_0_i_d_d_pff = INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign yt_rsc_0_0_i_radr_d_pff = MUX1HOT_v_9_4_2(INNER_LOOP_b_acc_itm, ({INNER_LOOP_a_acc_psp_2_sva
      , INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm}), (pref_y_idx_pref_9_0_sva[9:1]),
      INNER_LOOP_a_acc_psp_sva, {and_dcpl_32 , and_dcpl_33 , and_dcpl_34 , and_dcpl_27});
  assign and_36_nl = and_dcpl_26 & and_dcpl_13;
  assign yt_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_9_3_2(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva[9:1]), (pref_x_idx_pref_1_9_0_sva[9:1]), {and_36_nl
      , and_dcpl_38 , and_dcpl_41});
  assign yt_rsc_0_0_i_we_d_pff = not_tmp_31 & and_dcpl_43;
  assign yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_39_itm) & and_dcpl_48;
  assign yt_rsc_0_1_i_radr_d_pff = MUX1HOT_v_9_3_2(INNER_LOOP_b_acc_itm, INNER_LOOP_a_acc_psp_sva,
      (pref_y_idx_pref_9_0_sva[9:1]), {and_dcpl_32 , and_dcpl_34 , and_dcpl_27});
  assign and_53_nl = and_dcpl_40 & and_dcpl_36 & (fsm_output[6]);
  assign yt_rsc_0_1_i_wadr_d_pff = MUX1HOT_v_9_3_2((pref_x_idx_pref_1_9_0_1_sva[9:1]),
      INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva, (pref_x_idx_pref_1_9_0_sva[9:1]),
      {and_dcpl_38 , and_53_nl , and_dcpl_41});
  assign yt_rsc_0_1_i_we_d_pff = not_tmp_36 & and_dcpl_43;
  assign yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = mux_tmp_49 & and_dcpl_48;
  assign xt_rsc_0_0_i_we_d_pff = not_tmp_31 & and_dcpl_56;
  assign xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ mux_39_itm) & and_dcpl_61;
  assign xt_rsc_0_1_i_we_d_pff = not_tmp_36 & and_dcpl_56;
  assign xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = mux_tmp_49 & and_dcpl_61;
  assign twiddle_rsc_0_0_i_radr_d_pff = z_out_5[9:1];
  assign twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = (~ (z_out_5[0])) &
      nor_41_cse & and_dcpl_66;
  assign twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = (z_out_5[0]) & nor_41_cse
      & and_dcpl_66;
  assign and_dcpl_112 = and_dcpl_10 & and_dcpl_14 & (fsm_output[0]) & (fsm_output[1])
      & (fsm_output[6]);
  assign and_dcpl_116 = (fsm_output[4:3]==2'b00) & and_dcpl_14;
  assign and_dcpl_117 = and_dcpl_116 & (fsm_output[0]) & (~ (fsm_output[1])) & (~
      (fsm_output[6]));
  assign and_dcpl_122 = and_dcpl_10 & (~ (fsm_output[5])) & (fsm_output[2]) & (~
      (fsm_output[0])) & (~ (fsm_output[1])) & (fsm_output[6]);
  assign and_dcpl_125 = and_dcpl_116 & (~ (fsm_output[0])) & (fsm_output[1]) & (~
      (fsm_output[6]));
  assign and_dcpl_161 = (fsm_output[5:2]==4'b1010) & and_dcpl_7 & (~ (fsm_output[6]));
  assign and_dcpl_170 = nor_41_cse & and_dcpl_14 & (fsm_output[0]) & (fsm_output[1])
      & (~ (fsm_output[6]));
  assign OUTER_LOOP_nor_itm = ~(and_dcpl_112 | and_dcpl_117 | and_dcpl_122);
  assign OUTER_LOOP_m_or_1_itm = (and_dcpl_16 & (~ (fsm_output[0])) & (fsm_output[1])
      & (~ (fsm_output[6]))) | (and_dcpl_16 & (fsm_output[0]) & (fsm_output[1]) &
      (~ (fsm_output[6])));
  always @(posedge clk) begin
    if ( rst ) begin
      s_0_sva <= 1'b0;
      reg_yt_rsc_0_0_cgo_cse <= 1'b0;
      reg_yt_rsc_0_1_cgo_cse <= 1'b0;
      reg_xt_rsc_triosy_0_1_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 <= 1'b0;
    end
    else begin
      s_0_sva <= s_mux_10_nl & (~ mux_tmp_8);
      reg_yt_rsc_0_0_cgo_cse <= nor_48_rmff;
      reg_yt_rsc_0_1_cgo_cse <= nor_47_rmff;
      reg_xt_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_11 & and_dcpl_7 & (fsm_output[6])
          & (~ OUTER_LOOP_acc_itm_2_1);
      reg_ensig_cgo_cse <= mux_70_rmff;
      reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 <= z_out_5[0];
    end
  end
  always @(posedge clk) begin
    reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    INNER_LOOP_1_b_rem_cmp_a <= MUX_v_128_2_2(z_out_3, INNER_LOOP_1_b_mul_mut, nor_51_nl);
    INNER_LOOP_1_upper_and_psp_sva <= MUX_v_8_2_2(8'b00000000, INNER_LOOP_t_mux_nl,
        nor_53_nl);
  end
  always @(posedge clk) begin
    if ( OUTER_LOOP_nn_or_cse ) begin
      OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(4'b0001, (z_out[3:0]), and_dcpl_12);
      s_9_sva <= and_dcpl_17;
      s_8_sva <= s_9_sva & (~ and_dcpl_17);
      s_7_sva <= s_8_sva & (~ and_dcpl_17);
      s_6_sva <= s_7_sva & (~ and_dcpl_17);
      s_5_sva <= s_6_sva & (~ and_dcpl_17);
      s_4_sva <= s_5_sva & (~ and_dcpl_17);
      s_3_sva <= s_4_sva & (~ and_dcpl_17);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      x_3_sva <= 1'b0;
      x_1_sva <= 1'b0;
      y_3_sva <= 1'b0;
      y_1_sva <= 1'b0;
      s_2_sva <= 1'b0;
      s_1_sva <= 1'b0;
    end
    else if ( OUTER_LOOP_nn_or_cse ) begin
      x_3_sva <= y_3_sva | and_dcpl_17;
      x_1_sva <= y_1_sva & (~ and_dcpl_17);
      y_3_sva <= x_3_sva & (~ and_dcpl_17);
      y_1_sva <= x_1_sva | and_dcpl_17;
      s_2_sva <= s_3_sva & (~ and_dcpl_17);
      s_1_sva <= s_2_sva & (~ and_dcpl_17);
    end
  end
  always @(posedge clk) begin
    if ( mux_tmp_8 ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2((~ mux_26_nl), mux_tmp_7, fsm_output[6]) ) begin
      drf_y_smx_lpi_2 <= MUX1HOT_v_64_3_2(INNER_LOOP_1_b_rem_cmp_z, xt_rsc_0_1_i_q_d,
          drf_y_smx_lpi_3_dfm_2, {and_23_nl , and_dcpl_27 , and_dcpl_30});
    end
  end
  always @(posedge clk) begin
    if ( mux_tmp_8 | and_87_rgt ) begin
      OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(4'b1001, (z_out[3:0]), and_87_rgt);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_23_nl, mux_18_nl, fsm_output[6]) ) begin
      OUTER_LOOP_m_lshift_psp_sva <= z_out_5[8:0];
    end
  end
  always @(posedge clk) begin
    if ( xor_dcpl_3 ) begin
      INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm <= INNER_LOOP_1_q_and_psp_sva_1[0];
      INNER_LOOP_a_acc_psp_2_sva <= nl_INNER_LOOP_a_acc_psp_2_sva[7:0];
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(not_tmp_57, mux_92_nl, fsm_output[6]) ) begin
      INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva <= INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_x_idx_pref_1_9_0_1_sva <= 10'b0000000000;
    end
    else if ( mux_97_nl | (fsm_output[6]) ) begin
      pref_x_idx_pref_1_9_0_1_sva <= nl_pref_x_idx_pref_1_9_0_1_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( mux_98_nl | (fsm_output[6]) ) begin
      INNER_LOOP_a_acc_psp_sva <= nl_INNER_LOOP_a_acc_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_y_idx_pref_9_0_sva <= 10'b0000000000;
    end
    else if ( mux_99_nl | (fsm_output[6]) ) begin
      pref_y_idx_pref_9_0_sva <= nl_pref_y_idx_pref_9_0_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_x_idx_pref_1_9_0_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(not_tmp_57, mux_100_nl, fsm_output[6]) ) begin
      pref_x_idx_pref_1_9_0_sva <= nl_pref_x_idx_pref_1_9_0_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= 9'b000000000;
    end
    else if ( ~ or_dcpl_14 ) begin
      INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= nl_INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_nor_itm <= 1'b0;
    end
    else if ( ~ or_dcpl_14 ) begin
      INNER_LOOP_b_nor_itm <= ~(INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0 | INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_m1c <= 1'b0;
    end
    else if ( ~ or_dcpl_17 ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_m1c <= INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_1_m1c <= 1'b0;
    end
    else if ( ~ or_dcpl_17 ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_1_m1c <= INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_33 | and_dcpl_30 ) begin
      INNER_LOOP_1_b_mul_mut <= z_out_3;
    end
  end
  always @(posedge clk) begin
    if ( mux_tmp_14 | (fsm_output[6]) ) begin
      INNER_LOOP_b_sva <= MUX_v_64_2_2(drf_y_smx_lpi_3_dfm_3, INNER_LOOP_1_b_rem_cmp_z,
          and_95_nl);
    end
  end
  always @(posedge clk) begin
    if ( (and_dcpl_97 & and_dcpl_7 & (~ (fsm_output[6])) & (~ reg_INNER_LOOP_1_w_lshift_idiv_ftd_9))
        | INNER_LOOP_w_mux_1_itm_mx0c1 ) begin
      INNER_LOOP_w_mux_1_itm <= MUX_v_64_2_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
          INNER_LOOP_w_mux_1_itm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( ((INNER_LOOP_a_nor_cse | (reg_INNER_LOOP_upper_acc_ftd_8 & (~ INNER_LOOP_b_INNER_LOOP_b_and_1_m1c))
        | (INNER_LOOP_b_INNER_LOOP_b_and_1_m1c & (~ reg_INNER_LOOP_upper_acc_ftd_8)))
        & (~(mux_106_nl | (fsm_output[6])))) | INNER_LOOP_1_acc_5_itm_mx0c0 | and_dcpl_74
        | and_dcpl_27 | and_dcpl_80 ) begin
      INNER_LOOP_1_acc_5_itm <= MUX1HOT_v_64_5_2(yt_rsc_0_0_i_q_d, xt_rsc_0_0_i_q_d,
          (readslicef_65_64_1(acc_1_nl)), yt_rsc_0_1_i_q_d, drf_y_smx_lpi_2, {INNER_LOOP_a_or_nl
          , INNER_LOOP_a_or_1_nl , INNER_LOOP_a_or_2_nl , and_dcpl_27 , INNER_LOOP_a_and_2_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_INNER_LOOP_upper_acc_ftd_8 <= 1'b0;
    end
    else if ( ~ or_dcpl_14 ) begin
      reg_INNER_LOOP_upper_acc_ftd_8 <= z_out[0];
    end
  end
  assign s_mux_10_nl = MUX_s_1_2_2(s_0_sva, s_1_sva, and_dcpl_12);
  assign mux_81_nl = MUX_s_1_2_2(mux_tmp_56, (~ (fsm_output[4])), fsm_output[5]);
  assign mux_82_nl = MUX_s_1_2_2(mux_81_nl, mux_tmp_57, fsm_output[2]);
  assign mux_80_nl = MUX_s_1_2_2(not_tmp_49, mux_tmp_57, fsm_output[2]);
  assign mux_83_nl = MUX_s_1_2_2(mux_82_nl, mux_80_nl, fsm_output[0]);
  assign mux_76_nl = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), or_58_cse);
  assign mux_78_nl = MUX_s_1_2_2(not_tmp_49, mux_76_nl, fsm_output[2]);
  assign or_57_nl = (~((~ (fsm_output[2])) | (fsm_output[5]))) | (fsm_output[3]);
  assign mux_75_nl = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), or_57_nl);
  assign mux_79_nl = MUX_s_1_2_2(mux_78_nl, mux_75_nl, fsm_output[0]);
  assign mux_84_nl = MUX_s_1_2_2(mux_83_nl, mux_79_nl, fsm_output[1]);
  assign nor_51_nl = ~(mux_84_nl | (fsm_output[6]));
  assign and_89_nl = and_dcpl_40 & and_111_cse & (fsm_output[6]);
  assign INNER_LOOP_t_mux_nl = MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1,
      (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva[7:0]), and_89_nl);
  assign or_90_nl = (fsm_output[0]) | (fsm_output[3]);
  assign nand_3_nl = ~((fsm_output[0]) & (fsm_output[3]));
  assign mux_91_nl = MUX_s_1_2_2(or_90_nl, nand_3_nl, fsm_output[6]);
  assign nor_53_nl = ~(or_tmp_1 | (fsm_output[2:1]!=2'b01) | mux_91_nl);
  assign and_23_nl = and_dcpl_21 & and_dcpl_19;
  assign and_123_nl = (fsm_output[5:4]==2'b11);
  assign mux_24_nl = MUX_s_1_2_2(and_123_nl, and_tmp, fsm_output[2]);
  assign mux_25_nl = MUX_s_1_2_2(mux_24_nl, mux_tmp_14, fsm_output[0]);
  assign or_15_nl = (fsm_output[0]) | (fsm_output[2]);
  assign mux_22_nl = MUX_s_1_2_2(mux_tmp_12, and_tmp, or_15_nl);
  assign mux_26_nl = MUX_s_1_2_2(mux_25_nl, mux_22_nl, fsm_output[1]);
  assign nor_23_nl = ~((fsm_output[5:1]!=5'b00000));
  assign mux_18_nl = MUX_s_1_2_2(or_tmp_1, or_tmp, fsm_output[2]);
  assign nl_INNER_LOOP_a_acc_psp_2_sva  = conv_u2u_7_8(INNER_LOOP_1_q_and_psp_sva_1[7:1])
      + INNER_LOOP_1_upper_and_psp_sva_mx0w1;
  assign or_65_nl = (fsm_output[2:0]!=3'b000);
  assign mux_92_nl = MUX_s_1_2_2(or_tmp_1, or_tmp, or_65_nl);
  assign nl_pref_x_idx_pref_1_9_0_1_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
      , 1'b0}) + INNER_LOOP_1_mul_cse_sva_1;
  assign mux_95_nl = MUX_s_1_2_2(mux_tmp_12, (fsm_output[5]), fsm_output[2]);
  assign mux_96_nl = MUX_s_1_2_2(mux_95_nl, mux_tmp_85, fsm_output[0]);
  assign mux_97_nl = MUX_s_1_2_2(mux_tmp_14, mux_96_nl, fsm_output[1]);
  assign nl_INNER_LOOP_a_acc_psp_sva  = conv_u2u_8_9(INNER_LOOP_1_q_and_psp_sva_1)
      + ({INNER_LOOP_1_upper_and_psp_sva_mx0w1 , (~ (z_out[0]))});
  assign mux_98_nl = MUX_s_1_2_2(mux_tmp_14, mux_tmp_85, and_111_cse);
  assign nl_INNER_LOOP_b_acc_2_nl = ({s_9_sva , INNER_LOOP_1_q_and_psp_sva_1 , 1'b0})
      + conv_u2u_9_10({s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva
      , s_2_sva , s_1_sva , 1'b1}) + conv_u2u_1_10(~ (z_out[0]));
  assign INNER_LOOP_b_acc_2_nl = nl_INNER_LOOP_b_acc_2_nl[9:0];
  assign nl_pref_y_idx_pref_9_0_sva  = INNER_LOOP_b_acc_2_nl + ({INNER_LOOP_1_upper_and_psp_sva_mx0w1
      , 1'b0 , s_0_sva});
  assign mux_99_nl = MUX_s_1_2_2(mux_tmp_12, and_tmp, or_67_cse);
  assign nl_pref_x_idx_pref_1_9_0_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
      , 1'b1}) + INNER_LOOP_1_mul_cse_sva_1;
  assign mux_100_nl = MUX_s_1_2_2(or_tmp_1, or_tmp, or_67_cse);
  assign nl_INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva  = conv_u2s_8_9(INNER_LOOP_1_upper_and_psp_sva)
      + 9'b000000001;
  assign and_95_nl = nor_tmp_11 & and_dcpl_28 & and_dcpl_24;
  assign INNER_LOOP_mux_4_nl = MUX_v_64_2_2((~ drf_y_smx_lpi_2), (~ INNER_LOOP_b_sva),
      and_202_cse);
  assign nl_acc_1_nl = ({INNER_LOOP_1_acc_5_itm , 1'b1}) + ({INNER_LOOP_mux_4_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[64:0];
  assign INNER_LOOP_a_or_nl = INNER_LOOP_1_acc_5_itm_mx0c0 | (INNER_LOOP_b_INNER_LOOP_b_and_1_m1c
      & (~ reg_INNER_LOOP_upper_acc_ftd_8) & and_dcpl_30);
  assign INNER_LOOP_a_or_1_nl = (and_dcpl_97 & and_dcpl_7 & (~ (fsm_output[6])) &
      (~ INNER_LOOP_b_INNER_LOOP_b_and_1_m1c)) | (INNER_LOOP_a_nor_cse & and_dcpl_30);
  assign INNER_LOOP_a_or_2_nl = and_dcpl_74 | and_dcpl_80;
  assign INNER_LOOP_a_and_2_nl = reg_INNER_LOOP_upper_acc_ftd_8 & (~ INNER_LOOP_b_INNER_LOOP_b_and_1_m1c)
      & and_dcpl_30;
  assign nor_21_nl = ~((fsm_output[5:3]!=3'b101));
  assign mux_104_nl = MUX_s_1_2_2(nor_41_cse, nor_tmp_11, fsm_output[5]);
  assign mux_105_nl = MUX_s_1_2_2(nor_21_nl, mux_104_nl, fsm_output[2]);
  assign or_88_nl = (fsm_output[0]) | (~ mux_105_nl);
  assign or_86_nl = (fsm_output[4:3]!=2'b10);
  assign mux_103_nl = MUX_s_1_2_2(or_86_nl, or_tmp_9, fsm_output[5]);
  assign nand_2_nl = ~((fsm_output[0]) & (fsm_output[2]) & (~ mux_103_nl));
  assign mux_106_nl = MUX_s_1_2_2(or_88_nl, nand_2_nl, fsm_output[1]);
  assign OUTER_LOOP_OUTER_LOOP_and_5_nl = s_8_sva & OUTER_LOOP_nor_itm;
  assign OUTER_LOOP_OUTER_LOOP_and_6_nl = s_7_sva & OUTER_LOOP_nor_itm;
  assign OUTER_LOOP_OUTER_LOOP_and_7_nl = s_6_sva & OUTER_LOOP_nor_itm;
  assign OUTER_LOOP_OUTER_LOOP_and_8_nl = s_5_sva & OUTER_LOOP_nor_itm;
  assign OUTER_LOOP_OUTER_LOOP_and_9_nl = s_4_sva & OUTER_LOOP_nor_itm;
  assign OUTER_LOOP_or_3_nl = and_dcpl_117 | and_dcpl_122;
  assign OUTER_LOOP_mux1h_3_nl = MUX1HOT_v_4_3_2(OUTER_LOOP_acc_2_itm, OUTER_LOOP_nn_3_0_sva,
      ({s_3_sva , s_2_sva , s_1_sva , s_0_sva}), {and_dcpl_112 , OUTER_LOOP_or_3_nl
      , and_dcpl_125});
  assign OUTER_LOOP_OUTER_LOOP_or_1_nl = and_dcpl_112 | and_dcpl_117 | and_dcpl_125;
  assign nl_z_out = ({OUTER_LOOP_OUTER_LOOP_and_5_nl , OUTER_LOOP_OUTER_LOOP_and_6_nl
      , OUTER_LOOP_OUTER_LOOP_and_7_nl , OUTER_LOOP_OUTER_LOOP_and_8_nl , OUTER_LOOP_OUTER_LOOP_and_9_nl
      , OUTER_LOOP_mux1h_3_nl}) + conv_s2u_2_9({OUTER_LOOP_OUTER_LOOP_or_1_nl , 1'b1});
  assign z_out = nl_z_out[8:0];
  assign and_202_cse = (fsm_output==7'b0111100);
  assign INNER_LOOP_b_mux_4_nl = MUX_v_64_2_2(drf_y_smx_lpi_3_dfm_3, drf_y_smx_lpi_3_dfm_2,
      and_dcpl_161);
  assign INNER_LOOP_b_INNER_LOOP_b_nor_1_nl = ~(reg_INNER_LOOP_1_w_lshift_idiv_ftd_9
      | and_dcpl_161);
  assign INNER_LOOP_b_and_6_nl = reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 & (~ and_dcpl_161);
  assign INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl = MUX1HOT_v_64_3_2(twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_1_i_q_d, INNER_LOOP_w_mux_1_itm, {INNER_LOOP_b_INNER_LOOP_b_nor_1_nl
      , INNER_LOOP_b_and_6_nl , and_dcpl_161});
  assign z_out_3 = conv_u2u_128_128(INNER_LOOP_b_mux_4_nl * INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl);

  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [127:0] MUX_v_128_2_2;
    input [127:0] input_0;
    input [127:0] input_1;
    input [0:0] sel;
    reg [127:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_128_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_1_10 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_10 = {{9{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [127:0] conv_u2u_128_128 ;
    input [127:0]  vector ;
  begin
    conv_u2u_128_128 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT
// ------------------------------------------------------------------


module stockham_DIT (
  clk, rst, xt_rsc_0_0_wadr, xt_rsc_0_0_d, xt_rsc_0_0_we, xt_rsc_0_0_radr, xt_rsc_0_0_q,
      xt_rsc_triosy_0_0_lz, xt_rsc_0_1_wadr, xt_rsc_0_1_d, xt_rsc_0_1_we, xt_rsc_0_1_radr,
      xt_rsc_0_1_q, xt_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz, g_rsc_dat,
      g_rsc_triosy_lz, twiddle_rsc_0_0_radr, twiddle_rsc_0_0_q, twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_0_1_radr, twiddle_rsc_0_1_q, twiddle_rsc_triosy_0_1_lz
);
  input clk;
  input rst;
  output [8:0] xt_rsc_0_0_wadr;
  output [63:0] xt_rsc_0_0_d;
  output xt_rsc_0_0_we;
  output [8:0] xt_rsc_0_0_radr;
  input [63:0] xt_rsc_0_0_q;
  output xt_rsc_triosy_0_0_lz;
  output [8:0] xt_rsc_0_1_wadr;
  output [63:0] xt_rsc_0_1_d;
  output xt_rsc_0_1_we;
  output [8:0] xt_rsc_0_1_radr;
  input [63:0] xt_rsc_0_1_q;
  output xt_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] g_rsc_dat;
  output g_rsc_triosy_lz;
  output [8:0] twiddle_rsc_0_0_radr;
  input [63:0] twiddle_rsc_0_0_q;
  output twiddle_rsc_triosy_0_0_lz;
  output [8:0] twiddle_rsc_0_1_radr;
  input [63:0] twiddle_rsc_0_1_q;
  output twiddle_rsc_triosy_0_1_lz;


  // Interconnect Declarations
  wire yt_rsc_0_0_i_clken_d;
  wire [63:0] yt_rsc_0_0_i_q_d;
  wire yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_1_i_clken_d;
  wire [63:0] yt_rsc_0_1_i_q_d;
  wire yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_0_i_q_d;
  wire xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_1_i_q_d;
  wire xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_0_i_q_d;
  wire twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_1_i_q_d;
  wire twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_0_clken;
  wire [63:0] yt_rsc_0_0_q;
  wire [8:0] yt_rsc_0_0_radr;
  wire yt_rsc_0_0_we;
  wire [63:0] yt_rsc_0_0_d;
  wire [8:0] yt_rsc_0_0_wadr;
  wire yt_rsc_0_1_clken;
  wire [63:0] yt_rsc_0_1_q;
  wire [8:0] yt_rsc_0_1_radr;
  wire yt_rsc_0_1_we;
  wire [63:0] yt_rsc_0_1_d;
  wire [8:0] yt_rsc_0_1_wadr;
  wire [63:0] yt_rsc_0_0_i_d_d_iff;
  wire [8:0] yt_rsc_0_0_i_radr_d_iff;
  wire [8:0] yt_rsc_0_0_i_wadr_d_iff;
  wire yt_rsc_0_0_i_we_d_iff;
  wire [8:0] yt_rsc_0_1_i_radr_d_iff;
  wire [8:0] yt_rsc_0_1_i_wadr_d_iff;
  wire yt_rsc_0_1_i_we_d_iff;
  wire xt_rsc_0_0_i_we_d_iff;
  wire xt_rsc_0_1_i_we_d_iff;
  wire [8:0] twiddle_rsc_0_0_i_radr_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd64),
  .depth(32'sd512),
  .latency(32'sd1)) yt_rsc_0_0_comp (
      .clk(clk),
      .clken(yt_rsc_0_0_clken),
      .d(yt_rsc_0_0_d),
      .q(yt_rsc_0_0_q),
      .radr(yt_rsc_0_0_radr),
      .wadr(yt_rsc_0_0_wadr),
      .we(yt_rsc_0_0_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd64),
  .depth(32'sd512),
  .latency(32'sd1)) yt_rsc_0_1_comp (
      .clk(clk),
      .clken(yt_rsc_0_1_clken),
      .d(yt_rsc_0_1_d),
      .q(yt_rsc_0_1_q),
      .radr(yt_rsc_0_1_radr),
      .wadr(yt_rsc_0_1_wadr),
      .we(yt_rsc_0_1_we)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen yt_rsc_0_0_i
      (
      .clken(yt_rsc_0_0_clken),
      .q(yt_rsc_0_0_q),
      .radr(yt_rsc_0_0_radr),
      .we(yt_rsc_0_0_we),
      .d(yt_rsc_0_0_d),
      .wadr(yt_rsc_0_0_wadr),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_0_i_q_d),
      .radr_d(yt_rsc_0_0_i_radr_d_iff),
      .wadr_d(yt_rsc_0_0_i_wadr_d_iff),
      .we_d(yt_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen yt_rsc_0_1_i
      (
      .clken(yt_rsc_0_1_clken),
      .q(yt_rsc_0_1_q),
      .radr(yt_rsc_0_1_radr),
      .we(yt_rsc_0_1_we),
      .d(yt_rsc_0_1_d),
      .wadr(yt_rsc_0_1_wadr),
      .clken_d(yt_rsc_0_1_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_1_i_q_d),
      .radr_d(yt_rsc_0_1_i_radr_d_iff),
      .wadr_d(yt_rsc_0_1_i_wadr_d_iff),
      .we_d(yt_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen xt_rsc_0_0_i
      (
      .q(xt_rsc_0_0_q),
      .radr(xt_rsc_0_0_radr),
      .we(xt_rsc_0_0_we),
      .d(xt_rsc_0_0_d),
      .wadr(xt_rsc_0_0_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_0_i_q_d),
      .radr_d(yt_rsc_0_0_i_radr_d_iff),
      .wadr_d(yt_rsc_0_0_i_wadr_d_iff),
      .we_d(xt_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen xt_rsc_0_1_i
      (
      .q(xt_rsc_0_1_q),
      .radr(xt_rsc_0_1_radr),
      .we(xt_rsc_0_1_we),
      .d(xt_rsc_0_1_d),
      .wadr(xt_rsc_0_1_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_1_i_q_d),
      .radr_d(yt_rsc_0_1_i_radr_d_iff),
      .wadr_d(yt_rsc_0_1_i_wadr_d_iff),
      .we_d(xt_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen twiddle_rsc_0_0_i
      (
      .q(twiddle_rsc_0_0_q),
      .radr(twiddle_rsc_0_0_radr),
      .q_d(twiddle_rsc_0_0_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen twiddle_rsc_0_1_i
      (
      .q(twiddle_rsc_0_1_q),
      .radr(twiddle_rsc_0_1_radr),
      .q_d(twiddle_rsc_0_1_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_core stockham_DIT_core_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_triosy_0_0_lz(xt_rsc_triosy_0_0_lz),
      .xt_rsc_triosy_0_1_lz(xt_rsc_triosy_0_1_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .g_rsc_triosy_lz(g_rsc_triosy_lz),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_0_i_q_d(yt_rsc_0_0_i_q_d),
      .yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_1_i_clken_d(yt_rsc_0_1_i_clken_d),
      .yt_rsc_0_1_i_q_d(yt_rsc_0_1_i_q_d),
      .yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_0_i_q_d(xt_rsc_0_0_i_q_d),
      .xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_1_i_q_d(xt_rsc_0_1_i_q_d),
      .xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_0_i_q_d(twiddle_rsc_0_0_i_q_d),
      .twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_1_i_q_d(twiddle_rsc_0_1_i_q_d),
      .twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_0_i_d_d_pff(yt_rsc_0_0_i_d_d_iff),
      .yt_rsc_0_0_i_radr_d_pff(yt_rsc_0_0_i_radr_d_iff),
      .yt_rsc_0_0_i_wadr_d_pff(yt_rsc_0_0_i_wadr_d_iff),
      .yt_rsc_0_0_i_we_d_pff(yt_rsc_0_0_i_we_d_iff),
      .yt_rsc_0_1_i_radr_d_pff(yt_rsc_0_1_i_radr_d_iff),
      .yt_rsc_0_1_i_wadr_d_pff(yt_rsc_0_1_i_wadr_d_iff),
      .yt_rsc_0_1_i_we_d_pff(yt_rsc_0_1_i_we_d_iff),
      .xt_rsc_0_0_i_we_d_pff(xt_rsc_0_0_i_we_d_iff),
      .xt_rsc_0_1_i_we_d_pff(xt_rsc_0_1_i_we_d_iff),
      .twiddle_rsc_0_0_i_radr_d_pff(twiddle_rsc_0_0_i_radr_d_iff)
    );
endmodule



