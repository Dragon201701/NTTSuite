-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   yl7897@newnano.poly.edu
--  Generated date: Thu Jul 29 10:45:59 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen;

ARCHITECTURE v2 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    INNER_LOOP_C_73_tr0 : IN STD_LOGIC;
    OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
  );
END stockham_DIT_core_core_fsm;

ARCHITECTURE v2 OF stockham_DIT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  TYPE stockham_DIT_core_core_fsm_1_ST IS (main_C_0, OUTER_LOOP_C_0, INNER_LOOP_C_0,
      INNER_LOOP_C_1, INNER_LOOP_C_2, INNER_LOOP_C_3, INNER_LOOP_C_4, INNER_LOOP_C_5,
      INNER_LOOP_C_6, INNER_LOOP_C_7, INNER_LOOP_C_8, INNER_LOOP_C_9, INNER_LOOP_C_10,
      INNER_LOOP_C_11, INNER_LOOP_C_12, INNER_LOOP_C_13, INNER_LOOP_C_14, INNER_LOOP_C_15,
      INNER_LOOP_C_16, INNER_LOOP_C_17, INNER_LOOP_C_18, INNER_LOOP_C_19, INNER_LOOP_C_20,
      INNER_LOOP_C_21, INNER_LOOP_C_22, INNER_LOOP_C_23, INNER_LOOP_C_24, INNER_LOOP_C_25,
      INNER_LOOP_C_26, INNER_LOOP_C_27, INNER_LOOP_C_28, INNER_LOOP_C_29, INNER_LOOP_C_30,
      INNER_LOOP_C_31, INNER_LOOP_C_32, INNER_LOOP_C_33, INNER_LOOP_C_34, INNER_LOOP_C_35,
      INNER_LOOP_C_36, INNER_LOOP_C_37, INNER_LOOP_C_38, INNER_LOOP_C_39, INNER_LOOP_C_40,
      INNER_LOOP_C_41, INNER_LOOP_C_42, INNER_LOOP_C_43, INNER_LOOP_C_44, INNER_LOOP_C_45,
      INNER_LOOP_C_46, INNER_LOOP_C_47, INNER_LOOP_C_48, INNER_LOOP_C_49, INNER_LOOP_C_50,
      INNER_LOOP_C_51, INNER_LOOP_C_52, INNER_LOOP_C_53, INNER_LOOP_C_54, INNER_LOOP_C_55,
      INNER_LOOP_C_56, INNER_LOOP_C_57, INNER_LOOP_C_58, INNER_LOOP_C_59, INNER_LOOP_C_60,
      INNER_LOOP_C_61, INNER_LOOP_C_62, INNER_LOOP_C_63, INNER_LOOP_C_64, INNER_LOOP_C_65,
      INNER_LOOP_C_66, INNER_LOOP_C_67, INNER_LOOP_C_68, INNER_LOOP_C_69, INNER_LOOP_C_70,
      INNER_LOOP_C_71, INNER_LOOP_C_72, INNER_LOOP_C_73, OUTER_LOOP_C_1, main_C_1);

  SIGNAL state_var : stockham_DIT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : stockham_DIT_core_core_fsm_1_ST;

BEGIN
  stockham_DIT_core_core_fsm_1 : PROCESS (INNER_LOOP_C_73_tr0, OUTER_LOOP_C_1_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN OUTER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000001");
        state_var_NS <= INNER_LOOP_C_0;
      WHEN INNER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000010");
        state_var_NS <= INNER_LOOP_C_1;
      WHEN INNER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000011");
        state_var_NS <= INNER_LOOP_C_2;
      WHEN INNER_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000100");
        state_var_NS <= INNER_LOOP_C_3;
      WHEN INNER_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000101");
        state_var_NS <= INNER_LOOP_C_4;
      WHEN INNER_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000110");
        state_var_NS <= INNER_LOOP_C_5;
      WHEN INNER_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000111");
        state_var_NS <= INNER_LOOP_C_6;
      WHEN INNER_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001000");
        state_var_NS <= INNER_LOOP_C_7;
      WHEN INNER_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001001");
        state_var_NS <= INNER_LOOP_C_8;
      WHEN INNER_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001010");
        state_var_NS <= INNER_LOOP_C_9;
      WHEN INNER_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001011");
        state_var_NS <= INNER_LOOP_C_10;
      WHEN INNER_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001100");
        state_var_NS <= INNER_LOOP_C_11;
      WHEN INNER_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001101");
        state_var_NS <= INNER_LOOP_C_12;
      WHEN INNER_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001110");
        state_var_NS <= INNER_LOOP_C_13;
      WHEN INNER_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001111");
        state_var_NS <= INNER_LOOP_C_14;
      WHEN INNER_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010000");
        state_var_NS <= INNER_LOOP_C_15;
      WHEN INNER_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010001");
        state_var_NS <= INNER_LOOP_C_16;
      WHEN INNER_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010010");
        state_var_NS <= INNER_LOOP_C_17;
      WHEN INNER_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010011");
        state_var_NS <= INNER_LOOP_C_18;
      WHEN INNER_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010100");
        state_var_NS <= INNER_LOOP_C_19;
      WHEN INNER_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010101");
        state_var_NS <= INNER_LOOP_C_20;
      WHEN INNER_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010110");
        state_var_NS <= INNER_LOOP_C_21;
      WHEN INNER_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010111");
        state_var_NS <= INNER_LOOP_C_22;
      WHEN INNER_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011000");
        state_var_NS <= INNER_LOOP_C_23;
      WHEN INNER_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011001");
        state_var_NS <= INNER_LOOP_C_24;
      WHEN INNER_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011010");
        state_var_NS <= INNER_LOOP_C_25;
      WHEN INNER_LOOP_C_25 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011011");
        state_var_NS <= INNER_LOOP_C_26;
      WHEN INNER_LOOP_C_26 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011100");
        state_var_NS <= INNER_LOOP_C_27;
      WHEN INNER_LOOP_C_27 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011101");
        state_var_NS <= INNER_LOOP_C_28;
      WHEN INNER_LOOP_C_28 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011110");
        state_var_NS <= INNER_LOOP_C_29;
      WHEN INNER_LOOP_C_29 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0011111");
        state_var_NS <= INNER_LOOP_C_30;
      WHEN INNER_LOOP_C_30 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100000");
        state_var_NS <= INNER_LOOP_C_31;
      WHEN INNER_LOOP_C_31 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100001");
        state_var_NS <= INNER_LOOP_C_32;
      WHEN INNER_LOOP_C_32 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100010");
        state_var_NS <= INNER_LOOP_C_33;
      WHEN INNER_LOOP_C_33 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100011");
        state_var_NS <= INNER_LOOP_C_34;
      WHEN INNER_LOOP_C_34 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100100");
        state_var_NS <= INNER_LOOP_C_35;
      WHEN INNER_LOOP_C_35 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100101");
        state_var_NS <= INNER_LOOP_C_36;
      WHEN INNER_LOOP_C_36 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100110");
        state_var_NS <= INNER_LOOP_C_37;
      WHEN INNER_LOOP_C_37 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100111");
        state_var_NS <= INNER_LOOP_C_38;
      WHEN INNER_LOOP_C_38 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101000");
        state_var_NS <= INNER_LOOP_C_39;
      WHEN INNER_LOOP_C_39 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101001");
        state_var_NS <= INNER_LOOP_C_40;
      WHEN INNER_LOOP_C_40 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101010");
        state_var_NS <= INNER_LOOP_C_41;
      WHEN INNER_LOOP_C_41 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101011");
        state_var_NS <= INNER_LOOP_C_42;
      WHEN INNER_LOOP_C_42 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101100");
        state_var_NS <= INNER_LOOP_C_43;
      WHEN INNER_LOOP_C_43 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101101");
        state_var_NS <= INNER_LOOP_C_44;
      WHEN INNER_LOOP_C_44 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101110");
        state_var_NS <= INNER_LOOP_C_45;
      WHEN INNER_LOOP_C_45 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0101111");
        state_var_NS <= INNER_LOOP_C_46;
      WHEN INNER_LOOP_C_46 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110000");
        state_var_NS <= INNER_LOOP_C_47;
      WHEN INNER_LOOP_C_47 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110001");
        state_var_NS <= INNER_LOOP_C_48;
      WHEN INNER_LOOP_C_48 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110010");
        state_var_NS <= INNER_LOOP_C_49;
      WHEN INNER_LOOP_C_49 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110011");
        state_var_NS <= INNER_LOOP_C_50;
      WHEN INNER_LOOP_C_50 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110100");
        state_var_NS <= INNER_LOOP_C_51;
      WHEN INNER_LOOP_C_51 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110101");
        state_var_NS <= INNER_LOOP_C_52;
      WHEN INNER_LOOP_C_52 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110110");
        state_var_NS <= INNER_LOOP_C_53;
      WHEN INNER_LOOP_C_53 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0110111");
        state_var_NS <= INNER_LOOP_C_54;
      WHEN INNER_LOOP_C_54 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111000");
        state_var_NS <= INNER_LOOP_C_55;
      WHEN INNER_LOOP_C_55 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111001");
        state_var_NS <= INNER_LOOP_C_56;
      WHEN INNER_LOOP_C_56 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111010");
        state_var_NS <= INNER_LOOP_C_57;
      WHEN INNER_LOOP_C_57 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111011");
        state_var_NS <= INNER_LOOP_C_58;
      WHEN INNER_LOOP_C_58 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111100");
        state_var_NS <= INNER_LOOP_C_59;
      WHEN INNER_LOOP_C_59 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111101");
        state_var_NS <= INNER_LOOP_C_60;
      WHEN INNER_LOOP_C_60 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111110");
        state_var_NS <= INNER_LOOP_C_61;
      WHEN INNER_LOOP_C_61 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0111111");
        state_var_NS <= INNER_LOOP_C_62;
      WHEN INNER_LOOP_C_62 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000000");
        state_var_NS <= INNER_LOOP_C_63;
      WHEN INNER_LOOP_C_63 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000001");
        state_var_NS <= INNER_LOOP_C_64;
      WHEN INNER_LOOP_C_64 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000010");
        state_var_NS <= INNER_LOOP_C_65;
      WHEN INNER_LOOP_C_65 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000011");
        state_var_NS <= INNER_LOOP_C_66;
      WHEN INNER_LOOP_C_66 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000100");
        state_var_NS <= INNER_LOOP_C_67;
      WHEN INNER_LOOP_C_67 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000101");
        state_var_NS <= INNER_LOOP_C_68;
      WHEN INNER_LOOP_C_68 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000110");
        state_var_NS <= INNER_LOOP_C_69;
      WHEN INNER_LOOP_C_69 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000111");
        state_var_NS <= INNER_LOOP_C_70;
      WHEN INNER_LOOP_C_70 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001000");
        state_var_NS <= INNER_LOOP_C_71;
      WHEN INNER_LOOP_C_71 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001001");
        state_var_NS <= INNER_LOOP_C_72;
      WHEN INNER_LOOP_C_72 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001010");
        state_var_NS <= INNER_LOOP_C_73;
      WHEN INNER_LOOP_C_73 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001011");
        IF ( INNER_LOOP_C_73_tr0 = '1' ) THEN
          state_var_NS <= OUTER_LOOP_C_1;
        ELSE
          state_var_NS <= INNER_LOOP_C_0;
        END IF;
      WHEN OUTER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001100");
        IF ( OUTER_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= OUTER_LOOP_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1001101");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000000");
        state_var_NS <= OUTER_LOOP_C_0;
    END CASE;
  END PROCESS stockham_DIT_core_core_fsm_1;

  stockham_DIT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS stockham_DIT_core_core_fsm_1_REG;

END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_wait_dp IS
  PORT(
    yt_rsc_0_0_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_1_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
    ensig_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_0_cgo : IN STD_LOGIC;
    yt_rsc_0_1_cgo : IN STD_LOGIC;
    ensig_cgo : IN STD_LOGIC;
    INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : OUT STD_LOGIC
  );
END stockham_DIT_core_wait_dp;

ARCHITECTURE v2 OF stockham_DIT_core_wait_dp IS
  -- Default Constants

BEGIN
  yt_rsc_0_0_i_clken_d <= yt_rsc_0_0_cgo OR yt_rsc_0_0_cgo_iro;
  yt_rsc_0_1_i_clken_d <= yt_rsc_0_1_cgo OR yt_rsc_0_1_cgo_iro;
  INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en <= ensig_cgo OR ensig_cgo_iro;
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    yt_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    yt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
    yt_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    yt_rsc_0_1_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    yt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
    twiddle_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0)
  );
END stockham_DIT_core;

ARCHITECTURE v2 OF stockham_DIT_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_return_rsc_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : STD_LOGIC;
  SIGNAL INNER_LOOP_1_b_rem_cmp_a : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL xor_dcpl_3 : STD_LOGIC;
  SIGNAL or_tmp : STD_LOGIC;
  SIGNAL or_tmp_1 : STD_LOGIC;
  SIGNAL mux_tmp_7 : STD_LOGIC;
  SIGNAL mux_tmp_8 : STD_LOGIC;
  SIGNAL and_dcpl_7 : STD_LOGIC;
  SIGNAL and_dcpl_9 : STD_LOGIC;
  SIGNAL and_dcpl_10 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_12 : STD_LOGIC;
  SIGNAL and_dcpl_13 : STD_LOGIC;
  SIGNAL and_dcpl_14 : STD_LOGIC;
  SIGNAL and_dcpl_16 : STD_LOGIC;
  SIGNAL and_dcpl_17 : STD_LOGIC;
  SIGNAL or_tmp_9 : STD_LOGIC;
  SIGNAL and_tmp : STD_LOGIC;
  SIGNAL mux_tmp_12 : STD_LOGIC;
  SIGNAL mux_tmp_14 : STD_LOGIC;
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL and_dcpl_19 : STD_LOGIC;
  SIGNAL and_dcpl_21 : STD_LOGIC;
  SIGNAL and_dcpl_24 : STD_LOGIC;
  SIGNAL and_dcpl_25 : STD_LOGIC;
  SIGNAL and_dcpl_26 : STD_LOGIC;
  SIGNAL and_dcpl_27 : STD_LOGIC;
  SIGNAL and_dcpl_28 : STD_LOGIC;
  SIGNAL and_dcpl_30 : STD_LOGIC;
  SIGNAL and_dcpl_32 : STD_LOGIC;
  SIGNAL and_dcpl_33 : STD_LOGIC;
  SIGNAL and_dcpl_34 : STD_LOGIC;
  SIGNAL and_dcpl_36 : STD_LOGIC;
  SIGNAL and_dcpl_38 : STD_LOGIC;
  SIGNAL and_dcpl_40 : STD_LOGIC;
  SIGNAL and_dcpl_41 : STD_LOGIC;
  SIGNAL and_dcpl_43 : STD_LOGIC;
  SIGNAL not_tmp_31 : STD_LOGIC;
  SIGNAL and_dcpl_48 : STD_LOGIC;
  SIGNAL or_tmp_26 : STD_LOGIC;
  SIGNAL mux_tmp_31 : STD_LOGIC;
  SIGNAL or_tmp_29 : STD_LOGIC;
  SIGNAL or_tmp_31 : STD_LOGIC;
  SIGNAL not_tmp_36 : STD_LOGIC;
  SIGNAL mux_tmp_49 : STD_LOGIC;
  SIGNAL and_dcpl_56 : STD_LOGIC;
  SIGNAL and_dcpl_61 : STD_LOGIC;
  SIGNAL and_dcpl_66 : STD_LOGIC;
  SIGNAL nor_tmp_11 : STD_LOGIC;
  SIGNAL not_tmp_42 : STD_LOGIC;
  SIGNAL mux_tmp_54 : STD_LOGIC;
  SIGNAL mux_tmp_56 : STD_LOGIC;
  SIGNAL mux_tmp_57 : STD_LOGIC;
  SIGNAL and_dcpl_74 : STD_LOGIC;
  SIGNAL and_dcpl_80 : STD_LOGIC;
  SIGNAL not_tmp_49 : STD_LOGIC;
  SIGNAL not_tmp_57 : STD_LOGIC;
  SIGNAL mux_tmp_85 : STD_LOGIC;
  SIGNAL or_dcpl_13 : STD_LOGIC;
  SIGNAL or_dcpl_14 : STD_LOGIC;
  SIGNAL or_dcpl_17 : STD_LOGIC;
  SIGNAL and_dcpl_97 : STD_LOGIC;
  SIGNAL y_3_sva : STD_LOGIC;
  SIGNAL y_1_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 : STD_LOGIC_VECTOR
      (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_mul_cse_sva_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL s_9_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_1_q_and_psp_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL s_8_sva : STD_LOGIC;
  SIGNAL s_7_sva : STD_LOGIC;
  SIGNAL s_6_sva : STD_LOGIC;
  SIGNAL s_5_sva : STD_LOGIC;
  SIGNAL s_4_sva : STD_LOGIC;
  SIGNAL s_3_sva : STD_LOGIC;
  SIGNAL s_2_sva : STD_LOGIC;
  SIGNAL s_1_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_1_upper_and_psp_sva_mx0w1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL s_0_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0 : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0 : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL pref_y_idx_pref_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pref_x_idx_pref_1_9_0_1_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL x_1_sva : STD_LOGIC;
  SIGNAL x_3_sva : STD_LOGIC;
  SIGNAL pref_x_idx_pref_1_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_1_m1c : STD_LOGIC;
  SIGNAL reg_INNER_LOOP_upper_acc_ftd_8 : STD_LOGIC;
  SIGNAL reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 : STD_LOGIC;
  SIGNAL OUTER_LOOP_nn_or_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_0_cgo_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_1_cgo_cse : STD_LOGIC;
  SIGNAL reg_xt_rsc_triosy_0_1_obj_ld_cse : STD_LOGIC;
  SIGNAL reg_ensig_cgo_cse : STD_LOGIC;
  SIGNAL reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL and_111_cse : STD_LOGIC;
  SIGNAL INNER_LOOP_a_nor_cse : STD_LOGIC;
  SIGNAL or_58_cse : STD_LOGIC;
  SIGNAL nor_41_cse : STD_LOGIC;
  SIGNAL or_67_cse : STD_LOGIC;
  SIGNAL nor_48_rmff : STD_LOGIC;
  SIGNAL nor_47_rmff : STD_LOGIC;
  SIGNAL mux_70_rmff : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_5_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_2 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_a_acc_psp_2_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_acc_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva : STD_LOGIC_VECTOR
      (8 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_acc_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mux_39_itm : STD_LOGIC;
  SIGNAL and_dcpl_112 : STD_LOGIC;
  SIGNAL and_dcpl_116 : STD_LOGIC;
  SIGNAL and_dcpl_117 : STD_LOGIC;
  SIGNAL and_dcpl_122 : STD_LOGIC;
  SIGNAL and_dcpl_125 : STD_LOGIC;
  SIGNAL z_out : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL and_dcpl_161 : STD_LOGIC;
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL and_dcpl_170 : STD_LOGIC;
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL OUTER_LOOP_nn_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL OUTER_LOOP_m_lshift_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_upper_and_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_m1c : STD_LOGIC;
  SIGNAL INNER_LOOP_1_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_b_nor_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux_1_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL OUTER_LOOP_acc_2_itm : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_2 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_3 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_w_mux_1_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_5_itm_mx0c0 : STD_LOGIC;
  SIGNAL and_87_rgt : STD_LOGIC;
  SIGNAL OUTER_LOOP_nor_itm : STD_LOGIC;
  SIGNAL OUTER_LOOP_m_or_1_itm : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_itm_2_1 : STD_LOGIC;
  SIGNAL and_202_cse : STD_LOGIC;

  SIGNAL s_mux_10_nl : STD_LOGIC;
  SIGNAL and_23_nl : STD_LOGIC;
  SIGNAL mux_26_nl : STD_LOGIC;
  SIGNAL mux_25_nl : STD_LOGIC;
  SIGNAL mux_24_nl : STD_LOGIC;
  SIGNAL and_123_nl : STD_LOGIC;
  SIGNAL mux_22_nl : STD_LOGIC;
  SIGNAL or_15_nl : STD_LOGIC;
  SIGNAL mux_34_nl : STD_LOGIC;
  SIGNAL mux_33_nl : STD_LOGIC;
  SIGNAL mux_32_nl : STD_LOGIC;
  SIGNAL nand_4_nl : STD_LOGIC;
  SIGNAL or_94_nl : STD_LOGIC;
  SIGNAL or_95_nl : STD_LOGIC;
  SIGNAL mux_31_nl : STD_LOGIC;
  SIGNAL nand_5_nl : STD_LOGIC;
  SIGNAL mux_30_nl : STD_LOGIC;
  SIGNAL or_20_nl : STD_LOGIC;
  SIGNAL mux_29_nl : STD_LOGIC;
  SIGNAL mux_28_nl : STD_LOGIC;
  SIGNAL or_19_nl : STD_LOGIC;
  SIGNAL nor_5_nl : STD_LOGIC;
  SIGNAL or_18_nl : STD_LOGIC;
  SIGNAL or_96_nl : STD_LOGIC;
  SIGNAL mux_53_nl : STD_LOGIC;
  SIGNAL mux_52_nl : STD_LOGIC;
  SIGNAL or_43_nl : STD_LOGIC;
  SIGNAL mux_51_nl : STD_LOGIC;
  SIGNAL mux_50_nl : STD_LOGIC;
  SIGNAL mux_49_nl : STD_LOGIC;
  SIGNAL mux_48_nl : STD_LOGIC;
  SIGNAL mux_47_nl : STD_LOGIC;
  SIGNAL or_42_nl : STD_LOGIC;
  SIGNAL mux_46_nl : STD_LOGIC;
  SIGNAL or_41_nl : STD_LOGIC;
  SIGNAL or_39_nl : STD_LOGIC;
  SIGNAL mux_45_nl : STD_LOGIC;
  SIGNAL mux_44_nl : STD_LOGIC;
  SIGNAL mux_43_nl : STD_LOGIC;
  SIGNAL or_37_nl : STD_LOGIC;
  SIGNAL mux_42_nl : STD_LOGIC;
  SIGNAL mux_41_nl : STD_LOGIC;
  SIGNAL nor_7_nl : STD_LOGIC;
  SIGNAL mux_69_nl : STD_LOGIC;
  SIGNAL mux_68_nl : STD_LOGIC;
  SIGNAL mux_67_nl : STD_LOGIC;
  SIGNAL mux_64_nl : STD_LOGIC;
  SIGNAL mux_62_nl : STD_LOGIC;
  SIGNAL and_116_nl : STD_LOGIC;
  SIGNAL mux_60_nl : STD_LOGIC;
  SIGNAL or_52_nl : STD_LOGIC;
  SIGNAL nor_51_nl : STD_LOGIC;
  SIGNAL mux_84_nl : STD_LOGIC;
  SIGNAL mux_83_nl : STD_LOGIC;
  SIGNAL mux_82_nl : STD_LOGIC;
  SIGNAL mux_81_nl : STD_LOGIC;
  SIGNAL mux_80_nl : STD_LOGIC;
  SIGNAL mux_79_nl : STD_LOGIC;
  SIGNAL mux_78_nl : STD_LOGIC;
  SIGNAL mux_76_nl : STD_LOGIC;
  SIGNAL mux_75_nl : STD_LOGIC;
  SIGNAL or_57_nl : STD_LOGIC;
  SIGNAL nor_23_nl : STD_LOGIC;
  SIGNAL mux_18_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_t_mux_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL and_89_nl : STD_LOGIC;
  SIGNAL nor_53_nl : STD_LOGIC;
  SIGNAL mux_91_nl : STD_LOGIC;
  SIGNAL or_90_nl : STD_LOGIC;
  SIGNAL nand_3_nl : STD_LOGIC;
  SIGNAL mux_92_nl : STD_LOGIC;
  SIGNAL or_65_nl : STD_LOGIC;
  SIGNAL mux_97_nl : STD_LOGIC;
  SIGNAL mux_96_nl : STD_LOGIC;
  SIGNAL mux_95_nl : STD_LOGIC;
  SIGNAL mux_98_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_2_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL mux_99_nl : STD_LOGIC;
  SIGNAL mux_100_nl : STD_LOGIC;
  SIGNAL and_95_nl : STD_LOGIC;
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL INNER_LOOP_mux_4_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_a_or_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_2_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_and_2_nl : STD_LOGIC;
  SIGNAL mux_106_nl : STD_LOGIC;
  SIGNAL or_88_nl : STD_LOGIC;
  SIGNAL mux_105_nl : STD_LOGIC;
  SIGNAL nor_21_nl : STD_LOGIC;
  SIGNAL mux_104_nl : STD_LOGIC;
  SIGNAL nand_2_nl : STD_LOGIC;
  SIGNAL mux_103_nl : STD_LOGIC;
  SIGNAL or_86_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_1_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_b_and_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_2_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_3_nl : STD_LOGIC;
  SIGNAL and_124_nl : STD_LOGIC;
  SIGNAL nor_nl : STD_LOGIC;
  SIGNAL mux_35_nl : STD_LOGIC;
  SIGNAL nor_33_nl : STD_LOGIC;
  SIGNAL nor_34_nl : STD_LOGIC;
  SIGNAL nor_35_nl : STD_LOGIC;
  SIGNAL mux_38_nl : STD_LOGIC;
  SIGNAL or_31_nl : STD_LOGIC;
  SIGNAL or_30_nl : STD_LOGIC;
  SIGNAL mux_37_nl : STD_LOGIC;
  SIGNAL or_29_nl : STD_LOGIC;
  SIGNAL or_35_nl : STD_LOGIC;
  SIGNAL or_34_nl : STD_LOGIC;
  SIGNAL nor_28_nl : STD_LOGIC;
  SIGNAL mux_55_nl : STD_LOGIC;
  SIGNAL nor_29_nl : STD_LOGIC;
  SIGNAL mux_54_nl : STD_LOGIC;
  SIGNAL nor_30_nl : STD_LOGIC;
  SIGNAL nor_31_nl : STD_LOGIC;
  SIGNAL mux_57_nl : STD_LOGIC;
  SIGNAL nor_27_nl : STD_LOGIC;
  SIGNAL and_118_nl : STD_LOGIC;
  SIGNAL and_119_nl : STD_LOGIC;
  SIGNAL mux_107_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL and_36_nl : STD_LOGIC;
  SIGNAL and_53_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_5_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_6_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_7_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_8_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_9_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux1h_3_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL OUTER_LOOP_or_3_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_or_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_mux_4_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_nor_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_6_nl : STD_LOGIC;
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT modulo_dev
    PORT (
      base_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      m_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      return_rsc_z : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      ccs_ccore_start_rsc_dat : IN STD_LOGIC;
      ccs_ccore_clk : IN STD_LOGIC;
      ccs_ccore_srst : IN STD_LOGIC;
      ccs_ccore_en : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1 : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat : STD_LOGIC;

  SIGNAL INNER_LOOP_1_b_rem_cmp_a_1 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_b : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL INNER_LOOP_1_w_rshift_rg_a : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_z : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL INNER_LOOP_1_w_lshift_rg_a : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT stockham_DIT_core_wait_dp
    PORT(
      yt_rsc_0_0_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_1_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
      ensig_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_0_cgo : IN STD_LOGIC;
      yt_rsc_0_1_cgo : IN STD_LOGIC;
      ensig_cgo : IN STD_LOGIC;
      INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : OUT STD_LOGIC
    );
  END COMPONENT;
  COMPONENT stockham_DIT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      INNER_LOOP_C_73_tr0 : IN STD_LOGIC;
      OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0 : STD_LOGIC;
  SIGNAL stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_v_4_3_2(input_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_3_2(input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_5_2(input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_3_2(input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_4_2(input_3 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_128_2_2(input_0 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(127 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 5,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  xt_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => xt_rsc_triosy_0_1_lz
    );
  xt_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => xt_rsc_triosy_0_0_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  g_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => g_rsc_triosy_lz
    );
  twiddle_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_1_lz
    );
  twiddle_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_1_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_0_lz
    );
  INNER_LOOP_1_modulo_dev_cmp : modulo_dev
    PORT MAP(
      base_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat,
      m_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat,
      return_rsc_z => INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1,
      ccs_ccore_start_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat,
      ccs_ccore_clk => clk,
      ccs_ccore_srst => rst,
      ccs_ccore_en => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
    );
  INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat <= MUX_v_64_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_acc_5_itm)
      + UNSIGNED(MUX_v_64_2_2(drf_y_smx_lpi_2, INNER_LOOP_b_sva, and_202_cse)), 64)),
      INNER_LOOP_1_acc_5_itm, (MUX_s_1_2_2(and_dcpl_14, and_dcpl_25, fsm_output(0)))
      AND (fsm_output(4)) AND (fsm_output(3)) AND (NOT (fsm_output(1))) AND (NOT
      (fsm_output(6))));
  INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat <= p_sva;
  INNER_LOOP_1_modulo_dev_cmp_return_rsc_z <= INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1;
  INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat <= (MUX_s_1_2_2((MUX_s_1_2_2((MUX_s_1_2_2((NOT((fsm_output(5))
      OR (NOT (fsm_output(3))))), ((fsm_output(5)) AND (fsm_output(3))), fsm_output(2))),
      ((fsm_output(2)) AND (fsm_output(5)) AND (fsm_output(3))), fsm_output(0))),
      (NOT((NOT (fsm_output(0))) OR (NOT (fsm_output(2))) OR (fsm_output(5)) OR (fsm_output(3)))),
      fsm_output(1))) AND (fsm_output(4)) AND (NOT (fsm_output(6)));

  INNER_LOOP_1_b_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 128,
      width_b => 64,
      signd => 0
      )
    PORT MAP(
      a => INNER_LOOP_1_b_rem_cmp_a_1,
      b => INNER_LOOP_1_b_rem_cmp_b,
      z => INNER_LOOP_1_b_rem_cmp_z_1
    );
  INNER_LOOP_1_b_rem_cmp_a_1 <= INNER_LOOP_1_b_rem_cmp_a;
  INNER_LOOP_1_b_rem_cmp_b <= reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  INNER_LOOP_1_b_rem_cmp_z <= INNER_LOOP_1_b_rem_cmp_z_1;

  INNER_LOOP_1_w_rshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_r_v5
    GENERIC MAP(
      width_a => 9,
      signd_a => 0,
      width_s => 4,
      width_z => 8
      )
    PORT MAP(
      a => INNER_LOOP_1_w_rshift_rg_a,
      s => INNER_LOOP_1_w_rshift_rg_s,
      z => INNER_LOOP_1_w_rshift_rg_z
    );
  INNER_LOOP_1_w_rshift_rg_a <= (MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1,
      INNER_LOOP_1_upper_and_psp_sva, and_dcpl_170)) & ((NOT reg_INNER_LOOP_upper_acc_ftd_8)
      AND and_dcpl_170);
  INNER_LOOP_1_w_rshift_rg_s <= OUTER_LOOP_acc_2_itm;
  z_out_4 <= INNER_LOOP_1_w_rshift_rg_z;

  INNER_LOOP_1_w_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 8,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => INNER_LOOP_1_w_lshift_rg_a,
      s => INNER_LOOP_1_w_lshift_rg_s,
      z => INNER_LOOP_1_w_lshift_rg_z
    );
  INNER_LOOP_1_w_lshift_rg_a <= MUX_v_8_2_2(STD_LOGIC_VECTOR'( "00000001"), z_out_4,
      OUTER_LOOP_m_or_1_itm);
  INNER_LOOP_1_w_lshift_rg_s <= MUX_v_4_2_2((z_out(3 DOWNTO 0)), OUTER_LOOP_acc_2_itm,
      OUTER_LOOP_m_or_1_itm);
  z_out_5 <= INNER_LOOP_1_w_lshift_rg_z;

  stockham_DIT_core_wait_dp_inst : stockham_DIT_core_wait_dp
    PORT MAP(
      yt_rsc_0_0_cgo_iro => nor_48_rmff,
      yt_rsc_0_0_i_clken_d => yt_rsc_0_0_i_clken_d,
      yt_rsc_0_1_cgo_iro => nor_47_rmff,
      yt_rsc_0_1_i_clken_d => yt_rsc_0_1_i_clken_d,
      ensig_cgo_iro => mux_70_rmff,
      yt_rsc_0_0_cgo => reg_yt_rsc_0_0_cgo_cse,
      yt_rsc_0_1_cgo => reg_yt_rsc_0_1_cgo_cse,
      ensig_cgo => reg_ensig_cgo_cse,
      INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
    );
  stockham_DIT_core_core_fsm_inst : stockham_DIT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => stockham_DIT_core_core_fsm_inst_fsm_output,
      INNER_LOOP_C_73_tr0 => stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0,
      OUTER_LOOP_C_1_tr0 => stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0
    );
  fsm_output <= stockham_DIT_core_core_fsm_inst_fsm_output;
  stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_73_tr0 <= INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(8);
  stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 <= NOT OUTER_LOOP_acc_itm_2_1;

  nor_41_cse <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  OUTER_LOOP_nn_or_cse <= and_dcpl_17 OR and_dcpl_12;
  nand_4_nl <= NOT((fsm_output(1)) AND (NOT((NOT((fsm_output(0)) OR (NOT s_0_sva)))
      OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6)))));
  or_94_nl <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR y_1_sva
      OR (NOT y_3_sva) OR (fsm_output(6));
  mux_32_nl <= MUX_s_1_2_2(nand_4_nl, or_94_nl, fsm_output(2));
  or_95_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("01")) OR x_1_sva
      OR (NOT x_3_sva) OR (pref_x_idx_pref_1_9_0_sva(0)) OR (NOT (fsm_output(6)));
  mux_33_nl <= MUX_s_1_2_2(mux_32_nl, or_95_nl, fsm_output(3));
  or_20_nl <= x_1_sva OR (NOT x_3_sva) OR (fsm_output(6));
  or_19_nl <= (pref_y_idx_pref_9_0_sva(0)) OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  nor_5_nl <= NOT((pref_x_idx_pref_1_9_0_1_sva(0)) OR x_1_sva OR (NOT x_3_sva));
  mux_28_nl <= MUX_s_1_2_2(or_19_nl, (fsm_output(6)), nor_5_nl);
  or_18_nl <= (reg_INNER_LOOP_upper_acc_ftd_8 AND (pref_y_idx_pref_9_0_sva(0))) OR
      y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  mux_29_nl <= MUX_s_1_2_2(mux_28_nl, or_18_nl, fsm_output(0));
  mux_30_nl <= MUX_s_1_2_2(or_20_nl, mux_29_nl, fsm_output(1));
  nand_5_nl <= NOT((fsm_output(2)) AND (NOT mux_30_nl));
  or_96_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR reg_INNER_LOOP_upper_acc_ftd_8
      OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  mux_31_nl <= MUX_s_1_2_2(nand_5_nl, or_96_nl, fsm_output(3));
  mux_34_nl <= MUX_s_1_2_2(mux_33_nl, mux_31_nl, fsm_output(5));
  nor_48_rmff <= NOT(mux_34_nl OR (fsm_output(4)));
  or_43_nl <= (fsm_output(0)) OR (fsm_output(2)) OR (NOT (pref_y_idx_pref_9_0_sva(0)))
      OR (NOT (fsm_output(3))) OR (NOT (fsm_output(5))) OR y_1_sva OR (NOT y_3_sva)
      OR (fsm_output(6));
  mux_50_nl <= MUX_s_1_2_2(or_tmp_29, or_tmp_31, fsm_output(2));
  mux_49_nl <= MUX_s_1_2_2(or_tmp_29, or_tmp_26, fsm_output(2));
  mux_51_nl <= MUX_s_1_2_2(mux_50_nl, mux_49_nl, fsm_output(0));
  mux_52_nl <= MUX_s_1_2_2(or_43_nl, mux_51_nl, fsm_output(1));
  or_42_nl <= (fsm_output(2)) OR (NOT (pref_y_idx_pref_9_0_sva(0))) OR (NOT (fsm_output(3)))
      OR (NOT (fsm_output(5))) OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  or_41_nl <= (NOT (fsm_output(3))) OR (fsm_output(5)) OR (NOT (fsm_output(6)));
  or_39_nl <= (NOT (pref_x_idx_pref_1_9_0_1_sva(0))) OR (fsm_output(3)) OR (NOT (fsm_output(5)))
      OR (fsm_output(6));
  mux_46_nl <= MUX_s_1_2_2(or_41_nl, or_39_nl, fsm_output(2));
  mux_47_nl <= MUX_s_1_2_2(or_42_nl, mux_46_nl, fsm_output(0));
  or_37_nl <= (fsm_output(3)) OR (NOT (fsm_output(5))) OR (fsm_output(6));
  mux_43_nl <= MUX_s_1_2_2(or_tmp_31, or_37_nl, pref_x_idx_pref_1_9_0_1_sva(0));
  mux_44_nl <= MUX_s_1_2_2(mux_tmp_31, mux_43_nl, fsm_output(2));
  mux_41_nl <= MUX_s_1_2_2(or_tmp_29, mux_tmp_31, pref_x_idx_pref_1_9_0_sva(0));
  mux_42_nl <= MUX_s_1_2_2(mux_41_nl, or_tmp_26, fsm_output(2));
  mux_45_nl <= MUX_s_1_2_2(mux_44_nl, mux_42_nl, fsm_output(0));
  mux_48_nl <= MUX_s_1_2_2(mux_47_nl, mux_45_nl, fsm_output(1));
  nor_7_nl <= NOT(x_1_sva OR (NOT x_3_sva));
  mux_53_nl <= MUX_s_1_2_2(mux_52_nl, mux_48_nl, nor_7_nl);
  nor_47_rmff <= NOT(mux_53_nl OR (fsm_output(4)));
  mux_67_nl <= MUX_s_1_2_2(not_tmp_42, mux_tmp_57, fsm_output(2));
  mux_68_nl <= MUX_s_1_2_2(mux_67_nl, mux_tmp_54, fsm_output(0));
  and_116_nl <= or_58_cse AND (fsm_output(4));
  mux_62_nl <= MUX_s_1_2_2(not_tmp_42, and_116_nl, fsm_output(2));
  mux_64_nl <= MUX_s_1_2_2(mux_tmp_54, mux_62_nl, fsm_output(0));
  mux_69_nl <= MUX_s_1_2_2(mux_68_nl, mux_64_nl, fsm_output(1));
  or_52_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"));
  mux_60_nl <= MUX_s_1_2_2(or_tmp_1, or_tmp, or_52_nl);
  mux_70_rmff <= MUX_s_1_2_2(mux_69_nl, (NOT mux_60_nl), fsm_output(6));
  or_58_cse <= (NOT (fsm_output(5))) OR (fsm_output(3));
  and_87_rgt <= and_dcpl_40 AND and_111_cse AND (fsm_output(6)) AND (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(8));
  and_111_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  or_67_cse <= and_111_cse OR (fsm_output(2));
  INNER_LOOP_a_nor_cse <= NOT(INNER_LOOP_b_INNER_LOOP_b_and_1_m1c OR reg_INNER_LOOP_upper_acc_ftd_8);
  drf_y_smx_lpi_3_dfm_2 <= MUX1HOT_v_64_3_2(xt_rsc_0_1_i_q_d, yt_rsc_0_1_i_q_d, INNER_LOOP_b_sva,
      STD_LOGIC_VECTOR'( INNER_LOOP_b_INNER_LOOP_b_and_m1c & INNER_LOOP_b_INNER_LOOP_b_and_1_m1c
      & INNER_LOOP_b_nor_itm));
  INNER_LOOP_b_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1
      & '0') + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      8), 9), 9));
  INNER_LOOP_b_acc_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(INNER_LOOP_b_acc_1_nl),
      9) + UNSIGNED'( s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva &
      s_3_sva & s_2_sva & s_1_sva), 9));
  INNER_LOOP_1_upper_and_psp_sva_mx0w1 <= (NOT (z_out(8 DOWNTO 1))) AND INNER_LOOP_1_upper_and_psp_sva;
  INNER_LOOP_1_q_and_psp_sva_1 <= (z_out(8 DOWNTO 1)) AND INNER_LOOP_1_upper_and_psp_sva;
  INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      8), 9) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1),
      8), 9), 9));
  INNER_LOOP_1_mul_cse_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED'(
      s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva & s_3_sva & s_2_sva
      & s_1_sva & s_0_sva) * UNSIGNED(OUTER_LOOP_m_lshift_psp_sva)), 10));
  INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0 <= y_1_sva AND (NOT y_3_sva);
  INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0 <= y_3_sva AND (NOT y_1_sva);
  INNER_LOOP_b_and_nl <= (NOT s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
  INNER_LOOP_b_and_1_nl <= s_0_sva AND INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
  INNER_LOOP_b_and_2_nl <= (NOT s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
  INNER_LOOP_b_and_3_nl <= s_0_sva AND INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
  drf_y_smx_lpi_3_dfm_3 <= MUX1HOT_v_64_5_2(xt_rsc_0_0_i_q_d, xt_rsc_0_1_i_q_d, yt_rsc_0_0_i_q_d,
      yt_rsc_0_1_i_q_d, drf_y_smx_lpi_2, STD_LOGIC_VECTOR'( INNER_LOOP_b_and_nl &
      INNER_LOOP_b_and_1_nl & INNER_LOOP_b_and_2_nl & INNER_LOOP_b_and_3_nl & INNER_LOOP_b_nor_itm));
  xor_dcpl_3 <= y_3_sva XOR y_1_sva;
  or_tmp <= CONV_SL_1_1(fsm_output(5 DOWNTO 3)/=STD_LOGIC_VECTOR'("000"));
  or_tmp_1 <= CONV_SL_1_1(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("00"));
  and_124_nl <= (CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))) AND
      (fsm_output(2));
  mux_tmp_7 <= MUX_s_1_2_2(or_tmp_1, or_tmp, and_124_nl);
  nor_nl <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 0)/=STD_LOGIC_VECTOR'("000000")));
  mux_tmp_8 <= MUX_s_1_2_2(nor_nl, mux_tmp_7, fsm_output(6));
  and_dcpl_7 <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_9 <= (NOT (fsm_output(5))) AND (fsm_output(2));
  and_dcpl_10 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_11 <= and_dcpl_10 AND and_dcpl_9;
  and_dcpl_12 <= and_dcpl_11 AND and_dcpl_7 AND (fsm_output(6));
  and_dcpl_13 <= and_dcpl_7 AND (NOT (fsm_output(6)));
  and_dcpl_14 <= NOT((fsm_output(5)) OR (fsm_output(2)));
  and_dcpl_16 <= nor_41_cse AND and_dcpl_14;
  and_dcpl_17 <= and_dcpl_16 AND and_dcpl_13;
  or_tmp_9 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00"));
  and_tmp <= (fsm_output(5)) AND or_tmp_9;
  mux_tmp_12 <= MUX_s_1_2_2(nor_41_cse, or_tmp_9, fsm_output(5));
  mux_tmp_14 <= MUX_s_1_2_2(mux_tmp_12, and_tmp, fsm_output(2));
  and_dcpl_18 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_19 <= and_dcpl_18 AND (NOT (fsm_output(6)));
  and_dcpl_21 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("10")) AND
      and_dcpl_9;
  and_dcpl_24 <= and_111_cse AND (NOT (fsm_output(6)));
  and_dcpl_25 <= (fsm_output(5)) AND (fsm_output(2));
  and_dcpl_26 <= nor_41_cse AND and_dcpl_25;
  and_dcpl_27 <= and_dcpl_26 AND and_dcpl_24;
  and_dcpl_28 <= (fsm_output(5)) AND (NOT (fsm_output(2)));
  and_dcpl_30 <= and_dcpl_10 AND and_dcpl_28 AND and_dcpl_13;
  and_dcpl_32 <= and_dcpl_16 AND and_dcpl_19;
  and_dcpl_33 <= and_dcpl_16 AND and_dcpl_24;
  and_dcpl_34 <= and_dcpl_26 AND and_dcpl_19;
  and_dcpl_36 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_38 <= and_dcpl_26 AND and_dcpl_36 AND (NOT (fsm_output(6)));
  and_dcpl_40 <= and_dcpl_10 AND and_dcpl_14;
  and_dcpl_41 <= and_dcpl_40 AND and_dcpl_18 AND (fsm_output(6));
  and_dcpl_43 <= (NOT (fsm_output(4))) AND x_3_sva AND (NOT x_1_sva);
  nor_33_nl <= NOT((fsm_output(1)) OR (NOT (fsm_output(2))) OR (NOT (fsm_output(5)))
      OR (fsm_output(3)));
  nor_34_nl <= NOT((fsm_output(1)) OR (fsm_output(0)) OR (NOT (fsm_output(2))) OR
      (NOT (fsm_output(5))) OR (fsm_output(3)));
  mux_35_nl <= MUX_s_1_2_2(nor_33_nl, nor_34_nl, pref_x_idx_pref_1_9_0_1_sva(0));
  nor_35_nl <= NOT((pref_x_idx_pref_1_9_0_sva(0)) OR (NOT (fsm_output(1))) OR (fsm_output(0))
      OR (fsm_output(2)) OR (fsm_output(5)) OR (NOT (fsm_output(3))));
  not_tmp_31 <= MUX_s_1_2_2(mux_35_nl, nor_35_nl, fsm_output(6));
  and_dcpl_48 <= nor_41_cse AND y_3_sva AND (NOT y_1_sva) AND (fsm_output(1)) AND
      (NOT (fsm_output(6)));
  or_31_nl <= s_0_sva OR (fsm_output(5));
  or_30_nl <= (pref_y_idx_pref_9_0_sva(0)) OR (NOT (fsm_output(5)));
  mux_38_nl <= MUX_s_1_2_2(or_31_nl, or_30_nl, fsm_output(2));
  or_29_nl <= reg_INNER_LOOP_upper_acc_ftd_8 OR (NOT (fsm_output(5)));
  mux_37_nl <= MUX_s_1_2_2((fsm_output(5)), or_29_nl, fsm_output(2));
  mux_39_itm <= MUX_s_1_2_2(mux_38_nl, mux_37_nl, fsm_output(0));
  or_tmp_26 <= (NOT((pref_y_idx_pref_9_0_sva(0)) OR reg_INNER_LOOP_upper_acc_ftd_8))
      OR (fsm_output(3)) OR (NOT (fsm_output(5))) OR y_1_sva OR (NOT y_3_sva) OR
      (fsm_output(6));
  or_35_nl <= (fsm_output(5)) OR (NOT s_0_sva) OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  or_34_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10"));
  mux_tmp_31 <= MUX_s_1_2_2(or_35_nl, or_34_nl, fsm_output(3));
  or_tmp_29 <= (fsm_output(3)) OR (fsm_output(5)) OR (NOT s_0_sva) OR y_1_sva OR
      (NOT y_3_sva) OR (fsm_output(6));
  or_tmp_31 <= (NOT reg_INNER_LOOP_upper_acc_ftd_8) OR (fsm_output(3)) OR (NOT (fsm_output(5)))
      OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(6));
  nor_28_nl <= NOT((NOT (pref_x_idx_pref_1_9_0_1_sva(0))) OR (fsm_output(1)) OR (NOT
      (fsm_output(0))) OR (NOT (fsm_output(2))) OR (NOT (fsm_output(5))) OR (fsm_output(3)));
  nor_29_nl <= NOT((fsm_output(1)) OR (NOT (fsm_output(0))) OR (fsm_output(2)) OR
      (fsm_output(5)) OR (NOT (fsm_output(3))));
  nor_30_nl <= NOT((NOT (fsm_output(0))) OR (fsm_output(2)) OR (fsm_output(5)) OR
      (NOT (fsm_output(3))));
  nor_31_nl <= NOT((fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(5)) OR (NOT
      (fsm_output(3))));
  mux_54_nl <= MUX_s_1_2_2(nor_30_nl, nor_31_nl, fsm_output(1));
  mux_55_nl <= MUX_s_1_2_2(nor_29_nl, mux_54_nl, pref_x_idx_pref_1_9_0_sva(0));
  not_tmp_36 <= MUX_s_1_2_2(nor_28_nl, mux_55_nl, fsm_output(6));
  nor_27_nl <= NOT((NOT s_0_sva) OR (fsm_output(5)));
  and_118_nl <= reg_INNER_LOOP_upper_acc_ftd_8 AND (fsm_output(5));
  mux_57_nl <= MUX_s_1_2_2(nor_27_nl, and_118_nl, fsm_output(2));
  and_119_nl <= (fsm_output(2)) AND (pref_y_idx_pref_9_0_sva(0)) AND (fsm_output(5));
  mux_tmp_49 <= MUX_s_1_2_2(mux_57_nl, and_119_nl, fsm_output(0));
  and_dcpl_56 <= (NOT (fsm_output(4))) AND (NOT x_3_sva) AND x_1_sva;
  and_dcpl_61 <= nor_41_cse AND (NOT y_3_sva) AND y_1_sva AND (fsm_output(1)) AND
      (NOT (fsm_output(6)));
  and_dcpl_66 <= and_dcpl_14 AND (fsm_output(1)) AND (NOT (fsm_output(6)));
  nor_tmp_11 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("11"));
  not_tmp_42 <= MUX_s_1_2_2(nor_tmp_11, (NOT or_tmp_9), fsm_output(5));
  mux_107_nl <= MUX_s_1_2_2(nor_tmp_11, (NOT or_tmp_9), fsm_output(5));
  mux_tmp_54 <= MUX_s_1_2_2(mux_107_nl, nor_tmp_11, fsm_output(2));
  mux_tmp_56 <= MUX_s_1_2_2((NOT (fsm_output(4))), (fsm_output(4)), fsm_output(3));
  mux_tmp_57 <= MUX_s_1_2_2(nor_tmp_11, mux_tmp_56, fsm_output(5));
  and_dcpl_74 <= and_dcpl_21 AND and_dcpl_24;
  and_dcpl_80 <= nor_tmp_11 AND and_dcpl_25 AND and_dcpl_13;
  not_tmp_49 <= MUX_s_1_2_2(mux_tmp_56, (NOT or_tmp_9), fsm_output(5));
  not_tmp_57 <= NOT(and_111_cse OR CONV_SL_1_1(fsm_output(5 DOWNTO 2)/=STD_LOGIC_VECTOR'("0000")));
  mux_tmp_85 <= MUX_s_1_2_2(and_tmp, (fsm_output(5)), fsm_output(2));
  or_dcpl_13 <= or_tmp_9 OR (fsm_output(5)) OR (fsm_output(2));
  or_dcpl_14 <= or_dcpl_13 OR (fsm_output(0)) OR (NOT (fsm_output(1))) OR (fsm_output(6));
  or_dcpl_17 <= or_dcpl_13 OR (NOT (fsm_output(0))) OR (NOT (fsm_output(1))) OR (fsm_output(6));
  and_dcpl_97 <= nor_41_cse AND and_dcpl_9;
  INNER_LOOP_w_mux_1_itm_mx0c1 <= and_dcpl_97 AND and_dcpl_7 AND (NOT (fsm_output(6)))
      AND reg_INNER_LOOP_1_w_lshift_idiv_ftd_9;
  INNER_LOOP_1_acc_5_itm_mx0c0 <= and_dcpl_97 AND and_dcpl_7 AND (NOT (fsm_output(6)))
      AND INNER_LOOP_b_INNER_LOOP_b_and_1_m1c;
  OUTER_LOOP_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out(3 DOWNTO 1)) + SIGNED'(
      "011"), 3));
  OUTER_LOOP_acc_itm_2_1 <= OUTER_LOOP_acc_nl(2);
  yt_rsc_0_0_i_d_d_pff <= INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  yt_rsc_0_0_i_radr_d_pff <= MUX1HOT_v_9_4_2(INNER_LOOP_b_acc_itm, (INNER_LOOP_a_acc_psp_2_sva
      & INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm), (pref_y_idx_pref_9_0_sva(9
      DOWNTO 1)), INNER_LOOP_a_acc_psp_sva, STD_LOGIC_VECTOR'( and_dcpl_32 & and_dcpl_33
      & and_dcpl_34 & and_dcpl_27));
  and_36_nl <= and_dcpl_26 AND and_dcpl_13;
  yt_rsc_0_0_i_wadr_d_pff <= MUX1HOT_v_9_3_2(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9 DOWNTO
      1)), STD_LOGIC_VECTOR'( and_36_nl & and_dcpl_38 & and_dcpl_41));
  yt_rsc_0_0_i_we_d_pff <= not_tmp_31 AND and_dcpl_43;
  yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= (NOT mux_39_itm) AND and_dcpl_48;
  yt_rsc_0_1_i_radr_d_pff <= MUX1HOT_v_9_3_2(INNER_LOOP_b_acc_itm, INNER_LOOP_a_acc_psp_sva,
      (pref_y_idx_pref_9_0_sva(9 DOWNTO 1)), STD_LOGIC_VECTOR'( and_dcpl_32 & and_dcpl_34
      & and_dcpl_27));
  and_53_nl <= and_dcpl_40 AND and_dcpl_36 AND (fsm_output(6));
  yt_rsc_0_1_i_wadr_d_pff <= MUX1HOT_v_9_3_2((pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO
      1)), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva, (pref_x_idx_pref_1_9_0_sva(9
      DOWNTO 1)), STD_LOGIC_VECTOR'( and_dcpl_38 & and_53_nl & and_dcpl_41));
  yt_rsc_0_1_i_we_d_pff <= not_tmp_36 AND and_dcpl_43;
  yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_tmp_49 AND and_dcpl_48;
  xt_rsc_0_0_i_we_d_pff <= not_tmp_31 AND and_dcpl_56;
  xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= (NOT mux_39_itm) AND and_dcpl_61;
  xt_rsc_0_1_i_we_d_pff <= not_tmp_36 AND and_dcpl_56;
  xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_tmp_49 AND and_dcpl_61;
  twiddle_rsc_0_0_i_radr_d_pff <= z_out_5(9 DOWNTO 1);
  twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= (NOT (z_out_5(0))) AND nor_41_cse
      AND and_dcpl_66;
  twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= (z_out_5(0)) AND nor_41_cse
      AND and_dcpl_66;
  and_dcpl_112 <= and_dcpl_10 AND and_dcpl_14 AND (fsm_output(0)) AND (fsm_output(1))
      AND (fsm_output(6));
  and_dcpl_116 <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)=STD_LOGIC_VECTOR'("00")) AND
      and_dcpl_14;
  and_dcpl_117 <= and_dcpl_116 AND (fsm_output(0)) AND (NOT (fsm_output(1))) AND
      (NOT (fsm_output(6)));
  and_dcpl_122 <= and_dcpl_10 AND (NOT (fsm_output(5))) AND (fsm_output(2)) AND (NOT
      (fsm_output(0))) AND (NOT (fsm_output(1))) AND (fsm_output(6));
  and_dcpl_125 <= and_dcpl_116 AND (NOT (fsm_output(0))) AND (fsm_output(1)) AND
      (NOT (fsm_output(6)));
  and_dcpl_161 <= CONV_SL_1_1(fsm_output(5 DOWNTO 2)=STD_LOGIC_VECTOR'("1010")) AND
      and_dcpl_7 AND (NOT (fsm_output(6)));
  and_dcpl_170 <= nor_41_cse AND and_dcpl_14 AND (fsm_output(0)) AND (fsm_output(1))
      AND (NOT (fsm_output(6)));
  OUTER_LOOP_nor_itm <= NOT(and_dcpl_112 OR and_dcpl_117 OR and_dcpl_122);
  OUTER_LOOP_m_or_1_itm <= (and_dcpl_16 AND (NOT (fsm_output(0))) AND (fsm_output(1))
      AND (NOT (fsm_output(6)))) OR (and_dcpl_16 AND (fsm_output(0)) AND (fsm_output(1))
      AND (NOT (fsm_output(6))));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        s_0_sva <= '0';
        reg_yt_rsc_0_0_cgo_cse <= '0';
        reg_yt_rsc_0_1_cgo_cse <= '0';
        reg_xt_rsc_triosy_0_1_obj_ld_cse <= '0';
        reg_ensig_cgo_cse <= '0';
        reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 <= '0';
      ELSE
        s_0_sva <= s_mux_10_nl AND (NOT mux_tmp_8);
        reg_yt_rsc_0_0_cgo_cse <= nor_48_rmff;
        reg_yt_rsc_0_1_cgo_cse <= nor_47_rmff;
        reg_xt_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_11 AND and_dcpl_7 AND (fsm_output(6))
            AND (NOT OUTER_LOOP_acc_itm_2_1);
        reg_ensig_cgo_cse <= mux_70_rmff;
        reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 <= z_out_5(0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
      INNER_LOOP_1_b_rem_cmp_a <= MUX_v_128_2_2(z_out_3, INNER_LOOP_1_b_mul_mut,
          nor_51_nl);
      INNER_LOOP_1_upper_and_psp_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"),
          INNER_LOOP_t_mux_nl, nor_53_nl);
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( OUTER_LOOP_nn_or_cse = '1' ) THEN
        OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "0001"), (z_out(3
            DOWNTO 0)), and_dcpl_12);
        s_9_sva <= and_dcpl_17;
        s_8_sva <= s_9_sva AND (NOT and_dcpl_17);
        s_7_sva <= s_8_sva AND (NOT and_dcpl_17);
        s_6_sva <= s_7_sva AND (NOT and_dcpl_17);
        s_5_sva <= s_6_sva AND (NOT and_dcpl_17);
        s_4_sva <= s_5_sva AND (NOT and_dcpl_17);
        s_3_sva <= s_4_sva AND (NOT and_dcpl_17);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        x_3_sva <= '0';
        x_1_sva <= '0';
        y_3_sva <= '0';
        y_1_sva <= '0';
        s_2_sva <= '0';
        s_1_sva <= '0';
      ELSIF ( OUTER_LOOP_nn_or_cse = '1' ) THEN
        x_3_sva <= y_3_sva OR and_dcpl_17;
        x_1_sva <= y_1_sva AND (NOT and_dcpl_17);
        y_3_sva <= x_3_sva AND (NOT and_dcpl_17);
        y_1_sva <= x_1_sva OR and_dcpl_17;
        s_2_sva <= s_3_sva AND (NOT and_dcpl_17);
        s_1_sva <= s_2_sva AND (NOT and_dcpl_17);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( mux_tmp_8 = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2((NOT mux_26_nl), mux_tmp_7, fsm_output(6))) = '1' ) THEN
        drf_y_smx_lpi_2 <= MUX1HOT_v_64_3_2(INNER_LOOP_1_b_rem_cmp_z, xt_rsc_0_1_i_q_d,
            drf_y_smx_lpi_3_dfm_2, STD_LOGIC_VECTOR'( and_23_nl & and_dcpl_27 & and_dcpl_30));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_tmp_8 OR and_87_rgt) = '1' ) THEN
        OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "1001"), (z_out(3
            DOWNTO 0)), and_87_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(nor_23_nl, mux_18_nl, fsm_output(6))) = '1' ) THEN
        OUTER_LOOP_m_lshift_psp_sva <= z_out_5(8 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( xor_dcpl_3 = '1' ) THEN
        INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_1_itm <= INNER_LOOP_1_q_and_psp_sva_1(0);
        INNER_LOOP_a_acc_psp_2_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1(7
            DOWNTO 1)), 7), 8) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1),
            8));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(not_tmp_57, mux_92_nl, fsm_output(6))) = '1' ) THEN
        INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva <= INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_x_idx_pref_1_9_0_1_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (mux_97_nl OR (fsm_output(6))) = '1' ) THEN
        pref_x_idx_pref_1_9_0_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
            & '0') + UNSIGNED(INNER_LOOP_1_mul_cse_sva_1), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_98_nl OR (fsm_output(6))) = '1' ) THEN
        INNER_LOOP_a_acc_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
            8), 9) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1 & (NOT (z_out(0)))),
            9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_y_idx_pref_9_0_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (mux_99_nl OR (fsm_output(6))) = '1' ) THEN
        pref_y_idx_pref_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_2_nl),
            10) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w1 & '0' & s_0_sva),
            10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_x_idx_pref_1_9_0_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(not_tmp_57, mux_100_nl, fsm_output(6))) = '1' ) THEN
        pref_x_idx_pref_1_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_1_psp_sva_1
            & '1') + UNSIGNED(INNER_LOOP_1_mul_cse_sva_1), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( or_dcpl_14 = '0' ) THEN
        INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva),
            8), 9) + SIGNED'( "000000001"), 9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_nor_itm <= '0';
      ELSIF ( or_dcpl_14 = '0' ) THEN
        INNER_LOOP_b_nor_itm <= NOT(INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0 OR INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_INNER_LOOP_b_and_m1c <= '0';
      ELSIF ( or_dcpl_17 = '0' ) THEN
        INNER_LOOP_b_INNER_LOOP_b_and_m1c <= INNER_LOOP_b_INNER_LOOP_b_and_m1c_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_INNER_LOOP_b_and_1_m1c <= '0';
      ELSIF ( or_dcpl_17 = '0' ) THEN
        INNER_LOOP_b_INNER_LOOP_b_and_1_m1c <= INNER_LOOP_b_INNER_LOOP_b_and_1_m1c_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (and_dcpl_33 OR and_dcpl_30) = '1' ) THEN
        INNER_LOOP_1_b_mul_mut <= z_out_3;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_tmp_14 OR (fsm_output(6))) = '1' ) THEN
        INNER_LOOP_b_sva <= MUX_v_64_2_2(drf_y_smx_lpi_3_dfm_3, INNER_LOOP_1_b_rem_cmp_z,
            and_95_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((and_dcpl_97 AND and_dcpl_7 AND (NOT (fsm_output(6))) AND (NOT reg_INNER_LOOP_1_w_lshift_idiv_ftd_9))
          OR INNER_LOOP_w_mux_1_itm_mx0c1) = '1' ) THEN
        INNER_LOOP_w_mux_1_itm <= MUX_v_64_2_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
            INNER_LOOP_w_mux_1_itm_mx0c1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (((INNER_LOOP_a_nor_cse OR (reg_INNER_LOOP_upper_acc_ftd_8 AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_1_m1c))
          OR (INNER_LOOP_b_INNER_LOOP_b_and_1_m1c AND (NOT reg_INNER_LOOP_upper_acc_ftd_8)))
          AND (NOT(mux_106_nl OR (fsm_output(6))))) OR INNER_LOOP_1_acc_5_itm_mx0c0
          OR and_dcpl_74 OR and_dcpl_27 OR and_dcpl_80) = '1' ) THEN
        INNER_LOOP_1_acc_5_itm <= MUX1HOT_v_64_5_2(yt_rsc_0_0_i_q_d, xt_rsc_0_0_i_q_d,
            (acc_1_nl(64 DOWNTO 1)), yt_rsc_0_1_i_q_d, drf_y_smx_lpi_2, STD_LOGIC_VECTOR'(
            INNER_LOOP_a_or_nl & INNER_LOOP_a_or_1_nl & INNER_LOOP_a_or_2_nl & and_dcpl_27
            & INNER_LOOP_a_and_2_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_INNER_LOOP_upper_acc_ftd_8 <= '0';
      ELSIF ( or_dcpl_14 = '0' ) THEN
        reg_INNER_LOOP_upper_acc_ftd_8 <= z_out(0);
      END IF;
    END IF;
  END PROCESS;
  s_mux_10_nl <= MUX_s_1_2_2(s_0_sva, s_1_sva, and_dcpl_12);
  mux_81_nl <= MUX_s_1_2_2(mux_tmp_56, (NOT (fsm_output(4))), fsm_output(5));
  mux_82_nl <= MUX_s_1_2_2(mux_81_nl, mux_tmp_57, fsm_output(2));
  mux_80_nl <= MUX_s_1_2_2(not_tmp_49, mux_tmp_57, fsm_output(2));
  mux_83_nl <= MUX_s_1_2_2(mux_82_nl, mux_80_nl, fsm_output(0));
  mux_76_nl <= MUX_s_1_2_2((NOT (fsm_output(4))), (fsm_output(4)), or_58_cse);
  mux_78_nl <= MUX_s_1_2_2(not_tmp_49, mux_76_nl, fsm_output(2));
  or_57_nl <= (NOT((NOT (fsm_output(2))) OR (fsm_output(5)))) OR (fsm_output(3));
  mux_75_nl <= MUX_s_1_2_2((NOT (fsm_output(4))), (fsm_output(4)), or_57_nl);
  mux_79_nl <= MUX_s_1_2_2(mux_78_nl, mux_75_nl, fsm_output(0));
  mux_84_nl <= MUX_s_1_2_2(mux_83_nl, mux_79_nl, fsm_output(1));
  nor_51_nl <= NOT(mux_84_nl OR (fsm_output(6)));
  and_89_nl <= and_dcpl_40 AND and_111_cse AND (fsm_output(6));
  INNER_LOOP_t_mux_nl <= MUX_v_8_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w1, (INNER_LOOP_slc_INNER_LOOP_2_acc_6_9_1_psp_sva(7
      DOWNTO 0)), and_89_nl);
  or_90_nl <= (fsm_output(0)) OR (fsm_output(3));
  nand_3_nl <= NOT((fsm_output(0)) AND (fsm_output(3)));
  mux_91_nl <= MUX_s_1_2_2(or_90_nl, nand_3_nl, fsm_output(6));
  nor_53_nl <= NOT(or_tmp_1 OR CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("01"))
      OR mux_91_nl);
  and_23_nl <= and_dcpl_21 AND and_dcpl_19;
  and_123_nl <= CONV_SL_1_1(fsm_output(5 DOWNTO 4)=STD_LOGIC_VECTOR'("11"));
  mux_24_nl <= MUX_s_1_2_2(and_123_nl, and_tmp, fsm_output(2));
  mux_25_nl <= MUX_s_1_2_2(mux_24_nl, mux_tmp_14, fsm_output(0));
  or_15_nl <= (fsm_output(0)) OR (fsm_output(2));
  mux_22_nl <= MUX_s_1_2_2(mux_tmp_12, and_tmp, or_15_nl);
  mux_26_nl <= MUX_s_1_2_2(mux_25_nl, mux_22_nl, fsm_output(1));
  nor_23_nl <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 1)/=STD_LOGIC_VECTOR'("00000")));
  mux_18_nl <= MUX_s_1_2_2(or_tmp_1, or_tmp, fsm_output(2));
  or_65_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"));
  mux_92_nl <= MUX_s_1_2_2(or_tmp_1, or_tmp, or_65_nl);
  mux_95_nl <= MUX_s_1_2_2(mux_tmp_12, (fsm_output(5)), fsm_output(2));
  mux_96_nl <= MUX_s_1_2_2(mux_95_nl, mux_tmp_85, fsm_output(0));
  mux_97_nl <= MUX_s_1_2_2(mux_tmp_14, mux_96_nl, fsm_output(1));
  mux_98_nl <= MUX_s_1_2_2(mux_tmp_14, mux_tmp_85, and_111_cse);
  INNER_LOOP_b_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(s_9_sva & INNER_LOOP_1_q_and_psp_sva_1
      & '0') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( s_8_sva & s_7_sva & s_6_sva
      & s_5_sva & s_4_sva & s_3_sva & s_2_sva & s_1_sva & '1'), 9), 10) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT
      (z_out(0)), 1), 1), 10), 10));
  mux_99_nl <= MUX_s_1_2_2(mux_tmp_12, and_tmp, or_67_cse);
  mux_100_nl <= MUX_s_1_2_2(or_tmp_1, or_tmp, or_67_cse);
  and_95_nl <= nor_tmp_11 AND and_dcpl_28 AND and_dcpl_24;
  INNER_LOOP_mux_4_nl <= MUX_v_64_2_2((NOT drf_y_smx_lpi_2), (NOT INNER_LOOP_b_sva),
      and_202_cse);
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_acc_5_itm & '1')
      + UNSIGNED(INNER_LOOP_mux_4_nl & '1'), 65));
  INNER_LOOP_a_or_nl <= INNER_LOOP_1_acc_5_itm_mx0c0 OR (INNER_LOOP_b_INNER_LOOP_b_and_1_m1c
      AND (NOT reg_INNER_LOOP_upper_acc_ftd_8) AND and_dcpl_30);
  INNER_LOOP_a_or_1_nl <= (and_dcpl_97 AND and_dcpl_7 AND (NOT (fsm_output(6))) AND
      (NOT INNER_LOOP_b_INNER_LOOP_b_and_1_m1c)) OR (INNER_LOOP_a_nor_cse AND and_dcpl_30);
  INNER_LOOP_a_or_2_nl <= and_dcpl_74 OR and_dcpl_80;
  INNER_LOOP_a_and_2_nl <= reg_INNER_LOOP_upper_acc_ftd_8 AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_1_m1c)
      AND and_dcpl_30;
  nor_21_nl <= NOT(CONV_SL_1_1(fsm_output(5 DOWNTO 3)/=STD_LOGIC_VECTOR'("101")));
  mux_104_nl <= MUX_s_1_2_2(nor_41_cse, nor_tmp_11, fsm_output(5));
  mux_105_nl <= MUX_s_1_2_2(nor_21_nl, mux_104_nl, fsm_output(2));
  or_88_nl <= (fsm_output(0)) OR (NOT mux_105_nl);
  or_86_nl <= CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("10"));
  mux_103_nl <= MUX_s_1_2_2(or_86_nl, or_tmp_9, fsm_output(5));
  nand_2_nl <= NOT((fsm_output(0)) AND (fsm_output(2)) AND (NOT mux_103_nl));
  mux_106_nl <= MUX_s_1_2_2(or_88_nl, nand_2_nl, fsm_output(1));
  OUTER_LOOP_OUTER_LOOP_and_5_nl <= s_8_sva AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_OUTER_LOOP_and_6_nl <= s_7_sva AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_OUTER_LOOP_and_7_nl <= s_6_sva AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_OUTER_LOOP_and_8_nl <= s_5_sva AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_OUTER_LOOP_and_9_nl <= s_4_sva AND OUTER_LOOP_nor_itm;
  OUTER_LOOP_or_3_nl <= and_dcpl_117 OR and_dcpl_122;
  OUTER_LOOP_mux1h_3_nl <= MUX1HOT_v_4_3_2(OUTER_LOOP_acc_2_itm, OUTER_LOOP_nn_3_0_sva,
      STD_LOGIC_VECTOR'( s_3_sva & s_2_sva & s_1_sva & s_0_sva), STD_LOGIC_VECTOR'(
      and_dcpl_112 & OUTER_LOOP_or_3_nl & and_dcpl_125));
  OUTER_LOOP_OUTER_LOOP_or_1_nl <= and_dcpl_112 OR and_dcpl_117 OR and_dcpl_125;
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(OUTER_LOOP_OUTER_LOOP_and_5_nl
      & OUTER_LOOP_OUTER_LOOP_and_6_nl & OUTER_LOOP_OUTER_LOOP_and_7_nl & OUTER_LOOP_OUTER_LOOP_and_8_nl
      & OUTER_LOOP_OUTER_LOOP_and_9_nl & OUTER_LOOP_mux1h_3_nl) + CONV_UNSIGNED(CONV_SIGNED(SIGNED'(
      OUTER_LOOP_OUTER_LOOP_or_1_nl & '1'), 2), 9), 9));
  and_202_cse <= CONV_SL_1_1(fsm_output=STD_LOGIC_VECTOR'("0111100"));
  INNER_LOOP_b_mux_4_nl <= MUX_v_64_2_2(drf_y_smx_lpi_3_dfm_3, drf_y_smx_lpi_3_dfm_2,
      and_dcpl_161);
  INNER_LOOP_b_INNER_LOOP_b_nor_1_nl <= NOT(reg_INNER_LOOP_1_w_lshift_idiv_ftd_9
      OR and_dcpl_161);
  INNER_LOOP_b_and_6_nl <= reg_INNER_LOOP_1_w_lshift_idiv_ftd_9 AND (NOT and_dcpl_161);
  INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl <= MUX1HOT_v_64_3_2(twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_1_i_q_d, INNER_LOOP_w_mux_1_itm, STD_LOGIC_VECTOR'( INNER_LOOP_b_INNER_LOOP_b_nor_1_nl
      & INNER_LOOP_b_and_6_nl & and_dcpl_161));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(INNER_LOOP_b_mux_4_nl)
      * UNSIGNED(INNER_LOOP_b_INNER_LOOP_b_mux1h_1_nl)), 128));
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_0_0_wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    xt_rsc_0_0_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_0_we : OUT STD_LOGIC;
    xt_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    xt_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    xt_rsc_0_1_wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    xt_rsc_0_1_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_1_we : OUT STD_LOGIC;
    xt_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    xt_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    twiddle_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    twiddle_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC
  );
END stockham_DIT;

ARCHITECTURE v2 OF stockham_DIT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL yt_rsc_0_0_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_0_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_0_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_we : STD_LOGIC;
  SIGNAL yt_rsc_0_0_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_1_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_we : STD_LOGIC;
  SIGNAL yt_rsc_0_1_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d_d_iff : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr_d_iff : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr_d_iff : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_we_d_iff : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_radr_d_iff : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr_d_iff : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_0_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_1_i_we_d_iff : STD_LOGIC;
  SIGNAL twiddle_rsc_0_0_i_radr_d_iff : STD_LOGIC_VECTOR (8 DOWNTO 0);

  SIGNAL yt_rsc_0_0_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);

  SIGNAL yt_rsc_0_1_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_wadr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_wadr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_wadr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);

  COMPONENT stockham_DIT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      g_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      yt_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      yt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
      yt_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      yt_rsc_0_1_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      yt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
      twiddle_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (8 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff : STD_LOGIC_VECTOR (8
      DOWNTO 0);

BEGIN
  yt_rsc_0_0_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 9,
      data_width => 64,
      depth => 512,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_0_clken,
      d => yt_rsc_0_0_comp_d,
      q => yt_rsc_0_0_comp_q,
      radr => yt_rsc_0_0_comp_radr,
      wadr => yt_rsc_0_0_comp_wadr,
      we => yt_rsc_0_0_we
    );
  yt_rsc_0_0_comp_d <= yt_rsc_0_0_d;
  yt_rsc_0_0_q <= yt_rsc_0_0_comp_q;
  yt_rsc_0_0_comp_radr <= yt_rsc_0_0_radr;
  yt_rsc_0_0_comp_wadr <= yt_rsc_0_0_wadr;

  yt_rsc_0_1_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 9,
      data_width => 64,
      depth => 512,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_1_clken,
      d => yt_rsc_0_1_comp_d,
      q => yt_rsc_0_1_comp_q,
      radr => yt_rsc_0_1_comp_radr,
      wadr => yt_rsc_0_1_comp_wadr,
      we => yt_rsc_0_1_we
    );
  yt_rsc_0_1_comp_d <= yt_rsc_0_1_d;
  yt_rsc_0_1_q <= yt_rsc_0_1_comp_q;
  yt_rsc_0_1_comp_radr <= yt_rsc_0_1_radr;
  yt_rsc_0_1_comp_wadr <= yt_rsc_0_1_wadr;

  yt_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_64_512_512_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_0_clken,
      q => yt_rsc_0_0_i_q,
      radr => yt_rsc_0_0_i_radr,
      we => yt_rsc_0_0_we,
      d => yt_rsc_0_0_i_d,
      wadr => yt_rsc_0_0_i_wadr,
      clken_d => yt_rsc_0_0_i_clken_d,
      d_d => yt_rsc_0_0_i_d_d,
      q_d => yt_rsc_0_0_i_q_d_1,
      radr_d => yt_rsc_0_0_i_radr_d,
      wadr_d => yt_rsc_0_0_i_wadr_d,
      we_d => yt_rsc_0_0_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_0_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_0_i_q <= yt_rsc_0_0_q;
  yt_rsc_0_0_radr <= yt_rsc_0_0_i_radr;
  yt_rsc_0_0_d <= yt_rsc_0_0_i_d;
  yt_rsc_0_0_wadr <= yt_rsc_0_0_i_wadr;
  yt_rsc_0_0_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_0_i_q_d <= yt_rsc_0_0_i_q_d_1;
  yt_rsc_0_0_i_radr_d <= yt_rsc_0_0_i_radr_d_iff;
  yt_rsc_0_0_i_wadr_d <= yt_rsc_0_0_i_wadr_d_iff;

  yt_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_64_512_512_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_1_clken,
      q => yt_rsc_0_1_i_q,
      radr => yt_rsc_0_1_i_radr,
      we => yt_rsc_0_1_we,
      d => yt_rsc_0_1_i_d,
      wadr => yt_rsc_0_1_i_wadr,
      clken_d => yt_rsc_0_1_i_clken_d,
      d_d => yt_rsc_0_1_i_d_d,
      q_d => yt_rsc_0_1_i_q_d_1,
      radr_d => yt_rsc_0_1_i_radr_d,
      wadr_d => yt_rsc_0_1_i_wadr_d,
      we_d => yt_rsc_0_1_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_1_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_1_i_q <= yt_rsc_0_1_q;
  yt_rsc_0_1_radr <= yt_rsc_0_1_i_radr;
  yt_rsc_0_1_d <= yt_rsc_0_1_i_d;
  yt_rsc_0_1_wadr <= yt_rsc_0_1_i_wadr;
  yt_rsc_0_1_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_1_i_q_d <= yt_rsc_0_1_i_q_d_1;
  yt_rsc_0_1_i_radr_d <= yt_rsc_0_1_i_radr_d_iff;
  yt_rsc_0_1_i_wadr_d <= yt_rsc_0_1_i_wadr_d_iff;

  xt_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_12_9_64_512_512_64_1_gen
    PORT MAP(
      q => xt_rsc_0_0_i_q,
      radr => xt_rsc_0_0_i_radr,
      we => xt_rsc_0_0_we,
      d => xt_rsc_0_0_i_d,
      wadr => xt_rsc_0_0_i_wadr,
      d_d => xt_rsc_0_0_i_d_d,
      q_d => xt_rsc_0_0_i_q_d_1,
      radr_d => xt_rsc_0_0_i_radr_d,
      wadr_d => xt_rsc_0_0_i_wadr_d,
      we_d => xt_rsc_0_0_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_0_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_0_i_q <= xt_rsc_0_0_q;
  xt_rsc_0_0_radr <= xt_rsc_0_0_i_radr;
  xt_rsc_0_0_d <= xt_rsc_0_0_i_d;
  xt_rsc_0_0_wadr <= xt_rsc_0_0_i_wadr;
  xt_rsc_0_0_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_0_i_q_d <= xt_rsc_0_0_i_q_d_1;
  xt_rsc_0_0_i_radr_d <= yt_rsc_0_0_i_radr_d_iff;
  xt_rsc_0_0_i_wadr_d <= yt_rsc_0_0_i_wadr_d_iff;

  xt_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_13_9_64_512_512_64_1_gen
    PORT MAP(
      q => xt_rsc_0_1_i_q,
      radr => xt_rsc_0_1_i_radr,
      we => xt_rsc_0_1_we,
      d => xt_rsc_0_1_i_d,
      wadr => xt_rsc_0_1_i_wadr,
      d_d => xt_rsc_0_1_i_d_d,
      q_d => xt_rsc_0_1_i_q_d_1,
      radr_d => xt_rsc_0_1_i_radr_d,
      wadr_d => xt_rsc_0_1_i_wadr_d,
      we_d => xt_rsc_0_1_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_1_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_1_i_q <= xt_rsc_0_1_q;
  xt_rsc_0_1_radr <= xt_rsc_0_1_i_radr;
  xt_rsc_0_1_d <= xt_rsc_0_1_i_d;
  xt_rsc_0_1_wadr <= xt_rsc_0_1_i_wadr;
  xt_rsc_0_1_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_1_i_q_d <= xt_rsc_0_1_i_q_d_1;
  xt_rsc_0_1_i_radr_d <= yt_rsc_0_1_i_radr_d_iff;
  xt_rsc_0_1_i_wadr_d <= yt_rsc_0_1_i_wadr_d_iff;

  twiddle_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_14_9_64_512_512_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_0_i_q,
      radr => twiddle_rsc_0_0_i_radr,
      q_d => twiddle_rsc_0_0_i_q_d_1,
      radr_d => twiddle_rsc_0_0_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_0_i_q <= twiddle_rsc_0_0_q;
  twiddle_rsc_0_0_radr <= twiddle_rsc_0_0_i_radr;
  twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d_1;
  twiddle_rsc_0_0_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  twiddle_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_15_9_64_512_512_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_1_i_q,
      radr => twiddle_rsc_0_1_i_radr,
      q_d => twiddle_rsc_0_1_i_q_d_1,
      radr_d => twiddle_rsc_0_1_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_1_i_q <= twiddle_rsc_0_1_q;
  twiddle_rsc_0_1_radr <= twiddle_rsc_0_1_i_radr;
  twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d_1;
  twiddle_rsc_0_1_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  stockham_DIT_core_inst : stockham_DIT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsc_triosy_0_0_lz => xt_rsc_triosy_0_0_lz,
      xt_rsc_triosy_0_1_lz => xt_rsc_triosy_0_1_lz,
      p_rsc_dat => stockham_DIT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      g_rsc_triosy_lz => g_rsc_triosy_lz,
      twiddle_rsc_triosy_0_0_lz => twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_triosy_0_1_lz => twiddle_rsc_triosy_0_1_lz,
      yt_rsc_0_0_i_clken_d => yt_rsc_0_0_i_clken_d,
      yt_rsc_0_0_i_q_d => stockham_DIT_core_inst_yt_rsc_0_0_i_q_d,
      yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_1_i_clken_d => yt_rsc_0_1_i_clken_d,
      yt_rsc_0_1_i_q_d => stockham_DIT_core_inst_yt_rsc_0_1_i_q_d,
      yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_0_i_q_d => stockham_DIT_core_inst_xt_rsc_0_0_i_q_d,
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_1_i_q_d => stockham_DIT_core_inst_xt_rsc_0_1_i_q_d,
      xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_0_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_0_i_d_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff,
      yt_rsc_0_0_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff,
      yt_rsc_0_0_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff,
      yt_rsc_0_0_i_we_d_pff => yt_rsc_0_0_i_we_d_iff,
      yt_rsc_0_1_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff,
      yt_rsc_0_1_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff,
      yt_rsc_0_1_i_we_d_pff => yt_rsc_0_1_i_we_d_iff,
      xt_rsc_0_0_i_we_d_pff => xt_rsc_0_0_i_we_d_iff,
      xt_rsc_0_1_i_we_d_pff => xt_rsc_0_1_i_we_d_iff,
      twiddle_rsc_0_0_i_radr_d_pff => stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff
    );
  stockham_DIT_core_inst_p_rsc_dat <= p_rsc_dat;
  stockham_DIT_core_inst_yt_rsc_0_0_i_q_d <= yt_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_yt_rsc_0_1_i_q_d <= yt_rsc_0_1_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_0_i_q_d <= xt_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_1_i_q_d <= xt_rsc_0_1_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d;
  yt_rsc_0_0_i_d_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff;
  yt_rsc_0_0_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff;
  yt_rsc_0_0_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff;
  yt_rsc_0_1_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff;
  yt_rsc_0_1_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff;
  twiddle_rsc_0_0_i_radr_d_iff <= stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff;

END v2;



