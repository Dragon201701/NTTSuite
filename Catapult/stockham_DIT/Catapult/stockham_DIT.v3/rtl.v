// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Thu Jul 29 10:48:30 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output [63:0] q_d;
  input [7:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module stockham_DIT_core_core_fsm (
  clk, rst, fsm_output, INNER_LOOP_C_147_tr0, OUTER_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input INNER_LOOP_C_147_tr0;
  input OUTER_LOOP_C_1_tr0;


  // FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    OUTER_LOOP_C_0 = 8'd1,
    INNER_LOOP_C_0 = 8'd2,
    INNER_LOOP_C_1 = 8'd3,
    INNER_LOOP_C_2 = 8'd4,
    INNER_LOOP_C_3 = 8'd5,
    INNER_LOOP_C_4 = 8'd6,
    INNER_LOOP_C_5 = 8'd7,
    INNER_LOOP_C_6 = 8'd8,
    INNER_LOOP_C_7 = 8'd9,
    INNER_LOOP_C_8 = 8'd10,
    INNER_LOOP_C_9 = 8'd11,
    INNER_LOOP_C_10 = 8'd12,
    INNER_LOOP_C_11 = 8'd13,
    INNER_LOOP_C_12 = 8'd14,
    INNER_LOOP_C_13 = 8'd15,
    INNER_LOOP_C_14 = 8'd16,
    INNER_LOOP_C_15 = 8'd17,
    INNER_LOOP_C_16 = 8'd18,
    INNER_LOOP_C_17 = 8'd19,
    INNER_LOOP_C_18 = 8'd20,
    INNER_LOOP_C_19 = 8'd21,
    INNER_LOOP_C_20 = 8'd22,
    INNER_LOOP_C_21 = 8'd23,
    INNER_LOOP_C_22 = 8'd24,
    INNER_LOOP_C_23 = 8'd25,
    INNER_LOOP_C_24 = 8'd26,
    INNER_LOOP_C_25 = 8'd27,
    INNER_LOOP_C_26 = 8'd28,
    INNER_LOOP_C_27 = 8'd29,
    INNER_LOOP_C_28 = 8'd30,
    INNER_LOOP_C_29 = 8'd31,
    INNER_LOOP_C_30 = 8'd32,
    INNER_LOOP_C_31 = 8'd33,
    INNER_LOOP_C_32 = 8'd34,
    INNER_LOOP_C_33 = 8'd35,
    INNER_LOOP_C_34 = 8'd36,
    INNER_LOOP_C_35 = 8'd37,
    INNER_LOOP_C_36 = 8'd38,
    INNER_LOOP_C_37 = 8'd39,
    INNER_LOOP_C_38 = 8'd40,
    INNER_LOOP_C_39 = 8'd41,
    INNER_LOOP_C_40 = 8'd42,
    INNER_LOOP_C_41 = 8'd43,
    INNER_LOOP_C_42 = 8'd44,
    INNER_LOOP_C_43 = 8'd45,
    INNER_LOOP_C_44 = 8'd46,
    INNER_LOOP_C_45 = 8'd47,
    INNER_LOOP_C_46 = 8'd48,
    INNER_LOOP_C_47 = 8'd49,
    INNER_LOOP_C_48 = 8'd50,
    INNER_LOOP_C_49 = 8'd51,
    INNER_LOOP_C_50 = 8'd52,
    INNER_LOOP_C_51 = 8'd53,
    INNER_LOOP_C_52 = 8'd54,
    INNER_LOOP_C_53 = 8'd55,
    INNER_LOOP_C_54 = 8'd56,
    INNER_LOOP_C_55 = 8'd57,
    INNER_LOOP_C_56 = 8'd58,
    INNER_LOOP_C_57 = 8'd59,
    INNER_LOOP_C_58 = 8'd60,
    INNER_LOOP_C_59 = 8'd61,
    INNER_LOOP_C_60 = 8'd62,
    INNER_LOOP_C_61 = 8'd63,
    INNER_LOOP_C_62 = 8'd64,
    INNER_LOOP_C_63 = 8'd65,
    INNER_LOOP_C_64 = 8'd66,
    INNER_LOOP_C_65 = 8'd67,
    INNER_LOOP_C_66 = 8'd68,
    INNER_LOOP_C_67 = 8'd69,
    INNER_LOOP_C_68 = 8'd70,
    INNER_LOOP_C_69 = 8'd71,
    INNER_LOOP_C_70 = 8'd72,
    INNER_LOOP_C_71 = 8'd73,
    INNER_LOOP_C_72 = 8'd74,
    INNER_LOOP_C_73 = 8'd75,
    INNER_LOOP_C_74 = 8'd76,
    INNER_LOOP_C_75 = 8'd77,
    INNER_LOOP_C_76 = 8'd78,
    INNER_LOOP_C_77 = 8'd79,
    INNER_LOOP_C_78 = 8'd80,
    INNER_LOOP_C_79 = 8'd81,
    INNER_LOOP_C_80 = 8'd82,
    INNER_LOOP_C_81 = 8'd83,
    INNER_LOOP_C_82 = 8'd84,
    INNER_LOOP_C_83 = 8'd85,
    INNER_LOOP_C_84 = 8'd86,
    INNER_LOOP_C_85 = 8'd87,
    INNER_LOOP_C_86 = 8'd88,
    INNER_LOOP_C_87 = 8'd89,
    INNER_LOOP_C_88 = 8'd90,
    INNER_LOOP_C_89 = 8'd91,
    INNER_LOOP_C_90 = 8'd92,
    INNER_LOOP_C_91 = 8'd93,
    INNER_LOOP_C_92 = 8'd94,
    INNER_LOOP_C_93 = 8'd95,
    INNER_LOOP_C_94 = 8'd96,
    INNER_LOOP_C_95 = 8'd97,
    INNER_LOOP_C_96 = 8'd98,
    INNER_LOOP_C_97 = 8'd99,
    INNER_LOOP_C_98 = 8'd100,
    INNER_LOOP_C_99 = 8'd101,
    INNER_LOOP_C_100 = 8'd102,
    INNER_LOOP_C_101 = 8'd103,
    INNER_LOOP_C_102 = 8'd104,
    INNER_LOOP_C_103 = 8'd105,
    INNER_LOOP_C_104 = 8'd106,
    INNER_LOOP_C_105 = 8'd107,
    INNER_LOOP_C_106 = 8'd108,
    INNER_LOOP_C_107 = 8'd109,
    INNER_LOOP_C_108 = 8'd110,
    INNER_LOOP_C_109 = 8'd111,
    INNER_LOOP_C_110 = 8'd112,
    INNER_LOOP_C_111 = 8'd113,
    INNER_LOOP_C_112 = 8'd114,
    INNER_LOOP_C_113 = 8'd115,
    INNER_LOOP_C_114 = 8'd116,
    INNER_LOOP_C_115 = 8'd117,
    INNER_LOOP_C_116 = 8'd118,
    INNER_LOOP_C_117 = 8'd119,
    INNER_LOOP_C_118 = 8'd120,
    INNER_LOOP_C_119 = 8'd121,
    INNER_LOOP_C_120 = 8'd122,
    INNER_LOOP_C_121 = 8'd123,
    INNER_LOOP_C_122 = 8'd124,
    INNER_LOOP_C_123 = 8'd125,
    INNER_LOOP_C_124 = 8'd126,
    INNER_LOOP_C_125 = 8'd127,
    INNER_LOOP_C_126 = 8'd128,
    INNER_LOOP_C_127 = 8'd129,
    INNER_LOOP_C_128 = 8'd130,
    INNER_LOOP_C_129 = 8'd131,
    INNER_LOOP_C_130 = 8'd132,
    INNER_LOOP_C_131 = 8'd133,
    INNER_LOOP_C_132 = 8'd134,
    INNER_LOOP_C_133 = 8'd135,
    INNER_LOOP_C_134 = 8'd136,
    INNER_LOOP_C_135 = 8'd137,
    INNER_LOOP_C_136 = 8'd138,
    INNER_LOOP_C_137 = 8'd139,
    INNER_LOOP_C_138 = 8'd140,
    INNER_LOOP_C_139 = 8'd141,
    INNER_LOOP_C_140 = 8'd142,
    INNER_LOOP_C_141 = 8'd143,
    INNER_LOOP_C_142 = 8'd144,
    INNER_LOOP_C_143 = 8'd145,
    INNER_LOOP_C_144 = 8'd146,
    INNER_LOOP_C_145 = 8'd147,
    INNER_LOOP_C_146 = 8'd148,
    INNER_LOOP_C_147 = 8'd149,
    OUTER_LOOP_C_1 = 8'd150,
    main_C_1 = 8'd151;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : stockham_DIT_core_core_fsm_1
    case (state_var)
      OUTER_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = INNER_LOOP_C_0;
      end
      INNER_LOOP_C_0 : begin
        fsm_output = 8'b00000010;
        state_var_NS = INNER_LOOP_C_1;
      end
      INNER_LOOP_C_1 : begin
        fsm_output = 8'b00000011;
        state_var_NS = INNER_LOOP_C_2;
      end
      INNER_LOOP_C_2 : begin
        fsm_output = 8'b00000100;
        state_var_NS = INNER_LOOP_C_3;
      end
      INNER_LOOP_C_3 : begin
        fsm_output = 8'b00000101;
        state_var_NS = INNER_LOOP_C_4;
      end
      INNER_LOOP_C_4 : begin
        fsm_output = 8'b00000110;
        state_var_NS = INNER_LOOP_C_5;
      end
      INNER_LOOP_C_5 : begin
        fsm_output = 8'b00000111;
        state_var_NS = INNER_LOOP_C_6;
      end
      INNER_LOOP_C_6 : begin
        fsm_output = 8'b00001000;
        state_var_NS = INNER_LOOP_C_7;
      end
      INNER_LOOP_C_7 : begin
        fsm_output = 8'b00001001;
        state_var_NS = INNER_LOOP_C_8;
      end
      INNER_LOOP_C_8 : begin
        fsm_output = 8'b00001010;
        state_var_NS = INNER_LOOP_C_9;
      end
      INNER_LOOP_C_9 : begin
        fsm_output = 8'b00001011;
        state_var_NS = INNER_LOOP_C_10;
      end
      INNER_LOOP_C_10 : begin
        fsm_output = 8'b00001100;
        state_var_NS = INNER_LOOP_C_11;
      end
      INNER_LOOP_C_11 : begin
        fsm_output = 8'b00001101;
        state_var_NS = INNER_LOOP_C_12;
      end
      INNER_LOOP_C_12 : begin
        fsm_output = 8'b00001110;
        state_var_NS = INNER_LOOP_C_13;
      end
      INNER_LOOP_C_13 : begin
        fsm_output = 8'b00001111;
        state_var_NS = INNER_LOOP_C_14;
      end
      INNER_LOOP_C_14 : begin
        fsm_output = 8'b00010000;
        state_var_NS = INNER_LOOP_C_15;
      end
      INNER_LOOP_C_15 : begin
        fsm_output = 8'b00010001;
        state_var_NS = INNER_LOOP_C_16;
      end
      INNER_LOOP_C_16 : begin
        fsm_output = 8'b00010010;
        state_var_NS = INNER_LOOP_C_17;
      end
      INNER_LOOP_C_17 : begin
        fsm_output = 8'b00010011;
        state_var_NS = INNER_LOOP_C_18;
      end
      INNER_LOOP_C_18 : begin
        fsm_output = 8'b00010100;
        state_var_NS = INNER_LOOP_C_19;
      end
      INNER_LOOP_C_19 : begin
        fsm_output = 8'b00010101;
        state_var_NS = INNER_LOOP_C_20;
      end
      INNER_LOOP_C_20 : begin
        fsm_output = 8'b00010110;
        state_var_NS = INNER_LOOP_C_21;
      end
      INNER_LOOP_C_21 : begin
        fsm_output = 8'b00010111;
        state_var_NS = INNER_LOOP_C_22;
      end
      INNER_LOOP_C_22 : begin
        fsm_output = 8'b00011000;
        state_var_NS = INNER_LOOP_C_23;
      end
      INNER_LOOP_C_23 : begin
        fsm_output = 8'b00011001;
        state_var_NS = INNER_LOOP_C_24;
      end
      INNER_LOOP_C_24 : begin
        fsm_output = 8'b00011010;
        state_var_NS = INNER_LOOP_C_25;
      end
      INNER_LOOP_C_25 : begin
        fsm_output = 8'b00011011;
        state_var_NS = INNER_LOOP_C_26;
      end
      INNER_LOOP_C_26 : begin
        fsm_output = 8'b00011100;
        state_var_NS = INNER_LOOP_C_27;
      end
      INNER_LOOP_C_27 : begin
        fsm_output = 8'b00011101;
        state_var_NS = INNER_LOOP_C_28;
      end
      INNER_LOOP_C_28 : begin
        fsm_output = 8'b00011110;
        state_var_NS = INNER_LOOP_C_29;
      end
      INNER_LOOP_C_29 : begin
        fsm_output = 8'b00011111;
        state_var_NS = INNER_LOOP_C_30;
      end
      INNER_LOOP_C_30 : begin
        fsm_output = 8'b00100000;
        state_var_NS = INNER_LOOP_C_31;
      end
      INNER_LOOP_C_31 : begin
        fsm_output = 8'b00100001;
        state_var_NS = INNER_LOOP_C_32;
      end
      INNER_LOOP_C_32 : begin
        fsm_output = 8'b00100010;
        state_var_NS = INNER_LOOP_C_33;
      end
      INNER_LOOP_C_33 : begin
        fsm_output = 8'b00100011;
        state_var_NS = INNER_LOOP_C_34;
      end
      INNER_LOOP_C_34 : begin
        fsm_output = 8'b00100100;
        state_var_NS = INNER_LOOP_C_35;
      end
      INNER_LOOP_C_35 : begin
        fsm_output = 8'b00100101;
        state_var_NS = INNER_LOOP_C_36;
      end
      INNER_LOOP_C_36 : begin
        fsm_output = 8'b00100110;
        state_var_NS = INNER_LOOP_C_37;
      end
      INNER_LOOP_C_37 : begin
        fsm_output = 8'b00100111;
        state_var_NS = INNER_LOOP_C_38;
      end
      INNER_LOOP_C_38 : begin
        fsm_output = 8'b00101000;
        state_var_NS = INNER_LOOP_C_39;
      end
      INNER_LOOP_C_39 : begin
        fsm_output = 8'b00101001;
        state_var_NS = INNER_LOOP_C_40;
      end
      INNER_LOOP_C_40 : begin
        fsm_output = 8'b00101010;
        state_var_NS = INNER_LOOP_C_41;
      end
      INNER_LOOP_C_41 : begin
        fsm_output = 8'b00101011;
        state_var_NS = INNER_LOOP_C_42;
      end
      INNER_LOOP_C_42 : begin
        fsm_output = 8'b00101100;
        state_var_NS = INNER_LOOP_C_43;
      end
      INNER_LOOP_C_43 : begin
        fsm_output = 8'b00101101;
        state_var_NS = INNER_LOOP_C_44;
      end
      INNER_LOOP_C_44 : begin
        fsm_output = 8'b00101110;
        state_var_NS = INNER_LOOP_C_45;
      end
      INNER_LOOP_C_45 : begin
        fsm_output = 8'b00101111;
        state_var_NS = INNER_LOOP_C_46;
      end
      INNER_LOOP_C_46 : begin
        fsm_output = 8'b00110000;
        state_var_NS = INNER_LOOP_C_47;
      end
      INNER_LOOP_C_47 : begin
        fsm_output = 8'b00110001;
        state_var_NS = INNER_LOOP_C_48;
      end
      INNER_LOOP_C_48 : begin
        fsm_output = 8'b00110010;
        state_var_NS = INNER_LOOP_C_49;
      end
      INNER_LOOP_C_49 : begin
        fsm_output = 8'b00110011;
        state_var_NS = INNER_LOOP_C_50;
      end
      INNER_LOOP_C_50 : begin
        fsm_output = 8'b00110100;
        state_var_NS = INNER_LOOP_C_51;
      end
      INNER_LOOP_C_51 : begin
        fsm_output = 8'b00110101;
        state_var_NS = INNER_LOOP_C_52;
      end
      INNER_LOOP_C_52 : begin
        fsm_output = 8'b00110110;
        state_var_NS = INNER_LOOP_C_53;
      end
      INNER_LOOP_C_53 : begin
        fsm_output = 8'b00110111;
        state_var_NS = INNER_LOOP_C_54;
      end
      INNER_LOOP_C_54 : begin
        fsm_output = 8'b00111000;
        state_var_NS = INNER_LOOP_C_55;
      end
      INNER_LOOP_C_55 : begin
        fsm_output = 8'b00111001;
        state_var_NS = INNER_LOOP_C_56;
      end
      INNER_LOOP_C_56 : begin
        fsm_output = 8'b00111010;
        state_var_NS = INNER_LOOP_C_57;
      end
      INNER_LOOP_C_57 : begin
        fsm_output = 8'b00111011;
        state_var_NS = INNER_LOOP_C_58;
      end
      INNER_LOOP_C_58 : begin
        fsm_output = 8'b00111100;
        state_var_NS = INNER_LOOP_C_59;
      end
      INNER_LOOP_C_59 : begin
        fsm_output = 8'b00111101;
        state_var_NS = INNER_LOOP_C_60;
      end
      INNER_LOOP_C_60 : begin
        fsm_output = 8'b00111110;
        state_var_NS = INNER_LOOP_C_61;
      end
      INNER_LOOP_C_61 : begin
        fsm_output = 8'b00111111;
        state_var_NS = INNER_LOOP_C_62;
      end
      INNER_LOOP_C_62 : begin
        fsm_output = 8'b01000000;
        state_var_NS = INNER_LOOP_C_63;
      end
      INNER_LOOP_C_63 : begin
        fsm_output = 8'b01000001;
        state_var_NS = INNER_LOOP_C_64;
      end
      INNER_LOOP_C_64 : begin
        fsm_output = 8'b01000010;
        state_var_NS = INNER_LOOP_C_65;
      end
      INNER_LOOP_C_65 : begin
        fsm_output = 8'b01000011;
        state_var_NS = INNER_LOOP_C_66;
      end
      INNER_LOOP_C_66 : begin
        fsm_output = 8'b01000100;
        state_var_NS = INNER_LOOP_C_67;
      end
      INNER_LOOP_C_67 : begin
        fsm_output = 8'b01000101;
        state_var_NS = INNER_LOOP_C_68;
      end
      INNER_LOOP_C_68 : begin
        fsm_output = 8'b01000110;
        state_var_NS = INNER_LOOP_C_69;
      end
      INNER_LOOP_C_69 : begin
        fsm_output = 8'b01000111;
        state_var_NS = INNER_LOOP_C_70;
      end
      INNER_LOOP_C_70 : begin
        fsm_output = 8'b01001000;
        state_var_NS = INNER_LOOP_C_71;
      end
      INNER_LOOP_C_71 : begin
        fsm_output = 8'b01001001;
        state_var_NS = INNER_LOOP_C_72;
      end
      INNER_LOOP_C_72 : begin
        fsm_output = 8'b01001010;
        state_var_NS = INNER_LOOP_C_73;
      end
      INNER_LOOP_C_73 : begin
        fsm_output = 8'b01001011;
        state_var_NS = INNER_LOOP_C_74;
      end
      INNER_LOOP_C_74 : begin
        fsm_output = 8'b01001100;
        state_var_NS = INNER_LOOP_C_75;
      end
      INNER_LOOP_C_75 : begin
        fsm_output = 8'b01001101;
        state_var_NS = INNER_LOOP_C_76;
      end
      INNER_LOOP_C_76 : begin
        fsm_output = 8'b01001110;
        state_var_NS = INNER_LOOP_C_77;
      end
      INNER_LOOP_C_77 : begin
        fsm_output = 8'b01001111;
        state_var_NS = INNER_LOOP_C_78;
      end
      INNER_LOOP_C_78 : begin
        fsm_output = 8'b01010000;
        state_var_NS = INNER_LOOP_C_79;
      end
      INNER_LOOP_C_79 : begin
        fsm_output = 8'b01010001;
        state_var_NS = INNER_LOOP_C_80;
      end
      INNER_LOOP_C_80 : begin
        fsm_output = 8'b01010010;
        state_var_NS = INNER_LOOP_C_81;
      end
      INNER_LOOP_C_81 : begin
        fsm_output = 8'b01010011;
        state_var_NS = INNER_LOOP_C_82;
      end
      INNER_LOOP_C_82 : begin
        fsm_output = 8'b01010100;
        state_var_NS = INNER_LOOP_C_83;
      end
      INNER_LOOP_C_83 : begin
        fsm_output = 8'b01010101;
        state_var_NS = INNER_LOOP_C_84;
      end
      INNER_LOOP_C_84 : begin
        fsm_output = 8'b01010110;
        state_var_NS = INNER_LOOP_C_85;
      end
      INNER_LOOP_C_85 : begin
        fsm_output = 8'b01010111;
        state_var_NS = INNER_LOOP_C_86;
      end
      INNER_LOOP_C_86 : begin
        fsm_output = 8'b01011000;
        state_var_NS = INNER_LOOP_C_87;
      end
      INNER_LOOP_C_87 : begin
        fsm_output = 8'b01011001;
        state_var_NS = INNER_LOOP_C_88;
      end
      INNER_LOOP_C_88 : begin
        fsm_output = 8'b01011010;
        state_var_NS = INNER_LOOP_C_89;
      end
      INNER_LOOP_C_89 : begin
        fsm_output = 8'b01011011;
        state_var_NS = INNER_LOOP_C_90;
      end
      INNER_LOOP_C_90 : begin
        fsm_output = 8'b01011100;
        state_var_NS = INNER_LOOP_C_91;
      end
      INNER_LOOP_C_91 : begin
        fsm_output = 8'b01011101;
        state_var_NS = INNER_LOOP_C_92;
      end
      INNER_LOOP_C_92 : begin
        fsm_output = 8'b01011110;
        state_var_NS = INNER_LOOP_C_93;
      end
      INNER_LOOP_C_93 : begin
        fsm_output = 8'b01011111;
        state_var_NS = INNER_LOOP_C_94;
      end
      INNER_LOOP_C_94 : begin
        fsm_output = 8'b01100000;
        state_var_NS = INNER_LOOP_C_95;
      end
      INNER_LOOP_C_95 : begin
        fsm_output = 8'b01100001;
        state_var_NS = INNER_LOOP_C_96;
      end
      INNER_LOOP_C_96 : begin
        fsm_output = 8'b01100010;
        state_var_NS = INNER_LOOP_C_97;
      end
      INNER_LOOP_C_97 : begin
        fsm_output = 8'b01100011;
        state_var_NS = INNER_LOOP_C_98;
      end
      INNER_LOOP_C_98 : begin
        fsm_output = 8'b01100100;
        state_var_NS = INNER_LOOP_C_99;
      end
      INNER_LOOP_C_99 : begin
        fsm_output = 8'b01100101;
        state_var_NS = INNER_LOOP_C_100;
      end
      INNER_LOOP_C_100 : begin
        fsm_output = 8'b01100110;
        state_var_NS = INNER_LOOP_C_101;
      end
      INNER_LOOP_C_101 : begin
        fsm_output = 8'b01100111;
        state_var_NS = INNER_LOOP_C_102;
      end
      INNER_LOOP_C_102 : begin
        fsm_output = 8'b01101000;
        state_var_NS = INNER_LOOP_C_103;
      end
      INNER_LOOP_C_103 : begin
        fsm_output = 8'b01101001;
        state_var_NS = INNER_LOOP_C_104;
      end
      INNER_LOOP_C_104 : begin
        fsm_output = 8'b01101010;
        state_var_NS = INNER_LOOP_C_105;
      end
      INNER_LOOP_C_105 : begin
        fsm_output = 8'b01101011;
        state_var_NS = INNER_LOOP_C_106;
      end
      INNER_LOOP_C_106 : begin
        fsm_output = 8'b01101100;
        state_var_NS = INNER_LOOP_C_107;
      end
      INNER_LOOP_C_107 : begin
        fsm_output = 8'b01101101;
        state_var_NS = INNER_LOOP_C_108;
      end
      INNER_LOOP_C_108 : begin
        fsm_output = 8'b01101110;
        state_var_NS = INNER_LOOP_C_109;
      end
      INNER_LOOP_C_109 : begin
        fsm_output = 8'b01101111;
        state_var_NS = INNER_LOOP_C_110;
      end
      INNER_LOOP_C_110 : begin
        fsm_output = 8'b01110000;
        state_var_NS = INNER_LOOP_C_111;
      end
      INNER_LOOP_C_111 : begin
        fsm_output = 8'b01110001;
        state_var_NS = INNER_LOOP_C_112;
      end
      INNER_LOOP_C_112 : begin
        fsm_output = 8'b01110010;
        state_var_NS = INNER_LOOP_C_113;
      end
      INNER_LOOP_C_113 : begin
        fsm_output = 8'b01110011;
        state_var_NS = INNER_LOOP_C_114;
      end
      INNER_LOOP_C_114 : begin
        fsm_output = 8'b01110100;
        state_var_NS = INNER_LOOP_C_115;
      end
      INNER_LOOP_C_115 : begin
        fsm_output = 8'b01110101;
        state_var_NS = INNER_LOOP_C_116;
      end
      INNER_LOOP_C_116 : begin
        fsm_output = 8'b01110110;
        state_var_NS = INNER_LOOP_C_117;
      end
      INNER_LOOP_C_117 : begin
        fsm_output = 8'b01110111;
        state_var_NS = INNER_LOOP_C_118;
      end
      INNER_LOOP_C_118 : begin
        fsm_output = 8'b01111000;
        state_var_NS = INNER_LOOP_C_119;
      end
      INNER_LOOP_C_119 : begin
        fsm_output = 8'b01111001;
        state_var_NS = INNER_LOOP_C_120;
      end
      INNER_LOOP_C_120 : begin
        fsm_output = 8'b01111010;
        state_var_NS = INNER_LOOP_C_121;
      end
      INNER_LOOP_C_121 : begin
        fsm_output = 8'b01111011;
        state_var_NS = INNER_LOOP_C_122;
      end
      INNER_LOOP_C_122 : begin
        fsm_output = 8'b01111100;
        state_var_NS = INNER_LOOP_C_123;
      end
      INNER_LOOP_C_123 : begin
        fsm_output = 8'b01111101;
        state_var_NS = INNER_LOOP_C_124;
      end
      INNER_LOOP_C_124 : begin
        fsm_output = 8'b01111110;
        state_var_NS = INNER_LOOP_C_125;
      end
      INNER_LOOP_C_125 : begin
        fsm_output = 8'b01111111;
        state_var_NS = INNER_LOOP_C_126;
      end
      INNER_LOOP_C_126 : begin
        fsm_output = 8'b10000000;
        state_var_NS = INNER_LOOP_C_127;
      end
      INNER_LOOP_C_127 : begin
        fsm_output = 8'b10000001;
        state_var_NS = INNER_LOOP_C_128;
      end
      INNER_LOOP_C_128 : begin
        fsm_output = 8'b10000010;
        state_var_NS = INNER_LOOP_C_129;
      end
      INNER_LOOP_C_129 : begin
        fsm_output = 8'b10000011;
        state_var_NS = INNER_LOOP_C_130;
      end
      INNER_LOOP_C_130 : begin
        fsm_output = 8'b10000100;
        state_var_NS = INNER_LOOP_C_131;
      end
      INNER_LOOP_C_131 : begin
        fsm_output = 8'b10000101;
        state_var_NS = INNER_LOOP_C_132;
      end
      INNER_LOOP_C_132 : begin
        fsm_output = 8'b10000110;
        state_var_NS = INNER_LOOP_C_133;
      end
      INNER_LOOP_C_133 : begin
        fsm_output = 8'b10000111;
        state_var_NS = INNER_LOOP_C_134;
      end
      INNER_LOOP_C_134 : begin
        fsm_output = 8'b10001000;
        state_var_NS = INNER_LOOP_C_135;
      end
      INNER_LOOP_C_135 : begin
        fsm_output = 8'b10001001;
        state_var_NS = INNER_LOOP_C_136;
      end
      INNER_LOOP_C_136 : begin
        fsm_output = 8'b10001010;
        state_var_NS = INNER_LOOP_C_137;
      end
      INNER_LOOP_C_137 : begin
        fsm_output = 8'b10001011;
        state_var_NS = INNER_LOOP_C_138;
      end
      INNER_LOOP_C_138 : begin
        fsm_output = 8'b10001100;
        state_var_NS = INNER_LOOP_C_139;
      end
      INNER_LOOP_C_139 : begin
        fsm_output = 8'b10001101;
        state_var_NS = INNER_LOOP_C_140;
      end
      INNER_LOOP_C_140 : begin
        fsm_output = 8'b10001110;
        state_var_NS = INNER_LOOP_C_141;
      end
      INNER_LOOP_C_141 : begin
        fsm_output = 8'b10001111;
        state_var_NS = INNER_LOOP_C_142;
      end
      INNER_LOOP_C_142 : begin
        fsm_output = 8'b10010000;
        state_var_NS = INNER_LOOP_C_143;
      end
      INNER_LOOP_C_143 : begin
        fsm_output = 8'b10010001;
        state_var_NS = INNER_LOOP_C_144;
      end
      INNER_LOOP_C_144 : begin
        fsm_output = 8'b10010010;
        state_var_NS = INNER_LOOP_C_145;
      end
      INNER_LOOP_C_145 : begin
        fsm_output = 8'b10010011;
        state_var_NS = INNER_LOOP_C_146;
      end
      INNER_LOOP_C_146 : begin
        fsm_output = 8'b10010100;
        state_var_NS = INNER_LOOP_C_147;
      end
      INNER_LOOP_C_147 : begin
        fsm_output = 8'b10010101;
        if ( INNER_LOOP_C_147_tr0 ) begin
          state_var_NS = OUTER_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP_C_0;
        end
      end
      OUTER_LOOP_C_1 : begin
        fsm_output = 8'b10010110;
        if ( OUTER_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = OUTER_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10010111;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = OUTER_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_wait_dp
// ------------------------------------------------------------------


module stockham_DIT_core_wait_dp (
  yt_rsc_0_0_cgo_iro, yt_rsc_0_0_i_clken_d, yt_rsc_0_1_cgo_iro, yt_rsc_0_1_i_clken_d,
      yt_rsc_0_2_cgo_iro, yt_rsc_0_2_i_clken_d, yt_rsc_0_3_cgo_iro, yt_rsc_0_3_i_clken_d,
      ensig_cgo_iro, yt_rsc_0_0_cgo, yt_rsc_0_1_cgo, yt_rsc_0_2_cgo, yt_rsc_0_3_cgo,
      ensig_cgo, INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
);
  input yt_rsc_0_0_cgo_iro;
  output yt_rsc_0_0_i_clken_d;
  input yt_rsc_0_1_cgo_iro;
  output yt_rsc_0_1_i_clken_d;
  input yt_rsc_0_2_cgo_iro;
  output yt_rsc_0_2_i_clken_d;
  input yt_rsc_0_3_cgo_iro;
  output yt_rsc_0_3_i_clken_d;
  input ensig_cgo_iro;
  input yt_rsc_0_0_cgo;
  input yt_rsc_0_1_cgo;
  input yt_rsc_0_2_cgo;
  input yt_rsc_0_3_cgo;
  input ensig_cgo;
  output INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign yt_rsc_0_0_i_clken_d = yt_rsc_0_0_cgo | yt_rsc_0_0_cgo_iro;
  assign yt_rsc_0_1_i_clken_d = yt_rsc_0_1_cgo | yt_rsc_0_1_cgo_iro;
  assign yt_rsc_0_2_i_clken_d = yt_rsc_0_2_cgo | yt_rsc_0_2_cgo_iro;
  assign yt_rsc_0_3_i_clken_d = yt_rsc_0_3_cgo | yt_rsc_0_3_cgo_iro;
  assign INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core
// ------------------------------------------------------------------


module stockham_DIT_core (
  clk, rst, xt_rsc_triosy_0_0_lz, xt_rsc_triosy_0_1_lz, xt_rsc_triosy_0_2_lz, xt_rsc_triosy_0_3_lz,
      p_rsc_dat, p_rsc_triosy_lz, g_rsc_triosy_lz, twiddle_rsc_triosy_0_0_lz, twiddle_rsc_triosy_0_1_lz,
      twiddle_rsc_triosy_0_2_lz, twiddle_rsc_triosy_0_3_lz, yt_rsc_0_0_i_clken_d,
      yt_rsc_0_0_i_q_d, yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, yt_rsc_0_1_i_clken_d,
      yt_rsc_0_1_i_q_d, yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, yt_rsc_0_2_i_clken_d,
      yt_rsc_0_2_i_q_d, yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d, yt_rsc_0_3_i_clken_d,
      yt_rsc_0_3_i_q_d, yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d, xt_rsc_0_0_i_q_d,
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, xt_rsc_0_1_i_q_d, xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_2_i_q_d, xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d, xt_rsc_0_3_i_q_d,
      xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d, twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d, twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_3_i_q_d, twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_0_i_d_d_pff, yt_rsc_0_0_i_radr_d_pff, yt_rsc_0_0_i_wadr_d_pff, yt_rsc_0_0_i_we_d_pff,
      yt_rsc_0_1_i_radr_d_pff, yt_rsc_0_1_i_wadr_d_pff, yt_rsc_0_1_i_we_d_pff, yt_rsc_0_2_i_radr_d_pff,
      yt_rsc_0_2_i_wadr_d_pff, yt_rsc_0_2_i_we_d_pff, yt_rsc_0_3_i_radr_d_pff, yt_rsc_0_3_i_wadr_d_pff,
      yt_rsc_0_3_i_we_d_pff, xt_rsc_0_0_i_we_d_pff, xt_rsc_0_1_i_we_d_pff, xt_rsc_0_2_i_we_d_pff,
      xt_rsc_0_3_i_we_d_pff, twiddle_rsc_0_0_i_radr_d_pff
);
  input clk;
  input rst;
  output xt_rsc_triosy_0_0_lz;
  output xt_rsc_triosy_0_1_lz;
  output xt_rsc_triosy_0_2_lz;
  output xt_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output g_rsc_triosy_lz;
  output twiddle_rsc_triosy_0_0_lz;
  output twiddle_rsc_triosy_0_1_lz;
  output twiddle_rsc_triosy_0_2_lz;
  output twiddle_rsc_triosy_0_3_lz;
  output yt_rsc_0_0_i_clken_d;
  input [63:0] yt_rsc_0_0_i_q_d;
  output yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsc_0_1_i_clken_d;
  input [63:0] yt_rsc_0_1_i_q_d;
  output yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsc_0_2_i_clken_d;
  input [63:0] yt_rsc_0_2_i_q_d;
  output yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsc_0_3_i_clken_d;
  input [63:0] yt_rsc_0_3_i_q_d;
  output yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_0_i_q_d;
  output xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_1_i_q_d;
  output xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_2_i_q_d;
  output xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] xt_rsc_0_3_i_q_d;
  output xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_0_i_q_d;
  output twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_1_i_q_d;
  output twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_2_i_q_d;
  output twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsc_0_3_i_q_d;
  output twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] yt_rsc_0_0_i_d_d_pff;
  output [7:0] yt_rsc_0_0_i_radr_d_pff;
  output [7:0] yt_rsc_0_0_i_wadr_d_pff;
  output yt_rsc_0_0_i_we_d_pff;
  output [7:0] yt_rsc_0_1_i_radr_d_pff;
  output [7:0] yt_rsc_0_1_i_wadr_d_pff;
  output yt_rsc_0_1_i_we_d_pff;
  output [7:0] yt_rsc_0_2_i_radr_d_pff;
  output [7:0] yt_rsc_0_2_i_wadr_d_pff;
  output yt_rsc_0_2_i_we_d_pff;
  output [7:0] yt_rsc_0_3_i_radr_d_pff;
  output [7:0] yt_rsc_0_3_i_wadr_d_pff;
  output yt_rsc_0_3_i_we_d_pff;
  output xt_rsc_0_0_i_we_d_pff;
  output xt_rsc_0_1_i_we_d_pff;
  output xt_rsc_0_2_i_we_d_pff;
  output xt_rsc_0_3_i_we_d_pff;
  output [7:0] twiddle_rsc_0_0_i_radr_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  wire INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en;
  reg [127:0] INNER_LOOP_1_b_rem_cmp_a;
  wire [63:0] INNER_LOOP_1_b_rem_cmp_z;
  wire [7:0] fsm_output;
  wire nor_tmp_4;
  wire or_tmp_7;
  wire and_dcpl_11;
  wire and_dcpl_13;
  wire and_dcpl_14;
  wire and_dcpl_15;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire and_dcpl_18;
  wire and_dcpl_19;
  wire and_dcpl_21;
  wire and_dcpl_22;
  wire and_dcpl_23;
  wire mux_tmp_20;
  wire mux_tmp_21;
  wire nor_tmp_12;
  wire mux_tmp_24;
  wire or_tmp_18;
  wire or_tmp_19;
  wire and_dcpl_26;
  wire and_dcpl_27;
  wire and_dcpl_28;
  wire and_dcpl_29;
  wire and_dcpl_30;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_35;
  wire and_dcpl_36;
  wire and_dcpl_37;
  wire and_dcpl_38;
  wire or_tmp_25;
  wire or_tmp_29;
  wire or_tmp_33;
  wire nand_tmp_1;
  wire or_tmp_53;
  wire and_dcpl_39;
  wire and_dcpl_40;
  wire and_dcpl_41;
  wire and_dcpl_42;
  wire and_dcpl_43;
  wire and_dcpl_44;
  wire and_dcpl_46;
  wire and_dcpl_47;
  wire and_dcpl_49;
  wire and_dcpl_51;
  wire and_dcpl_52;
  wire and_dcpl_53;
  wire and_dcpl_54;
  wire and_dcpl_55;
  wire and_dcpl_57;
  wire and_dcpl_58;
  wire not_tmp_43;
  wire and_dcpl_61;
  wire not_tmp_45;
  wire not_tmp_47;
  wire or_tmp_78;
  wire or_tmp_80;
  wire or_tmp_82;
  wire mux_tmp_62;
  wire or_tmp_98;
  wire or_tmp_100;
  wire or_tmp_101;
  wire not_tmp_62;
  wire not_tmp_65;
  wire not_tmp_67;
  wire or_tmp_135;
  wire or_tmp_137;
  wire or_tmp_145;
  wire not_tmp_75;
  wire not_tmp_80;
  wire or_tmp_180;
  wire or_tmp_182;
  wire not_tmp_88;
  wire not_tmp_92;
  wire and_dcpl_73;
  wire and_dcpl_76;
  wire and_dcpl_86;
  wire and_dcpl_87;
  wire and_dcpl_96;
  wire and_dcpl_98;
  wire and_dcpl_99;
  wire and_dcpl_101;
  wire and_dcpl_107;
  wire and_dcpl_111;
  wire or_tmp_269;
  wire and_dcpl_121;
  wire or_tmp_277;
  wire and_dcpl_125;
  wire and_dcpl_126;
  wire nor_tmp_54;
  wire mux_tmp_193;
  wire mux_tmp_194;
  wire mux_tmp_195;
  wire mux_tmp_198;
  wire and_dcpl_128;
  wire not_tmp_130;
  wire or_dcpl_11;
  wire or_dcpl_12;
  wire or_dcpl_15;
  wire or_dcpl_16;
  wire and_dcpl_129;
  wire and_dcpl_130;
  wire and_dcpl_132;
  wire and_dcpl_133;
  wire and_dcpl_134;
  wire and_dcpl_135;
  wire and_dcpl_140;
  wire and_dcpl_141;
  wire and_dcpl_142;
  wire and_dcpl_144;
  wire and_dcpl_146;
  wire and_dcpl_148;
  wire and_dcpl_161;
  reg INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  reg [8:0] INNER_LOOP_a_acc_psp_sva;
  reg INNER_LOOP_a_INNER_LOOP_a_and_25_itm;
  reg s_1_sva;
  reg s_0_sva;
  wire [7:0] INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1;
  wire [8:0] nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1;
  wire [6:0] INNER_LOOP_1_upper_and_psp_sva_mx0w0;
  reg s_9_sva;
  wire [6:0] INNER_LOOP_1_q_and_psp_sva_1;
  reg s_8_sva;
  reg s_7_sva;
  reg s_6_sva;
  reg s_5_sva;
  reg s_4_sva;
  reg s_3_sva;
  reg s_2_sva;
  wire [8:0] INNER_LOOP_a_acc_psp_sva_mx0w0;
  wire [9:0] nl_INNER_LOOP_a_acc_psp_sva_mx0w0;
  reg [8:0] OUTER_LOOP_m_lshift_psp_sva;
  wire INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0;
  wire INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0;
  reg y_1_sva;
  reg y_3_sva;
  reg [7:0] INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva;
  wire [8:0] nl_INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva;
  reg INNER_LOOP_a_conc_12_itm_1;
  reg [9:0] pref_y_idx_pref_9_0_2_sva;
  wire [10:0] nl_pref_y_idx_pref_9_0_2_sva;
  reg INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  reg [8:0] INNER_LOOP_b_acc_1_psp_sva;
  wire [9:0] nl_INNER_LOOP_b_acc_1_psp_sva;
  reg [9:0] pref_x_idx_pref_1_9_0_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_sva;
  reg x_1_sva;
  reg x_3_sva;
  reg [8:0] INNER_LOOP_acc_12_psp_sva;
  wire [9:0] nl_INNER_LOOP_acc_12_psp_sva;
  reg INNER_LOOP_1_mul_cse_sva_0;
  reg [9:0] pref_x_idx_pref_1_9_0_1_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_1_sva;
  reg [9:0] pref_x_idx_pref_1_9_0_2_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_2_sva;
  reg [9:0] pref_y_idx_pref_9_0_sva;
  wire [11:0] nl_pref_y_idx_pref_9_0_sva;
  reg [1:0] reg_INNER_LOOP_upper_acc_ftd_7;
  reg [1:0] reg_INNER_LOOP_1_w_lshift_idiv_ftd_8;
  wire s_or_cse;
  reg reg_yt_rsc_0_0_cgo_cse;
  reg reg_yt_rsc_0_1_cgo_cse;
  reg reg_yt_rsc_0_2_cgo_cse;
  reg reg_yt_rsc_0_3_cgo_cse;
  reg reg_xt_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  wire and_218_cse;
  wire and_184_cse;
  wire nor_21_cse;
  wire nand_26_cse;
  wire nor_80_cse;
  wire and_185_cse;
  wire nor_69_cse;
  wire nor_14_cse;
  wire or_332_cse;
  wire or_333_cse;
  wire mux_142_rmff;
  wire mux_172_rmff;
  reg [63:0] INNER_LOOP_1_acc_5_itm;
  reg [63:0] drf_y_smx_lpi_2;
  reg [63:0] drf_y_smx_lpi_3_dfm;
  reg [6:0] INNER_LOOP_a_acc_psp_4_sva;
  wire [7:0] nl_INNER_LOOP_a_acc_psp_4_sva;
  reg [6:0] INNER_LOOP_1_q_and_psp_sva;
  reg [7:0] INNER_LOOP_a_acc_2_psp_sva;
  wire [8:0] nl_INNER_LOOP_a_acc_2_psp_sva;
  reg [7:0] INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva;
  reg INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm;
  reg [63:0] p_sva;
  wire mux_50_itm;
  wire mux_86_itm;
  wire mux_114_itm;
  wire [7:0] INNER_LOOP_b_acc_itm;
  wire [8:0] nl_INNER_LOOP_b_acc_itm;
  wire [3:0] z_out;
  wire [4:0] nl_z_out;
  wire and_dcpl_194;
  wire [8:0] z_out_1;
  wire [9:0] nl_z_out_1;
  wire and_dcpl_216;
  wire and_dcpl_217;
  wire and_dcpl_223;
  wire and_dcpl_229;
  wire and_dcpl_235;
  wire and_dcpl_237;
  wire [127:0] z_out_4;
  wire and_dcpl_243;
  wire and_dcpl_251;
  wire [7:0] z_out_5;
  wire [9:0] z_out_6;
  reg [3:0] OUTER_LOOP_nn_3_0_sva;
  reg [6:0] INNER_LOOP_1_upper_and_psp_sva;
  reg [63:0] tmp_3_sva_3;
  reg [127:0] INNER_LOOP_1_b_mul_mut;
  reg [127:0] INNER_LOOP_2_b_mul_mut;
  reg [127:0] INNER_LOOP_3_b_mul_mut;
  reg [127:0] INNER_LOOP_4_b_mul_mut;
  reg INNER_LOOP_b_nor_itm;
  reg [63:0] INNER_LOOP_w_mux1h_1_itm;
  reg [63:0] INNER_LOOP_w_mux1h_2_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_nor_5_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_and_22_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_and_23_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_and_24_itm;
  reg INNER_LOOP_a_and_9_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_and_26_itm;
  reg INNER_LOOP_a_INNER_LOOP_a_and_27_itm;
  reg [63:0] INNER_LOOP_w_mux1h_3_itm;
  reg [3:0] OUTER_LOOP_acc_2_itm;
  wire [63:0] drf_y_smx_lpi_3_dfm_4;
  wire [63:0] drf_y_smx_lpi_3_dfm_5;
  wire [63:0] drf_y_smx_lpi_3_dfm_6;
  wire [63:0] drf_y_smx_lpi_3_dfm_7;
  wire INNER_LOOP_b_INNER_LOOP_b_nor_cse_1;
  wire INNER_LOOP_w_mux1h_1_itm_mx0c0;
  wire INNER_LOOP_w_mux1h_1_itm_mx0c1;
  wire INNER_LOOP_w_mux1h_1_itm_mx0c2;
  wire INNER_LOOP_w_mux1h_1_itm_mx0c3;
  wire INNER_LOOP_1_acc_5_itm_mx0c0;
  wire INNER_LOOP_1_acc_5_itm_mx0c1;
  wire INNER_LOOP_w_mux1h_2_itm_mx0c0;
  wire INNER_LOOP_w_mux1h_2_itm_mx0c1;
  wire INNER_LOOP_w_mux1h_2_itm_mx0c2;
  wire INNER_LOOP_w_mux1h_2_itm_mx0c3;
  wire INNER_LOOP_w_mux1h_3_itm_mx0c0;
  wire INNER_LOOP_w_mux1h_3_itm_mx0c1;
  wire INNER_LOOP_w_mux1h_3_itm_mx0c2;
  wire INNER_LOOP_w_mux1h_3_itm_mx0c3;
  wire and_125_rgt;
  wire and_299_cse;
  wire and_302_cse;
  wire and_307_cse;
  wire or_tmp_298;
  wire nor_tmp;
  wire or_364_cse;
  wire OUTER_LOOP_m_or_1_itm;
  wire OUTER_LOOP_acc_itm_2_1;
  wire and_310_cse;
  wire nor_155_cse;

  wire[0:0] s_mux_20_nl;
  wire[0:0] nor_141_nl;
  wire[0:0] mux_29_nl;
  wire[0:0] or_343_nl;
  wire[0:0] nand_50_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] or_28_nl;
  wire[0:0] mux_26_nl;
  wire[0:0] mux_25_nl;
  wire[0:0] or_25_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] mux_47_nl;
  wire[0:0] mux_46_nl;
  wire[0:0] nand_3_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] or_62_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] or_59_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] or_58_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] or_57_nl;
  wire[0:0] or_55_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] nand_2_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] mux_37_nl;
  wire[0:0] or_54_nl;
  wire[0:0] or_53_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] or_52_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] or_51_nl;
  wire[0:0] or_49_nl;
  wire[0:0] or_47_nl;
  wire[0:0] or_46_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] or_43_nl;
  wire[0:0] or_35_nl;
  wire[0:0] or_32_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] or_112_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] or_111_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_105_nl;
  wire[0:0] nor_19_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] or_104_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] or_102_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] nor_126_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] or_98_nl;
  wire[0:0] or_96_nl;
  wire[0:0] or_94_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] nand_8_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] or_84_nl;
  wire[0:0] or_81_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] or_167_nl;
  wire[0:0] nand_12_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] nor_144_nl;
  wire[0:0] nand_39_nl;
  wire[0:0] or_163_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] or_162_nl;
  wire[0:0] or_160_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] or_158_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] or_157_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] or_154_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] or_151_nl;
  wire[0:0] or_150_nl;
  wire[0:0] nand_40_nl;
  wire[0:0] or_147_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] or_141_nl;
  wire[0:0] or_139_nl;
  wire[0:0] or_138_nl;
  wire[0:0] or_135_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] nor_101_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] nor_102_nl;
  wire[0:0] nor_103_nl;
  wire[0:0] and_194_nl;
  wire[0:0] and_195_nl;
  wire[0:0] nor_104_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] and_196_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] nor_105_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] nor_106_nl;
  wire[0:0] nor_107_nl;
  wire[0:0] and_197_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] nor_108_nl;
  wire[0:0] and_198_nl;
  wire[0:0] nor_109_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] nand_34_nl;
  wire[0:0] or_192_nl;
  wire[0:0] and_199_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] or_191_nl;
  wire[0:0] and_200_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] or_189_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] or_186_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] and_222_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] or_251_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] nor_151_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] nor_78_nl;
  wire[0:0] nor_79_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] and_223_nl;
  wire[0:0] nor_152_nl;
  wire[0:0] nor_153_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] or_241_nl;
  wire[0:0] or_240_nl;
  wire[0:0] or_239_nl;
  wire[0:0] INNER_LOOP_b_or_nl;
  wire[0:0] nor_154_nl;
  wire[0:0] mux_183_nl;
  wire[0:0] or_345_nl;
  wire[0:0] and_112_nl;
  wire[0:0] mux_184_nl;
  wire[0:0] and_183_nl;
  wire[0:0] nand_25_nl;
  wire[0:0] and_118_nl;
  wire[0:0] mux_185_nl;
  wire[0:0] and_181_nl;
  wire[0:0] nor_64_nl;
  wire[0:0] nor_63_nl;
  wire[0:0] mux_22_nl;
  wire[0:0] or_23_nl;
  wire[6:0] INNER_LOOP_t_mux_nl;
  wire[0:0] and_127_nl;
  wire[0:0] nor_158_nl;
  wire[0:0] mux_190_nl;
  wire[0:0] or_285_nl;
  wire[0:0] or_284_nl;
  wire[0:0] mux_197_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] mux_202_nl;
  wire[7:0] INNER_LOOP_b_acc_15_nl;
  wire[8:0] nl_INNER_LOOP_b_acc_15_nl;
  wire[1:0] INNER_LOOP_b_acc_16_nl;
  wire[2:0] nl_INNER_LOOP_b_acc_16_nl;
  wire[8:0] INNER_LOOP_b_acc_12_nl;
  wire[10:0] nl_INNER_LOOP_b_acc_12_nl;
  wire[8:0] INNER_LOOP_b_acc_17_nl;
  wire[9:0] nl_INNER_LOOP_b_acc_17_nl;
  wire[0:0] mux_209_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] or_298_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] mux_213_nl;
  wire[0:0] mux_212_nl;
  wire[0:0] and_142_nl;
  wire[0:0] mux_233_nl;
  wire[0:0] or_nl;
  wire[0:0] or_363_nl;
  wire[0:0] mux_232_nl;
  wire[0:0] or_357_nl;
  wire[0:0] or_356_nl;
  wire[0:0] mux_231_nl;
  wire[0:0] mux_230_nl;
  wire[0:0] nand_nl;
  wire[0:0] or_355_nl;
  wire[64:0] acc_2_nl;
  wire[65:0] nl_acc_2_nl;
  wire[63:0] INNER_LOOP_mux_20_nl;
  wire[0:0] and_335_nl;
  wire[0:0] INNER_LOOP_a_or_1_nl;
  wire[0:0] INNER_LOOP_a_or_2_nl;
  wire[0:0] INNER_LOOP_a_or_7_nl;
  wire[0:0] INNER_LOOP_a_or_3_nl;
  wire[0:0] INNER_LOOP_a_or_4_nl;
  wire[0:0] INNER_LOOP_a_or_5_nl;
  wire[0:0] INNER_LOOP_a_or_6_nl;
  wire[0:0] INNER_LOOP_a_and_23_nl;
  wire[0:0] INNER_LOOP_a_and_24_nl;
  wire[0:0] INNER_LOOP_a_INNER_LOOP_a_nor_3_nl;
  wire[0:0] INNER_LOOP_a_INNER_LOOP_a_and_25_nl;
  wire[7:0] INNER_LOOP_b_acc_10_nl;
  wire[8:0] nl_INNER_LOOP_b_acc_10_nl;
  wire[0:0] INNER_LOOP_b_and_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_4_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_5_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_6_nl;
  wire[0:0] INNER_LOOP_b_and_1_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_7_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_8_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_9_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_14_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_16_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_17_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_19_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_24_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_25_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_27_nl;
  wire[0:0] INNER_LOOP_b_INNER_LOOP_b_and_28_nl;
  wire[0:0] or_20_nl;
  wire[0:0] nor_139_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] or_39_nl;
  wire[0:0] and_207_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] nor_132_nl;
  wire[0:0] nor_134_nl;
  wire[0:0] and_208_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] nor_135_nl;
  wire[0:0] nor_136_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] and_206_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] nor_127_nl;
  wire[0:0] nor_128_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] nor_130_nl;
  wire[0:0] nor_131_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] or_74_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] or_73_nl;
  wire[0:0] or_71_nl;
  wire[0:0] or_69_nl;
  wire[0:0] or_92_nl;
  wire[0:0] nor_124_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] nand_10_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] nor_175_nl;
  wire[0:0] nor_176_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] or_117_nl;
  wire[0:0] or_115_nl;
  wire[0:0] nor_125_nl;
  wire[0:0] nor_120_nl;
  wire[0:0] mux_94_nl;
  wire[0:0] or_132_nl;
  wire[0:0] or_130_nl;
  wire[0:0] nor_121_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] or_126_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] or_125_nl;
  wire[0:0] nand_49_nl;
  wire[0:0] nand_11_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] nor_122_nl;
  wire[0:0] nor_123_nl;
  wire[0:0] and_203_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] nor_115_nl;
  wire[0:0] nor_116_nl;
  wire[0:0] and_204_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] nor_117_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] nor_118_nl;
  wire[0:0] nor_119_nl;
  wire[0:0] nor_110_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] nand_36_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] nor_111_nl;
  wire[0:0] and_201_nl;
  wire[0:0] or_182_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] and_202_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] nor_112_nl;
  wire[0:0] nor_113_nl;
  wire[0:0] nor_114_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] or_177_nl;
  wire[0:0] or_176_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] nand_32_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] or_335_nl;
  wire[0:0] nand_33_nl;
  wire[0:0] and_193_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] or_206_nl;
  wire[0:0] nor_95_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] nand_47_nl;
  wire[0:0] nand_48_nl;
  wire[0:0] nor_96_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] or_213_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] nor_97_nl;
  wire[0:0] and_192_nl;
  wire[0:0] or_211_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] or_340_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] or_341_nl;
  wire[0:0] or_342_nl;
  wire[0:0] mux_192_nl;
  wire[0:0] mux_191_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] mux_200_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] and_175_nl;
  wire[0:0] mux_207_nl;
  wire[2:0] OUTER_LOOP_acc_nl;
  wire[3:0] nl_OUTER_LOOP_acc_nl;
  wire[0:0] and_50_nl;
  wire[0:0] and_63_nl;
  wire[0:0] and_66_nl;
  wire[0:0] and_71_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] nor_91_nl;
  wire[0:0] nor_93_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] nor_89_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] and_190_nl;
  wire[0:0] nor_81_nl;
  wire[3:0] OUTER_LOOP_mux_6_nl;
  wire[0:0] and_334_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_5_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_6_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_7_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_8_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_and_9_nl;
  wire[0:0] OUTER_LOOP_mux_7_nl;
  wire[0:0] OUTER_LOOP_mux_8_nl;
  wire[0:0] OUTER_LOOP_mux_9_nl;
  wire[0:0] OUTER_LOOP_mux_10_nl;
  wire[63:0] INNER_LOOP_b_mux1h_38_nl;
  wire[63:0] INNER_LOOP_b_mux1h_39_nl;
  wire[0:0] INNER_LOOP_b_and_6_nl;
  wire[0:0] INNER_LOOP_b_and_7_nl;
  wire[0:0] INNER_LOOP_b_and_8_nl;
  wire[0:0] INNER_LOOP_b_and_9_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[63:0] INNER_LOOP_acc_13_nl;
  wire[64:0] nl_INNER_LOOP_acc_13_nl;
  wire[63:0] INNER_LOOP_mux_21_nl;
  wire[0:0] and_336_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] nor_72_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] nor_73_nl;
  wire[0:0] nor_74_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] or_260_nl;
  wire[0:0] or_259_nl;
  wire [63:0] nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat;
  assign and_336_nl = and_dcpl_15 & (~ (fsm_output[5])) & (fsm_output[2]) & (~ (fsm_output[0]))
      & (fsm_output[1]) & (~ (fsm_output[4])) & (fsm_output[7]);
  assign INNER_LOOP_mux_21_nl = MUX_v_64_2_2(drf_y_smx_lpi_2, drf_y_smx_lpi_3_dfm,
      and_336_nl);
  assign nl_INNER_LOOP_acc_13_nl = INNER_LOOP_1_acc_5_itm + INNER_LOOP_mux_21_nl;
  assign INNER_LOOP_acc_13_nl = nl_INNER_LOOP_acc_13_nl[63:0];
  assign nor_73_nl = ~((fsm_output[0]) | (fsm_output[2]));
  assign mux_176_nl = MUX_s_1_2_2(nor_73_nl, and_218_cse, fsm_output[5]);
  assign nor_72_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[4])) | (fsm_output[7])
      | (fsm_output[6]) | (~ mux_176_nl));
  assign or_260_nl = (~ (fsm_output[6])) | (~ (fsm_output[5])) | (fsm_output[0])
      | (fsm_output[2]);
  assign or_259_nl = (fsm_output[6:5]!=2'b00) | (~ and_218_cse);
  assign mux_175_nl = MUX_s_1_2_2(or_260_nl, or_259_nl, fsm_output[7]);
  assign nor_74_nl = ~((fsm_output[4:3]!=2'b00) | mux_175_nl);
  assign mux_177_nl = MUX_s_1_2_2(nor_72_nl, nor_74_nl, fsm_output[1]);
  assign nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(INNER_LOOP_acc_13_nl,
      INNER_LOOP_1_acc_5_itm, mux_177_nl);
  wire [63:0] nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat;
  assign nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_181_nl;
  wire[0:0] and_186_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] nor_66_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] nor_67_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] and_187_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] nor_70_nl;
  wire[0:0] nor_71_nl;
  wire [0:0] nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nor_66_nl = ~((fsm_output[5]) | nand_26_cse);
  assign nor_67_nl = ~((fsm_output[2:0]!=3'b000));
  assign nor_68_nl = ~((fsm_output[2:1]!=2'b10));
  assign mux_179_nl = MUX_s_1_2_2(nor_67_nl, nor_68_nl, fsm_output[5]);
  assign mux_180_nl = MUX_s_1_2_2(nor_66_nl, mux_179_nl, fsm_output[3]);
  assign and_186_nl = (fsm_output[4]) & mux_180_nl;
  assign nor_70_nl = ~((fsm_output[2:1]!=2'b00));
  assign mux_178_nl = MUX_s_1_2_2(nor_69_cse, nor_70_nl, fsm_output[0]);
  assign and_187_nl = (~((fsm_output[5:3]!=3'b100))) & mux_178_nl;
  assign mux_181_nl = MUX_s_1_2_2(and_186_nl, and_187_nl, fsm_output[6]);
  assign nor_71_nl = ~((fsm_output[6:1]!=6'b000011));
  assign nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat = MUX_s_1_2_2(mux_181_nl,
      nor_71_nl, fsm_output[7]);
  wire[6:0] INNER_LOOP_w_INNER_LOOP_w_mux_nl;
  wire[0:0] INNER_LOOP_w_or_3_nl;
  wire[0:0] INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_1_nl;
  wire[0:0] INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_nl;
  wire [8:0] nl_INNER_LOOP_1_w_rshift_rg_a;
  assign INNER_LOOP_w_or_3_nl = and_302_cse | and_307_cse | and_310_cse;
  assign INNER_LOOP_w_INNER_LOOP_w_mux_nl = MUX_v_7_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w0,
      INNER_LOOP_1_upper_and_psp_sva, INNER_LOOP_w_or_3_nl);
  assign INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_1_nl = ~((reg_INNER_LOOP_upper_acc_ftd_7[1])
      | and_299_cse | and_302_cse);
  assign INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_nl = ~((reg_INNER_LOOP_upper_acc_ftd_7[0])
      | and_299_cse | and_307_cse);
  assign nl_INNER_LOOP_1_w_rshift_rg_a = {INNER_LOOP_w_INNER_LOOP_w_mux_nl , INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_1_nl
      , INNER_LOOP_w_INNER_LOOP_w_INNER_LOOP_w_nor_nl};
  wire [7:0] nl_INNER_LOOP_1_w_lshift_rg_a;
  assign nl_INNER_LOOP_1_w_lshift_rg_a = MUX_v_8_2_2(8'b00000001, z_out_5, OUTER_LOOP_m_or_1_itm);
  wire [3:0] nl_INNER_LOOP_1_w_lshift_rg_s;
  assign nl_INNER_LOOP_1_w_lshift_rg_s = MUX_v_4_2_2(z_out, OUTER_LOOP_acc_2_itm,
      OUTER_LOOP_m_or_1_itm);
  wire [0:0] nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro;
  assign nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro = ~ mux_50_itm;
  wire [0:0] nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro;
  assign nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro = ~ mux_86_itm;
  wire [0:0] nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro;
  assign nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro = ~ mux_114_itm;
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0 = INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva[7];
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 = ~ OUTER_LOOP_acc_itm_2_1;
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_3_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(xt_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_2_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(xt_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_1_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(xt_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_0_0_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(xt_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) g_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(g_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_3_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_2_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_1_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_0_0_obj (
      .ld(reg_xt_rsc_triosy_0_3_obj_ld_cse),
      .lz(twiddle_rsc_triosy_0_0_lz)
    );
  modulo_dev  INNER_LOOP_1_modulo_dev_cmp (
      .base_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(INNER_LOOP_1_modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd128),
  .width_b(32'sd64),
  .signd(32'sd0)) INNER_LOOP_1_b_rem_cmp (
      .a(INNER_LOOP_1_b_rem_cmp_a),
      .b(reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse),
      .z(INNER_LOOP_1_b_rem_cmp_z)
    );
  mgc_shift_r_v5 #(.width_a(32'sd9),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd8)) INNER_LOOP_1_w_rshift_rg (
      .a(nl_INNER_LOOP_1_w_rshift_rg_a[8:0]),
      .s(OUTER_LOOP_acc_2_itm),
      .z(z_out_5)
    );
  mgc_shift_l_v5 #(.width_a(32'sd8),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) INNER_LOOP_1_w_lshift_rg (
      .a(nl_INNER_LOOP_1_w_lshift_rg_a[7:0]),
      .s(nl_INNER_LOOP_1_w_lshift_rg_s[3:0]),
      .z(z_out_6)
    );
  stockham_DIT_core_wait_dp stockham_DIT_core_wait_dp_inst (
      .yt_rsc_0_0_cgo_iro(nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro[0:0]),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_1_cgo_iro(nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro[0:0]),
      .yt_rsc_0_1_i_clken_d(yt_rsc_0_1_i_clken_d),
      .yt_rsc_0_2_cgo_iro(nl_stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro[0:0]),
      .yt_rsc_0_2_i_clken_d(yt_rsc_0_2_i_clken_d),
      .yt_rsc_0_3_cgo_iro(mux_142_rmff),
      .yt_rsc_0_3_i_clken_d(yt_rsc_0_3_i_clken_d),
      .ensig_cgo_iro(mux_172_rmff),
      .yt_rsc_0_0_cgo(reg_yt_rsc_0_0_cgo_cse),
      .yt_rsc_0_1_cgo(reg_yt_rsc_0_1_cgo_cse),
      .yt_rsc_0_2_cgo(reg_yt_rsc_0_2_cgo_cse),
      .yt_rsc_0_3_cgo(reg_yt_rsc_0_3_cgo_cse),
      .ensig_cgo(reg_ensig_cgo_cse),
      .INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en(INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en)
    );
  stockham_DIT_core_core_fsm stockham_DIT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .INNER_LOOP_C_147_tr0(nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0[0:0]),
      .OUTER_LOOP_C_1_tr0(nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0[0:0])
    );
  assign s_or_cse = and_dcpl_17 | and_dcpl_23;
  assign and_218_cse = (fsm_output[0]) & (fsm_output[2]);
  assign or_62_nl = s_1_sva | s_0_sva | (fsm_output[6]);
  assign mux_44_nl = MUX_s_1_2_2(or_62_nl, (fsm_output[6]), fsm_output[0]);
  assign mux_42_nl = MUX_s_1_2_2(or_tmp_53, (~ (fsm_output[6])), fsm_output[0]);
  assign mux_43_nl = MUX_s_1_2_2(mux_42_nl, or_tmp_53, reg_INNER_LOOP_upper_acc_ftd_7[1]);
  assign mux_45_nl = MUX_s_1_2_2(mux_44_nl, mux_43_nl, fsm_output[3]);
  assign nand_3_nl = ~((fsm_output[1]) & (~ mux_45_nl));
  assign or_58_nl = (fsm_output[0]) | (fsm_output[6]);
  assign or_57_nl = (INNER_LOOP_b_acc_1_psp_sva[0]) | s_0_sva | (~ (fsm_output[6]));
  assign or_55_nl = (reg_INNER_LOOP_upper_acc_ftd_7[1]) | (fsm_output[0]);
  assign mux_40_nl = MUX_s_1_2_2((~ (fsm_output[6])), or_57_nl, or_55_nl);
  assign mux_41_nl = MUX_s_1_2_2(or_58_nl, mux_40_nl, fsm_output[3]);
  assign or_59_nl = (fsm_output[1]) | mux_41_nl;
  assign mux_46_nl = MUX_s_1_2_2(nand_3_nl, or_59_nl, fsm_output[2]);
  assign mux_37_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp_29, fsm_output[3]);
  assign mux_38_nl = MUX_s_1_2_2(or_tmp_33, mux_37_nl, fsm_output[1]);
  assign nand_2_nl = ~((fsm_output[2]) & (~ mux_38_nl));
  assign or_54_nl = (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b00);
  assign mux_39_nl = MUX_s_1_2_2(nand_2_nl, nand_tmp_1, or_54_nl);
  assign mux_47_nl = MUX_s_1_2_2(mux_46_nl, mux_39_nl, fsm_output[5]);
  assign or_51_nl = (INNER_LOOP_acc_12_psp_sva[0]) | INNER_LOOP_1_mul_cse_sva_0 |
      (~ (fsm_output[6])) | x_1_sva | (~ x_3_sva);
  assign or_49_nl = (pref_y_idx_pref_9_0_sva[1:0]!=2'b00) | (~ (fsm_output[6]));
  assign mux_34_nl = MUX_s_1_2_2(or_51_nl, or_49_nl, fsm_output[0]);
  assign or_47_nl = (INNER_LOOP_a_acc_psp_sva[0]) | (reg_INNER_LOOP_upper_acc_ftd_7[0]);
  assign mux_35_nl = MUX_s_1_2_2((~ (fsm_output[6])), mux_34_nl, or_47_nl);
  assign or_52_nl = (fsm_output[3]) | mux_35_nl;
  assign or_46_nl = (fsm_output[3]) | (fsm_output[0]) | (pref_y_idx_pref_9_0_sva[1:0]!=2'b00)
      | (~ (fsm_output[6]));
  assign mux_36_nl = MUX_s_1_2_2(or_52_nl, or_46_nl, fsm_output[1]);
  assign or_53_nl = (~ (fsm_output[5])) | (fsm_output[2]) | mux_36_nl;
  assign mux_48_nl = MUX_s_1_2_2(mux_47_nl, or_53_nl, fsm_output[4]);
  assign or_43_nl = (fsm_output[3:1]!=3'b101) | (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b00)
      | (~ (fsm_output[6])) | x_1_sva | (~ x_3_sva);
  assign mux_32_nl = MUX_s_1_2_2(or_43_nl, nand_tmp_1, fsm_output[5]);
  assign or_35_nl = (~ (fsm_output[5])) | (fsm_output[2]) | (fsm_output[1]) | (fsm_output[3])
      | (fsm_output[0]) | (INNER_LOOP_acc_12_psp_sva[0]) | INNER_LOOP_1_mul_cse_sva_0
      | (~ (fsm_output[6])) | x_1_sva | (~ x_3_sva);
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, or_35_nl, fsm_output[4]);
  assign mux_49_nl = MUX_s_1_2_2(mux_48_nl, mux_33_nl, or_tmp_25);
  assign or_32_nl = (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b00) | (fsm_output[6:1]!=6'b001010)
      | x_1_sva | (~ x_3_sva);
  assign mux_50_itm = MUX_s_1_2_2(mux_49_nl, or_32_nl, fsm_output[7]);
  assign or_112_nl = (INNER_LOOP_b_acc_1_psp_sva[0]) | (~ s_0_sva) | (fsm_output[6:5]!=2'b10);
  assign mux_81_nl = MUX_s_1_2_2(or_tmp_100, or_112_nl, fsm_output[2]);
  assign nand_9_nl = ~((fsm_output[3]) & (~ mux_81_nl));
  assign mux_82_nl = MUX_s_1_2_2(nand_9_nl, mux_tmp_62, fsm_output[0]);
  assign or_111_nl = (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b01) | (fsm_output[6:5]!=2'b01)
      | x_1_sva | (~ x_3_sva);
  assign mux_77_nl = MUX_s_1_2_2(or_111_nl, or_tmp_98, nor_21_cse);
  assign mux_78_nl = MUX_s_1_2_2(or_tmp_101, mux_77_nl, fsm_output[2]);
  assign mux_79_nl = MUX_s_1_2_2(mux_78_nl, or_tmp_82, fsm_output[3]);
  assign mux_74_nl = MUX_s_1_2_2(or_tmp_100, or_tmp_98, nor_21_cse);
  assign mux_75_nl = MUX_s_1_2_2(or_tmp_101, mux_74_nl, fsm_output[2]);
  assign or_105_nl = (fsm_output[6:5]!=2'b10);
  assign nor_19_nl = ~((INNER_LOOP_b_acc_1_psp_sva[0]) | (~ s_0_sva));
  assign mux_72_nl = MUX_s_1_2_2(or_tmp_80, or_105_nl, nor_19_nl);
  assign mux_73_nl = MUX_s_1_2_2(mux_72_nl, or_tmp_78, fsm_output[2]);
  assign mux_76_nl = MUX_s_1_2_2(mux_75_nl, mux_73_nl, fsm_output[3]);
  assign mux_80_nl = MUX_s_1_2_2(mux_79_nl, mux_76_nl, fsm_output[0]);
  assign mux_83_nl = MUX_s_1_2_2(mux_82_nl, mux_80_nl, fsm_output[1]);
  assign mux_68_nl = MUX_s_1_2_2(or_tmp_78, (~ nor_tmp_4), reg_INNER_LOOP_upper_acc_ftd_7[0]);
  assign or_104_nl = (fsm_output[3:2]!=2'b00) | mux_68_nl;
  assign nor_126_nl = ~((pref_y_idx_pref_9_0_sva[1:0]!=2'b01) | (~ nor_tmp_4));
  assign mux_67_nl = MUX_s_1_2_2(nor_126_nl, nor_tmp_4, reg_INNER_LOOP_upper_acc_ftd_7[0]);
  assign or_102_nl = (fsm_output[3:2]!=2'b00) | (~ mux_67_nl);
  assign mux_69_nl = MUX_s_1_2_2(or_104_nl, or_102_nl, fsm_output[0]);
  assign or_98_nl = (fsm_output[3]) | (fsm_output[2]) | (~ (fsm_output[6])) | (INNER_LOOP_acc_12_psp_sva[0])
      | (~ INNER_LOOP_1_mul_cse_sva_0) | (~ (fsm_output[5])) | x_1_sva | (~ x_3_sva);
  assign or_96_nl = (fsm_output[3:2]!=2'b00) | (pref_y_idx_pref_9_0_sva[1:0]!=2'b01)
      | (~ nor_tmp_4);
  assign mux_66_nl = MUX_s_1_2_2(or_98_nl, or_96_nl, fsm_output[0]);
  assign mux_70_nl = MUX_s_1_2_2(mux_69_nl, mux_66_nl, INNER_LOOP_a_acc_psp_sva[0]);
  assign or_94_nl = (fsm_output[0]) | (fsm_output[3]) | (fsm_output[2]) | (pref_y_idx_pref_9_0_sva[1:0]!=2'b01)
      | (~ nor_tmp_4);
  assign mux_71_nl = MUX_s_1_2_2(mux_70_nl, or_94_nl, fsm_output[1]);
  assign mux_84_nl = MUX_s_1_2_2(mux_83_nl, mux_71_nl, fsm_output[4]);
  assign nand_8_nl = ~((fsm_output[0]) & (~ mux_tmp_62));
  assign mux_61_nl = MUX_s_1_2_2(or_tmp_80, or_tmp_78, fsm_output[2]);
  assign nand_7_nl = ~((fsm_output[3]) & (~ mux_61_nl));
  assign mux_63_nl = MUX_s_1_2_2(mux_tmp_62, nand_7_nl, fsm_output[0]);
  assign mux_64_nl = MUX_s_1_2_2(nand_8_nl, mux_63_nl, fsm_output[1]);
  assign or_84_nl = (fsm_output[1]) | (fsm_output[0]) | (fsm_output[3]) | (fsm_output[2])
      | (~ (fsm_output[6])) | (INNER_LOOP_acc_12_psp_sva[0]) | (~ INNER_LOOP_1_mul_cse_sva_0)
      | (~ (fsm_output[5])) | x_1_sva | (~ x_3_sva);
  assign mux_65_nl = MUX_s_1_2_2(mux_64_nl, or_84_nl, fsm_output[4]);
  assign mux_85_nl = MUX_s_1_2_2(mux_84_nl, mux_65_nl, or_tmp_25);
  assign or_81_nl = (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b01) | (fsm_output[6:1]!=6'b001010)
      | x_1_sva | (~ x_3_sva);
  assign mux_86_itm = MUX_s_1_2_2(mux_85_nl, or_81_nl, fsm_output[7]);
  assign or_167_nl = (~ s_1_sva) | (~ (fsm_output[1])) | s_0_sva | (~ y_3_sva) |
      y_1_sva | (fsm_output[6]);
  assign nor_144_nl = ~((pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b10) | (~ (fsm_output[6]))
      | x_1_sva | (~ x_3_sva));
  assign nand_39_nl = ~((reg_INNER_LOOP_upper_acc_ftd_7[1]) & (fsm_output[0]) & y_3_sva
      & (~ y_1_sva));
  assign mux_109_nl = MUX_s_1_2_2((fsm_output[6]), nor_144_nl, nand_39_nl);
  assign nand_12_nl = ~((fsm_output[1]) & mux_109_nl);
  assign mux_110_nl = MUX_s_1_2_2(or_167_nl, nand_12_nl, fsm_output[3]);
  assign or_162_nl = (~ (reg_INNER_LOOP_upper_acc_ftd_7[1])) | (fsm_output[0]) |
      (~ y_3_sva) | y_1_sva | (~ (fsm_output[6]));
  assign or_160_nl = (~ (INNER_LOOP_b_acc_1_psp_sva[0])) | s_0_sva;
  assign mux_108_nl = MUX_s_1_2_2(or_tmp_137, or_162_nl, or_160_nl);
  assign or_163_nl = (~ (fsm_output[3])) | (fsm_output[1]) | mux_108_nl;
  assign mux_111_nl = MUX_s_1_2_2(mux_110_nl, or_163_nl, fsm_output[2]);
  assign or_158_nl = (~ (fsm_output[3])) | (fsm_output[1]) | (fsm_output[0]) | (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b10)
      | (~ y_3_sva) | y_1_sva | (fsm_output[6]);
  assign or_157_nl = (~ (fsm_output[0])) | (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b10)
      | (fsm_output[6]) | x_1_sva | (~ x_3_sva);
  assign mux_102_nl = MUX_s_1_2_2((fsm_output[6]), or_tmp_145, or_tmp_25);
  assign or_154_nl = (~ y_3_sva) | y_1_sva | (fsm_output[6]);
  assign mux_103_nl = MUX_s_1_2_2(mux_102_nl, or_154_nl, fsm_output[0]);
  assign or_151_nl = (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b10) | (~ y_3_sva) | y_1_sva
      | (fsm_output[6]);
  assign mux_101_nl = MUX_s_1_2_2(or_tmp_145, or_151_nl, fsm_output[0]);
  assign or_150_nl = (~ INNER_LOOP_a_conc_12_itm_1) | (reg_INNER_LOOP_upper_acc_ftd_7[0]);
  assign mux_104_nl = MUX_s_1_2_2(mux_103_nl, mux_101_nl, or_150_nl);
  assign mux_105_nl = MUX_s_1_2_2(or_157_nl, mux_104_nl, fsm_output[1]);
  assign nand_40_nl = ~((fsm_output[1]) & (fsm_output[6]) & (~ x_1_sva) & x_3_sva);
  assign mux_106_nl = MUX_s_1_2_2(mux_105_nl, nand_40_nl, fsm_output[3]);
  assign mux_107_nl = MUX_s_1_2_2(or_158_nl, mux_106_nl, fsm_output[2]);
  assign mux_112_nl = MUX_s_1_2_2(mux_111_nl, mux_107_nl, fsm_output[5]);
  assign mux_97_nl = MUX_s_1_2_2((~ (fsm_output[6])), or_tmp_135, or_tmp_25);
  assign mux_98_nl = MUX_s_1_2_2(mux_97_nl, or_tmp_137, fsm_output[0]);
  assign or_141_nl = (~ y_3_sva) | y_1_sva | (pref_y_idx_pref_9_0_sva[0]) | not_tmp_67;
  assign mux_96_nl = MUX_s_1_2_2(or_tmp_135, or_141_nl, fsm_output[0]);
  assign or_139_nl = (~ (INNER_LOOP_a_acc_psp_sva[0])) | (reg_INNER_LOOP_upper_acc_ftd_7[0]);
  assign mux_99_nl = MUX_s_1_2_2(mux_98_nl, mux_96_nl, or_139_nl);
  assign or_138_nl = (fsm_output[0]) | (~ y_3_sva) | y_1_sva | (pref_y_idx_pref_9_0_sva[0])
      | not_tmp_67;
  assign mux_100_nl = MUX_s_1_2_2(mux_99_nl, or_138_nl, fsm_output[1]);
  assign or_147_nl = (~ (fsm_output[5])) | (fsm_output[2]) | (fsm_output[3]) | mux_100_nl;
  assign mux_113_nl = MUX_s_1_2_2(mux_112_nl, or_147_nl, fsm_output[4]);
  assign or_135_nl = (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b10) | (fsm_output[6:1]!=6'b001010)
      | x_1_sva | (~ x_3_sva);
  assign mux_114_itm = MUX_s_1_2_2(mux_113_nl, or_135_nl, fsm_output[7]);
  assign nor_99_nl = ~((~ (fsm_output[1])) | (~ s_1_sva) | (~ s_0_sva) | (fsm_output[6:5]!=2'b00)
      | y_1_sva | (~ y_3_sva) | (fsm_output[7]));
  assign nor_100_nl = ~((~ (fsm_output[0])) | (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b11)
      | x_1_sva | (~ x_3_sva) | (fsm_output[7:5]!=3'b001));
  assign nor_101_nl = ~((pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b11) | x_1_sva | (~
      x_3_sva) | (fsm_output[7:5]!=3'b001));
  assign nor_102_nl = ~((fsm_output[6:5]!=2'b01) | y_1_sva | (~ y_3_sva) | (fsm_output[7]));
  assign nor_103_nl = ~((fsm_output[7:5]!=3'b001));
  assign and_194_nl = (pref_x_idx_pref_1_9_0_1_sva[1:0]==2'b11) & (~ x_1_sva) & x_3_sva;
  assign mux_136_nl = MUX_s_1_2_2(nor_102_nl, nor_103_nl, and_194_nl);
  assign and_195_nl = (pref_y_idx_pref_9_0_2_sva[1:0]==2'b11);
  assign mux_137_nl = MUX_s_1_2_2(nor_101_nl, mux_136_nl, and_195_nl);
  assign nor_104_nl = ~((pref_y_idx_pref_9_0_2_sva[1:0]!=2'b11) | (fsm_output[6:5]!=2'b01)
      | y_1_sva | (~ y_3_sva) | (fsm_output[7]));
  assign mux_138_nl = MUX_s_1_2_2(mux_137_nl, nor_104_nl, fsm_output[0]);
  assign mux_139_nl = MUX_s_1_2_2(nor_100_nl, mux_138_nl, fsm_output[1]);
  assign mux_140_nl = MUX_s_1_2_2(nor_99_nl, mux_139_nl, fsm_output[2]);
  assign nor_105_nl = ~((pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b11) | x_1_sva | (~
      x_3_sva) | (fsm_output[7:5]!=3'b010));
  assign nor_106_nl = ~((~ s_0_sva) | (~ (INNER_LOOP_b_acc_1_psp_sva[0])) | (fsm_output[6:5]!=2'b10)
      | y_1_sva | (~ y_3_sva) | (fsm_output[7]));
  assign nor_107_nl = ~((fsm_output[7:5]!=3'b010));
  assign and_197_nl = (pref_x_idx_pref_1_9_0_2_sva[1:0]==2'b11) & (~ x_1_sva) & x_3_sva;
  assign mux_133_nl = MUX_s_1_2_2(nor_106_nl, nor_107_nl, and_197_nl);
  assign mux_134_nl = MUX_s_1_2_2(nor_105_nl, mux_133_nl, fsm_output[0]);
  assign and_196_nl = (fsm_output[1]) & mux_134_nl;
  assign nor_108_nl = ~((fsm_output[0]) | (~ s_0_sva) | (~ (INNER_LOOP_b_acc_1_psp_sva[0]))
      | (fsm_output[6:5]!=2'b10) | y_1_sva | (~ y_3_sva) | (fsm_output[7]));
  assign and_198_nl = (fsm_output[0]) & (~ x_1_sva) & x_3_sva & INNER_LOOP_1_mul_cse_sva_0
      & (INNER_LOOP_acc_12_psp_sva[0]) & (fsm_output[7:5]==3'b011);
  assign mux_132_nl = MUX_s_1_2_2(nor_108_nl, and_198_nl, fsm_output[1]);
  assign mux_135_nl = MUX_s_1_2_2(and_196_nl, mux_132_nl, fsm_output[2]);
  assign mux_141_nl = MUX_s_1_2_2(mux_140_nl, mux_135_nl, fsm_output[3]);
  assign nand_34_nl = ~((reg_INNER_LOOP_upper_acc_ftd_7[0]) & (INNER_LOOP_a_acc_psp_sva[0])
      & (fsm_output[6:5]==2'b11) & (~ y_1_sva) & y_3_sva & (~ (fsm_output[7])));
  assign or_192_nl = (fsm_output[7:5]!=3'b011);
  assign and_199_nl = (~ x_1_sva) & x_3_sva & INNER_LOOP_1_mul_cse_sva_0 & (INNER_LOOP_acc_12_psp_sva[0]);
  assign mux_128_nl = MUX_s_1_2_2(nand_34_nl, or_192_nl, and_199_nl);
  assign or_191_nl = (fsm_output[6:5]!=2'b11) | y_1_sva | (~ y_3_sva) | (fsm_output[7]);
  assign and_200_nl = (reg_INNER_LOOP_upper_acc_ftd_7[0]) & (INNER_LOOP_a_acc_psp_sva[0]);
  assign mux_127_nl = MUX_s_1_2_2(or_tmp_182, or_191_nl, and_200_nl);
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, mux_127_nl, fsm_output[0]);
  assign mux_126_nl = MUX_s_1_2_2(or_tmp_182, or_tmp_180, fsm_output[0]);
  assign mux_130_nl = MUX_s_1_2_2(mux_129_nl, mux_126_nl, fsm_output[1]);
  assign or_186_nl = (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b11) | x_1_sva | (~ x_3_sva)
      | (fsm_output[7:5]!=3'b100);
  assign mux_125_nl = MUX_s_1_2_2(or_tmp_180, or_186_nl, fsm_output[0]);
  assign or_189_nl = (fsm_output[1]) | mux_125_nl;
  assign mux_131_nl = MUX_s_1_2_2(mux_130_nl, or_189_nl, fsm_output[2]);
  assign nor_109_nl = ~((fsm_output[3]) | mux_131_nl);
  assign mux_142_rmff = MUX_s_1_2_2(mux_141_nl, nor_109_nl, fsm_output[4]);
  assign and_222_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[6]));
  assign mux_169_nl = MUX_s_1_2_2((fsm_output[6]), and_222_nl, fsm_output[4]);
  assign or_251_nl = (fsm_output[2]) | (fsm_output[1]) | (~ (fsm_output[6]));
  assign mux_168_nl = MUX_s_1_2_2(or_251_nl, (fsm_output[6]), fsm_output[4]);
  assign mux_170_nl = MUX_s_1_2_2(mux_169_nl, (~ mux_168_nl), fsm_output[3]);
  assign nor_78_nl = ~((fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[6])));
  assign nor_79_nl = ~(nor_80_cse | (fsm_output[6]));
  assign mux_166_nl = MUX_s_1_2_2(nor_78_nl, nor_79_nl, fsm_output[2]);
  assign nor_151_nl = ~((fsm_output[4]) | mux_166_nl);
  assign and_223_nl = nand_26_cse & (fsm_output[6]);
  assign nor_152_nl = ~((~ (fsm_output[2])) | (fsm_output[6]));
  assign mux_165_nl = MUX_s_1_2_2(and_223_nl, nor_152_nl, fsm_output[4]);
  assign mux_167_nl = MUX_s_1_2_2(nor_151_nl, mux_165_nl, fsm_output[3]);
  assign mux_171_nl = MUX_s_1_2_2(mux_170_nl, mux_167_nl, fsm_output[5]);
  assign or_241_nl = (~ (fsm_output[2])) | (~ (fsm_output[1])) | (fsm_output[6]);
  assign or_240_nl = (fsm_output[2]) | (fsm_output[6]);
  assign mux_163_nl = MUX_s_1_2_2(or_241_nl, or_240_nl, fsm_output[4]);
  assign or_239_nl = (fsm_output[4]) | (fsm_output[6]);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, or_239_nl, fsm_output[3]);
  assign nor_153_nl = ~((fsm_output[5]) | mux_164_nl);
  assign mux_172_rmff = MUX_s_1_2_2(mux_171_nl, nor_153_nl, fsm_output[7]);
  assign nand_26_cse = ~((fsm_output[2:0]==3'b111));
  assign nor_69_cse = ~((fsm_output[2:1]!=2'b01));
  assign and_184_cse = (fsm_output[1:0]==2'b11);
  assign and_185_cse = (fsm_output[2:1]==2'b11);
  assign or_332_cse = (fsm_output[2:0]!=3'b000);
  assign or_333_cse = and_184_cse | (fsm_output[2]);
  assign nor_155_cse = ~((fsm_output[3:2]!=2'b00));
  assign and_125_rgt = and_dcpl_121 & (~ (fsm_output[1])) & (fsm_output[4]) & (fsm_output[7])
      & (INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva[7]);
  assign or_364_cse = (fsm_output[3]) | (fsm_output[6]);
  assign drf_y_smx_lpi_3_dfm_4 = MUX1HOT_v_64_3_2(xt_rsc_0_3_i_q_d, yt_rsc_0_3_i_q_d,
      drf_y_smx_lpi_3_dfm, {INNER_LOOP_b_INNER_LOOP_b_and_2_cse , INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      , INNER_LOOP_b_nor_itm});
  assign nl_INNER_LOOP_b_acc_10_nl = ({INNER_LOOP_1_upper_and_psp_sva_mx0w0 , 1'b0})
      + conv_u2s_7_8(INNER_LOOP_1_q_and_psp_sva_1);
  assign INNER_LOOP_b_acc_10_nl = nl_INNER_LOOP_b_acc_10_nl[7:0];
  assign nl_INNER_LOOP_b_acc_itm = INNER_LOOP_b_acc_10_nl + ({s_9_sva , s_8_sva ,
      s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva});
  assign INNER_LOOP_b_acc_itm = nl_INNER_LOOP_b_acc_itm[7:0];
  assign nor_21_cse = ~(INNER_LOOP_a_conc_12_itm_1 | (~ (reg_INNER_LOOP_upper_acc_ftd_7[0])));
  assign nor_80_cse = ~((fsm_output[1:0]!=2'b00));
  assign INNER_LOOP_1_q_and_psp_sva_1 = (z_out_1[8:2]) & INNER_LOOP_1_q_and_psp_sva;
  assign nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1 = conv_u2u_7_8(INNER_LOOP_1_q_and_psp_sva_1)
      + conv_u2u_7_8(INNER_LOOP_1_upper_and_psp_sva_mx0w0);
  assign INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1 = nl_INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1[7:0];
  assign nl_INNER_LOOP_a_acc_psp_sva_mx0w0 = conv_u2u_8_9({INNER_LOOP_1_q_and_psp_sva_1
      , (z_out_1[1])}) + ({INNER_LOOP_1_upper_and_psp_sva_mx0w0 , (~ (z_out_1[1:0]))});
  assign INNER_LOOP_a_acc_psp_sva_mx0w0 = nl_INNER_LOOP_a_acc_psp_sva_mx0w0[8:0];
  assign INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0 = y_1_sva & (~ y_3_sva);
  assign INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0 = y_3_sva & (~ y_1_sva);
  assign INNER_LOOP_1_upper_and_psp_sva_mx0w0 = (~ (z_out_1[8:2])) & INNER_LOOP_1_q_and_psp_sva;
  assign INNER_LOOP_b_and_nl = INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_4_nl = s_0_sva & (~ s_1_sva) & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_5_nl = s_1_sva & (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_6_nl = s_1_sva & s_0_sva & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_and_1_nl = INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_7_nl = s_0_sva & (~ s_1_sva) & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_8_nl = s_1_sva & (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_9_nl = s_1_sva & s_0_sva & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign drf_y_smx_lpi_3_dfm_5 = MUX1HOT_v_64_9_2(xt_rsc_0_0_i_q_d, xt_rsc_0_1_i_q_d,
      xt_rsc_0_2_i_q_d, xt_rsc_0_3_i_q_d, yt_rsc_0_0_i_q_d, yt_rsc_0_1_i_q_d, yt_rsc_0_2_i_q_d,
      yt_rsc_0_3_i_q_d, drf_y_smx_lpi_2, {INNER_LOOP_b_and_nl , INNER_LOOP_b_INNER_LOOP_b_and_4_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_5_nl , INNER_LOOP_b_INNER_LOOP_b_and_6_nl ,
      INNER_LOOP_b_and_1_nl , INNER_LOOP_b_INNER_LOOP_b_and_7_nl , INNER_LOOP_b_INNER_LOOP_b_and_8_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_9_nl , INNER_LOOP_b_nor_itm});
  assign INNER_LOOP_b_INNER_LOOP_b_and_14_nl = (pref_y_idx_pref_9_0_2_sva[1:0]==2'b01)
      & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_16_nl = (pref_y_idx_pref_9_0_2_sva[1:0]==2'b11)
      & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_17_nl = (pref_y_idx_pref_9_0_2_sva[1:0]==2'b01)
      & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_19_nl = (pref_y_idx_pref_9_0_2_sva[1:0]==2'b11)
      & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign drf_y_smx_lpi_3_dfm_6 = MUX1HOT_v_64_5_2(xt_rsc_0_1_i_q_d, drf_y_smx_lpi_2,
      yt_rsc_0_1_i_q_d, tmp_3_sva_3, drf_y_smx_lpi_3_dfm, {INNER_LOOP_b_INNER_LOOP_b_and_14_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_16_nl , INNER_LOOP_b_INNER_LOOP_b_and_17_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_19_nl , INNER_LOOP_b_nor_itm});
  assign INNER_LOOP_b_INNER_LOOP_b_and_24_nl = s_0_sva & (~ (INNER_LOOP_b_acc_1_psp_sva[0]))
      & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_25_nl = (INNER_LOOP_b_acc_1_psp_sva[0]) &
      (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_27_nl = s_0_sva & (~ (INNER_LOOP_b_acc_1_psp_sva[0]))
      & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_b_INNER_LOOP_b_and_28_nl = (INNER_LOOP_b_acc_1_psp_sva[0]) &
      (~ s_0_sva) & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign drf_y_smx_lpi_3_dfm_7 = MUX1HOT_v_64_5_2(drf_y_smx_lpi_2, xt_rsc_0_2_i_q_d,
      tmp_3_sva_3, yt_rsc_0_2_i_q_d, drf_y_smx_lpi_3_dfm, {INNER_LOOP_b_INNER_LOOP_b_and_24_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_25_nl , INNER_LOOP_b_INNER_LOOP_b_and_27_nl
      , INNER_LOOP_b_INNER_LOOP_b_and_28_nl , INNER_LOOP_b_nor_itm});
  assign INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 = ~(s_1_sva | s_0_sva);
  assign nor_tmp_4 = (fsm_output[6:5]==2'b11);
  assign or_tmp_7 = (fsm_output[6:5]!=2'b00);
  assign and_dcpl_11 = ~((fsm_output[4]) | (fsm_output[7]));
  assign and_dcpl_13 = nor_80_cse & and_dcpl_11;
  assign and_dcpl_14 = ~((fsm_output[5]) | (fsm_output[2]));
  assign and_dcpl_15 = ~((fsm_output[6]) | (fsm_output[3]));
  assign and_dcpl_16 = and_dcpl_15 & and_dcpl_14;
  assign and_dcpl_17 = and_dcpl_16 & and_dcpl_13;
  assign and_dcpl_18 = (fsm_output[4]) & (fsm_output[7]);
  assign and_dcpl_19 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_21 = (~ (fsm_output[5])) & (fsm_output[2]);
  assign and_dcpl_22 = and_dcpl_15 & and_dcpl_21;
  assign and_dcpl_23 = and_dcpl_22 & and_dcpl_19 & and_dcpl_18;
  assign or_20_nl = ((fsm_output[2:0]==3'b111)) | (fsm_output[5]) | (fsm_output[3])
      | (fsm_output[6]);
  assign mux_tmp_20 = MUX_s_1_2_2(or_tmp_7, or_20_nl, fsm_output[4]);
  assign nor_139_nl = ~((fsm_output[6:0]!=7'b0000000));
  assign mux_tmp_21 = MUX_s_1_2_2(nor_139_nl, mux_tmp_20, fsm_output[7]);
  assign nor_tmp_12 = (fsm_output[5]) & (fsm_output[3]) & (fsm_output[6]);
  assign mux_tmp_24 = MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_333_cse);
  assign or_tmp_18 = (~ (fsm_output[0])) | (fsm_output[2]) | (fsm_output[5]) | (fsm_output[3])
      | (fsm_output[6]);
  assign or_tmp_19 = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[3]))
      | (fsm_output[6]);
  assign and_dcpl_26 = and_184_cse & and_dcpl_11;
  assign and_dcpl_27 = (fsm_output[5]) & (fsm_output[2]);
  assign and_dcpl_28 = and_dcpl_15 & and_dcpl_27;
  assign and_dcpl_29 = and_dcpl_28 & and_dcpl_26;
  assign and_dcpl_30 = (fsm_output[6]) & (fsm_output[3]);
  assign and_dcpl_31 = and_dcpl_30 & and_dcpl_21;
  assign and_dcpl_32 = and_dcpl_31 & and_dcpl_13;
  assign and_dcpl_33 = (fsm_output[4]) & (~ (fsm_output[7]));
  assign and_dcpl_35 = (fsm_output[5]) & (~ (fsm_output[2]));
  assign and_dcpl_36 = (fsm_output[6]) & (~ (fsm_output[3]));
  assign and_dcpl_37 = and_dcpl_36 & and_dcpl_35;
  assign and_dcpl_38 = and_dcpl_37 & and_dcpl_19 & and_dcpl_33;
  assign or_tmp_25 = (~ y_3_sva) | y_1_sva;
  assign or_tmp_29 = (~ (fsm_output[0])) | (INNER_LOOP_acc_12_psp_sva[0]) | INNER_LOOP_1_mul_cse_sva_0
      | (~ (fsm_output[6])) | x_1_sva | (~ x_3_sva);
  assign or_tmp_33 = (fsm_output[3]) | (fsm_output[6]) | x_1_sva | (~ x_3_sva);
  assign or_39_nl = (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b00) | (fsm_output[0]) |
      (fsm_output[6]) | x_1_sva | (~ x_3_sva);
  assign mux_30_nl = MUX_s_1_2_2(or_39_nl, or_tmp_29, fsm_output[3]);
  assign mux_31_nl = MUX_s_1_2_2(or_tmp_33, mux_30_nl, fsm_output[1]);
  assign nand_tmp_1 = ~((fsm_output[2]) & (~ mux_31_nl));
  assign or_tmp_53 = (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b00) | (~ (fsm_output[6]))
      | x_1_sva | (~ x_3_sva);
  assign and_dcpl_39 = and_dcpl_19 & and_dcpl_11;
  assign and_dcpl_40 = and_dcpl_16 & and_dcpl_39;
  assign and_dcpl_41 = and_dcpl_16 & and_dcpl_26;
  assign and_dcpl_42 = and_dcpl_28 & and_dcpl_39;
  assign and_dcpl_43 = and_dcpl_30 & and_dcpl_14;
  assign and_dcpl_44 = and_dcpl_43 & and_dcpl_26;
  assign and_dcpl_46 = and_dcpl_37 & nor_80_cse & and_dcpl_33;
  assign and_dcpl_47 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_49 = and_dcpl_37 & and_dcpl_47 & and_dcpl_33;
  assign and_dcpl_51 = and_dcpl_47 & and_dcpl_11;
  assign and_dcpl_52 = and_dcpl_28 & and_dcpl_51;
  assign and_dcpl_53 = and_dcpl_43 & and_dcpl_39;
  assign and_dcpl_54 = and_dcpl_30 & and_dcpl_27;
  assign and_dcpl_55 = and_dcpl_54 & and_dcpl_26;
  assign and_dcpl_57 = and_dcpl_22 & nor_80_cse & and_dcpl_18;
  assign and_dcpl_58 = x_3_sva & (~ x_1_sva);
  assign nor_14_cse = ~((fsm_output[3]) | (fsm_output[6]) | (~ (fsm_output[2])));
  assign nor_132_nl = ~((pref_x_idx_pref_1_9_0_sva[1:0]!=2'b00) | (~((fsm_output[4])
      & (fsm_output[7]))));
  assign mux_52_nl = MUX_s_1_2_2(nor_132_nl, and_dcpl_11, fsm_output[5]);
  assign nor_134_nl = ~((pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b00) | (~ (fsm_output[5]))
      | (fsm_output[4]) | (fsm_output[7]));
  assign mux_53_nl = MUX_s_1_2_2(mux_52_nl, nor_134_nl, fsm_output[0]);
  assign and_207_nl = nor_14_cse & mux_53_nl;
  assign nor_135_nl = ~((fsm_output[0]) | (fsm_output[5]) | (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b00)
      | (fsm_output[4]) | (fsm_output[7]));
  assign nor_136_nl = ~((~ (fsm_output[0])) | INNER_LOOP_1_mul_cse_sva_0 | (INNER_LOOP_acc_12_psp_sva[0])
      | (~ (fsm_output[5])) | (fsm_output[4]) | (fsm_output[7]));
  assign mux_51_nl = MUX_s_1_2_2(nor_135_nl, nor_136_nl, fsm_output[2]);
  assign and_208_nl = (fsm_output[3]) & (fsm_output[6]) & mux_51_nl;
  assign not_tmp_43 = MUX_s_1_2_2(and_207_nl, and_208_nl, fsm_output[1]);
  assign and_dcpl_61 = (~ y_1_sva) & y_3_sva & (~ (fsm_output[7]));
  assign not_tmp_45 = ~((fsm_output[6]) & (fsm_output[4]));
  assign nor_127_nl = ~(s_1_sva | s_0_sva | (fsm_output[6]) | (fsm_output[4]));
  assign nor_128_nl = ~((fsm_output[6]) | (fsm_output[4]));
  assign mux_58_nl = MUX_s_1_2_2(nor_127_nl, nor_128_nl, fsm_output[0]);
  assign and_206_nl = nor_69_cse & mux_58_nl;
  assign nor_129_nl = ~((fsm_output[1:0]!=2'b11) | (reg_INNER_LOOP_upper_acc_ftd_7[1])
      | (~ (fsm_output[6])) | (fsm_output[4]));
  assign nor_130_nl = ~((fsm_output[1:0]!=2'b00) | s_0_sva | (INNER_LOOP_b_acc_1_psp_sva[0])
      | (~ (fsm_output[6])) | (fsm_output[4]));
  assign mux_57_nl = MUX_s_1_2_2(nor_129_nl, nor_130_nl, fsm_output[2]);
  assign mux_59_nl = MUX_s_1_2_2(and_206_nl, mux_57_nl, fsm_output[3]);
  assign or_73_nl = (reg_INNER_LOOP_upper_acc_ftd_7[0]) | (INNER_LOOP_a_acc_psp_sva[0])
      | not_tmp_45;
  assign or_71_nl = (pref_y_idx_pref_9_0_sva[1:0]!=2'b00) | not_tmp_45;
  assign mux_55_nl = MUX_s_1_2_2(or_73_nl, or_71_nl, fsm_output[0]);
  assign or_74_nl = (fsm_output[1]) | mux_55_nl;
  assign or_69_nl = (fsm_output[1:0]!=2'b10) | (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b00)
      | (fsm_output[6]) | (fsm_output[4]);
  assign mux_56_nl = MUX_s_1_2_2(or_74_nl, or_69_nl, fsm_output[2]);
  assign nor_131_nl = ~((fsm_output[3]) | mux_56_nl);
  assign not_tmp_47 = MUX_s_1_2_2(mux_59_nl, nor_131_nl, fsm_output[5]);
  assign or_tmp_78 = (~ (fsm_output[6])) | (INNER_LOOP_acc_12_psp_sva[0]) | (~ INNER_LOOP_1_mul_cse_sva_0)
      | (~ (fsm_output[5])) | x_1_sva | (~ x_3_sva);
  assign or_tmp_80 = (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b01) | (fsm_output[6:5]!=2'b10)
      | x_1_sva | (~ x_3_sva);
  assign or_tmp_82 = (fsm_output[2]) | (~ (fsm_output[6])) | (fsm_output[5]) | x_1_sva
      | (~ x_3_sva);
  assign or_92_nl = (~ (fsm_output[2])) | (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b01)
      | (fsm_output[6:5]!=2'b01) | x_1_sva | (~ x_3_sva);
  assign mux_tmp_62 = MUX_s_1_2_2(or_92_nl, or_tmp_82, fsm_output[3]);
  assign or_tmp_98 = (fsm_output[6:5]!=2'b01);
  assign or_tmp_100 = (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b01) | (fsm_output[6:5]!=2'b01);
  assign or_tmp_101 = s_1_sva | (~ s_0_sva) | (fsm_output[6:5]!=2'b00);
  assign nor_175_nl = ~((fsm_output[5]) | (~ and_dcpl_30));
  assign nor_176_nl = ~((pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b01) | (~ (fsm_output[5]))
      | (fsm_output[3]) | (fsm_output[6]));
  assign mux_88_nl = MUX_s_1_2_2(nor_175_nl, nor_176_nl, fsm_output[2]);
  assign nand_10_nl = ~((fsm_output[0]) & mux_88_nl);
  assign or_117_nl = (fsm_output[2]) | (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b01)
      | (fsm_output[5]) | (~ and_dcpl_30);
  assign or_115_nl = (~ (fsm_output[2])) | (INNER_LOOP_acc_12_psp_sva[0]) | (~(INNER_LOOP_1_mul_cse_sva_0
      & (fsm_output[5]) & (fsm_output[3]) & (fsm_output[6])));
  assign mux_87_nl = MUX_s_1_2_2(or_117_nl, or_115_nl, fsm_output[0]);
  assign mux_89_nl = MUX_s_1_2_2(nand_10_nl, mux_87_nl, fsm_output[1]);
  assign nor_124_nl = ~((fsm_output[4]) | mux_89_nl);
  assign nor_125_nl = ~((~ (fsm_output[4])) | (fsm_output[1]) | (fsm_output[0]) |
      (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b01) | (~ (fsm_output[2])) | (fsm_output[5])
      | (fsm_output[3]) | (fsm_output[6]));
  assign not_tmp_62 = MUX_s_1_2_2(nor_124_nl, nor_125_nl, fsm_output[7]);
  assign or_132_nl = (~ (reg_INNER_LOOP_upper_acc_ftd_7[0])) | (INNER_LOOP_a_acc_psp_sva[0])
      | (fsm_output[3]) | (~ (fsm_output[6]));
  assign or_130_nl = (pref_y_idx_pref_9_0_sva[1:0]!=2'b01) | (fsm_output[3]) | (~
      (fsm_output[6]));
  assign mux_94_nl = MUX_s_1_2_2(or_132_nl, or_130_nl, fsm_output[0]);
  assign nor_120_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[5])) | (fsm_output[2])
      | mux_94_nl);
  assign or_125_nl = s_1_sva | (~ s_0_sva) | (fsm_output[3]) | (fsm_output[6]);
  assign nand_49_nl = ~(s_0_sva & (fsm_output[3]) & (~ (INNER_LOOP_b_acc_1_psp_sva[0]))
      & (fsm_output[6]));
  assign mux_92_nl = MUX_s_1_2_2(or_125_nl, nand_49_nl, fsm_output[0]);
  assign or_126_nl = (fsm_output[2]) | mux_92_nl;
  assign nor_122_nl = ~(INNER_LOOP_a_conc_12_itm_1 | (~ (reg_INNER_LOOP_upper_acc_ftd_7[0]))
      | (fsm_output[3]) | (fsm_output[6]));
  assign nor_123_nl = ~((pref_y_idx_pref_9_0_2_sva[1:0]!=2'b01) | (fsm_output[3])
      | (fsm_output[6]));
  assign mux_91_nl = MUX_s_1_2_2(nor_122_nl, nor_123_nl, fsm_output[0]);
  assign nand_11_nl = ~((fsm_output[2]) & mux_91_nl);
  assign mux_93_nl = MUX_s_1_2_2(or_126_nl, nand_11_nl, fsm_output[5]);
  assign nor_121_nl = ~((fsm_output[4]) | mux_93_nl);
  assign not_tmp_65 = MUX_s_1_2_2(nor_120_nl, nor_121_nl, fsm_output[1]);
  assign not_tmp_67 = ~((pref_y_idx_pref_9_0_sva[1]) & (fsm_output[6]));
  assign or_tmp_135 = (~ (INNER_LOOP_acc_12_psp_sva[0])) | INNER_LOOP_1_mul_cse_sva_0
      | (~ (fsm_output[6])) | x_1_sva | (~ x_3_sva);
  assign or_tmp_137 = or_tmp_25 | (~ (fsm_output[6]));
  assign or_tmp_145 = (pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b10) | (fsm_output[6])
      | x_1_sva | (~ x_3_sva);
  assign nor_115_nl = ~((fsm_output[5]) | (pref_x_idx_pref_1_9_0_sva[0]) | (~((pref_x_idx_pref_1_9_0_sva[1])
      & (fsm_output[4]) & (fsm_output[7]))));
  assign nor_116_nl = ~((pref_x_idx_pref_1_9_0_1_sva[1:0]!=2'b10) | (~ (fsm_output[5]))
      | (fsm_output[4]) | (fsm_output[7]));
  assign mux_117_nl = MUX_s_1_2_2(nor_115_nl, nor_116_nl, fsm_output[0]);
  assign and_203_nl = nor_14_cse & mux_117_nl;
  assign nor_117_nl = ~((fsm_output[0]) | (fsm_output[5]) | (fsm_output[4]) | (fsm_output[7])
      | (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b10));
  assign nor_118_nl = ~((~ (fsm_output[5])) | (fsm_output[4]) | (fsm_output[7]));
  assign nor_119_nl = ~(INNER_LOOP_1_mul_cse_sva_0 | (~ (INNER_LOOP_acc_12_psp_sva[0]))
      | (~ (fsm_output[5])) | (fsm_output[4]) | (fsm_output[7]));
  assign mux_115_nl = MUX_s_1_2_2(nor_118_nl, nor_119_nl, fsm_output[0]);
  assign mux_116_nl = MUX_s_1_2_2(nor_117_nl, mux_115_nl, fsm_output[2]);
  assign and_204_nl = (fsm_output[3]) & (fsm_output[6]) & mux_116_nl;
  assign not_tmp_75 = MUX_s_1_2_2(and_203_nl, and_204_nl, fsm_output[1]);
  assign nor_111_nl = ~((~ s_1_sva) | s_0_sva | (fsm_output[6]) | (fsm_output[3]));
  assign and_201_nl = (reg_INNER_LOOP_upper_acc_ftd_7[1]) & (fsm_output[6]) & (fsm_output[3]);
  assign mux_122_nl = MUX_s_1_2_2(nor_111_nl, and_201_nl, fsm_output[0]);
  assign nand_36_nl = ~((fsm_output[1]) & mux_122_nl);
  assign or_182_nl = (fsm_output[1:0]!=2'b00) | s_0_sva | (~((INNER_LOOP_b_acc_1_psp_sva[0])
      & (fsm_output[6]) & (fsm_output[3])));
  assign mux_123_nl = MUX_s_1_2_2(nand_36_nl, or_182_nl, fsm_output[2]);
  assign nor_110_nl = ~((fsm_output[4]) | mux_123_nl);
  assign nor_112_nl = ~((~ INNER_LOOP_a_conc_12_itm_1) | (reg_INNER_LOOP_upper_acc_ftd_7[0])
      | (fsm_output[6]) | (fsm_output[3]));
  assign nor_113_nl = ~((pref_y_idx_pref_9_0_2_sva[1:0]!=2'b10) | (fsm_output[6])
      | (fsm_output[3]));
  assign mux_120_nl = MUX_s_1_2_2(nor_112_nl, nor_113_nl, fsm_output[0]);
  assign and_202_nl = (fsm_output[2:1]==2'b11) & mux_120_nl;
  assign or_177_nl = (reg_INNER_LOOP_upper_acc_ftd_7[0]) | (~ (INNER_LOOP_a_acc_psp_sva[0]))
      | (~ (fsm_output[6])) | (fsm_output[3]);
  assign or_176_nl = (pref_y_idx_pref_9_0_sva[1:0]!=2'b10) | (~ (fsm_output[6]))
      | (fsm_output[3]);
  assign mux_119_nl = MUX_s_1_2_2(or_177_nl, or_176_nl, fsm_output[0]);
  assign nor_114_nl = ~((fsm_output[2:1]!=2'b00) | mux_119_nl);
  assign mux_121_nl = MUX_s_1_2_2(and_202_nl, nor_114_nl, fsm_output[4]);
  assign not_tmp_80 = MUX_s_1_2_2(nor_110_nl, mux_121_nl, fsm_output[5]);
  assign or_tmp_180 = x_1_sva | (~ x_3_sva) | (fsm_output[7:5]!=3'b100);
  assign or_tmp_182 = ~((pref_y_idx_pref_9_0_sva[1:0]==2'b11) & (fsm_output[6:5]==2'b11)
      & (~ y_1_sva) & y_3_sva & (~ (fsm_output[7])));
  assign nand_32_nl = ~((fsm_output[0]) & (fsm_output[2]) & (pref_x_idx_pref_1_9_0_1_sva[1:0]==2'b11)
      & (fsm_output[5]) & (~ (fsm_output[3])) & (~ (fsm_output[6])));
  assign or_335_nl = (fsm_output[2]) | (pref_x_idx_pref_1_9_0_2_sva[1:0]!=2'b11)
      | (fsm_output[5]) | (~ and_dcpl_30);
  assign nand_33_nl = ~((fsm_output[2]) & (INNER_LOOP_acc_12_psp_sva[0]) & INNER_LOOP_1_mul_cse_sva_0
      & (fsm_output[5]) & (fsm_output[3]) & (fsm_output[6]));
  assign mux_144_nl = MUX_s_1_2_2(or_335_nl, nand_33_nl, fsm_output[0]);
  assign mux_145_nl = MUX_s_1_2_2(nand_32_nl, mux_144_nl, fsm_output[1]);
  assign nor_98_nl = ~((fsm_output[4]) | mux_145_nl);
  assign or_206_nl = (fsm_output[0]) | (pref_x_idx_pref_1_9_0_sva[1:0]!=2'b11) |
      (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_143_nl = MUX_s_1_2_2(or_206_nl, or_tmp_18, fsm_output[1]);
  assign and_193_nl = (fsm_output[4]) & (~ mux_143_nl);
  assign not_tmp_88 = MUX_s_1_2_2(nor_98_nl, and_193_nl, fsm_output[7]);
  assign nand_47_nl = ~((reg_INNER_LOOP_upper_acc_ftd_7[0]) & (INNER_LOOP_a_acc_psp_sva[0])
      & (~ (fsm_output[3])) & (fsm_output[6]));
  assign nand_48_nl = ~((pref_y_idx_pref_9_0_sva[1:0]==2'b11) & (~ (fsm_output[3]))
      & (fsm_output[6]));
  assign mux_149_nl = MUX_s_1_2_2(nand_47_nl, nand_48_nl, fsm_output[0]);
  assign nor_95_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[5])) | (fsm_output[2])
      | mux_149_nl);
  assign nor_97_nl = ~((~ s_1_sva) | (fsm_output[3]) | (fsm_output[6]));
  assign and_192_nl = (fsm_output[3]) & (INNER_LOOP_b_acc_1_psp_sva[0]) & (fsm_output[6]);
  assign mux_147_nl = MUX_s_1_2_2(nor_97_nl, and_192_nl, fsm_output[0]);
  assign or_213_nl = (fsm_output[2]) | (~(s_0_sva & mux_147_nl));
  assign or_211_nl = (~ (fsm_output[2])) | (fsm_output[0]) | (pref_y_idx_pref_9_0_2_sva[1:0]!=2'b11)
      | (fsm_output[3]) | (fsm_output[6]);
  assign mux_148_nl = MUX_s_1_2_2(or_213_nl, or_211_nl, fsm_output[5]);
  assign nor_96_nl = ~((fsm_output[4]) | mux_148_nl);
  assign not_tmp_92 = MUX_s_1_2_2(nor_95_nl, nor_96_nl, fsm_output[1]);
  assign and_dcpl_73 = (~ x_3_sva) & x_1_sva;
  assign and_dcpl_76 = y_1_sva & (~ y_3_sva) & (~ (fsm_output[7]));
  assign and_dcpl_86 = and_dcpl_15 & (~ (fsm_output[5]));
  assign and_dcpl_87 = and_dcpl_86 & and_dcpl_11;
  assign and_dcpl_96 = and_dcpl_86 & (fsm_output[2]) & (~ (fsm_output[0]));
  assign or_340_nl = (fsm_output[1]) | (~ (fsm_output[0])) | (fsm_output[2]) | (~
      (fsm_output[5])) | (fsm_output[3]) | (~ (fsm_output[6]));
  assign or_341_nl = (fsm_output[0]) | (~ (fsm_output[2])) | (~ (fsm_output[5]))
      | (~ (fsm_output[3])) | (fsm_output[6]);
  assign or_342_nl = (~ (fsm_output[0])) | (~ (fsm_output[2])) | (fsm_output[5])
      | (fsm_output[3]) | (fsm_output[6]);
  assign mux_173_nl = MUX_s_1_2_2(or_341_nl, or_342_nl, fsm_output[1]);
  assign mux_174_nl = MUX_s_1_2_2(or_340_nl, mux_173_nl, fsm_output[4]);
  assign and_dcpl_98 = ~(mux_174_nl | (fsm_output[7]));
  assign and_dcpl_99 = (~ (fsm_output[4])) & (fsm_output[7]);
  assign and_dcpl_101 = and_dcpl_22 & and_dcpl_19 & and_dcpl_99;
  assign and_dcpl_107 = (~ (fsm_output[6])) & (fsm_output[3]) & and_dcpl_35 & and_dcpl_13;
  assign and_dcpl_111 = and_dcpl_31 & and_dcpl_51;
  assign or_tmp_269 = (((fsm_output[1:0]!=2'b00)) & (fsm_output[2])) | (fsm_output[5])
      | (fsm_output[3]) | (fsm_output[6]);
  assign and_dcpl_121 = and_dcpl_86 & and_218_cse;
  assign or_tmp_277 = and_184_cse | (fsm_output[2]) | (fsm_output[5]) | (fsm_output[3])
      | (fsm_output[6]);
  assign mux_191_nl = MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_332_cse);
  assign mux_192_nl = MUX_s_1_2_2(or_tmp_277, (~ mux_191_nl), fsm_output[4]);
  assign and_dcpl_125 = mux_192_nl & (~ (fsm_output[7]));
  assign and_dcpl_126 = ~((fsm_output[7:6]!=2'b00));
  assign nor_tmp_54 = (fsm_output[5]) & (fsm_output[3]);
  assign mux_tmp_193 = MUX_s_1_2_2(nor_tmp_54, (fsm_output[5]), fsm_output[2]);
  assign mux_tmp_194 = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[5]);
  assign mux_tmp_195 = MUX_s_1_2_2(mux_tmp_194, nor_tmp_54, fsm_output[2]);
  assign mux_tmp_198 = MUX_s_1_2_2(mux_tmp_194, (fsm_output[5]), fsm_output[2]);
  assign mux_199_nl = MUX_s_1_2_2(mux_tmp_198, mux_tmp_193, fsm_output[0]);
  assign mux_200_nl = MUX_s_1_2_2(mux_tmp_195, mux_199_nl, fsm_output[1]);
  assign mux_201_nl = MUX_s_1_2_2(mux_200_nl, (fsm_output[5]), fsm_output[4]);
  assign and_dcpl_128 = (~ mux_201_nl) & and_dcpl_126;
  assign not_tmp_130 = ~((fsm_output[4]) | or_tmp_277);
  assign or_dcpl_11 = (fsm_output[4]) | (fsm_output[7]);
  assign or_dcpl_12 = (fsm_output[1:0]!=2'b10);
  assign or_dcpl_15 = or_364_cse | (fsm_output[5]) | (fsm_output[2]);
  assign or_dcpl_16 = or_dcpl_15 | or_dcpl_12 | or_dcpl_11;
  assign mux_204_nl = MUX_s_1_2_2(and_dcpl_15, (fsm_output[6]), fsm_output[5]);
  assign and_175_nl = ((fsm_output[5]) | (fsm_output[3])) & (fsm_output[6]);
  assign mux_205_nl = MUX_s_1_2_2(mux_204_nl, and_175_nl, or_333_cse);
  assign mux_206_nl = MUX_s_1_2_2(mux_205_nl, (fsm_output[6]), fsm_output[4]);
  assign and_dcpl_129 = ~(mux_206_nl | (fsm_output[7]));
  assign mux_207_nl = MUX_s_1_2_2(or_tmp_277, (~ nor_tmp_4), fsm_output[4]);
  assign and_dcpl_130 = mux_207_nl & (~ (fsm_output[7]));
  assign and_dcpl_132 = ~((reg_INNER_LOOP_1_w_lshift_idiv_ftd_8!=2'b00));
  assign and_dcpl_133 = (reg_INNER_LOOP_1_w_lshift_idiv_ftd_8==2'b01);
  assign and_dcpl_134 = (reg_INNER_LOOP_1_w_lshift_idiv_ftd_8==2'b10);
  assign and_dcpl_135 = (reg_INNER_LOOP_1_w_lshift_idiv_ftd_8==2'b11);
  assign and_dcpl_140 = ~((fsm_output[1]) | (fsm_output[4]));
  assign and_dcpl_141 = and_dcpl_140 & (~ (fsm_output[7]));
  assign and_dcpl_142 = and_dcpl_141 & and_dcpl_132;
  assign and_dcpl_144 = and_dcpl_141 & and_dcpl_133;
  assign and_dcpl_146 = and_dcpl_141 & and_dcpl_134;
  assign and_dcpl_148 = and_dcpl_141 & and_dcpl_135;
  assign and_dcpl_161 = (fsm_output[1]) & (~ (fsm_output[4])) & (~ (fsm_output[7]));
  assign INNER_LOOP_w_mux1h_1_itm_mx0c0 = and_dcpl_96 & and_dcpl_142;
  assign INNER_LOOP_w_mux1h_1_itm_mx0c1 = and_dcpl_96 & and_dcpl_144;
  assign INNER_LOOP_w_mux1h_1_itm_mx0c2 = and_dcpl_96 & and_dcpl_146;
  assign INNER_LOOP_w_mux1h_1_itm_mx0c3 = and_dcpl_96 & and_dcpl_148;
  assign INNER_LOOP_1_acc_5_itm_mx0c0 = and_dcpl_96 & and_dcpl_140 & (~ (fsm_output[7]))
      & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign INNER_LOOP_1_acc_5_itm_mx0c1 = and_dcpl_96 & and_dcpl_140 & (~ (fsm_output[7]))
      & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse);
  assign INNER_LOOP_w_mux1h_2_itm_mx0c0 = and_dcpl_121 & and_dcpl_142;
  assign INNER_LOOP_w_mux1h_2_itm_mx0c1 = and_dcpl_121 & and_dcpl_144;
  assign INNER_LOOP_w_mux1h_2_itm_mx0c2 = and_dcpl_121 & and_dcpl_146;
  assign INNER_LOOP_w_mux1h_2_itm_mx0c3 = and_dcpl_121 & and_dcpl_148;
  assign INNER_LOOP_w_mux1h_3_itm_mx0c0 = and_dcpl_96 & and_dcpl_161 & and_dcpl_132;
  assign INNER_LOOP_w_mux1h_3_itm_mx0c1 = and_dcpl_96 & and_dcpl_161 & and_dcpl_133;
  assign INNER_LOOP_w_mux1h_3_itm_mx0c2 = and_dcpl_96 & and_dcpl_161 & and_dcpl_134;
  assign INNER_LOOP_w_mux1h_3_itm_mx0c3 = and_dcpl_96 & and_dcpl_161 & and_dcpl_135;
  assign nl_OUTER_LOOP_acc_nl = (z_out_1[3:1]) + 3'b011;
  assign OUTER_LOOP_acc_nl = nl_OUTER_LOOP_acc_nl[2:0];
  assign OUTER_LOOP_acc_itm_2_1 = readslicef_3_1_2(OUTER_LOOP_acc_nl);
  assign yt_rsc_0_0_i_d_d_pff = INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  assign yt_rsc_0_0_i_radr_d_pff = MUX1HOT_v_8_7_2(INNER_LOOP_b_acc_itm, ({INNER_LOOP_a_acc_psp_4_sva
      , (INNER_LOOP_1_q_and_psp_sva[0])}), (pref_y_idx_pref_9_0_2_sva[9:2]), INNER_LOOP_a_acc_2_psp_sva,
      (INNER_LOOP_b_acc_1_psp_sva[8:1]), (INNER_LOOP_a_acc_psp_sva[8:1]), (pref_y_idx_pref_9_0_sva[9:2]),
      {and_dcpl_40 , and_dcpl_41 , and_dcpl_42 , and_dcpl_44 , and_dcpl_32 , and_dcpl_46
      , and_dcpl_49});
  assign and_50_nl = and_dcpl_28 & and_dcpl_13;
  assign yt_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_8_5_2(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva[9:2]), (pref_x_idx_pref_1_9_0_2_sva[9:2]), (INNER_LOOP_acc_12_psp_sva[8:1]),
      (pref_x_idx_pref_1_9_0_sva[9:2]), {and_50_nl , and_dcpl_52 , and_dcpl_53 ,
      and_dcpl_55 , and_dcpl_57});
  assign yt_rsc_0_0_i_we_d_pff = not_tmp_43 & and_dcpl_58;
  assign yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_47 & and_dcpl_61;
  assign yt_rsc_0_1_i_radr_d_pff = MUX1HOT_v_8_6_2(INNER_LOOP_b_acc_itm, ({INNER_LOOP_a_acc_psp_4_sva
      , INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm}), (pref_y_idx_pref_9_0_2_sva[9:2]),
      (INNER_LOOP_b_acc_1_psp_sva[8:1]), (INNER_LOOP_a_acc_psp_sva[8:1]), (pref_y_idx_pref_9_0_sva[9:2]),
      {and_dcpl_40 , and_dcpl_42 , and_dcpl_29 , and_dcpl_44 , and_dcpl_46 , and_dcpl_49});
  assign and_63_nl = and_dcpl_43 & and_dcpl_51;
  assign yt_rsc_0_1_i_wadr_d_pff = MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva[9:2]),
      INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva, (pref_x_idx_pref_1_9_0_2_sva[9:2]),
      (INNER_LOOP_acc_12_psp_sva[8:1]), (pref_x_idx_pref_1_9_0_sva[9:2]), {and_dcpl_52
      , and_63_nl , and_dcpl_53 , and_dcpl_55 , and_dcpl_57});
  assign yt_rsc_0_1_i_we_d_pff = not_tmp_62 & and_dcpl_58;
  assign yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_65 & and_dcpl_61;
  assign yt_rsc_0_2_i_radr_d_pff = MUX1HOT_v_8_7_2(INNER_LOOP_b_acc_itm, ({INNER_LOOP_a_acc_psp_4_sva
      , INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm}), (pref_y_idx_pref_9_0_2_sva[9:2]),
      INNER_LOOP_a_acc_2_psp_sva, (INNER_LOOP_b_acc_1_psp_sva[8:1]), (INNER_LOOP_a_acc_psp_sva[8:1]),
      (pref_y_idx_pref_9_0_sva[9:2]), {and_dcpl_40 , and_dcpl_42 , and_dcpl_29 ,
      and_dcpl_44 , and_dcpl_32 , and_dcpl_46 , and_dcpl_49});
  assign and_66_nl = and_dcpl_54 & and_dcpl_39;
  assign yt_rsc_0_2_i_wadr_d_pff = MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva[9:2]),
      (pref_x_idx_pref_1_9_0_2_sva[9:2]), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva,
      (INNER_LOOP_acc_12_psp_sva[8:1]), (pref_x_idx_pref_1_9_0_sva[9:2]), {and_dcpl_52
      , and_dcpl_53 , and_66_nl , and_dcpl_55 , and_dcpl_57});
  assign yt_rsc_0_2_i_we_d_pff = not_tmp_75 & and_dcpl_58;
  assign yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_80 & and_dcpl_61;
  assign yt_rsc_0_3_i_radr_d_pff = MUX1HOT_v_8_5_2(INNER_LOOP_b_acc_itm, (pref_y_idx_pref_9_0_2_sva[9:2]),
      (INNER_LOOP_b_acc_1_psp_sva[8:1]), (INNER_LOOP_a_acc_psp_sva[8:1]), (pref_y_idx_pref_9_0_sva[9:2]),
      {and_dcpl_40 , and_dcpl_42 , and_dcpl_44 , and_dcpl_46 , and_dcpl_49});
  assign and_71_nl = and_dcpl_16 & and_184_cse & and_dcpl_18;
  assign yt_rsc_0_3_i_wadr_d_pff = MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva[9:2]),
      (pref_x_idx_pref_1_9_0_2_sva[9:2]), (INNER_LOOP_acc_12_psp_sva[8:1]), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva,
      (pref_x_idx_pref_1_9_0_sva[9:2]), {and_dcpl_52 , and_dcpl_53 , and_dcpl_55
      , and_71_nl , and_dcpl_57});
  assign yt_rsc_0_3_i_we_d_pff = not_tmp_88 & and_dcpl_58;
  assign yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_92 & and_dcpl_61;
  assign xt_rsc_0_0_i_we_d_pff = not_tmp_43 & and_dcpl_73;
  assign xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_47 & and_dcpl_76;
  assign xt_rsc_0_1_i_we_d_pff = not_tmp_62 & and_dcpl_73;
  assign xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_65 & and_dcpl_76;
  assign xt_rsc_0_2_i_we_d_pff = not_tmp_75 & and_dcpl_73;
  assign xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_80 & and_dcpl_76;
  assign xt_rsc_0_3_i_we_d_pff = not_tmp_88 & and_dcpl_73;
  assign xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = not_tmp_92 & and_dcpl_76;
  assign twiddle_rsc_0_0_i_radr_d_pff = z_out_6[9:2];
  assign nor_91_nl = ~((z_out_6[1:0]!=2'b00) | (~ (fsm_output[2])));
  assign nor_93_nl = ~((z_out_6[1:0]!=2'b00) | (fsm_output[2]));
  assign mux_153_nl = MUX_s_1_2_2(nor_91_nl, nor_93_nl, fsm_output[1]);
  assign twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = mux_153_nl & and_dcpl_87;
  assign nor_87_nl = ~((z_out_6[1]) | (~((z_out_6[0]) & (fsm_output[2]))));
  assign nor_89_nl = ~((z_out_6[1:0]!=2'b01) | (fsm_output[2]));
  assign mux_156_nl = MUX_s_1_2_2(nor_87_nl, nor_89_nl, fsm_output[1]);
  assign twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = mux_156_nl & and_dcpl_87;
  assign nor_83_nl = ~((z_out_6[1:0]!=2'b10) | (~ (fsm_output[2])));
  assign nor_85_nl = ~((z_out_6[1:0]!=2'b10) | (fsm_output[2]));
  assign mux_159_nl = MUX_s_1_2_2(nor_83_nl, nor_85_nl, fsm_output[1]);
  assign twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = mux_159_nl & and_dcpl_87;
  assign and_190_nl = (z_out_6[1:0]==2'b11) & (fsm_output[2]);
  assign nor_81_nl = ~((z_out_6[1:0]!=2'b11) | (fsm_output[2]));
  assign mux_162_nl = MUX_s_1_2_2(and_190_nl, nor_81_nl, fsm_output[1]);
  assign twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = mux_162_nl & and_dcpl_87;
  assign and_dcpl_194 = ~((fsm_output!=8'b00000010));
  assign and_dcpl_216 = ~((fsm_output[6]) | (fsm_output[3]) | (fsm_output[5]) | (fsm_output[2]));
  assign and_dcpl_217 = and_dcpl_216 & (fsm_output[1:0]==2'b11) & and_dcpl_11;
  assign and_dcpl_223 = (~ (fsm_output[6])) & (fsm_output[3]) & and_dcpl_35 & (fsm_output[1:0]==2'b00)
      & and_dcpl_11;
  assign and_dcpl_229 = (fsm_output[6]) & (fsm_output[3]) & (~ (fsm_output[5])) &
      (fsm_output[2]) & (fsm_output[0]) & (~ (fsm_output[1])) & and_dcpl_11;
  assign and_dcpl_235 = (fsm_output[6]) & (~ (fsm_output[3])) & and_dcpl_35 & and_dcpl_19
      & (fsm_output[4]) & (~ (fsm_output[7]));
  assign and_dcpl_237 = and_dcpl_216 & and_dcpl_19 & and_dcpl_11;
  assign and_dcpl_243 = and_dcpl_15 & (~ (fsm_output[5])) & (~ (fsm_output[2]));
  assign and_299_cse = and_dcpl_243 & (fsm_output[1:0]==2'b10) & and_dcpl_11;
  assign and_302_cse = and_dcpl_243 & (fsm_output[1:0]==2'b11) & and_dcpl_11;
  assign and_dcpl_251 = and_dcpl_15 & (~ (fsm_output[5])) & (fsm_output[2]);
  assign and_307_cse = and_dcpl_251 & (fsm_output[1:0]==2'b00) & and_dcpl_11;
  assign or_tmp_298 = INNER_LOOP_b_INNER_LOOP_b_and_2_cse | INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign nor_tmp = or_tmp_298 & (fsm_output[3]) & (fsm_output[6]);
  assign and_310_cse = and_dcpl_251 & (fsm_output[1:0]==2'b01) & and_dcpl_11;
  assign OUTER_LOOP_m_or_1_itm = and_299_cse | and_302_cse | and_307_cse | and_310_cse;
  always @(posedge clk) begin
    if ( s_or_cse ) begin
      OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(4'b0001, (z_out_1[3:0]), and_dcpl_23);
      s_9_sva <= and_dcpl_17;
      s_8_sva <= s_9_sva & (~ and_dcpl_17);
      s_7_sva <= s_8_sva & (~ and_dcpl_17);
      s_6_sva <= s_7_sva & (~ and_dcpl_17);
      s_5_sva <= s_6_sva & (~ and_dcpl_17);
      s_4_sva <= s_5_sva & (~ and_dcpl_17);
      s_3_sva <= s_4_sva & (~ and_dcpl_17);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      s_1_sva <= 1'b0;
      x_3_sva <= 1'b0;
      x_1_sva <= 1'b0;
      y_3_sva <= 1'b0;
      y_1_sva <= 1'b0;
      s_2_sva <= 1'b0;
    end
    else if ( s_or_cse ) begin
      s_1_sva <= s_2_sva & (~ and_dcpl_17);
      x_3_sva <= y_3_sva | and_dcpl_17;
      x_1_sva <= y_1_sva & (~ and_dcpl_17);
      y_3_sva <= x_3_sva & (~ and_dcpl_17);
      y_1_sva <= x_1_sva | and_dcpl_17;
      s_2_sva <= s_3_sva & (~ and_dcpl_17);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      s_0_sva <= 1'b0;
      reg_yt_rsc_0_0_cgo_cse <= 1'b0;
      reg_yt_rsc_0_1_cgo_cse <= 1'b0;
      reg_yt_rsc_0_2_cgo_cse <= 1'b0;
      reg_yt_rsc_0_3_cgo_cse <= 1'b0;
      reg_xt_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      INNER_LOOP_a_INNER_LOOP_a_nor_5_itm <= 1'b0;
      INNER_LOOP_a_and_9_itm <= 1'b0;
      INNER_LOOP_a_INNER_LOOP_a_and_26_itm <= 1'b0;
      INNER_LOOP_a_INNER_LOOP_a_and_27_itm <= 1'b0;
      reg_INNER_LOOP_1_w_lshift_idiv_ftd_8 <= 2'b00;
    end
    else begin
      s_0_sva <= s_mux_20_nl & (~ mux_tmp_21);
      reg_yt_rsc_0_0_cgo_cse <= ~ mux_50_itm;
      reg_yt_rsc_0_1_cgo_cse <= ~ mux_86_itm;
      reg_yt_rsc_0_2_cgo_cse <= ~ mux_114_itm;
      reg_yt_rsc_0_3_cgo_cse <= mux_142_rmff;
      reg_xt_rsc_triosy_0_3_obj_ld_cse <= and_dcpl_96 & (fsm_output[1]) & (fsm_output[4])
          & (fsm_output[7]) & (~ OUTER_LOOP_acc_itm_2_1);
      reg_ensig_cgo_cse <= mux_172_rmff;
      INNER_LOOP_a_INNER_LOOP_a_nor_5_itm <= ~((INNER_LOOP_a_acc_psp_sva[0]) | (reg_INNER_LOOP_upper_acc_ftd_7[0])
          | INNER_LOOP_b_INNER_LOOP_b_and_3_cse);
      INNER_LOOP_a_and_9_itm <= INNER_LOOP_a_INNER_LOOP_a_and_25_itm & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
      INNER_LOOP_a_INNER_LOOP_a_and_26_itm <= (INNER_LOOP_a_acc_psp_sva[0]) & (~
          (reg_INNER_LOOP_upper_acc_ftd_7[0])) & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
      INNER_LOOP_a_INNER_LOOP_a_and_27_itm <= (INNER_LOOP_a_acc_psp_sva[0]) & (reg_INNER_LOOP_upper_acc_ftd_7[0])
          & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
      reg_INNER_LOOP_1_w_lshift_idiv_ftd_8 <= z_out_6[1:0];
    end
  end
  always @(posedge clk) begin
    reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    INNER_LOOP_1_b_rem_cmp_a <= MUX1HOT_v_128_5_2(z_out_4, INNER_LOOP_1_b_mul_mut,
        INNER_LOOP_2_b_mul_mut, INNER_LOOP_3_b_mul_mut, INNER_LOOP_4_b_mul_mut, {INNER_LOOP_b_or_nl
        , nor_154_nl , and_112_nl , and_118_nl , mux_185_nl});
    INNER_LOOP_1_q_and_psp_sva <= MUX_v_7_2_2(7'b0000000, INNER_LOOP_t_mux_nl, nor_158_nl);
    tmp_3_sva_3 <= MUX_v_64_2_2(yt_rsc_0_3_i_q_d, yt_rsc_0_1_i_q_d, and_dcpl_32);
  end
  always @(posedge clk) begin
    if ( mux_tmp_21 ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_26_nl, mux_tmp_20, fsm_output[7]) ) begin
      drf_y_smx_lpi_2 <= MUX1HOT_v_64_4_2(INNER_LOOP_1_b_rem_cmp_z, xt_rsc_0_3_i_q_d,
          xt_rsc_0_1_i_q_d, drf_y_smx_lpi_3_dfm_4, {nor_141_nl , and_dcpl_29 , and_dcpl_32
          , and_dcpl_38});
    end
  end
  always @(posedge clk) begin
    if ( mux_tmp_21 | and_125_rgt ) begin
      OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(4'b1001, z_out, and_125_rgt);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_63_nl, mux_22_nl, fsm_output[7]) ) begin
      OUTER_LOOP_m_lshift_psp_sva <= z_out_6[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_conc_12_itm_1 <= 1'b0;
    end
    else if ( ~((~ mux_197_nl) & and_dcpl_126) ) begin
      INNER_LOOP_a_conc_12_itm_1 <= ~ (z_out_1[0]);
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_128 ) begin
      INNER_LOOP_a_acc_psp_4_sva <= nl_INNER_LOOP_a_acc_psp_4_sva[6:0];
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(not_tmp_130, mux_202_nl, fsm_output[7]) ) begin
      INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva <= INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_x_idx_pref_1_9_0_1_sva <= 10'b0000000000;
    end
    else if ( ~ and_dcpl_128 ) begin
      pref_x_idx_pref_1_9_0_1_sva <= nl_pref_x_idx_pref_1_9_0_1_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_y_idx_pref_9_0_2_sva <= 10'b0000000000;
    end
    else if ( ~ or_dcpl_16 ) begin
      pref_y_idx_pref_9_0_2_sva <= nl_pref_y_idx_pref_9_0_2_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_x_idx_pref_1_9_0_2_sva <= 10'b0000000000;
    end
    else if ( ~ and_dcpl_129 ) begin
      pref_x_idx_pref_1_9_0_2_sva <= nl_pref_x_idx_pref_1_9_0_2_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_129 ) begin
      INNER_LOOP_a_acc_2_psp_sva <= nl_INNER_LOOP_a_acc_2_psp_sva[7:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_acc_1_psp_sva <= 9'b000000000;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_b_acc_1_psp_sva <= nl_INNER_LOOP_b_acc_1_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_acc_12_psp_sva <= 9'b000000000;
    end
    else if ( ~ and_dcpl_130 ) begin
      INNER_LOOP_acc_12_psp_sva <= nl_INNER_LOOP_acc_12_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_1_mul_cse_sva_0 <= 1'b0;
    end
    else if ( ~ and_dcpl_130 ) begin
      INNER_LOOP_1_mul_cse_sva_0 <= z_out_4[0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_acc_psp_sva <= 9'b000000000;
    end
    else if ( ~ and_dcpl_125 ) begin
      INNER_LOOP_a_acc_psp_sva <= INNER_LOOP_a_acc_psp_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_y_idx_pref_9_0_sva <= 10'b0000000000;
    end
    else if ( ~(mux_209_nl & (~ (fsm_output[7]))) ) begin
      pref_y_idx_pref_9_0_sva <= nl_pref_y_idx_pref_9_0_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      pref_x_idx_pref_1_9_0_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(not_tmp_130, mux_210_nl, fsm_output[7]) ) begin
      pref_x_idx_pref_1_9_0_sva <= nl_pref_x_idx_pref_1_9_0_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva <= 8'b00000000;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva <= nl_INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva[7:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_2_cse <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_2_cse <= INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_3_cse <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_b_INNER_LOOP_b_and_3_cse <= INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_b_nor_itm <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_b_nor_itm <= ~(INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0 | INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_22_itm <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_22_itm <= (z_out_1[0]) & (~ (INNER_LOOP_a_acc_psp_sva_mx0w0[0]))
          & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_23_itm <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_23_itm <= (INNER_LOOP_a_acc_psp_sva_mx0w0[0])
          & (~ (z_out_1[0])) & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_24_itm <= 1'b0;
    end
    else if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_24_itm <= (INNER_LOOP_a_acc_psp_sva_mx0w0[0])
          & (z_out_1[0]) & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_16 ) begin
      INNER_LOOP_1_upper_and_psp_sva <= INNER_LOOP_1_upper_and_psp_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~((~ mux_213_nl) & and_dcpl_126) ) begin
      INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm <= INNER_LOOP_1_q_and_psp_sva[0];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_233_nl | (fsm_output[4])) ) begin
      drf_y_smx_lpi_3_dfm <= MUX1HOT_v_64_4_2(drf_y_smx_lpi_3_dfm_5, drf_y_smx_lpi_3_dfm_6,
          drf_y_smx_lpi_3_dfm_7, INNER_LOOP_1_b_rem_cmp_z, {and_dcpl_41 , and_dcpl_107
          , and_dcpl_111 , and_142_nl});
    end
  end
  always @(posedge clk) begin
    if ( ~(or_dcpl_15 | (fsm_output[1:0]!=2'b11) | or_dcpl_11) ) begin
      INNER_LOOP_1_b_mul_mut <= z_out_4;
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_w_mux1h_1_itm_mx0c0 | INNER_LOOP_w_mux1h_1_itm_mx0c1 | INNER_LOOP_w_mux1h_1_itm_mx0c2
        | INNER_LOOP_w_mux1h_1_itm_mx0c3 ) begin
      INNER_LOOP_w_mux1h_1_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
          twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, {INNER_LOOP_w_mux1h_1_itm_mx0c0
          , INNER_LOOP_w_mux1h_1_itm_mx0c1 , INNER_LOOP_w_mux1h_1_itm_mx0c2 , INNER_LOOP_w_mux1h_1_itm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_1_acc_5_itm_mx0c0 | INNER_LOOP_1_acc_5_itm_mx0c1 | and_dcpl_98
        | and_dcpl_29 | and_dcpl_32 | and_dcpl_49 | and_dcpl_101 ) begin
      INNER_LOOP_1_acc_5_itm <= MUX1HOT_v_64_9_2(yt_rsc_0_0_i_q_d, xt_rsc_0_0_i_q_d,
          (readslicef_65_64_1(acc_2_nl)), xt_rsc_0_2_i_q_d, xt_rsc_0_1_i_q_d, yt_rsc_0_2_i_q_d,
          yt_rsc_0_1_i_q_d, xt_rsc_0_3_i_q_d, yt_rsc_0_3_i_q_d, {INNER_LOOP_a_or_1_nl
          , INNER_LOOP_a_or_2_nl , INNER_LOOP_a_or_7_nl , INNER_LOOP_a_or_3_nl ,
          INNER_LOOP_a_or_4_nl , INNER_LOOP_a_or_5_nl , INNER_LOOP_a_or_6_nl , INNER_LOOP_a_and_23_nl
          , INNER_LOOP_a_and_24_nl});
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_w_mux1h_2_itm_mx0c0 | INNER_LOOP_w_mux1h_2_itm_mx0c1 | INNER_LOOP_w_mux1h_2_itm_mx0c2
        | INNER_LOOP_w_mux1h_2_itm_mx0c3 ) begin
      INNER_LOOP_w_mux1h_2_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
          twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, {INNER_LOOP_w_mux1h_2_itm_mx0c0
          , INNER_LOOP_w_mux1h_2_itm_mx0c1 , INNER_LOOP_w_mux1h_2_itm_mx0c2 , INNER_LOOP_w_mux1h_2_itm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_w_mux1h_3_itm_mx0c0 | INNER_LOOP_w_mux1h_3_itm_mx0c1 | INNER_LOOP_w_mux1h_3_itm_mx0c2
        | INNER_LOOP_w_mux1h_3_itm_mx0c3 ) begin
      INNER_LOOP_w_mux1h_3_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
          twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, {INNER_LOOP_w_mux1h_3_itm_mx0c0
          , INNER_LOOP_w_mux1h_3_itm_mx0c1 , INNER_LOOP_w_mux1h_3_itm_mx0c2 , INNER_LOOP_w_mux1h_3_itm_mx0c3});
    end
  end
  always @(posedge clk) begin
    if ( ~(or_tmp_19 | (fsm_output[1:0]!=2'b00) | or_dcpl_11) ) begin
      INNER_LOOP_2_b_mul_mut <= z_out_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_25_itm <= 1'b0;
    end
    else if ( (and_dcpl_36 & and_dcpl_21 & and_dcpl_26) | and_dcpl_46 ) begin
      INNER_LOOP_a_INNER_LOOP_a_and_25_itm <= MUX_s_1_2_2(INNER_LOOP_a_INNER_LOOP_a_nor_3_nl,
          INNER_LOOP_a_INNER_LOOP_a_and_25_nl, and_dcpl_46);
    end
  end
  always @(posedge clk) begin
    if ( ~((~ and_dcpl_30) | (fsm_output[5]) | (~ (fsm_output[2])) | (~ (fsm_output[0]))
        | (fsm_output[1]) | or_dcpl_11) ) begin
      INNER_LOOP_3_b_mul_mut <= z_out_4;
    end
  end
  always @(posedge clk) begin
    if ( ~((~ (fsm_output[6])) | (fsm_output[3]) | (~ (fsm_output[5])) | (fsm_output[2])
        | or_dcpl_12 | (~ (fsm_output[4])) | (fsm_output[7])) ) begin
      INNER_LOOP_4_b_mul_mut <= z_out_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_INNER_LOOP_upper_acc_ftd_7 <= 2'b00;
    end
    else if ( ~ and_dcpl_125 ) begin
      reg_INNER_LOOP_upper_acc_ftd_7 <= z_out_1[1:0];
    end
  end
  assign s_mux_20_nl = MUX_s_1_2_2(s_0_sva, s_1_sva, and_dcpl_23);
  assign INNER_LOOP_b_or_nl = and_dcpl_41 | and_dcpl_107 | and_dcpl_111 | and_dcpl_38;
  assign or_345_nl = and_185_cse | (fsm_output[3]);
  assign mux_183_nl = MUX_s_1_2_2(nor_155_cse, or_345_nl, fsm_output[4]);
  assign nor_154_nl = ~(mux_183_nl | (fsm_output[7:5]!=3'b000));
  assign and_183_nl = or_332_cse & (fsm_output[3]);
  assign nand_25_nl = ~(or_333_cse & (fsm_output[3]));
  assign mux_184_nl = MUX_s_1_2_2(and_183_nl, nand_25_nl, fsm_output[4]);
  assign and_112_nl = mux_184_nl & (fsm_output[7:5]==3'b001);
  assign and_118_nl = (((fsm_output[3:1]==3'b111)) | (fsm_output[4])) & (fsm_output[7:5]==3'b010);
  assign and_181_nl = (fsm_output[4]) & mux_tmp_24;
  assign nor_64_nl = ~((fsm_output[4]) | or_tmp_269);
  assign mux_185_nl = MUX_s_1_2_2(and_181_nl, nor_64_nl, fsm_output[7]);
  assign and_127_nl = and_dcpl_22 & and_dcpl_47 & and_dcpl_18;
  assign INNER_LOOP_t_mux_nl = MUX_v_7_2_2(({6'b000000 , (INNER_LOOP_1_q_and_psp_sva_1[0])}),
      (INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva[6:0]), and_127_nl);
  assign or_285_nl = (fsm_output[4]) | (~ (fsm_output[1])) | (fsm_output[0]) | (fsm_output[2]);
  assign or_284_nl = (~ (fsm_output[4])) | (fsm_output[1]) | (~ and_218_cse);
  assign mux_190_nl = MUX_s_1_2_2(or_285_nl, or_284_nl, fsm_output[7]);
  assign nor_158_nl = ~(mux_190_nl | or_364_cse | (fsm_output[5]));
  assign or_343_nl = (fsm_output[1]) | (fsm_output[0]) | (fsm_output[2]) | (~ (fsm_output[5]))
      | (fsm_output[3]) | (~ (fsm_output[6]));
  assign or_28_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_28_nl = MUX_s_1_2_2(or_28_nl, or_tmp_19, fsm_output[0]);
  assign nand_50_nl = ~((fsm_output[1]) & (~ mux_28_nl));
  assign mux_29_nl = MUX_s_1_2_2(or_343_nl, nand_50_nl, fsm_output[4]);
  assign nor_141_nl = ~(mux_29_nl | (fsm_output[7]));
  assign or_25_nl = (fsm_output[0]) | (fsm_output[2]) | (fsm_output[5]) | (fsm_output[3])
      | (fsm_output[6]);
  assign mux_25_nl = MUX_s_1_2_2(or_tmp_18, or_25_nl, fsm_output[1]);
  assign mux_26_nl = MUX_s_1_2_2(mux_25_nl, (~ mux_tmp_24), fsm_output[4]);
  assign nor_63_nl = ~((fsm_output[6:1]!=6'b000000));
  assign or_23_nl = and_185_cse | (fsm_output[5]) | (fsm_output[3]) | (fsm_output[6]);
  assign mux_22_nl = MUX_s_1_2_2(or_tmp_7, or_23_nl, fsm_output[4]);
  assign mux_196_nl = MUX_s_1_2_2(mux_tmp_195, mux_tmp_193, and_184_cse);
  assign mux_197_nl = MUX_s_1_2_2(mux_196_nl, (fsm_output[5]), fsm_output[4]);
  assign nl_INNER_LOOP_a_acc_psp_4_sva  = conv_u2u_6_7(INNER_LOOP_1_q_and_psp_sva_1[6:1])
      + INNER_LOOP_1_upper_and_psp_sva_mx0w0;
  assign mux_202_nl = MUX_s_1_2_2(or_tmp_7, or_tmp_277, fsm_output[4]);
  assign nl_pref_x_idx_pref_1_9_0_1_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
      , 2'b00}) + (z_out_4[9:0]);
  assign nl_INNER_LOOP_b_acc_15_nl = ({s_9_sva , INNER_LOOP_1_q_and_psp_sva_1}) +
      conv_u2u_7_8({s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva});
  assign INNER_LOOP_b_acc_15_nl = nl_INNER_LOOP_b_acc_15_nl[7:0];
  assign nl_INNER_LOOP_b_acc_16_nl = conv_u2u_1_2(s_0_sva) + conv_u2u_1_2(~ (z_out_1[0]));
  assign INNER_LOOP_b_acc_16_nl = nl_INNER_LOOP_b_acc_16_nl[1:0];
  assign nl_pref_y_idx_pref_9_0_2_sva  = ({INNER_LOOP_b_acc_15_nl , INNER_LOOP_b_acc_16_nl})
      + ({INNER_LOOP_1_upper_and_psp_sva_mx0w0 , 1'b0 , s_1_sva , 1'b1});
  assign nl_pref_x_idx_pref_1_9_0_2_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
      , 2'b01}) + (z_out_4[9:0]);
  assign nl_INNER_LOOP_a_acc_2_psp_sva  = conv_u2u_7_8(INNER_LOOP_1_q_and_psp_sva_1)
      + ({INNER_LOOP_1_upper_and_psp_sva_mx0w0 , (~ (z_out_1[1]))});
  assign nl_INNER_LOOP_b_acc_12_nl = ({s_9_sva , INNER_LOOP_1_q_and_psp_sva_1 , 1'b0})
      + conv_u2u_8_9({s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva ,
      s_2_sva , 1'b1}) + conv_u2u_1_9(~ (z_out_1[1]));
  assign INNER_LOOP_b_acc_12_nl = nl_INNER_LOOP_b_acc_12_nl[8:0];
  assign nl_INNER_LOOP_b_acc_1_psp_sva  = INNER_LOOP_b_acc_12_nl + ({INNER_LOOP_1_upper_and_psp_sva_mx0w0
      , 1'b0 , s_1_sva});
  assign nl_INNER_LOOP_acc_12_psp_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
      , 1'b1}) + (z_out_4[9:1]);
  assign nl_INNER_LOOP_b_acc_17_nl = ({INNER_LOOP_1_upper_and_psp_sva_mx0w0 , 1'b0
      , s_1_sva}) + ({s_9_sva , INNER_LOOP_1_q_and_psp_sva_1 , 1'b1});
  assign INNER_LOOP_b_acc_17_nl = nl_INNER_LOOP_b_acc_17_nl[8:0];
  assign nl_pref_y_idx_pref_9_0_sva  = ({INNER_LOOP_b_acc_17_nl , 1'b1}) + conv_u2u_9_10({s_8_sva
      , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva , 1'b0 , s_0_sva})
      + conv_u2u_2_10(~ (z_out_1[1:0]));
  assign or_298_nl = (fsm_output[2:1]!=2'b00);
  assign mux_208_nl = MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_298_nl);
  assign mux_209_nl = MUX_s_1_2_2(or_tmp_277, (~ mux_208_nl), fsm_output[4]);
  assign nl_pref_x_idx_pref_1_9_0_sva  = ({INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
      , 2'b11}) + (z_out_4[9:0]);
  assign mux_210_nl = MUX_s_1_2_2(or_tmp_7, or_tmp_269, fsm_output[4]);
  assign nl_INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva  = conv_u2u_7_8(INNER_LOOP_1_q_and_psp_sva)
      + 8'b00000001;
  assign mux_212_nl = MUX_s_1_2_2(mux_tmp_195, mux_tmp_198, fsm_output[1]);
  assign mux_213_nl = MUX_s_1_2_2(mux_212_nl, (fsm_output[5]), fsm_output[4]);
  assign and_142_nl = and_dcpl_22 & and_dcpl_47 & and_dcpl_99;
  assign or_nl = (~ (fsm_output[5])) | (~ (pref_y_idx_pref_9_0_2_sva[0])) | (fsm_output[2])
      | (fsm_output[1]) | (fsm_output[7]) | (~ or_tmp_298) | (~ (fsm_output[3]))
      | (fsm_output[6]);
  assign or_357_nl = (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[3]) | (fsm_output[6]);
  assign nand_nl = ~((INNER_LOOP_b_acc_1_psp_sva[0]) & nor_tmp);
  assign or_355_nl = (INNER_LOOP_b_acc_1_psp_sva[0]) | (~ nor_tmp);
  assign mux_230_nl = MUX_s_1_2_2(nand_nl, or_355_nl, s_0_sva);
  assign mux_231_nl = MUX_s_1_2_2(mux_230_nl, or_364_cse, fsm_output[7]);
  assign or_356_nl = (fsm_output[1]) | mux_231_nl;
  assign mux_232_nl = MUX_s_1_2_2(or_357_nl, or_356_nl, fsm_output[2]);
  assign or_363_nl = (fsm_output[5]) | mux_232_nl;
  assign mux_233_nl = MUX_s_1_2_2(or_nl, or_363_nl, fsm_output[0]);
  assign and_335_nl = and_dcpl_15 & (~ (fsm_output[5])) & (fsm_output[2]) & (~ (fsm_output[0]))
      & (fsm_output[1]) & (~ (fsm_output[4])) & (fsm_output[7]);
  assign INNER_LOOP_mux_20_nl = MUX_v_64_2_2((~ drf_y_smx_lpi_2), (~ drf_y_smx_lpi_3_dfm),
      and_335_nl);
  assign nl_acc_2_nl = ({INNER_LOOP_1_acc_5_itm , 1'b1}) + ({INNER_LOOP_mux_20_nl
      , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[64:0];
  assign INNER_LOOP_a_or_1_nl = INNER_LOOP_1_acc_5_itm_mx0c0 | (INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      & (~ (reg_INNER_LOOP_upper_acc_ftd_7[1])) & and_dcpl_32) | (INNER_LOOP_a_and_9_itm
      & and_dcpl_49);
  assign INNER_LOOP_a_or_2_nl = INNER_LOOP_1_acc_5_itm_mx0c1 | ((~(INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      | (reg_INNER_LOOP_upper_acc_ftd_7[1]))) & and_dcpl_32) | (INNER_LOOP_a_INNER_LOOP_a_nor_5_itm
      & and_dcpl_49);
  assign INNER_LOOP_a_or_7_nl = and_dcpl_98 | and_dcpl_101;
  assign INNER_LOOP_a_or_3_nl = ((~(INNER_LOOP_b_INNER_LOOP_b_and_3_cse | (reg_INNER_LOOP_upper_acc_ftd_7[0])))
      & and_dcpl_29) | ((reg_INNER_LOOP_upper_acc_ftd_7[1]) & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse)
      & and_dcpl_32) | (INNER_LOOP_a_INNER_LOOP_a_and_23_itm & and_dcpl_49);
  assign INNER_LOOP_a_or_4_nl = ((reg_INNER_LOOP_upper_acc_ftd_7[0]) & (~ INNER_LOOP_b_INNER_LOOP_b_and_3_cse)
      & and_dcpl_29) | (INNER_LOOP_a_INNER_LOOP_a_and_22_itm & and_dcpl_49);
  assign INNER_LOOP_a_or_5_nl = (INNER_LOOP_b_INNER_LOOP_b_and_3_cse & (~ (reg_INNER_LOOP_upper_acc_ftd_7[0]))
      & and_dcpl_29) | (INNER_LOOP_b_INNER_LOOP_b_and_3_cse & (reg_INNER_LOOP_upper_acc_ftd_7[1])
      & and_dcpl_32) | (INNER_LOOP_a_INNER_LOOP_a_and_26_itm & and_dcpl_49);
  assign INNER_LOOP_a_or_6_nl = (INNER_LOOP_b_INNER_LOOP_b_and_3_cse & (reg_INNER_LOOP_upper_acc_ftd_7[0])
      & and_dcpl_29) | (INNER_LOOP_a_INNER_LOOP_a_and_25_itm & and_dcpl_49);
  assign INNER_LOOP_a_and_23_nl = INNER_LOOP_a_INNER_LOOP_a_and_24_itm & and_dcpl_49;
  assign INNER_LOOP_a_and_24_nl = INNER_LOOP_a_INNER_LOOP_a_and_27_itm & and_dcpl_49;
  assign INNER_LOOP_a_INNER_LOOP_a_nor_3_nl = ~((INNER_LOOP_a_acc_psp_sva[0]) | (reg_INNER_LOOP_upper_acc_ftd_7[0]));
  assign INNER_LOOP_a_INNER_LOOP_a_and_25_nl = (reg_INNER_LOOP_upper_acc_ftd_7[0])
      & (~ (INNER_LOOP_a_acc_psp_sva[0])) & INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  assign and_334_nl = (fsm_output[6:5]==2'b00) & nor_155_cse & (fsm_output[1:0]==2'b01)
      & and_dcpl_11;
  assign OUTER_LOOP_mux_6_nl = MUX_v_4_2_2(OUTER_LOOP_acc_2_itm, OUTER_LOOP_nn_3_0_sva,
      and_334_nl);
  assign nl_z_out = OUTER_LOOP_mux_6_nl + 4'b1111;
  assign z_out = nl_z_out[3:0];
  assign OUTER_LOOP_OUTER_LOOP_and_5_nl = s_8_sva & and_dcpl_194;
  assign OUTER_LOOP_OUTER_LOOP_and_6_nl = s_7_sva & and_dcpl_194;
  assign OUTER_LOOP_OUTER_LOOP_and_7_nl = s_6_sva & and_dcpl_194;
  assign OUTER_LOOP_OUTER_LOOP_and_8_nl = s_5_sva & and_dcpl_194;
  assign OUTER_LOOP_OUTER_LOOP_and_9_nl = s_4_sva & and_dcpl_194;
  assign OUTER_LOOP_mux_7_nl = MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva[3]), s_3_sva, and_dcpl_194);
  assign OUTER_LOOP_mux_8_nl = MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva[2]), s_2_sva, and_dcpl_194);
  assign OUTER_LOOP_mux_9_nl = MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva[1]), s_1_sva, and_dcpl_194);
  assign OUTER_LOOP_mux_10_nl = MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva[0]), s_0_sva,
      and_dcpl_194);
  assign nl_z_out_1 = ({OUTER_LOOP_OUTER_LOOP_and_5_nl , OUTER_LOOP_OUTER_LOOP_and_6_nl
      , OUTER_LOOP_OUTER_LOOP_and_7_nl , OUTER_LOOP_OUTER_LOOP_and_8_nl , OUTER_LOOP_OUTER_LOOP_and_9_nl
      , OUTER_LOOP_mux_7_nl , OUTER_LOOP_mux_8_nl , OUTER_LOOP_mux_9_nl , OUTER_LOOP_mux_10_nl})
      + conv_s2u_2_9({and_dcpl_194 , 1'b1});
  assign z_out_1 = nl_z_out_1[8:0];
  assign INNER_LOOP_b_mux1h_38_nl = MUX1HOT_v_64_5_2(drf_y_smx_lpi_3_dfm_5, drf_y_smx_lpi_3_dfm_6,
      drf_y_smx_lpi_3_dfm_7, drf_y_smx_lpi_3_dfm_4, ({54'b000000000000000000000000000000000000000000000000000000
      , s_9_sva , s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva
      , s_1_sva , s_0_sva}), {and_dcpl_217 , and_dcpl_223 , and_dcpl_229 , and_dcpl_235
      , and_dcpl_237});
  assign INNER_LOOP_b_and_6_nl = and_dcpl_132 & and_dcpl_217;
  assign INNER_LOOP_b_and_7_nl = and_dcpl_133 & and_dcpl_217;
  assign INNER_LOOP_b_and_8_nl = and_dcpl_134 & and_dcpl_217;
  assign INNER_LOOP_b_and_9_nl = and_dcpl_135 & and_dcpl_217;
  assign INNER_LOOP_b_mux1h_39_nl = MUX1HOT_v_64_8_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, INNER_LOOP_w_mux1h_1_itm, INNER_LOOP_w_mux1h_2_itm,
      INNER_LOOP_w_mux1h_3_itm, ({55'b0000000000000000000000000000000000000000000000000000000
      , OUTER_LOOP_m_lshift_psp_sva}), {INNER_LOOP_b_and_6_nl , INNER_LOOP_b_and_7_nl
      , INNER_LOOP_b_and_8_nl , INNER_LOOP_b_and_9_nl , and_dcpl_223 , and_dcpl_229
      , and_dcpl_235 , and_dcpl_237});
  assign z_out_4 = conv_u2u_128_128(INNER_LOOP_b_mux1h_38_nl * INNER_LOOP_b_mux1h_39_nl);

  function automatic [127:0] MUX1HOT_v_128_5_2;
    input [127:0] input_4;
    input [127:0] input_3;
    input [127:0] input_2;
    input [127:0] input_1;
    input [127:0] input_0;
    input [4:0] sel;
    reg [127:0] result;
  begin
    result = input_0 & {128{sel[0]}};
    result = result | ( input_1 & {128{sel[1]}});
    result = result | ( input_2 & {128{sel[2]}});
    result = result | ( input_3 & {128{sel[3]}});
    result = result | ( input_4 & {128{sel[4]}});
    MUX1HOT_v_128_5_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_5_2;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [4:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    MUX1HOT_v_64_5_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_8_2;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [7:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    MUX1HOT_v_64_8_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_9_2;
    input [63:0] input_8;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [8:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    result = result | ( input_6 & {64{sel[6]}});
    result = result | ( input_7 & {64{sel[7]}});
    result = result | ( input_8 & {64{sel[8]}});
    MUX1HOT_v_64_9_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_5_2;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [4:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    MUX1HOT_v_8_5_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_6_2;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [5:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    result = result | ( input_5 & {8{sel[5]}});
    MUX1HOT_v_8_6_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_7_2;
    input [7:0] input_6;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [6:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    result = result | ( input_5 & {8{sel[5]}});
    result = result | ( input_6 & {8{sel[6]}});
    MUX1HOT_v_8_7_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [63:0] readslicef_65_64_1;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_65_64_1 = tmp[63:0];
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_1_9 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_9 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_10 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [127:0] conv_u2u_128_128 ;
    input [127:0]  vector ;
  begin
    conv_u2u_128_128 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT
// ------------------------------------------------------------------


module stockham_DIT (
  clk, rst, xt_rsc_0_0_wadr, xt_rsc_0_0_d, xt_rsc_0_0_we, xt_rsc_0_0_radr, xt_rsc_0_0_q,
      xt_rsc_triosy_0_0_lz, xt_rsc_0_1_wadr, xt_rsc_0_1_d, xt_rsc_0_1_we, xt_rsc_0_1_radr,
      xt_rsc_0_1_q, xt_rsc_triosy_0_1_lz, xt_rsc_0_2_wadr, xt_rsc_0_2_d, xt_rsc_0_2_we,
      xt_rsc_0_2_radr, xt_rsc_0_2_q, xt_rsc_triosy_0_2_lz, xt_rsc_0_3_wadr, xt_rsc_0_3_d,
      xt_rsc_0_3_we, xt_rsc_0_3_radr, xt_rsc_0_3_q, xt_rsc_triosy_0_3_lz, p_rsc_dat,
      p_rsc_triosy_lz, g_rsc_dat, g_rsc_triosy_lz, twiddle_rsc_0_0_radr, twiddle_rsc_0_0_q,
      twiddle_rsc_triosy_0_0_lz, twiddle_rsc_0_1_radr, twiddle_rsc_0_1_q, twiddle_rsc_triosy_0_1_lz,
      twiddle_rsc_0_2_radr, twiddle_rsc_0_2_q, twiddle_rsc_triosy_0_2_lz, twiddle_rsc_0_3_radr,
      twiddle_rsc_0_3_q, twiddle_rsc_triosy_0_3_lz
);
  input clk;
  input rst;
  output [7:0] xt_rsc_0_0_wadr;
  output [63:0] xt_rsc_0_0_d;
  output xt_rsc_0_0_we;
  output [7:0] xt_rsc_0_0_radr;
  input [63:0] xt_rsc_0_0_q;
  output xt_rsc_triosy_0_0_lz;
  output [7:0] xt_rsc_0_1_wadr;
  output [63:0] xt_rsc_0_1_d;
  output xt_rsc_0_1_we;
  output [7:0] xt_rsc_0_1_radr;
  input [63:0] xt_rsc_0_1_q;
  output xt_rsc_triosy_0_1_lz;
  output [7:0] xt_rsc_0_2_wadr;
  output [63:0] xt_rsc_0_2_d;
  output xt_rsc_0_2_we;
  output [7:0] xt_rsc_0_2_radr;
  input [63:0] xt_rsc_0_2_q;
  output xt_rsc_triosy_0_2_lz;
  output [7:0] xt_rsc_0_3_wadr;
  output [63:0] xt_rsc_0_3_d;
  output xt_rsc_0_3_we;
  output [7:0] xt_rsc_0_3_radr;
  input [63:0] xt_rsc_0_3_q;
  output xt_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] g_rsc_dat;
  output g_rsc_triosy_lz;
  output [7:0] twiddle_rsc_0_0_radr;
  input [63:0] twiddle_rsc_0_0_q;
  output twiddle_rsc_triosy_0_0_lz;
  output [7:0] twiddle_rsc_0_1_radr;
  input [63:0] twiddle_rsc_0_1_q;
  output twiddle_rsc_triosy_0_1_lz;
  output [7:0] twiddle_rsc_0_2_radr;
  input [63:0] twiddle_rsc_0_2_q;
  output twiddle_rsc_triosy_0_2_lz;
  output [7:0] twiddle_rsc_0_3_radr;
  input [63:0] twiddle_rsc_0_3_q;
  output twiddle_rsc_triosy_0_3_lz;


  // Interconnect Declarations
  wire yt_rsc_0_0_i_clken_d;
  wire [63:0] yt_rsc_0_0_i_q_d;
  wire yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_1_i_clken_d;
  wire [63:0] yt_rsc_0_1_i_q_d;
  wire yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_2_i_clken_d;
  wire [63:0] yt_rsc_0_2_i_q_d;
  wire yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_3_i_clken_d;
  wire [63:0] yt_rsc_0_3_i_q_d;
  wire yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_0_i_q_d;
  wire xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_1_i_q_d;
  wire xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_2_i_q_d;
  wire xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] xt_rsc_0_3_i_q_d;
  wire xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_0_i_q_d;
  wire twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_1_i_q_d;
  wire twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_2_i_q_d;
  wire twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsc_0_3_i_q_d;
  wire twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_0_0_clken;
  wire [63:0] yt_rsc_0_0_q;
  wire [7:0] yt_rsc_0_0_radr;
  wire yt_rsc_0_0_we;
  wire [63:0] yt_rsc_0_0_d;
  wire [7:0] yt_rsc_0_0_wadr;
  wire yt_rsc_0_1_clken;
  wire [63:0] yt_rsc_0_1_q;
  wire [7:0] yt_rsc_0_1_radr;
  wire yt_rsc_0_1_we;
  wire [63:0] yt_rsc_0_1_d;
  wire [7:0] yt_rsc_0_1_wadr;
  wire yt_rsc_0_2_clken;
  wire [63:0] yt_rsc_0_2_q;
  wire [7:0] yt_rsc_0_2_radr;
  wire yt_rsc_0_2_we;
  wire [63:0] yt_rsc_0_2_d;
  wire [7:0] yt_rsc_0_2_wadr;
  wire yt_rsc_0_3_clken;
  wire [63:0] yt_rsc_0_3_q;
  wire [7:0] yt_rsc_0_3_radr;
  wire yt_rsc_0_3_we;
  wire [63:0] yt_rsc_0_3_d;
  wire [7:0] yt_rsc_0_3_wadr;
  wire [63:0] yt_rsc_0_0_i_d_d_iff;
  wire [7:0] yt_rsc_0_0_i_radr_d_iff;
  wire [7:0] yt_rsc_0_0_i_wadr_d_iff;
  wire yt_rsc_0_0_i_we_d_iff;
  wire [7:0] yt_rsc_0_1_i_radr_d_iff;
  wire [7:0] yt_rsc_0_1_i_wadr_d_iff;
  wire yt_rsc_0_1_i_we_d_iff;
  wire [7:0] yt_rsc_0_2_i_radr_d_iff;
  wire [7:0] yt_rsc_0_2_i_wadr_d_iff;
  wire yt_rsc_0_2_i_we_d_iff;
  wire [7:0] yt_rsc_0_3_i_radr_d_iff;
  wire [7:0] yt_rsc_0_3_i_wadr_d_iff;
  wire yt_rsc_0_3_i_we_d_iff;
  wire xt_rsc_0_0_i_we_d_iff;
  wire xt_rsc_0_1_i_we_d_iff;
  wire xt_rsc_0_2_i_we_d_iff;
  wire xt_rsc_0_3_i_we_d_iff;
  wire [7:0] twiddle_rsc_0_0_i_radr_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd8),
  .data_width(32'sd64),
  .depth(32'sd256),
  .latency(32'sd1)) yt_rsc_0_0_comp (
      .clk(clk),
      .clken(yt_rsc_0_0_clken),
      .d(yt_rsc_0_0_d),
      .q(yt_rsc_0_0_q),
      .radr(yt_rsc_0_0_radr),
      .wadr(yt_rsc_0_0_wadr),
      .we(yt_rsc_0_0_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd8),
  .data_width(32'sd64),
  .depth(32'sd256),
  .latency(32'sd1)) yt_rsc_0_1_comp (
      .clk(clk),
      .clken(yt_rsc_0_1_clken),
      .d(yt_rsc_0_1_d),
      .q(yt_rsc_0_1_q),
      .radr(yt_rsc_0_1_radr),
      .wadr(yt_rsc_0_1_wadr),
      .we(yt_rsc_0_1_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd8),
  .data_width(32'sd64),
  .depth(32'sd256),
  .latency(32'sd1)) yt_rsc_0_2_comp (
      .clk(clk),
      .clken(yt_rsc_0_2_clken),
      .d(yt_rsc_0_2_d),
      .q(yt_rsc_0_2_q),
      .radr(yt_rsc_0_2_radr),
      .wadr(yt_rsc_0_2_wadr),
      .we(yt_rsc_0_2_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd8),
  .data_width(32'sd64),
  .depth(32'sd256),
  .latency(32'sd1)) yt_rsc_0_3_comp (
      .clk(clk),
      .clken(yt_rsc_0_3_clken),
      .d(yt_rsc_0_3_d),
      .q(yt_rsc_0_3_q),
      .radr(yt_rsc_0_3_radr),
      .wadr(yt_rsc_0_3_wadr),
      .we(yt_rsc_0_3_we)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen yt_rsc_0_0_i
      (
      .clken(yt_rsc_0_0_clken),
      .q(yt_rsc_0_0_q),
      .radr(yt_rsc_0_0_radr),
      .we(yt_rsc_0_0_we),
      .d(yt_rsc_0_0_d),
      .wadr(yt_rsc_0_0_wadr),
      .clken_d(yt_rsc_0_0_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_0_i_q_d),
      .radr_d(yt_rsc_0_0_i_radr_d_iff),
      .wadr_d(yt_rsc_0_0_i_wadr_d_iff),
      .we_d(yt_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen yt_rsc_0_1_i
      (
      .clken(yt_rsc_0_1_clken),
      .q(yt_rsc_0_1_q),
      .radr(yt_rsc_0_1_radr),
      .we(yt_rsc_0_1_we),
      .d(yt_rsc_0_1_d),
      .wadr(yt_rsc_0_1_wadr),
      .clken_d(yt_rsc_0_1_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_1_i_q_d),
      .radr_d(yt_rsc_0_1_i_radr_d_iff),
      .wadr_d(yt_rsc_0_1_i_wadr_d_iff),
      .we_d(yt_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen yt_rsc_0_2_i
      (
      .clken(yt_rsc_0_2_clken),
      .q(yt_rsc_0_2_q),
      .radr(yt_rsc_0_2_radr),
      .we(yt_rsc_0_2_we),
      .d(yt_rsc_0_2_d),
      .wadr(yt_rsc_0_2_wadr),
      .clken_d(yt_rsc_0_2_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_2_i_q_d),
      .radr_d(yt_rsc_0_2_i_radr_d_iff),
      .wadr_d(yt_rsc_0_2_i_wadr_d_iff),
      .we_d(yt_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen yt_rsc_0_3_i
      (
      .clken(yt_rsc_0_3_clken),
      .q(yt_rsc_0_3_q),
      .radr(yt_rsc_0_3_radr),
      .we(yt_rsc_0_3_we),
      .d(yt_rsc_0_3_d),
      .wadr(yt_rsc_0_3_wadr),
      .clken_d(yt_rsc_0_3_i_clken_d),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(yt_rsc_0_3_i_q_d),
      .radr_d(yt_rsc_0_3_i_radr_d_iff),
      .wadr_d(yt_rsc_0_3_i_wadr_d_iff),
      .we_d(yt_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen xt_rsc_0_0_i
      (
      .q(xt_rsc_0_0_q),
      .radr(xt_rsc_0_0_radr),
      .we(xt_rsc_0_0_we),
      .d(xt_rsc_0_0_d),
      .wadr(xt_rsc_0_0_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_0_i_q_d),
      .radr_d(yt_rsc_0_0_i_radr_d_iff),
      .wadr_d(yt_rsc_0_0_i_wadr_d_iff),
      .we_d(xt_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen xt_rsc_0_1_i
      (
      .q(xt_rsc_0_1_q),
      .radr(xt_rsc_0_1_radr),
      .we(xt_rsc_0_1_we),
      .d(xt_rsc_0_1_d),
      .wadr(xt_rsc_0_1_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_1_i_q_d),
      .radr_d(yt_rsc_0_1_i_radr_d_iff),
      .wadr_d(yt_rsc_0_1_i_wadr_d_iff),
      .we_d(xt_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen xt_rsc_0_2_i
      (
      .q(xt_rsc_0_2_q),
      .radr(xt_rsc_0_2_radr),
      .we(xt_rsc_0_2_we),
      .d(xt_rsc_0_2_d),
      .wadr(xt_rsc_0_2_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_2_i_q_d),
      .radr_d(yt_rsc_0_2_i_radr_d_iff),
      .wadr_d(yt_rsc_0_2_i_wadr_d_iff),
      .we_d(xt_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen xt_rsc_0_3_i
      (
      .q(xt_rsc_0_3_q),
      .radr(xt_rsc_0_3_radr),
      .we(xt_rsc_0_3_we),
      .d(xt_rsc_0_3_d),
      .wadr(xt_rsc_0_3_wadr),
      .d_d(yt_rsc_0_0_i_d_d_iff),
      .q_d(xt_rsc_0_3_i_q_d),
      .radr_d(yt_rsc_0_3_i_radr_d_iff),
      .wadr_d(yt_rsc_0_3_i_wadr_d_iff),
      .we_d(xt_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen twiddle_rsc_0_0_i
      (
      .q(twiddle_rsc_0_0_q),
      .radr(twiddle_rsc_0_0_radr),
      .q_d(twiddle_rsc_0_0_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen twiddle_rsc_0_1_i
      (
      .q(twiddle_rsc_0_1_q),
      .radr(twiddle_rsc_0_1_radr),
      .q_d(twiddle_rsc_0_1_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen twiddle_rsc_0_2_i
      (
      .q(twiddle_rsc_0_2_q),
      .radr(twiddle_rsc_0_2_radr),
      .q_d(twiddle_rsc_0_2_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen twiddle_rsc_0_3_i
      (
      .q(twiddle_rsc_0_3_q),
      .radr(twiddle_rsc_0_3_radr),
      .q_d(twiddle_rsc_0_3_i_q_d),
      .radr_d(twiddle_rsc_0_0_i_radr_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_core stockham_DIT_core_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_triosy_0_0_lz(xt_rsc_triosy_0_0_lz),
      .xt_rsc_triosy_0_1_lz(xt_rsc_triosy_0_1_lz),
      .xt_rsc_triosy_0_2_lz(xt_rsc_triosy_0_2_lz),
      .xt_rsc_triosy_0_3_lz(xt_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .g_rsc_triosy_lz(g_rsc_triosy_lz),
      .twiddle_rsc_triosy_0_0_lz(twiddle_rsc_triosy_0_0_lz),
      .twiddle_rsc_triosy_0_1_lz(twiddle_rsc_triosy_0_1_lz),
      .twiddle_rsc_triosy_0_2_lz(twiddle_rsc_triosy_0_2_lz),
      .twiddle_rsc_triosy_0_3_lz(twiddle_rsc_triosy_0_3_lz),
      .yt_rsc_0_0_i_clken_d(yt_rsc_0_0_i_clken_d),
      .yt_rsc_0_0_i_q_d(yt_rsc_0_0_i_q_d),
      .yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_1_i_clken_d(yt_rsc_0_1_i_clken_d),
      .yt_rsc_0_1_i_q_d(yt_rsc_0_1_i_q_d),
      .yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_2_i_clken_d(yt_rsc_0_2_i_clken_d),
      .yt_rsc_0_2_i_q_d(yt_rsc_0_2_i_q_d),
      .yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_3_i_clken_d(yt_rsc_0_3_i_clken_d),
      .yt_rsc_0_3_i_q_d(yt_rsc_0_3_i_q_d),
      .yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_0_i_q_d(xt_rsc_0_0_i_q_d),
      .xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_1_i_q_d(xt_rsc_0_1_i_q_d),
      .xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_2_i_q_d(xt_rsc_0_2_i_q_d),
      .xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsc_0_3_i_q_d(xt_rsc_0_3_i_q_d),
      .xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_0_i_q_d(twiddle_rsc_0_0_i_q_d),
      .twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_1_i_q_d(twiddle_rsc_0_1_i_q_d),
      .twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_2_i_q_d(twiddle_rsc_0_2_i_q_d),
      .twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsc_0_3_i_q_d(twiddle_rsc_0_3_i_q_d),
      .twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsc_0_0_i_d_d_pff(yt_rsc_0_0_i_d_d_iff),
      .yt_rsc_0_0_i_radr_d_pff(yt_rsc_0_0_i_radr_d_iff),
      .yt_rsc_0_0_i_wadr_d_pff(yt_rsc_0_0_i_wadr_d_iff),
      .yt_rsc_0_0_i_we_d_pff(yt_rsc_0_0_i_we_d_iff),
      .yt_rsc_0_1_i_radr_d_pff(yt_rsc_0_1_i_radr_d_iff),
      .yt_rsc_0_1_i_wadr_d_pff(yt_rsc_0_1_i_wadr_d_iff),
      .yt_rsc_0_1_i_we_d_pff(yt_rsc_0_1_i_we_d_iff),
      .yt_rsc_0_2_i_radr_d_pff(yt_rsc_0_2_i_radr_d_iff),
      .yt_rsc_0_2_i_wadr_d_pff(yt_rsc_0_2_i_wadr_d_iff),
      .yt_rsc_0_2_i_we_d_pff(yt_rsc_0_2_i_we_d_iff),
      .yt_rsc_0_3_i_radr_d_pff(yt_rsc_0_3_i_radr_d_iff),
      .yt_rsc_0_3_i_wadr_d_pff(yt_rsc_0_3_i_wadr_d_iff),
      .yt_rsc_0_3_i_we_d_pff(yt_rsc_0_3_i_we_d_iff),
      .xt_rsc_0_0_i_we_d_pff(xt_rsc_0_0_i_we_d_iff),
      .xt_rsc_0_1_i_we_d_pff(xt_rsc_0_1_i_we_d_iff),
      .xt_rsc_0_2_i_we_d_pff(xt_rsc_0_2_i_we_d_iff),
      .xt_rsc_0_3_i_we_d_pff(xt_rsc_0_3_i_we_d_iff),
      .twiddle_rsc_0_0_i_radr_d_pff(twiddle_rsc_0_0_i_radr_d_iff)
    );
endmodule



