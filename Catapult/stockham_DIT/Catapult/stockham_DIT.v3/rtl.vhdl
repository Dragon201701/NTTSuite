-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   yl7897@newnano.poly.edu
--  Generated date: Thu Jul 29 10:48:23 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen IS
  PORT(
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen;

ARCHITECTURE v3 OF stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    INNER_LOOP_C_147_tr0 : IN STD_LOGIC;
    OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
  );
END stockham_DIT_core_core_fsm;

ARCHITECTURE v3 OF stockham_DIT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  TYPE stockham_DIT_core_core_fsm_1_ST IS (main_C_0, OUTER_LOOP_C_0, INNER_LOOP_C_0,
      INNER_LOOP_C_1, INNER_LOOP_C_2, INNER_LOOP_C_3, INNER_LOOP_C_4, INNER_LOOP_C_5,
      INNER_LOOP_C_6, INNER_LOOP_C_7, INNER_LOOP_C_8, INNER_LOOP_C_9, INNER_LOOP_C_10,
      INNER_LOOP_C_11, INNER_LOOP_C_12, INNER_LOOP_C_13, INNER_LOOP_C_14, INNER_LOOP_C_15,
      INNER_LOOP_C_16, INNER_LOOP_C_17, INNER_LOOP_C_18, INNER_LOOP_C_19, INNER_LOOP_C_20,
      INNER_LOOP_C_21, INNER_LOOP_C_22, INNER_LOOP_C_23, INNER_LOOP_C_24, INNER_LOOP_C_25,
      INNER_LOOP_C_26, INNER_LOOP_C_27, INNER_LOOP_C_28, INNER_LOOP_C_29, INNER_LOOP_C_30,
      INNER_LOOP_C_31, INNER_LOOP_C_32, INNER_LOOP_C_33, INNER_LOOP_C_34, INNER_LOOP_C_35,
      INNER_LOOP_C_36, INNER_LOOP_C_37, INNER_LOOP_C_38, INNER_LOOP_C_39, INNER_LOOP_C_40,
      INNER_LOOP_C_41, INNER_LOOP_C_42, INNER_LOOP_C_43, INNER_LOOP_C_44, INNER_LOOP_C_45,
      INNER_LOOP_C_46, INNER_LOOP_C_47, INNER_LOOP_C_48, INNER_LOOP_C_49, INNER_LOOP_C_50,
      INNER_LOOP_C_51, INNER_LOOP_C_52, INNER_LOOP_C_53, INNER_LOOP_C_54, INNER_LOOP_C_55,
      INNER_LOOP_C_56, INNER_LOOP_C_57, INNER_LOOP_C_58, INNER_LOOP_C_59, INNER_LOOP_C_60,
      INNER_LOOP_C_61, INNER_LOOP_C_62, INNER_LOOP_C_63, INNER_LOOP_C_64, INNER_LOOP_C_65,
      INNER_LOOP_C_66, INNER_LOOP_C_67, INNER_LOOP_C_68, INNER_LOOP_C_69, INNER_LOOP_C_70,
      INNER_LOOP_C_71, INNER_LOOP_C_72, INNER_LOOP_C_73, INNER_LOOP_C_74, INNER_LOOP_C_75,
      INNER_LOOP_C_76, INNER_LOOP_C_77, INNER_LOOP_C_78, INNER_LOOP_C_79, INNER_LOOP_C_80,
      INNER_LOOP_C_81, INNER_LOOP_C_82, INNER_LOOP_C_83, INNER_LOOP_C_84, INNER_LOOP_C_85,
      INNER_LOOP_C_86, INNER_LOOP_C_87, INNER_LOOP_C_88, INNER_LOOP_C_89, INNER_LOOP_C_90,
      INNER_LOOP_C_91, INNER_LOOP_C_92, INNER_LOOP_C_93, INNER_LOOP_C_94, INNER_LOOP_C_95,
      INNER_LOOP_C_96, INNER_LOOP_C_97, INNER_LOOP_C_98, INNER_LOOP_C_99, INNER_LOOP_C_100,
      INNER_LOOP_C_101, INNER_LOOP_C_102, INNER_LOOP_C_103, INNER_LOOP_C_104, INNER_LOOP_C_105,
      INNER_LOOP_C_106, INNER_LOOP_C_107, INNER_LOOP_C_108, INNER_LOOP_C_109, INNER_LOOP_C_110,
      INNER_LOOP_C_111, INNER_LOOP_C_112, INNER_LOOP_C_113, INNER_LOOP_C_114, INNER_LOOP_C_115,
      INNER_LOOP_C_116, INNER_LOOP_C_117, INNER_LOOP_C_118, INNER_LOOP_C_119, INNER_LOOP_C_120,
      INNER_LOOP_C_121, INNER_LOOP_C_122, INNER_LOOP_C_123, INNER_LOOP_C_124, INNER_LOOP_C_125,
      INNER_LOOP_C_126, INNER_LOOP_C_127, INNER_LOOP_C_128, INNER_LOOP_C_129, INNER_LOOP_C_130,
      INNER_LOOP_C_131, INNER_LOOP_C_132, INNER_LOOP_C_133, INNER_LOOP_C_134, INNER_LOOP_C_135,
      INNER_LOOP_C_136, INNER_LOOP_C_137, INNER_LOOP_C_138, INNER_LOOP_C_139, INNER_LOOP_C_140,
      INNER_LOOP_C_141, INNER_LOOP_C_142, INNER_LOOP_C_143, INNER_LOOP_C_144, INNER_LOOP_C_145,
      INNER_LOOP_C_146, INNER_LOOP_C_147, OUTER_LOOP_C_1, main_C_1);

  SIGNAL state_var : stockham_DIT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : stockham_DIT_core_core_fsm_1_ST;

BEGIN
  stockham_DIT_core_core_fsm_1 : PROCESS (INNER_LOOP_C_147_tr0, OUTER_LOOP_C_1_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN OUTER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001");
        state_var_NS <= INNER_LOOP_C_0;
      WHEN INNER_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010");
        state_var_NS <= INNER_LOOP_C_1;
      WHEN INNER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000011");
        state_var_NS <= INNER_LOOP_C_2;
      WHEN INNER_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100");
        state_var_NS <= INNER_LOOP_C_3;
      WHEN INNER_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000101");
        state_var_NS <= INNER_LOOP_C_4;
      WHEN INNER_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000110");
        state_var_NS <= INNER_LOOP_C_5;
      WHEN INNER_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000111");
        state_var_NS <= INNER_LOOP_C_6;
      WHEN INNER_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000");
        state_var_NS <= INNER_LOOP_C_7;
      WHEN INNER_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001001");
        state_var_NS <= INNER_LOOP_C_8;
      WHEN INNER_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001010");
        state_var_NS <= INNER_LOOP_C_9;
      WHEN INNER_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001011");
        state_var_NS <= INNER_LOOP_C_10;
      WHEN INNER_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001100");
        state_var_NS <= INNER_LOOP_C_11;
      WHEN INNER_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001101");
        state_var_NS <= INNER_LOOP_C_12;
      WHEN INNER_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001110");
        state_var_NS <= INNER_LOOP_C_13;
      WHEN INNER_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001111");
        state_var_NS <= INNER_LOOP_C_14;
      WHEN INNER_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000");
        state_var_NS <= INNER_LOOP_C_15;
      WHEN INNER_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010001");
        state_var_NS <= INNER_LOOP_C_16;
      WHEN INNER_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010010");
        state_var_NS <= INNER_LOOP_C_17;
      WHEN INNER_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010011");
        state_var_NS <= INNER_LOOP_C_18;
      WHEN INNER_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010100");
        state_var_NS <= INNER_LOOP_C_19;
      WHEN INNER_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010101");
        state_var_NS <= INNER_LOOP_C_20;
      WHEN INNER_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010110");
        state_var_NS <= INNER_LOOP_C_21;
      WHEN INNER_LOOP_C_21 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010111");
        state_var_NS <= INNER_LOOP_C_22;
      WHEN INNER_LOOP_C_22 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011000");
        state_var_NS <= INNER_LOOP_C_23;
      WHEN INNER_LOOP_C_23 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011001");
        state_var_NS <= INNER_LOOP_C_24;
      WHEN INNER_LOOP_C_24 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011010");
        state_var_NS <= INNER_LOOP_C_25;
      WHEN INNER_LOOP_C_25 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011011");
        state_var_NS <= INNER_LOOP_C_26;
      WHEN INNER_LOOP_C_26 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011100");
        state_var_NS <= INNER_LOOP_C_27;
      WHEN INNER_LOOP_C_27 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011101");
        state_var_NS <= INNER_LOOP_C_28;
      WHEN INNER_LOOP_C_28 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011110");
        state_var_NS <= INNER_LOOP_C_29;
      WHEN INNER_LOOP_C_29 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00011111");
        state_var_NS <= INNER_LOOP_C_30;
      WHEN INNER_LOOP_C_30 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000");
        state_var_NS <= INNER_LOOP_C_31;
      WHEN INNER_LOOP_C_31 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100001");
        state_var_NS <= INNER_LOOP_C_32;
      WHEN INNER_LOOP_C_32 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100010");
        state_var_NS <= INNER_LOOP_C_33;
      WHEN INNER_LOOP_C_33 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100011");
        state_var_NS <= INNER_LOOP_C_34;
      WHEN INNER_LOOP_C_34 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100100");
        state_var_NS <= INNER_LOOP_C_35;
      WHEN INNER_LOOP_C_35 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100101");
        state_var_NS <= INNER_LOOP_C_36;
      WHEN INNER_LOOP_C_36 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100110");
        state_var_NS <= INNER_LOOP_C_37;
      WHEN INNER_LOOP_C_37 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100111");
        state_var_NS <= INNER_LOOP_C_38;
      WHEN INNER_LOOP_C_38 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101000");
        state_var_NS <= INNER_LOOP_C_39;
      WHEN INNER_LOOP_C_39 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101001");
        state_var_NS <= INNER_LOOP_C_40;
      WHEN INNER_LOOP_C_40 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101010");
        state_var_NS <= INNER_LOOP_C_41;
      WHEN INNER_LOOP_C_41 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101011");
        state_var_NS <= INNER_LOOP_C_42;
      WHEN INNER_LOOP_C_42 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101100");
        state_var_NS <= INNER_LOOP_C_43;
      WHEN INNER_LOOP_C_43 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101101");
        state_var_NS <= INNER_LOOP_C_44;
      WHEN INNER_LOOP_C_44 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101110");
        state_var_NS <= INNER_LOOP_C_45;
      WHEN INNER_LOOP_C_45 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00101111");
        state_var_NS <= INNER_LOOP_C_46;
      WHEN INNER_LOOP_C_46 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110000");
        state_var_NS <= INNER_LOOP_C_47;
      WHEN INNER_LOOP_C_47 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110001");
        state_var_NS <= INNER_LOOP_C_48;
      WHEN INNER_LOOP_C_48 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110010");
        state_var_NS <= INNER_LOOP_C_49;
      WHEN INNER_LOOP_C_49 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110011");
        state_var_NS <= INNER_LOOP_C_50;
      WHEN INNER_LOOP_C_50 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110100");
        state_var_NS <= INNER_LOOP_C_51;
      WHEN INNER_LOOP_C_51 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110101");
        state_var_NS <= INNER_LOOP_C_52;
      WHEN INNER_LOOP_C_52 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110110");
        state_var_NS <= INNER_LOOP_C_53;
      WHEN INNER_LOOP_C_53 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00110111");
        state_var_NS <= INNER_LOOP_C_54;
      WHEN INNER_LOOP_C_54 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111000");
        state_var_NS <= INNER_LOOP_C_55;
      WHEN INNER_LOOP_C_55 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111001");
        state_var_NS <= INNER_LOOP_C_56;
      WHEN INNER_LOOP_C_56 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111010");
        state_var_NS <= INNER_LOOP_C_57;
      WHEN INNER_LOOP_C_57 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111011");
        state_var_NS <= INNER_LOOP_C_58;
      WHEN INNER_LOOP_C_58 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111100");
        state_var_NS <= INNER_LOOP_C_59;
      WHEN INNER_LOOP_C_59 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111101");
        state_var_NS <= INNER_LOOP_C_60;
      WHEN INNER_LOOP_C_60 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111110");
        state_var_NS <= INNER_LOOP_C_61;
      WHEN INNER_LOOP_C_61 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00111111");
        state_var_NS <= INNER_LOOP_C_62;
      WHEN INNER_LOOP_C_62 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000");
        state_var_NS <= INNER_LOOP_C_63;
      WHEN INNER_LOOP_C_63 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000001");
        state_var_NS <= INNER_LOOP_C_64;
      WHEN INNER_LOOP_C_64 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000010");
        state_var_NS <= INNER_LOOP_C_65;
      WHEN INNER_LOOP_C_65 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000011");
        state_var_NS <= INNER_LOOP_C_66;
      WHEN INNER_LOOP_C_66 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000100");
        state_var_NS <= INNER_LOOP_C_67;
      WHEN INNER_LOOP_C_67 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000101");
        state_var_NS <= INNER_LOOP_C_68;
      WHEN INNER_LOOP_C_68 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000110");
        state_var_NS <= INNER_LOOP_C_69;
      WHEN INNER_LOOP_C_69 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000111");
        state_var_NS <= INNER_LOOP_C_70;
      WHEN INNER_LOOP_C_70 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001000");
        state_var_NS <= INNER_LOOP_C_71;
      WHEN INNER_LOOP_C_71 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001001");
        state_var_NS <= INNER_LOOP_C_72;
      WHEN INNER_LOOP_C_72 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001010");
        state_var_NS <= INNER_LOOP_C_73;
      WHEN INNER_LOOP_C_73 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001011");
        state_var_NS <= INNER_LOOP_C_74;
      WHEN INNER_LOOP_C_74 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001100");
        state_var_NS <= INNER_LOOP_C_75;
      WHEN INNER_LOOP_C_75 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001101");
        state_var_NS <= INNER_LOOP_C_76;
      WHEN INNER_LOOP_C_76 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001110");
        state_var_NS <= INNER_LOOP_C_77;
      WHEN INNER_LOOP_C_77 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01001111");
        state_var_NS <= INNER_LOOP_C_78;
      WHEN INNER_LOOP_C_78 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010000");
        state_var_NS <= INNER_LOOP_C_79;
      WHEN INNER_LOOP_C_79 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010001");
        state_var_NS <= INNER_LOOP_C_80;
      WHEN INNER_LOOP_C_80 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010010");
        state_var_NS <= INNER_LOOP_C_81;
      WHEN INNER_LOOP_C_81 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010011");
        state_var_NS <= INNER_LOOP_C_82;
      WHEN INNER_LOOP_C_82 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010100");
        state_var_NS <= INNER_LOOP_C_83;
      WHEN INNER_LOOP_C_83 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010101");
        state_var_NS <= INNER_LOOP_C_84;
      WHEN INNER_LOOP_C_84 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010110");
        state_var_NS <= INNER_LOOP_C_85;
      WHEN INNER_LOOP_C_85 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01010111");
        state_var_NS <= INNER_LOOP_C_86;
      WHEN INNER_LOOP_C_86 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011000");
        state_var_NS <= INNER_LOOP_C_87;
      WHEN INNER_LOOP_C_87 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011001");
        state_var_NS <= INNER_LOOP_C_88;
      WHEN INNER_LOOP_C_88 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011010");
        state_var_NS <= INNER_LOOP_C_89;
      WHEN INNER_LOOP_C_89 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011011");
        state_var_NS <= INNER_LOOP_C_90;
      WHEN INNER_LOOP_C_90 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011100");
        state_var_NS <= INNER_LOOP_C_91;
      WHEN INNER_LOOP_C_91 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011101");
        state_var_NS <= INNER_LOOP_C_92;
      WHEN INNER_LOOP_C_92 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011110");
        state_var_NS <= INNER_LOOP_C_93;
      WHEN INNER_LOOP_C_93 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01011111");
        state_var_NS <= INNER_LOOP_C_94;
      WHEN INNER_LOOP_C_94 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100000");
        state_var_NS <= INNER_LOOP_C_95;
      WHEN INNER_LOOP_C_95 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100001");
        state_var_NS <= INNER_LOOP_C_96;
      WHEN INNER_LOOP_C_96 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100010");
        state_var_NS <= INNER_LOOP_C_97;
      WHEN INNER_LOOP_C_97 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100011");
        state_var_NS <= INNER_LOOP_C_98;
      WHEN INNER_LOOP_C_98 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100100");
        state_var_NS <= INNER_LOOP_C_99;
      WHEN INNER_LOOP_C_99 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100101");
        state_var_NS <= INNER_LOOP_C_100;
      WHEN INNER_LOOP_C_100 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100110");
        state_var_NS <= INNER_LOOP_C_101;
      WHEN INNER_LOOP_C_101 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01100111");
        state_var_NS <= INNER_LOOP_C_102;
      WHEN INNER_LOOP_C_102 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101000");
        state_var_NS <= INNER_LOOP_C_103;
      WHEN INNER_LOOP_C_103 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101001");
        state_var_NS <= INNER_LOOP_C_104;
      WHEN INNER_LOOP_C_104 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101010");
        state_var_NS <= INNER_LOOP_C_105;
      WHEN INNER_LOOP_C_105 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101011");
        state_var_NS <= INNER_LOOP_C_106;
      WHEN INNER_LOOP_C_106 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101100");
        state_var_NS <= INNER_LOOP_C_107;
      WHEN INNER_LOOP_C_107 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101101");
        state_var_NS <= INNER_LOOP_C_108;
      WHEN INNER_LOOP_C_108 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101110");
        state_var_NS <= INNER_LOOP_C_109;
      WHEN INNER_LOOP_C_109 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01101111");
        state_var_NS <= INNER_LOOP_C_110;
      WHEN INNER_LOOP_C_110 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110000");
        state_var_NS <= INNER_LOOP_C_111;
      WHEN INNER_LOOP_C_111 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110001");
        state_var_NS <= INNER_LOOP_C_112;
      WHEN INNER_LOOP_C_112 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110010");
        state_var_NS <= INNER_LOOP_C_113;
      WHEN INNER_LOOP_C_113 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110011");
        state_var_NS <= INNER_LOOP_C_114;
      WHEN INNER_LOOP_C_114 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110100");
        state_var_NS <= INNER_LOOP_C_115;
      WHEN INNER_LOOP_C_115 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110101");
        state_var_NS <= INNER_LOOP_C_116;
      WHEN INNER_LOOP_C_116 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110110");
        state_var_NS <= INNER_LOOP_C_117;
      WHEN INNER_LOOP_C_117 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01110111");
        state_var_NS <= INNER_LOOP_C_118;
      WHEN INNER_LOOP_C_118 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111000");
        state_var_NS <= INNER_LOOP_C_119;
      WHEN INNER_LOOP_C_119 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111001");
        state_var_NS <= INNER_LOOP_C_120;
      WHEN INNER_LOOP_C_120 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111010");
        state_var_NS <= INNER_LOOP_C_121;
      WHEN INNER_LOOP_C_121 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111011");
        state_var_NS <= INNER_LOOP_C_122;
      WHEN INNER_LOOP_C_122 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111100");
        state_var_NS <= INNER_LOOP_C_123;
      WHEN INNER_LOOP_C_123 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111101");
        state_var_NS <= INNER_LOOP_C_124;
      WHEN INNER_LOOP_C_124 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111110");
        state_var_NS <= INNER_LOOP_C_125;
      WHEN INNER_LOOP_C_125 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01111111");
        state_var_NS <= INNER_LOOP_C_126;
      WHEN INNER_LOOP_C_126 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000");
        state_var_NS <= INNER_LOOP_C_127;
      WHEN INNER_LOOP_C_127 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000001");
        state_var_NS <= INNER_LOOP_C_128;
      WHEN INNER_LOOP_C_128 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000010");
        state_var_NS <= INNER_LOOP_C_129;
      WHEN INNER_LOOP_C_129 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000011");
        state_var_NS <= INNER_LOOP_C_130;
      WHEN INNER_LOOP_C_130 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000100");
        state_var_NS <= INNER_LOOP_C_131;
      WHEN INNER_LOOP_C_131 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000101");
        state_var_NS <= INNER_LOOP_C_132;
      WHEN INNER_LOOP_C_132 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000110");
        state_var_NS <= INNER_LOOP_C_133;
      WHEN INNER_LOOP_C_133 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000111");
        state_var_NS <= INNER_LOOP_C_134;
      WHEN INNER_LOOP_C_134 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001000");
        state_var_NS <= INNER_LOOP_C_135;
      WHEN INNER_LOOP_C_135 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001001");
        state_var_NS <= INNER_LOOP_C_136;
      WHEN INNER_LOOP_C_136 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001010");
        state_var_NS <= INNER_LOOP_C_137;
      WHEN INNER_LOOP_C_137 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001011");
        state_var_NS <= INNER_LOOP_C_138;
      WHEN INNER_LOOP_C_138 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001100");
        state_var_NS <= INNER_LOOP_C_139;
      WHEN INNER_LOOP_C_139 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001101");
        state_var_NS <= INNER_LOOP_C_140;
      WHEN INNER_LOOP_C_140 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001110");
        state_var_NS <= INNER_LOOP_C_141;
      WHEN INNER_LOOP_C_141 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10001111");
        state_var_NS <= INNER_LOOP_C_142;
      WHEN INNER_LOOP_C_142 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010000");
        state_var_NS <= INNER_LOOP_C_143;
      WHEN INNER_LOOP_C_143 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010001");
        state_var_NS <= INNER_LOOP_C_144;
      WHEN INNER_LOOP_C_144 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010010");
        state_var_NS <= INNER_LOOP_C_145;
      WHEN INNER_LOOP_C_145 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010011");
        state_var_NS <= INNER_LOOP_C_146;
      WHEN INNER_LOOP_C_146 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010100");
        state_var_NS <= INNER_LOOP_C_147;
      WHEN INNER_LOOP_C_147 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010101");
        IF ( INNER_LOOP_C_147_tr0 = '1' ) THEN
          state_var_NS <= OUTER_LOOP_C_1;
        ELSE
          state_var_NS <= INNER_LOOP_C_0;
        END IF;
      WHEN OUTER_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010110");
        IF ( OUTER_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= OUTER_LOOP_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10010111");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000");
        state_var_NS <= OUTER_LOOP_C_0;
    END CASE;
  END PROCESS stockham_DIT_core_core_fsm_1;

  stockham_DIT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS stockham_DIT_core_core_fsm_1_REG;

END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core_wait_dp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core_wait_dp IS
  PORT(
    yt_rsc_0_0_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_1_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_2_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_2_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_3_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_3_i_clken_d : OUT STD_LOGIC;
    ensig_cgo_iro : IN STD_LOGIC;
    yt_rsc_0_0_cgo : IN STD_LOGIC;
    yt_rsc_0_1_cgo : IN STD_LOGIC;
    yt_rsc_0_2_cgo : IN STD_LOGIC;
    yt_rsc_0_3_cgo : IN STD_LOGIC;
    ensig_cgo : IN STD_LOGIC;
    INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : OUT STD_LOGIC
  );
END stockham_DIT_core_wait_dp;

ARCHITECTURE v3 OF stockham_DIT_core_wait_dp IS
  -- Default Constants

BEGIN
  yt_rsc_0_0_i_clken_d <= yt_rsc_0_0_cgo OR yt_rsc_0_0_cgo_iro;
  yt_rsc_0_1_i_clken_d <= yt_rsc_0_1_cgo OR yt_rsc_0_1_cgo_iro;
  yt_rsc_0_2_i_clken_d <= yt_rsc_0_2_cgo OR yt_rsc_0_2_cgo_iro;
  yt_rsc_0_3_i_clken_d <= yt_rsc_0_3_cgo OR yt_rsc_0_3_cgo_iro;
  INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en <= ensig_cgo OR ensig_cgo_iro;
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    xt_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    xt_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_2_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_3_i_clken_d : OUT STD_LOGIC;
    yt_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    xt_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    twiddle_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    yt_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    yt_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
    yt_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_1_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
    yt_rsc_0_2_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_2_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
    yt_rsc_0_3_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_3_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    yt_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
    xt_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
    twiddle_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
  );
END stockham_DIT_core;

ARCHITECTURE v3 OF stockham_DIT_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_return_rsc_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : STD_LOGIC;
  SIGNAL INNER_LOOP_1_b_rem_cmp_a : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL nor_tmp_4 : STD_LOGIC;
  SIGNAL or_tmp_7 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_13 : STD_LOGIC;
  SIGNAL and_dcpl_14 : STD_LOGIC;
  SIGNAL and_dcpl_15 : STD_LOGIC;
  SIGNAL and_dcpl_16 : STD_LOGIC;
  SIGNAL and_dcpl_17 : STD_LOGIC;
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL and_dcpl_19 : STD_LOGIC;
  SIGNAL and_dcpl_21 : STD_LOGIC;
  SIGNAL and_dcpl_22 : STD_LOGIC;
  SIGNAL and_dcpl_23 : STD_LOGIC;
  SIGNAL mux_tmp_20 : STD_LOGIC;
  SIGNAL mux_tmp_21 : STD_LOGIC;
  SIGNAL nor_tmp_12 : STD_LOGIC;
  SIGNAL mux_tmp_24 : STD_LOGIC;
  SIGNAL or_tmp_18 : STD_LOGIC;
  SIGNAL or_tmp_19 : STD_LOGIC;
  SIGNAL and_dcpl_26 : STD_LOGIC;
  SIGNAL and_dcpl_27 : STD_LOGIC;
  SIGNAL and_dcpl_28 : STD_LOGIC;
  SIGNAL and_dcpl_29 : STD_LOGIC;
  SIGNAL and_dcpl_30 : STD_LOGIC;
  SIGNAL and_dcpl_31 : STD_LOGIC;
  SIGNAL and_dcpl_32 : STD_LOGIC;
  SIGNAL and_dcpl_33 : STD_LOGIC;
  SIGNAL and_dcpl_35 : STD_LOGIC;
  SIGNAL and_dcpl_36 : STD_LOGIC;
  SIGNAL and_dcpl_37 : STD_LOGIC;
  SIGNAL and_dcpl_38 : STD_LOGIC;
  SIGNAL or_tmp_25 : STD_LOGIC;
  SIGNAL or_tmp_29 : STD_LOGIC;
  SIGNAL or_tmp_33 : STD_LOGIC;
  SIGNAL nand_tmp_1 : STD_LOGIC;
  SIGNAL or_tmp_53 : STD_LOGIC;
  SIGNAL and_dcpl_39 : STD_LOGIC;
  SIGNAL and_dcpl_40 : STD_LOGIC;
  SIGNAL and_dcpl_41 : STD_LOGIC;
  SIGNAL and_dcpl_42 : STD_LOGIC;
  SIGNAL and_dcpl_43 : STD_LOGIC;
  SIGNAL and_dcpl_44 : STD_LOGIC;
  SIGNAL and_dcpl_46 : STD_LOGIC;
  SIGNAL and_dcpl_47 : STD_LOGIC;
  SIGNAL and_dcpl_49 : STD_LOGIC;
  SIGNAL and_dcpl_51 : STD_LOGIC;
  SIGNAL and_dcpl_52 : STD_LOGIC;
  SIGNAL and_dcpl_53 : STD_LOGIC;
  SIGNAL and_dcpl_54 : STD_LOGIC;
  SIGNAL and_dcpl_55 : STD_LOGIC;
  SIGNAL and_dcpl_57 : STD_LOGIC;
  SIGNAL and_dcpl_58 : STD_LOGIC;
  SIGNAL not_tmp_43 : STD_LOGIC;
  SIGNAL and_dcpl_61 : STD_LOGIC;
  SIGNAL not_tmp_45 : STD_LOGIC;
  SIGNAL not_tmp_47 : STD_LOGIC;
  SIGNAL or_tmp_78 : STD_LOGIC;
  SIGNAL or_tmp_80 : STD_LOGIC;
  SIGNAL or_tmp_82 : STD_LOGIC;
  SIGNAL mux_tmp_62 : STD_LOGIC;
  SIGNAL or_tmp_98 : STD_LOGIC;
  SIGNAL or_tmp_100 : STD_LOGIC;
  SIGNAL or_tmp_101 : STD_LOGIC;
  SIGNAL not_tmp_62 : STD_LOGIC;
  SIGNAL not_tmp_65 : STD_LOGIC;
  SIGNAL not_tmp_67 : STD_LOGIC;
  SIGNAL or_tmp_135 : STD_LOGIC;
  SIGNAL or_tmp_137 : STD_LOGIC;
  SIGNAL or_tmp_145 : STD_LOGIC;
  SIGNAL not_tmp_75 : STD_LOGIC;
  SIGNAL not_tmp_80 : STD_LOGIC;
  SIGNAL or_tmp_180 : STD_LOGIC;
  SIGNAL or_tmp_182 : STD_LOGIC;
  SIGNAL not_tmp_88 : STD_LOGIC;
  SIGNAL not_tmp_92 : STD_LOGIC;
  SIGNAL and_dcpl_73 : STD_LOGIC;
  SIGNAL and_dcpl_76 : STD_LOGIC;
  SIGNAL and_dcpl_86 : STD_LOGIC;
  SIGNAL and_dcpl_87 : STD_LOGIC;
  SIGNAL and_dcpl_96 : STD_LOGIC;
  SIGNAL and_dcpl_98 : STD_LOGIC;
  SIGNAL and_dcpl_99 : STD_LOGIC;
  SIGNAL and_dcpl_101 : STD_LOGIC;
  SIGNAL and_dcpl_107 : STD_LOGIC;
  SIGNAL and_dcpl_111 : STD_LOGIC;
  SIGNAL or_tmp_269 : STD_LOGIC;
  SIGNAL and_dcpl_121 : STD_LOGIC;
  SIGNAL or_tmp_277 : STD_LOGIC;
  SIGNAL and_dcpl_125 : STD_LOGIC;
  SIGNAL and_dcpl_126 : STD_LOGIC;
  SIGNAL nor_tmp_54 : STD_LOGIC;
  SIGNAL mux_tmp_193 : STD_LOGIC;
  SIGNAL mux_tmp_194 : STD_LOGIC;
  SIGNAL mux_tmp_195 : STD_LOGIC;
  SIGNAL mux_tmp_198 : STD_LOGIC;
  SIGNAL and_dcpl_128 : STD_LOGIC;
  SIGNAL not_tmp_130 : STD_LOGIC;
  SIGNAL or_dcpl_11 : STD_LOGIC;
  SIGNAL or_dcpl_12 : STD_LOGIC;
  SIGNAL or_dcpl_15 : STD_LOGIC;
  SIGNAL or_dcpl_16 : STD_LOGIC;
  SIGNAL and_dcpl_129 : STD_LOGIC;
  SIGNAL and_dcpl_130 : STD_LOGIC;
  SIGNAL and_dcpl_132 : STD_LOGIC;
  SIGNAL and_dcpl_133 : STD_LOGIC;
  SIGNAL and_dcpl_134 : STD_LOGIC;
  SIGNAL and_dcpl_135 : STD_LOGIC;
  SIGNAL and_dcpl_140 : STD_LOGIC;
  SIGNAL and_dcpl_141 : STD_LOGIC;
  SIGNAL and_dcpl_142 : STD_LOGIC;
  SIGNAL and_dcpl_144 : STD_LOGIC;
  SIGNAL and_dcpl_146 : STD_LOGIC;
  SIGNAL and_dcpl_148 : STD_LOGIC;
  SIGNAL and_dcpl_161 : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_3_cse : STD_LOGIC;
  SIGNAL INNER_LOOP_a_acc_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_25_itm : STD_LOGIC;
  SIGNAL s_1_sva : STD_LOGIC;
  SIGNAL s_0_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1 : STD_LOGIC_VECTOR
      (7 DOWNTO 0);
  SIGNAL INNER_LOOP_1_upper_and_psp_sva_mx0w0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL s_9_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_1_q_and_psp_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL s_8_sva : STD_LOGIC;
  SIGNAL s_7_sva : STD_LOGIC;
  SIGNAL s_6_sva : STD_LOGIC;
  SIGNAL s_5_sva : STD_LOGIC;
  SIGNAL s_4_sva : STD_LOGIC;
  SIGNAL s_3_sva : STD_LOGIC;
  SIGNAL s_2_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_a_acc_psp_sva_mx0w0 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL OUTER_LOOP_m_lshift_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0 : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0 : STD_LOGIC;
  SIGNAL y_1_sva : STD_LOGIC;
  SIGNAL y_3_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL INNER_LOOP_a_conc_12_itm_1 : STD_LOGIC;
  SIGNAL pref_y_idx_pref_9_0_2_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_2_cse : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_1_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL pref_x_idx_pref_1_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL x_1_sva : STD_LOGIC;
  SIGNAL x_3_sva : STD_LOGIC;
  SIGNAL INNER_LOOP_acc_12_psp_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_mul_cse_sva_0 : STD_LOGIC;
  SIGNAL pref_x_idx_pref_1_9_0_1_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pref_x_idx_pref_1_9_0_2_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pref_y_idx_pref_9_0_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL reg_INNER_LOOP_upper_acc_ftd_7 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reg_INNER_LOOP_1_w_lshift_idiv_ftd_8 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL s_or_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_0_cgo_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_1_cgo_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_2_cgo_cse : STD_LOGIC;
  SIGNAL reg_yt_rsc_0_3_cgo_cse : STD_LOGIC;
  SIGNAL reg_xt_rsc_triosy_0_3_obj_ld_cse : STD_LOGIC;
  SIGNAL reg_ensig_cgo_cse : STD_LOGIC;
  SIGNAL reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL and_218_cse : STD_LOGIC;
  SIGNAL and_184_cse : STD_LOGIC;
  SIGNAL nor_21_cse : STD_LOGIC;
  SIGNAL nand_26_cse : STD_LOGIC;
  SIGNAL nor_80_cse : STD_LOGIC;
  SIGNAL and_185_cse : STD_LOGIC;
  SIGNAL nor_69_cse : STD_LOGIC;
  SIGNAL nor_14_cse : STD_LOGIC;
  SIGNAL or_332_cse : STD_LOGIC;
  SIGNAL or_333_cse : STD_LOGIC;
  SIGNAL mux_142_rmff : STD_LOGIC;
  SIGNAL mux_172_rmff : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_5_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_2 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_a_acc_psp_4_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL INNER_LOOP_1_q_and_psp_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL INNER_LOOP_a_acc_2_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva : STD_LOGIC_VECTOR
      (7 DOWNTO 0);
  SIGNAL INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm : STD_LOGIC;
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL mux_50_itm : STD_LOGIC;
  SIGNAL mux_86_itm : STD_LOGIC;
  SIGNAL mux_114_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_itm : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL and_dcpl_194 : STD_LOGIC;
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL and_dcpl_216 : STD_LOGIC;
  SIGNAL and_dcpl_217 : STD_LOGIC;
  SIGNAL and_dcpl_223 : STD_LOGIC;
  SIGNAL and_dcpl_229 : STD_LOGIC;
  SIGNAL and_dcpl_235 : STD_LOGIC;
  SIGNAL and_dcpl_237 : STD_LOGIC;
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL and_dcpl_243 : STD_LOGIC;
  SIGNAL and_dcpl_251 : STD_LOGIC;
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_6 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL OUTER_LOOP_nn_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_upper_and_psp_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL tmp_3_sva_3 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_2_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_3_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_4_b_mul_mut : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_b_nor_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_1_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_w_mux1h_2_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_nor_5_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_22_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_23_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_24_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_and_9_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_26_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_27_itm : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_3_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL OUTER_LOOP_acc_2_itm : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_4 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_5 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_6 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL drf_y_smx_lpi_3_dfm_7 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_1_itm_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_1_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_1_itm_mx0c2 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_1_itm_mx0c3 : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_5_itm_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP_1_acc_5_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_2_itm_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_2_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_2_itm_mx0c2 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_2_itm_mx0c3 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_3_itm_mx0c0 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_3_itm_mx0c1 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_3_itm_mx0c2 : STD_LOGIC;
  SIGNAL INNER_LOOP_w_mux1h_3_itm_mx0c3 : STD_LOGIC;
  SIGNAL and_125_rgt : STD_LOGIC;
  SIGNAL and_299_cse : STD_LOGIC;
  SIGNAL and_302_cse : STD_LOGIC;
  SIGNAL and_307_cse : STD_LOGIC;
  SIGNAL or_tmp_298 : STD_LOGIC;
  SIGNAL nor_tmp : STD_LOGIC;
  SIGNAL or_364_cse : STD_LOGIC;
  SIGNAL OUTER_LOOP_m_or_1_itm : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_itm_2_1 : STD_LOGIC;
  SIGNAL and_310_cse : STD_LOGIC;
  SIGNAL nor_155_cse : STD_LOGIC;

  SIGNAL s_mux_20_nl : STD_LOGIC;
  SIGNAL nor_141_nl : STD_LOGIC;
  SIGNAL mux_29_nl : STD_LOGIC;
  SIGNAL or_343_nl : STD_LOGIC;
  SIGNAL nand_50_nl : STD_LOGIC;
  SIGNAL mux_28_nl : STD_LOGIC;
  SIGNAL or_28_nl : STD_LOGIC;
  SIGNAL mux_26_nl : STD_LOGIC;
  SIGNAL mux_25_nl : STD_LOGIC;
  SIGNAL or_25_nl : STD_LOGIC;
  SIGNAL mux_49_nl : STD_LOGIC;
  SIGNAL mux_48_nl : STD_LOGIC;
  SIGNAL mux_47_nl : STD_LOGIC;
  SIGNAL mux_46_nl : STD_LOGIC;
  SIGNAL nand_3_nl : STD_LOGIC;
  SIGNAL mux_45_nl : STD_LOGIC;
  SIGNAL mux_44_nl : STD_LOGIC;
  SIGNAL or_62_nl : STD_LOGIC;
  SIGNAL mux_43_nl : STD_LOGIC;
  SIGNAL mux_42_nl : STD_LOGIC;
  SIGNAL or_59_nl : STD_LOGIC;
  SIGNAL mux_41_nl : STD_LOGIC;
  SIGNAL or_58_nl : STD_LOGIC;
  SIGNAL mux_40_nl : STD_LOGIC;
  SIGNAL or_57_nl : STD_LOGIC;
  SIGNAL or_55_nl : STD_LOGIC;
  SIGNAL mux_39_nl : STD_LOGIC;
  SIGNAL nand_2_nl : STD_LOGIC;
  SIGNAL mux_38_nl : STD_LOGIC;
  SIGNAL mux_37_nl : STD_LOGIC;
  SIGNAL or_54_nl : STD_LOGIC;
  SIGNAL or_53_nl : STD_LOGIC;
  SIGNAL mux_36_nl : STD_LOGIC;
  SIGNAL or_52_nl : STD_LOGIC;
  SIGNAL mux_35_nl : STD_LOGIC;
  SIGNAL mux_34_nl : STD_LOGIC;
  SIGNAL or_51_nl : STD_LOGIC;
  SIGNAL or_49_nl : STD_LOGIC;
  SIGNAL or_47_nl : STD_LOGIC;
  SIGNAL or_46_nl : STD_LOGIC;
  SIGNAL mux_33_nl : STD_LOGIC;
  SIGNAL mux_32_nl : STD_LOGIC;
  SIGNAL or_43_nl : STD_LOGIC;
  SIGNAL or_35_nl : STD_LOGIC;
  SIGNAL or_32_nl : STD_LOGIC;
  SIGNAL mux_85_nl : STD_LOGIC;
  SIGNAL mux_84_nl : STD_LOGIC;
  SIGNAL mux_83_nl : STD_LOGIC;
  SIGNAL mux_82_nl : STD_LOGIC;
  SIGNAL nand_9_nl : STD_LOGIC;
  SIGNAL mux_81_nl : STD_LOGIC;
  SIGNAL or_112_nl : STD_LOGIC;
  SIGNAL mux_80_nl : STD_LOGIC;
  SIGNAL mux_79_nl : STD_LOGIC;
  SIGNAL mux_78_nl : STD_LOGIC;
  SIGNAL mux_77_nl : STD_LOGIC;
  SIGNAL or_111_nl : STD_LOGIC;
  SIGNAL mux_76_nl : STD_LOGIC;
  SIGNAL mux_75_nl : STD_LOGIC;
  SIGNAL mux_74_nl : STD_LOGIC;
  SIGNAL mux_73_nl : STD_LOGIC;
  SIGNAL mux_72_nl : STD_LOGIC;
  SIGNAL or_105_nl : STD_LOGIC;
  SIGNAL nor_19_nl : STD_LOGIC;
  SIGNAL mux_71_nl : STD_LOGIC;
  SIGNAL mux_70_nl : STD_LOGIC;
  SIGNAL mux_69_nl : STD_LOGIC;
  SIGNAL or_104_nl : STD_LOGIC;
  SIGNAL mux_68_nl : STD_LOGIC;
  SIGNAL or_102_nl : STD_LOGIC;
  SIGNAL mux_67_nl : STD_LOGIC;
  SIGNAL nor_126_nl : STD_LOGIC;
  SIGNAL mux_66_nl : STD_LOGIC;
  SIGNAL or_98_nl : STD_LOGIC;
  SIGNAL or_96_nl : STD_LOGIC;
  SIGNAL or_94_nl : STD_LOGIC;
  SIGNAL mux_65_nl : STD_LOGIC;
  SIGNAL mux_64_nl : STD_LOGIC;
  SIGNAL nand_8_nl : STD_LOGIC;
  SIGNAL mux_63_nl : STD_LOGIC;
  SIGNAL nand_7_nl : STD_LOGIC;
  SIGNAL mux_61_nl : STD_LOGIC;
  SIGNAL or_84_nl : STD_LOGIC;
  SIGNAL or_81_nl : STD_LOGIC;
  SIGNAL mux_113_nl : STD_LOGIC;
  SIGNAL mux_112_nl : STD_LOGIC;
  SIGNAL mux_111_nl : STD_LOGIC;
  SIGNAL mux_110_nl : STD_LOGIC;
  SIGNAL or_167_nl : STD_LOGIC;
  SIGNAL nand_12_nl : STD_LOGIC;
  SIGNAL mux_109_nl : STD_LOGIC;
  SIGNAL nor_144_nl : STD_LOGIC;
  SIGNAL nand_39_nl : STD_LOGIC;
  SIGNAL or_163_nl : STD_LOGIC;
  SIGNAL mux_108_nl : STD_LOGIC;
  SIGNAL or_162_nl : STD_LOGIC;
  SIGNAL or_160_nl : STD_LOGIC;
  SIGNAL mux_107_nl : STD_LOGIC;
  SIGNAL or_158_nl : STD_LOGIC;
  SIGNAL mux_106_nl : STD_LOGIC;
  SIGNAL mux_105_nl : STD_LOGIC;
  SIGNAL or_157_nl : STD_LOGIC;
  SIGNAL mux_104_nl : STD_LOGIC;
  SIGNAL mux_103_nl : STD_LOGIC;
  SIGNAL mux_102_nl : STD_LOGIC;
  SIGNAL or_154_nl : STD_LOGIC;
  SIGNAL mux_101_nl : STD_LOGIC;
  SIGNAL or_151_nl : STD_LOGIC;
  SIGNAL or_150_nl : STD_LOGIC;
  SIGNAL nand_40_nl : STD_LOGIC;
  SIGNAL or_147_nl : STD_LOGIC;
  SIGNAL mux_100_nl : STD_LOGIC;
  SIGNAL mux_99_nl : STD_LOGIC;
  SIGNAL mux_98_nl : STD_LOGIC;
  SIGNAL mux_97_nl : STD_LOGIC;
  SIGNAL mux_96_nl : STD_LOGIC;
  SIGNAL or_141_nl : STD_LOGIC;
  SIGNAL or_139_nl : STD_LOGIC;
  SIGNAL or_138_nl : STD_LOGIC;
  SIGNAL or_135_nl : STD_LOGIC;
  SIGNAL mux_141_nl : STD_LOGIC;
  SIGNAL mux_140_nl : STD_LOGIC;
  SIGNAL nor_99_nl : STD_LOGIC;
  SIGNAL mux_139_nl : STD_LOGIC;
  SIGNAL nor_100_nl : STD_LOGIC;
  SIGNAL mux_138_nl : STD_LOGIC;
  SIGNAL mux_137_nl : STD_LOGIC;
  SIGNAL nor_101_nl : STD_LOGIC;
  SIGNAL mux_136_nl : STD_LOGIC;
  SIGNAL nor_102_nl : STD_LOGIC;
  SIGNAL nor_103_nl : STD_LOGIC;
  SIGNAL and_194_nl : STD_LOGIC;
  SIGNAL and_195_nl : STD_LOGIC;
  SIGNAL nor_104_nl : STD_LOGIC;
  SIGNAL mux_135_nl : STD_LOGIC;
  SIGNAL and_196_nl : STD_LOGIC;
  SIGNAL mux_134_nl : STD_LOGIC;
  SIGNAL nor_105_nl : STD_LOGIC;
  SIGNAL mux_133_nl : STD_LOGIC;
  SIGNAL nor_106_nl : STD_LOGIC;
  SIGNAL nor_107_nl : STD_LOGIC;
  SIGNAL and_197_nl : STD_LOGIC;
  SIGNAL mux_132_nl : STD_LOGIC;
  SIGNAL nor_108_nl : STD_LOGIC;
  SIGNAL and_198_nl : STD_LOGIC;
  SIGNAL nor_109_nl : STD_LOGIC;
  SIGNAL mux_131_nl : STD_LOGIC;
  SIGNAL mux_130_nl : STD_LOGIC;
  SIGNAL mux_129_nl : STD_LOGIC;
  SIGNAL mux_128_nl : STD_LOGIC;
  SIGNAL nand_34_nl : STD_LOGIC;
  SIGNAL or_192_nl : STD_LOGIC;
  SIGNAL and_199_nl : STD_LOGIC;
  SIGNAL mux_127_nl : STD_LOGIC;
  SIGNAL or_191_nl : STD_LOGIC;
  SIGNAL and_200_nl : STD_LOGIC;
  SIGNAL mux_126_nl : STD_LOGIC;
  SIGNAL or_189_nl : STD_LOGIC;
  SIGNAL mux_125_nl : STD_LOGIC;
  SIGNAL or_186_nl : STD_LOGIC;
  SIGNAL mux_171_nl : STD_LOGIC;
  SIGNAL mux_170_nl : STD_LOGIC;
  SIGNAL mux_169_nl : STD_LOGIC;
  SIGNAL and_222_nl : STD_LOGIC;
  SIGNAL mux_168_nl : STD_LOGIC;
  SIGNAL or_251_nl : STD_LOGIC;
  SIGNAL mux_167_nl : STD_LOGIC;
  SIGNAL nor_151_nl : STD_LOGIC;
  SIGNAL mux_166_nl : STD_LOGIC;
  SIGNAL nor_78_nl : STD_LOGIC;
  SIGNAL nor_79_nl : STD_LOGIC;
  SIGNAL mux_165_nl : STD_LOGIC;
  SIGNAL and_223_nl : STD_LOGIC;
  SIGNAL nor_152_nl : STD_LOGIC;
  SIGNAL nor_153_nl : STD_LOGIC;
  SIGNAL mux_164_nl : STD_LOGIC;
  SIGNAL mux_163_nl : STD_LOGIC;
  SIGNAL or_241_nl : STD_LOGIC;
  SIGNAL or_240_nl : STD_LOGIC;
  SIGNAL or_239_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_or_nl : STD_LOGIC;
  SIGNAL nor_154_nl : STD_LOGIC;
  SIGNAL mux_183_nl : STD_LOGIC;
  SIGNAL or_345_nl : STD_LOGIC;
  SIGNAL and_112_nl : STD_LOGIC;
  SIGNAL mux_184_nl : STD_LOGIC;
  SIGNAL and_183_nl : STD_LOGIC;
  SIGNAL nand_25_nl : STD_LOGIC;
  SIGNAL and_118_nl : STD_LOGIC;
  SIGNAL mux_185_nl : STD_LOGIC;
  SIGNAL and_181_nl : STD_LOGIC;
  SIGNAL nor_64_nl : STD_LOGIC;
  SIGNAL nor_63_nl : STD_LOGIC;
  SIGNAL mux_22_nl : STD_LOGIC;
  SIGNAL or_23_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_t_mux_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL and_127_nl : STD_LOGIC;
  SIGNAL nor_158_nl : STD_LOGIC;
  SIGNAL mux_190_nl : STD_LOGIC;
  SIGNAL or_285_nl : STD_LOGIC;
  SIGNAL or_284_nl : STD_LOGIC;
  SIGNAL mux_197_nl : STD_LOGIC;
  SIGNAL mux_196_nl : STD_LOGIC;
  SIGNAL mux_202_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_15_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_b_acc_16_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL INNER_LOOP_b_acc_12_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_b_acc_17_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mux_209_nl : STD_LOGIC;
  SIGNAL mux_208_nl : STD_LOGIC;
  SIGNAL or_298_nl : STD_LOGIC;
  SIGNAL mux_210_nl : STD_LOGIC;
  SIGNAL mux_213_nl : STD_LOGIC;
  SIGNAL mux_212_nl : STD_LOGIC;
  SIGNAL and_142_nl : STD_LOGIC;
  SIGNAL mux_233_nl : STD_LOGIC;
  SIGNAL or_nl : STD_LOGIC;
  SIGNAL or_363_nl : STD_LOGIC;
  SIGNAL mux_232_nl : STD_LOGIC;
  SIGNAL or_357_nl : STD_LOGIC;
  SIGNAL or_356_nl : STD_LOGIC;
  SIGNAL mux_231_nl : STD_LOGIC;
  SIGNAL mux_230_nl : STD_LOGIC;
  SIGNAL nand_nl : STD_LOGIC;
  SIGNAL or_355_nl : STD_LOGIC;
  SIGNAL acc_2_nl : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL INNER_LOOP_mux_20_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL and_335_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_2_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_7_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_3_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_4_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_5_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_or_6_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_and_23_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_and_24_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_nor_3_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_a_INNER_LOOP_a_and_25_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_acc_10_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_b_and_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_4_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_5_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_6_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_1_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_7_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_8_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_9_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_14_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_16_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_17_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_19_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_24_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_25_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_27_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_INNER_LOOP_b_and_28_nl : STD_LOGIC;
  SIGNAL or_20_nl : STD_LOGIC;
  SIGNAL nor_139_nl : STD_LOGIC;
  SIGNAL mux_31_nl : STD_LOGIC;
  SIGNAL mux_30_nl : STD_LOGIC;
  SIGNAL or_39_nl : STD_LOGIC;
  SIGNAL and_207_nl : STD_LOGIC;
  SIGNAL mux_53_nl : STD_LOGIC;
  SIGNAL mux_52_nl : STD_LOGIC;
  SIGNAL nor_132_nl : STD_LOGIC;
  SIGNAL nor_134_nl : STD_LOGIC;
  SIGNAL and_208_nl : STD_LOGIC;
  SIGNAL mux_51_nl : STD_LOGIC;
  SIGNAL nor_135_nl : STD_LOGIC;
  SIGNAL nor_136_nl : STD_LOGIC;
  SIGNAL mux_59_nl : STD_LOGIC;
  SIGNAL and_206_nl : STD_LOGIC;
  SIGNAL mux_58_nl : STD_LOGIC;
  SIGNAL nor_127_nl : STD_LOGIC;
  SIGNAL nor_128_nl : STD_LOGIC;
  SIGNAL mux_57_nl : STD_LOGIC;
  SIGNAL nor_129_nl : STD_LOGIC;
  SIGNAL nor_130_nl : STD_LOGIC;
  SIGNAL nor_131_nl : STD_LOGIC;
  SIGNAL mux_56_nl : STD_LOGIC;
  SIGNAL or_74_nl : STD_LOGIC;
  SIGNAL mux_55_nl : STD_LOGIC;
  SIGNAL or_73_nl : STD_LOGIC;
  SIGNAL or_71_nl : STD_LOGIC;
  SIGNAL or_69_nl : STD_LOGIC;
  SIGNAL or_92_nl : STD_LOGIC;
  SIGNAL nor_124_nl : STD_LOGIC;
  SIGNAL mux_89_nl : STD_LOGIC;
  SIGNAL nand_10_nl : STD_LOGIC;
  SIGNAL mux_88_nl : STD_LOGIC;
  SIGNAL nor_175_nl : STD_LOGIC;
  SIGNAL nor_176_nl : STD_LOGIC;
  SIGNAL mux_87_nl : STD_LOGIC;
  SIGNAL or_117_nl : STD_LOGIC;
  SIGNAL or_115_nl : STD_LOGIC;
  SIGNAL nor_125_nl : STD_LOGIC;
  SIGNAL nor_120_nl : STD_LOGIC;
  SIGNAL mux_94_nl : STD_LOGIC;
  SIGNAL or_132_nl : STD_LOGIC;
  SIGNAL or_130_nl : STD_LOGIC;
  SIGNAL nor_121_nl : STD_LOGIC;
  SIGNAL mux_93_nl : STD_LOGIC;
  SIGNAL or_126_nl : STD_LOGIC;
  SIGNAL mux_92_nl : STD_LOGIC;
  SIGNAL or_125_nl : STD_LOGIC;
  SIGNAL nand_49_nl : STD_LOGIC;
  SIGNAL nand_11_nl : STD_LOGIC;
  SIGNAL mux_91_nl : STD_LOGIC;
  SIGNAL nor_122_nl : STD_LOGIC;
  SIGNAL nor_123_nl : STD_LOGIC;
  SIGNAL and_203_nl : STD_LOGIC;
  SIGNAL mux_117_nl : STD_LOGIC;
  SIGNAL nor_115_nl : STD_LOGIC;
  SIGNAL nor_116_nl : STD_LOGIC;
  SIGNAL and_204_nl : STD_LOGIC;
  SIGNAL mux_116_nl : STD_LOGIC;
  SIGNAL nor_117_nl : STD_LOGIC;
  SIGNAL mux_115_nl : STD_LOGIC;
  SIGNAL nor_118_nl : STD_LOGIC;
  SIGNAL nor_119_nl : STD_LOGIC;
  SIGNAL nor_110_nl : STD_LOGIC;
  SIGNAL mux_123_nl : STD_LOGIC;
  SIGNAL nand_36_nl : STD_LOGIC;
  SIGNAL mux_122_nl : STD_LOGIC;
  SIGNAL nor_111_nl : STD_LOGIC;
  SIGNAL and_201_nl : STD_LOGIC;
  SIGNAL or_182_nl : STD_LOGIC;
  SIGNAL mux_121_nl : STD_LOGIC;
  SIGNAL and_202_nl : STD_LOGIC;
  SIGNAL mux_120_nl : STD_LOGIC;
  SIGNAL nor_112_nl : STD_LOGIC;
  SIGNAL nor_113_nl : STD_LOGIC;
  SIGNAL nor_114_nl : STD_LOGIC;
  SIGNAL mux_119_nl : STD_LOGIC;
  SIGNAL or_177_nl : STD_LOGIC;
  SIGNAL or_176_nl : STD_LOGIC;
  SIGNAL nor_98_nl : STD_LOGIC;
  SIGNAL mux_145_nl : STD_LOGIC;
  SIGNAL nand_32_nl : STD_LOGIC;
  SIGNAL mux_144_nl : STD_LOGIC;
  SIGNAL or_335_nl : STD_LOGIC;
  SIGNAL nand_33_nl : STD_LOGIC;
  SIGNAL and_193_nl : STD_LOGIC;
  SIGNAL mux_143_nl : STD_LOGIC;
  SIGNAL or_206_nl : STD_LOGIC;
  SIGNAL nor_95_nl : STD_LOGIC;
  SIGNAL mux_149_nl : STD_LOGIC;
  SIGNAL nand_47_nl : STD_LOGIC;
  SIGNAL nand_48_nl : STD_LOGIC;
  SIGNAL nor_96_nl : STD_LOGIC;
  SIGNAL mux_148_nl : STD_LOGIC;
  SIGNAL or_213_nl : STD_LOGIC;
  SIGNAL mux_147_nl : STD_LOGIC;
  SIGNAL nor_97_nl : STD_LOGIC;
  SIGNAL and_192_nl : STD_LOGIC;
  SIGNAL or_211_nl : STD_LOGIC;
  SIGNAL mux_174_nl : STD_LOGIC;
  SIGNAL or_340_nl : STD_LOGIC;
  SIGNAL mux_173_nl : STD_LOGIC;
  SIGNAL or_341_nl : STD_LOGIC;
  SIGNAL or_342_nl : STD_LOGIC;
  SIGNAL mux_192_nl : STD_LOGIC;
  SIGNAL mux_191_nl : STD_LOGIC;
  SIGNAL mux_201_nl : STD_LOGIC;
  SIGNAL mux_200_nl : STD_LOGIC;
  SIGNAL mux_199_nl : STD_LOGIC;
  SIGNAL mux_206_nl : STD_LOGIC;
  SIGNAL mux_205_nl : STD_LOGIC;
  SIGNAL mux_204_nl : STD_LOGIC;
  SIGNAL and_175_nl : STD_LOGIC;
  SIGNAL mux_207_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL and_50_nl : STD_LOGIC;
  SIGNAL and_63_nl : STD_LOGIC;
  SIGNAL and_66_nl : STD_LOGIC;
  SIGNAL and_71_nl : STD_LOGIC;
  SIGNAL mux_153_nl : STD_LOGIC;
  SIGNAL nor_91_nl : STD_LOGIC;
  SIGNAL nor_93_nl : STD_LOGIC;
  SIGNAL mux_156_nl : STD_LOGIC;
  SIGNAL nor_87_nl : STD_LOGIC;
  SIGNAL nor_89_nl : STD_LOGIC;
  SIGNAL mux_159_nl : STD_LOGIC;
  SIGNAL nor_83_nl : STD_LOGIC;
  SIGNAL nor_85_nl : STD_LOGIC;
  SIGNAL mux_162_nl : STD_LOGIC;
  SIGNAL and_190_nl : STD_LOGIC;
  SIGNAL nor_81_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_6_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL and_334_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_5_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_6_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_7_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_8_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_OUTER_LOOP_and_9_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_7_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_8_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_9_nl : STD_LOGIC;
  SIGNAL OUTER_LOOP_mux_10_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_mux1h_38_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_mux1h_39_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_b_and_6_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_7_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_8_nl : STD_LOGIC;
  SIGNAL INNER_LOOP_b_and_9_nl : STD_LOGIC;
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT modulo_dev
    PORT (
      base_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      m_rsc_dat : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      return_rsc_z : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      ccs_ccore_start_rsc_dat : IN STD_LOGIC;
      ccs_ccore_clk : IN STD_LOGIC;
      ccs_ccore_srst : IN STD_LOGIC;
      ccs_ccore_en : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1 : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat : STD_LOGIC;

  SIGNAL INNER_LOOP_1_b_rem_cmp_a_1 : STD_LOGIC_VECTOR (127 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_b : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL INNER_LOOP_1_b_rem_cmp_z_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL INNER_LOOP_1_w_rshift_rg_a : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_rshift_rg_z : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL INNER_LOOP_1_w_lshift_rg_a : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL INNER_LOOP_1_w_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT stockham_DIT_core_wait_dp
    PORT(
      yt_rsc_0_0_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_1_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_2_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_2_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_3_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_3_i_clken_d : OUT STD_LOGIC;
      ensig_cgo_iro : IN STD_LOGIC;
      yt_rsc_0_0_cgo : IN STD_LOGIC;
      yt_rsc_0_1_cgo : IN STD_LOGIC;
      yt_rsc_0_2_cgo : IN STD_LOGIC;
      yt_rsc_0_3_cgo : IN STD_LOGIC;
      ensig_cgo : IN STD_LOGIC;
      INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro : STD_LOGIC;
  SIGNAL stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro : STD_LOGIC;
  SIGNAL stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro : STD_LOGIC;

  COMPONENT stockham_DIT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      INNER_LOOP_C_147_tr0 : IN STD_LOGIC;
      OUTER_LOOP_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0 : STD_LOGIC;
  SIGNAL stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_v_128_5_2(input_4 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(127 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(127 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(127 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_3_2(input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_4_2(input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_5_2(input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_8_2(input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(7 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_9_2(input_8 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(8 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
      tmp := (OTHERS=>sel( 7));
      result := result or ( input_7 and tmp);
      tmp := (OTHERS=>sel( 8));
      result := result or ( input_8 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_5_2(input_4 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_6_2(input_5 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(5 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_7_2(input_6 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 5,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  xt_rsc_triosy_0_3_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => xt_rsc_triosy_0_3_lz
    );
  xt_rsc_triosy_0_2_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => xt_rsc_triosy_0_2_lz
    );
  xt_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => xt_rsc_triosy_0_1_lz
    );
  xt_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => xt_rsc_triosy_0_0_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  g_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => g_rsc_triosy_lz
    );
  twiddle_rsc_triosy_0_3_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_3_lz
    );
  twiddle_rsc_triosy_0_2_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_2_lz
    );
  twiddle_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_1_lz
    );
  twiddle_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_xt_rsc_triosy_0_3_obj_ld_cse,
      lz => twiddle_rsc_triosy_0_0_lz
    );
  INNER_LOOP_1_modulo_dev_cmp : modulo_dev
    PORT MAP(
      base_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat,
      m_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat,
      return_rsc_z => INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1,
      ccs_ccore_start_rsc_dat => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat,
      ccs_ccore_clk => clk,
      ccs_ccore_srst => rst,
      ccs_ccore_en => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
    );
  INNER_LOOP_1_modulo_dev_cmp_base_rsc_dat <= MUX_v_64_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_acc_5_itm)
      + UNSIGNED(MUX_v_64_2_2(drf_y_smx_lpi_2, drf_y_smx_lpi_3_dfm, and_dcpl_15 AND
      (NOT (fsm_output(5))) AND (fsm_output(2)) AND (NOT (fsm_output(0))) AND (fsm_output(1))
      AND (NOT (fsm_output(4))) AND (fsm_output(7)))), 64)), INNER_LOOP_1_acc_5_itm,
      MUX_s_1_2_2((NOT((NOT (fsm_output(3))) OR (NOT (fsm_output(4))) OR (fsm_output(7))
      OR (fsm_output(6)) OR (NOT (MUX_s_1_2_2((NOT((fsm_output(0)) OR (fsm_output(2)))),
      and_218_cse, fsm_output(5)))))), (NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00"))
      OR (MUX_s_1_2_2(((NOT (fsm_output(6))) OR (NOT (fsm_output(5))) OR (fsm_output(0))
      OR (fsm_output(2))), (CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT and_218_cse)), fsm_output(7))))), fsm_output(1)));
  INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat <= p_sva;
  INNER_LOOP_1_modulo_dev_cmp_return_rsc_z <= INNER_LOOP_1_modulo_dev_cmp_return_rsc_z_1;
  INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_start_rsc_dat <= MUX_s_1_2_2((MUX_s_1_2_2(((fsm_output(4))
      AND (MUX_s_1_2_2((NOT((fsm_output(5)) OR nand_26_cse)), (MUX_s_1_2_2((NOT(CONV_SL_1_1(fsm_output(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")))), (NOT(CONV_SL_1_1(fsm_output(2 DOWNTO
      1)/=STD_LOGIC_VECTOR'("10")))), fsm_output(5))), fsm_output(3)))), ((NOT(CONV_SL_1_1(fsm_output(5
      DOWNTO 3)/=STD_LOGIC_VECTOR'("100")))) AND (MUX_s_1_2_2(nor_69_cse, (NOT(CONV_SL_1_1(fsm_output(2
      DOWNTO 1)/=STD_LOGIC_VECTOR'("00")))), fsm_output(0)))), fsm_output(6))), (NOT(CONV_SL_1_1(fsm_output(6
      DOWNTO 1)/=STD_LOGIC_VECTOR'("000011")))), fsm_output(7));

  INNER_LOOP_1_b_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 128,
      width_b => 64,
      signd => 0
      )
    PORT MAP(
      a => INNER_LOOP_1_b_rem_cmp_a_1,
      b => INNER_LOOP_1_b_rem_cmp_b,
      z => INNER_LOOP_1_b_rem_cmp_z_1
    );
  INNER_LOOP_1_b_rem_cmp_a_1 <= INNER_LOOP_1_b_rem_cmp_a;
  INNER_LOOP_1_b_rem_cmp_b <= reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse;
  INNER_LOOP_1_b_rem_cmp_z <= INNER_LOOP_1_b_rem_cmp_z_1;

  INNER_LOOP_1_w_rshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_r_v5
    GENERIC MAP(
      width_a => 9,
      signd_a => 0,
      width_s => 4,
      width_z => 8
      )
    PORT MAP(
      a => INNER_LOOP_1_w_rshift_rg_a,
      s => INNER_LOOP_1_w_rshift_rg_s,
      z => INNER_LOOP_1_w_rshift_rg_z
    );
  INNER_LOOP_1_w_rshift_rg_a <= (MUX_v_7_2_2(INNER_LOOP_1_upper_and_psp_sva_mx0w0,
      INNER_LOOP_1_upper_and_psp_sva, and_302_cse OR and_307_cse OR and_310_cse))
      & (NOT((reg_INNER_LOOP_upper_acc_ftd_7(1)) OR and_299_cse OR and_302_cse))
      & (NOT((reg_INNER_LOOP_upper_acc_ftd_7(0)) OR and_299_cse OR and_307_cse));
  INNER_LOOP_1_w_rshift_rg_s <= OUTER_LOOP_acc_2_itm;
  z_out_5 <= INNER_LOOP_1_w_rshift_rg_z;

  INNER_LOOP_1_w_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 8,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => INNER_LOOP_1_w_lshift_rg_a,
      s => INNER_LOOP_1_w_lshift_rg_s,
      z => INNER_LOOP_1_w_lshift_rg_z
    );
  INNER_LOOP_1_w_lshift_rg_a <= MUX_v_8_2_2(STD_LOGIC_VECTOR'( "00000001"), z_out_5,
      OUTER_LOOP_m_or_1_itm);
  INNER_LOOP_1_w_lshift_rg_s <= MUX_v_4_2_2(z_out, OUTER_LOOP_acc_2_itm, OUTER_LOOP_m_or_1_itm);
  z_out_6 <= INNER_LOOP_1_w_lshift_rg_z;

  stockham_DIT_core_wait_dp_inst : stockham_DIT_core_wait_dp
    PORT MAP(
      yt_rsc_0_0_cgo_iro => stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro,
      yt_rsc_0_0_i_clken_d => yt_rsc_0_0_i_clken_d,
      yt_rsc_0_1_cgo_iro => stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro,
      yt_rsc_0_1_i_clken_d => yt_rsc_0_1_i_clken_d,
      yt_rsc_0_2_cgo_iro => stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro,
      yt_rsc_0_2_i_clken_d => yt_rsc_0_2_i_clken_d,
      yt_rsc_0_3_cgo_iro => mux_142_rmff,
      yt_rsc_0_3_i_clken_d => yt_rsc_0_3_i_clken_d,
      ensig_cgo_iro => mux_172_rmff,
      yt_rsc_0_0_cgo => reg_yt_rsc_0_0_cgo_cse,
      yt_rsc_0_1_cgo => reg_yt_rsc_0_1_cgo_cse,
      yt_rsc_0_2_cgo => reg_yt_rsc_0_2_cgo_cse,
      yt_rsc_0_3_cgo => reg_yt_rsc_0_3_cgo_cse,
      ensig_cgo => reg_ensig_cgo_cse,
      INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en => INNER_LOOP_1_modulo_dev_cmp_ccs_ccore_en
    );
  stockham_DIT_core_wait_dp_inst_yt_rsc_0_0_cgo_iro <= NOT mux_50_itm;
  stockham_DIT_core_wait_dp_inst_yt_rsc_0_1_cgo_iro <= NOT mux_86_itm;
  stockham_DIT_core_wait_dp_inst_yt_rsc_0_2_cgo_iro <= NOT mux_114_itm;

  stockham_DIT_core_core_fsm_inst : stockham_DIT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => stockham_DIT_core_core_fsm_inst_fsm_output,
      INNER_LOOP_C_147_tr0 => stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0,
      OUTER_LOOP_C_1_tr0 => stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0
    );
  fsm_output <= stockham_DIT_core_core_fsm_inst_fsm_output;
  stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_147_tr0 <= INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva(7);
  stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 <= NOT OUTER_LOOP_acc_itm_2_1;

  s_or_cse <= and_dcpl_17 OR and_dcpl_23;
  and_218_cse <= (fsm_output(0)) AND (fsm_output(2));
  or_62_nl <= s_1_sva OR s_0_sva OR (fsm_output(6));
  mux_44_nl <= MUX_s_1_2_2(or_62_nl, (fsm_output(6)), fsm_output(0));
  mux_42_nl <= MUX_s_1_2_2(or_tmp_53, (NOT (fsm_output(6))), fsm_output(0));
  mux_43_nl <= MUX_s_1_2_2(mux_42_nl, or_tmp_53, reg_INNER_LOOP_upper_acc_ftd_7(1));
  mux_45_nl <= MUX_s_1_2_2(mux_44_nl, mux_43_nl, fsm_output(3));
  nand_3_nl <= NOT((fsm_output(1)) AND (NOT mux_45_nl));
  or_58_nl <= (fsm_output(0)) OR (fsm_output(6));
  or_57_nl <= (INNER_LOOP_b_acc_1_psp_sva(0)) OR s_0_sva OR (NOT (fsm_output(6)));
  or_55_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(1)) OR (fsm_output(0));
  mux_40_nl <= MUX_s_1_2_2((NOT (fsm_output(6))), or_57_nl, or_55_nl);
  mux_41_nl <= MUX_s_1_2_2(or_58_nl, mux_40_nl, fsm_output(3));
  or_59_nl <= (fsm_output(1)) OR mux_41_nl;
  mux_46_nl <= MUX_s_1_2_2(nand_3_nl, or_59_nl, fsm_output(2));
  mux_37_nl <= MUX_s_1_2_2((fsm_output(6)), or_tmp_29, fsm_output(3));
  mux_38_nl <= MUX_s_1_2_2(or_tmp_33, mux_37_nl, fsm_output(1));
  nand_2_nl <= NOT((fsm_output(2)) AND (NOT mux_38_nl));
  or_54_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"));
  mux_39_nl <= MUX_s_1_2_2(nand_2_nl, nand_tmp_1, or_54_nl);
  mux_47_nl <= MUX_s_1_2_2(mux_46_nl, mux_39_nl, fsm_output(5));
  or_51_nl <= (INNER_LOOP_acc_12_psp_sva(0)) OR INNER_LOOP_1_mul_cse_sva_0 OR (NOT
      (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva);
  or_49_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT (fsm_output(6)));
  mux_34_nl <= MUX_s_1_2_2(or_51_nl, or_49_nl, fsm_output(0));
  or_47_nl <= (INNER_LOOP_a_acc_psp_sva(0)) OR (reg_INNER_LOOP_upper_acc_ftd_7(0));
  mux_35_nl <= MUX_s_1_2_2((NOT (fsm_output(6))), mux_34_nl, or_47_nl);
  or_52_nl <= (fsm_output(3)) OR mux_35_nl;
  or_46_nl <= (fsm_output(3)) OR (fsm_output(0)) OR CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (NOT (fsm_output(6)));
  mux_36_nl <= MUX_s_1_2_2(or_52_nl, or_46_nl, fsm_output(1));
  or_53_nl <= (NOT (fsm_output(5))) OR (fsm_output(2)) OR mux_36_nl;
  mux_48_nl <= MUX_s_1_2_2(mux_47_nl, or_53_nl, fsm_output(4));
  or_43_nl <= CONV_SL_1_1(fsm_output(3 DOWNTO 1)/=STD_LOGIC_VECTOR'("101")) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (NOT (fsm_output(6))) OR x_1_sva OR
      (NOT x_3_sva);
  mux_32_nl <= MUX_s_1_2_2(or_43_nl, nand_tmp_1, fsm_output(5));
  or_35_nl <= (NOT (fsm_output(5))) OR (fsm_output(2)) OR (fsm_output(1)) OR (fsm_output(3))
      OR (fsm_output(0)) OR (INNER_LOOP_acc_12_psp_sva(0)) OR INNER_LOOP_1_mul_cse_sva_0
      OR (NOT (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva);
  mux_33_nl <= MUX_s_1_2_2(mux_32_nl, or_35_nl, fsm_output(4));
  mux_49_nl <= MUX_s_1_2_2(mux_48_nl, mux_33_nl, or_tmp_25);
  or_32_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("001010")) OR x_1_sva
      OR (NOT x_3_sva);
  mux_50_itm <= MUX_s_1_2_2(mux_49_nl, or_32_nl, fsm_output(7));
  or_112_nl <= (INNER_LOOP_b_acc_1_psp_sva(0)) OR (NOT s_0_sva) OR CONV_SL_1_1(fsm_output(6
      DOWNTO 5)/=STD_LOGIC_VECTOR'("10"));
  mux_81_nl <= MUX_s_1_2_2(or_tmp_100, or_112_nl, fsm_output(2));
  nand_9_nl <= NOT((fsm_output(3)) AND (NOT mux_81_nl));
  mux_82_nl <= MUX_s_1_2_2(nand_9_nl, mux_tmp_62, fsm_output(0));
  or_111_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01")) OR x_1_sva
      OR (NOT x_3_sva);
  mux_77_nl <= MUX_s_1_2_2(or_111_nl, or_tmp_98, nor_21_cse);
  mux_78_nl <= MUX_s_1_2_2(or_tmp_101, mux_77_nl, fsm_output(2));
  mux_79_nl <= MUX_s_1_2_2(mux_78_nl, or_tmp_82, fsm_output(3));
  mux_74_nl <= MUX_s_1_2_2(or_tmp_100, or_tmp_98, nor_21_cse);
  mux_75_nl <= MUX_s_1_2_2(or_tmp_101, mux_74_nl, fsm_output(2));
  or_105_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10"));
  nor_19_nl <= NOT((INNER_LOOP_b_acc_1_psp_sva(0)) OR (NOT s_0_sva));
  mux_72_nl <= MUX_s_1_2_2(or_tmp_80, or_105_nl, nor_19_nl);
  mux_73_nl <= MUX_s_1_2_2(mux_72_nl, or_tmp_78, fsm_output(2));
  mux_76_nl <= MUX_s_1_2_2(mux_75_nl, mux_73_nl, fsm_output(3));
  mux_80_nl <= MUX_s_1_2_2(mux_79_nl, mux_76_nl, fsm_output(0));
  mux_83_nl <= MUX_s_1_2_2(mux_82_nl, mux_80_nl, fsm_output(1));
  mux_68_nl <= MUX_s_1_2_2(or_tmp_78, (NOT nor_tmp_4), reg_INNER_LOOP_upper_acc_ftd_7(0));
  or_104_nl <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")) OR mux_68_nl;
  nor_126_nl <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT nor_tmp_4));
  mux_67_nl <= MUX_s_1_2_2(nor_126_nl, nor_tmp_4, reg_INNER_LOOP_upper_acc_ftd_7(0));
  or_102_nl <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")) OR (NOT
      mux_67_nl);
  mux_69_nl <= MUX_s_1_2_2(or_104_nl, or_102_nl, fsm_output(0));
  or_98_nl <= (fsm_output(3)) OR (fsm_output(2)) OR (NOT (fsm_output(6))) OR (INNER_LOOP_acc_12_psp_sva(0))
      OR (NOT INNER_LOOP_1_mul_cse_sva_0) OR (NOT (fsm_output(5))) OR x_1_sva OR
      (NOT x_3_sva);
  or_96_nl <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")) OR CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("01")) OR (NOT nor_tmp_4);
  mux_66_nl <= MUX_s_1_2_2(or_98_nl, or_96_nl, fsm_output(0));
  mux_70_nl <= MUX_s_1_2_2(mux_69_nl, mux_66_nl, INNER_LOOP_a_acc_psp_sva(0));
  or_94_nl <= (fsm_output(0)) OR (fsm_output(3)) OR (fsm_output(2)) OR CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("01")) OR (NOT nor_tmp_4);
  mux_71_nl <= MUX_s_1_2_2(mux_70_nl, or_94_nl, fsm_output(1));
  mux_84_nl <= MUX_s_1_2_2(mux_83_nl, mux_71_nl, fsm_output(4));
  nand_8_nl <= NOT((fsm_output(0)) AND (NOT mux_tmp_62));
  mux_61_nl <= MUX_s_1_2_2(or_tmp_80, or_tmp_78, fsm_output(2));
  nand_7_nl <= NOT((fsm_output(3)) AND (NOT mux_61_nl));
  mux_63_nl <= MUX_s_1_2_2(mux_tmp_62, nand_7_nl, fsm_output(0));
  mux_64_nl <= MUX_s_1_2_2(nand_8_nl, mux_63_nl, fsm_output(1));
  or_84_nl <= (fsm_output(1)) OR (fsm_output(0)) OR (fsm_output(3)) OR (fsm_output(2))
      OR (NOT (fsm_output(6))) OR (INNER_LOOP_acc_12_psp_sva(0)) OR (NOT INNER_LOOP_1_mul_cse_sva_0)
      OR (NOT (fsm_output(5))) OR x_1_sva OR (NOT x_3_sva);
  mux_65_nl <= MUX_s_1_2_2(mux_64_nl, or_84_nl, fsm_output(4));
  mux_85_nl <= MUX_s_1_2_2(mux_84_nl, mux_65_nl, or_tmp_25);
  or_81_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("001010")) OR x_1_sva
      OR (NOT x_3_sva);
  mux_86_itm <= MUX_s_1_2_2(mux_85_nl, or_81_nl, fsm_output(7));
  or_167_nl <= (NOT s_1_sva) OR (NOT (fsm_output(1))) OR s_0_sva OR (NOT y_3_sva)
      OR y_1_sva OR (fsm_output(6));
  nor_144_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva));
  nand_39_nl <= NOT((reg_INNER_LOOP_upper_acc_ftd_7(1)) AND (fsm_output(0)) AND y_3_sva
      AND (NOT y_1_sva));
  mux_109_nl <= MUX_s_1_2_2((fsm_output(6)), nor_144_nl, nand_39_nl);
  nand_12_nl <= NOT((fsm_output(1)) AND mux_109_nl);
  mux_110_nl <= MUX_s_1_2_2(or_167_nl, nand_12_nl, fsm_output(3));
  or_162_nl <= (NOT (reg_INNER_LOOP_upper_acc_ftd_7(1))) OR (fsm_output(0)) OR (NOT
      y_3_sva) OR y_1_sva OR (NOT (fsm_output(6)));
  or_160_nl <= (NOT (INNER_LOOP_b_acc_1_psp_sva(0))) OR s_0_sva;
  mux_108_nl <= MUX_s_1_2_2(or_tmp_137, or_162_nl, or_160_nl);
  or_163_nl <= (NOT (fsm_output(3))) OR (fsm_output(1)) OR mux_108_nl;
  mux_111_nl <= MUX_s_1_2_2(mux_110_nl, or_163_nl, fsm_output(2));
  or_158_nl <= (NOT (fsm_output(3))) OR (fsm_output(1)) OR (fsm_output(0)) OR CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR (NOT y_3_sva) OR y_1_sva OR (fsm_output(6));
  or_157_nl <= (NOT (fsm_output(0))) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR (fsm_output(6)) OR x_1_sva OR (NOT x_3_sva);
  mux_102_nl <= MUX_s_1_2_2((fsm_output(6)), or_tmp_145, or_tmp_25);
  or_154_nl <= (NOT y_3_sva) OR y_1_sva OR (fsm_output(6));
  mux_103_nl <= MUX_s_1_2_2(mux_102_nl, or_154_nl, fsm_output(0));
  or_151_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT y_3_sva) OR y_1_sva OR (fsm_output(6));
  mux_101_nl <= MUX_s_1_2_2(or_tmp_145, or_151_nl, fsm_output(0));
  or_150_nl <= (NOT INNER_LOOP_a_conc_12_itm_1) OR (reg_INNER_LOOP_upper_acc_ftd_7(0));
  mux_104_nl <= MUX_s_1_2_2(mux_103_nl, mux_101_nl, or_150_nl);
  mux_105_nl <= MUX_s_1_2_2(or_157_nl, mux_104_nl, fsm_output(1));
  nand_40_nl <= NOT((fsm_output(1)) AND (fsm_output(6)) AND (NOT x_1_sva) AND x_3_sva);
  mux_106_nl <= MUX_s_1_2_2(mux_105_nl, nand_40_nl, fsm_output(3));
  mux_107_nl <= MUX_s_1_2_2(or_158_nl, mux_106_nl, fsm_output(2));
  mux_112_nl <= MUX_s_1_2_2(mux_111_nl, mux_107_nl, fsm_output(5));
  mux_97_nl <= MUX_s_1_2_2((NOT (fsm_output(6))), or_tmp_135, or_tmp_25);
  mux_98_nl <= MUX_s_1_2_2(mux_97_nl, or_tmp_137, fsm_output(0));
  or_141_nl <= (NOT y_3_sva) OR y_1_sva OR (pref_y_idx_pref_9_0_sva(0)) OR not_tmp_67;
  mux_96_nl <= MUX_s_1_2_2(or_tmp_135, or_141_nl, fsm_output(0));
  or_139_nl <= (NOT (INNER_LOOP_a_acc_psp_sva(0))) OR (reg_INNER_LOOP_upper_acc_ftd_7(0));
  mux_99_nl <= MUX_s_1_2_2(mux_98_nl, mux_96_nl, or_139_nl);
  or_138_nl <= (fsm_output(0)) OR (NOT y_3_sva) OR y_1_sva OR (pref_y_idx_pref_9_0_sva(0))
      OR not_tmp_67;
  mux_100_nl <= MUX_s_1_2_2(mux_99_nl, or_138_nl, fsm_output(1));
  or_147_nl <= (NOT (fsm_output(5))) OR (fsm_output(2)) OR (fsm_output(3)) OR mux_100_nl;
  mux_113_nl <= MUX_s_1_2_2(mux_112_nl, or_147_nl, fsm_output(4));
  or_135_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("001010")) OR x_1_sva
      OR (NOT x_3_sva);
  mux_114_itm <= MUX_s_1_2_2(mux_113_nl, or_135_nl, fsm_output(7));
  nor_99_nl <= NOT((NOT (fsm_output(1))) OR (NOT s_1_sva) OR (NOT s_0_sva) OR CONV_SL_1_1(fsm_output(6
      DOWNTO 5)/=STD_LOGIC_VECTOR'("00")) OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(7)));
  nor_100_nl <= NOT((NOT (fsm_output(0))) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("11")) OR x_1_sva OR (NOT x_3_sva) OR CONV_SL_1_1(fsm_output(7
      DOWNTO 5)/=STD_LOGIC_VECTOR'("001")));
  nor_101_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR x_1_sva OR (NOT x_3_sva) OR CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("001")));
  nor_102_nl <= NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01"))
      OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(7)));
  nor_103_nl <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("001")));
  and_194_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (NOT x_1_sva) AND x_3_sva;
  mux_136_nl <= MUX_s_1_2_2(nor_102_nl, nor_103_nl, and_194_nl);
  and_195_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  mux_137_nl <= MUX_s_1_2_2(nor_101_nl, mux_136_nl, and_195_nl);
  nor_104_nl <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01")) OR y_1_sva
      OR (NOT y_3_sva) OR (fsm_output(7)));
  mux_138_nl <= MUX_s_1_2_2(mux_137_nl, nor_104_nl, fsm_output(0));
  mux_139_nl <= MUX_s_1_2_2(nor_100_nl, mux_138_nl, fsm_output(1));
  mux_140_nl <= MUX_s_1_2_2(nor_99_nl, mux_139_nl, fsm_output(2));
  nor_105_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR x_1_sva OR (NOT x_3_sva) OR CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("010")));
  nor_106_nl <= NOT((NOT s_0_sva) OR (NOT (INNER_LOOP_b_acc_1_psp_sva(0))) OR CONV_SL_1_1(fsm_output(6
      DOWNTO 5)/=STD_LOGIC_VECTOR'("10")) OR y_1_sva OR (NOT y_3_sva) OR (fsm_output(7)));
  nor_107_nl <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("010")));
  and_197_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (NOT x_1_sva) AND x_3_sva;
  mux_133_nl <= MUX_s_1_2_2(nor_106_nl, nor_107_nl, and_197_nl);
  mux_134_nl <= MUX_s_1_2_2(nor_105_nl, mux_133_nl, fsm_output(0));
  and_196_nl <= (fsm_output(1)) AND mux_134_nl;
  nor_108_nl <= NOT((fsm_output(0)) OR (NOT s_0_sva) OR (NOT (INNER_LOOP_b_acc_1_psp_sva(0)))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10")) OR y_1_sva
      OR (NOT y_3_sva) OR (fsm_output(7)));
  and_198_nl <= (fsm_output(0)) AND (NOT x_1_sva) AND x_3_sva AND INNER_LOOP_1_mul_cse_sva_0
      AND (INNER_LOOP_acc_12_psp_sva(0)) AND CONV_SL_1_1(fsm_output(7 DOWNTO 5)=STD_LOGIC_VECTOR'("011"));
  mux_132_nl <= MUX_s_1_2_2(nor_108_nl, and_198_nl, fsm_output(1));
  mux_135_nl <= MUX_s_1_2_2(and_196_nl, mux_132_nl, fsm_output(2));
  mux_141_nl <= MUX_s_1_2_2(mux_140_nl, mux_135_nl, fsm_output(3));
  nand_34_nl <= NOT((reg_INNER_LOOP_upper_acc_ftd_7(0)) AND (INNER_LOOP_a_acc_psp_sva(0))
      AND CONV_SL_1_1(fsm_output(6 DOWNTO 5)=STD_LOGIC_VECTOR'("11")) AND (NOT y_1_sva)
      AND y_3_sva AND (NOT (fsm_output(7))));
  or_192_nl <= CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("011"));
  and_199_nl <= (NOT x_1_sva) AND x_3_sva AND INNER_LOOP_1_mul_cse_sva_0 AND (INNER_LOOP_acc_12_psp_sva(0));
  mux_128_nl <= MUX_s_1_2_2(nand_34_nl, or_192_nl, and_199_nl);
  or_191_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("11")) OR y_1_sva
      OR (NOT y_3_sva) OR (fsm_output(7));
  and_200_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(0)) AND (INNER_LOOP_a_acc_psp_sva(0));
  mux_127_nl <= MUX_s_1_2_2(or_tmp_182, or_191_nl, and_200_nl);
  mux_129_nl <= MUX_s_1_2_2(mux_128_nl, mux_127_nl, fsm_output(0));
  mux_126_nl <= MUX_s_1_2_2(or_tmp_182, or_tmp_180, fsm_output(0));
  mux_130_nl <= MUX_s_1_2_2(mux_129_nl, mux_126_nl, fsm_output(1));
  or_186_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR x_1_sva OR (NOT x_3_sva) OR CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("100"));
  mux_125_nl <= MUX_s_1_2_2(or_tmp_180, or_186_nl, fsm_output(0));
  or_189_nl <= (fsm_output(1)) OR mux_125_nl;
  mux_131_nl <= MUX_s_1_2_2(mux_130_nl, or_189_nl, fsm_output(2));
  nor_109_nl <= NOT((fsm_output(3)) OR mux_131_nl);
  mux_142_rmff <= MUX_s_1_2_2(mux_141_nl, nor_109_nl, fsm_output(4));
  and_222_nl <= (fsm_output(2)) AND (fsm_output(0)) AND (fsm_output(1)) AND (NOT
      (fsm_output(6)));
  mux_169_nl <= MUX_s_1_2_2((fsm_output(6)), and_222_nl, fsm_output(4));
  or_251_nl <= (fsm_output(2)) OR (fsm_output(1)) OR (NOT (fsm_output(6)));
  mux_168_nl <= MUX_s_1_2_2(or_251_nl, (fsm_output(6)), fsm_output(4));
  mux_170_nl <= MUX_s_1_2_2(mux_169_nl, (NOT mux_168_nl), fsm_output(3));
  nor_78_nl <= NOT((fsm_output(0)) OR (fsm_output(1)) OR (NOT (fsm_output(6))));
  nor_79_nl <= NOT(nor_80_cse OR (fsm_output(6)));
  mux_166_nl <= MUX_s_1_2_2(nor_78_nl, nor_79_nl, fsm_output(2));
  nor_151_nl <= NOT((fsm_output(4)) OR mux_166_nl);
  and_223_nl <= nand_26_cse AND (fsm_output(6));
  nor_152_nl <= NOT((NOT (fsm_output(2))) OR (fsm_output(6)));
  mux_165_nl <= MUX_s_1_2_2(and_223_nl, nor_152_nl, fsm_output(4));
  mux_167_nl <= MUX_s_1_2_2(nor_151_nl, mux_165_nl, fsm_output(3));
  mux_171_nl <= MUX_s_1_2_2(mux_170_nl, mux_167_nl, fsm_output(5));
  or_241_nl <= (NOT (fsm_output(2))) OR (NOT (fsm_output(1))) OR (fsm_output(6));
  or_240_nl <= (fsm_output(2)) OR (fsm_output(6));
  mux_163_nl <= MUX_s_1_2_2(or_241_nl, or_240_nl, fsm_output(4));
  or_239_nl <= (fsm_output(4)) OR (fsm_output(6));
  mux_164_nl <= MUX_s_1_2_2(mux_163_nl, or_239_nl, fsm_output(3));
  nor_153_nl <= NOT((fsm_output(5)) OR mux_164_nl);
  mux_172_rmff <= MUX_s_1_2_2(mux_171_nl, nor_153_nl, fsm_output(7));
  nand_26_cse <= NOT(CONV_SL_1_1(fsm_output(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111")));
  nor_69_cse <= NOT(CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("01")));
  and_184_cse <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"));
  and_185_cse <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)=STD_LOGIC_VECTOR'("11"));
  or_332_cse <= CONV_SL_1_1(fsm_output(2 DOWNTO 0)/=STD_LOGIC_VECTOR'("000"));
  or_333_cse <= and_184_cse OR (fsm_output(2));
  nor_155_cse <= NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00")));
  and_125_rgt <= and_dcpl_121 AND (NOT (fsm_output(1))) AND (fsm_output(4)) AND (fsm_output(7))
      AND (INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva(7));
  or_364_cse <= (fsm_output(3)) OR (fsm_output(6));
  drf_y_smx_lpi_3_dfm_4 <= MUX1HOT_v_64_3_2(xt_rsc_0_3_i_q_d, yt_rsc_0_3_i_q_d, drf_y_smx_lpi_3_dfm,
      STD_LOGIC_VECTOR'( INNER_LOOP_b_INNER_LOOP_b_and_2_cse & INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      & INNER_LOOP_b_nor_itm));
  INNER_LOOP_b_acc_10_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0
      & '0') + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      7), 8), 8));
  INNER_LOOP_b_acc_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(INNER_LOOP_b_acc_10_nl),
      8) + UNSIGNED'( s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva &
      s_3_sva & s_2_sva), 8));
  nor_21_cse <= NOT(INNER_LOOP_a_conc_12_itm_1 OR (NOT (reg_INNER_LOOP_upper_acc_ftd_7(0))));
  nor_80_cse <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  INNER_LOOP_1_q_and_psp_sva_1 <= (z_out_1(8 DOWNTO 2)) AND INNER_LOOP_1_q_and_psp_sva;
  INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
      7), 8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0),
      7), 8), 8));
  INNER_LOOP_a_acc_psp_sva_mx0w0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1
      & (z_out_1(1))), 8), 9) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0 & (NOT
      (z_out_1(1 DOWNTO 0)))), 9));
  INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0 <= y_1_sva AND (NOT y_3_sva);
  INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0 <= y_3_sva AND (NOT y_1_sva);
  INNER_LOOP_1_upper_and_psp_sva_mx0w0 <= (NOT (z_out_1(8 DOWNTO 2))) AND INNER_LOOP_1_q_and_psp_sva;
  INNER_LOOP_b_and_nl <= INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_4_nl <= s_0_sva AND (NOT s_1_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_5_nl <= s_1_sva AND (NOT s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_6_nl <= s_1_sva AND s_0_sva AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_and_1_nl <= INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_7_nl <= s_0_sva AND (NOT s_1_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_8_nl <= s_1_sva AND (NOT s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_9_nl <= s_1_sva AND s_0_sva AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  drf_y_smx_lpi_3_dfm_5 <= MUX1HOT_v_64_9_2(xt_rsc_0_0_i_q_d, xt_rsc_0_1_i_q_d, xt_rsc_0_2_i_q_d,
      xt_rsc_0_3_i_q_d, yt_rsc_0_0_i_q_d, yt_rsc_0_1_i_q_d, yt_rsc_0_2_i_q_d, yt_rsc_0_3_i_q_d,
      drf_y_smx_lpi_2, STD_LOGIC_VECTOR'( INNER_LOOP_b_and_nl & INNER_LOOP_b_INNER_LOOP_b_and_4_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_5_nl & INNER_LOOP_b_INNER_LOOP_b_and_6_nl &
      INNER_LOOP_b_and_1_nl & INNER_LOOP_b_INNER_LOOP_b_and_7_nl & INNER_LOOP_b_INNER_LOOP_b_and_8_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_9_nl & INNER_LOOP_b_nor_itm));
  INNER_LOOP_b_INNER_LOOP_b_and_14_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("01")) AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_16_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_17_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("01")) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_19_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  drf_y_smx_lpi_3_dfm_6 <= MUX1HOT_v_64_5_2(xt_rsc_0_1_i_q_d, drf_y_smx_lpi_2, yt_rsc_0_1_i_q_d,
      tmp_3_sva_3, drf_y_smx_lpi_3_dfm, STD_LOGIC_VECTOR'( INNER_LOOP_b_INNER_LOOP_b_and_14_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_16_nl & INNER_LOOP_b_INNER_LOOP_b_and_17_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_19_nl & INNER_LOOP_b_nor_itm));
  INNER_LOOP_b_INNER_LOOP_b_and_24_nl <= s_0_sva AND (NOT (INNER_LOOP_b_acc_1_psp_sva(0)))
      AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_25_nl <= (INNER_LOOP_b_acc_1_psp_sva(0)) AND (NOT
      s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_2_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_27_nl <= s_0_sva AND (NOT (INNER_LOOP_b_acc_1_psp_sva(0)))
      AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_b_INNER_LOOP_b_and_28_nl <= (INNER_LOOP_b_acc_1_psp_sva(0)) AND (NOT
      s_0_sva) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  drf_y_smx_lpi_3_dfm_7 <= MUX1HOT_v_64_5_2(drf_y_smx_lpi_2, xt_rsc_0_2_i_q_d, tmp_3_sva_3,
      yt_rsc_0_2_i_q_d, drf_y_smx_lpi_3_dfm, STD_LOGIC_VECTOR'( INNER_LOOP_b_INNER_LOOP_b_and_24_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_25_nl & INNER_LOOP_b_INNER_LOOP_b_and_27_nl
      & INNER_LOOP_b_INNER_LOOP_b_and_28_nl & INNER_LOOP_b_nor_itm));
  INNER_LOOP_b_INNER_LOOP_b_nor_cse_1 <= NOT(s_1_sva OR s_0_sva);
  nor_tmp_4 <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)=STD_LOGIC_VECTOR'("11"));
  or_tmp_7 <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00"));
  and_dcpl_11 <= NOT((fsm_output(4)) OR (fsm_output(7)));
  and_dcpl_13 <= nor_80_cse AND and_dcpl_11;
  and_dcpl_14 <= NOT((fsm_output(5)) OR (fsm_output(2)));
  and_dcpl_15 <= NOT((fsm_output(6)) OR (fsm_output(3)));
  and_dcpl_16 <= and_dcpl_15 AND and_dcpl_14;
  and_dcpl_17 <= and_dcpl_16 AND and_dcpl_13;
  and_dcpl_18 <= (fsm_output(4)) AND (fsm_output(7));
  and_dcpl_19 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"));
  and_dcpl_21 <= (NOT (fsm_output(5))) AND (fsm_output(2));
  and_dcpl_22 <= and_dcpl_15 AND and_dcpl_21;
  and_dcpl_23 <= and_dcpl_22 AND and_dcpl_19 AND and_dcpl_18;
  or_20_nl <= (CONV_SL_1_1(fsm_output(2 DOWNTO 0)=STD_LOGIC_VECTOR'("111"))) OR (fsm_output(5))
      OR (fsm_output(3)) OR (fsm_output(6));
  mux_tmp_20 <= MUX_s_1_2_2(or_tmp_7, or_20_nl, fsm_output(4));
  nor_139_nl <= NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 0)/=STD_LOGIC_VECTOR'("0000000")));
  mux_tmp_21 <= MUX_s_1_2_2(nor_139_nl, mux_tmp_20, fsm_output(7));
  nor_tmp_12 <= (fsm_output(5)) AND (fsm_output(3)) AND (fsm_output(6));
  mux_tmp_24 <= MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_333_cse);
  or_tmp_18 <= (NOT (fsm_output(0))) OR (fsm_output(2)) OR (fsm_output(5)) OR (fsm_output(3))
      OR (fsm_output(6));
  or_tmp_19 <= (fsm_output(2)) OR (NOT (fsm_output(5))) OR (NOT (fsm_output(3)))
      OR (fsm_output(6));
  and_dcpl_26 <= and_184_cse AND and_dcpl_11;
  and_dcpl_27 <= (fsm_output(5)) AND (fsm_output(2));
  and_dcpl_28 <= and_dcpl_15 AND and_dcpl_27;
  and_dcpl_29 <= and_dcpl_28 AND and_dcpl_26;
  and_dcpl_30 <= (fsm_output(6)) AND (fsm_output(3));
  and_dcpl_31 <= and_dcpl_30 AND and_dcpl_21;
  and_dcpl_32 <= and_dcpl_31 AND and_dcpl_13;
  and_dcpl_33 <= (fsm_output(4)) AND (NOT (fsm_output(7)));
  and_dcpl_35 <= (fsm_output(5)) AND (NOT (fsm_output(2)));
  and_dcpl_36 <= (fsm_output(6)) AND (NOT (fsm_output(3)));
  and_dcpl_37 <= and_dcpl_36 AND and_dcpl_35;
  and_dcpl_38 <= and_dcpl_37 AND and_dcpl_19 AND and_dcpl_33;
  or_tmp_25 <= (NOT y_3_sva) OR y_1_sva;
  or_tmp_29 <= (NOT (fsm_output(0))) OR (INNER_LOOP_acc_12_psp_sva(0)) OR INNER_LOOP_1_mul_cse_sva_0
      OR (NOT (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva);
  or_tmp_33 <= (fsm_output(3)) OR (fsm_output(6)) OR x_1_sva OR (NOT x_3_sva);
  or_39_nl <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (fsm_output(0)) OR (fsm_output(6)) OR x_1_sva OR (NOT x_3_sva);
  mux_30_nl <= MUX_s_1_2_2(or_39_nl, or_tmp_29, fsm_output(3));
  mux_31_nl <= MUX_s_1_2_2(or_tmp_33, mux_30_nl, fsm_output(1));
  nand_tmp_1 <= NOT((fsm_output(2)) AND (NOT mux_31_nl));
  or_tmp_53 <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva);
  and_dcpl_39 <= and_dcpl_19 AND and_dcpl_11;
  and_dcpl_40 <= and_dcpl_16 AND and_dcpl_39;
  and_dcpl_41 <= and_dcpl_16 AND and_dcpl_26;
  and_dcpl_42 <= and_dcpl_28 AND and_dcpl_39;
  and_dcpl_43 <= and_dcpl_30 AND and_dcpl_14;
  and_dcpl_44 <= and_dcpl_43 AND and_dcpl_26;
  and_dcpl_46 <= and_dcpl_37 AND nor_80_cse AND and_dcpl_33;
  and_dcpl_47 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"));
  and_dcpl_49 <= and_dcpl_37 AND and_dcpl_47 AND and_dcpl_33;
  and_dcpl_51 <= and_dcpl_47 AND and_dcpl_11;
  and_dcpl_52 <= and_dcpl_28 AND and_dcpl_51;
  and_dcpl_53 <= and_dcpl_43 AND and_dcpl_39;
  and_dcpl_54 <= and_dcpl_30 AND and_dcpl_27;
  and_dcpl_55 <= and_dcpl_54 AND and_dcpl_26;
  and_dcpl_57 <= and_dcpl_22 AND nor_80_cse AND and_dcpl_18;
  and_dcpl_58 <= x_3_sva AND (NOT x_1_sva);
  nor_14_cse <= NOT((fsm_output(3)) OR (fsm_output(6)) OR (NOT (fsm_output(2))));
  nor_132_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT((fsm_output(4)) AND (fsm_output(7)))));
  mux_52_nl <= MUX_s_1_2_2(nor_132_nl, and_dcpl_11, fsm_output(5));
  nor_134_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR (NOT (fsm_output(5))) OR (fsm_output(4)) OR (fsm_output(7)));
  mux_53_nl <= MUX_s_1_2_2(mux_52_nl, nor_134_nl, fsm_output(0));
  and_207_nl <= nor_14_cse AND mux_53_nl;
  nor_135_nl <= NOT((fsm_output(0)) OR (fsm_output(5)) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(4)) OR (fsm_output(7)));
  nor_136_nl <= NOT((NOT (fsm_output(0))) OR INNER_LOOP_1_mul_cse_sva_0 OR (INNER_LOOP_acc_12_psp_sva(0))
      OR (NOT (fsm_output(5))) OR (fsm_output(4)) OR (fsm_output(7)));
  mux_51_nl <= MUX_s_1_2_2(nor_135_nl, nor_136_nl, fsm_output(2));
  and_208_nl <= (fsm_output(3)) AND (fsm_output(6)) AND mux_51_nl;
  not_tmp_43 <= MUX_s_1_2_2(and_207_nl, and_208_nl, fsm_output(1));
  and_dcpl_61 <= (NOT y_1_sva) AND y_3_sva AND (NOT (fsm_output(7)));
  not_tmp_45 <= NOT((fsm_output(6)) AND (fsm_output(4)));
  nor_127_nl <= NOT(s_1_sva OR s_0_sva OR (fsm_output(6)) OR (fsm_output(4)));
  nor_128_nl <= NOT((fsm_output(6)) OR (fsm_output(4)));
  mux_58_nl <= MUX_s_1_2_2(nor_127_nl, nor_128_nl, fsm_output(0));
  and_206_nl <= nor_69_cse AND mux_58_nl;
  nor_129_nl <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
      OR (reg_INNER_LOOP_upper_acc_ftd_7(1)) OR (NOT (fsm_output(6))) OR (fsm_output(4)));
  nor_130_nl <= NOT(CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR s_0_sva OR (INNER_LOOP_b_acc_1_psp_sva(0)) OR (NOT (fsm_output(6))) OR (fsm_output(4)));
  mux_57_nl <= MUX_s_1_2_2(nor_129_nl, nor_130_nl, fsm_output(2));
  mux_59_nl <= MUX_s_1_2_2(and_206_nl, mux_57_nl, fsm_output(3));
  or_73_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(0)) OR (INNER_LOOP_a_acc_psp_sva(0))
      OR not_tmp_45;
  or_71_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
      OR not_tmp_45;
  mux_55_nl <= MUX_s_1_2_2(or_73_nl, or_71_nl, fsm_output(0));
  or_74_nl <= (fsm_output(1)) OR mux_55_nl;
  or_69_nl <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(6)) OR (fsm_output(4));
  mux_56_nl <= MUX_s_1_2_2(or_74_nl, or_69_nl, fsm_output(2));
  nor_131_nl <= NOT((fsm_output(3)) OR mux_56_nl);
  not_tmp_47 <= MUX_s_1_2_2(mux_59_nl, nor_131_nl, fsm_output(5));
  or_tmp_78 <= (NOT (fsm_output(6))) OR (INNER_LOOP_acc_12_psp_sva(0)) OR (NOT INNER_LOOP_1_mul_cse_sva_0)
      OR (NOT (fsm_output(5))) OR x_1_sva OR (NOT x_3_sva);
  or_tmp_80 <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("10")) OR x_1_sva
      OR (NOT x_3_sva);
  or_tmp_82 <= (fsm_output(2)) OR (NOT (fsm_output(6))) OR (fsm_output(5)) OR x_1_sva
      OR (NOT x_3_sva);
  or_92_nl <= (NOT (fsm_output(2))) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("01")) OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01"))
      OR x_1_sva OR (NOT x_3_sva);
  mux_tmp_62 <= MUX_s_1_2_2(or_92_nl, or_tmp_82, fsm_output(3));
  or_tmp_98 <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01"));
  or_tmp_100 <= CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("01"));
  or_tmp_101 <= s_1_sva OR (NOT s_0_sva) OR CONV_SL_1_1(fsm_output(6 DOWNTO 5)/=STD_LOGIC_VECTOR'("00"));
  nor_175_nl <= NOT((fsm_output(5)) OR (NOT and_dcpl_30));
  nor_176_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT (fsm_output(5))) OR (fsm_output(3)) OR (fsm_output(6)));
  mux_88_nl <= MUX_s_1_2_2(nor_175_nl, nor_176_nl, fsm_output(2));
  nand_10_nl <= NOT((fsm_output(0)) AND mux_88_nl);
  or_117_nl <= (fsm_output(2)) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO
      0)/=STD_LOGIC_VECTOR'("01")) OR (fsm_output(5)) OR (NOT and_dcpl_30);
  or_115_nl <= (NOT (fsm_output(2))) OR (INNER_LOOP_acc_12_psp_sva(0)) OR (NOT(INNER_LOOP_1_mul_cse_sva_0
      AND (fsm_output(5)) AND (fsm_output(3)) AND (fsm_output(6))));
  mux_87_nl <= MUX_s_1_2_2(or_117_nl, or_115_nl, fsm_output(0));
  mux_89_nl <= MUX_s_1_2_2(nand_10_nl, mux_87_nl, fsm_output(1));
  nor_124_nl <= NOT((fsm_output(4)) OR mux_89_nl);
  nor_125_nl <= NOT((NOT (fsm_output(4))) OR (fsm_output(1)) OR (fsm_output(0)) OR
      CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (NOT (fsm_output(2))) OR (fsm_output(5)) OR (fsm_output(3)) OR (fsm_output(6)));
  not_tmp_62 <= MUX_s_1_2_2(nor_124_nl, nor_125_nl, fsm_output(7));
  or_132_nl <= (NOT (reg_INNER_LOOP_upper_acc_ftd_7(0))) OR (INNER_LOOP_a_acc_psp_sva(0))
      OR (fsm_output(3)) OR (NOT (fsm_output(6)));
  or_130_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (fsm_output(3)) OR (NOT (fsm_output(6)));
  mux_94_nl <= MUX_s_1_2_2(or_132_nl, or_130_nl, fsm_output(0));
  nor_120_nl <= NOT((NOT (fsm_output(4))) OR (NOT (fsm_output(5))) OR (fsm_output(2))
      OR mux_94_nl);
  or_125_nl <= s_1_sva OR (NOT s_0_sva) OR (fsm_output(3)) OR (fsm_output(6));
  nand_49_nl <= NOT(s_0_sva AND (fsm_output(3)) AND (NOT (INNER_LOOP_b_acc_1_psp_sva(0)))
      AND (fsm_output(6)));
  mux_92_nl <= MUX_s_1_2_2(or_125_nl, nand_49_nl, fsm_output(0));
  or_126_nl <= (fsm_output(2)) OR mux_92_nl;
  nor_122_nl <= NOT(INNER_LOOP_a_conc_12_itm_1 OR (NOT (reg_INNER_LOOP_upper_acc_ftd_7(0)))
      OR (fsm_output(3)) OR (fsm_output(6)));
  nor_123_nl <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01"))
      OR (fsm_output(3)) OR (fsm_output(6)));
  mux_91_nl <= MUX_s_1_2_2(nor_122_nl, nor_123_nl, fsm_output(0));
  nand_11_nl <= NOT((fsm_output(2)) AND mux_91_nl);
  mux_93_nl <= MUX_s_1_2_2(or_126_nl, nand_11_nl, fsm_output(5));
  nor_121_nl <= NOT((fsm_output(4)) OR mux_93_nl);
  not_tmp_65 <= MUX_s_1_2_2(nor_120_nl, nor_121_nl, fsm_output(1));
  not_tmp_67 <= NOT((pref_y_idx_pref_9_0_sva(1)) AND (fsm_output(6)));
  or_tmp_135 <= (NOT (INNER_LOOP_acc_12_psp_sva(0))) OR INNER_LOOP_1_mul_cse_sva_0
      OR (NOT (fsm_output(6))) OR x_1_sva OR (NOT x_3_sva);
  or_tmp_137 <= or_tmp_25 OR (NOT (fsm_output(6)));
  or_tmp_145 <= CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (fsm_output(6)) OR x_1_sva OR (NOT x_3_sva);
  nor_115_nl <= NOT((fsm_output(5)) OR (pref_x_idx_pref_1_9_0_sva(0)) OR (NOT((pref_x_idx_pref_1_9_0_sva(1))
      AND (fsm_output(4)) AND (fsm_output(7)))));
  nor_116_nl <= NOT(CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT (fsm_output(5))) OR (fsm_output(4)) OR (fsm_output(7)));
  mux_117_nl <= MUX_s_1_2_2(nor_115_nl, nor_116_nl, fsm_output(0));
  and_203_nl <= nor_14_cse AND mux_117_nl;
  nor_117_nl <= NOT((fsm_output(0)) OR (fsm_output(5)) OR (fsm_output(4)) OR (fsm_output(7))
      OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10")));
  nor_118_nl <= NOT((NOT (fsm_output(5))) OR (fsm_output(4)) OR (fsm_output(7)));
  nor_119_nl <= NOT(INNER_LOOP_1_mul_cse_sva_0 OR (NOT (INNER_LOOP_acc_12_psp_sva(0)))
      OR (NOT (fsm_output(5))) OR (fsm_output(4)) OR (fsm_output(7)));
  mux_115_nl <= MUX_s_1_2_2(nor_118_nl, nor_119_nl, fsm_output(0));
  mux_116_nl <= MUX_s_1_2_2(nor_117_nl, mux_115_nl, fsm_output(2));
  and_204_nl <= (fsm_output(3)) AND (fsm_output(6)) AND mux_116_nl;
  not_tmp_75 <= MUX_s_1_2_2(and_203_nl, and_204_nl, fsm_output(1));
  nor_111_nl <= NOT((NOT s_1_sva) OR s_0_sva OR (fsm_output(6)) OR (fsm_output(3)));
  and_201_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(1)) AND (fsm_output(6)) AND (fsm_output(3));
  mux_122_nl <= MUX_s_1_2_2(nor_111_nl, and_201_nl, fsm_output(0));
  nand_36_nl <= NOT((fsm_output(1)) AND mux_122_nl);
  or_182_nl <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR s_0_sva
      OR (NOT((INNER_LOOP_b_acc_1_psp_sva(0)) AND (fsm_output(6)) AND (fsm_output(3))));
  mux_123_nl <= MUX_s_1_2_2(nand_36_nl, or_182_nl, fsm_output(2));
  nor_110_nl <= NOT((fsm_output(4)) OR mux_123_nl);
  nor_112_nl <= NOT((NOT INNER_LOOP_a_conc_12_itm_1) OR (reg_INNER_LOOP_upper_acc_ftd_7(0))
      OR (fsm_output(6)) OR (fsm_output(3)));
  nor_113_nl <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (fsm_output(6)) OR (fsm_output(3)));
  mux_120_nl <= MUX_s_1_2_2(nor_112_nl, nor_113_nl, fsm_output(0));
  and_202_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)=STD_LOGIC_VECTOR'("11")) AND mux_120_nl;
  or_177_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(0)) OR (NOT (INNER_LOOP_a_acc_psp_sva(0)))
      OR (NOT (fsm_output(6))) OR (fsm_output(3));
  or_176_nl <= CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"))
      OR (NOT (fsm_output(6))) OR (fsm_output(3));
  mux_119_nl <= MUX_s_1_2_2(or_177_nl, or_176_nl, fsm_output(0));
  nor_114_nl <= NOT(CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"))
      OR mux_119_nl);
  mux_121_nl <= MUX_s_1_2_2(and_202_nl, nor_114_nl, fsm_output(4));
  not_tmp_80 <= MUX_s_1_2_2(nor_110_nl, mux_121_nl, fsm_output(5));
  or_tmp_180 <= x_1_sva OR (NOT x_3_sva) OR CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("100"));
  or_tmp_182 <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND CONV_SL_1_1(fsm_output(6 DOWNTO 5)=STD_LOGIC_VECTOR'("11")) AND (NOT y_1_sva)
      AND y_3_sva AND (NOT (fsm_output(7))));
  nand_32_nl <= NOT((fsm_output(0)) AND (fsm_output(2)) AND CONV_SL_1_1(pref_x_idx_pref_1_9_0_1_sva(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(5)) AND (NOT (fsm_output(3)))
      AND (NOT (fsm_output(6))));
  or_335_nl <= (fsm_output(2)) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_2_sva(1 DOWNTO
      0)/=STD_LOGIC_VECTOR'("11")) OR (fsm_output(5)) OR (NOT and_dcpl_30);
  nand_33_nl <= NOT((fsm_output(2)) AND (INNER_LOOP_acc_12_psp_sva(0)) AND INNER_LOOP_1_mul_cse_sva_0
      AND (fsm_output(5)) AND (fsm_output(3)) AND (fsm_output(6)));
  mux_144_nl <= MUX_s_1_2_2(or_335_nl, nand_33_nl, fsm_output(0));
  mux_145_nl <= MUX_s_1_2_2(nand_32_nl, mux_144_nl, fsm_output(1));
  nor_98_nl <= NOT((fsm_output(4)) OR mux_145_nl);
  or_206_nl <= (fsm_output(0)) OR CONV_SL_1_1(pref_x_idx_pref_1_9_0_sva(1 DOWNTO
      0)/=STD_LOGIC_VECTOR'("11")) OR (NOT (fsm_output(2))) OR (fsm_output(5)) OR
      (fsm_output(3)) OR (fsm_output(6));
  mux_143_nl <= MUX_s_1_2_2(or_206_nl, or_tmp_18, fsm_output(1));
  and_193_nl <= (fsm_output(4)) AND (NOT mux_143_nl);
  not_tmp_88 <= MUX_s_1_2_2(nor_98_nl, and_193_nl, fsm_output(7));
  nand_47_nl <= NOT((reg_INNER_LOOP_upper_acc_ftd_7(0)) AND (INNER_LOOP_a_acc_psp_sva(0))
      AND (NOT (fsm_output(3))) AND (fsm_output(6)));
  nand_48_nl <= NOT(CONV_SL_1_1(pref_y_idx_pref_9_0_sva(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (NOT (fsm_output(3))) AND (fsm_output(6)));
  mux_149_nl <= MUX_s_1_2_2(nand_47_nl, nand_48_nl, fsm_output(0));
  nor_95_nl <= NOT((NOT (fsm_output(4))) OR (NOT (fsm_output(5))) OR (fsm_output(2))
      OR mux_149_nl);
  nor_97_nl <= NOT((NOT s_1_sva) OR (fsm_output(3)) OR (fsm_output(6)));
  and_192_nl <= (fsm_output(3)) AND (INNER_LOOP_b_acc_1_psp_sva(0)) AND (fsm_output(6));
  mux_147_nl <= MUX_s_1_2_2(nor_97_nl, and_192_nl, fsm_output(0));
  or_213_nl <= (fsm_output(2)) OR (NOT(s_0_sva AND mux_147_nl));
  or_211_nl <= (NOT (fsm_output(2))) OR (fsm_output(0)) OR CONV_SL_1_1(pref_y_idx_pref_9_0_2_sva(1
      DOWNTO 0)/=STD_LOGIC_VECTOR'("11")) OR (fsm_output(3)) OR (fsm_output(6));
  mux_148_nl <= MUX_s_1_2_2(or_213_nl, or_211_nl, fsm_output(5));
  nor_96_nl <= NOT((fsm_output(4)) OR mux_148_nl);
  not_tmp_92 <= MUX_s_1_2_2(nor_95_nl, nor_96_nl, fsm_output(1));
  and_dcpl_73 <= (NOT x_3_sva) AND x_1_sva;
  and_dcpl_76 <= y_1_sva AND (NOT y_3_sva) AND (NOT (fsm_output(7)));
  and_dcpl_86 <= and_dcpl_15 AND (NOT (fsm_output(5)));
  and_dcpl_87 <= and_dcpl_86 AND and_dcpl_11;
  and_dcpl_96 <= and_dcpl_86 AND (fsm_output(2)) AND (NOT (fsm_output(0)));
  or_340_nl <= (fsm_output(1)) OR (NOT (fsm_output(0))) OR (fsm_output(2)) OR (NOT
      (fsm_output(5))) OR (fsm_output(3)) OR (NOT (fsm_output(6)));
  or_341_nl <= (fsm_output(0)) OR (NOT (fsm_output(2))) OR (NOT (fsm_output(5)))
      OR (NOT (fsm_output(3))) OR (fsm_output(6));
  or_342_nl <= (NOT (fsm_output(0))) OR (NOT (fsm_output(2))) OR (fsm_output(5))
      OR (fsm_output(3)) OR (fsm_output(6));
  mux_173_nl <= MUX_s_1_2_2(or_341_nl, or_342_nl, fsm_output(1));
  mux_174_nl <= MUX_s_1_2_2(or_340_nl, mux_173_nl, fsm_output(4));
  and_dcpl_98 <= NOT(mux_174_nl OR (fsm_output(7)));
  and_dcpl_99 <= (NOT (fsm_output(4))) AND (fsm_output(7));
  and_dcpl_101 <= and_dcpl_22 AND and_dcpl_19 AND and_dcpl_99;
  and_dcpl_107 <= (NOT (fsm_output(6))) AND (fsm_output(3)) AND and_dcpl_35 AND and_dcpl_13;
  and_dcpl_111 <= and_dcpl_31 AND and_dcpl_51;
  or_tmp_269 <= ((CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))) AND
      (fsm_output(2))) OR (fsm_output(5)) OR (fsm_output(3)) OR (fsm_output(6));
  and_dcpl_121 <= and_dcpl_86 AND and_218_cse;
  or_tmp_277 <= and_184_cse OR (fsm_output(2)) OR (fsm_output(5)) OR (fsm_output(3))
      OR (fsm_output(6));
  mux_191_nl <= MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_332_cse);
  mux_192_nl <= MUX_s_1_2_2(or_tmp_277, (NOT mux_191_nl), fsm_output(4));
  and_dcpl_125 <= mux_192_nl AND (NOT (fsm_output(7)));
  and_dcpl_126 <= NOT(CONV_SL_1_1(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("00")));
  nor_tmp_54 <= (fsm_output(5)) AND (fsm_output(3));
  mux_tmp_193 <= MUX_s_1_2_2(nor_tmp_54, (fsm_output(5)), fsm_output(2));
  mux_tmp_194 <= MUX_s_1_2_2((NOT (fsm_output(3))), (fsm_output(3)), fsm_output(5));
  mux_tmp_195 <= MUX_s_1_2_2(mux_tmp_194, nor_tmp_54, fsm_output(2));
  mux_tmp_198 <= MUX_s_1_2_2(mux_tmp_194, (fsm_output(5)), fsm_output(2));
  mux_199_nl <= MUX_s_1_2_2(mux_tmp_198, mux_tmp_193, fsm_output(0));
  mux_200_nl <= MUX_s_1_2_2(mux_tmp_195, mux_199_nl, fsm_output(1));
  mux_201_nl <= MUX_s_1_2_2(mux_200_nl, (fsm_output(5)), fsm_output(4));
  and_dcpl_128 <= (NOT mux_201_nl) AND and_dcpl_126;
  not_tmp_130 <= NOT((fsm_output(4)) OR or_tmp_277);
  or_dcpl_11 <= (fsm_output(4)) OR (fsm_output(7));
  or_dcpl_12 <= CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10"));
  or_dcpl_15 <= or_364_cse OR (fsm_output(5)) OR (fsm_output(2));
  or_dcpl_16 <= or_dcpl_15 OR or_dcpl_12 OR or_dcpl_11;
  mux_204_nl <= MUX_s_1_2_2(and_dcpl_15, (fsm_output(6)), fsm_output(5));
  and_175_nl <= ((fsm_output(5)) OR (fsm_output(3))) AND (fsm_output(6));
  mux_205_nl <= MUX_s_1_2_2(mux_204_nl, and_175_nl, or_333_cse);
  mux_206_nl <= MUX_s_1_2_2(mux_205_nl, (fsm_output(6)), fsm_output(4));
  and_dcpl_129 <= NOT(mux_206_nl OR (fsm_output(7)));
  mux_207_nl <= MUX_s_1_2_2(or_tmp_277, (NOT nor_tmp_4), fsm_output(4));
  and_dcpl_130 <= mux_207_nl AND (NOT (fsm_output(7)));
  and_dcpl_132 <= NOT(CONV_SL_1_1(reg_INNER_LOOP_1_w_lshift_idiv_ftd_8/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_133 <= CONV_SL_1_1(reg_INNER_LOOP_1_w_lshift_idiv_ftd_8=STD_LOGIC_VECTOR'("01"));
  and_dcpl_134 <= CONV_SL_1_1(reg_INNER_LOOP_1_w_lshift_idiv_ftd_8=STD_LOGIC_VECTOR'("10"));
  and_dcpl_135 <= CONV_SL_1_1(reg_INNER_LOOP_1_w_lshift_idiv_ftd_8=STD_LOGIC_VECTOR'("11"));
  and_dcpl_140 <= NOT((fsm_output(1)) OR (fsm_output(4)));
  and_dcpl_141 <= and_dcpl_140 AND (NOT (fsm_output(7)));
  and_dcpl_142 <= and_dcpl_141 AND and_dcpl_132;
  and_dcpl_144 <= and_dcpl_141 AND and_dcpl_133;
  and_dcpl_146 <= and_dcpl_141 AND and_dcpl_134;
  and_dcpl_148 <= and_dcpl_141 AND and_dcpl_135;
  and_dcpl_161 <= (fsm_output(1)) AND (NOT (fsm_output(4))) AND (NOT (fsm_output(7)));
  INNER_LOOP_w_mux1h_1_itm_mx0c0 <= and_dcpl_96 AND and_dcpl_142;
  INNER_LOOP_w_mux1h_1_itm_mx0c1 <= and_dcpl_96 AND and_dcpl_144;
  INNER_LOOP_w_mux1h_1_itm_mx0c2 <= and_dcpl_96 AND and_dcpl_146;
  INNER_LOOP_w_mux1h_1_itm_mx0c3 <= and_dcpl_96 AND and_dcpl_148;
  INNER_LOOP_1_acc_5_itm_mx0c0 <= and_dcpl_96 AND and_dcpl_140 AND (NOT (fsm_output(7)))
      AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  INNER_LOOP_1_acc_5_itm_mx0c1 <= and_dcpl_96 AND and_dcpl_140 AND (NOT (fsm_output(7)))
      AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse);
  INNER_LOOP_w_mux1h_2_itm_mx0c0 <= and_dcpl_121 AND and_dcpl_142;
  INNER_LOOP_w_mux1h_2_itm_mx0c1 <= and_dcpl_121 AND and_dcpl_144;
  INNER_LOOP_w_mux1h_2_itm_mx0c2 <= and_dcpl_121 AND and_dcpl_146;
  INNER_LOOP_w_mux1h_2_itm_mx0c3 <= and_dcpl_121 AND and_dcpl_148;
  INNER_LOOP_w_mux1h_3_itm_mx0c0 <= and_dcpl_96 AND and_dcpl_161 AND and_dcpl_132;
  INNER_LOOP_w_mux1h_3_itm_mx0c1 <= and_dcpl_96 AND and_dcpl_161 AND and_dcpl_133;
  INNER_LOOP_w_mux1h_3_itm_mx0c2 <= and_dcpl_96 AND and_dcpl_161 AND and_dcpl_134;
  INNER_LOOP_w_mux1h_3_itm_mx0c3 <= and_dcpl_96 AND and_dcpl_161 AND and_dcpl_135;
  OUTER_LOOP_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out_1(3 DOWNTO 1)) +
      SIGNED'( "011"), 3));
  OUTER_LOOP_acc_itm_2_1 <= OUTER_LOOP_acc_nl(2);
  yt_rsc_0_0_i_d_d_pff <= INNER_LOOP_1_modulo_dev_cmp_return_rsc_z;
  yt_rsc_0_0_i_radr_d_pff <= MUX1HOT_v_8_7_2(INNER_LOOP_b_acc_itm, (INNER_LOOP_a_acc_psp_4_sva
      & (INNER_LOOP_1_q_and_psp_sva(0))), (pref_y_idx_pref_9_0_2_sva(9 DOWNTO 2)),
      INNER_LOOP_a_acc_2_psp_sva, (INNER_LOOP_b_acc_1_psp_sva(8 DOWNTO 1)), (INNER_LOOP_a_acc_psp_sva(8
      DOWNTO 1)), (pref_y_idx_pref_9_0_sva(9 DOWNTO 2)), STD_LOGIC_VECTOR'( and_dcpl_40
      & and_dcpl_41 & and_dcpl_42 & and_dcpl_44 & and_dcpl_32 & and_dcpl_46 & and_dcpl_49));
  and_50_nl <= and_dcpl_28 AND and_dcpl_13;
  yt_rsc_0_0_i_wadr_d_pff <= MUX1HOT_v_8_5_2(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva,
      (pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO 2)), (pref_x_idx_pref_1_9_0_2_sva(9 DOWNTO
      2)), (INNER_LOOP_acc_12_psp_sva(8 DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9
      DOWNTO 2)), STD_LOGIC_VECTOR'( and_50_nl & and_dcpl_52 & and_dcpl_53 & and_dcpl_55
      & and_dcpl_57));
  yt_rsc_0_0_i_we_d_pff <= not_tmp_43 AND and_dcpl_58;
  yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_47 AND and_dcpl_61;
  yt_rsc_0_1_i_radr_d_pff <= MUX1HOT_v_8_6_2(INNER_LOOP_b_acc_itm, (INNER_LOOP_a_acc_psp_4_sva
      & INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm), (pref_y_idx_pref_9_0_2_sva(9
      DOWNTO 2)), (INNER_LOOP_b_acc_1_psp_sva(8 DOWNTO 1)), (INNER_LOOP_a_acc_psp_sva(8
      DOWNTO 1)), (pref_y_idx_pref_9_0_sva(9 DOWNTO 2)), STD_LOGIC_VECTOR'( and_dcpl_40
      & and_dcpl_42 & and_dcpl_29 & and_dcpl_44 & and_dcpl_46 & and_dcpl_49));
  and_63_nl <= and_dcpl_43 AND and_dcpl_51;
  yt_rsc_0_1_i_wadr_d_pff <= MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO
      2)), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva, (pref_x_idx_pref_1_9_0_2_sva(9
      DOWNTO 2)), (INNER_LOOP_acc_12_psp_sva(8 DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9
      DOWNTO 2)), STD_LOGIC_VECTOR'( and_dcpl_52 & and_63_nl & and_dcpl_53 & and_dcpl_55
      & and_dcpl_57));
  yt_rsc_0_1_i_we_d_pff <= not_tmp_62 AND and_dcpl_58;
  yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_65 AND and_dcpl_61;
  yt_rsc_0_2_i_radr_d_pff <= MUX1HOT_v_8_7_2(INNER_LOOP_b_acc_itm, (INNER_LOOP_a_acc_psp_4_sva
      & INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm), (pref_y_idx_pref_9_0_2_sva(9
      DOWNTO 2)), INNER_LOOP_a_acc_2_psp_sva, (INNER_LOOP_b_acc_1_psp_sva(8 DOWNTO
      1)), (INNER_LOOP_a_acc_psp_sva(8 DOWNTO 1)), (pref_y_idx_pref_9_0_sva(9 DOWNTO
      2)), STD_LOGIC_VECTOR'( and_dcpl_40 & and_dcpl_42 & and_dcpl_29 & and_dcpl_44
      & and_dcpl_32 & and_dcpl_46 & and_dcpl_49));
  and_66_nl <= and_dcpl_54 AND and_dcpl_39;
  yt_rsc_0_2_i_wadr_d_pff <= MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO
      2)), (pref_x_idx_pref_1_9_0_2_sva(9 DOWNTO 2)), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva,
      (INNER_LOOP_acc_12_psp_sva(8 DOWNTO 1)), (pref_x_idx_pref_1_9_0_sva(9 DOWNTO
      2)), STD_LOGIC_VECTOR'( and_dcpl_52 & and_dcpl_53 & and_66_nl & and_dcpl_55
      & and_dcpl_57));
  yt_rsc_0_2_i_we_d_pff <= not_tmp_75 AND and_dcpl_58;
  yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_80 AND and_dcpl_61;
  yt_rsc_0_3_i_radr_d_pff <= MUX1HOT_v_8_5_2(INNER_LOOP_b_acc_itm, (pref_y_idx_pref_9_0_2_sva(9
      DOWNTO 2)), (INNER_LOOP_b_acc_1_psp_sva(8 DOWNTO 1)), (INNER_LOOP_a_acc_psp_sva(8
      DOWNTO 1)), (pref_y_idx_pref_9_0_sva(9 DOWNTO 2)), STD_LOGIC_VECTOR'( and_dcpl_40
      & and_dcpl_42 & and_dcpl_44 & and_dcpl_46 & and_dcpl_49));
  and_71_nl <= and_dcpl_16 AND and_184_cse AND and_dcpl_18;
  yt_rsc_0_3_i_wadr_d_pff <= MUX1HOT_v_8_5_2((pref_x_idx_pref_1_9_0_1_sva(9 DOWNTO
      2)), (pref_x_idx_pref_1_9_0_2_sva(9 DOWNTO 2)), (INNER_LOOP_acc_12_psp_sva(8
      DOWNTO 1)), INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva, (pref_x_idx_pref_1_9_0_sva(9
      DOWNTO 2)), STD_LOGIC_VECTOR'( and_dcpl_52 & and_dcpl_53 & and_dcpl_55 & and_71_nl
      & and_dcpl_57));
  yt_rsc_0_3_i_we_d_pff <= not_tmp_88 AND and_dcpl_58;
  yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_92 AND and_dcpl_61;
  xt_rsc_0_0_i_we_d_pff <= not_tmp_43 AND and_dcpl_73;
  xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_47 AND and_dcpl_76;
  xt_rsc_0_1_i_we_d_pff <= not_tmp_62 AND and_dcpl_73;
  xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_65 AND and_dcpl_76;
  xt_rsc_0_2_i_we_d_pff <= not_tmp_75 AND and_dcpl_73;
  xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_80 AND and_dcpl_76;
  xt_rsc_0_3_i_we_d_pff <= not_tmp_88 AND and_dcpl_73;
  xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d <= not_tmp_92 AND and_dcpl_76;
  twiddle_rsc_0_0_i_radr_d_pff <= z_out_6(9 DOWNTO 2);
  nor_91_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (NOT
      (fsm_output(2))));
  nor_93_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")) OR (fsm_output(2)));
  mux_153_nl <= MUX_s_1_2_2(nor_91_nl, nor_93_nl, fsm_output(1));
  twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_153_nl AND and_dcpl_87;
  nor_87_nl <= NOT((z_out_6(1)) OR (NOT((z_out_6(0)) AND (fsm_output(2)))));
  nor_89_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("01")) OR (fsm_output(2)));
  mux_156_nl <= MUX_s_1_2_2(nor_87_nl, nor_89_nl, fsm_output(1));
  twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_156_nl AND and_dcpl_87;
  nor_83_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR (NOT
      (fsm_output(2))));
  nor_85_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("10")) OR (fsm_output(2)));
  mux_159_nl <= MUX_s_1_2_2(nor_83_nl, nor_85_nl, fsm_output(1));
  twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_159_nl AND and_dcpl_87;
  and_190_nl <= CONV_SL_1_1(z_out_6(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11")) AND (fsm_output(2));
  nor_81_nl <= NOT(CONV_SL_1_1(z_out_6(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11")) OR (fsm_output(2)));
  mux_162_nl <= MUX_s_1_2_2(and_190_nl, nor_81_nl, fsm_output(1));
  twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d <= mux_162_nl AND and_dcpl_87;
  and_dcpl_194 <= NOT(CONV_SL_1_1(fsm_output/=STD_LOGIC_VECTOR'("00000010")));
  and_dcpl_216 <= NOT((fsm_output(6)) OR (fsm_output(3)) OR (fsm_output(5)) OR (fsm_output(2)));
  and_dcpl_217 <= and_dcpl_216 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND and_dcpl_11;
  and_dcpl_223 <= (NOT (fsm_output(6))) AND (fsm_output(3)) AND and_dcpl_35 AND CONV_SL_1_1(fsm_output(1
      DOWNTO 0)=STD_LOGIC_VECTOR'("00")) AND and_dcpl_11;
  and_dcpl_229 <= (fsm_output(6)) AND (fsm_output(3)) AND (NOT (fsm_output(5))) AND
      (fsm_output(2)) AND (fsm_output(0)) AND (NOT (fsm_output(1))) AND and_dcpl_11;
  and_dcpl_235 <= (fsm_output(6)) AND (NOT (fsm_output(3))) AND and_dcpl_35 AND and_dcpl_19
      AND (fsm_output(4)) AND (NOT (fsm_output(7)));
  and_dcpl_237 <= and_dcpl_216 AND and_dcpl_19 AND and_dcpl_11;
  and_dcpl_243 <= and_dcpl_15 AND (NOT (fsm_output(5))) AND (NOT (fsm_output(2)));
  and_299_cse <= and_dcpl_243 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"))
      AND and_dcpl_11;
  and_302_cse <= and_dcpl_243 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND and_dcpl_11;
  and_dcpl_251 <= and_dcpl_15 AND (NOT (fsm_output(5))) AND (fsm_output(2));
  and_307_cse <= and_dcpl_251 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("00"))
      AND and_dcpl_11;
  or_tmp_298 <= INNER_LOOP_b_INNER_LOOP_b_and_2_cse OR INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  nor_tmp <= or_tmp_298 AND (fsm_output(3)) AND (fsm_output(6));
  and_310_cse <= and_dcpl_251 AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"))
      AND and_dcpl_11;
  OUTER_LOOP_m_or_1_itm <= and_299_cse OR and_302_cse OR and_307_cse OR and_310_cse;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( s_or_cse = '1' ) THEN
        OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "0001"), (z_out_1(3
            DOWNTO 0)), and_dcpl_23);
        s_9_sva <= and_dcpl_17;
        s_8_sva <= s_9_sva AND (NOT and_dcpl_17);
        s_7_sva <= s_8_sva AND (NOT and_dcpl_17);
        s_6_sva <= s_7_sva AND (NOT and_dcpl_17);
        s_5_sva <= s_6_sva AND (NOT and_dcpl_17);
        s_4_sva <= s_5_sva AND (NOT and_dcpl_17);
        s_3_sva <= s_4_sva AND (NOT and_dcpl_17);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        s_1_sva <= '0';
        x_3_sva <= '0';
        x_1_sva <= '0';
        y_3_sva <= '0';
        y_1_sva <= '0';
        s_2_sva <= '0';
      ELSIF ( s_or_cse = '1' ) THEN
        s_1_sva <= s_2_sva AND (NOT and_dcpl_17);
        x_3_sva <= y_3_sva OR and_dcpl_17;
        x_1_sva <= y_1_sva AND (NOT and_dcpl_17);
        y_3_sva <= x_3_sva AND (NOT and_dcpl_17);
        y_1_sva <= x_1_sva OR and_dcpl_17;
        s_2_sva <= s_3_sva AND (NOT and_dcpl_17);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        s_0_sva <= '0';
        reg_yt_rsc_0_0_cgo_cse <= '0';
        reg_yt_rsc_0_1_cgo_cse <= '0';
        reg_yt_rsc_0_2_cgo_cse <= '0';
        reg_yt_rsc_0_3_cgo_cse <= '0';
        reg_xt_rsc_triosy_0_3_obj_ld_cse <= '0';
        reg_ensig_cgo_cse <= '0';
        INNER_LOOP_a_INNER_LOOP_a_nor_5_itm <= '0';
        INNER_LOOP_a_and_9_itm <= '0';
        INNER_LOOP_a_INNER_LOOP_a_and_26_itm <= '0';
        INNER_LOOP_a_INNER_LOOP_a_and_27_itm <= '0';
        reg_INNER_LOOP_1_w_lshift_idiv_ftd_8 <= STD_LOGIC_VECTOR'( "00");
      ELSE
        s_0_sva <= s_mux_20_nl AND (NOT mux_tmp_21);
        reg_yt_rsc_0_0_cgo_cse <= NOT mux_50_itm;
        reg_yt_rsc_0_1_cgo_cse <= NOT mux_86_itm;
        reg_yt_rsc_0_2_cgo_cse <= NOT mux_114_itm;
        reg_yt_rsc_0_3_cgo_cse <= mux_142_rmff;
        reg_xt_rsc_triosy_0_3_obj_ld_cse <= and_dcpl_96 AND (fsm_output(1)) AND (fsm_output(4))
            AND (fsm_output(7)) AND (NOT OUTER_LOOP_acc_itm_2_1);
        reg_ensig_cgo_cse <= mux_172_rmff;
        INNER_LOOP_a_INNER_LOOP_a_nor_5_itm <= NOT((INNER_LOOP_a_acc_psp_sva(0))
            OR (reg_INNER_LOOP_upper_acc_ftd_7(0)) OR INNER_LOOP_b_INNER_LOOP_b_and_3_cse);
        INNER_LOOP_a_and_9_itm <= INNER_LOOP_a_INNER_LOOP_a_and_25_itm AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
        INNER_LOOP_a_INNER_LOOP_a_and_26_itm <= (INNER_LOOP_a_acc_psp_sva(0)) AND
            (NOT (reg_INNER_LOOP_upper_acc_ftd_7(0))) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
        INNER_LOOP_a_INNER_LOOP_a_and_27_itm <= (INNER_LOOP_a_acc_psp_sva(0)) AND
            (reg_INNER_LOOP_upper_acc_ftd_7(0)) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
        reg_INNER_LOOP_1_w_lshift_idiv_ftd_8 <= z_out_6(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      reg_INNER_LOOP_1_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
      INNER_LOOP_1_b_rem_cmp_a <= MUX1HOT_v_128_5_2(z_out_4, INNER_LOOP_1_b_mul_mut,
          INNER_LOOP_2_b_mul_mut, INNER_LOOP_3_b_mul_mut, INNER_LOOP_4_b_mul_mut,
          STD_LOGIC_VECTOR'( INNER_LOOP_b_or_nl & nor_154_nl & and_112_nl & and_118_nl
          & mux_185_nl));
      INNER_LOOP_1_q_and_psp_sva <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), INNER_LOOP_t_mux_nl,
          nor_158_nl);
      tmp_3_sva_3 <= MUX_v_64_2_2(yt_rsc_0_3_i_q_d, yt_rsc_0_1_i_q_d, and_dcpl_32);
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( mux_tmp_21 = '1' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(mux_26_nl, mux_tmp_20, fsm_output(7))) = '1' ) THEN
        drf_y_smx_lpi_2 <= MUX1HOT_v_64_4_2(INNER_LOOP_1_b_rem_cmp_z, xt_rsc_0_3_i_q_d,
            xt_rsc_0_1_i_q_d, drf_y_smx_lpi_3_dfm_4, STD_LOGIC_VECTOR'( nor_141_nl
            & and_dcpl_29 & and_dcpl_32 & and_dcpl_38));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (mux_tmp_21 OR and_125_rgt) = '1' ) THEN
        OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "1001"), z_out, and_125_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(nor_63_nl, mux_22_nl, fsm_output(7))) = '1' ) THEN
        OUTER_LOOP_m_lshift_psp_sva <= z_out_6(8 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_conc_12_itm_1 <= '0';
      ELSIF ( (NOT((NOT mux_197_nl) AND and_dcpl_126)) = '1' ) THEN
        INNER_LOOP_a_conc_12_itm_1 <= NOT (z_out_1(0));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_128 = '0' ) THEN
        INNER_LOOP_a_acc_psp_4_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1(6
            DOWNTO 1)), 6), 7) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0),
            7));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (MUX_s_1_2_2(not_tmp_130, mux_202_nl, fsm_output(7))) = '1' ) THEN
        INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva <= INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_x_idx_pref_1_9_0_1_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( and_dcpl_128 = '0' ) THEN
        pref_x_idx_pref_1_9_0_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
            & STD_LOGIC_VECTOR'( "00")) + UNSIGNED(z_out_4(9 DOWNTO 0)), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_y_idx_pref_9_0_2_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( or_dcpl_16 = '0' ) THEN
        pref_y_idx_pref_9_0_2_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_15_nl),
            8)) & STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_16_nl),
            2))) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0 & '0' & s_1_sva
            & '1'), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_x_idx_pref_1_9_0_2_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( and_dcpl_129 = '0' ) THEN
        pref_x_idx_pref_1_9_0_2_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
            & STD_LOGIC_VECTOR'( "01")) + UNSIGNED(z_out_4(9 DOWNTO 0)), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_129 = '0' ) THEN
        INNER_LOOP_a_acc_2_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva_1),
            7), 8) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0 & (NOT (z_out_1(1)))),
            8));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_acc_1_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_b_acc_1_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_12_nl),
            9) + UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0 & '0' & s_1_sva),
            9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_acc_12_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( and_dcpl_130 = '0' ) THEN
        INNER_LOOP_acc_12_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
            & '1') + UNSIGNED(z_out_4(9 DOWNTO 1)), 9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_1_mul_cse_sva_0 <= '0';
      ELSIF ( and_dcpl_130 = '0' ) THEN
        INNER_LOOP_1_mul_cse_sva_0 <= z_out_4(0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_acc_psp_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( and_dcpl_125 = '0' ) THEN
        INNER_LOOP_a_acc_psp_sva <= INNER_LOOP_a_acc_psp_sva_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_y_idx_pref_9_0_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (NOT(mux_209_nl AND (NOT (fsm_output(7))))) = '1' ) THEN
        pref_y_idx_pref_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_b_acc_17_nl),
            9)) & '1') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( s_8_sva & s_7_sva
            & s_6_sva & s_5_sva & s_4_sva & s_3_sva & s_2_sva & '0' & s_0_sva), 9),
            10) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (z_out_1(1 DOWNTO 0))),
            2), 10), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pref_x_idx_pref_1_9_0_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (MUX_s_1_2_2(not_tmp_130, mux_210_nl, fsm_output(7))) = '1' ) THEN
        pref_x_idx_pref_1_9_0_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_slc_INNER_LOOP_1_INNER_LOOP_acc_9_2_psp_sva_1
            & STD_LOGIC_VECTOR'( "11")) + UNSIGNED(z_out_4(9 DOWNTO 0)), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_q_and_psp_sva),
            7), 8) + UNSIGNED'( "00000001"), 8));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_INNER_LOOP_b_and_2_cse <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_b_INNER_LOOP_b_and_2_cse <= INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_INNER_LOOP_b_and_3_cse <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_b_INNER_LOOP_b_and_3_cse <= INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_b_nor_itm <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_b_nor_itm <= NOT(INNER_LOOP_b_INNER_LOOP_b_and_2_cse_mx0w0 OR
            INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_INNER_LOOP_a_and_22_itm <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_a_INNER_LOOP_a_and_22_itm <= (z_out_1(0)) AND (NOT (INNER_LOOP_a_acc_psp_sva_mx0w0(0)))
            AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_INNER_LOOP_a_and_23_itm <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_a_INNER_LOOP_a_and_23_itm <= (INNER_LOOP_a_acc_psp_sva_mx0w0(0))
            AND (NOT (z_out_1(0))) AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_INNER_LOOP_a_and_24_itm <= '0';
      ELSIF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_a_INNER_LOOP_a_and_24_itm <= (INNER_LOOP_a_acc_psp_sva_mx0w0(0))
            AND (z_out_1(0)) AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_dcpl_16 = '0' ) THEN
        INNER_LOOP_1_upper_and_psp_sva <= INNER_LOOP_1_upper_and_psp_sva_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT mux_213_nl) AND and_dcpl_126)) = '1' ) THEN
        INNER_LOOP_a_slc_INNER_LOOP_1_q_and_psp_0_5_itm <= INNER_LOOP_1_q_and_psp_sva(0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(mux_233_nl OR (fsm_output(4)))) = '1' ) THEN
        drf_y_smx_lpi_3_dfm <= MUX1HOT_v_64_4_2(drf_y_smx_lpi_3_dfm_5, drf_y_smx_lpi_3_dfm_6,
            drf_y_smx_lpi_3_dfm_7, INNER_LOOP_1_b_rem_cmp_z, STD_LOGIC_VECTOR'( and_dcpl_41
            & and_dcpl_107 & and_dcpl_111 & and_142_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_dcpl_15 OR CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("11"))
          OR or_dcpl_11)) = '1' ) THEN
        INNER_LOOP_1_b_mul_mut <= z_out_4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (INNER_LOOP_w_mux1h_1_itm_mx0c0 OR INNER_LOOP_w_mux1h_1_itm_mx0c1 OR INNER_LOOP_w_mux1h_1_itm_mx0c2
          OR INNER_LOOP_w_mux1h_1_itm_mx0c3) = '1' ) THEN
        INNER_LOOP_w_mux1h_1_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
            twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, STD_LOGIC_VECTOR'( INNER_LOOP_w_mux1h_1_itm_mx0c0
            & INNER_LOOP_w_mux1h_1_itm_mx0c1 & INNER_LOOP_w_mux1h_1_itm_mx0c2 & INNER_LOOP_w_mux1h_1_itm_mx0c3));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (INNER_LOOP_1_acc_5_itm_mx0c0 OR INNER_LOOP_1_acc_5_itm_mx0c1 OR and_dcpl_98
          OR and_dcpl_29 OR and_dcpl_32 OR and_dcpl_49 OR and_dcpl_101) = '1' ) THEN
        INNER_LOOP_1_acc_5_itm <= MUX1HOT_v_64_9_2(yt_rsc_0_0_i_q_d, xt_rsc_0_0_i_q_d,
            (acc_2_nl(64 DOWNTO 1)), xt_rsc_0_2_i_q_d, xt_rsc_0_1_i_q_d, yt_rsc_0_2_i_q_d,
            yt_rsc_0_1_i_q_d, xt_rsc_0_3_i_q_d, yt_rsc_0_3_i_q_d, STD_LOGIC_VECTOR'(
            INNER_LOOP_a_or_1_nl & INNER_LOOP_a_or_2_nl & INNER_LOOP_a_or_7_nl &
            INNER_LOOP_a_or_3_nl & INNER_LOOP_a_or_4_nl & INNER_LOOP_a_or_5_nl &
            INNER_LOOP_a_or_6_nl & INNER_LOOP_a_and_23_nl & INNER_LOOP_a_and_24_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (INNER_LOOP_w_mux1h_2_itm_mx0c0 OR INNER_LOOP_w_mux1h_2_itm_mx0c1 OR INNER_LOOP_w_mux1h_2_itm_mx0c2
          OR INNER_LOOP_w_mux1h_2_itm_mx0c3) = '1' ) THEN
        INNER_LOOP_w_mux1h_2_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
            twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, STD_LOGIC_VECTOR'( INNER_LOOP_w_mux1h_2_itm_mx0c0
            & INNER_LOOP_w_mux1h_2_itm_mx0c1 & INNER_LOOP_w_mux1h_2_itm_mx0c2 & INNER_LOOP_w_mux1h_2_itm_mx0c3));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (INNER_LOOP_w_mux1h_3_itm_mx0c0 OR INNER_LOOP_w_mux1h_3_itm_mx0c1 OR INNER_LOOP_w_mux1h_3_itm_mx0c2
          OR INNER_LOOP_w_mux1h_3_itm_mx0c3) = '1' ) THEN
        INNER_LOOP_w_mux1h_3_itm <= MUX1HOT_v_64_4_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
            twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, STD_LOGIC_VECTOR'( INNER_LOOP_w_mux1h_3_itm_mx0c0
            & INNER_LOOP_w_mux1h_3_itm_mx0c1 & INNER_LOOP_w_mux1h_3_itm_mx0c2 & INNER_LOOP_w_mux1h_3_itm_mx0c3));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(or_tmp_19 OR CONV_SL_1_1(fsm_output(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00"))
          OR or_dcpl_11)) = '1' ) THEN
        INNER_LOOP_2_b_mul_mut <= z_out_4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        INNER_LOOP_a_INNER_LOOP_a_and_25_itm <= '0';
      ELSIF ( ((and_dcpl_36 AND and_dcpl_21 AND and_dcpl_26) OR and_dcpl_46) = '1'
          ) THEN
        INNER_LOOP_a_INNER_LOOP_a_and_25_itm <= MUX_s_1_2_2(INNER_LOOP_a_INNER_LOOP_a_nor_3_nl,
            INNER_LOOP_a_INNER_LOOP_a_and_25_nl, and_dcpl_46);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT and_dcpl_30) OR (fsm_output(5)) OR (NOT (fsm_output(2))) OR
          (NOT (fsm_output(0))) OR (fsm_output(1)) OR or_dcpl_11)) = '1' ) THEN
        INNER_LOOP_3_b_mul_mut <= z_out_4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT (fsm_output(6))) OR (fsm_output(3)) OR (NOT (fsm_output(5)))
          OR (fsm_output(2)) OR or_dcpl_12 OR (NOT (fsm_output(4))) OR (fsm_output(7))))
          = '1' ) THEN
        INNER_LOOP_4_b_mul_mut <= z_out_4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_INNER_LOOP_upper_acc_ftd_7 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( and_dcpl_125 = '0' ) THEN
        reg_INNER_LOOP_upper_acc_ftd_7 <= z_out_1(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  s_mux_20_nl <= MUX_s_1_2_2(s_0_sva, s_1_sva, and_dcpl_23);
  INNER_LOOP_b_or_nl <= and_dcpl_41 OR and_dcpl_107 OR and_dcpl_111 OR and_dcpl_38;
  or_345_nl <= and_185_cse OR (fsm_output(3));
  mux_183_nl <= MUX_s_1_2_2(nor_155_cse, or_345_nl, fsm_output(4));
  nor_154_nl <= NOT(mux_183_nl OR CONV_SL_1_1(fsm_output(7 DOWNTO 5)/=STD_LOGIC_VECTOR'("000")));
  and_183_nl <= or_332_cse AND (fsm_output(3));
  nand_25_nl <= NOT(or_333_cse AND (fsm_output(3)));
  mux_184_nl <= MUX_s_1_2_2(and_183_nl, nand_25_nl, fsm_output(4));
  and_112_nl <= mux_184_nl AND CONV_SL_1_1(fsm_output(7 DOWNTO 5)=STD_LOGIC_VECTOR'("001"));
  and_118_nl <= ((CONV_SL_1_1(fsm_output(3 DOWNTO 1)=STD_LOGIC_VECTOR'("111"))) OR
      (fsm_output(4))) AND CONV_SL_1_1(fsm_output(7 DOWNTO 5)=STD_LOGIC_VECTOR'("010"));
  and_181_nl <= (fsm_output(4)) AND mux_tmp_24;
  nor_64_nl <= NOT((fsm_output(4)) OR or_tmp_269);
  mux_185_nl <= MUX_s_1_2_2(and_181_nl, nor_64_nl, fsm_output(7));
  and_127_nl <= and_dcpl_22 AND and_dcpl_47 AND and_dcpl_18;
  INNER_LOOP_t_mux_nl <= MUX_v_7_2_2((STD_LOGIC_VECTOR'( "000000") & (INNER_LOOP_1_q_and_psp_sva_1(0))),
      (INNER_LOOP_slc_INNER_LOOP_4_acc_6_9_2_psp_sva(6 DOWNTO 0)), and_127_nl);
  or_285_nl <= (fsm_output(4)) OR (NOT (fsm_output(1))) OR (fsm_output(0)) OR (fsm_output(2));
  or_284_nl <= (NOT (fsm_output(4))) OR (fsm_output(1)) OR (NOT and_218_cse);
  mux_190_nl <= MUX_s_1_2_2(or_285_nl, or_284_nl, fsm_output(7));
  nor_158_nl <= NOT(mux_190_nl OR or_364_cse OR (fsm_output(5)));
  or_343_nl <= (fsm_output(1)) OR (fsm_output(0)) OR (fsm_output(2)) OR (NOT (fsm_output(5)))
      OR (fsm_output(3)) OR (NOT (fsm_output(6)));
  or_28_nl <= (NOT (fsm_output(2))) OR (fsm_output(5)) OR (fsm_output(3)) OR (fsm_output(6));
  mux_28_nl <= MUX_s_1_2_2(or_28_nl, or_tmp_19, fsm_output(0));
  nand_50_nl <= NOT((fsm_output(1)) AND (NOT mux_28_nl));
  mux_29_nl <= MUX_s_1_2_2(or_343_nl, nand_50_nl, fsm_output(4));
  nor_141_nl <= NOT(mux_29_nl OR (fsm_output(7)));
  or_25_nl <= (fsm_output(0)) OR (fsm_output(2)) OR (fsm_output(5)) OR (fsm_output(3))
      OR (fsm_output(6));
  mux_25_nl <= MUX_s_1_2_2(or_tmp_18, or_25_nl, fsm_output(1));
  mux_26_nl <= MUX_s_1_2_2(mux_25_nl, (NOT mux_tmp_24), fsm_output(4));
  nor_63_nl <= NOT(CONV_SL_1_1(fsm_output(6 DOWNTO 1)/=STD_LOGIC_VECTOR'("000000")));
  or_23_nl <= and_185_cse OR (fsm_output(5)) OR (fsm_output(3)) OR (fsm_output(6));
  mux_22_nl <= MUX_s_1_2_2(or_tmp_7, or_23_nl, fsm_output(4));
  mux_196_nl <= MUX_s_1_2_2(mux_tmp_195, mux_tmp_193, and_184_cse);
  mux_197_nl <= MUX_s_1_2_2(mux_196_nl, (fsm_output(5)), fsm_output(4));
  mux_202_nl <= MUX_s_1_2_2(or_tmp_7, or_tmp_277, fsm_output(4));
  INNER_LOOP_b_acc_15_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(s_9_sva & INNER_LOOP_1_q_and_psp_sva_1)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( s_8_sva & s_7_sva & s_6_sva & s_5_sva
      & s_4_sva & s_3_sva & s_2_sva), 7), 8), 8));
  INNER_LOOP_b_acc_16_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(s_0_sva,
      1), 1), 2) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT (z_out_1(0)), 1),
      1), 2), 2));
  INNER_LOOP_b_acc_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(s_9_sva & INNER_LOOP_1_q_and_psp_sva_1
      & '0') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( s_8_sva & s_7_sva & s_6_sva
      & s_5_sva & s_4_sva & s_3_sva & s_2_sva & '1'), 8), 9) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT
      (z_out_1(1)), 1), 1), 9), 9));
  INNER_LOOP_b_acc_17_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_upper_and_psp_sva_mx0w0
      & '0' & s_1_sva) + UNSIGNED(s_9_sva & INNER_LOOP_1_q_and_psp_sva_1 & '1'),
      9));
  or_298_nl <= CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"));
  mux_208_nl <= MUX_s_1_2_2(nor_tmp_12, nor_tmp_4, or_298_nl);
  mux_209_nl <= MUX_s_1_2_2(or_tmp_277, (NOT mux_208_nl), fsm_output(4));
  mux_210_nl <= MUX_s_1_2_2(or_tmp_7, or_tmp_269, fsm_output(4));
  mux_212_nl <= MUX_s_1_2_2(mux_tmp_195, mux_tmp_198, fsm_output(1));
  mux_213_nl <= MUX_s_1_2_2(mux_212_nl, (fsm_output(5)), fsm_output(4));
  and_142_nl <= and_dcpl_22 AND and_dcpl_47 AND and_dcpl_99;
  or_nl <= (NOT (fsm_output(5))) OR (NOT (pref_y_idx_pref_9_0_2_sva(0))) OR (fsm_output(2))
      OR (fsm_output(1)) OR (fsm_output(7)) OR (NOT or_tmp_298) OR (NOT (fsm_output(3)))
      OR (fsm_output(6));
  or_357_nl <= (NOT (fsm_output(1))) OR (fsm_output(7)) OR (fsm_output(3)) OR (fsm_output(6));
  nand_nl <= NOT((INNER_LOOP_b_acc_1_psp_sva(0)) AND nor_tmp);
  or_355_nl <= (INNER_LOOP_b_acc_1_psp_sva(0)) OR (NOT nor_tmp);
  mux_230_nl <= MUX_s_1_2_2(nand_nl, or_355_nl, s_0_sva);
  mux_231_nl <= MUX_s_1_2_2(mux_230_nl, or_364_cse, fsm_output(7));
  or_356_nl <= (fsm_output(1)) OR mux_231_nl;
  mux_232_nl <= MUX_s_1_2_2(or_357_nl, or_356_nl, fsm_output(2));
  or_363_nl <= (fsm_output(5)) OR mux_232_nl;
  mux_233_nl <= MUX_s_1_2_2(or_nl, or_363_nl, fsm_output(0));
  and_335_nl <= and_dcpl_15 AND (NOT (fsm_output(5))) AND (fsm_output(2)) AND (NOT
      (fsm_output(0))) AND (fsm_output(1)) AND (NOT (fsm_output(4))) AND (fsm_output(7));
  INNER_LOOP_mux_20_nl <= MUX_v_64_2_2((NOT drf_y_smx_lpi_2), (NOT drf_y_smx_lpi_3_dfm),
      and_335_nl);
  acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(INNER_LOOP_1_acc_5_itm & '1')
      + UNSIGNED(INNER_LOOP_mux_20_nl & '1'), 65));
  INNER_LOOP_a_or_1_nl <= INNER_LOOP_1_acc_5_itm_mx0c0 OR (INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      AND (NOT (reg_INNER_LOOP_upper_acc_ftd_7(1))) AND and_dcpl_32) OR (INNER_LOOP_a_and_9_itm
      AND and_dcpl_49);
  INNER_LOOP_a_or_2_nl <= INNER_LOOP_1_acc_5_itm_mx0c1 OR ((NOT(INNER_LOOP_b_INNER_LOOP_b_and_3_cse
      OR (reg_INNER_LOOP_upper_acc_ftd_7(1)))) AND and_dcpl_32) OR (INNER_LOOP_a_INNER_LOOP_a_nor_5_itm
      AND and_dcpl_49);
  INNER_LOOP_a_or_7_nl <= and_dcpl_98 OR and_dcpl_101;
  INNER_LOOP_a_or_3_nl <= ((NOT(INNER_LOOP_b_INNER_LOOP_b_and_3_cse OR (reg_INNER_LOOP_upper_acc_ftd_7(0))))
      AND and_dcpl_29) OR ((reg_INNER_LOOP_upper_acc_ftd_7(1)) AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse)
      AND and_dcpl_32) OR (INNER_LOOP_a_INNER_LOOP_a_and_23_itm AND and_dcpl_49);
  INNER_LOOP_a_or_4_nl <= ((reg_INNER_LOOP_upper_acc_ftd_7(0)) AND (NOT INNER_LOOP_b_INNER_LOOP_b_and_3_cse)
      AND and_dcpl_29) OR (INNER_LOOP_a_INNER_LOOP_a_and_22_itm AND and_dcpl_49);
  INNER_LOOP_a_or_5_nl <= (INNER_LOOP_b_INNER_LOOP_b_and_3_cse AND (NOT (reg_INNER_LOOP_upper_acc_ftd_7(0)))
      AND and_dcpl_29) OR (INNER_LOOP_b_INNER_LOOP_b_and_3_cse AND (reg_INNER_LOOP_upper_acc_ftd_7(1))
      AND and_dcpl_32) OR (INNER_LOOP_a_INNER_LOOP_a_and_26_itm AND and_dcpl_49);
  INNER_LOOP_a_or_6_nl <= (INNER_LOOP_b_INNER_LOOP_b_and_3_cse AND (reg_INNER_LOOP_upper_acc_ftd_7(0))
      AND and_dcpl_29) OR (INNER_LOOP_a_INNER_LOOP_a_and_25_itm AND and_dcpl_49);
  INNER_LOOP_a_and_23_nl <= INNER_LOOP_a_INNER_LOOP_a_and_24_itm AND and_dcpl_49;
  INNER_LOOP_a_and_24_nl <= INNER_LOOP_a_INNER_LOOP_a_and_27_itm AND and_dcpl_49;
  INNER_LOOP_a_INNER_LOOP_a_nor_3_nl <= NOT((INNER_LOOP_a_acc_psp_sva(0)) OR (reg_INNER_LOOP_upper_acc_ftd_7(0)));
  INNER_LOOP_a_INNER_LOOP_a_and_25_nl <= (reg_INNER_LOOP_upper_acc_ftd_7(0)) AND
      (NOT (INNER_LOOP_a_acc_psp_sva(0))) AND INNER_LOOP_b_INNER_LOOP_b_and_3_cse;
  and_334_nl <= CONV_SL_1_1(fsm_output(6 DOWNTO 5)=STD_LOGIC_VECTOR'("00")) AND nor_155_cse
      AND CONV_SL_1_1(fsm_output(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01")) AND and_dcpl_11;
  OUTER_LOOP_mux_6_nl <= MUX_v_4_2_2(OUTER_LOOP_acc_2_itm, OUTER_LOOP_nn_3_0_sva,
      and_334_nl);
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(OUTER_LOOP_mux_6_nl) + UNSIGNED'(
      "1111"), 4));
  OUTER_LOOP_OUTER_LOOP_and_5_nl <= s_8_sva AND and_dcpl_194;
  OUTER_LOOP_OUTER_LOOP_and_6_nl <= s_7_sva AND and_dcpl_194;
  OUTER_LOOP_OUTER_LOOP_and_7_nl <= s_6_sva AND and_dcpl_194;
  OUTER_LOOP_OUTER_LOOP_and_8_nl <= s_5_sva AND and_dcpl_194;
  OUTER_LOOP_OUTER_LOOP_and_9_nl <= s_4_sva AND and_dcpl_194;
  OUTER_LOOP_mux_7_nl <= MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva(3)), s_3_sva, and_dcpl_194);
  OUTER_LOOP_mux_8_nl <= MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva(2)), s_2_sva, and_dcpl_194);
  OUTER_LOOP_mux_9_nl <= MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva(1)), s_1_sva, and_dcpl_194);
  OUTER_LOOP_mux_10_nl <= MUX_s_1_2_2((OUTER_LOOP_nn_3_0_sva(0)), s_0_sva, and_dcpl_194);
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( OUTER_LOOP_OUTER_LOOP_and_5_nl
      & OUTER_LOOP_OUTER_LOOP_and_6_nl & OUTER_LOOP_OUTER_LOOP_and_7_nl & OUTER_LOOP_OUTER_LOOP_and_8_nl
      & OUTER_LOOP_OUTER_LOOP_and_9_nl & OUTER_LOOP_mux_7_nl & OUTER_LOOP_mux_8_nl
      & OUTER_LOOP_mux_9_nl & OUTER_LOOP_mux_10_nl) + CONV_UNSIGNED(CONV_SIGNED(SIGNED'(
      and_dcpl_194 & '1'), 2), 9), 9));
  INNER_LOOP_b_mux1h_38_nl <= MUX1HOT_v_64_5_2(drf_y_smx_lpi_3_dfm_5, drf_y_smx_lpi_3_dfm_6,
      drf_y_smx_lpi_3_dfm_7, drf_y_smx_lpi_3_dfm_4, (STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000")
      & s_9_sva & s_8_sva & s_7_sva & s_6_sva & s_5_sva & s_4_sva & s_3_sva & s_2_sva
      & s_1_sva & s_0_sva), STD_LOGIC_VECTOR'( and_dcpl_217 & and_dcpl_223 & and_dcpl_229
      & and_dcpl_235 & and_dcpl_237));
  INNER_LOOP_b_and_6_nl <= and_dcpl_132 AND and_dcpl_217;
  INNER_LOOP_b_and_7_nl <= and_dcpl_133 AND and_dcpl_217;
  INNER_LOOP_b_and_8_nl <= and_dcpl_134 AND and_dcpl_217;
  INNER_LOOP_b_and_9_nl <= and_dcpl_135 AND and_dcpl_217;
  INNER_LOOP_b_mux1h_39_nl <= MUX1HOT_v_64_8_2(twiddle_rsc_0_0_i_q_d, twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_2_i_q_d, twiddle_rsc_0_3_i_q_d, INNER_LOOP_w_mux1h_1_itm, INNER_LOOP_w_mux1h_2_itm,
      INNER_LOOP_w_mux1h_3_itm, (STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000")
      & OUTER_LOOP_m_lshift_psp_sva), STD_LOGIC_VECTOR'( INNER_LOOP_b_and_6_nl &
      INNER_LOOP_b_and_7_nl & INNER_LOOP_b_and_8_nl & INNER_LOOP_b_and_9_nl & and_dcpl_223
      & and_dcpl_229 & and_dcpl_235 & and_dcpl_237));
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(INNER_LOOP_b_mux1h_38_nl)
      * UNSIGNED(INNER_LOOP_b_mux1h_39_nl)), 128));
END v3;

-- ------------------------------------------------------------------
--  Design Unit:    stockham_DIT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY stockham_DIT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    xt_rsc_0_0_wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_0_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_0_we : OUT STD_LOGIC;
    xt_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    xt_rsc_0_1_wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_1_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_1_we : OUT STD_LOGIC;
    xt_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    xt_rsc_0_2_wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_2_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_2_we : OUT STD_LOGIC;
    xt_rsc_0_2_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_2_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    xt_rsc_0_3_wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_3_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_0_3_we : OUT STD_LOGIC;
    xt_rsc_0_3_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    xt_rsc_0_3_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    xt_rsc_triosy_0_3_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    g_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    g_rsc_triosy_lz : OUT STD_LOGIC;
    twiddle_rsc_0_0_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_0_0_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    twiddle_rsc_0_1_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_0_1_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    twiddle_rsc_0_2_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_0_2_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
    twiddle_rsc_0_3_radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    twiddle_rsc_0_3_q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC
  );
END stockham_DIT;

ARCHITECTURE v3 OF stockham_DIT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL yt_rsc_0_0_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_2_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_3_i_clken_d : STD_LOGIC;
  SIGNAL yt_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL xt_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL twiddle_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL yt_rsc_0_0_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_0_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_we : STD_LOGIC;
  SIGNAL yt_rsc_0_0_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_1_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_we : STD_LOGIC;
  SIGNAL yt_rsc_0_1_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_2_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_we : STD_LOGIC;
  SIGNAL yt_rsc_0_2_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_clken : STD_LOGIC;
  SIGNAL yt_rsc_0_3_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_we : STD_LOGIC;
  SIGNAL yt_rsc_0_3_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d_d_iff : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_we_d_iff : STD_LOGIC;
  SIGNAL yt_rsc_0_1_i_radr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_we_d_iff : STD_LOGIC;
  SIGNAL yt_rsc_0_2_i_radr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_wadr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_we_d_iff : STD_LOGIC;
  SIGNAL yt_rsc_0_3_i_radr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_wadr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_0_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_1_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_2_i_we_d_iff : STD_LOGIC;
  SIGNAL xt_rsc_0_3_i_we_d_iff : STD_LOGIC;
  SIGNAL twiddle_rsc_0_0_i_radr_d_iff : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL yt_rsc_0_0_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_comp_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL yt_rsc_0_1_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_comp_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL yt_rsc_0_2_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_comp_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_comp_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);

  SIGNAL yt_rsc_0_3_comp_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_comp_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_comp_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_comp_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_0_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_1_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_2_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_2_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL yt_rsc_0_3_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL yt_rsc_0_3_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_0_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_1_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_2_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_2_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL xt_rsc_0_3_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_wadr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_d_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL xt_rsc_0_3_i_wadr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_0_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_0_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_1_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_1_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_2_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_2_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL twiddle_rsc_0_3_i_q : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_radr : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_q_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL twiddle_rsc_0_3_i_radr_d : STD_LOGIC_VECTOR (7 DOWNTO 0);

  COMPONENT stockham_DIT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      xt_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      xt_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      xt_rsc_triosy_0_2_lz : OUT STD_LOGIC;
      xt_rsc_triosy_0_3_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      g_rsc_triosy_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_2_lz : OUT STD_LOGIC;
      twiddle_rsc_triosy_0_3_lz : OUT STD_LOGIC;
      yt_rsc_0_0_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_1_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_2_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_3_i_clken_d : OUT STD_LOGIC;
      yt_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      xt_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_0_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_1_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_2_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      twiddle_rsc_0_3_i_q_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      yt_rsc_0_0_i_d_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      yt_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_0_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
      yt_rsc_0_1_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_1_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
      yt_rsc_0_2_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_2_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
      yt_rsc_0_3_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_3_i_wadr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      yt_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_0_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_1_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_2_i_we_d_pff : OUT STD_LOGIC;
      xt_rsc_0_3_i_we_d_pff : OUT STD_LOGIC;
      twiddle_rsc_0_0_i_radr_d_pff : OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL stockham_DIT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_xt_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_2_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_3_i_q_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_2_i_radr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_2_i_wadr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_3_i_radr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_yt_rsc_0_3_i_wadr_d_pff : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff : STD_LOGIC_VECTOR (7
      DOWNTO 0);

BEGIN
  yt_rsc_0_0_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 8,
      data_width => 64,
      depth => 256,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_0_clken,
      d => yt_rsc_0_0_comp_d,
      q => yt_rsc_0_0_comp_q,
      radr => yt_rsc_0_0_comp_radr,
      wadr => yt_rsc_0_0_comp_wadr,
      we => yt_rsc_0_0_we
    );
  yt_rsc_0_0_comp_d <= yt_rsc_0_0_d;
  yt_rsc_0_0_q <= yt_rsc_0_0_comp_q;
  yt_rsc_0_0_comp_radr <= yt_rsc_0_0_radr;
  yt_rsc_0_0_comp_wadr <= yt_rsc_0_0_wadr;

  yt_rsc_0_1_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 8,
      data_width => 64,
      depth => 256,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_1_clken,
      d => yt_rsc_0_1_comp_d,
      q => yt_rsc_0_1_comp_q,
      radr => yt_rsc_0_1_comp_radr,
      wadr => yt_rsc_0_1_comp_wadr,
      we => yt_rsc_0_1_we
    );
  yt_rsc_0_1_comp_d <= yt_rsc_0_1_d;
  yt_rsc_0_1_q <= yt_rsc_0_1_comp_q;
  yt_rsc_0_1_comp_radr <= yt_rsc_0_1_radr;
  yt_rsc_0_1_comp_wadr <= yt_rsc_0_1_wadr;

  yt_rsc_0_2_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 8,
      data_width => 64,
      depth => 256,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_2_clken,
      d => yt_rsc_0_2_comp_d,
      q => yt_rsc_0_2_comp_q,
      radr => yt_rsc_0_2_comp_radr,
      wadr => yt_rsc_0_2_comp_wadr,
      we => yt_rsc_0_2_we
    );
  yt_rsc_0_2_comp_d <= yt_rsc_0_2_d;
  yt_rsc_0_2_q <= yt_rsc_0_2_comp_q;
  yt_rsc_0_2_comp_radr <= yt_rsc_0_2_radr;
  yt_rsc_0_2_comp_wadr <= yt_rsc_0_2_wadr;

  yt_rsc_0_3_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 8,
      data_width => 64,
      depth => 256,
      latency => 1
      )
    PORT MAP(
      clk => clk,
      clken => yt_rsc_0_3_clken,
      d => yt_rsc_0_3_comp_d,
      q => yt_rsc_0_3_comp_q,
      radr => yt_rsc_0_3_comp_radr,
      wadr => yt_rsc_0_3_comp_wadr,
      we => yt_rsc_0_3_we
    );
  yt_rsc_0_3_comp_d <= yt_rsc_0_3_d;
  yt_rsc_0_3_q <= yt_rsc_0_3_comp_q;
  yt_rsc_0_3_comp_radr <= yt_rsc_0_3_radr;
  yt_rsc_0_3_comp_wadr <= yt_rsc_0_3_wadr;

  yt_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_8_64_256_256_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_0_clken,
      q => yt_rsc_0_0_i_q,
      radr => yt_rsc_0_0_i_radr,
      we => yt_rsc_0_0_we,
      d => yt_rsc_0_0_i_d,
      wadr => yt_rsc_0_0_i_wadr,
      clken_d => yt_rsc_0_0_i_clken_d,
      d_d => yt_rsc_0_0_i_d_d,
      q_d => yt_rsc_0_0_i_q_d_1,
      radr_d => yt_rsc_0_0_i_radr_d,
      wadr_d => yt_rsc_0_0_i_wadr_d,
      we_d => yt_rsc_0_0_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_0_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_0_i_q <= yt_rsc_0_0_q;
  yt_rsc_0_0_radr <= yt_rsc_0_0_i_radr;
  yt_rsc_0_0_d <= yt_rsc_0_0_i_d;
  yt_rsc_0_0_wadr <= yt_rsc_0_0_i_wadr;
  yt_rsc_0_0_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_0_i_q_d <= yt_rsc_0_0_i_q_d_1;
  yt_rsc_0_0_i_radr_d <= yt_rsc_0_0_i_radr_d_iff;
  yt_rsc_0_0_i_wadr_d <= yt_rsc_0_0_i_wadr_d_iff;

  yt_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_8_64_256_256_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_1_clken,
      q => yt_rsc_0_1_i_q,
      radr => yt_rsc_0_1_i_radr,
      we => yt_rsc_0_1_we,
      d => yt_rsc_0_1_i_d,
      wadr => yt_rsc_0_1_i_wadr,
      clken_d => yt_rsc_0_1_i_clken_d,
      d_d => yt_rsc_0_1_i_d_d,
      q_d => yt_rsc_0_1_i_q_d_1,
      radr_d => yt_rsc_0_1_i_radr_d,
      wadr_d => yt_rsc_0_1_i_wadr_d,
      we_d => yt_rsc_0_1_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_1_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_1_i_q <= yt_rsc_0_1_q;
  yt_rsc_0_1_radr <= yt_rsc_0_1_i_radr;
  yt_rsc_0_1_d <= yt_rsc_0_1_i_d;
  yt_rsc_0_1_wadr <= yt_rsc_0_1_i_wadr;
  yt_rsc_0_1_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_1_i_q_d <= yt_rsc_0_1_i_q_d_1;
  yt_rsc_0_1_i_radr_d <= yt_rsc_0_1_i_radr_d_iff;
  yt_rsc_0_1_i_wadr_d <= yt_rsc_0_1_i_wadr_d_iff;

  yt_rsc_0_2_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_8_64_256_256_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_2_clken,
      q => yt_rsc_0_2_i_q,
      radr => yt_rsc_0_2_i_radr,
      we => yt_rsc_0_2_we,
      d => yt_rsc_0_2_i_d,
      wadr => yt_rsc_0_2_i_wadr,
      clken_d => yt_rsc_0_2_i_clken_d,
      d_d => yt_rsc_0_2_i_d_d,
      q_d => yt_rsc_0_2_i_q_d_1,
      radr_d => yt_rsc_0_2_i_radr_d,
      wadr_d => yt_rsc_0_2_i_wadr_d,
      we_d => yt_rsc_0_2_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_2_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_2_i_q <= yt_rsc_0_2_q;
  yt_rsc_0_2_radr <= yt_rsc_0_2_i_radr;
  yt_rsc_0_2_d <= yt_rsc_0_2_i_d;
  yt_rsc_0_2_wadr <= yt_rsc_0_2_i_wadr;
  yt_rsc_0_2_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_2_i_q_d <= yt_rsc_0_2_i_q_d_1;
  yt_rsc_0_2_i_radr_d <= yt_rsc_0_2_i_radr_d_iff;
  yt_rsc_0_2_i_wadr_d <= yt_rsc_0_2_i_wadr_d_iff;

  yt_rsc_0_3_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_8_64_256_256_64_1_gen
    PORT MAP(
      clken => yt_rsc_0_3_clken,
      q => yt_rsc_0_3_i_q,
      radr => yt_rsc_0_3_i_radr,
      we => yt_rsc_0_3_we,
      d => yt_rsc_0_3_i_d,
      wadr => yt_rsc_0_3_i_wadr,
      clken_d => yt_rsc_0_3_i_clken_d,
      d_d => yt_rsc_0_3_i_d_d,
      q_d => yt_rsc_0_3_i_q_d_1,
      radr_d => yt_rsc_0_3_i_radr_d,
      wadr_d => yt_rsc_0_3_i_wadr_d,
      we_d => yt_rsc_0_3_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => yt_rsc_0_3_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  yt_rsc_0_3_i_q <= yt_rsc_0_3_q;
  yt_rsc_0_3_radr <= yt_rsc_0_3_i_radr;
  yt_rsc_0_3_d <= yt_rsc_0_3_i_d;
  yt_rsc_0_3_wadr <= yt_rsc_0_3_i_wadr;
  yt_rsc_0_3_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  yt_rsc_0_3_i_q_d <= yt_rsc_0_3_i_q_d_1;
  yt_rsc_0_3_i_radr_d <= yt_rsc_0_3_i_radr_d_iff;
  yt_rsc_0_3_i_wadr_d <= yt_rsc_0_3_i_wadr_d_iff;

  xt_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_14_8_64_256_256_64_1_gen
    PORT MAP(
      q => xt_rsc_0_0_i_q,
      radr => xt_rsc_0_0_i_radr,
      we => xt_rsc_0_0_we,
      d => xt_rsc_0_0_i_d,
      wadr => xt_rsc_0_0_i_wadr,
      d_d => xt_rsc_0_0_i_d_d,
      q_d => xt_rsc_0_0_i_q_d_1,
      radr_d => xt_rsc_0_0_i_radr_d,
      wadr_d => xt_rsc_0_0_i_wadr_d,
      we_d => xt_rsc_0_0_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_0_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_0_i_q <= xt_rsc_0_0_q;
  xt_rsc_0_0_radr <= xt_rsc_0_0_i_radr;
  xt_rsc_0_0_d <= xt_rsc_0_0_i_d;
  xt_rsc_0_0_wadr <= xt_rsc_0_0_i_wadr;
  xt_rsc_0_0_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_0_i_q_d <= xt_rsc_0_0_i_q_d_1;
  xt_rsc_0_0_i_radr_d <= yt_rsc_0_0_i_radr_d_iff;
  xt_rsc_0_0_i_wadr_d <= yt_rsc_0_0_i_wadr_d_iff;

  xt_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_15_8_64_256_256_64_1_gen
    PORT MAP(
      q => xt_rsc_0_1_i_q,
      radr => xt_rsc_0_1_i_radr,
      we => xt_rsc_0_1_we,
      d => xt_rsc_0_1_i_d,
      wadr => xt_rsc_0_1_i_wadr,
      d_d => xt_rsc_0_1_i_d_d,
      q_d => xt_rsc_0_1_i_q_d_1,
      radr_d => xt_rsc_0_1_i_radr_d,
      wadr_d => xt_rsc_0_1_i_wadr_d,
      we_d => xt_rsc_0_1_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_1_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_1_i_q <= xt_rsc_0_1_q;
  xt_rsc_0_1_radr <= xt_rsc_0_1_i_radr;
  xt_rsc_0_1_d <= xt_rsc_0_1_i_d;
  xt_rsc_0_1_wadr <= xt_rsc_0_1_i_wadr;
  xt_rsc_0_1_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_1_i_q_d <= xt_rsc_0_1_i_q_d_1;
  xt_rsc_0_1_i_radr_d <= yt_rsc_0_1_i_radr_d_iff;
  xt_rsc_0_1_i_wadr_d <= yt_rsc_0_1_i_wadr_d_iff;

  xt_rsc_0_2_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_16_8_64_256_256_64_1_gen
    PORT MAP(
      q => xt_rsc_0_2_i_q,
      radr => xt_rsc_0_2_i_radr,
      we => xt_rsc_0_2_we,
      d => xt_rsc_0_2_i_d,
      wadr => xt_rsc_0_2_i_wadr,
      d_d => xt_rsc_0_2_i_d_d,
      q_d => xt_rsc_0_2_i_q_d_1,
      radr_d => xt_rsc_0_2_i_radr_d,
      wadr_d => xt_rsc_0_2_i_wadr_d,
      we_d => xt_rsc_0_2_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_2_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_2_i_q <= xt_rsc_0_2_q;
  xt_rsc_0_2_radr <= xt_rsc_0_2_i_radr;
  xt_rsc_0_2_d <= xt_rsc_0_2_i_d;
  xt_rsc_0_2_wadr <= xt_rsc_0_2_i_wadr;
  xt_rsc_0_2_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_2_i_q_d <= xt_rsc_0_2_i_q_d_1;
  xt_rsc_0_2_i_radr_d <= yt_rsc_0_2_i_radr_d_iff;
  xt_rsc_0_2_i_wadr_d <= yt_rsc_0_2_i_wadr_d_iff;

  xt_rsc_0_3_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_17_8_64_256_256_64_1_gen
    PORT MAP(
      q => xt_rsc_0_3_i_q,
      radr => xt_rsc_0_3_i_radr,
      we => xt_rsc_0_3_we,
      d => xt_rsc_0_3_i_d,
      wadr => xt_rsc_0_3_i_wadr,
      d_d => xt_rsc_0_3_i_d_d,
      q_d => xt_rsc_0_3_i_q_d_1,
      radr_d => xt_rsc_0_3_i_radr_d,
      wadr_d => xt_rsc_0_3_i_wadr_d,
      we_d => xt_rsc_0_3_i_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => xt_rsc_0_3_i_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  xt_rsc_0_3_i_q <= xt_rsc_0_3_q;
  xt_rsc_0_3_radr <= xt_rsc_0_3_i_radr;
  xt_rsc_0_3_d <= xt_rsc_0_3_i_d;
  xt_rsc_0_3_wadr <= xt_rsc_0_3_i_wadr;
  xt_rsc_0_3_i_d_d <= yt_rsc_0_0_i_d_d_iff;
  xt_rsc_0_3_i_q_d <= xt_rsc_0_3_i_q_d_1;
  xt_rsc_0_3_i_radr_d <= yt_rsc_0_3_i_radr_d_iff;
  xt_rsc_0_3_i_wadr_d <= yt_rsc_0_3_i_wadr_d_iff;

  twiddle_rsc_0_0_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_18_8_64_256_256_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_0_i_q,
      radr => twiddle_rsc_0_0_i_radr,
      q_d => twiddle_rsc_0_0_i_q_d_1,
      radr_d => twiddle_rsc_0_0_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_0_i_q <= twiddle_rsc_0_0_q;
  twiddle_rsc_0_0_radr <= twiddle_rsc_0_0_i_radr;
  twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d_1;
  twiddle_rsc_0_0_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  twiddle_rsc_0_1_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_19_8_64_256_256_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_1_i_q,
      radr => twiddle_rsc_0_1_i_radr,
      q_d => twiddle_rsc_0_1_i_q_d_1,
      radr_d => twiddle_rsc_0_1_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_1_i_q <= twiddle_rsc_0_1_q;
  twiddle_rsc_0_1_radr <= twiddle_rsc_0_1_i_radr;
  twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d_1;
  twiddle_rsc_0_1_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  twiddle_rsc_0_2_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_20_8_64_256_256_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_2_i_q,
      radr => twiddle_rsc_0_2_i_radr,
      q_d => twiddle_rsc_0_2_i_q_d_1,
      radr_d => twiddle_rsc_0_2_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_2_i_q <= twiddle_rsc_0_2_q;
  twiddle_rsc_0_2_radr <= twiddle_rsc_0_2_i_radr;
  twiddle_rsc_0_2_i_q_d <= twiddle_rsc_0_2_i_q_d_1;
  twiddle_rsc_0_2_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  twiddle_rsc_0_3_i : stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_21_8_64_256_256_64_1_gen
    PORT MAP(
      q => twiddle_rsc_0_3_i_q,
      radr => twiddle_rsc_0_3_i_radr,
      q_d => twiddle_rsc_0_3_i_q_d_1,
      radr_d => twiddle_rsc_0_3_i_radr_d,
      readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d
    );
  twiddle_rsc_0_3_i_q <= twiddle_rsc_0_3_q;
  twiddle_rsc_0_3_radr <= twiddle_rsc_0_3_i_radr;
  twiddle_rsc_0_3_i_q_d <= twiddle_rsc_0_3_i_q_d_1;
  twiddle_rsc_0_3_i_radr_d <= twiddle_rsc_0_0_i_radr_d_iff;

  stockham_DIT_core_inst : stockham_DIT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      xt_rsc_triosy_0_0_lz => xt_rsc_triosy_0_0_lz,
      xt_rsc_triosy_0_1_lz => xt_rsc_triosy_0_1_lz,
      xt_rsc_triosy_0_2_lz => xt_rsc_triosy_0_2_lz,
      xt_rsc_triosy_0_3_lz => xt_rsc_triosy_0_3_lz,
      p_rsc_dat => stockham_DIT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      g_rsc_triosy_lz => g_rsc_triosy_lz,
      twiddle_rsc_triosy_0_0_lz => twiddle_rsc_triosy_0_0_lz,
      twiddle_rsc_triosy_0_1_lz => twiddle_rsc_triosy_0_1_lz,
      twiddle_rsc_triosy_0_2_lz => twiddle_rsc_triosy_0_2_lz,
      twiddle_rsc_triosy_0_3_lz => twiddle_rsc_triosy_0_3_lz,
      yt_rsc_0_0_i_clken_d => yt_rsc_0_0_i_clken_d,
      yt_rsc_0_0_i_q_d => stockham_DIT_core_inst_yt_rsc_0_0_i_q_d,
      yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_1_i_clken_d => yt_rsc_0_1_i_clken_d,
      yt_rsc_0_1_i_q_d => stockham_DIT_core_inst_yt_rsc_0_1_i_q_d,
      yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_2_i_clken_d => yt_rsc_0_2_i_clken_d,
      yt_rsc_0_2_i_q_d => stockham_DIT_core_inst_yt_rsc_0_2_i_q_d,
      yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_3_i_clken_d => yt_rsc_0_3_i_clken_d,
      yt_rsc_0_3_i_q_d => stockham_DIT_core_inst_yt_rsc_0_3_i_q_d,
      yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d => yt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_0_i_q_d => stockham_DIT_core_inst_xt_rsc_0_0_i_q_d,
      xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_1_i_q_d => stockham_DIT_core_inst_xt_rsc_0_1_i_q_d,
      xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_2_i_q_d => stockham_DIT_core_inst_xt_rsc_0_2_i_q_d,
      xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      xt_rsc_0_3_i_q_d => stockham_DIT_core_inst_xt_rsc_0_3_i_q_d,
      xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d => xt_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_0_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d,
      twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_1_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d,
      twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_2_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_2_i_q_d,
      twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      twiddle_rsc_0_3_i_q_d => stockham_DIT_core_inst_twiddle_rsc_0_3_i_q_d,
      twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d => twiddle_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d,
      yt_rsc_0_0_i_d_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff,
      yt_rsc_0_0_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff,
      yt_rsc_0_0_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff,
      yt_rsc_0_0_i_we_d_pff => yt_rsc_0_0_i_we_d_iff,
      yt_rsc_0_1_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff,
      yt_rsc_0_1_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff,
      yt_rsc_0_1_i_we_d_pff => yt_rsc_0_1_i_we_d_iff,
      yt_rsc_0_2_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_2_i_radr_d_pff,
      yt_rsc_0_2_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_2_i_wadr_d_pff,
      yt_rsc_0_2_i_we_d_pff => yt_rsc_0_2_i_we_d_iff,
      yt_rsc_0_3_i_radr_d_pff => stockham_DIT_core_inst_yt_rsc_0_3_i_radr_d_pff,
      yt_rsc_0_3_i_wadr_d_pff => stockham_DIT_core_inst_yt_rsc_0_3_i_wadr_d_pff,
      yt_rsc_0_3_i_we_d_pff => yt_rsc_0_3_i_we_d_iff,
      xt_rsc_0_0_i_we_d_pff => xt_rsc_0_0_i_we_d_iff,
      xt_rsc_0_1_i_we_d_pff => xt_rsc_0_1_i_we_d_iff,
      xt_rsc_0_2_i_we_d_pff => xt_rsc_0_2_i_we_d_iff,
      xt_rsc_0_3_i_we_d_pff => xt_rsc_0_3_i_we_d_iff,
      twiddle_rsc_0_0_i_radr_d_pff => stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff
    );
  stockham_DIT_core_inst_p_rsc_dat <= p_rsc_dat;
  stockham_DIT_core_inst_yt_rsc_0_0_i_q_d <= yt_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_yt_rsc_0_1_i_q_d <= yt_rsc_0_1_i_q_d;
  stockham_DIT_core_inst_yt_rsc_0_2_i_q_d <= yt_rsc_0_2_i_q_d;
  stockham_DIT_core_inst_yt_rsc_0_3_i_q_d <= yt_rsc_0_3_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_0_i_q_d <= xt_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_1_i_q_d <= xt_rsc_0_1_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_2_i_q_d <= xt_rsc_0_2_i_q_d;
  stockham_DIT_core_inst_xt_rsc_0_3_i_q_d <= xt_rsc_0_3_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_0_i_q_d <= twiddle_rsc_0_0_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_1_i_q_d <= twiddle_rsc_0_1_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_2_i_q_d <= twiddle_rsc_0_2_i_q_d;
  stockham_DIT_core_inst_twiddle_rsc_0_3_i_q_d <= twiddle_rsc_0_3_i_q_d;
  yt_rsc_0_0_i_d_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_d_d_pff;
  yt_rsc_0_0_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_radr_d_pff;
  yt_rsc_0_0_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_0_i_wadr_d_pff;
  yt_rsc_0_1_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_1_i_radr_d_pff;
  yt_rsc_0_1_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_1_i_wadr_d_pff;
  yt_rsc_0_2_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_2_i_radr_d_pff;
  yt_rsc_0_2_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_2_i_wadr_d_pff;
  yt_rsc_0_3_i_radr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_3_i_radr_d_pff;
  yt_rsc_0_3_i_wadr_d_iff <= stockham_DIT_core_inst_yt_rsc_0_3_i_wadr_d_pff;
  twiddle_rsc_0_0_i_radr_d_iff <= stockham_DIT_core_inst_twiddle_rsc_0_0_i_radr_d_pff;

END v3;



