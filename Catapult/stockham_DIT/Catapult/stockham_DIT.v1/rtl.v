// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Thu Jul 29 10:40:43 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_10_64_1024_1024_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_10_64_1024_1024_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [9:0] radr;
  output we;
  output [63:0] d;
  output [9:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [9:0] radr_d;
  input [9:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_7_10_64_1024_1024_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_7_10_64_1024_1024_64_1_gen (
  q, radr, q_d, radr_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [9:0] radr;
  output [63:0] q_d;
  input [9:0] radr_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
// ------------------------------------------------------------------


module stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [9:0] radr;
  output we;
  output [63:0] d;
  output [9:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [9:0] radr_d;
  input [9:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module stockham_DIT_core_core_fsm (
  clk, rst, fsm_output, INNER_LOOP_C_36_tr0, OUTER_LOOP_C_1_tr0
);
  input clk;
  input rst;
  output [40:0] fsm_output;
  reg [40:0] fsm_output;
  input INNER_LOOP_C_36_tr0;
  input OUTER_LOOP_C_1_tr0;


  // FSM State Type Declaration for stockham_DIT_core_core_fsm_1
  parameter
    main_C_0 = 6'd0,
    OUTER_LOOP_C_0 = 6'd1,
    INNER_LOOP_C_0 = 6'd2,
    INNER_LOOP_C_1 = 6'd3,
    INNER_LOOP_C_2 = 6'd4,
    INNER_LOOP_C_3 = 6'd5,
    INNER_LOOP_C_4 = 6'd6,
    INNER_LOOP_C_5 = 6'd7,
    INNER_LOOP_C_6 = 6'd8,
    INNER_LOOP_C_7 = 6'd9,
    INNER_LOOP_C_8 = 6'd10,
    INNER_LOOP_C_9 = 6'd11,
    INNER_LOOP_C_10 = 6'd12,
    INNER_LOOP_C_11 = 6'd13,
    INNER_LOOP_C_12 = 6'd14,
    INNER_LOOP_C_13 = 6'd15,
    INNER_LOOP_C_14 = 6'd16,
    INNER_LOOP_C_15 = 6'd17,
    INNER_LOOP_C_16 = 6'd18,
    INNER_LOOP_C_17 = 6'd19,
    INNER_LOOP_C_18 = 6'd20,
    INNER_LOOP_C_19 = 6'd21,
    INNER_LOOP_C_20 = 6'd22,
    INNER_LOOP_C_21 = 6'd23,
    INNER_LOOP_C_22 = 6'd24,
    INNER_LOOP_C_23 = 6'd25,
    INNER_LOOP_C_24 = 6'd26,
    INNER_LOOP_C_25 = 6'd27,
    INNER_LOOP_C_26 = 6'd28,
    INNER_LOOP_C_27 = 6'd29,
    INNER_LOOP_C_28 = 6'd30,
    INNER_LOOP_C_29 = 6'd31,
    INNER_LOOP_C_30 = 6'd32,
    INNER_LOOP_C_31 = 6'd33,
    INNER_LOOP_C_32 = 6'd34,
    INNER_LOOP_C_33 = 6'd35,
    INNER_LOOP_C_34 = 6'd36,
    INNER_LOOP_C_35 = 6'd37,
    INNER_LOOP_C_36 = 6'd38,
    OUTER_LOOP_C_1 = 6'd39,
    main_C_1 = 6'd40;

  reg [5:0] state_var;
  reg [5:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : stockham_DIT_core_core_fsm_1
    case (state_var)
      OUTER_LOOP_C_0 : begin
        fsm_output = 41'b00000000000000000000000000000000000000010;
        state_var_NS = INNER_LOOP_C_0;
      end
      INNER_LOOP_C_0 : begin
        fsm_output = 41'b00000000000000000000000000000000000000100;
        state_var_NS = INNER_LOOP_C_1;
      end
      INNER_LOOP_C_1 : begin
        fsm_output = 41'b00000000000000000000000000000000000001000;
        state_var_NS = INNER_LOOP_C_2;
      end
      INNER_LOOP_C_2 : begin
        fsm_output = 41'b00000000000000000000000000000000000010000;
        state_var_NS = INNER_LOOP_C_3;
      end
      INNER_LOOP_C_3 : begin
        fsm_output = 41'b00000000000000000000000000000000000100000;
        state_var_NS = INNER_LOOP_C_4;
      end
      INNER_LOOP_C_4 : begin
        fsm_output = 41'b00000000000000000000000000000000001000000;
        state_var_NS = INNER_LOOP_C_5;
      end
      INNER_LOOP_C_5 : begin
        fsm_output = 41'b00000000000000000000000000000000010000000;
        state_var_NS = INNER_LOOP_C_6;
      end
      INNER_LOOP_C_6 : begin
        fsm_output = 41'b00000000000000000000000000000000100000000;
        state_var_NS = INNER_LOOP_C_7;
      end
      INNER_LOOP_C_7 : begin
        fsm_output = 41'b00000000000000000000000000000001000000000;
        state_var_NS = INNER_LOOP_C_8;
      end
      INNER_LOOP_C_8 : begin
        fsm_output = 41'b00000000000000000000000000000010000000000;
        state_var_NS = INNER_LOOP_C_9;
      end
      INNER_LOOP_C_9 : begin
        fsm_output = 41'b00000000000000000000000000000100000000000;
        state_var_NS = INNER_LOOP_C_10;
      end
      INNER_LOOP_C_10 : begin
        fsm_output = 41'b00000000000000000000000000001000000000000;
        state_var_NS = INNER_LOOP_C_11;
      end
      INNER_LOOP_C_11 : begin
        fsm_output = 41'b00000000000000000000000000010000000000000;
        state_var_NS = INNER_LOOP_C_12;
      end
      INNER_LOOP_C_12 : begin
        fsm_output = 41'b00000000000000000000000000100000000000000;
        state_var_NS = INNER_LOOP_C_13;
      end
      INNER_LOOP_C_13 : begin
        fsm_output = 41'b00000000000000000000000001000000000000000;
        state_var_NS = INNER_LOOP_C_14;
      end
      INNER_LOOP_C_14 : begin
        fsm_output = 41'b00000000000000000000000010000000000000000;
        state_var_NS = INNER_LOOP_C_15;
      end
      INNER_LOOP_C_15 : begin
        fsm_output = 41'b00000000000000000000000100000000000000000;
        state_var_NS = INNER_LOOP_C_16;
      end
      INNER_LOOP_C_16 : begin
        fsm_output = 41'b00000000000000000000001000000000000000000;
        state_var_NS = INNER_LOOP_C_17;
      end
      INNER_LOOP_C_17 : begin
        fsm_output = 41'b00000000000000000000010000000000000000000;
        state_var_NS = INNER_LOOP_C_18;
      end
      INNER_LOOP_C_18 : begin
        fsm_output = 41'b00000000000000000000100000000000000000000;
        state_var_NS = INNER_LOOP_C_19;
      end
      INNER_LOOP_C_19 : begin
        fsm_output = 41'b00000000000000000001000000000000000000000;
        state_var_NS = INNER_LOOP_C_20;
      end
      INNER_LOOP_C_20 : begin
        fsm_output = 41'b00000000000000000010000000000000000000000;
        state_var_NS = INNER_LOOP_C_21;
      end
      INNER_LOOP_C_21 : begin
        fsm_output = 41'b00000000000000000100000000000000000000000;
        state_var_NS = INNER_LOOP_C_22;
      end
      INNER_LOOP_C_22 : begin
        fsm_output = 41'b00000000000000001000000000000000000000000;
        state_var_NS = INNER_LOOP_C_23;
      end
      INNER_LOOP_C_23 : begin
        fsm_output = 41'b00000000000000010000000000000000000000000;
        state_var_NS = INNER_LOOP_C_24;
      end
      INNER_LOOP_C_24 : begin
        fsm_output = 41'b00000000000000100000000000000000000000000;
        state_var_NS = INNER_LOOP_C_25;
      end
      INNER_LOOP_C_25 : begin
        fsm_output = 41'b00000000000001000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_26;
      end
      INNER_LOOP_C_26 : begin
        fsm_output = 41'b00000000000010000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_27;
      end
      INNER_LOOP_C_27 : begin
        fsm_output = 41'b00000000000100000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_28;
      end
      INNER_LOOP_C_28 : begin
        fsm_output = 41'b00000000001000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_29;
      end
      INNER_LOOP_C_29 : begin
        fsm_output = 41'b00000000010000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_30;
      end
      INNER_LOOP_C_30 : begin
        fsm_output = 41'b00000000100000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_31;
      end
      INNER_LOOP_C_31 : begin
        fsm_output = 41'b00000001000000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_32;
      end
      INNER_LOOP_C_32 : begin
        fsm_output = 41'b00000010000000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_33;
      end
      INNER_LOOP_C_33 : begin
        fsm_output = 41'b00000100000000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_34;
      end
      INNER_LOOP_C_34 : begin
        fsm_output = 41'b00001000000000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_35;
      end
      INNER_LOOP_C_35 : begin
        fsm_output = 41'b00010000000000000000000000000000000000000;
        state_var_NS = INNER_LOOP_C_36;
      end
      INNER_LOOP_C_36 : begin
        fsm_output = 41'b00100000000000000000000000000000000000000;
        if ( INNER_LOOP_C_36_tr0 ) begin
          state_var_NS = OUTER_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP_C_0;
        end
      end
      OUTER_LOOP_C_1 : begin
        fsm_output = 41'b01000000000000000000000000000000000000000;
        if ( OUTER_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = OUTER_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 41'b10000000000000000000000000000000000000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 41'b00000000000000000000000000000000000000001;
        state_var_NS = OUTER_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core_wait_dp
// ------------------------------------------------------------------


module stockham_DIT_core_wait_dp (
  yt_rsc_cgo_iro, yt_rsci_clken_d, ensig_cgo_iro, yt_rsc_cgo, ensig_cgo, modulo_dev_cmp_ccs_ccore_en
);
  input yt_rsc_cgo_iro;
  output yt_rsci_clken_d;
  input ensig_cgo_iro;
  input yt_rsc_cgo;
  input ensig_cgo;
  output modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign yt_rsci_clken_d = yt_rsc_cgo | yt_rsc_cgo_iro;
  assign modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT_core
// ------------------------------------------------------------------


module stockham_DIT_core (
  clk, rst, xt_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz, g_rsc_triosy_lz, twiddle_rsc_triosy_lz,
      xt_rsci_q_d, xt_rsci_readA_r_ram_ir_internal_RMASK_B_d, twiddle_rsci_q_d, twiddle_rsci_radr_d,
      twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d, yt_rsci_clken_d, yt_rsci_q_d,
      yt_rsci_readA_r_ram_ir_internal_RMASK_B_d, xt_rsci_d_d_pff, xt_rsci_radr_d_pff,
      xt_rsci_wadr_d_pff, xt_rsci_we_d_pff, yt_rsci_we_d_pff
);
  input clk;
  input rst;
  output xt_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output g_rsc_triosy_lz;
  output twiddle_rsc_triosy_lz;
  input [63:0] xt_rsci_q_d;
  output xt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] twiddle_rsci_q_d;
  output [9:0] twiddle_rsci_radr_d;
  output twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output yt_rsci_clken_d;
  input [63:0] yt_rsci_q_d;
  output yt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] xt_rsci_d_d_pff;
  output [9:0] xt_rsci_radr_d_pff;
  output [9:0] xt_rsci_wadr_d_pff;
  output xt_rsci_we_d_pff;
  output yt_rsci_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] modulo_dev_cmp_return_rsc_z;
  wire modulo_dev_cmp_ccs_ccore_en;
  reg [127:0] INNER_LOOP_b_rem_cmp_a;
  wire [63:0] INNER_LOOP_b_rem_cmp_z;
  wire [40:0] fsm_output;
  wire and_dcpl_5;
  wire or_dcpl_4;
  wire or_dcpl_5;
  wire and_dcpl_11;
  wire and_dcpl_14;
  wire and_dcpl_21;
  wire or_tmp_46;
  wire INNER_LOOP_b_INNER_LOOP_b_and_5;
  wire INNER_LOOP_b_INNER_LOOP_b_and_7;
  reg [9:0] INNER_LOOP_t_9_0_sva_1;
  reg x_3_sva;
  reg x_1_sva;
  reg y_3_sva;
  reg y_1_sva;
  wire OUTER_LOOP_nn_or_cse;
  reg reg_yt_rsc_cgo_cse;
  reg reg_xt_rsc_triosy_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  reg [63:0] reg_modulo_dev_cmp_m_rsc_dat_cse;
  wire or_98_rmff;
  wire or_103_rmff;
  reg [63:0] INNER_LOOP_a_lpi_3_dfm;
  reg [63:0] INNER_LOOP_b_sva;
  wire [8:0] INNER_LOOP_upper_and_psp_sva_1;
  wire [8:0] INNER_LOOP_q_and_psp_sva_1;
  reg s_9_sva;
  reg s_8_sva;
  reg s_7_sva;
  reg s_6_sva;
  reg s_5_sva;
  reg s_4_sva;
  reg s_3_sva;
  reg s_2_sva;
  reg s_1_sva;
  reg s_0_sva;
  reg [8:0] INNER_LOOP_a_acc_psp_sva;
  reg INNER_LOOP_a_slc_INNER_LOOP_q_and_psp_0_1_itm;
  reg [9:0] pref_x_idx_pref_9_0_sva;
  reg [9:0] pref_x_idx_pref_1_9_0_sva;
  wire [10:0] nl_pref_x_idx_pref_1_9_0_sva;
  reg [3:0] OUTER_LOOP_acc_2_itm;
  reg [63:0] p_sva;
  wire [7:0] INNER_LOOP_w_rshift_itm;
  wire [9:0] z_out;
  wire [10:0] nl_z_out;
  wire [9:0] z_out_1;
  wire [127:0] z_out_2;
  reg [63:0] drf_y_smx_lpi_2;
  reg [3:0] OUTER_LOOP_nn_3_0_sva;
  reg [8:0] OUTER_LOOP_m_lshift_psp_sva;
  reg [127:0] INNER_LOOP_b_mul_mut;
  reg INNER_LOOP_b_nor_itm;
  wire [3:0] OUTER_LOOP_nn_3_0_sva_2;
  wire [4:0] nl_OUTER_LOOP_nn_3_0_sva_2;
  wire [63:0] drf_y_smx_lpi_3_dfm_1;
  wire [9:0] pref_x_idx_pref_9_0_sva_1;
  wire [10:0] nl_pref_x_idx_pref_9_0_sva_1;
  wire [8:0] INNER_LOOP_upper_acc_cse_sva_1;
  wire [9:0] nl_INNER_LOOP_upper_acc_cse_sva_1;
  wire INNER_LOOP_a_lpi_3_dfm_mx0c0;
  wire INNER_LOOP_a_lpi_3_dfm_mx0c1;
  wire and_165_rgt;
  wire xor_3_cse;
  wire OUTER_LOOP_or_1_seb;

  wire[0:0] s_mux_5_nl;
  wire[0:0] or_106_nl;
  wire[8:0] INNER_LOOP_t_mux_1_nl;
  wire[8:0] INNER_LOOP_a_acc_nl;
  wire[9:0] nl_INNER_LOOP_a_acc_nl;
  wire[0:0] INNER_LOOP_a_or_1_nl;
  wire[63:0] INNER_LOOP_acc_5_nl;
  wire[64:0] nl_INNER_LOOP_acc_5_nl;
  wire[9:0] INNER_LOOP_b_INNER_LOOP_b_acc_nl;
  wire[10:0] nl_INNER_LOOP_b_INNER_LOOP_b_acc_nl;
  wire[9:0] INNER_LOOP_b_acc_nl;
  wire[10:0] nl_INNER_LOOP_b_acc_nl;
  wire[4:0] OUTER_LOOP_OUTER_LOOP_and_1_nl;
  wire[0:0] OUTER_LOOP_nor_1_nl;
  wire[3:0] OUTER_LOOP_mux1h_3_nl;
  wire[0:0] OUTER_LOOP_OUTER_LOOP_or_1_nl;
  wire[63:0] INNER_LOOP_mux_3_nl;
  wire[63:0] INNER_LOOP_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[63:0] INNER_LOOP_acc_2_nl;
  wire[64:0] nl_INNER_LOOP_acc_2_nl;
  wire [63:0] nl_modulo_dev_cmp_base_rsc_dat;
  assign nl_INNER_LOOP_acc_2_nl = INNER_LOOP_a_lpi_3_dfm + INNER_LOOP_b_sva;
  assign INNER_LOOP_acc_2_nl = nl_INNER_LOOP_acc_2_nl[63:0];
  assign nl_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(INNER_LOOP_acc_2_nl, INNER_LOOP_a_lpi_3_dfm,
      fsm_output[24]);
  wire [63:0] nl_modulo_dev_cmp_m_rsc_dat;
  assign nl_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire [0:0] nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat = (fsm_output[24:23]!=2'b00);
  wire [7:0] nl_INNER_LOOP_w_lshift_rg_a;
  assign nl_INNER_LOOP_w_lshift_rg_a = MUX_v_8_2_2(8'b00000001, INNER_LOOP_w_rshift_itm,
      fsm_output[2]);
  wire [3:0] nl_INNER_LOOP_w_lshift_rg_s;
  assign nl_INNER_LOOP_w_lshift_rg_s = MUX_v_4_2_2((z_out[3:0]), OUTER_LOOP_acc_2_itm,
      fsm_output[2]);
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_36_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_36_tr0 = INNER_LOOP_t_9_0_sva_1[9];
  wire [0:0] nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0;
  assign nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0 = ~ (z_out[2]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) xt_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_obj_ld_cse),
      .lz(xt_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) g_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_obj_ld_cse),
      .lz(g_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_obj (
      .ld(reg_xt_rsc_triosy_obj_ld_cse),
      .lz(twiddle_rsc_triosy_lz)
    );
  modulo_dev  modulo_dev_cmp (
      .base_rsc_dat(nl_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_rem #(.width_a(32'sd128),
  .width_b(32'sd64),
  .signd(32'sd0)) INNER_LOOP_b_rem_cmp (
      .a(INNER_LOOP_b_rem_cmp_a),
      .b(reg_modulo_dev_cmp_m_rsc_dat_cse),
      .z(INNER_LOOP_b_rem_cmp_z)
    );
  mgc_shift_r_v5 #(.width_a(32'sd9),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd8)) INNER_LOOP_w_rshift_rg (
      .a(INNER_LOOP_upper_and_psp_sva_1),
      .s(OUTER_LOOP_acc_2_itm),
      .z(INNER_LOOP_w_rshift_itm)
    );
  mgc_shift_l_v5 #(.width_a(32'sd8),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) INNER_LOOP_w_lshift_rg (
      .a(nl_INNER_LOOP_w_lshift_rg_a[7:0]),
      .s(nl_INNER_LOOP_w_lshift_rg_s[3:0]),
      .z(z_out_1)
    );
  stockham_DIT_core_wait_dp stockham_DIT_core_wait_dp_inst (
      .yt_rsc_cgo_iro(or_98_rmff),
      .yt_rsci_clken_d(yt_rsci_clken_d),
      .ensig_cgo_iro(or_103_rmff),
      .yt_rsc_cgo(reg_yt_rsc_cgo_cse),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_dev_cmp_ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  stockham_DIT_core_core_fsm stockham_DIT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .INNER_LOOP_C_36_tr0(nl_stockham_DIT_core_core_fsm_inst_INNER_LOOP_C_36_tr0[0:0]),
      .OUTER_LOOP_C_1_tr0(nl_stockham_DIT_core_core_fsm_inst_OUTER_LOOP_C_1_tr0[0:0])
    );
  assign OUTER_LOOP_nn_or_cse = (fsm_output[39]) | (fsm_output[0]);
  assign or_98_rmff = (INNER_LOOP_b_INNER_LOOP_b_and_7 & ((fsm_output[4:2]!=3'b000)))
      | (and_dcpl_11 & ((fsm_output[38:36]!=3'b000)));
  assign or_103_rmff = (fsm_output[36:23]!=14'b00000000000000);
  assign and_165_rgt = (INNER_LOOP_t_9_0_sva_1[9]) & (fsm_output[38]);
  assign xor_3_cse = y_1_sva ^ y_3_sva;
  assign nl_OUTER_LOOP_nn_3_0_sva_2 = OUTER_LOOP_nn_3_0_sva + 4'b0001;
  assign OUTER_LOOP_nn_3_0_sva_2 = nl_OUTER_LOOP_nn_3_0_sva_2[3:0];
  assign drf_y_smx_lpi_3_dfm_1 = MUX1HOT_v_64_3_2(xt_rsci_q_d, yt_rsci_q_d, drf_y_smx_lpi_2,
      {INNER_LOOP_b_INNER_LOOP_b_and_5 , INNER_LOOP_b_INNER_LOOP_b_and_7 , INNER_LOOP_b_nor_itm});
  assign INNER_LOOP_q_and_psp_sva_1 = INNER_LOOP_upper_acc_cse_sva_1 & INNER_LOOP_a_acc_psp_sva;
  assign nl_pref_x_idx_pref_9_0_sva_1 = conv_u2u_9_10(INNER_LOOP_q_and_psp_sva_1)
      + conv_u2u_9_10(INNER_LOOP_upper_and_psp_sva_1);
  assign pref_x_idx_pref_9_0_sva_1 = nl_pref_x_idx_pref_9_0_sva_1[9:0];
  assign INNER_LOOP_upper_and_psp_sva_1 = (~ INNER_LOOP_upper_acc_cse_sva_1) & INNER_LOOP_a_acc_psp_sva;
  assign nl_INNER_LOOP_upper_acc_cse_sva_1 = ({s_8_sva , s_7_sva , s_6_sva , s_5_sva
      , s_4_sva , s_3_sva , s_2_sva , s_1_sva , s_0_sva}) + 9'b111111111;
  assign INNER_LOOP_upper_acc_cse_sva_1 = nl_INNER_LOOP_upper_acc_cse_sva_1[8:0];
  assign INNER_LOOP_b_INNER_LOOP_b_and_5 = y_1_sva & (~ y_3_sva);
  assign INNER_LOOP_b_INNER_LOOP_b_and_7 = y_3_sva & (~ y_1_sva);
  assign and_dcpl_5 = ~((fsm_output[40]) | (fsm_output[0]));
  assign or_dcpl_4 = (fsm_output[37:36]!=2'b00);
  assign or_dcpl_5 = (fsm_output[3:2]!=2'b00);
  assign and_dcpl_11 = x_3_sva & (~ x_1_sva);
  assign and_dcpl_14 = ~((fsm_output[39]) | (fsm_output[1]));
  assign and_dcpl_21 = ~((fsm_output[38:37]!=2'b00));
  assign or_tmp_46 = (fsm_output[40]) | (fsm_output[0]);
  assign INNER_LOOP_a_lpi_3_dfm_mx0c0 = INNER_LOOP_b_INNER_LOOP_b_and_7 & (fsm_output[4]);
  assign INNER_LOOP_a_lpi_3_dfm_mx0c1 = (y_1_sva | (~ y_3_sva)) & (fsm_output[4]);
  assign xt_rsci_d_d_pff = modulo_dev_cmp_return_rsc_z;
  assign nl_INNER_LOOP_b_acc_nl = ({INNER_LOOP_upper_and_psp_sva_1 , 1'b0}) + conv_u2u_9_10(INNER_LOOP_q_and_psp_sva_1);
  assign INNER_LOOP_b_acc_nl = nl_INNER_LOOP_b_acc_nl[9:0];
  assign nl_INNER_LOOP_b_INNER_LOOP_b_acc_nl = INNER_LOOP_b_acc_nl + ({s_9_sva ,
      s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva , s_1_sva
      , s_0_sva});
  assign INNER_LOOP_b_INNER_LOOP_b_acc_nl = nl_INNER_LOOP_b_INNER_LOOP_b_acc_nl[9:0];
  assign xt_rsci_radr_d_pff = MUX_v_10_2_2(INNER_LOOP_b_INNER_LOOP_b_acc_nl, ({INNER_LOOP_a_acc_psp_sva
      , INNER_LOOP_a_slc_INNER_LOOP_q_and_psp_0_1_itm}), fsm_output[3]);
  assign xt_rsci_wadr_d_pff = MUX_v_10_2_2(pref_x_idx_pref_9_0_sva, pref_x_idx_pref_1_9_0_sva,
      fsm_output[37]);
  assign xt_rsci_we_d_pff = (~ x_3_sva) & x_1_sva & or_dcpl_4;
  assign xt_rsci_readA_r_ram_ir_internal_RMASK_B_d = y_1_sva & (~ y_3_sva) & or_dcpl_5;
  assign twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d = fsm_output[2];
  assign yt_rsci_we_d_pff = and_dcpl_11 & or_dcpl_4;
  assign yt_rsci_readA_r_ram_ir_internal_RMASK_B_d = INNER_LOOP_b_INNER_LOOP_b_and_7
      & or_dcpl_5;
  assign twiddle_rsci_radr_d = z_out_1;
  assign OUTER_LOOP_or_1_seb = (fsm_output[38]) | (fsm_output[1]);
  always @(posedge clk) begin
    if ( OUTER_LOOP_nn_or_cse ) begin
      OUTER_LOOP_nn_3_0_sva <= MUX_v_4_2_2(4'b0001, OUTER_LOOP_nn_3_0_sva_2, fsm_output[39]);
      s_9_sva <= fsm_output[0];
      s_8_sva <= s_9_sva & (~ (fsm_output[0]));
      s_7_sva <= s_8_sva & (~ (fsm_output[0]));
      s_6_sva <= s_7_sva & (~ (fsm_output[0]));
      s_5_sva <= s_6_sva & (~ (fsm_output[0]));
      s_4_sva <= s_5_sva & (~ (fsm_output[0]));
      s_3_sva <= s_4_sva & (~ (fsm_output[0]));
      s_2_sva <= s_3_sva & (~ (fsm_output[0]));
      s_1_sva <= s_2_sva & (~ (fsm_output[0]));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      x_3_sva <= 1'b0;
      x_1_sva <= 1'b0;
      y_3_sva <= 1'b0;
      y_1_sva <= 1'b0;
    end
    else if ( OUTER_LOOP_nn_or_cse ) begin
      x_3_sva <= y_3_sva | (fsm_output[0]);
      x_1_sva <= y_1_sva & (~ (fsm_output[0]));
      y_3_sva <= x_3_sva & (~ (fsm_output[0]));
      y_1_sva <= x_1_sva | (fsm_output[0]);
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_5 ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_yt_rsc_cgo_cse <= 1'b0;
      reg_xt_rsc_triosy_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
      INNER_LOOP_b_nor_itm <= 1'b0;
    end
    else begin
      reg_yt_rsc_cgo_cse <= or_98_rmff;
      reg_xt_rsc_triosy_obj_ld_cse <= (~ (z_out[2])) & (fsm_output[39]);
      reg_ensig_cgo_cse <= or_103_rmff;
      INNER_LOOP_b_nor_itm <= ~(INNER_LOOP_b_INNER_LOOP_b_and_5 | INNER_LOOP_b_INNER_LOOP_b_and_7);
    end
  end
  always @(posedge clk) begin
    s_0_sva <= s_mux_5_nl & (~ or_tmp_46);
    reg_modulo_dev_cmp_m_rsc_dat_cse <= p_sva;
    INNER_LOOP_b_rem_cmp_a <= MUX_v_128_2_2(z_out_2, INNER_LOOP_b_mul_mut, or_106_nl);
    INNER_LOOP_a_acc_psp_sva <= MUX_v_9_2_2(9'b000000000, INNER_LOOP_t_mux_1_nl,
        INNER_LOOP_a_or_1_nl);
    INNER_LOOP_b_sva <= INNER_LOOP_b_rem_cmp_z;
  end
  always @(posedge clk) begin
    if ( xor_3_cse & (fsm_output[3]) ) begin
      drf_y_smx_lpi_2 <= drf_y_smx_lpi_3_dfm_1;
    end
  end
  always @(posedge clk) begin
    if ( or_tmp_46 | and_165_rgt ) begin
      OUTER_LOOP_acc_2_itm <= MUX_v_4_2_2(4'b1001, (z_out[3:0]), and_165_rgt);
    end
  end
  always @(posedge clk) begin
    if ( ~(and_dcpl_14 & and_dcpl_5) ) begin
      OUTER_LOOP_m_lshift_psp_sva <= z_out_1[8:0];
    end
  end
  always @(posedge clk) begin
    if ( xor_3_cse ) begin
      INNER_LOOP_a_slc_INNER_LOOP_q_and_psp_0_1_itm <= INNER_LOOP_q_and_psp_sva_1[0];
    end
  end
  always @(posedge clk) begin
    if ( (~ and_dcpl_21) | (fsm_output[39]) | (fsm_output[36]) | (fsm_output[1])
        | (fsm_output[40]) | (fsm_output[0]) | (fsm_output[2]) ) begin
      pref_x_idx_pref_9_0_sva <= pref_x_idx_pref_9_0_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( ~(and_dcpl_21 & and_dcpl_14 & and_dcpl_5 & (~ (fsm_output[2]))) ) begin
      pref_x_idx_pref_1_9_0_sva <= nl_pref_x_idx_pref_1_9_0_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_t_9_0_sva_1 <= 10'b0000000000;
    end
    else if ( fsm_output[2] ) begin
      INNER_LOOP_t_9_0_sva_1 <= z_out;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[3] ) begin
      INNER_LOOP_b_mul_mut <= z_out_2;
    end
  end
  always @(posedge clk) begin
    if ( (fsm_output[23]) | INNER_LOOP_a_lpi_3_dfm_mx0c0 | INNER_LOOP_a_lpi_3_dfm_mx0c1
        ) begin
      INNER_LOOP_a_lpi_3_dfm <= MUX1HOT_v_64_3_2(yt_rsci_q_d, xt_rsci_q_d, INNER_LOOP_acc_5_nl,
          {INNER_LOOP_a_lpi_3_dfm_mx0c0 , INNER_LOOP_a_lpi_3_dfm_mx0c1 , (fsm_output[23])});
    end
  end
  assign s_mux_5_nl = MUX_s_1_2_2(s_0_sva, s_1_sva, fsm_output[39]);
  assign or_106_nl = (fsm_output[21:4]!=18'b000000000000000000);
  assign nl_INNER_LOOP_a_acc_nl = conv_u2u_8_9(INNER_LOOP_q_and_psp_sva_1[8:1]) +
      INNER_LOOP_upper_and_psp_sva_1;
  assign INNER_LOOP_a_acc_nl = nl_INNER_LOOP_a_acc_nl[8:0];
  assign INNER_LOOP_t_mux_1_nl = MUX_v_9_2_2(INNER_LOOP_a_acc_nl, (INNER_LOOP_t_9_0_sva_1[8:0]),
      fsm_output[38]);
  assign INNER_LOOP_a_or_1_nl = (fsm_output[38]) | (fsm_output[2]);
  assign nl_pref_x_idx_pref_1_9_0_sva  = pref_x_idx_pref_9_0_sva_1 + (z_out_2[9:0]);
  assign nl_INNER_LOOP_acc_5_nl = INNER_LOOP_a_lpi_3_dfm - INNER_LOOP_b_sva;
  assign INNER_LOOP_acc_5_nl = nl_INNER_LOOP_acc_5_nl[63:0];
  assign OUTER_LOOP_nor_1_nl = ~((fsm_output[38]) | (fsm_output[1]) | (fsm_output[39]));
  assign OUTER_LOOP_OUTER_LOOP_and_1_nl = MUX_v_5_2_2(5'b00000, (INNER_LOOP_a_acc_psp_sva[8:4]),
      OUTER_LOOP_nor_1_nl);
  assign OUTER_LOOP_mux1h_3_nl = MUX1HOT_v_4_4_2(OUTER_LOOP_acc_2_itm, OUTER_LOOP_nn_3_0_sva,
      (INNER_LOOP_a_acc_psp_sva[3:0]), ({1'b0 , (OUTER_LOOP_nn_3_0_sva_2[3:1])}),
      {(fsm_output[38]) , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[39])});
  assign OUTER_LOOP_OUTER_LOOP_or_1_nl = (fsm_output[39]) | OUTER_LOOP_or_1_seb;
  assign nl_z_out = conv_u2u_9_10({OUTER_LOOP_OUTER_LOOP_and_1_nl , OUTER_LOOP_mux1h_3_nl})
      + conv_s2u_3_10({OUTER_LOOP_or_1_seb , OUTER_LOOP_OUTER_LOOP_or_1_nl , 1'b1});
  assign z_out = nl_z_out[9:0];
  assign INNER_LOOP_mux_3_nl = MUX_v_64_2_2(({54'b000000000000000000000000000000000000000000000000000000
      , s_9_sva , s_8_sva , s_7_sva , s_6_sva , s_5_sva , s_4_sva , s_3_sva , s_2_sva
      , s_1_sva , s_0_sva}), drf_y_smx_lpi_3_dfm_1, fsm_output[3]);
  assign INNER_LOOP_mux_4_nl = MUX_v_64_2_2(({55'b0000000000000000000000000000000000000000000000000000000
      , OUTER_LOOP_m_lshift_psp_sva}), twiddle_rsci_q_d, fsm_output[3]);
  assign z_out_2 = conv_u2u_128_128(INNER_LOOP_mux_3_nl * INNER_LOOP_mux_4_nl);

  function automatic [3:0] MUX1HOT_v_4_4_2;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [3:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [127:0] MUX_v_128_2_2;
    input [127:0] input_0;
    input [127:0] input_1;
    input [0:0] sel;
    reg [127:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_128_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [9:0] conv_s2u_3_10 ;
    input [2:0]  vector ;
  begin
    conv_s2u_3_10 = {{7{vector[2]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [127:0] conv_u2u_128_128 ;
    input [127:0]  vector ;
  begin
    conv_u2u_128_128 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    stockham_DIT
// ------------------------------------------------------------------


module stockham_DIT (
  clk, rst, xt_rsc_wadr, xt_rsc_d, xt_rsc_we, xt_rsc_radr, xt_rsc_q, xt_rsc_triosy_lz,
      p_rsc_dat, p_rsc_triosy_lz, g_rsc_dat, g_rsc_triosy_lz, twiddle_rsc_radr, twiddle_rsc_q,
      twiddle_rsc_triosy_lz
);
  input clk;
  input rst;
  output [9:0] xt_rsc_wadr;
  output [63:0] xt_rsc_d;
  output xt_rsc_we;
  output [9:0] xt_rsc_radr;
  input [63:0] xt_rsc_q;
  output xt_rsc_triosy_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] g_rsc_dat;
  output g_rsc_triosy_lz;
  output [9:0] twiddle_rsc_radr;
  input [63:0] twiddle_rsc_q;
  output twiddle_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] xt_rsci_q_d;
  wire xt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] twiddle_rsci_q_d;
  wire [9:0] twiddle_rsci_radr_d;
  wire twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsci_clken_d;
  wire [63:0] yt_rsci_q_d;
  wire yt_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire yt_rsc_clken;
  wire [63:0] yt_rsc_q;
  wire [9:0] yt_rsc_radr;
  wire yt_rsc_we;
  wire [63:0] yt_rsc_d;
  wire [9:0] yt_rsc_wadr;
  wire [63:0] xt_rsci_d_d_iff;
  wire [9:0] xt_rsci_radr_d_iff;
  wire [9:0] xt_rsci_wadr_d_iff;
  wire xt_rsci_we_d_iff;
  wire yt_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd10),
  .data_width(32'sd64),
  .depth(32'sd1024),
  .latency(32'sd1)) yt_rsc_comp (
      .clk(clk),
      .clken(yt_rsc_clken),
      .d(yt_rsc_d),
      .q(yt_rsc_q),
      .radr(yt_rsc_radr),
      .wadr(yt_rsc_wadr),
      .we(yt_rsc_we)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_4_10_64_1024_1024_64_1_gen xt_rsci
      (
      .q(xt_rsc_q),
      .radr(xt_rsc_radr),
      .we(xt_rsc_we),
      .d(xt_rsc_d),
      .wadr(xt_rsc_wadr),
      .d_d(xt_rsci_d_d_iff),
      .q_d(xt_rsci_q_d),
      .radr_d(xt_rsci_radr_d_iff),
      .wadr_d(xt_rsci_wadr_d_iff),
      .we_d(xt_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(xt_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(xt_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_7_10_64_1024_1024_64_1_gen twiddle_rsci
      (
      .q(twiddle_rsc_q),
      .radr(twiddle_rsc_radr),
      .q_d(twiddle_rsci_q_d),
      .radr_d(twiddle_rsci_radr_d),
      .readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_10_64_1024_1024_64_1_gen yt_rsci
      (
      .clken(yt_rsc_clken),
      .q(yt_rsc_q),
      .radr(yt_rsc_radr),
      .we(yt_rsc_we),
      .d(yt_rsc_d),
      .wadr(yt_rsc_wadr),
      .clken_d(yt_rsci_clken_d),
      .d_d(xt_rsci_d_d_iff),
      .q_d(yt_rsci_q_d),
      .radr_d(xt_rsci_radr_d_iff),
      .wadr_d(xt_rsci_wadr_d_iff),
      .we_d(yt_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(yt_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(yt_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  stockham_DIT_core stockham_DIT_core_inst (
      .clk(clk),
      .rst(rst),
      .xt_rsc_triosy_lz(xt_rsc_triosy_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .g_rsc_triosy_lz(g_rsc_triosy_lz),
      .twiddle_rsc_triosy_lz(twiddle_rsc_triosy_lz),
      .xt_rsci_q_d(xt_rsci_q_d),
      .xt_rsci_readA_r_ram_ir_internal_RMASK_B_d(xt_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .twiddle_rsci_q_d(twiddle_rsci_q_d),
      .twiddle_rsci_radr_d(twiddle_rsci_radr_d),
      .twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d(twiddle_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .yt_rsci_clken_d(yt_rsci_clken_d),
      .yt_rsci_q_d(yt_rsci_q_d),
      .yt_rsci_readA_r_ram_ir_internal_RMASK_B_d(yt_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .xt_rsci_d_d_pff(xt_rsci_d_d_iff),
      .xt_rsci_radr_d_pff(xt_rsci_radr_d_iff),
      .xt_rsci_wadr_d_pff(xt_rsci_wadr_d_iff),
      .xt_rsci_we_d_pff(xt_rsci_we_d_iff),
      .yt_rsci_we_d_pff(yt_rsci_we_d_iff)
    );
endmodule



