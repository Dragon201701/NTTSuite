// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Thu Aug  5 00:20:12 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen
    (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [7:0] radr;
  output we;
  output [63:0] d;
  output [7:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [7:0] radr_d;
  input [7:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core_core_fsm (
  clk, rst, fsm_output, STAGE_LOOP_C_3_tr0, modExp_dev_while_C_14_tr0, COMP_LOOP_C_1_tr0,
      COMP_LOOP_1_modExp_dev_1_while_C_14_tr0, COMP_LOOP_C_32_tr0, COMP_LOOP_2_modExp_dev_1_while_C_14_tr0,
      COMP_LOOP_C_64_tr0, COMP_LOOP_3_modExp_dev_1_while_C_14_tr0, COMP_LOOP_C_96_tr0,
      COMP_LOOP_4_modExp_dev_1_while_C_14_tr0, COMP_LOOP_C_128_tr0, VEC_LOOP_C_0_tr0,
      STAGE_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input STAGE_LOOP_C_3_tr0;
  input modExp_dev_while_C_14_tr0;
  input COMP_LOOP_C_1_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_32_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_64_tr0;
  input COMP_LOOP_3_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_96_tr0;
  input COMP_LOOP_4_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_128_tr0;
  input VEC_LOOP_C_0_tr0;
  input STAGE_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIT_core_core_fsm_1
  parameter
    main_C_0 = 8'd0,
    STAGE_LOOP_C_0 = 8'd1,
    STAGE_LOOP_C_1 = 8'd2,
    STAGE_LOOP_C_2 = 8'd3,
    STAGE_LOOP_C_3 = 8'd4,
    modExp_dev_while_C_0 = 8'd5,
    modExp_dev_while_C_1 = 8'd6,
    modExp_dev_while_C_2 = 8'd7,
    modExp_dev_while_C_3 = 8'd8,
    modExp_dev_while_C_4 = 8'd9,
    modExp_dev_while_C_5 = 8'd10,
    modExp_dev_while_C_6 = 8'd11,
    modExp_dev_while_C_7 = 8'd12,
    modExp_dev_while_C_8 = 8'd13,
    modExp_dev_while_C_9 = 8'd14,
    modExp_dev_while_C_10 = 8'd15,
    modExp_dev_while_C_11 = 8'd16,
    modExp_dev_while_C_12 = 8'd17,
    modExp_dev_while_C_13 = 8'd18,
    modExp_dev_while_C_14 = 8'd19,
    COMP_LOOP_C_0 = 8'd20,
    COMP_LOOP_C_1 = 8'd21,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 8'd22,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 8'd23,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 8'd24,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 8'd25,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 8'd26,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 8'd27,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 8'd28,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 8'd29,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 8'd30,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 8'd31,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 8'd32,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 8'd33,
    COMP_LOOP_1_modExp_dev_1_while_C_12 = 8'd34,
    COMP_LOOP_1_modExp_dev_1_while_C_13 = 8'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_14 = 8'd36,
    COMP_LOOP_C_2 = 8'd37,
    COMP_LOOP_C_3 = 8'd38,
    COMP_LOOP_C_4 = 8'd39,
    COMP_LOOP_C_5 = 8'd40,
    COMP_LOOP_C_6 = 8'd41,
    COMP_LOOP_C_7 = 8'd42,
    COMP_LOOP_C_8 = 8'd43,
    COMP_LOOP_C_9 = 8'd44,
    COMP_LOOP_C_10 = 8'd45,
    COMP_LOOP_C_11 = 8'd46,
    COMP_LOOP_C_12 = 8'd47,
    COMP_LOOP_C_13 = 8'd48,
    COMP_LOOP_C_14 = 8'd49,
    COMP_LOOP_C_15 = 8'd50,
    COMP_LOOP_C_16 = 8'd51,
    COMP_LOOP_C_17 = 8'd52,
    COMP_LOOP_C_18 = 8'd53,
    COMP_LOOP_C_19 = 8'd54,
    COMP_LOOP_C_20 = 8'd55,
    COMP_LOOP_C_21 = 8'd56,
    COMP_LOOP_C_22 = 8'd57,
    COMP_LOOP_C_23 = 8'd58,
    COMP_LOOP_C_24 = 8'd59,
    COMP_LOOP_C_25 = 8'd60,
    COMP_LOOP_C_26 = 8'd61,
    COMP_LOOP_C_27 = 8'd62,
    COMP_LOOP_C_28 = 8'd63,
    COMP_LOOP_C_29 = 8'd64,
    COMP_LOOP_C_30 = 8'd65,
    COMP_LOOP_C_31 = 8'd66,
    COMP_LOOP_C_32 = 8'd67,
    COMP_LOOP_C_33 = 8'd68,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 8'd69,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 8'd70,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 8'd71,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 8'd72,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 8'd73,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 8'd74,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 8'd75,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 8'd76,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 8'd77,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 8'd78,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 8'd79,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 8'd80,
    COMP_LOOP_2_modExp_dev_1_while_C_12 = 8'd81,
    COMP_LOOP_2_modExp_dev_1_while_C_13 = 8'd82,
    COMP_LOOP_2_modExp_dev_1_while_C_14 = 8'd83,
    COMP_LOOP_C_34 = 8'd84,
    COMP_LOOP_C_35 = 8'd85,
    COMP_LOOP_C_36 = 8'd86,
    COMP_LOOP_C_37 = 8'd87,
    COMP_LOOP_C_38 = 8'd88,
    COMP_LOOP_C_39 = 8'd89,
    COMP_LOOP_C_40 = 8'd90,
    COMP_LOOP_C_41 = 8'd91,
    COMP_LOOP_C_42 = 8'd92,
    COMP_LOOP_C_43 = 8'd93,
    COMP_LOOP_C_44 = 8'd94,
    COMP_LOOP_C_45 = 8'd95,
    COMP_LOOP_C_46 = 8'd96,
    COMP_LOOP_C_47 = 8'd97,
    COMP_LOOP_C_48 = 8'd98,
    COMP_LOOP_C_49 = 8'd99,
    COMP_LOOP_C_50 = 8'd100,
    COMP_LOOP_C_51 = 8'd101,
    COMP_LOOP_C_52 = 8'd102,
    COMP_LOOP_C_53 = 8'd103,
    COMP_LOOP_C_54 = 8'd104,
    COMP_LOOP_C_55 = 8'd105,
    COMP_LOOP_C_56 = 8'd106,
    COMP_LOOP_C_57 = 8'd107,
    COMP_LOOP_C_58 = 8'd108,
    COMP_LOOP_C_59 = 8'd109,
    COMP_LOOP_C_60 = 8'd110,
    COMP_LOOP_C_61 = 8'd111,
    COMP_LOOP_C_62 = 8'd112,
    COMP_LOOP_C_63 = 8'd113,
    COMP_LOOP_C_64 = 8'd114,
    COMP_LOOP_C_65 = 8'd115,
    COMP_LOOP_3_modExp_dev_1_while_C_0 = 8'd116,
    COMP_LOOP_3_modExp_dev_1_while_C_1 = 8'd117,
    COMP_LOOP_3_modExp_dev_1_while_C_2 = 8'd118,
    COMP_LOOP_3_modExp_dev_1_while_C_3 = 8'd119,
    COMP_LOOP_3_modExp_dev_1_while_C_4 = 8'd120,
    COMP_LOOP_3_modExp_dev_1_while_C_5 = 8'd121,
    COMP_LOOP_3_modExp_dev_1_while_C_6 = 8'd122,
    COMP_LOOP_3_modExp_dev_1_while_C_7 = 8'd123,
    COMP_LOOP_3_modExp_dev_1_while_C_8 = 8'd124,
    COMP_LOOP_3_modExp_dev_1_while_C_9 = 8'd125,
    COMP_LOOP_3_modExp_dev_1_while_C_10 = 8'd126,
    COMP_LOOP_3_modExp_dev_1_while_C_11 = 8'd127,
    COMP_LOOP_3_modExp_dev_1_while_C_12 = 8'd128,
    COMP_LOOP_3_modExp_dev_1_while_C_13 = 8'd129,
    COMP_LOOP_3_modExp_dev_1_while_C_14 = 8'd130,
    COMP_LOOP_C_66 = 8'd131,
    COMP_LOOP_C_67 = 8'd132,
    COMP_LOOP_C_68 = 8'd133,
    COMP_LOOP_C_69 = 8'd134,
    COMP_LOOP_C_70 = 8'd135,
    COMP_LOOP_C_71 = 8'd136,
    COMP_LOOP_C_72 = 8'd137,
    COMP_LOOP_C_73 = 8'd138,
    COMP_LOOP_C_74 = 8'd139,
    COMP_LOOP_C_75 = 8'd140,
    COMP_LOOP_C_76 = 8'd141,
    COMP_LOOP_C_77 = 8'd142,
    COMP_LOOP_C_78 = 8'd143,
    COMP_LOOP_C_79 = 8'd144,
    COMP_LOOP_C_80 = 8'd145,
    COMP_LOOP_C_81 = 8'd146,
    COMP_LOOP_C_82 = 8'd147,
    COMP_LOOP_C_83 = 8'd148,
    COMP_LOOP_C_84 = 8'd149,
    COMP_LOOP_C_85 = 8'd150,
    COMP_LOOP_C_86 = 8'd151,
    COMP_LOOP_C_87 = 8'd152,
    COMP_LOOP_C_88 = 8'd153,
    COMP_LOOP_C_89 = 8'd154,
    COMP_LOOP_C_90 = 8'd155,
    COMP_LOOP_C_91 = 8'd156,
    COMP_LOOP_C_92 = 8'd157,
    COMP_LOOP_C_93 = 8'd158,
    COMP_LOOP_C_94 = 8'd159,
    COMP_LOOP_C_95 = 8'd160,
    COMP_LOOP_C_96 = 8'd161,
    COMP_LOOP_C_97 = 8'd162,
    COMP_LOOP_4_modExp_dev_1_while_C_0 = 8'd163,
    COMP_LOOP_4_modExp_dev_1_while_C_1 = 8'd164,
    COMP_LOOP_4_modExp_dev_1_while_C_2 = 8'd165,
    COMP_LOOP_4_modExp_dev_1_while_C_3 = 8'd166,
    COMP_LOOP_4_modExp_dev_1_while_C_4 = 8'd167,
    COMP_LOOP_4_modExp_dev_1_while_C_5 = 8'd168,
    COMP_LOOP_4_modExp_dev_1_while_C_6 = 8'd169,
    COMP_LOOP_4_modExp_dev_1_while_C_7 = 8'd170,
    COMP_LOOP_4_modExp_dev_1_while_C_8 = 8'd171,
    COMP_LOOP_4_modExp_dev_1_while_C_9 = 8'd172,
    COMP_LOOP_4_modExp_dev_1_while_C_10 = 8'd173,
    COMP_LOOP_4_modExp_dev_1_while_C_11 = 8'd174,
    COMP_LOOP_4_modExp_dev_1_while_C_12 = 8'd175,
    COMP_LOOP_4_modExp_dev_1_while_C_13 = 8'd176,
    COMP_LOOP_4_modExp_dev_1_while_C_14 = 8'd177,
    COMP_LOOP_C_98 = 8'd178,
    COMP_LOOP_C_99 = 8'd179,
    COMP_LOOP_C_100 = 8'd180,
    COMP_LOOP_C_101 = 8'd181,
    COMP_LOOP_C_102 = 8'd182,
    COMP_LOOP_C_103 = 8'd183,
    COMP_LOOP_C_104 = 8'd184,
    COMP_LOOP_C_105 = 8'd185,
    COMP_LOOP_C_106 = 8'd186,
    COMP_LOOP_C_107 = 8'd187,
    COMP_LOOP_C_108 = 8'd188,
    COMP_LOOP_C_109 = 8'd189,
    COMP_LOOP_C_110 = 8'd190,
    COMP_LOOP_C_111 = 8'd191,
    COMP_LOOP_C_112 = 8'd192,
    COMP_LOOP_C_113 = 8'd193,
    COMP_LOOP_C_114 = 8'd194,
    COMP_LOOP_C_115 = 8'd195,
    COMP_LOOP_C_116 = 8'd196,
    COMP_LOOP_C_117 = 8'd197,
    COMP_LOOP_C_118 = 8'd198,
    COMP_LOOP_C_119 = 8'd199,
    COMP_LOOP_C_120 = 8'd200,
    COMP_LOOP_C_121 = 8'd201,
    COMP_LOOP_C_122 = 8'd202,
    COMP_LOOP_C_123 = 8'd203,
    COMP_LOOP_C_124 = 8'd204,
    COMP_LOOP_C_125 = 8'd205,
    COMP_LOOP_C_126 = 8'd206,
    COMP_LOOP_C_127 = 8'd207,
    COMP_LOOP_C_128 = 8'd208,
    VEC_LOOP_C_0 = 8'd209,
    STAGE_LOOP_C_4 = 8'd210,
    main_C_1 = 8'd211;

  reg [7:0] state_var;
  reg [7:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIT_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 8'b00000001;
        state_var_NS = STAGE_LOOP_C_1;
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = STAGE_LOOP_C_2;
      end
      STAGE_LOOP_C_2 : begin
        fsm_output = 8'b00000011;
        state_var_NS = STAGE_LOOP_C_3;
      end
      STAGE_LOOP_C_3 : begin
        fsm_output = 8'b00000100;
        if ( STAGE_LOOP_C_3_tr0 ) begin
          state_var_NS = COMP_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 8'b00000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 8'b00000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 8'b00000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 8'b00001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 8'b00001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 8'b00001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 8'b00001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 8'b00001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 8'b00001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 8'b00001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 8'b00001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 8'b00010000;
        state_var_NS = modExp_dev_while_C_12;
      end
      modExp_dev_while_C_12 : begin
        fsm_output = 8'b00010001;
        state_var_NS = modExp_dev_while_C_13;
      end
      modExp_dev_while_C_13 : begin
        fsm_output = 8'b00010010;
        state_var_NS = modExp_dev_while_C_14;
      end
      modExp_dev_while_C_14 : begin
        fsm_output = 8'b00010011;
        if ( modExp_dev_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 8'b00010100;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 8'b00010101;
        if ( COMP_LOOP_C_1_tr0 ) begin
          state_var_NS = COMP_LOOP_C_2;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b00010110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b00010111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b00011000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b00011001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b00011010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b00011011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b00011100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b00011101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b00011110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b00011111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b00100000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b00100001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_12 : begin
        fsm_output = 8'b00100010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_13 : begin
        fsm_output = 8'b00100011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_14 : begin
        fsm_output = 8'b00100100;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_2;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 8'b00100101;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 8'b00100110;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 8'b00100111;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 8'b00101000;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 8'b00101001;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 8'b00101010;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 8'b00101011;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 8'b00101100;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 8'b00101101;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 8'b00101110;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 8'b00101111;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 8'b00110000;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 8'b00110001;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 8'b00110010;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 8'b00110011;
        state_var_NS = COMP_LOOP_C_17;
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 8'b00110100;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 8'b00110101;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 8'b00110110;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 8'b00110111;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 8'b00111000;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 8'b00111001;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 8'b00111010;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 8'b00111011;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 8'b00111100;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 8'b00111101;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 8'b00111110;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 8'b00111111;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 8'b01000000;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 8'b01000001;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 8'b01000010;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 8'b01000011;
        if ( COMP_LOOP_C_32_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_33;
        end
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 8'b01000100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01000101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01000110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01000111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01001000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01001001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01001010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01001011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01001100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01001101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01001110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01001111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01010000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_12 : begin
        fsm_output = 8'b01010001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_13 : begin
        fsm_output = 8'b01010010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_14 : begin
        fsm_output = 8'b01010011;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_34;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 8'b01010100;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 8'b01010101;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 8'b01010110;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 8'b01010111;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 8'b01011000;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 8'b01011001;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 8'b01011010;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 8'b01011011;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 8'b01011100;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 8'b01011101;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 8'b01011110;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 8'b01011111;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 8'b01100000;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 8'b01100001;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 8'b01100010;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 8'b01100011;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 8'b01100100;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 8'b01100101;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 8'b01100110;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 8'b01100111;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 8'b01101000;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 8'b01101001;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 8'b01101010;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 8'b01101011;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 8'b01101100;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 8'b01101101;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 8'b01101110;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 8'b01101111;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 8'b01110000;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 8'b01110001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 8'b01110010;
        if ( COMP_LOOP_C_64_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_65;
        end
      end
      COMP_LOOP_C_65 : begin
        fsm_output = 8'b01110011;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b01110100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b01110101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b01110110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b01110111;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b01111000;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b01111001;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b01111010;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b01111011;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b01111100;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b01111101;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b01111110;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b01111111;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_12 : begin
        fsm_output = 8'b10000000;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_13 : begin
        fsm_output = 8'b10000001;
        state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_3_modExp_dev_1_while_C_14 : begin
        fsm_output = 8'b10000010;
        if ( COMP_LOOP_3_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_66;
        end
        else begin
          state_var_NS = COMP_LOOP_3_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_66 : begin
        fsm_output = 8'b10000011;
        state_var_NS = COMP_LOOP_C_67;
      end
      COMP_LOOP_C_67 : begin
        fsm_output = 8'b10000100;
        state_var_NS = COMP_LOOP_C_68;
      end
      COMP_LOOP_C_68 : begin
        fsm_output = 8'b10000101;
        state_var_NS = COMP_LOOP_C_69;
      end
      COMP_LOOP_C_69 : begin
        fsm_output = 8'b10000110;
        state_var_NS = COMP_LOOP_C_70;
      end
      COMP_LOOP_C_70 : begin
        fsm_output = 8'b10000111;
        state_var_NS = COMP_LOOP_C_71;
      end
      COMP_LOOP_C_71 : begin
        fsm_output = 8'b10001000;
        state_var_NS = COMP_LOOP_C_72;
      end
      COMP_LOOP_C_72 : begin
        fsm_output = 8'b10001001;
        state_var_NS = COMP_LOOP_C_73;
      end
      COMP_LOOP_C_73 : begin
        fsm_output = 8'b10001010;
        state_var_NS = COMP_LOOP_C_74;
      end
      COMP_LOOP_C_74 : begin
        fsm_output = 8'b10001011;
        state_var_NS = COMP_LOOP_C_75;
      end
      COMP_LOOP_C_75 : begin
        fsm_output = 8'b10001100;
        state_var_NS = COMP_LOOP_C_76;
      end
      COMP_LOOP_C_76 : begin
        fsm_output = 8'b10001101;
        state_var_NS = COMP_LOOP_C_77;
      end
      COMP_LOOP_C_77 : begin
        fsm_output = 8'b10001110;
        state_var_NS = COMP_LOOP_C_78;
      end
      COMP_LOOP_C_78 : begin
        fsm_output = 8'b10001111;
        state_var_NS = COMP_LOOP_C_79;
      end
      COMP_LOOP_C_79 : begin
        fsm_output = 8'b10010000;
        state_var_NS = COMP_LOOP_C_80;
      end
      COMP_LOOP_C_80 : begin
        fsm_output = 8'b10010001;
        state_var_NS = COMP_LOOP_C_81;
      end
      COMP_LOOP_C_81 : begin
        fsm_output = 8'b10010010;
        state_var_NS = COMP_LOOP_C_82;
      end
      COMP_LOOP_C_82 : begin
        fsm_output = 8'b10010011;
        state_var_NS = COMP_LOOP_C_83;
      end
      COMP_LOOP_C_83 : begin
        fsm_output = 8'b10010100;
        state_var_NS = COMP_LOOP_C_84;
      end
      COMP_LOOP_C_84 : begin
        fsm_output = 8'b10010101;
        state_var_NS = COMP_LOOP_C_85;
      end
      COMP_LOOP_C_85 : begin
        fsm_output = 8'b10010110;
        state_var_NS = COMP_LOOP_C_86;
      end
      COMP_LOOP_C_86 : begin
        fsm_output = 8'b10010111;
        state_var_NS = COMP_LOOP_C_87;
      end
      COMP_LOOP_C_87 : begin
        fsm_output = 8'b10011000;
        state_var_NS = COMP_LOOP_C_88;
      end
      COMP_LOOP_C_88 : begin
        fsm_output = 8'b10011001;
        state_var_NS = COMP_LOOP_C_89;
      end
      COMP_LOOP_C_89 : begin
        fsm_output = 8'b10011010;
        state_var_NS = COMP_LOOP_C_90;
      end
      COMP_LOOP_C_90 : begin
        fsm_output = 8'b10011011;
        state_var_NS = COMP_LOOP_C_91;
      end
      COMP_LOOP_C_91 : begin
        fsm_output = 8'b10011100;
        state_var_NS = COMP_LOOP_C_92;
      end
      COMP_LOOP_C_92 : begin
        fsm_output = 8'b10011101;
        state_var_NS = COMP_LOOP_C_93;
      end
      COMP_LOOP_C_93 : begin
        fsm_output = 8'b10011110;
        state_var_NS = COMP_LOOP_C_94;
      end
      COMP_LOOP_C_94 : begin
        fsm_output = 8'b10011111;
        state_var_NS = COMP_LOOP_C_95;
      end
      COMP_LOOP_C_95 : begin
        fsm_output = 8'b10100000;
        state_var_NS = COMP_LOOP_C_96;
      end
      COMP_LOOP_C_96 : begin
        fsm_output = 8'b10100001;
        if ( COMP_LOOP_C_96_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_97;
        end
      end
      COMP_LOOP_C_97 : begin
        fsm_output = 8'b10100010;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_0 : begin
        fsm_output = 8'b10100011;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_1 : begin
        fsm_output = 8'b10100100;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_2 : begin
        fsm_output = 8'b10100101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_3 : begin
        fsm_output = 8'b10100110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_4 : begin
        fsm_output = 8'b10100111;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_5 : begin
        fsm_output = 8'b10101000;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_6 : begin
        fsm_output = 8'b10101001;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_7 : begin
        fsm_output = 8'b10101010;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_8 : begin
        fsm_output = 8'b10101011;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_9 : begin
        fsm_output = 8'b10101100;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_10 : begin
        fsm_output = 8'b10101101;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_11 : begin
        fsm_output = 8'b10101110;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_12 : begin
        fsm_output = 8'b10101111;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_13 : begin
        fsm_output = 8'b10110000;
        state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_4_modExp_dev_1_while_C_14 : begin
        fsm_output = 8'b10110001;
        if ( COMP_LOOP_4_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_98;
        end
        else begin
          state_var_NS = COMP_LOOP_4_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_98 : begin
        fsm_output = 8'b10110010;
        state_var_NS = COMP_LOOP_C_99;
      end
      COMP_LOOP_C_99 : begin
        fsm_output = 8'b10110011;
        state_var_NS = COMP_LOOP_C_100;
      end
      COMP_LOOP_C_100 : begin
        fsm_output = 8'b10110100;
        state_var_NS = COMP_LOOP_C_101;
      end
      COMP_LOOP_C_101 : begin
        fsm_output = 8'b10110101;
        state_var_NS = COMP_LOOP_C_102;
      end
      COMP_LOOP_C_102 : begin
        fsm_output = 8'b10110110;
        state_var_NS = COMP_LOOP_C_103;
      end
      COMP_LOOP_C_103 : begin
        fsm_output = 8'b10110111;
        state_var_NS = COMP_LOOP_C_104;
      end
      COMP_LOOP_C_104 : begin
        fsm_output = 8'b10111000;
        state_var_NS = COMP_LOOP_C_105;
      end
      COMP_LOOP_C_105 : begin
        fsm_output = 8'b10111001;
        state_var_NS = COMP_LOOP_C_106;
      end
      COMP_LOOP_C_106 : begin
        fsm_output = 8'b10111010;
        state_var_NS = COMP_LOOP_C_107;
      end
      COMP_LOOP_C_107 : begin
        fsm_output = 8'b10111011;
        state_var_NS = COMP_LOOP_C_108;
      end
      COMP_LOOP_C_108 : begin
        fsm_output = 8'b10111100;
        state_var_NS = COMP_LOOP_C_109;
      end
      COMP_LOOP_C_109 : begin
        fsm_output = 8'b10111101;
        state_var_NS = COMP_LOOP_C_110;
      end
      COMP_LOOP_C_110 : begin
        fsm_output = 8'b10111110;
        state_var_NS = COMP_LOOP_C_111;
      end
      COMP_LOOP_C_111 : begin
        fsm_output = 8'b10111111;
        state_var_NS = COMP_LOOP_C_112;
      end
      COMP_LOOP_C_112 : begin
        fsm_output = 8'b11000000;
        state_var_NS = COMP_LOOP_C_113;
      end
      COMP_LOOP_C_113 : begin
        fsm_output = 8'b11000001;
        state_var_NS = COMP_LOOP_C_114;
      end
      COMP_LOOP_C_114 : begin
        fsm_output = 8'b11000010;
        state_var_NS = COMP_LOOP_C_115;
      end
      COMP_LOOP_C_115 : begin
        fsm_output = 8'b11000011;
        state_var_NS = COMP_LOOP_C_116;
      end
      COMP_LOOP_C_116 : begin
        fsm_output = 8'b11000100;
        state_var_NS = COMP_LOOP_C_117;
      end
      COMP_LOOP_C_117 : begin
        fsm_output = 8'b11000101;
        state_var_NS = COMP_LOOP_C_118;
      end
      COMP_LOOP_C_118 : begin
        fsm_output = 8'b11000110;
        state_var_NS = COMP_LOOP_C_119;
      end
      COMP_LOOP_C_119 : begin
        fsm_output = 8'b11000111;
        state_var_NS = COMP_LOOP_C_120;
      end
      COMP_LOOP_C_120 : begin
        fsm_output = 8'b11001000;
        state_var_NS = COMP_LOOP_C_121;
      end
      COMP_LOOP_C_121 : begin
        fsm_output = 8'b11001001;
        state_var_NS = COMP_LOOP_C_122;
      end
      COMP_LOOP_C_122 : begin
        fsm_output = 8'b11001010;
        state_var_NS = COMP_LOOP_C_123;
      end
      COMP_LOOP_C_123 : begin
        fsm_output = 8'b11001011;
        state_var_NS = COMP_LOOP_C_124;
      end
      COMP_LOOP_C_124 : begin
        fsm_output = 8'b11001100;
        state_var_NS = COMP_LOOP_C_125;
      end
      COMP_LOOP_C_125 : begin
        fsm_output = 8'b11001101;
        state_var_NS = COMP_LOOP_C_126;
      end
      COMP_LOOP_C_126 : begin
        fsm_output = 8'b11001110;
        state_var_NS = COMP_LOOP_C_127;
      end
      COMP_LOOP_C_127 : begin
        fsm_output = 8'b11001111;
        state_var_NS = COMP_LOOP_C_128;
      end
      COMP_LOOP_C_128 : begin
        fsm_output = 8'b11010000;
        if ( COMP_LOOP_C_128_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      VEC_LOOP_C_0 : begin
        fsm_output = 8'b11010001;
        if ( VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_4;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_4 : begin
        fsm_output = 8'b11010010;
        if ( STAGE_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b11010011;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, vec_rsc_triosy_0_2_lz,
      vec_rsc_triosy_0_3_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_1_i_q_d,
      vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_2_i_q_d, vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_3_i_q_d, vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_0_i_d_d_pff,
      vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff, vec_rsc_0_0_i_we_d_pff,
      vec_rsc_0_1_i_we_d_pff, vec_rsc_0_2_i_we_d_pff, vec_rsc_0_3_i_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  output vec_rsc_triosy_0_2_lz;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_2_i_q_d;
  output vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_3_i_q_d;
  output vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [7:0] vec_rsc_0_0_i_radr_d_pff;
  output [7:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;
  output vec_rsc_0_2_i_we_d_pff;
  output vec_rsc_0_3_i_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] modulo_dev_cmp_return_rsc_z;
  wire modulo_dev_cmp_ccs_ccore_en;
  reg [64:0] operator_66_true_div_cmp_a;
  wire [64:0] operator_66_true_div_cmp_z;
  reg [9:0] operator_66_true_div_cmp_b_9_0;
  wire [7:0] fsm_output;
  wire mux_tmp_5;
  wire nor_tmp_6;
  wire mux_tmp_40;
  wire and_tmp_1;
  wire and_dcpl_2;
  wire and_dcpl_3;
  wire and_dcpl_5;
  wire and_dcpl_6;
  wire and_dcpl_7;
  wire and_dcpl_10;
  wire and_dcpl_12;
  wire and_dcpl_13;
  wire not_tmp_46;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire and_dcpl_18;
  wire and_dcpl_19;
  wire and_dcpl_20;
  wire and_dcpl_21;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire and_dcpl_27;
  wire and_dcpl_28;
  wire and_dcpl_30;
  wire and_dcpl_32;
  wire and_dcpl_33;
  wire and_dcpl_34;
  wire and_dcpl_35;
  wire and_dcpl_38;
  wire nor_tmp_10;
  wire and_dcpl_44;
  wire or_tmp_43;
  wire not_tmp_51;
  wire or_tmp_70;
  wire or_tmp_95;
  wire or_tmp_122;
  wire nor_tmp_34;
  wire mux_tmp_117;
  wire or_tmp_147;
  wire or_tmp_148;
  wire or_tmp_150;
  wire and_dcpl_59;
  wire mux_tmp_142;
  wire or_tmp_160;
  wire mux_tmp_145;
  wire and_dcpl_63;
  wire or_tmp_173;
  wire or_tmp_177;
  wire and_dcpl_66;
  wire mux_tmp_177;
  wire and_dcpl_72;
  wire and_dcpl_75;
  wire mux_tmp_184;
  wire or_tmp_195;
  wire or_tmp_196;
  wire mux_tmp_186;
  wire or_tmp_197;
  wire and_dcpl_79;
  wire mux_tmp_215;
  wire and_dcpl_89;
  wire not_tmp_147;
  wire mux_tmp_243;
  wire mux_tmp_244;
  wire mux_tmp_245;
  wire mux_tmp_246;
  wire mux_tmp_257;
  wire or_tmp_289;
  reg exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  wire [10:0] VEC_LOOP_acc_1_psp_1;
  wire [11:0] nl_VEC_LOOP_acc_1_psp_1;
  reg COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  reg [9:0] VEC_LOOP_j_sva_9_0;
  reg COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm;
  reg [6:0] COMP_LOOP_k_9_2_sva_6_0;
  reg [8:0] COMP_LOOP_acc_11_psp_sva;
  wire [9:0] nl_COMP_LOOP_acc_11_psp_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_sva;
  wire [10:0] nl_COMP_LOOP_acc_1_cse_sva;
  reg [9:0] COMP_LOOP_acc_1_cse_2_sva;
  wire nor_14_cse;
  reg reg_vec_rsc_triosy_0_3_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  wire or_215_cse;
  wire or_17_cse;
  wire and_110_cse;
  wire or_310_cse;
  wire or_4_cse;
  wire nor_57_cse;
  wire or_183_cse;
  wire or_333_cse;
  wire mux_64_cse;
  wire mux_15_cse;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] p_sva;
  reg [7:0] COMP_LOOP_acc_psp_sva;
  wire mux_152_itm;
  wire and_dcpl_105;
  wire and_dcpl_106;
  wire and_dcpl_109;
  wire and_dcpl_112;
  wire and_dcpl_117;
  wire and_dcpl_120;
  wire [9:0] z_out_1;
  wire [7:0] z_out_2;
  wire and_dcpl_137;
  wire and_dcpl_145;
  wire and_dcpl_151;
  wire and_dcpl_152;
  wire and_dcpl_153;
  wire and_dcpl_154;
  wire [64:0] z_out_3;
  wire [65:0] nl_z_out_3;
  wire and_dcpl_160;
  wire and_dcpl_167;
  wire and_dcpl_170;
  wire and_dcpl_177;
  wire and_dcpl_193;
  reg [63:0] r_sva;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [9:0] STAGE_LOOP_lshift_psp_sva;
  reg [63:0] modExp_dev_exp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg [1:0] modExp_dev_exp_1_sva_1_0;
  wire STAGE_LOOP_i_3_0_sva_mx0c1;
  wire [9:0] STAGE_LOOP_lshift_psp_sva_mx0w0;
  wire VEC_LOOP_j_sva_9_0_mx0c1;
  wire tmp_2_lpi_4_dfm_mx0c0;
  wire tmp_2_lpi_4_dfm_mx0c1;
  wire tmp_2_lpi_4_dfm_mx0c2;
  wire tmp_2_lpi_4_dfm_mx0c3;
  wire and_81_rgt;
  wire nor_93_cse;
  wire nor_86_cse;
  wire nor_79_cse;
  wire and_120_cse;
  wire reg_COMP_LOOP_COMP_LOOP_nor_cse;
  wire nand_64_cse;
  wire nor_tmp_57;
  wire [64:0] operator_64_false_operator_64_false_mux_rgt;
  wire or_tmp_349;
  wire or_tmp_368;
  wire [9:0] COMP_LOOP_mux1h_19_rgt;
  reg [2:0] COMP_LOOP_acc_10_cse_10_1_1_sva_9_7;
  reg [6:0] COMP_LOOP_acc_10_cse_10_1_1_sva_6_0;
  reg operator_64_false_acc_mut_64;
  reg [63:0] operator_64_false_acc_mut_63_0;
  wire or_180_cse;
  wire or_451_cse;
  wire or_454_cse;
  wire and_259_cse;
  wire or_331_cse;
  wire or_407_cse;
  wire nand_71_cse;
  wire nor_182_cse;
  wire or_383_cse;
  wire mux_175_cse;
  wire mux_173_cse;
  wire nand_32_cse;
  wire and_71_cse;
  wire mux_170_cse;
  wire COMP_LOOP_or_3_cse;
  wire [62:0] z_out_4_64_2;
  wire [9:0] z_out_5_10_1;

  wire[0:0] mux_151_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] and_114_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] and_63_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] or_158_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] and_115_nl;
  wire[0:0] nor_74_nl;
  wire[63:0] modExp_dev_while_mux1h_nl;
  wire[63:0] mul_nl;
  wire[127:0] nl_mul_nl;
  wire[63:0] modExp_dev_while_modExp_dev_while_mux_2_nl;
  wire[0:0] modExp_dev_while_or_2_nl;
  wire[63:0] modExp_dev_while_mux1h_4_nl;
  wire[0:0] and_262_nl;
  wire[0:0] modExp_dev_while_and_4_nl;
  wire[0:0] modExp_dev_while_and_5_nl;
  wire[0:0] modExp_dev_while_and_6_nl;
  wire[0:0] modExp_dev_while_and_7_nl;
  wire[63:0] COMP_LOOP_1_acc_8_nl;
  wire[64:0] nl_COMP_LOOP_1_acc_8_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] mux_224_nl;
  wire[0:0] mux_223_nl;
  wire[0:0] or_242_nl;
  wire[0:0] or_240_nl;
  wire[0:0] or_221_nl;
  wire[0:0] mux_212_nl;
  wire[0:0] mux_211_nl;
  wire[0:0] nand_19_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] mux_209_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] or_220_nl;
  wire[0:0] or_218_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] nand_30_nl;
  wire[0:0] or_217_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] or_214_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] nor_120_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] mux_217_nl;
  wire[0:0] or_233_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] or_231_nl;
  wire[0:0] or_230_nl;
  wire[0:0] or_229_nl;
  wire[0:0] nor_122_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] nand_50_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] nor_110_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] or_353_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] nand_51_nl;
  wire[0:0] or_354_nl;
  wire[0:0] or_355_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_317_nl;
  wire[0:0] mux_316_nl;
  wire[0:0] nand_74_nl;
  wire[0:0] mux_315_nl;
  wire[0:0] mux_312_nl;
  wire[0:0] mux_311_nl;
  wire[0:0] or_450_nl;
  wire[0:0] or_452_nl;
  wire[0:0] mux_310_nl;
  wire[0:0] mux_309_nl;
  wire[0:0] or_453_nl;
  wire[0:0] or_455_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] mux_328_nl;
  wire[0:0] mux_327_nl;
  wire[0:0] nand_68_nl;
  wire[0:0] mux_326_nl;
  wire[0:0] mux_325_nl;
  wire[0:0] nor_188_nl;
  wire[0:0] mux_323_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] nand_73_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] or_449_nl;
  wire[0:0] or_405_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] mux_318_nl;
  wire[0:0] nand_62_nl;
  wire[0:0] mux_193_nl;
  wire[0:0] nor_137_nl;
  wire[0:0] nor_138_nl;
  wire[0:0] mux_331_nl;
  wire[0:0] mux_330_nl;
  wire[0:0] or_446_nl;
  wire[0:0] mux_329_nl;
  wire[0:0] or_414_nl;
  wire[0:0] or_412_nl;
  wire[0:0] or_447_nl;
  wire[0:0] or_448_nl;
  wire[0:0] mux_197_nl;
  wire[0:0] nor_68_nl;
  wire[0:0] mux_200_nl;
  wire[9:0] COMP_LOOP_1_acc_nl;
  wire[10:0] nl_COMP_LOOP_1_acc_nl;
  wire[0:0] mux_231_nl;
  wire[0:0] nand_56_nl;
  wire[0:0] mux_233_nl;
  wire[0:0] mux_232_nl;
  wire[0:0] or_255_nl;
  wire[0:0] nor_nl;
  wire[0:0] and_nl;
  wire[0:0] COMP_LOOP_or_5_nl;
  wire[0:0] COMP_LOOP_or_6_nl;
  wire[0:0] COMP_LOOP_or_7_nl;
  wire[0:0] COMP_LOOP_or_8_nl;
  wire[1:0] COMP_LOOP_and_4_nl;
  wire[1:0] COMP_LOOP_mux1h_13_nl;
  wire[0:0] mux_257_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] mux_254_nl;
  wire[0:0] or_305_nl;
  wire[0:0] mux_253_nl;
  wire[0:0] or_304_nl;
  wire[0:0] mux_252_nl;
  wire[0:0] mux_251_nl;
  wire[0:0] or_303_nl;
  wire[0:0] or_301_nl;
  wire[0:0] mux_250_nl;
  wire[0:0] or_298_nl;
  wire[0:0] or_297_nl;
  wire[0:0] mux_249_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] mux_271_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] mux_267_nl;
  wire[0:0] mux_266_nl;
  wire[0:0] nand_20_nl;
  wire[0:0] mux_265_nl;
  wire[0:0] mux_264_nl;
  wire[0:0] mux_263_nl;
  wire[0:0] mux_262_nl;
  wire[0:0] or_308_nl;
  wire[0:0] nand_61_nl;
  wire[0:0] and_102_nl;
  wire[0:0] or_456_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] or_290_nl;
  wire[0:0] or_342_nl;
  wire[0:0] or_287_nl;
  wire[0:0] mux_337_nl;
  wire[0:0] mux_336_nl;
  wire[0:0] nand_72_nl;
  wire[0:0] or_443_nl;
  wire[0:0] mux_335_nl;
  wire[0:0] or_444_nl;
  wire[0:0] mux_334_nl;
  wire[0:0] or_419_nl;
  wire[0:0] mux_333_nl;
  wire[0:0] mux_332_nl;
  wire[0:0] nor_185_nl;
  wire[0:0] or_416_nl;
  wire[6:0] COMP_LOOP_k_COMP_LOOP_k_mux_nl;
  wire[0:0] or_459_nl;
  wire[0:0] mux_352_nl;
  wire[0:0] mux_351_nl;
  wire[0:0] mux_350_nl;
  wire[0:0] mux_349_nl;
  wire[0:0] mux_348_nl;
  wire[0:0] mux_347_nl;
  wire[0:0] mux_346_nl;
  wire[0:0] mux_345_nl;
  wire[0:0] mux_344_nl;
  wire[0:0] or_429_nl;
  wire[0:0] mux_343_nl;
  wire[0:0] mux_342_nl;
  wire[0:0] mux_275_nl;
  wire[0:0] mux_340_nl;
  wire[0:0] mux_359_nl;
  wire[0:0] mux_358_nl;
  wire[0:0] mux_357_nl;
  wire[0:0] nand_70_nl;
  wire[0:0] mux_356_nl;
  wire[0:0] or_441_nl;
  wire[0:0] mux_355_nl;
  wire[0:0] mux_354_nl;
  wire[0:0] or_439_nl;
  wire[0:0] or_438_nl;
  wire[0:0] or_436_nl;
  wire[0:0] mux_353_nl;
  wire[0:0] or_435_nl;
  wire[0:0] or_432_nl;
  wire[0:0] nand_46_nl;
  wire[0:0] or_12_nl;
  wire[0:0] or_37_nl;
  wire[0:0] or_338_nl;
  wire[0:0] nand_44_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] or_166_nl;
  wire[0:0] or_164_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] or_162_nl;
  wire[0:0] nand_34_nl;
  wire[0:0] or_202_nl;
  wire[0:0] or_200_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] mux_214_nl;
  wire[0:0] or_228_nl;
  wire[0:0] or_226_nl;
  wire[0:0] mux_213_nl;
  wire[0:0] nand_49_nl;
  wire[0:0] mux_229_nl;
  wire[0:0] or_254_nl;
  wire[0:0] or_307_nl;
  wire[0:0] mux_238_nl;
  wire[0:0] or_350_nl;
  wire[0:0] mux_237_nl;
  wire[0:0] or_268_nl;
  wire[0:0] or_266_nl;
  wire[0:0] or_351_nl;
  wire[0:0] mux_240_nl;
  wire[0:0] or_348_nl;
  wire[0:0] mux_239_nl;
  wire[0:0] or_274_nl;
  wire[0:0] or_272_nl;
  wire[0:0] or_349_nl;
  wire[0:0] mux_242_nl;
  wire[0:0] or_346_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] or_280_nl;
  wire[0:0] or_278_nl;
  wire[0:0] or_347_nl;
  wire[0:0] mux_244_nl;
  wire[0:0] or_344_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] or_285_nl;
  wire[0:0] nand_23_nl;
  wire[0:0] or_345_nl;
  wire[0:0] COMP_LOOP_or_11_nl;
  wire[0:0] and_30_nl;
  wire[0:0] and_35_nl;
  wire[0:0] and_40_nl;
  wire[0:0] and_43_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] nor_101_nl;
  wire[0:0] nor_102_nl;
  wire[0:0] and_44_nl;
  wire[0:0] and_49_nl;
  wire[0:0] and_51_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] or_65_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] or_63_nl;
  wire[0:0] or_61_nl;
  wire[0:0] or_59_nl;
  wire[0:0] and_133_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] or_58_nl;
  wire[0:0] or_54_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] nand_55_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] nor_92_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] or_79_nl;
  wire[0:0] or_78_nl;
  wire[0:0] and_132_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] nor_94_nl;
  wire[0:0] or_359_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] nand_1_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] nor_97_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] or_69_nl;
  wire[0:0] or_67_nl;
  wire[0:0] nor_91_nl;
  wire[0:0] mux_94_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] or_92_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] or_90_nl;
  wire[0:0] or_88_nl;
  wire[0:0] or_86_nl;
  wire[0:0] and_130_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] or_85_nl;
  wire[0:0] or_81_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] nand_54_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] or_104_nl;
  wire[0:0] or_103_nl;
  wire[0:0] and_129_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] or_358_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] nand_5_nl;
  wire[0:0] mux_97_nl;
  wire[0:0] nor_90_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] or_96_nl;
  wire[0:0] or_94_nl;
  wire[0:0] nor_84_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] or_117_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] or_115_nl;
  wire[0:0] or_113_nl;
  wire[0:0] or_111_nl;
  wire[0:0] and_127_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] mux_103_nl;
  wire[0:0] or_110_nl;
  wire[0:0] or_106_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] nand_53_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] nor_78_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] or_131_nl;
  wire[0:0] or_130_nl;
  wire[0:0] and_126_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] or_357_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] or_121_nl;
  wire[0:0] or_119_nl;
  wire[0:0] nor_77_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] or_144_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] or_142_nl;
  wire[0:0] or_140_nl;
  wire[0:0] or_138_nl;
  wire[0:0] and_124_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] nand_47_nl;
  wire[0:0] or_133_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] nand_52_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] nor_75_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] or_154_nl;
  wire[0:0] or_153_nl;
  wire[0:0] and_119_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] and_121_nl;
  wire[0:0] or_356_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] nand_13_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] and_123_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] or_148_nl;
  wire[0:0] or_146_nl;
  wire[0:0] mux_297_nl;
  wire[0:0] or_391_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] or_392_nl;
  wire[0:0] or_393_nl;
  wire[0:0] mux_nl;
  wire[0:0] or_361_nl;
  wire[0:0] mux_300_nl;
  wire[0:0] or_387_nl;
  wire[0:0] mux_299_nl;
  wire[0:0] mux_298_nl;
  wire[0:0] or_388_nl;
  wire[0:0] or_389_nl;
  wire[0:0] or_390_nl;
  wire[0:0] mux_301_nl;
  wire[0:0] nor_148_nl;
  wire[0:0] nor_149_nl;
  wire[0:0] mux_303_nl;
  wire[0:0] mux_302_nl;
  wire[0:0] or_385_nl;
  wire[0:0] mux_306_nl;
  wire[0:0] mux_305_nl;
  wire[0:0] or_nl;
  wire[10:0] acc_nl;
  wire[11:0] nl_acc_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_or_2_nl;
  wire[8:0] COMP_LOOP_COMP_LOOP_mux_2_nl;
  wire[0:0] COMP_LOOP_or_17_nl;
  wire[0:0] COMP_LOOP_or_18_nl;
  wire[1:0] COMP_LOOP_COMP_LOOP_mux_3_nl;
  wire[8:0] acc_1_nl;
  wire[9:0] nl_acc_1_nl;
  wire[7:0] COMP_LOOP_mux_20_nl;
  wire[0:0] COMP_LOOP_COMP_LOOP_nand_1_nl;
  wire[63:0] operator_64_false_1_mux1h_4_nl;
  wire[0:0] and_263_nl;
  wire[0:0] and_264_nl;
  wire[0:0] and_265_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_2_nl;
  wire[64:0] operator_64_false_1_acc_nl;
  wire[65:0] nl_operator_64_false_1_acc_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_3_nl;
  wire[63:0] operator_64_false_1_mux1h_5_nl;
  wire[0:0] operator_64_false_1_or_3_nl;
  wire[10:0] acc_4_nl;
  wire[12:0] nl_acc_4_nl;
  wire[1:0] COMP_LOOP_COMP_LOOP_or_3_nl;
  wire[1:0] COMP_LOOP_COMP_LOOP_nor_1_nl;
  wire[1:0] COMP_LOOP_mux_21_nl;
  wire[0:0] and_266_nl;
  wire[0:0] and_267_nl;
  wire[0:0] and_268_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[63:0] COMP_LOOP_1_acc_5_nl;
  wire[64:0] nl_COMP_LOOP_1_acc_5_nl;
  wire [63:0] nl_modulo_dev_cmp_base_rsc_dat;
  assign nl_COMP_LOOP_1_acc_5_nl = tmp_2_lpi_4_dfm + modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_1_acc_5_nl = nl_COMP_LOOP_1_acc_5_nl[63:0];
  assign nl_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(operator_64_false_acc_mut_63_0,
      COMP_LOOP_1_acc_5_nl, and_dcpl_59);
  wire [63:0] nl_modulo_dev_cmp_m_rsc_dat;
  assign nl_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] nand_33_nl;
  wire[0:0] or_177_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] or_176_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] or_175_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] or_172_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] or_171_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] or_169_nl;
  wire[0:0] or_168_nl;
  wire [0:0] nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign nand_33_nl = ~((fsm_output[4]) & (fsm_output[7]) & (fsm_output[1]) & (~
      (fsm_output[5])));
  assign or_176_nl = (~ (fsm_output[7])) | (~ (fsm_output[1])) | (fsm_output[5]);
  assign mux_165_nl = MUX_s_1_2_2(or_176_nl, mux_tmp_145, fsm_output[0]);
  assign or_177_nl = (fsm_output[4]) | mux_165_nl;
  assign mux_166_nl = MUX_s_1_2_2(nand_33_nl, or_177_nl, fsm_output[6]);
  assign or_175_nl = (~ (fsm_output[1])) | (fsm_output[5]);
  assign mux_161_nl = MUX_s_1_2_2(or_175_nl, or_tmp_160, fsm_output[7]);
  assign mux_162_nl = MUX_s_1_2_2(mux_161_nl, mux_tmp_145, fsm_output[0]);
  assign or_172_nl = (fsm_output[7]) | mux_tmp_142;
  assign mux_159_nl = MUX_s_1_2_2(or_tmp_160, or_172_nl, fsm_output[0]);
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, mux_159_nl, fsm_output[4]);
  assign or_171_nl = (fsm_output[0]) | (fsm_output[7]) | mux_tmp_142;
  assign or_169_nl = (fsm_output[7]) | (~ (fsm_output[1])) | (fsm_output[5]);
  assign or_168_nl = (fsm_output[7]) | (fsm_output[1]) | (~ (fsm_output[5]));
  assign mux_156_nl = MUX_s_1_2_2(or_169_nl, or_168_nl, fsm_output[0]);
  assign mux_158_nl = MUX_s_1_2_2(or_171_nl, mux_156_nl, fsm_output[4]);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, mux_158_nl, fsm_output[6]);
  assign mux_167_nl = MUX_s_1_2_2(mux_166_nl, mux_164_nl, fsm_output[2]);
  assign nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat = ~(mux_167_nl | (fsm_output[3]));
  wire [10:0] nl_operator_66_true_div_cmp_b;
  assign nl_operator_66_true_div_cmp_b = {1'b0, operator_66_true_div_cmp_b_9_0};
  wire [0:0] nl_inPlaceNTT_DIT_core_wait_dp_inst_ensig_cgo_iro;
  assign nl_inPlaceNTT_DIT_core_wait_dp_inst_ensig_cgo_iro = ~ mux_152_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0 = ~ (z_out_4_64_2[62]);
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0 = ~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_64_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_64_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_96_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_96_tr0 = ~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0 = VEC_LOOP_acc_1_psp_1[10];
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0 = ~ (z_out_4_64_2[0]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_3_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_3_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_2_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_2_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_3_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  modulo_dev_cmp (
      .base_rsc_dat(nl_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_div #(.width_a(32'sd65),
  .width_b(32'sd11),
  .signd(32'sd1)) operator_66_true_div_cmp (
      .a(operator_66_true_div_cmp_a),
      .b(nl_operator_66_true_div_cmp_b[10:0]),
      .z(operator_66_true_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_LOOP_lshift_rg (
      .a(1'b1),
      .s(STAGE_LOOP_i_3_0_sva),
      .z(STAGE_LOOP_lshift_psp_sva_mx0w0)
    );
  inPlaceNTT_DIT_core_wait_dp inPlaceNTT_DIT_core_wait_dp_inst (
      .ensig_cgo_iro(nl_inPlaceNTT_DIT_core_wait_dp_inst_ensig_cgo_iro[0:0]),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_dev_cmp_ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIT_core_core_fsm inPlaceNTT_DIT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_LOOP_C_3_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_1_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_32_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_64_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_64_tr0[0:0]),
      .COMP_LOOP_3_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_96_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_96_tr0[0:0]),
      .COMP_LOOP_4_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_128_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0[0:0]),
      .STAGE_LOOP_C_4_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0[0:0])
    );
  assign nor_14_cse = ~((fsm_output[2:1]!=2'b01));
  assign mux_148_nl = MUX_s_1_2_2((~ or_tmp_148), nor_tmp_6, fsm_output[4]);
  assign mux_146_nl = MUX_s_1_2_2(nor_tmp_6, or_tmp_148, fsm_output[0]);
  assign mux_147_nl = MUX_s_1_2_2((fsm_output[7]), mux_146_nl, fsm_output[4]);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, mux_147_nl, fsm_output[5]);
  assign mux_143_nl = MUX_s_1_2_2(nor_tmp_6, or_tmp_147, fsm_output[0]);
  assign mux_144_nl = MUX_s_1_2_2((~ nor_tmp_6), mux_143_nl, fsm_output[4]);
  assign mux_142_nl = MUX_s_1_2_2((fsm_output[7]), or_tmp_148, fsm_output[4]);
  assign mux_145_nl = MUX_s_1_2_2(mux_144_nl, mux_142_nl, fsm_output[5]);
  assign mux_150_nl = MUX_s_1_2_2(mux_149_nl, mux_145_nl, fsm_output[1]);
  assign mux_151_nl = MUX_s_1_2_2(mux_150_nl, nor_tmp_34, fsm_output[3]);
  assign mux_137_nl = MUX_s_1_2_2(nor_tmp_6, (fsm_output[7]), fsm_output[0]);
  assign mux_138_nl = MUX_s_1_2_2((~ mux_137_nl), or_tmp_147, fsm_output[4]);
  assign and_114_nl = ((~ (fsm_output[0])) | (fsm_output[7])) & (fsm_output[6]);
  assign mux_136_nl = MUX_s_1_2_2(mux_tmp_117, and_114_nl, fsm_output[4]);
  assign mux_139_nl = MUX_s_1_2_2(mux_138_nl, mux_136_nl, fsm_output[5]);
  assign mux_134_nl = MUX_s_1_2_2(mux_tmp_117, nor_tmp_6, fsm_output[0]);
  assign and_63_nl = (fsm_output[4]) & mux_134_nl;
  assign or_158_nl = (fsm_output[4]) | (fsm_output[0]);
  assign mux_133_nl = MUX_s_1_2_2(mux_tmp_117, nor_tmp_6, or_158_nl);
  assign mux_135_nl = MUX_s_1_2_2(and_63_nl, mux_133_nl, fsm_output[5]);
  assign mux_140_nl = MUX_s_1_2_2(mux_139_nl, mux_135_nl, fsm_output[1]);
  assign and_115_nl = ((fsm_output[5]) | (fsm_output[4]) | (fsm_output[0])) & (fsm_output[7:6]==2'b11);
  assign mux_131_nl = MUX_s_1_2_2(nor_tmp_34, and_115_nl, fsm_output[1]);
  assign mux_141_nl = MUX_s_1_2_2(mux_140_nl, mux_131_nl, fsm_output[3]);
  assign mux_152_itm = MUX_s_1_2_2(mux_151_nl, mux_141_nl, fsm_output[2]);
  assign or_215_cse = (fsm_output[5]) | (fsm_output[7]);
  assign or_333_cse = (fsm_output[5:4]!=2'b10);
  assign or_180_cse = (~((fsm_output[5:4]!=2'b01))) | (fsm_output[6]);
  assign mux_175_cse = MUX_s_1_2_2((fsm_output[6]), or_tmp_173, fsm_output[5]);
  assign mux_173_cse = MUX_s_1_2_2(or_310_cse, or_183_cse, fsm_output[5]);
  assign nand_32_cse = ~(or_451_cse & (fsm_output[6]));
  assign and_71_cse = (fsm_output[5]) & or_183_cse;
  assign mux_170_cse = MUX_s_1_2_2(or_tmp_173, or_310_cse, fsm_output[5]);
  assign modExp_dev_while_or_2_nl = and_dcpl_105 | and_dcpl_106;
  assign modExp_dev_while_modExp_dev_while_mux_2_nl = MUX_v_64_2_2(modExp_dev_result_sva,
      operator_64_false_acc_mut_63_0, modExp_dev_while_or_2_nl);
  assign and_262_nl = (fsm_output[4:3]==2'b00) & and_dcpl_5 & (fsm_output[0]) & (~
      (fsm_output[7])) & (~ (fsm_output[6])) & (fsm_output[2]);
  assign modExp_dev_while_and_4_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]==2'b00)
      & and_dcpl_106;
  assign modExp_dev_while_and_5_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]==2'b01)
      & and_dcpl_106;
  assign modExp_dev_while_and_6_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]==2'b10)
      & and_dcpl_106;
  assign modExp_dev_while_and_7_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]==2'b11)
      & and_dcpl_106;
  assign modExp_dev_while_mux1h_4_nl = MUX1HOT_v_64_6_2(r_sva, modExp_dev_result_sva,
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d, vec_rsc_0_3_i_q_d,
      {and_262_nl , and_dcpl_105 , modExp_dev_while_and_4_nl , modExp_dev_while_and_5_nl
      , modExp_dev_while_and_6_nl , modExp_dev_while_and_7_nl});
  assign nl_mul_nl = modExp_dev_while_modExp_dev_while_mux_2_nl * modExp_dev_while_mux1h_4_nl;
  assign mul_nl = nl_mul_nl[63:0];
  assign nl_COMP_LOOP_1_acc_8_nl = tmp_2_lpi_4_dfm - modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_1_acc_8_nl = nl_COMP_LOOP_1_acc_8_nl[63:0];
  assign or_242_nl = (fsm_output[0]) | (fsm_output[4]) | (~((fsm_output[5]) & (fsm_output[1])
      & (fsm_output[2])));
  assign mux_223_nl = MUX_s_1_2_2(or_242_nl, mux_15_cse, fsm_output[7]);
  assign or_240_nl = (fsm_output[7]) | (~ (fsm_output[0])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[2]));
  assign mux_224_nl = MUX_s_1_2_2(mux_223_nl, or_240_nl, fsm_output[6]);
  assign modExp_dev_while_or_nl = and_dcpl_75 | and_dcpl_79 | (~(mux_224_nl | (fsm_output[3])));
  assign mux_209_nl = MUX_s_1_2_2(or_tmp_197, (fsm_output[7]), fsm_output[5]);
  assign mux_210_nl = MUX_s_1_2_2(mux_209_nl, or_tmp_196, fsm_output[6]);
  assign nand_19_nl = ~((fsm_output[2]) & (~ mux_210_nl));
  assign or_220_nl = (fsm_output[6]) | (~(or_333_cse & (fsm_output[7])));
  assign or_218_nl = (fsm_output[6]) | mux_tmp_186;
  assign mux_208_nl = MUX_s_1_2_2(or_220_nl, or_218_nl, fsm_output[2]);
  assign mux_211_nl = MUX_s_1_2_2(nand_19_nl, mux_208_nl, fsm_output[1]);
  assign nand_30_nl = ~((fsm_output[5]) & (fsm_output[4]) & (fsm_output[7]));
  assign or_217_nl = (fsm_output[5]) | (fsm_output[4]) | (~ (fsm_output[7]));
  assign mux_205_nl = MUX_s_1_2_2(nand_30_nl, or_217_nl, fsm_output[6]);
  assign mux_204_nl = MUX_s_1_2_2(or_tmp_195, or_215_cse, fsm_output[6]);
  assign mux_206_nl = MUX_s_1_2_2(mux_205_nl, mux_204_nl, fsm_output[2]);
  assign mux_202_nl = MUX_s_1_2_2(or_tmp_197, (~ (fsm_output[7])), fsm_output[5]);
  assign mux_203_nl = MUX_s_1_2_2(mux_202_nl, mux_tmp_186, fsm_output[6]);
  assign or_214_nl = (fsm_output[2]) | mux_203_nl;
  assign mux_207_nl = MUX_s_1_2_2(mux_206_nl, or_214_nl, fsm_output[1]);
  assign mux_212_nl = MUX_s_1_2_2(mux_211_nl, mux_207_nl, fsm_output[0]);
  assign or_221_nl = mux_212_nl | (fsm_output[3]);
  assign or_233_nl = (fsm_output[0]) | (fsm_output[4]) | (~ (fsm_output[5])) | (fsm_output[1])
      | (~ (fsm_output[2]));
  assign or_231_nl = (fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[1])) | (fsm_output[2]);
  assign or_230_nl = (~ (fsm_output[4])) | (~ (fsm_output[5])) | (fsm_output[1])
      | (fsm_output[2]);
  assign mux_216_nl = MUX_s_1_2_2(or_231_nl, or_230_nl, fsm_output[0]);
  assign mux_217_nl = MUX_s_1_2_2(or_233_nl, mux_216_nl, fsm_output[7]);
  assign or_229_nl = (fsm_output[7]) | (~ (fsm_output[0])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (~ (fsm_output[1])) | (fsm_output[2]);
  assign mux_218_nl = MUX_s_1_2_2(mux_217_nl, or_229_nl, fsm_output[6]);
  assign nor_120_nl = ~(mux_218_nl | (fsm_output[3]));
  assign modExp_dev_while_mux1h_nl = MUX1HOT_v_64_4_2(mul_nl, 64'b0000000000000000000000000000000000000000000000000000000000000001,
      modulo_dev_cmp_return_rsc_z, COMP_LOOP_1_acc_8_nl, {modExp_dev_while_or_nl
      , or_221_nl , nor_120_nl , and_dcpl_59});
  assign nor_110_nl = ~((fsm_output[6:4]!=3'b000));
  assign mux_176_nl = MUX_s_1_2_2(mux_175_cse, nor_110_nl, fsm_output[7]);
  assign nand_50_nl = ~((fsm_output[2]) & mux_176_nl);
  assign or_353_nl = (fsm_output[7]) | mux_173_cse;
  assign mux_174_nl = MUX_s_1_2_2(or_tmp_147, or_353_nl, fsm_output[2]);
  assign mux_177_nl = MUX_s_1_2_2(nand_50_nl, mux_174_nl, fsm_output[1]);
  assign nand_51_nl = ~((fsm_output[7]) & (~ mux_170_cse));
  assign or_354_nl = (fsm_output[7]) | and_71_cse;
  assign mux_171_nl = MUX_s_1_2_2(nand_51_nl, or_354_nl, fsm_output[2]);
  assign mux_169_nl = MUX_s_1_2_2(nand_32_cse, or_180_cse, fsm_output[7]);
  assign or_355_nl = (fsm_output[2]) | mux_169_nl;
  assign mux_172_nl = MUX_s_1_2_2(mux_171_nl, or_355_nl, fsm_output[1]);
  assign mux_178_nl = MUX_s_1_2_2(mux_177_nl, mux_172_nl, fsm_output[0]);
  assign nor_122_nl = ~(mux_178_nl | (fsm_output[3]));
  assign operator_64_false_operator_64_false_mux_rgt = MUX_v_65_2_2(z_out_3, ({1'b0
      , modExp_dev_while_mux1h_nl}), nor_122_nl);
  assign or_451_cse = (fsm_output[5:4]!=2'b00);
  assign or_454_cse = (fsm_output[1]) | (fsm_output[5]) | (fsm_output[4]) | (fsm_output[6]);
  assign or_407_cse = (fsm_output[1]) | (fsm_output[5]);
  assign or_17_cse = (fsm_output[3:2]!=2'b00);
  assign and_81_rgt = and_dcpl_13 & and_dcpl_72;
  assign reg_COMP_LOOP_COMP_LOOP_nor_cse = ~((fsm_output!=8'b00010100));
  assign and_110_cse = (fsm_output[0]) & (fsm_output[4]);
  assign or_310_cse = (~ (fsm_output[4])) | (fsm_output[6]);
  assign and_259_cse = (fsm_output[1:0]==2'b11);
  assign or_331_cse = (fsm_output[1:0]!=2'b00);
  assign COMP_LOOP_k_COMP_LOOP_k_mux_nl = MUX_v_7_2_2(COMP_LOOP_k_9_2_sva_6_0, (z_out_3[8:2]),
      and_dcpl_79);
  assign or_459_nl = and_dcpl_38 | and_dcpl_34 | COMP_LOOP_or_3_cse;
  assign COMP_LOOP_mux1h_19_rgt = MUX_v_10_2_2(({3'b000 , COMP_LOOP_k_COMP_LOOP_k_mux_nl}),
      z_out_5_10_1, or_459_nl);
  assign nand_71_cse = ~((fsm_output[2:1]==2'b11));
  assign nor_182_cse = ~((fsm_output[0]) | (fsm_output[5]));
  assign COMP_LOOP_or_3_cse = and_dcpl_23 | and_dcpl_28;
  assign nl_VEC_LOOP_acc_1_psp_1 = conv_u2u_10_11(VEC_LOOP_j_sva_9_0) + conv_u2u_10_11(STAGE_LOOP_lshift_psp_sva);
  assign VEC_LOOP_acc_1_psp_1 = nl_VEC_LOOP_acc_1_psp_1[10:0];
  assign or_4_cse = (fsm_output[4]) | (fsm_output[5]) | (fsm_output[1]) | (~ (fsm_output[2]));
  assign nand_46_nl = ~((fsm_output[4]) & (fsm_output[5]) & (fsm_output[1]) & (~
      (fsm_output[2])));
  assign mux_15_cse = MUX_s_1_2_2(or_4_cse, nand_46_nl, fsm_output[0]);
  assign or_12_nl = (fsm_output[5]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_tmp_5 = MUX_s_1_2_2((fsm_output[5]), or_12_nl, fsm_output[4]);
  assign nor_tmp_6 = (fsm_output[7:6]==2'b11);
  assign or_37_nl = (fsm_output[5]) | (fsm_output[1]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_tmp_40 = MUX_s_1_2_2((fsm_output[5]), or_37_nl, fsm_output[4]);
  assign and_tmp_1 = (fsm_output[7]) & mux_tmp_40;
  assign mux_64_cse = MUX_s_1_2_2(mux_tmp_5, mux_tmp_40, fsm_output[0]);
  assign and_dcpl_2 = ~((fsm_output[7:6]!=2'b00));
  assign and_dcpl_3 = ~((fsm_output[4]) | (fsm_output[0]));
  assign and_dcpl_5 = ~((fsm_output[1]) | (fsm_output[5]));
  assign and_dcpl_6 = ~((fsm_output[3:2]!=2'b00));
  assign and_dcpl_7 = and_dcpl_6 & and_dcpl_5;
  assign and_dcpl_10 = (fsm_output[4]) & (~ (fsm_output[0]));
  assign and_dcpl_12 = (fsm_output[1]) & (~ (fsm_output[5]));
  assign and_dcpl_13 = and_dcpl_6 & and_dcpl_12;
  assign or_338_nl = (fsm_output[7]) | (fsm_output[0]) | (fsm_output[4]) | (fsm_output[5])
      | (fsm_output[1]) | (fsm_output[3]) | (fsm_output[2]);
  assign nand_44_nl = ~((fsm_output[7]) & mux_64_cse);
  assign not_tmp_46 = MUX_s_1_2_2(or_338_nl, nand_44_nl, fsm_output[6]);
  assign and_dcpl_16 = (fsm_output[3:2]==2'b01);
  assign and_dcpl_17 = and_dcpl_16 & and_dcpl_5;
  assign and_dcpl_18 = and_dcpl_17 & and_dcpl_10 & and_dcpl_2;
  assign and_dcpl_19 = (~ (fsm_output[4])) & (fsm_output[0]);
  assign and_dcpl_20 = and_dcpl_19 & and_dcpl_2;
  assign and_dcpl_21 = (~ (fsm_output[1])) & (fsm_output[5]);
  assign and_dcpl_23 = and_dcpl_16 & and_dcpl_21 & and_dcpl_20;
  assign and_dcpl_24 = (fsm_output[7:6]==2'b01);
  assign and_dcpl_25 = and_dcpl_19 & and_dcpl_24;
  assign and_dcpl_27 = and_dcpl_10 & and_dcpl_24;
  assign and_dcpl_28 = and_dcpl_17 & and_dcpl_27;
  assign and_dcpl_30 = and_dcpl_6 & (fsm_output[1]) & (fsm_output[5]);
  assign and_dcpl_32 = (fsm_output[7:6]==2'b10);
  assign and_dcpl_33 = and_dcpl_19 & and_dcpl_32;
  assign and_dcpl_34 = and_dcpl_13 & and_dcpl_33;
  assign and_dcpl_35 = and_dcpl_6 & and_dcpl_21;
  assign and_dcpl_38 = and_dcpl_30 & and_dcpl_10 & and_dcpl_32;
  assign nor_tmp_10 = (fsm_output[3:1]==3'b111);
  assign and_dcpl_44 = (fsm_output[3:2]==2'b11) & and_dcpl_12;
  assign or_tmp_43 = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b00) | (~ (fsm_output[1]))
      | (fsm_output[5]) | (~ (fsm_output[6]));
  assign not_tmp_51 = ~((fsm_output[6:5]==2'b11));
  assign or_tmp_70 = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b01) | (~ (fsm_output[1]))
      | (fsm_output[5]) | (~ (fsm_output[6]));
  assign or_tmp_95 = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b10) | (~ (fsm_output[1]))
      | (fsm_output[5]) | (~ (fsm_output[6]));
  assign or_tmp_122 = ~((COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]==2'b11) & (fsm_output[1])
      & (~ (fsm_output[5])) & (fsm_output[6]));
  assign nor_tmp_34 = or_451_cse & (fsm_output[7:6]==2'b11);
  assign mux_tmp_117 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[7]);
  assign or_tmp_147 = (fsm_output[7:6]!=2'b10);
  assign or_tmp_148 = (fsm_output[7:6]!=2'b00);
  assign or_tmp_150 = (~ (fsm_output[0])) | (fsm_output[4]) | (~ (fsm_output[5]))
      | (~ (fsm_output[1])) | (fsm_output[2]);
  assign or_166_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (~ (fsm_output[5]))
      | (fsm_output[1]) | (~ (fsm_output[2]));
  assign or_164_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[5]) | (~
      (fsm_output[1])) | (fsm_output[2]);
  assign mux_154_nl = MUX_s_1_2_2(or_166_nl, or_164_nl, fsm_output[7]);
  assign or_162_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[5]) | (fsm_output[1])
      | (fsm_output[2]);
  assign mux_153_nl = MUX_s_1_2_2(or_tmp_150, or_162_nl, fsm_output[7]);
  assign mux_155_nl = MUX_s_1_2_2(mux_154_nl, mux_153_nl, fsm_output[6]);
  assign and_dcpl_59 = ~(mux_155_nl | (fsm_output[3]));
  assign mux_tmp_142 = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[1]);
  assign or_tmp_160 = (fsm_output[1]) | (~ (fsm_output[5]));
  assign nand_34_nl = ~((fsm_output[1]) & (fsm_output[5]));
  assign mux_tmp_145 = MUX_s_1_2_2(nand_34_nl, or_407_cse, fsm_output[7]);
  assign and_dcpl_63 = ~((~ and_dcpl_13) | (fsm_output[4]) | (fsm_output[7]) | (fsm_output[6]));
  assign or_183_cse = (fsm_output[4]) | (fsm_output[6]);
  assign or_tmp_173 = (fsm_output[4]) | (~ (fsm_output[6]));
  assign or_tmp_177 = (fsm_output[7:6]!=2'b01);
  assign and_dcpl_66 = ~((fsm_output[3]) | (fsm_output[5]));
  assign or_202_nl = (fsm_output[4]) | (fsm_output[1]) | (~ (fsm_output[2]));
  assign or_200_nl = (~ (fsm_output[4])) | (~ (fsm_output[1])) | (fsm_output[2]);
  assign mux_tmp_177 = MUX_s_1_2_2(or_202_nl, or_200_nl, fsm_output[0]);
  assign and_dcpl_72 = and_110_cse & and_dcpl_2;
  assign and_dcpl_75 = and_dcpl_17 & and_dcpl_20;
  assign mux_tmp_184 = MUX_s_1_2_2((fsm_output[3]), or_17_cse, fsm_output[1]);
  assign or_tmp_195 = (fsm_output[4]) | (fsm_output[7]);
  assign or_tmp_196 = (~ (fsm_output[4])) | (fsm_output[7]);
  assign mux_tmp_186 = MUX_s_1_2_2(or_tmp_196, or_tmp_195, fsm_output[5]);
  assign or_tmp_197 = (fsm_output[4]) | (~ (fsm_output[7]));
  assign or_228_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[5]) | nand_71_cse;
  assign mux_214_nl = MUX_s_1_2_2(or_228_nl, or_tmp_150, fsm_output[7]);
  assign nand_49_nl = ~((fsm_output[4]) & (fsm_output[5]) & (~ (fsm_output[1])) &
      (fsm_output[2]));
  assign mux_213_nl = MUX_s_1_2_2(nand_49_nl, or_4_cse, fsm_output[0]);
  assign or_226_nl = (fsm_output[7]) | mux_213_nl;
  assign mux_215_nl = MUX_s_1_2_2(mux_214_nl, or_226_nl, fsm_output[6]);
  assign and_dcpl_79 = ~(mux_215_nl | (fsm_output[3]));
  assign or_254_nl = (fsm_output[5]) | mux_tmp_184;
  assign mux_229_nl = MUX_s_1_2_2((fsm_output[5]), or_254_nl, fsm_output[4]);
  assign mux_tmp_215 = MUX_s_1_2_2(mux_229_nl, mux_tmp_5, fsm_output[0]);
  assign and_dcpl_89 = and_dcpl_30 & and_110_cse & and_dcpl_24;
  assign nor_57_cse = ~((fsm_output[1:0]!=2'b00));
  assign not_tmp_147 = ~((fsm_output[4]) & (fsm_output[6]));
  assign mux_tmp_243 = MUX_s_1_2_2(not_tmp_147, or_183_cse, fsm_output[7]);
  assign mux_tmp_244 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[4]);
  assign or_307_nl = (fsm_output[7]) | mux_tmp_244;
  assign mux_tmp_245 = MUX_s_1_2_2(or_307_nl, mux_tmp_243, fsm_output[5]);
  assign mux_tmp_246 = MUX_s_1_2_2((~ mux_tmp_244), or_183_cse, fsm_output[7]);
  assign mux_tmp_257 = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[5]);
  assign or_tmp_289 = (fsm_output[5:4]!=2'b01);
  assign STAGE_LOOP_i_3_0_sva_mx0c1 = and_dcpl_13 & and_dcpl_10 & nor_tmp_6;
  assign VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_7 & and_110_cse & nor_tmp_6;
  assign or_268_nl = (fsm_output[4]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00) |
      (~ (fsm_output[6]));
  assign or_266_nl = (~ (fsm_output[4])) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[6]);
  assign mux_237_nl = MUX_s_1_2_2(or_268_nl, or_266_nl, fsm_output[0]);
  assign or_350_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[7]) | mux_237_nl;
  assign or_351_nl = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[7]))
      | (fsm_output[0]) | (fsm_output[4]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00)
      | (fsm_output[6]);
  assign mux_238_nl = MUX_s_1_2_2(or_350_nl, or_351_nl, fsm_output[1]);
  assign tmp_2_lpi_4_dfm_mx0c0 = ~(mux_238_nl | (fsm_output[3]));
  assign or_274_nl = (fsm_output[4]) | (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01) |
      (~ (fsm_output[6]));
  assign or_272_nl = (~ (fsm_output[4])) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[6]);
  assign mux_239_nl = MUX_s_1_2_2(or_274_nl, or_272_nl, fsm_output[0]);
  assign or_348_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[7]) | mux_239_nl;
  assign or_349_nl = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[7]))
      | (fsm_output[0]) | (fsm_output[4]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01)
      | (fsm_output[6]);
  assign mux_240_nl = MUX_s_1_2_2(or_348_nl, or_349_nl, fsm_output[1]);
  assign tmp_2_lpi_4_dfm_mx0c1 = ~(mux_240_nl | (fsm_output[3]));
  assign or_280_nl = (fsm_output[4]) | (COMP_LOOP_acc_1_cse_2_sva[0]) | (~((COMP_LOOP_acc_1_cse_2_sva[1])
      & (fsm_output[6])));
  assign or_278_nl = (~ (fsm_output[4])) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[6]);
  assign mux_241_nl = MUX_s_1_2_2(or_280_nl, or_278_nl, fsm_output[0]);
  assign or_346_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[7]) | mux_241_nl;
  assign or_347_nl = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[7]))
      | (fsm_output[0]) | (fsm_output[4]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b10)
      | (fsm_output[6]);
  assign mux_242_nl = MUX_s_1_2_2(or_346_nl, or_347_nl, fsm_output[1]);
  assign tmp_2_lpi_4_dfm_mx0c2 = ~(mux_242_nl | (fsm_output[3]));
  assign or_285_nl = (fsm_output[4]) | (~((COMP_LOOP_acc_1_cse_2_sva[1:0]==2'b11)
      & (fsm_output[6])));
  assign nand_23_nl = ~((fsm_output[4]) & (VEC_LOOP_j_sva_9_0[1:0]==2'b11) & (~ (fsm_output[6])));
  assign mux_243_nl = MUX_s_1_2_2(or_285_nl, nand_23_nl, fsm_output[0]);
  assign or_344_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[7]) | mux_243_nl;
  assign or_345_nl = (fsm_output[2]) | (~ (fsm_output[5])) | (~ (fsm_output[7]))
      | (fsm_output[0]) | (fsm_output[4]) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b11)
      | (fsm_output[6]);
  assign mux_244_nl = MUX_s_1_2_2(or_344_nl, or_345_nl, fsm_output[1]);
  assign tmp_2_lpi_4_dfm_mx0c3 = ~(mux_244_nl | (fsm_output[3]));
  assign vec_rsc_0_0_i_d_d_pff = modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_or_11_nl = and_dcpl_23 | and_dcpl_28 | and_dcpl_34 | and_dcpl_38;
  assign and_30_nl = and_dcpl_13 & and_dcpl_25;
  assign and_35_nl = and_dcpl_30 & and_dcpl_27;
  assign and_40_nl = and_dcpl_35 & and_dcpl_33;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_8_5_2(z_out_2, (z_out_5_10_1[9:2]),
      (COMP_LOOP_acc_1_cse_2_sva[9:2]), (COMP_LOOP_acc_11_psp_sva[8:1]), (COMP_LOOP_acc_1_cse_sva[9:2]),
      {and_dcpl_18 , COMP_LOOP_or_11_nl , and_30_nl , and_35_nl , and_40_nl});
  assign and_43_nl = and_dcpl_7 & and_dcpl_25;
  assign nor_99_nl = ~((~ (fsm_output[7])) | (fsm_output[0]) | (fsm_output[4]) |
      (~ (fsm_output[5])) | (fsm_output[1]) | (fsm_output[3]) | (fsm_output[2]));
  assign nor_100_nl = ~((fsm_output[5:1]!=5'b00001));
  assign nor_101_nl = ~((fsm_output[5:1]!=5'b11000));
  assign mux_72_nl = MUX_s_1_2_2(nor_100_nl, nor_101_nl, fsm_output[0]);
  assign nor_102_nl = ~((~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[5]) |
      (~ nor_tmp_10));
  assign mux_73_nl = MUX_s_1_2_2(mux_72_nl, nor_102_nl, fsm_output[7]);
  assign mux_74_nl = MUX_s_1_2_2(nor_99_nl, mux_73_nl, fsm_output[6]);
  assign and_44_nl = and_dcpl_35 & and_dcpl_27;
  assign and_49_nl = and_dcpl_44 & and_110_cse & and_dcpl_32;
  assign and_51_nl = and_dcpl_44 & and_dcpl_3 & nor_tmp_6;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_8_5_2(COMP_LOOP_acc_psp_sva, ({COMP_LOOP_acc_10_cse_10_1_1_sva_9_7
      , (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[6:2])}), (COMP_LOOP_acc_1_cse_2_sva[9:2]),
      (COMP_LOOP_acc_11_psp_sva[8:1]), (COMP_LOOP_acc_1_cse_sva[9:2]), {and_43_nl
      , mux_74_nl , and_44_nl , and_49_nl , and_51_nl});
  assign or_65_nl = (fsm_output[1]) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[6:5]!=2'b10);
  assign mux_78_nl = MUX_s_1_2_2(or_tmp_43, or_65_nl, fsm_output[0]);
  assign or_63_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00) | (fsm_output[1]) | not_tmp_51;
  assign or_61_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b00) | (fsm_output[1])
      | not_tmp_51;
  assign mux_77_nl = MUX_s_1_2_2(or_63_nl, or_61_nl, fsm_output[0]);
  assign mux_79_nl = MUX_s_1_2_2(mux_78_nl, mux_77_nl, fsm_output[4]);
  assign or_59_nl = (fsm_output[4]) | (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b00)
      | (fsm_output[1]) | (~ (fsm_output[5])) | (fsm_output[6]);
  assign mux_80_nl = MUX_s_1_2_2(mux_79_nl, or_59_nl, fsm_output[7]);
  assign nor_98_nl = ~((fsm_output[3]) | mux_80_nl);
  assign or_58_nl = (~ (fsm_output[1])) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) |
      (fsm_output[6:5]!=2'b10);
  assign mux_75_nl = MUX_s_1_2_2(or_58_nl, or_tmp_43, fsm_output[0]);
  assign or_54_nl = (fsm_output[1:0]!=2'b11) | (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[5])
      | (COMP_LOOP_acc_11_psp_sva[0]) | (fsm_output[6]);
  assign mux_76_nl = MUX_s_1_2_2(mux_75_nl, or_54_nl, fsm_output[4]);
  assign and_133_nl = (fsm_output[3]) & (fsm_output[7]) & (~ mux_76_nl);
  assign vec_rsc_0_0_i_we_d_pff = MUX_s_1_2_2(nor_98_nl, and_133_nl, fsm_output[2]);
  assign nor_93_cse = ~((z_out_5_10_1[1:0]!=2'b00) | (~ (fsm_output[7])));
  assign or_79_nl = (VEC_LOOP_j_sva_9_0[1:0]!=2'b00) | (fsm_output[7]);
  assign or_78_nl = (z_out_5_10_1[1:0]!=2'b00) | (fsm_output[7]);
  assign mux_86_nl = MUX_s_1_2_2(or_79_nl, or_78_nl, fsm_output[6]);
  assign nor_92_nl = ~((fsm_output[2:1]!=2'b10) | mux_86_nl);
  assign nor_94_nl = ~((COMP_LOOP_acc_11_psp_sva[0]) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7]));
  assign mux_85_nl = MUX_s_1_2_2(nor_93_cse, nor_94_nl, fsm_output[6]);
  assign and_132_nl = nor_14_cse & mux_85_nl;
  assign mux_87_nl = MUX_s_1_2_2(nor_92_nl, and_132_nl, fsm_output[5]);
  assign nand_55_nl = ~((fsm_output[4]) & mux_87_nl);
  assign nor_97_nl = ~((COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b00) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (fsm_output[7]));
  assign mux_83_nl = MUX_s_1_2_2(nor_93_cse, nor_97_nl, fsm_output[6]);
  assign nand_1_nl = ~(nor_14_cse & mux_83_nl);
  assign or_69_nl = (fsm_output[1]) | (fsm_output[6]) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm)
      | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b00) | (~ (fsm_output[7]));
  assign or_67_nl = (fsm_output[1]) | (fsm_output[6]) | (z_out_5_10_1[1:0]!=2'b00)
      | (fsm_output[7]);
  assign mux_82_nl = MUX_s_1_2_2(or_69_nl, or_67_nl, fsm_output[2]);
  assign mux_84_nl = MUX_s_1_2_2(nand_1_nl, mux_82_nl, fsm_output[5]);
  assign or_359_nl = (fsm_output[4]) | mux_84_nl;
  assign mux_88_nl = MUX_s_1_2_2(nand_55_nl, or_359_nl, fsm_output[0]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_88_nl | (fsm_output[3]));
  assign or_92_nl = (fsm_output[1]) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[6:5]!=2'b10);
  assign mux_92_nl = MUX_s_1_2_2(or_tmp_70, or_92_nl, fsm_output[0]);
  assign or_90_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01) | (fsm_output[1]) | not_tmp_51;
  assign or_88_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b01) | (fsm_output[1])
      | not_tmp_51;
  assign mux_91_nl = MUX_s_1_2_2(or_90_nl, or_88_nl, fsm_output[0]);
  assign mux_93_nl = MUX_s_1_2_2(mux_92_nl, mux_91_nl, fsm_output[4]);
  assign or_86_nl = (fsm_output[4]) | (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b01)
      | (fsm_output[1]) | (~ (fsm_output[5])) | (fsm_output[6]);
  assign mux_94_nl = MUX_s_1_2_2(mux_93_nl, or_86_nl, fsm_output[7]);
  assign nor_91_nl = ~((fsm_output[3]) | mux_94_nl);
  assign or_85_nl = (~ (fsm_output[1])) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) |
      (fsm_output[6:5]!=2'b10);
  assign mux_89_nl = MUX_s_1_2_2(or_85_nl, or_tmp_70, fsm_output[0]);
  assign or_81_nl = (fsm_output[1:0]!=2'b11) | (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[5])
      | (COMP_LOOP_acc_11_psp_sva[0]) | (fsm_output[6]);
  assign mux_90_nl = MUX_s_1_2_2(mux_89_nl, or_81_nl, fsm_output[4]);
  assign and_130_nl = (fsm_output[3]) & (fsm_output[7]) & (~ mux_90_nl);
  assign vec_rsc_0_1_i_we_d_pff = MUX_s_1_2_2(nor_91_nl, and_130_nl, fsm_output[2]);
  assign nor_86_cse = ~((z_out_5_10_1[1]) | (~((z_out_5_10_1[0]) & (fsm_output[7]))));
  assign or_104_nl = (VEC_LOOP_j_sva_9_0[1:0]!=2'b01) | (fsm_output[7]);
  assign or_103_nl = (z_out_5_10_1[1:0]!=2'b01) | (fsm_output[7]);
  assign mux_100_nl = MUX_s_1_2_2(or_104_nl, or_103_nl, fsm_output[6]);
  assign nor_85_nl = ~((fsm_output[2:1]!=2'b10) | mux_100_nl);
  assign nor_87_nl = ~((COMP_LOOP_acc_11_psp_sva[0]) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[7]));
  assign mux_99_nl = MUX_s_1_2_2(nor_86_cse, nor_87_nl, fsm_output[6]);
  assign and_129_nl = nor_14_cse & mux_99_nl;
  assign mux_101_nl = MUX_s_1_2_2(nor_85_nl, and_129_nl, fsm_output[5]);
  assign nand_54_nl = ~((fsm_output[4]) & mux_101_nl);
  assign nor_90_nl = ~((COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b01) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (fsm_output[7]));
  assign mux_97_nl = MUX_s_1_2_2(nor_86_cse, nor_90_nl, fsm_output[6]);
  assign nand_5_nl = ~(nor_14_cse & mux_97_nl);
  assign or_96_nl = (fsm_output[1]) | (fsm_output[6]) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm)
      | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b01) | (~ (fsm_output[7]));
  assign or_94_nl = (fsm_output[1]) | (fsm_output[6]) | (z_out_5_10_1[1:0]!=2'b01)
      | (fsm_output[7]);
  assign mux_96_nl = MUX_s_1_2_2(or_96_nl, or_94_nl, fsm_output[2]);
  assign mux_98_nl = MUX_s_1_2_2(nand_5_nl, mux_96_nl, fsm_output[5]);
  assign or_358_nl = (fsm_output[4]) | mux_98_nl;
  assign mux_102_nl = MUX_s_1_2_2(nand_54_nl, or_358_nl, fsm_output[0]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_102_nl | (fsm_output[3]));
  assign or_117_nl = (fsm_output[1]) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[6:5]!=2'b10);
  assign mux_106_nl = MUX_s_1_2_2(or_tmp_95, or_117_nl, fsm_output[0]);
  assign or_115_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b10) | (fsm_output[1]) |
      not_tmp_51;
  assign or_113_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b10) | (fsm_output[1])
      | not_tmp_51;
  assign mux_105_nl = MUX_s_1_2_2(or_115_nl, or_113_nl, fsm_output[0]);
  assign mux_107_nl = MUX_s_1_2_2(mux_106_nl, mux_105_nl, fsm_output[4]);
  assign or_111_nl = (fsm_output[4]) | (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b10)
      | (fsm_output[1]) | (~ (fsm_output[5])) | (fsm_output[6]);
  assign mux_108_nl = MUX_s_1_2_2(mux_107_nl, or_111_nl, fsm_output[7]);
  assign nor_84_nl = ~((fsm_output[3]) | mux_108_nl);
  assign or_110_nl = (~ (fsm_output[1])) | (COMP_LOOP_acc_1_cse_sva[1:0]!=2'b10)
      | (fsm_output[6:5]!=2'b10);
  assign mux_103_nl = MUX_s_1_2_2(or_110_nl, or_tmp_95, fsm_output[0]);
  assign or_106_nl = (fsm_output[1:0]!=2'b11) | (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[5])
      | (~ (COMP_LOOP_acc_11_psp_sva[0])) | (fsm_output[6]);
  assign mux_104_nl = MUX_s_1_2_2(mux_103_nl, or_106_nl, fsm_output[4]);
  assign and_127_nl = (fsm_output[3]) & (fsm_output[7]) & (~ mux_104_nl);
  assign vec_rsc_0_2_i_we_d_pff = MUX_s_1_2_2(nor_84_nl, and_127_nl, fsm_output[2]);
  assign nor_79_cse = ~((z_out_5_10_1[1:0]!=2'b10) | (~ (fsm_output[7])));
  assign or_131_nl = (VEC_LOOP_j_sva_9_0[1:0]!=2'b10) | (fsm_output[7]);
  assign or_130_nl = (z_out_5_10_1[1:0]!=2'b10) | (fsm_output[7]);
  assign mux_114_nl = MUX_s_1_2_2(or_131_nl, or_130_nl, fsm_output[6]);
  assign nor_78_nl = ~((fsm_output[2:1]!=2'b10) | mux_114_nl);
  assign nor_80_nl = ~((~ (COMP_LOOP_acc_11_psp_sva[0])) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[7]));
  assign mux_113_nl = MUX_s_1_2_2(nor_79_cse, nor_80_nl, fsm_output[6]);
  assign and_126_nl = nor_14_cse & mux_113_nl;
  assign mux_115_nl = MUX_s_1_2_2(nor_78_nl, and_126_nl, fsm_output[5]);
  assign nand_53_nl = ~((fsm_output[4]) & mux_115_nl);
  assign nor_83_nl = ~((COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b10) | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm)
      | (fsm_output[7]));
  assign mux_111_nl = MUX_s_1_2_2(nor_79_cse, nor_83_nl, fsm_output[6]);
  assign nand_9_nl = ~(nor_14_cse & mux_111_nl);
  assign or_121_nl = (fsm_output[1]) | (fsm_output[6]) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm)
      | (COMP_LOOP_acc_1_cse_sva[0]) | (~((COMP_LOOP_acc_1_cse_sva[1]) & (fsm_output[7])));
  assign or_119_nl = (fsm_output[1]) | (fsm_output[6]) | (z_out_5_10_1[1:0]!=2'b10)
      | (fsm_output[7]);
  assign mux_110_nl = MUX_s_1_2_2(or_121_nl, or_119_nl, fsm_output[2]);
  assign mux_112_nl = MUX_s_1_2_2(nand_9_nl, mux_110_nl, fsm_output[5]);
  assign or_357_nl = (fsm_output[4]) | mux_112_nl;
  assign mux_116_nl = MUX_s_1_2_2(nand_53_nl, or_357_nl, fsm_output[0]);
  assign vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_116_nl | (fsm_output[3]));
  assign or_144_nl = (fsm_output[1]) | (VEC_LOOP_j_sva_9_0[1:0]!=2'b11) | (fsm_output[6:5]!=2'b10);
  assign mux_120_nl = MUX_s_1_2_2(or_tmp_122, or_144_nl, fsm_output[0]);
  assign or_142_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]!=2'b11) | (fsm_output[1]) |
      not_tmp_51;
  assign or_140_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b11) | (fsm_output[1])
      | not_tmp_51;
  assign mux_119_nl = MUX_s_1_2_2(or_142_nl, or_140_nl, fsm_output[0]);
  assign mux_121_nl = MUX_s_1_2_2(mux_120_nl, mux_119_nl, fsm_output[4]);
  assign or_138_nl = (fsm_output[4]) | (fsm_output[0]) | (COMP_LOOP_acc_10_cse_10_1_1_sva_6_0[1:0]!=2'b11)
      | (fsm_output[1]) | (~ (fsm_output[5])) | (fsm_output[6]);
  assign mux_122_nl = MUX_s_1_2_2(mux_121_nl, or_138_nl, fsm_output[7]);
  assign nor_77_nl = ~((fsm_output[3]) | mux_122_nl);
  assign nand_47_nl = ~((fsm_output[1]) & (COMP_LOOP_acc_1_cse_sva[1:0]==2'b11) &
      (fsm_output[6:5]==2'b10));
  assign mux_117_nl = MUX_s_1_2_2(nand_47_nl, or_tmp_122, fsm_output[0]);
  assign or_133_nl = (fsm_output[1:0]!=2'b11) | (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[5])
      | (~ (COMP_LOOP_acc_11_psp_sva[0])) | (fsm_output[6]);
  assign mux_118_nl = MUX_s_1_2_2(mux_117_nl, or_133_nl, fsm_output[4]);
  assign and_124_nl = (fsm_output[3]) & (fsm_output[7]) & (~ mux_118_nl);
  assign vec_rsc_0_3_i_we_d_pff = MUX_s_1_2_2(nor_77_nl, and_124_nl, fsm_output[2]);
  assign and_120_cse = (z_out_5_10_1[1:0]==2'b11) & (fsm_output[7]);
  assign or_154_nl = (VEC_LOOP_j_sva_9_0[1:0]!=2'b11) | (fsm_output[7]);
  assign or_153_nl = (z_out_5_10_1[1:0]!=2'b11) | (fsm_output[7]);
  assign mux_128_nl = MUX_s_1_2_2(or_154_nl, or_153_nl, fsm_output[6]);
  assign nor_75_nl = ~((fsm_output[2:1]!=2'b10) | mux_128_nl);
  assign and_121_nl = (COMP_LOOP_acc_11_psp_sva[0]) & COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm
      & (VEC_LOOP_j_sva_9_0[0]) & (~ (fsm_output[7]));
  assign mux_127_nl = MUX_s_1_2_2(and_120_cse, and_121_nl, fsm_output[6]);
  assign and_119_nl = nor_14_cse & mux_127_nl;
  assign mux_129_nl = MUX_s_1_2_2(nor_75_nl, and_119_nl, fsm_output[5]);
  assign nand_52_nl = ~((fsm_output[4]) & mux_129_nl);
  assign and_123_nl = (COMP_LOOP_acc_1_cse_2_sva[1:0]==2'b11) & COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm
      & (~ (fsm_output[7]));
  assign mux_125_nl = MUX_s_1_2_2(and_120_cse, and_123_nl, fsm_output[6]);
  assign nand_13_nl = ~(nor_14_cse & mux_125_nl);
  assign or_148_nl = (fsm_output[1]) | (fsm_output[6]) | (~ COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm)
      | (~((COMP_LOOP_acc_1_cse_sva[1:0]==2'b11) & (fsm_output[7])));
  assign or_146_nl = (fsm_output[1]) | (fsm_output[6]) | (z_out_5_10_1[1:0]!=2'b11)
      | (fsm_output[7]);
  assign mux_124_nl = MUX_s_1_2_2(or_148_nl, or_146_nl, fsm_output[2]);
  assign mux_126_nl = MUX_s_1_2_2(nand_13_nl, mux_124_nl, fsm_output[5]);
  assign or_356_nl = (fsm_output[4]) | mux_126_nl;
  assign mux_130_nl = MUX_s_1_2_2(nand_52_nl, or_356_nl, fsm_output[0]);
  assign vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_130_nl | (fsm_output[3]));
  assign or_383_cse = (fsm_output[5]) | (fsm_output[1]) | (fsm_output[4]);
  assign or_391_nl = (fsm_output[6]) | (~ (fsm_output[7])) | (~ (fsm_output[0]))
      | (~ (fsm_output[5])) | (~ (fsm_output[1])) | (fsm_output[4]);
  assign or_392_nl = (fsm_output[7]) | (fsm_output[0]) | (fsm_output[5]) | (~((fsm_output[1])
      & (fsm_output[4])));
  assign or_361_nl = (~ (fsm_output[5])) | (fsm_output[1]) | (~ (fsm_output[4]));
  assign mux_nl = MUX_s_1_2_2(or_361_nl, or_383_cse, fsm_output[0]);
  assign or_393_nl = (fsm_output[7]) | mux_nl;
  assign mux_296_nl = MUX_s_1_2_2(or_392_nl, or_393_nl, fsm_output[6]);
  assign mux_297_nl = MUX_s_1_2_2(or_391_nl, mux_296_nl, fsm_output[2]);
  assign and_dcpl_105 = ~(mux_297_nl | (fsm_output[3]));
  assign or_387_nl = (fsm_output[6]) | (~((fsm_output[7]) & (fsm_output[0]) & (fsm_output[5])
      & (fsm_output[1]) & (fsm_output[4])));
  assign or_388_nl = (fsm_output[0]) | (~ (fsm_output[5])) | (~ (fsm_output[1]))
      | (fsm_output[4]);
  assign or_389_nl = (fsm_output[0]) | (fsm_output[5]) | (fsm_output[1]) | (fsm_output[4]);
  assign mux_298_nl = MUX_s_1_2_2(or_388_nl, or_389_nl, fsm_output[7]);
  assign or_390_nl = (fsm_output[7]) | (~ (fsm_output[0])) | (fsm_output[5]) | (fsm_output[1])
      | (~ (fsm_output[4]));
  assign mux_299_nl = MUX_s_1_2_2(mux_298_nl, or_390_nl, fsm_output[6]);
  assign mux_300_nl = MUX_s_1_2_2(or_387_nl, mux_299_nl, fsm_output[2]);
  assign and_dcpl_106 = ~(mux_300_nl | (fsm_output[3]));
  assign and_dcpl_109 = and_dcpl_16 & (fsm_output[7:6]==2'b00);
  assign and_dcpl_112 = (~ (fsm_output[1])) & (fsm_output[4]) & nor_182_cse;
  assign and_dcpl_117 = (~ (fsm_output[1])) & (~ (fsm_output[4])) & (fsm_output[0])
      & (fsm_output[5]) & and_dcpl_109;
  assign and_dcpl_120 = and_dcpl_112 & and_dcpl_16 & (fsm_output[7:6]==2'b01);
  assign and_dcpl_137 = (fsm_output[3:2]==2'b01) & and_dcpl_2;
  assign and_dcpl_145 = (fsm_output[1]) & (fsm_output[4]);
  assign and_dcpl_151 = ~((fsm_output[1]) | (fsm_output[4]) | (~ (fsm_output[0]))
      | (fsm_output[5]));
  assign and_dcpl_152 = and_dcpl_151 & and_dcpl_6 & and_dcpl_2;
  assign and_dcpl_153 = and_dcpl_151 & and_dcpl_137;
  assign nor_148_nl = ~((~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[1]));
  assign nor_149_nl = ~((fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[1]));
  assign mux_301_nl = MUX_s_1_2_2(nor_148_nl, nor_149_nl, fsm_output[5]);
  assign nand_64_cse = ~((~((fsm_output[7]) | (~ (fsm_output[2])))) & mux_301_nl);
  assign or_385_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (fsm_output[0]) | (~
      and_dcpl_145);
  assign mux_302_nl = MUX_s_1_2_2(or_385_nl, or_tmp_150, fsm_output[7]);
  assign mux_303_nl = MUX_s_1_2_2(mux_302_nl, nand_64_cse, fsm_output[6]);
  assign and_dcpl_154 = ~(mux_303_nl | (fsm_output[3]));
  assign or_nl = (~ (fsm_output[2])) | (fsm_output[5]) | (~ (fsm_output[1])) | (fsm_output[0])
      | (~ (fsm_output[4]));
  assign mux_305_nl = MUX_s_1_2_2(or_nl, or_tmp_150, fsm_output[7]);
  assign mux_306_nl = MUX_s_1_2_2(mux_305_nl, nand_64_cse, fsm_output[6]);
  assign and_dcpl_160 = ~(mux_306_nl | (fsm_output[3]));
  assign and_dcpl_167 = (~ (fsm_output[4])) & (~ (fsm_output[0])) & and_dcpl_5 &
      and_dcpl_137;
  assign and_dcpl_170 = (~ (fsm_output[4])) & (fsm_output[0]) & and_dcpl_5 & and_dcpl_137;
  assign and_dcpl_177 = (fsm_output==8'b11010010);
  assign and_dcpl_193 = ~((fsm_output[3]) | (fsm_output[2]) | (~ (fsm_output[7]))
      | (fsm_output[6]));
  assign nor_tmp_57 = (fsm_output[5:4]==2'b11);
  assign or_tmp_349 = (or_331_cse & (fsm_output[2])) | (fsm_output[3]);
  assign or_tmp_368 = (fsm_output[5]) | (~ (fsm_output[2])) | (fsm_output[1]);
  always @(posedge clk) begin
    if ( (and_dcpl_7 & and_dcpl_3 & and_dcpl_2) | STAGE_LOOP_i_3_0_sva_mx0c1 ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b0001, (z_out_3[3:0]), STAGE_LOOP_i_3_0_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( ~ not_tmp_46 ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( ~ not_tmp_46 ) begin
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_3_obj_ld_cse <= and_dcpl_6 & (fsm_output[1]) & (~ (fsm_output[5]))
          & (fsm_output[4]) & (~ (fsm_output[0])) & (fsm_output[7]) & (fsm_output[6])
          & (~ (z_out_4_64_2[0]));
      reg_ensig_cgo_cse <= ~ mux_152_itm;
    end
  end
  always @(posedge clk) begin
    operator_66_true_div_cmp_a <= MUX_v_65_2_2(z_out_3, ({operator_64_false_acc_mut_64
        , operator_64_false_acc_mut_63_0}), and_dcpl_63);
    operator_66_true_div_cmp_b_9_0 <= MUX_v_10_2_2(STAGE_LOOP_lshift_psp_sva_mx0w0,
        STAGE_LOOP_lshift_psp_sva, and_dcpl_63);
    modExp_dev_exp_1_sva_1_0 <= MUX_v_2_2_2(COMP_LOOP_and_4_nl, 2'b11, and_102_nl);
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_74_nl, and_tmp_1, fsm_output[6]) ) begin
      STAGE_LOOP_lshift_psp_sva <= STAGE_LOOP_lshift_psp_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_317_nl | (fsm_output[3])) ) begin
      operator_64_false_acc_mut_64 <= operator_64_false_operator_64_false_mux_rgt[64];
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_328_nl | (fsm_output[3])) ) begin
      operator_64_false_acc_mut_63_0 <= operator_64_false_operator_64_false_mux_rgt[63:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( ((~ mux_tmp_177) & and_dcpl_66 & and_dcpl_2) | VEC_LOOP_j_sva_9_0_mx0c1
        ) begin
      VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (VEC_LOOP_acc_1_psp_1[9:0]),
          VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_331_nl | (fsm_output[3])) ) begin
      COMP_LOOP_k_9_2_sva_6_0 <= MUX_v_7_2_2(7'b0000000, (z_out_3[6:0]), nand_62_nl);
    end
  end
  always @(posedge clk) begin
    if ( mux_197_nl | and_81_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modulo_dev_cmp_return_rsc_z, and_81_rgt);
    end
  end
  always @(posedge clk) begin
    if ( mux_200_nl | (fsm_output[7:5]!=3'b000) ) begin
      modExp_dev_exp_sva <= MUX_v_64_2_2((operator_66_true_div_cmp_z[63:0]), (z_out_3[63:0]),
          and_dcpl_75);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_75 | and_dcpl_79 | and_dcpl_38 ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= MUX_s_1_2_2((~ (z_out_4_64_2[62])),
          (~ (readslicef_10_1_9(COMP_LOOP_1_acc_nl))), and_dcpl_38);
    end
  end
  always @(posedge clk) begin
    if ( reg_COMP_LOOP_COMP_LOOP_nor_cse ) begin
      COMP_LOOP_acc_psp_sva <= z_out_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_2_sva <= 10'b0000000000;
    end
    else if ( ~(mux_231_nl & (~ (fsm_output[7]))) ) begin
      COMP_LOOP_acc_1_cse_2_sva <= z_out_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_11_psp_sva <= 9'b000000000;
    end
    else if ( MUX_s_1_2_2(mux_233_nl, (fsm_output[7]), fsm_output[6]) ) begin
      COMP_LOOP_acc_11_psp_sva <= nl_COMP_LOOP_acc_11_psp_sva[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(nor_nl, and_nl, fsm_output[6]) ) begin
      COMP_LOOP_acc_1_cse_sva <= nl_COMP_LOOP_acc_1_cse_sva[9:0];
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_18 | and_dcpl_34 ) begin
      COMP_LOOP_slc_COMP_LOOP_acc_12_7_itm <= MUX_s_1_2_2((z_out_3[7]), (z_out_2[7]),
          and_dcpl_34);
    end
  end
  always @(posedge clk) begin
    if ( tmp_2_lpi_4_dfm_mx0c0 | tmp_2_lpi_4_dfm_mx0c1 | tmp_2_lpi_4_dfm_mx0c2 |
        tmp_2_lpi_4_dfm_mx0c3 | and_dcpl_89 ) begin
      tmp_2_lpi_4_dfm <= MUX1HOT_v_64_4_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, vec_rsc_0_2_i_q_d,
          vec_rsc_0_3_i_q_d, {COMP_LOOP_or_5_nl , COMP_LOOP_or_6_nl , COMP_LOOP_or_7_nl
          , COMP_LOOP_or_8_nl});
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_337_nl, or_419_nl, fsm_output[7]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), or_456_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_9_7 <= 3'b000;
    end
    else if ( ~ mux_352_nl ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_9_7 <= COMP_LOOP_mux1h_19_rgt[9:7];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_6_0 <= 7'b0000000;
    end
    else if ( ~(mux_359_nl | (fsm_output[3])) ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_6_0 <= COMP_LOOP_mux1h_19_rgt[6:0];
    end
  end
  always @(posedge clk) begin
    if ( COMP_LOOP_or_3_cse ) begin
      COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm <= z_out_1[9];
    end
  end
  assign or_305_nl = and_259_cse | (fsm_output[7:6]!=2'b10);
  assign mux_254_nl = MUX_s_1_2_2(or_305_nl, or_tmp_148, fsm_output[5]);
  assign or_304_nl = (fsm_output[1]) | (~ (fsm_output[7])) | (fsm_output[6]);
  assign mux_253_nl = MUX_s_1_2_2(or_tmp_177, or_304_nl, fsm_output[5]);
  assign mux_255_nl = MUX_s_1_2_2(mux_254_nl, mux_253_nl, fsm_output[4]);
  assign or_303_nl = (~ (fsm_output[1])) | (fsm_output[7]) | (~ (fsm_output[6]));
  assign or_301_nl = (~(nor_57_cse | (fsm_output[7]))) | (fsm_output[6]);
  assign mux_251_nl = MUX_s_1_2_2(or_303_nl, or_301_nl, fsm_output[5]);
  assign or_298_nl = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[7])
      | (fsm_output[6]);
  assign or_297_nl = nor_57_cse | (fsm_output[7:6]!=2'b01);
  assign mux_250_nl = MUX_s_1_2_2(or_298_nl, or_297_nl, fsm_output[5]);
  assign mux_252_nl = MUX_s_1_2_2(mux_251_nl, mux_250_nl, fsm_output[4]);
  assign mux_256_nl = MUX_s_1_2_2(mux_255_nl, mux_252_nl, fsm_output[2]);
  assign mux_248_nl = MUX_s_1_2_2(or_tmp_177, or_tmp_147, fsm_output[5]);
  assign mux_247_nl = MUX_s_1_2_2(or_tmp_148, or_tmp_177, fsm_output[5]);
  assign mux_249_nl = MUX_s_1_2_2(mux_248_nl, mux_247_nl, fsm_output[4]);
  assign mux_257_nl = MUX_s_1_2_2(mux_256_nl, mux_249_nl, fsm_output[3]);
  assign mux_267_nl = MUX_s_1_2_2(or_183_cse, or_310_cse, fsm_output[7]);
  assign mux_268_nl = MUX_s_1_2_2(mux_tmp_243, mux_267_nl, fsm_output[5]);
  assign nand_20_nl = ~((fsm_output[5]) & (~ mux_tmp_246));
  assign mux_266_nl = MUX_s_1_2_2(nand_20_nl, mux_tmp_245, fsm_output[0]);
  assign mux_269_nl = MUX_s_1_2_2(mux_268_nl, mux_266_nl, fsm_output[2]);
  assign mux_263_nl = MUX_s_1_2_2(not_tmp_147, or_183_cse, or_215_cse);
  assign or_308_nl = (fsm_output[7]) | not_tmp_147;
  assign mux_262_nl = MUX_s_1_2_2(or_308_nl, mux_tmp_246, fsm_output[5]);
  assign mux_264_nl = MUX_s_1_2_2(mux_263_nl, mux_262_nl, fsm_output[0]);
  assign mux_265_nl = MUX_s_1_2_2(mux_264_nl, mux_tmp_245, fsm_output[2]);
  assign mux_270_nl = MUX_s_1_2_2(mux_269_nl, mux_265_nl, fsm_output[1]);
  assign mux_271_nl = MUX_s_1_2_2(mux_270_nl, mux_tmp_245, fsm_output[3]);
  assign COMP_LOOP_mux1h_13_nl = MUX1HOT_v_2_4_2((z_out_3[1:0]), modExp_dev_exp_1_sva_1_0,
      2'b01, 2'b10, {and_dcpl_79 , (~ mux_257_nl) , mux_271_nl , and_dcpl_89});
  assign nand_61_nl = ~(and_dcpl_17 & and_dcpl_72);
  assign COMP_LOOP_and_4_nl = MUX_v_2_2_2(2'b00, COMP_LOOP_mux1h_13_nl, nand_61_nl);
  assign and_102_nl = and_dcpl_30 & and_dcpl_3 & and_dcpl_32;
  assign nor_74_nl = ~((fsm_output[7]) | (fsm_output[4]) | (fsm_output[5]) | (fsm_output[1])
      | (fsm_output[3]) | (fsm_output[2]));
  assign mux_315_nl = MUX_s_1_2_2(mux_175_cse, (~ mux_173_cse), fsm_output[1]);
  assign nand_74_nl = ~((fsm_output[2]) & mux_315_nl);
  assign or_450_nl = (fsm_output[6:4]!=3'b000);
  assign mux_311_nl = MUX_s_1_2_2(or_450_nl, nand_32_cse, fsm_output[1]);
  assign or_452_nl = (fsm_output[1]) | and_71_cse;
  assign mux_312_nl = MUX_s_1_2_2(mux_311_nl, or_452_nl, fsm_output[2]);
  assign mux_316_nl = MUX_s_1_2_2(nand_74_nl, mux_312_nl, fsm_output[0]);
  assign or_453_nl = (~ (fsm_output[1])) | (fsm_output[6]);
  assign mux_309_nl = MUX_s_1_2_2(or_453_nl, or_454_cse, fsm_output[2]);
  assign mux_308_nl = MUX_s_1_2_2(mux_170_cse, or_180_cse, fsm_output[1]);
  assign or_455_nl = (fsm_output[2]) | mux_308_nl;
  assign mux_310_nl = MUX_s_1_2_2(mux_309_nl, or_455_nl, fsm_output[0]);
  assign mux_317_nl = MUX_s_1_2_2(mux_316_nl, mux_310_nl, fsm_output[7]);
  assign mux_325_nl = MUX_s_1_2_2((fsm_output[5]), (~ mux_tmp_257), fsm_output[1]);
  assign nor_188_nl = ~((fsm_output[1]) | (~ mux_tmp_257));
  assign mux_326_nl = MUX_s_1_2_2(mux_325_nl, nor_188_nl, fsm_output[6]);
  assign nand_68_nl = ~((fsm_output[2]) & mux_326_nl);
  assign nand_73_nl = ~((fsm_output[1]) & or_451_cse);
  assign mux_322_nl = MUX_s_1_2_2(or_383_cse, nand_73_nl, fsm_output[6]);
  assign mux_323_nl = MUX_s_1_2_2(mux_322_nl, or_407_cse, fsm_output[2]);
  assign mux_327_nl = MUX_s_1_2_2(nand_68_nl, mux_323_nl, fsm_output[0]);
  assign or_449_nl = (fsm_output[6]) | (~ (fsm_output[1])) | nor_tmp_57;
  assign mux_320_nl = MUX_s_1_2_2(or_449_nl, or_454_cse, fsm_output[2]);
  assign mux_318_nl = MUX_s_1_2_2(nor_tmp_57, (fsm_output[5]), fsm_output[1]);
  assign mux_319_nl = MUX_s_1_2_2((~ mux_318_nl), or_383_cse, fsm_output[6]);
  assign or_405_nl = (fsm_output[2]) | mux_319_nl;
  assign mux_321_nl = MUX_s_1_2_2(mux_320_nl, or_405_nl, fsm_output[0]);
  assign mux_328_nl = MUX_s_1_2_2(mux_327_nl, mux_321_nl, fsm_output[7]);
  assign nor_137_nl = ~((fsm_output[7]) | mux_tmp_177);
  assign nor_138_nl = ~((~ (fsm_output[7])) | (~ (fsm_output[0])) | (~ (fsm_output[4]))
      | (fsm_output[1]) | (fsm_output[2]));
  assign mux_193_nl = MUX_s_1_2_2(nor_137_nl, nor_138_nl, fsm_output[6]);
  assign nand_62_nl = ~(mux_193_nl & and_dcpl_66);
  assign or_414_nl = (fsm_output[4]) | (fsm_output[0]) | (~ (fsm_output[2]));
  assign or_412_nl = (~ (fsm_output[4])) | (~ (fsm_output[0])) | (fsm_output[2]);
  assign mux_329_nl = MUX_s_1_2_2(or_414_nl, or_412_nl, fsm_output[1]);
  assign or_446_nl = (fsm_output[7]) | mux_329_nl;
  assign or_447_nl = (~ (fsm_output[7])) | (fsm_output[1]) | (~ (fsm_output[4]))
      | (~ (fsm_output[0])) | (fsm_output[2]);
  assign mux_330_nl = MUX_s_1_2_2(or_446_nl, or_447_nl, fsm_output[6]);
  assign or_448_nl = (fsm_output[6]) | (~ (fsm_output[7])) | (~ (fsm_output[1]))
      | (~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[2]);
  assign mux_331_nl = MUX_s_1_2_2(mux_330_nl, or_448_nl, fsm_output[5]);
  assign nor_68_nl = ~((fsm_output[7]) | mux_64_cse);
  assign mux_197_nl = MUX_s_1_2_2(nor_68_nl, and_tmp_1, fsm_output[6]);
  assign mux_200_nl = MUX_s_1_2_2((~ mux_tmp_184), or_17_cse, fsm_output[4]);
  assign nl_COMP_LOOP_1_acc_nl = ({(z_out_3[7:0]) , 2'b00}) + ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[9:1]))})
      + 10'b0000000001;
  assign COMP_LOOP_1_acc_nl = nl_COMP_LOOP_1_acc_nl[9:0];
  assign nand_56_nl = ~((fsm_output[5:4]==2'b11));
  assign mux_231_nl = MUX_s_1_2_2(mux_tmp_215, nand_56_nl, fsm_output[6]);
  assign nl_COMP_LOOP_acc_11_psp_sva  = (VEC_LOOP_j_sva_9_0[9:1]) + conv_u2u_8_9({COMP_LOOP_k_9_2_sva_6_0
      , 1'b1});
  assign or_255_nl = (fsm_output[5]) | nor_tmp_10;
  assign mux_232_nl = MUX_s_1_2_2((fsm_output[5]), or_255_nl, and_110_cse);
  assign mux_233_nl = MUX_s_1_2_2((~ mux_tmp_215), mux_232_nl, fsm_output[7]);
  assign nl_COMP_LOOP_acc_1_cse_sva  = VEC_LOOP_j_sva_9_0 + conv_u2u_9_10({COMP_LOOP_k_9_2_sva_6_0
      , 2'b11});
  assign nor_nl = ~((fsm_output[7]) | mux_tmp_215);
  assign and_nl = (fsm_output[7]) & ((fsm_output[5:4]!=2'b00) | nor_tmp_10);
  assign COMP_LOOP_or_5_nl = tmp_2_lpi_4_dfm_mx0c0 | ((~((VEC_LOOP_j_sva_9_0[0])
      | (COMP_LOOP_acc_11_psp_sva[0]))) & and_dcpl_89);
  assign COMP_LOOP_or_6_nl = tmp_2_lpi_4_dfm_mx0c1 | ((VEC_LOOP_j_sva_9_0[0]) & (~
      (COMP_LOOP_acc_11_psp_sva[0])) & and_dcpl_89);
  assign COMP_LOOP_or_7_nl = tmp_2_lpi_4_dfm_mx0c2 | ((COMP_LOOP_acc_11_psp_sva[0])
      & (~ (VEC_LOOP_j_sva_9_0[0])) & and_dcpl_89);
  assign COMP_LOOP_or_8_nl = tmp_2_lpi_4_dfm_mx0c3 | ((VEC_LOOP_j_sva_9_0[0]) & (COMP_LOOP_acc_11_psp_sva[0])
      & and_dcpl_89);
  assign or_290_nl = (~ (fsm_output[0])) | (~ (fsm_output[4])) | (fsm_output[5])
      | (fsm_output[1]) | (~ (fsm_output[2]));
  assign or_342_nl = (fsm_output[0]) | (fsm_output[4]) | (~ (fsm_output[5])) | (~
      (fsm_output[1])) | (fsm_output[2]);
  assign mux_245_nl = MUX_s_1_2_2(or_290_nl, or_342_nl, fsm_output[7]);
  assign or_287_nl = (fsm_output[7]) | mux_15_cse;
  assign mux_246_nl = MUX_s_1_2_2(mux_245_nl, or_287_nl, fsm_output[6]);
  assign or_456_nl = mux_246_nl | (fsm_output[3]);
  assign nand_72_nl = ~((fsm_output[5]) & (~ or_tmp_349));
  assign or_443_nl = (fsm_output[5]) | (~(((fsm_output[2:0]==3'b111)) | (fsm_output[3])));
  assign mux_336_nl = MUX_s_1_2_2(nand_72_nl, or_443_nl, fsm_output[4]);
  assign or_444_nl = (fsm_output[5]) | (~(((fsm_output[2:1]==2'b11)) | (fsm_output[3])));
  assign mux_334_nl = MUX_s_1_2_2(or_17_cse, (~ or_tmp_349), fsm_output[5]);
  assign mux_335_nl = MUX_s_1_2_2(or_444_nl, mux_334_nl, fsm_output[4]);
  assign mux_337_nl = MUX_s_1_2_2(mux_336_nl, mux_335_nl, fsm_output[6]);
  assign nor_185_nl = ~(and_259_cse | (fsm_output[3:2]!=2'b00));
  assign mux_332_nl = MUX_s_1_2_2(nor_185_nl, or_17_cse, fsm_output[5]);
  assign or_416_nl = (~ (fsm_output[5])) | (fsm_output[1]) | (fsm_output[2]) | (fsm_output[3]);
  assign mux_333_nl = MUX_s_1_2_2((~ mux_332_nl), or_416_nl, fsm_output[4]);
  assign or_419_nl = (fsm_output[6]) | mux_333_nl;
  assign mux_347_nl = MUX_s_1_2_2(or_333_cse, mux_tmp_257, fsm_output[0]);
  assign mux_348_nl = MUX_s_1_2_2(mux_347_nl, or_tmp_289, fsm_output[1]);
  assign mux_349_nl = MUX_s_1_2_2(or_333_cse, mux_348_nl, fsm_output[2]);
  assign mux_350_nl = MUX_s_1_2_2(mux_349_nl, or_tmp_289, fsm_output[3]);
  assign mux_344_nl = MUX_s_1_2_2((~ or_tmp_289), (fsm_output[4]), fsm_output[0]);
  assign mux_345_nl = MUX_s_1_2_2((~ mux_tmp_257), mux_344_nl, fsm_output[1]);
  assign mux_346_nl = MUX_s_1_2_2(mux_345_nl, or_333_cse, or_17_cse);
  assign mux_351_nl = MUX_s_1_2_2(mux_350_nl, mux_346_nl, fsm_output[7]);
  assign mux_275_nl = MUX_s_1_2_2((~ or_tmp_289), (fsm_output[4]), and_259_cse);
  assign mux_340_nl = MUX_s_1_2_2(or_333_cse, mux_tmp_257, or_331_cse);
  assign mux_342_nl = MUX_s_1_2_2(mux_275_nl, mux_340_nl, fsm_output[2]);
  assign mux_343_nl = MUX_s_1_2_2(mux_342_nl, mux_tmp_257, fsm_output[3]);
  assign or_429_nl = (fsm_output[7]) | (~ mux_343_nl);
  assign mux_352_nl = MUX_s_1_2_2(mux_351_nl, or_429_nl, fsm_output[6]);
  assign nand_70_nl = ~((fsm_output[0]) & (fsm_output[5]) & (fsm_output[2]) & (~
      (fsm_output[1])));
  assign or_441_nl = (fsm_output[5]) | nand_71_cse;
  assign mux_356_nl = MUX_s_1_2_2(or_441_nl, or_tmp_368, fsm_output[0]);
  assign mux_357_nl = MUX_s_1_2_2(nand_70_nl, mux_356_nl, fsm_output[4]);
  assign or_439_nl = (fsm_output[2:1]!=2'b10);
  assign or_438_nl = (~ (fsm_output[5])) | (fsm_output[2]) | (~ (fsm_output[1]));
  assign mux_354_nl = MUX_s_1_2_2(or_439_nl, or_438_nl, fsm_output[0]);
  assign mux_355_nl = MUX_s_1_2_2(or_tmp_368, mux_354_nl, fsm_output[4]);
  assign mux_358_nl = MUX_s_1_2_2(mux_357_nl, mux_355_nl, fsm_output[6]);
  assign or_435_nl = nor_182_cse | (fsm_output[2:1]!=2'b01);
  assign or_432_nl = (fsm_output[0]) | (~ (fsm_output[5])) | (fsm_output[2]) | (~
      (fsm_output[1]));
  assign mux_353_nl = MUX_s_1_2_2(or_435_nl, or_432_nl, fsm_output[4]);
  assign or_436_nl = (fsm_output[6]) | mux_353_nl;
  assign mux_359_nl = MUX_s_1_2_2(mux_358_nl, or_436_nl, fsm_output[7]);
  assign COMP_LOOP_COMP_LOOP_or_2_nl = (VEC_LOOP_j_sva_9_0[9]) | and_dcpl_117 | and_dcpl_120;
  assign COMP_LOOP_or_17_nl = and_dcpl_117 | and_dcpl_120;
  assign COMP_LOOP_COMP_LOOP_mux_2_nl = MUX_v_9_2_2((VEC_LOOP_j_sva_9_0[8:0]), (~
      (STAGE_LOOP_lshift_psp_sva[9:1])), COMP_LOOP_or_17_nl);
  assign COMP_LOOP_or_18_nl = (~(and_dcpl_112 & and_dcpl_109)) | and_dcpl_117 | and_dcpl_120;
  assign COMP_LOOP_COMP_LOOP_mux_3_nl = MUX_v_2_2_2(2'b01, 2'b10, and_dcpl_120);
  assign nl_acc_nl = ({COMP_LOOP_COMP_LOOP_or_2_nl , COMP_LOOP_COMP_LOOP_mux_2_nl
      , COMP_LOOP_or_18_nl}) + conv_u2u_10_11({COMP_LOOP_k_9_2_sva_6_0 , COMP_LOOP_COMP_LOOP_mux_3_nl
      , 1'b1});
  assign acc_nl = nl_acc_nl[10:0];
  assign z_out_1 = readslicef_11_10_1(acc_nl);
  assign COMP_LOOP_mux_20_nl = MUX_v_8_2_2(({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[9:3]))}),
      (VEC_LOOP_j_sva_9_0[9:2]), reg_COMP_LOOP_COMP_LOOP_nor_cse);
  assign COMP_LOOP_COMP_LOOP_nand_1_nl = ~(reg_COMP_LOOP_COMP_LOOP_nor_cse & (~((~
      (fsm_output[4])) & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[5]))
      & and_dcpl_6 & (fsm_output[7:6]==2'b10))));
  assign nl_acc_1_nl = ({COMP_LOOP_mux_20_nl , COMP_LOOP_COMP_LOOP_nand_1_nl}) +
      conv_u2u_8_9({COMP_LOOP_k_9_2_sva_6_0 , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[8:0];
  assign z_out_2 = readslicef_9_8_1(acc_1_nl);
  assign and_263_nl = (~ (fsm_output[1])) & (fsm_output[4]) & nor_182_cse & and_dcpl_137;
  assign and_264_nl = and_dcpl_145 & nor_182_cse & and_dcpl_6 & (fsm_output[7:6]==2'b11);
  assign and_265_nl = and_dcpl_145 & (~ (fsm_output[0])) & (fsm_output[5]) & and_dcpl_6
      & (fsm_output[7:6]==2'b10);
  assign operator_64_false_1_mux1h_4_nl = MUX1HOT_v_64_6_2(({57'b000000000000000000000000000000000000000000000000000000001
      , (~ COMP_LOOP_k_9_2_sva_6_0)}), ({60'b000000000000000000000000000000000000000000000000000000000000
      , STAGE_LOOP_i_3_0_sva}), p_sva, modExp_dev_exp_sva, ({modExp_dev_exp_1_sva_63_9
      , COMP_LOOP_acc_10_cse_10_1_1_sva_6_0 , modExp_dev_exp_1_sva_1_0}), ({57'b000000000000000000000000000000000000000000000000000000000
      , COMP_LOOP_k_9_2_sva_6_0}), {and_263_nl , and_264_nl , and_dcpl_152 , and_dcpl_153
      , and_dcpl_154 , and_265_nl});
  assign operator_64_false_1_operator_64_false_1_or_2_nl = and_dcpl_152 | and_dcpl_153
      | and_dcpl_154;
  assign nl_z_out_3 = conv_u2u_64_65(operator_64_false_1_mux1h_4_nl) + conv_s2u_2_65({operator_64_false_1_operator_64_false_1_or_2_nl
      , 1'b1});
  assign z_out_3 = nl_z_out_3[64:0];
  assign operator_64_false_1_operator_64_false_1_or_3_nl = (~ and_dcpl_177) | and_dcpl_160
      | and_dcpl_167 | and_dcpl_170;
  assign operator_64_false_1_or_3_nl = and_dcpl_160 | and_dcpl_170;
  assign operator_64_false_1_mux1h_5_nl = MUX1HOT_v_64_3_2((~ (z_out_3[63:0])), (~
      (operator_66_true_div_cmp_z[63:0])), ({61'b0000000000000000000000000000000000000000000000000000000000000
      , (z_out_3[3:1])}), {operator_64_false_1_or_3_nl , and_dcpl_167 , and_dcpl_177});
  assign nl_operator_64_false_1_acc_nl = ({operator_64_false_1_operator_64_false_1_or_3_nl
      , operator_64_false_1_mux1h_5_nl}) + conv_u2u_2_65({and_dcpl_177 , 1'b1});
  assign operator_64_false_1_acc_nl = nl_operator_64_false_1_acc_nl[64:0];
  assign z_out_4_64_2 = readslicef_65_63_2(operator_64_false_1_acc_nl);
  assign and_266_nl = (fsm_output[1]) & (~ (fsm_output[4])) & (fsm_output[0]) & (~
      (fsm_output[5])) & and_dcpl_193;
  assign COMP_LOOP_mux_21_nl = MUX_v_2_2_2(2'b10, 2'b01, and_266_nl);
  assign and_267_nl = (~ (fsm_output[1])) & (~ (fsm_output[4])) & (fsm_output[0])
      & (fsm_output[5]) & and_dcpl_16 & (fsm_output[7:6]==2'b00);
  assign COMP_LOOP_COMP_LOOP_nor_1_nl = ~(MUX_v_2_2_2(COMP_LOOP_mux_21_nl, 2'b11,
      and_267_nl));
  assign and_268_nl = (fsm_output[1]) & (fsm_output[4]) & (~ (fsm_output[0])) & (fsm_output[5])
      & and_dcpl_193;
  assign COMP_LOOP_COMP_LOOP_or_3_nl = MUX_v_2_2_2(COMP_LOOP_COMP_LOOP_nor_1_nl,
      2'b11, and_268_nl);
  assign nl_acc_4_nl = conv_u2u_9_11({COMP_LOOP_k_9_2_sva_6_0 , COMP_LOOP_COMP_LOOP_or_3_nl})
      + conv_u2u_10_11(VEC_LOOP_j_sva_9_0) + conv_u2u_10_11(STAGE_LOOP_lshift_psp_sva);
  assign acc_4_nl = nl_acc_4_nl[10:0];
  assign z_out_5_10_1 = readslicef_11_10_1(acc_4_nl);

  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_6_2;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [5:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    result = result | ( input_4 & {64{sel[4]}});
    result = result | ( input_5 & {64{sel[5]}});
    MUX1HOT_v_64_6_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_5_2;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [4:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    MUX1HOT_v_8_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [64:0] MUX_v_65_2_2;
    input [64:0] input_0;
    input [64:0] input_1;
    input [0:0] sel;
    reg [64:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_65_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [62:0] readslicef_65_63_2;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_65_63_2 = tmp[62:0];
  end
  endfunction


  function automatic [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function automatic [64:0] conv_s2u_2_65 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_65 = {{63{vector[1]}}, vector};
  end
  endfunction


  function automatic [64:0] conv_u2u_2_65 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_65 = {{63{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [64:0] conv_u2u_64_65 ;
    input [63:0]  vector ;
  begin
    conv_u2u_64_65 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT
// ------------------------------------------------------------------


module inPlaceNTT_DIT (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, vec_rsc_0_2_wadr, vec_rsc_0_2_d, vec_rsc_0_2_we,
      vec_rsc_0_2_radr, vec_rsc_0_2_q, vec_rsc_triosy_0_2_lz, vec_rsc_0_3_wadr, vec_rsc_0_3_d,
      vec_rsc_0_3_we, vec_rsc_0_3_radr, vec_rsc_0_3_q, vec_rsc_triosy_0_3_lz, p_rsc_dat,
      p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [7:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [7:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [7:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [7:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  output [7:0] vec_rsc_0_2_wadr;
  output [63:0] vec_rsc_0_2_d;
  output vec_rsc_0_2_we;
  output [7:0] vec_rsc_0_2_radr;
  input [63:0] vec_rsc_0_2_q;
  output vec_rsc_triosy_0_2_lz;
  output [7:0] vec_rsc_0_3_wadr;
  output [63:0] vec_rsc_0_3_d;
  output vec_rsc_0_3_we;
  output [7:0] vec_rsc_0_3_radr;
  input [63:0] vec_rsc_0_3_q;
  output vec_rsc_triosy_0_3_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_2_i_q_d;
  wire vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_3_i_q_d;
  wire vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [7:0] vec_rsc_0_0_i_radr_d_iff;
  wire [7:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;
  wire vec_rsc_0_2_i_we_d_iff;
  wire vec_rsc_0_3_i_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_8_64_256_256_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_8_64_256_256_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_10_8_64_256_256_64_1_gen vec_rsc_0_2_i
      (
      .q(vec_rsc_0_2_q),
      .radr(vec_rsc_0_2_radr),
      .we(vec_rsc_0_2_we),
      .d(vec_rsc_0_2_d),
      .wadr(vec_rsc_0_2_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_2_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_2_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_2_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_11_8_64_256_256_64_1_gen vec_rsc_0_3_i
      (
      .q(vec_rsc_0_3_q),
      .radr(vec_rsc_0_3_radr),
      .we(vec_rsc_0_3_we),
      .d(vec_rsc_0_3_d),
      .wadr(vec_rsc_0_3_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_3_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_3_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_3_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_core inPlaceNTT_DIT_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .vec_rsc_triosy_0_2_lz(vec_rsc_triosy_0_2_lz),
      .vec_rsc_triosy_0_3_lz(vec_rsc_triosy_0_3_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_2_i_q_d(vec_rsc_0_2_i_q_d),
      .vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_2_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_3_i_q_d(vec_rsc_0_3_i_q_d),
      .vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_3_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff),
      .vec_rsc_0_2_i_we_d_pff(vec_rsc_0_2_i_we_d_iff),
      .vec_rsc_0_3_i_we_d_pff(vec_rsc_0_3_i_we_d_iff)
    );
endmodule



