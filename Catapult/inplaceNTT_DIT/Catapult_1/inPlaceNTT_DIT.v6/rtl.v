// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   yl7897@newnano.poly.edu
//  Generated date: Wed Aug  4 23:06:08 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen
// ------------------------------------------------------------------


module inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen (
  q, radr, we, d, wadr, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [63:0] q;
  output [8:0] radr;
  output we;
  output [63:0] d;
  output [8:0] wadr;
  input [63:0] d_d;
  output [63:0] q_d;
  input [8:0] radr_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core_core_fsm (
  clk, rst, fsm_output, STAGE_LOOP_C_3_tr0, modExp_dev_while_C_14_tr0, COMP_LOOP_C_1_tr0,
      COMP_LOOP_1_modExp_dev_1_while_C_14_tr0, COMP_LOOP_C_32_tr0, COMP_LOOP_2_modExp_dev_1_while_C_14_tr0,
      COMP_LOOP_C_64_tr0, VEC_LOOP_C_0_tr0, STAGE_LOOP_C_4_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input STAGE_LOOP_C_3_tr0;
  input modExp_dev_while_C_14_tr0;
  input COMP_LOOP_C_1_tr0;
  input COMP_LOOP_1_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_32_tr0;
  input COMP_LOOP_2_modExp_dev_1_while_C_14_tr0;
  input COMP_LOOP_C_64_tr0;
  input VEC_LOOP_C_0_tr0;
  input STAGE_LOOP_C_4_tr0;


  // FSM State Type Declaration for inPlaceNTT_DIT_core_core_fsm_1
  parameter
    main_C_0 = 7'd0,
    STAGE_LOOP_C_0 = 7'd1,
    STAGE_LOOP_C_1 = 7'd2,
    STAGE_LOOP_C_2 = 7'd3,
    STAGE_LOOP_C_3 = 7'd4,
    modExp_dev_while_C_0 = 7'd5,
    modExp_dev_while_C_1 = 7'd6,
    modExp_dev_while_C_2 = 7'd7,
    modExp_dev_while_C_3 = 7'd8,
    modExp_dev_while_C_4 = 7'd9,
    modExp_dev_while_C_5 = 7'd10,
    modExp_dev_while_C_6 = 7'd11,
    modExp_dev_while_C_7 = 7'd12,
    modExp_dev_while_C_8 = 7'd13,
    modExp_dev_while_C_9 = 7'd14,
    modExp_dev_while_C_10 = 7'd15,
    modExp_dev_while_C_11 = 7'd16,
    modExp_dev_while_C_12 = 7'd17,
    modExp_dev_while_C_13 = 7'd18,
    modExp_dev_while_C_14 = 7'd19,
    COMP_LOOP_C_0 = 7'd20,
    COMP_LOOP_C_1 = 7'd21,
    COMP_LOOP_1_modExp_dev_1_while_C_0 = 7'd22,
    COMP_LOOP_1_modExp_dev_1_while_C_1 = 7'd23,
    COMP_LOOP_1_modExp_dev_1_while_C_2 = 7'd24,
    COMP_LOOP_1_modExp_dev_1_while_C_3 = 7'd25,
    COMP_LOOP_1_modExp_dev_1_while_C_4 = 7'd26,
    COMP_LOOP_1_modExp_dev_1_while_C_5 = 7'd27,
    COMP_LOOP_1_modExp_dev_1_while_C_6 = 7'd28,
    COMP_LOOP_1_modExp_dev_1_while_C_7 = 7'd29,
    COMP_LOOP_1_modExp_dev_1_while_C_8 = 7'd30,
    COMP_LOOP_1_modExp_dev_1_while_C_9 = 7'd31,
    COMP_LOOP_1_modExp_dev_1_while_C_10 = 7'd32,
    COMP_LOOP_1_modExp_dev_1_while_C_11 = 7'd33,
    COMP_LOOP_1_modExp_dev_1_while_C_12 = 7'd34,
    COMP_LOOP_1_modExp_dev_1_while_C_13 = 7'd35,
    COMP_LOOP_1_modExp_dev_1_while_C_14 = 7'd36,
    COMP_LOOP_C_2 = 7'd37,
    COMP_LOOP_C_3 = 7'd38,
    COMP_LOOP_C_4 = 7'd39,
    COMP_LOOP_C_5 = 7'd40,
    COMP_LOOP_C_6 = 7'd41,
    COMP_LOOP_C_7 = 7'd42,
    COMP_LOOP_C_8 = 7'd43,
    COMP_LOOP_C_9 = 7'd44,
    COMP_LOOP_C_10 = 7'd45,
    COMP_LOOP_C_11 = 7'd46,
    COMP_LOOP_C_12 = 7'd47,
    COMP_LOOP_C_13 = 7'd48,
    COMP_LOOP_C_14 = 7'd49,
    COMP_LOOP_C_15 = 7'd50,
    COMP_LOOP_C_16 = 7'd51,
    COMP_LOOP_C_17 = 7'd52,
    COMP_LOOP_C_18 = 7'd53,
    COMP_LOOP_C_19 = 7'd54,
    COMP_LOOP_C_20 = 7'd55,
    COMP_LOOP_C_21 = 7'd56,
    COMP_LOOP_C_22 = 7'd57,
    COMP_LOOP_C_23 = 7'd58,
    COMP_LOOP_C_24 = 7'd59,
    COMP_LOOP_C_25 = 7'd60,
    COMP_LOOP_C_26 = 7'd61,
    COMP_LOOP_C_27 = 7'd62,
    COMP_LOOP_C_28 = 7'd63,
    COMP_LOOP_C_29 = 7'd64,
    COMP_LOOP_C_30 = 7'd65,
    COMP_LOOP_C_31 = 7'd66,
    COMP_LOOP_C_32 = 7'd67,
    COMP_LOOP_C_33 = 7'd68,
    COMP_LOOP_2_modExp_dev_1_while_C_0 = 7'd69,
    COMP_LOOP_2_modExp_dev_1_while_C_1 = 7'd70,
    COMP_LOOP_2_modExp_dev_1_while_C_2 = 7'd71,
    COMP_LOOP_2_modExp_dev_1_while_C_3 = 7'd72,
    COMP_LOOP_2_modExp_dev_1_while_C_4 = 7'd73,
    COMP_LOOP_2_modExp_dev_1_while_C_5 = 7'd74,
    COMP_LOOP_2_modExp_dev_1_while_C_6 = 7'd75,
    COMP_LOOP_2_modExp_dev_1_while_C_7 = 7'd76,
    COMP_LOOP_2_modExp_dev_1_while_C_8 = 7'd77,
    COMP_LOOP_2_modExp_dev_1_while_C_9 = 7'd78,
    COMP_LOOP_2_modExp_dev_1_while_C_10 = 7'd79,
    COMP_LOOP_2_modExp_dev_1_while_C_11 = 7'd80,
    COMP_LOOP_2_modExp_dev_1_while_C_12 = 7'd81,
    COMP_LOOP_2_modExp_dev_1_while_C_13 = 7'd82,
    COMP_LOOP_2_modExp_dev_1_while_C_14 = 7'd83,
    COMP_LOOP_C_34 = 7'd84,
    COMP_LOOP_C_35 = 7'd85,
    COMP_LOOP_C_36 = 7'd86,
    COMP_LOOP_C_37 = 7'd87,
    COMP_LOOP_C_38 = 7'd88,
    COMP_LOOP_C_39 = 7'd89,
    COMP_LOOP_C_40 = 7'd90,
    COMP_LOOP_C_41 = 7'd91,
    COMP_LOOP_C_42 = 7'd92,
    COMP_LOOP_C_43 = 7'd93,
    COMP_LOOP_C_44 = 7'd94,
    COMP_LOOP_C_45 = 7'd95,
    COMP_LOOP_C_46 = 7'd96,
    COMP_LOOP_C_47 = 7'd97,
    COMP_LOOP_C_48 = 7'd98,
    COMP_LOOP_C_49 = 7'd99,
    COMP_LOOP_C_50 = 7'd100,
    COMP_LOOP_C_51 = 7'd101,
    COMP_LOOP_C_52 = 7'd102,
    COMP_LOOP_C_53 = 7'd103,
    COMP_LOOP_C_54 = 7'd104,
    COMP_LOOP_C_55 = 7'd105,
    COMP_LOOP_C_56 = 7'd106,
    COMP_LOOP_C_57 = 7'd107,
    COMP_LOOP_C_58 = 7'd108,
    COMP_LOOP_C_59 = 7'd109,
    COMP_LOOP_C_60 = 7'd110,
    COMP_LOOP_C_61 = 7'd111,
    COMP_LOOP_C_62 = 7'd112,
    COMP_LOOP_C_63 = 7'd113,
    COMP_LOOP_C_64 = 7'd114,
    VEC_LOOP_C_0 = 7'd115,
    STAGE_LOOP_C_4 = 7'd116,
    main_C_1 = 7'd117;

  reg [6:0] state_var;
  reg [6:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : inPlaceNTT_DIT_core_core_fsm_1
    case (state_var)
      STAGE_LOOP_C_0 : begin
        fsm_output = 7'b0000001;
        state_var_NS = STAGE_LOOP_C_1;
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 7'b0000010;
        state_var_NS = STAGE_LOOP_C_2;
      end
      STAGE_LOOP_C_2 : begin
        fsm_output = 7'b0000011;
        state_var_NS = STAGE_LOOP_C_3;
      end
      STAGE_LOOP_C_3 : begin
        fsm_output = 7'b0000100;
        if ( STAGE_LOOP_C_3_tr0 ) begin
          state_var_NS = COMP_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      modExp_dev_while_C_0 : begin
        fsm_output = 7'b0000101;
        state_var_NS = modExp_dev_while_C_1;
      end
      modExp_dev_while_C_1 : begin
        fsm_output = 7'b0000110;
        state_var_NS = modExp_dev_while_C_2;
      end
      modExp_dev_while_C_2 : begin
        fsm_output = 7'b0000111;
        state_var_NS = modExp_dev_while_C_3;
      end
      modExp_dev_while_C_3 : begin
        fsm_output = 7'b0001000;
        state_var_NS = modExp_dev_while_C_4;
      end
      modExp_dev_while_C_4 : begin
        fsm_output = 7'b0001001;
        state_var_NS = modExp_dev_while_C_5;
      end
      modExp_dev_while_C_5 : begin
        fsm_output = 7'b0001010;
        state_var_NS = modExp_dev_while_C_6;
      end
      modExp_dev_while_C_6 : begin
        fsm_output = 7'b0001011;
        state_var_NS = modExp_dev_while_C_7;
      end
      modExp_dev_while_C_7 : begin
        fsm_output = 7'b0001100;
        state_var_NS = modExp_dev_while_C_8;
      end
      modExp_dev_while_C_8 : begin
        fsm_output = 7'b0001101;
        state_var_NS = modExp_dev_while_C_9;
      end
      modExp_dev_while_C_9 : begin
        fsm_output = 7'b0001110;
        state_var_NS = modExp_dev_while_C_10;
      end
      modExp_dev_while_C_10 : begin
        fsm_output = 7'b0001111;
        state_var_NS = modExp_dev_while_C_11;
      end
      modExp_dev_while_C_11 : begin
        fsm_output = 7'b0010000;
        state_var_NS = modExp_dev_while_C_12;
      end
      modExp_dev_while_C_12 : begin
        fsm_output = 7'b0010001;
        state_var_NS = modExp_dev_while_C_13;
      end
      modExp_dev_while_C_13 : begin
        fsm_output = 7'b0010010;
        state_var_NS = modExp_dev_while_C_14;
      end
      modExp_dev_while_C_14 : begin
        fsm_output = 7'b0010011;
        if ( modExp_dev_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_0;
        end
        else begin
          state_var_NS = modExp_dev_while_C_0;
        end
      end
      COMP_LOOP_C_0 : begin
        fsm_output = 7'b0010100;
        state_var_NS = COMP_LOOP_C_1;
      end
      COMP_LOOP_C_1 : begin
        fsm_output = 7'b0010101;
        if ( COMP_LOOP_C_1_tr0 ) begin
          state_var_NS = COMP_LOOP_C_2;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_1_modExp_dev_1_while_C_0 : begin
        fsm_output = 7'b0010110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_1 : begin
        fsm_output = 7'b0010111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_2 : begin
        fsm_output = 7'b0011000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_3 : begin
        fsm_output = 7'b0011001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_4 : begin
        fsm_output = 7'b0011010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_5 : begin
        fsm_output = 7'b0011011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_6 : begin
        fsm_output = 7'b0011100;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_7 : begin
        fsm_output = 7'b0011101;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_8 : begin
        fsm_output = 7'b0011110;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_9 : begin
        fsm_output = 7'b0011111;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_10 : begin
        fsm_output = 7'b0100000;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_11 : begin
        fsm_output = 7'b0100001;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_12 : begin
        fsm_output = 7'b0100010;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_13 : begin
        fsm_output = 7'b0100011;
        state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_1_modExp_dev_1_while_C_14 : begin
        fsm_output = 7'b0100100;
        if ( COMP_LOOP_1_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_2;
        end
        else begin
          state_var_NS = COMP_LOOP_1_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_2 : begin
        fsm_output = 7'b0100101;
        state_var_NS = COMP_LOOP_C_3;
      end
      COMP_LOOP_C_3 : begin
        fsm_output = 7'b0100110;
        state_var_NS = COMP_LOOP_C_4;
      end
      COMP_LOOP_C_4 : begin
        fsm_output = 7'b0100111;
        state_var_NS = COMP_LOOP_C_5;
      end
      COMP_LOOP_C_5 : begin
        fsm_output = 7'b0101000;
        state_var_NS = COMP_LOOP_C_6;
      end
      COMP_LOOP_C_6 : begin
        fsm_output = 7'b0101001;
        state_var_NS = COMP_LOOP_C_7;
      end
      COMP_LOOP_C_7 : begin
        fsm_output = 7'b0101010;
        state_var_NS = COMP_LOOP_C_8;
      end
      COMP_LOOP_C_8 : begin
        fsm_output = 7'b0101011;
        state_var_NS = COMP_LOOP_C_9;
      end
      COMP_LOOP_C_9 : begin
        fsm_output = 7'b0101100;
        state_var_NS = COMP_LOOP_C_10;
      end
      COMP_LOOP_C_10 : begin
        fsm_output = 7'b0101101;
        state_var_NS = COMP_LOOP_C_11;
      end
      COMP_LOOP_C_11 : begin
        fsm_output = 7'b0101110;
        state_var_NS = COMP_LOOP_C_12;
      end
      COMP_LOOP_C_12 : begin
        fsm_output = 7'b0101111;
        state_var_NS = COMP_LOOP_C_13;
      end
      COMP_LOOP_C_13 : begin
        fsm_output = 7'b0110000;
        state_var_NS = COMP_LOOP_C_14;
      end
      COMP_LOOP_C_14 : begin
        fsm_output = 7'b0110001;
        state_var_NS = COMP_LOOP_C_15;
      end
      COMP_LOOP_C_15 : begin
        fsm_output = 7'b0110010;
        state_var_NS = COMP_LOOP_C_16;
      end
      COMP_LOOP_C_16 : begin
        fsm_output = 7'b0110011;
        state_var_NS = COMP_LOOP_C_17;
      end
      COMP_LOOP_C_17 : begin
        fsm_output = 7'b0110100;
        state_var_NS = COMP_LOOP_C_18;
      end
      COMP_LOOP_C_18 : begin
        fsm_output = 7'b0110101;
        state_var_NS = COMP_LOOP_C_19;
      end
      COMP_LOOP_C_19 : begin
        fsm_output = 7'b0110110;
        state_var_NS = COMP_LOOP_C_20;
      end
      COMP_LOOP_C_20 : begin
        fsm_output = 7'b0110111;
        state_var_NS = COMP_LOOP_C_21;
      end
      COMP_LOOP_C_21 : begin
        fsm_output = 7'b0111000;
        state_var_NS = COMP_LOOP_C_22;
      end
      COMP_LOOP_C_22 : begin
        fsm_output = 7'b0111001;
        state_var_NS = COMP_LOOP_C_23;
      end
      COMP_LOOP_C_23 : begin
        fsm_output = 7'b0111010;
        state_var_NS = COMP_LOOP_C_24;
      end
      COMP_LOOP_C_24 : begin
        fsm_output = 7'b0111011;
        state_var_NS = COMP_LOOP_C_25;
      end
      COMP_LOOP_C_25 : begin
        fsm_output = 7'b0111100;
        state_var_NS = COMP_LOOP_C_26;
      end
      COMP_LOOP_C_26 : begin
        fsm_output = 7'b0111101;
        state_var_NS = COMP_LOOP_C_27;
      end
      COMP_LOOP_C_27 : begin
        fsm_output = 7'b0111110;
        state_var_NS = COMP_LOOP_C_28;
      end
      COMP_LOOP_C_28 : begin
        fsm_output = 7'b0111111;
        state_var_NS = COMP_LOOP_C_29;
      end
      COMP_LOOP_C_29 : begin
        fsm_output = 7'b1000000;
        state_var_NS = COMP_LOOP_C_30;
      end
      COMP_LOOP_C_30 : begin
        fsm_output = 7'b1000001;
        state_var_NS = COMP_LOOP_C_31;
      end
      COMP_LOOP_C_31 : begin
        fsm_output = 7'b1000010;
        state_var_NS = COMP_LOOP_C_32;
      end
      COMP_LOOP_C_32 : begin
        fsm_output = 7'b1000011;
        if ( COMP_LOOP_C_32_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_33;
        end
      end
      COMP_LOOP_C_33 : begin
        fsm_output = 7'b1000100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_0 : begin
        fsm_output = 7'b1000101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_1;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_1 : begin
        fsm_output = 7'b1000110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_2;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_2 : begin
        fsm_output = 7'b1000111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_3;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_3 : begin
        fsm_output = 7'b1001000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_4;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_4 : begin
        fsm_output = 7'b1001001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_5;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_5 : begin
        fsm_output = 7'b1001010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_6;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_6 : begin
        fsm_output = 7'b1001011;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_7;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_7 : begin
        fsm_output = 7'b1001100;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_8;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_8 : begin
        fsm_output = 7'b1001101;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_9;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_9 : begin
        fsm_output = 7'b1001110;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_10;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_10 : begin
        fsm_output = 7'b1001111;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_11;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_11 : begin
        fsm_output = 7'b1010000;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_12;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_12 : begin
        fsm_output = 7'b1010001;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_13;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_13 : begin
        fsm_output = 7'b1010010;
        state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_14;
      end
      COMP_LOOP_2_modExp_dev_1_while_C_14 : begin
        fsm_output = 7'b1010011;
        if ( COMP_LOOP_2_modExp_dev_1_while_C_14_tr0 ) begin
          state_var_NS = COMP_LOOP_C_34;
        end
        else begin
          state_var_NS = COMP_LOOP_2_modExp_dev_1_while_C_0;
        end
      end
      COMP_LOOP_C_34 : begin
        fsm_output = 7'b1010100;
        state_var_NS = COMP_LOOP_C_35;
      end
      COMP_LOOP_C_35 : begin
        fsm_output = 7'b1010101;
        state_var_NS = COMP_LOOP_C_36;
      end
      COMP_LOOP_C_36 : begin
        fsm_output = 7'b1010110;
        state_var_NS = COMP_LOOP_C_37;
      end
      COMP_LOOP_C_37 : begin
        fsm_output = 7'b1010111;
        state_var_NS = COMP_LOOP_C_38;
      end
      COMP_LOOP_C_38 : begin
        fsm_output = 7'b1011000;
        state_var_NS = COMP_LOOP_C_39;
      end
      COMP_LOOP_C_39 : begin
        fsm_output = 7'b1011001;
        state_var_NS = COMP_LOOP_C_40;
      end
      COMP_LOOP_C_40 : begin
        fsm_output = 7'b1011010;
        state_var_NS = COMP_LOOP_C_41;
      end
      COMP_LOOP_C_41 : begin
        fsm_output = 7'b1011011;
        state_var_NS = COMP_LOOP_C_42;
      end
      COMP_LOOP_C_42 : begin
        fsm_output = 7'b1011100;
        state_var_NS = COMP_LOOP_C_43;
      end
      COMP_LOOP_C_43 : begin
        fsm_output = 7'b1011101;
        state_var_NS = COMP_LOOP_C_44;
      end
      COMP_LOOP_C_44 : begin
        fsm_output = 7'b1011110;
        state_var_NS = COMP_LOOP_C_45;
      end
      COMP_LOOP_C_45 : begin
        fsm_output = 7'b1011111;
        state_var_NS = COMP_LOOP_C_46;
      end
      COMP_LOOP_C_46 : begin
        fsm_output = 7'b1100000;
        state_var_NS = COMP_LOOP_C_47;
      end
      COMP_LOOP_C_47 : begin
        fsm_output = 7'b1100001;
        state_var_NS = COMP_LOOP_C_48;
      end
      COMP_LOOP_C_48 : begin
        fsm_output = 7'b1100010;
        state_var_NS = COMP_LOOP_C_49;
      end
      COMP_LOOP_C_49 : begin
        fsm_output = 7'b1100011;
        state_var_NS = COMP_LOOP_C_50;
      end
      COMP_LOOP_C_50 : begin
        fsm_output = 7'b1100100;
        state_var_NS = COMP_LOOP_C_51;
      end
      COMP_LOOP_C_51 : begin
        fsm_output = 7'b1100101;
        state_var_NS = COMP_LOOP_C_52;
      end
      COMP_LOOP_C_52 : begin
        fsm_output = 7'b1100110;
        state_var_NS = COMP_LOOP_C_53;
      end
      COMP_LOOP_C_53 : begin
        fsm_output = 7'b1100111;
        state_var_NS = COMP_LOOP_C_54;
      end
      COMP_LOOP_C_54 : begin
        fsm_output = 7'b1101000;
        state_var_NS = COMP_LOOP_C_55;
      end
      COMP_LOOP_C_55 : begin
        fsm_output = 7'b1101001;
        state_var_NS = COMP_LOOP_C_56;
      end
      COMP_LOOP_C_56 : begin
        fsm_output = 7'b1101010;
        state_var_NS = COMP_LOOP_C_57;
      end
      COMP_LOOP_C_57 : begin
        fsm_output = 7'b1101011;
        state_var_NS = COMP_LOOP_C_58;
      end
      COMP_LOOP_C_58 : begin
        fsm_output = 7'b1101100;
        state_var_NS = COMP_LOOP_C_59;
      end
      COMP_LOOP_C_59 : begin
        fsm_output = 7'b1101101;
        state_var_NS = COMP_LOOP_C_60;
      end
      COMP_LOOP_C_60 : begin
        fsm_output = 7'b1101110;
        state_var_NS = COMP_LOOP_C_61;
      end
      COMP_LOOP_C_61 : begin
        fsm_output = 7'b1101111;
        state_var_NS = COMP_LOOP_C_62;
      end
      COMP_LOOP_C_62 : begin
        fsm_output = 7'b1110000;
        state_var_NS = COMP_LOOP_C_63;
      end
      COMP_LOOP_C_63 : begin
        fsm_output = 7'b1110001;
        state_var_NS = COMP_LOOP_C_64;
      end
      COMP_LOOP_C_64 : begin
        fsm_output = 7'b1110010;
        if ( COMP_LOOP_C_64_tr0 ) begin
          state_var_NS = VEC_LOOP_C_0;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      VEC_LOOP_C_0 : begin
        fsm_output = 7'b1110011;
        if ( VEC_LOOP_C_0_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_4;
        end
        else begin
          state_var_NS = COMP_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_4 : begin
        fsm_output = 7'b1110100;
        if ( STAGE_LOOP_C_4_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 7'b1110101;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = STAGE_LOOP_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core_wait_dp
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core_wait_dp (
  ensig_cgo_iro, ensig_cgo, modulo_dev_cmp_ccs_ccore_en
);
  input ensig_cgo_iro;
  input ensig_cgo;
  output modulo_dev_cmp_ccs_ccore_en;



  // Interconnect Declarations for Component Instantiations 
  assign modulo_dev_cmp_ccs_ccore_en = ensig_cgo | ensig_cgo_iro;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT_core
// ------------------------------------------------------------------


module inPlaceNTT_DIT_core (
  clk, rst, vec_rsc_triosy_0_0_lz, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz,
      r_rsc_dat, r_rsc_triosy_lz, vec_rsc_0_0_i_q_d, vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_q_d, vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d, vec_rsc_0_0_i_d_d_pff,
      vec_rsc_0_0_i_radr_d_pff, vec_rsc_0_0_i_wadr_d_pff, vec_rsc_0_0_i_we_d_pff,
      vec_rsc_0_1_i_we_d_pff
);
  input clk;
  input rst;
  output vec_rsc_triosy_0_0_lz;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input [63:0] vec_rsc_0_0_i_q_d;
  output vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  input [63:0] vec_rsc_0_1_i_q_d;
  output vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  output [63:0] vec_rsc_0_0_i_d_d_pff;
  output [8:0] vec_rsc_0_0_i_radr_d_pff;
  output [8:0] vec_rsc_0_0_i_wadr_d_pff;
  output vec_rsc_0_0_i_we_d_pff;
  output vec_rsc_0_1_i_we_d_pff;


  // Interconnect Declarations
  wire [63:0] p_rsci_idat;
  wire [63:0] r_rsci_idat;
  wire [63:0] modulo_dev_cmp_return_rsc_z;
  wire modulo_dev_cmp_ccs_ccore_en;
  reg [64:0] operator_66_true_div_cmp_a;
  wire [64:0] operator_66_true_div_cmp_z;
  reg [9:0] operator_66_true_div_cmp_b_9_0;
  wire [6:0] fsm_output;
  wire nor_tmp;
  wire and_dcpl_5;
  wire and_dcpl_7;
  wire and_dcpl_10;
  wire and_dcpl_13;
  wire or_dcpl_7;
  wire and_tmp_1;
  wire nor_tmp_7;
  wire and_dcpl_15;
  wire and_dcpl_16;
  wire and_dcpl_17;
  wire and_dcpl_19;
  wire and_dcpl_20;
  wire and_dcpl_21;
  wire and_dcpl_22;
  wire and_dcpl_23;
  wire and_dcpl_24;
  wire and_dcpl_28;
  wire and_dcpl_31;
  wire or_tmp_14;
  wire or_tmp_16;
  wire and_dcpl_33;
  wire or_tmp_18;
  wire mux_tmp_24;
  wire or_tmp_20;
  wire or_tmp_34;
  wire or_tmp_43;
  wire and_dcpl_43;
  wire or_tmp_44;
  wire or_tmp_45;
  wire and_dcpl_46;
  wire mux_tmp_52;
  wire mux_tmp_55;
  wire or_tmp_49;
  wire not_tmp_58;
  wire nor_tmp_15;
  wire and_dcpl_53;
  wire or_tmp_51;
  wire nor_tmp_17;
  wire and_tmp_4;
  wire and_dcpl_58;
  wire or_tmp_58;
  wire and_dcpl_61;
  wire and_dcpl_63;
  wire and_tmp_5;
  wire and_dcpl_69;
  wire or_tmp_75;
  wire mux_tmp_89;
  wire mux_tmp_94;
  wire mux_tmp_96;
  reg exit_COMP_LOOP_1_modExp_dev_1_while_sva;
  wire [10:0] VEC_LOOP_acc_1_psp_1;
  wire [11:0] nl_VEC_LOOP_acc_1_psp_1;
  reg COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  reg [9:0] VEC_LOOP_j_sva_9_0;
  reg [9:0] COMP_LOOP_acc_1_cse_sva;
  reg reg_vec_rsc_triosy_0_1_obj_ld_cse;
  reg reg_ensig_cgo_cse;
  wire nor_8_cse;
  wire and_90_cse;
  reg [7:0] COMP_LOOP_k_9_1_sva_7_0;
  wire mux_53_rmff;
  reg [63:0] tmp_2_lpi_4_dfm;
  reg [63:0] p_sva;
  wire [8:0] COMP_LOOP_acc_psp_sva_1;
  wire [9:0] nl_COMP_LOOP_acc_psp_sva_1;
  reg [8:0] COMP_LOOP_acc_psp_sva;
  wire mux_29_itm;
  wire and_dcpl_84;
  wire and_dcpl_85;
  wire and_dcpl_96;
  wire [9:0] z_out_1;
  wire and_dcpl_99;
  wire and_dcpl_101;
  wire and_dcpl_102;
  wire and_dcpl_103;
  wire and_dcpl_105;
  wire and_dcpl_108;
  wire and_dcpl_113;
  wire [64:0] z_out_3;
  wire [65:0] nl_z_out_3;
  wire [8:0] z_out_4;
  wire [9:0] nl_z_out_4;
  reg [63:0] r_sva;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [9:0] STAGE_LOOP_lshift_psp_sva;
  reg [63:0] modExp_dev_exp_sva;
  reg [63:0] modExp_dev_result_sva;
  reg [54:0] modExp_dev_exp_1_sva_63_9;
  reg modExp_dev_exp_1_sva_0;
  wire STAGE_LOOP_i_3_0_sva_mx0c1;
  wire [9:0] STAGE_LOOP_lshift_psp_sva_mx0w0;
  wire VEC_LOOP_j_sva_9_0_mx0c1;
  wire tmp_2_lpi_4_dfm_mx0c1;
  wire and_61_rgt;
  wire mux_cse;
  wire [64:0] operator_64_false_operator_64_false_mux_rgt;
  wire mux_tmp_129;
  wire [9:0] COMP_LOOP_mux1h_15_rgt;
  reg [1:0] COMP_LOOP_acc_10_cse_10_1_1_sva_9_8;
  reg [7:0] COMP_LOOP_acc_10_cse_10_1_1_sva_7_0;
  reg operator_64_false_acc_mut_64;
  reg [63:0] operator_64_false_acc_mut_63_0;
  wire or_107_cse;
  wire nand_16_cse;
  wire and_178_cse;
  wire and_cse;
  wire or_155_cse;
  wire mux_142_cse;
  wire or_151_cse;
  wire COMP_LOOP_or_5_cse;
  wire [62:0] z_out_2_64_2;
  wire [9:0] z_out_5_10_1;
  wire nor_88_cse;

  wire[0:0] mux_52_nl;
  wire[0:0] mux_51_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] or_49_nl;
  wire[0:0] or_48_nl;
  wire[0:0] or_46_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] nor_24_nl;
  wire[0:0] nor_34_nl;
  wire[63:0] modExp_dev_while_mux1h_nl;
  wire[63:0] mul_nl;
  wire[127:0] nl_mul_nl;
  wire[63:0] modExp_dev_while_modExp_dev_while_mux_2_nl;
  wire[0:0] modExp_dev_while_or_2_nl;
  wire[63:0] modExp_dev_while_mux1h_4_nl;
  wire[0:0] and_179_nl;
  wire[0:0] modExp_dev_while_and_2_nl;
  wire[0:0] modExp_dev_while_and_3_nl;
  wire[63:0] COMP_LOOP_1_acc_8_nl;
  wire[64:0] nl_COMP_LOOP_1_acc_8_nl;
  wire[0:0] modExp_dev_while_or_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] and_84_nl;
  wire[0:0] nor_18_nl;
  wire[0:0] or_72_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] or_71_nl;
  wire[0:0] nor_37_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] or_75_nl;
  wire[0:0] nor_39_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] mux_65_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] or_159_nl;
  wire[0:0] nand_15_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] or_161_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] or_162_nl;
  wire[0:0] or_163_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] nor_84_nl;
  wire[0:0] and_177_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] or_137_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] nor_86_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] or_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] or_63_nl;
  wire[0:0] or_62_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] or_156_nl;
  wire[0:0] nand_13_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] or_157_nl;
  wire[0:0] or_158_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] nor_91_nl;
  wire[0:0] nor_92_nl;
  wire[0:0] mux_84_nl;
  wire[9:0] COMP_LOOP_1_acc_nl;
  wire[10:0] nl_COMP_LOOP_1_acc_nl;
  wire[0:0] mux_95_nl;
  wire[0:0] nor_89_nl;
  wire[0:0] nor_90_nl;
  wire[8:0] operator_64_false_1_acc_nl;
  wire[9:0] nl_operator_64_false_1_acc_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] or_94_nl;
  wire[0:0] COMP_LOOP_mux_25_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] mux_104_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] or_105_nl;
  wire[0:0] or_164_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] nand_11_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] nor_82_nl;
  wire[0:0] or_146_nl;
  wire[0:0] or_145_nl;
  wire[7:0] COMP_LOOP_COMP_LOOP_mux_1_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] nand_10_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] or_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] nor_79_nl;
  wire[0:0] nor_80_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] nor_33_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] or_50_nl;
  wire[0:0] or_57_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] nor_48_nl;
  wire[0:0] nor_49_nl;
  wire[0:0] or_96_nl;
  wire[0:0] or_103_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] or_98_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] and_28_nl;
  wire[0:0] and_31_nl;
  wire[0:0] and_34_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] and_36_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] or_28_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] or_26_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] nand_8_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] and_93_nl;
  wire[0:0] mux_37_nl;
  wire[0:0] or_108_nl;
  wire[0:0] nor_29_nl;
  wire[0:0] nor_30_nl;
  wire[0:0] or_113_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] or_36_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] or_35_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] mux_47_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] mux_46_nl;
  wire[0:0] nor_25_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] nor_26_nl;
  wire[0:0] or_40_nl;
  wire[0:0] nor_27_nl;
  wire[0:0] or_112_nl;
  wire[0:0] nor_56_nl;
  wire[0:0] nor_57_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] nor_54_nl;
  wire[0:0] nor_55_nl;
  wire[0:0] and_169_nl;
  wire[10:0] acc_nl;
  wire[11:0] nl_acc_nl;
  wire[9:0] COMP_LOOP_mux_26_nl;
  wire[0:0] COMP_LOOP_or_6_nl;
  wire[64:0] operator_64_false_1_acc_1_nl;
  wire[65:0] nl_operator_64_false_1_acc_1_nl;
  wire[0:0] operator_64_false_1_operator_64_false_1_or_1_nl;
  wire[63:0] operator_64_false_1_mux1h_2_nl;
  wire[0:0] operator_64_false_1_or_1_nl;
  wire[63:0] operator_64_false_mux1h_1_nl;
  wire[0:0] and_181_nl;
  wire[7:0] STAGE_LOOP_mux_3_nl;
  wire[0:0] and_183_nl;
  wire[10:0] acc_4_nl;
  wire[12:0] nl_acc_4_nl;
  wire[0:0] and_184_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[63:0] COMP_LOOP_1_acc_5_nl;
  wire[64:0] nl_COMP_LOOP_1_acc_5_nl;
  wire [63:0] nl_modulo_dev_cmp_base_rsc_dat;
  assign nl_COMP_LOOP_1_acc_5_nl = tmp_2_lpi_4_dfm + modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_1_acc_5_nl = nl_COMP_LOOP_1_acc_5_nl[63:0];
  assign nl_modulo_dev_cmp_base_rsc_dat = MUX_v_64_2_2(operator_64_false_acc_mut_63_0,
      COMP_LOOP_1_acc_5_nl, and_dcpl_43);
  wire [63:0] nl_modulo_dev_cmp_m_rsc_dat;
  assign nl_modulo_dev_cmp_m_rsc_dat = p_sva;
  wire[0:0] mux_60_nl;
  wire[0:0] nand_3_nl;
  wire[0:0] mux_59_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] mux_55_nl;
  wire [0:0] nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat;
  assign mux_58_nl = MUX_s_1_2_2(or_tmp_45, (~ and_90_cse), fsm_output[4]);
  assign mux_59_nl = MUX_s_1_2_2(mux_58_nl, or_tmp_45, fsm_output[6]);
  assign nand_3_nl = ~((fsm_output[2]) & (~ mux_59_nl));
  assign mux_55_nl = MUX_s_1_2_2((~ and_90_cse), (fsm_output[1]), fsm_output[4]);
  assign mux_56_nl = MUX_s_1_2_2(mux_55_nl, or_tmp_44, fsm_output[6]);
  assign mux_57_nl = MUX_s_1_2_2(or_tmp_43, mux_56_nl, fsm_output[2]);
  assign mux_60_nl = MUX_s_1_2_2(nand_3_nl, mux_57_nl, fsm_output[5]);
  assign nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat = ~(mux_60_nl | (fsm_output[3]));
  wire [10:0] nl_operator_66_true_div_cmp_b;
  assign nl_operator_66_true_div_cmp_b = {1'b0, operator_66_true_div_cmp_b_9_0};
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0 = ~ (z_out_2_64_2[62]);
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0 = ~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm;
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0 = VEC_LOOP_acc_1_psp_1[10];
  wire [0:0] nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0;
  assign nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0 = ~ (z_out_2_64_2[0]);
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd64)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd64)) r_rsci (
      .dat(r_rsc_dat),
      .idat(r_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_1_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_1_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_0_0_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(vec_rsc_triosy_0_0_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(p_rsc_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(reg_vec_rsc_triosy_0_1_obj_ld_cse),
      .lz(r_rsc_triosy_lz)
    );
  modulo_dev  modulo_dev_cmp (
      .base_rsc_dat(nl_modulo_dev_cmp_base_rsc_dat[63:0]),
      .m_rsc_dat(nl_modulo_dev_cmp_m_rsc_dat[63:0]),
      .return_rsc_z(modulo_dev_cmp_return_rsc_z),
      .ccs_ccore_start_rsc_dat(nl_modulo_dev_cmp_ccs_ccore_start_rsc_dat[0:0]),
      .ccs_ccore_clk(clk),
      .ccs_ccore_srst(rst),
      .ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  mgc_div #(.width_a(32'sd65),
  .width_b(32'sd11),
  .signd(32'sd1)) operator_66_true_div_cmp (
      .a(operator_66_true_div_cmp_a),
      .b(nl_operator_66_true_div_cmp_b[10:0]),
      .z(operator_66_true_div_cmp_z)
    );
  mgc_shift_l_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) STAGE_LOOP_lshift_rg (
      .a(1'b1),
      .s(STAGE_LOOP_i_3_0_sva),
      .z(STAGE_LOOP_lshift_psp_sva_mx0w0)
    );
  inPlaceNTT_DIT_core_wait_dp inPlaceNTT_DIT_core_wait_dp_inst (
      .ensig_cgo_iro(mux_53_rmff),
      .ensig_cgo(reg_ensig_cgo_cse),
      .modulo_dev_cmp_ccs_ccore_en(modulo_dev_cmp_ccs_ccore_en)
    );
  inPlaceNTT_DIT_core_core_fsm inPlaceNTT_DIT_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .STAGE_LOOP_C_3_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_3_tr0[0:0]),
      .modExp_dev_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_1_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0[0:0]),
      .COMP_LOOP_1_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_32_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_32_tr0[0:0]),
      .COMP_LOOP_2_modExp_dev_1_while_C_14_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .COMP_LOOP_C_64_tr0(exit_COMP_LOOP_1_modExp_dev_1_while_sva),
      .VEC_LOOP_C_0_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0[0:0]),
      .STAGE_LOOP_C_4_tr0(nl_inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_4_tr0[0:0])
    );
  assign nor_8_cse = ~((fsm_output[0]) | (~ (fsm_output[4])));
  assign or_107_cse = (fsm_output[6]) | (~ (fsm_output[4])) | (fsm_output[0]);
  assign or_49_nl = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[3]);
  assign mux_50_nl = MUX_s_1_2_2((fsm_output[3]), or_49_nl, fsm_output[4]);
  assign or_48_nl = nor_8_cse | (~ (fsm_output[1])) | (fsm_output[3]);
  assign mux_51_nl = MUX_s_1_2_2(mux_50_nl, or_48_nl, fsm_output[6]);
  assign or_46_nl = (or_107_cse & (fsm_output[1])) | (fsm_output[3]);
  assign mux_52_nl = MUX_s_1_2_2(mux_51_nl, or_46_nl, fsm_output[2]);
  assign nor_24_nl = ~((fsm_output[4]) | or_tmp_34);
  assign mux_48_nl = MUX_s_1_2_2(nor_24_nl, (fsm_output[4]), fsm_output[6]);
  assign mux_49_nl = MUX_s_1_2_2(and_tmp_1, mux_48_nl, fsm_output[2]);
  assign mux_53_rmff = MUX_s_1_2_2(mux_52_nl, (~ mux_49_nl), fsm_output[5]);
  assign modExp_dev_while_or_2_nl = and_dcpl_84 | and_dcpl_85;
  assign modExp_dev_while_modExp_dev_while_mux_2_nl = MUX_v_64_2_2(modExp_dev_result_sva,
      operator_64_false_acc_mut_63_0, modExp_dev_while_or_2_nl);
  assign and_179_nl = and_dcpl_61 & (~ (fsm_output[1])) & (fsm_output[0]) & (~ (fsm_output[6]))
      & (~ (fsm_output[5])) & (~ (fsm_output[4]));
  assign modExp_dev_while_and_2_nl = (~ (COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]))
      & and_dcpl_85;
  assign modExp_dev_while_and_3_nl = (COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]) & and_dcpl_85;
  assign modExp_dev_while_mux1h_4_nl = MUX1HOT_v_64_4_2(r_sva, modExp_dev_result_sva,
      vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, {and_179_nl , and_dcpl_84 , modExp_dev_while_and_2_nl
      , modExp_dev_while_and_3_nl});
  assign nl_mul_nl = modExp_dev_while_modExp_dev_while_mux_2_nl * modExp_dev_while_mux1h_4_nl;
  assign mul_nl = nl_mul_nl[63:0];
  assign nl_COMP_LOOP_1_acc_8_nl = tmp_2_lpi_4_dfm - modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_1_acc_8_nl = nl_COMP_LOOP_1_acc_8_nl[63:0];
  assign and_84_nl = (fsm_output[6]) & (fsm_output[4]) & (fsm_output[0]) & (~ (fsm_output[1]));
  assign nor_18_nl = ~((fsm_output[6]) | (fsm_output[4]) | (fsm_output[0]) | (~ (fsm_output[1])));
  assign mux_92_nl = MUX_s_1_2_2(and_84_nl, nor_18_nl, fsm_output[5]);
  assign modExp_dev_while_or_nl = and_dcpl_58 | and_dcpl_63 | (mux_92_nl & and_dcpl_61);
  assign mux_85_nl = MUX_s_1_2_2(or_tmp_49, or_tmp_45, fsm_output[4]);
  assign or_71_nl = (~((fsm_output[4]) | (fsm_output[0]))) | (fsm_output[1]);
  assign mux_86_nl = MUX_s_1_2_2(mux_85_nl, or_71_nl, fsm_output[6]);
  assign mux_87_nl = MUX_s_1_2_2(not_tmp_58, mux_86_nl, fsm_output[2]);
  assign mux_88_nl = MUX_s_1_2_2(mux_87_nl, mux_tmp_55, fsm_output[5]);
  assign or_72_nl = mux_88_nl | (fsm_output[3]);
  assign or_75_nl = (~ (fsm_output[2])) | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[0])
      | (fsm_output[1]);
  assign mux_90_nl = MUX_s_1_2_2(or_tmp_51, or_75_nl, fsm_output[5]);
  assign nor_37_nl = ~(mux_90_nl | (fsm_output[3]));
  assign modExp_dev_while_mux1h_nl = MUX1HOT_v_64_4_2(mul_nl, 64'b0000000000000000000000000000000000000000000000000000000000000001,
      modulo_dev_cmp_return_rsc_z, COMP_LOOP_1_acc_8_nl, {modExp_dev_while_or_nl
      , or_72_nl , nor_37_nl , and_dcpl_43});
  assign mux_65_nl = MUX_s_1_2_2(or_tmp_49, mux_tmp_24, fsm_output[4]);
  assign mux_66_nl = MUX_s_1_2_2(mux_65_nl, (fsm_output[1]), fsm_output[6]);
  assign mux_67_nl = MUX_s_1_2_2(not_tmp_58, mux_66_nl, fsm_output[2]);
  assign mux_68_nl = MUX_s_1_2_2(mux_67_nl, mux_tmp_55, fsm_output[5]);
  assign nor_39_nl = ~(mux_68_nl | (fsm_output[3]));
  assign operator_64_false_operator_64_false_mux_rgt = MUX_v_65_2_2(z_out_3, ({1'b0
      , modExp_dev_while_mux1h_nl}), nor_39_nl);
  assign nand_16_cse = ~((fsm_output[0]) & (fsm_output[6]));
  assign and_cse = (fsm_output[4]) & (fsm_output[0]);
  assign nor_88_cse = ~((fsm_output[0]) | (fsm_output[6]));
  assign and_178_cse = (fsm_output[1]) & (fsm_output[4]);
  assign and_61_rgt = and_dcpl_53 & and_dcpl_5;
  assign or_155_cse = (fsm_output[1:0]!=2'b00);
  assign COMP_LOOP_COMP_LOOP_mux_1_nl = MUX_v_8_2_2(COMP_LOOP_k_9_1_sva_7_0, (z_out_3[8:1]),
      and_dcpl_63);
  assign COMP_LOOP_mux1h_15_rgt = MUX_v_10_2_2(({2'b00 , COMP_LOOP_COMP_LOOP_mux_1_nl}),
      z_out_5_10_1, COMP_LOOP_or_5_cse);
  assign mux_142_cse = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[4]);
  assign or_151_cse = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[3]);
  assign nl_COMP_LOOP_acc_psp_sva_1 = (VEC_LOOP_j_sva_9_0[9:1]) + conv_u2u_8_9(COMP_LOOP_k_9_1_sva_7_0);
  assign COMP_LOOP_acc_psp_sva_1 = nl_COMP_LOOP_acc_psp_sva_1[8:0];
  assign nl_VEC_LOOP_acc_1_psp_1 = conv_u2u_10_11(VEC_LOOP_j_sva_9_0) + conv_u2u_10_11(STAGE_LOOP_lshift_psp_sva);
  assign VEC_LOOP_acc_1_psp_1 = nl_VEC_LOOP_acc_1_psp_1[10:0];
  assign nor_tmp = (fsm_output[6]) & (fsm_output[4]);
  assign and_dcpl_5 = ~((fsm_output[6]) | (fsm_output[2]) | (fsm_output[5]));
  assign and_dcpl_7 = ~((fsm_output[3]) | (fsm_output[1]));
  assign and_dcpl_10 = (fsm_output[6]) & (fsm_output[2]);
  assign and_dcpl_13 = and_dcpl_7 & (~ (fsm_output[0])) & (fsm_output[4]);
  assign or_dcpl_7 = (fsm_output[3]) | (fsm_output[1]) | (fsm_output[0]);
  assign and_tmp_1 = (fsm_output[6]) & (fsm_output[4]) & or_dcpl_7;
  assign nor_tmp_7 = (fsm_output[6]) & (fsm_output[4]) & (fsm_output[3]);
  assign nor_33_nl = ~((fsm_output[3]) | (fsm_output[2]) | (fsm_output[0]) | (fsm_output[1])
      | (fsm_output[6]) | (fsm_output[4]));
  assign mux_28_nl = MUX_s_1_2_2(nor_tmp_7, and_tmp_1, fsm_output[2]);
  assign mux_29_itm = MUX_s_1_2_2(nor_33_nl, mux_28_nl, fsm_output[5]);
  assign and_dcpl_15 = (~ (fsm_output[6])) & (fsm_output[2]);
  assign and_dcpl_16 = and_dcpl_15 & (~ (fsm_output[5]));
  assign and_dcpl_17 = and_dcpl_13 & and_dcpl_16;
  assign and_dcpl_19 = (fsm_output[0]) & (~ (fsm_output[4]));
  assign and_dcpl_20 = and_dcpl_7 & and_dcpl_19;
  assign and_dcpl_21 = and_dcpl_20 & and_dcpl_15 & (fsm_output[5]);
  assign and_dcpl_22 = (fsm_output[6]) & (~ (fsm_output[2]));
  assign and_dcpl_23 = and_dcpl_22 & (~ (fsm_output[5]));
  assign and_dcpl_24 = (~ (fsm_output[3])) & (fsm_output[1]);
  assign and_dcpl_28 = and_dcpl_13 & and_dcpl_10 & (~ (fsm_output[5]));
  assign and_dcpl_31 = (~ (fsm_output[3])) & (fsm_output[6]) & (~ (fsm_output[2]));
  assign or_tmp_14 = (~ (fsm_output[4])) | (~ (fsm_output[0])) | (fsm_output[1]);
  assign or_tmp_16 = (fsm_output[4]) | (fsm_output[0]) | (~ (fsm_output[1]));
  assign and_dcpl_33 = and_dcpl_22 & (fsm_output[5]);
  assign or_tmp_18 = (~ (fsm_output[4])) | (fsm_output[1]);
  assign mux_tmp_24 = MUX_s_1_2_2((~ (fsm_output[1])), (fsm_output[1]), fsm_output[0]);
  assign or_tmp_20 = (fsm_output[4]) | mux_tmp_24;
  assign and_90_cse = (fsm_output[1:0]==2'b11);
  assign or_tmp_34 = and_90_cse | (fsm_output[3]);
  assign or_tmp_43 = (~ (fsm_output[6])) | (fsm_output[4]) | (~ and_90_cse);
  assign or_50_nl = (fsm_output[6]) | (~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[1]);
  assign mux_54_nl = MUX_s_1_2_2(or_tmp_43, or_50_nl, fsm_output[2]);
  assign and_dcpl_43 = (~ mux_54_nl) & (~ (fsm_output[3])) & (fsm_output[5]);
  assign or_tmp_44 = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1]);
  assign or_tmp_45 = (fsm_output[1:0]!=2'b10);
  assign and_dcpl_46 = and_dcpl_24 & (~ (fsm_output[4])) & and_dcpl_5;
  assign mux_tmp_52 = MUX_s_1_2_2(nor_tmp_7, nor_tmp, fsm_output[2]);
  assign mux_63_nl = MUX_s_1_2_2(and_90_cse, or_155_cse, fsm_output[4]);
  assign or_57_nl = (fsm_output[6]) | mux_63_nl;
  assign mux_tmp_55 = MUX_s_1_2_2(or_tmp_43, or_57_nl, fsm_output[2]);
  assign or_tmp_49 = (fsm_output[1:0]!=2'b01);
  assign not_tmp_58 = ~((fsm_output[6]) & (fsm_output[4]) & (fsm_output[0]) & (fsm_output[1]));
  assign nor_tmp_15 = (fsm_output[4]) & (fsm_output[0]) & (fsm_output[1]);
  assign and_dcpl_53 = and_dcpl_24 & and_cse;
  assign or_tmp_51 = (fsm_output[2]) | not_tmp_58;
  assign nor_tmp_17 = (fsm_output[4:3]==2'b11);
  assign and_tmp_4 = (fsm_output[4]) & or_tmp_34;
  assign and_dcpl_58 = and_dcpl_20 & and_dcpl_16;
  assign or_tmp_58 = (fsm_output[4]) | and_dcpl_7;
  assign and_dcpl_61 = (fsm_output[3:2]==2'b01);
  assign nor_48_nl = ~((~ (fsm_output[4])) | (fsm_output[0]) | (~ (fsm_output[1])));
  assign nor_49_nl = ~((fsm_output[4]) | (~ (fsm_output[0])) | (fsm_output[1]));
  assign mux_89_nl = MUX_s_1_2_2(nor_48_nl, nor_49_nl, fsm_output[6]);
  assign and_dcpl_63 = mux_89_nl & and_dcpl_61 & (~ (fsm_output[5]));
  assign and_tmp_5 = (fsm_output[4]) & or_dcpl_7;
  assign and_dcpl_69 = and_dcpl_7 & (fsm_output[2]) & (~ (fsm_output[5]));
  assign or_tmp_75 = (~ (fsm_output[6])) | (fsm_output[4]) | (fsm_output[0]);
  assign or_96_nl = (fsm_output[4]) | (fsm_output[0]);
  assign mux_tmp_89 = MUX_s_1_2_2((~ and_cse), or_96_nl, fsm_output[6]);
  assign or_103_nl = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1])
      | (fsm_output[3]);
  assign mux_tmp_94 = MUX_s_1_2_2(or_151_cse, or_103_nl, fsm_output[2]);
  assign mux_tmp_96 = MUX_s_1_2_2((~ nor_tmp_17), mux_142_cse, fsm_output[6]);
  assign STAGE_LOOP_i_3_0_sva_mx0c1 = and_dcpl_13 & and_dcpl_10 & (fsm_output[5]);
  assign VEC_LOOP_j_sva_9_0_mx0c1 = and_dcpl_53 & and_dcpl_33;
  assign or_98_nl = (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[6]) | (~ and_cse);
  assign mux_101_nl = MUX_s_1_2_2(or_tmp_75, mux_tmp_89, VEC_LOOP_j_sva_9_0[0]);
  assign mux_102_nl = MUX_s_1_2_2(or_98_nl, mux_101_nl, COMP_LOOP_acc_1_cse_sva[0]);
  assign tmp_2_lpi_4_dfm_mx0c1 = (~ mux_102_nl) & and_dcpl_69;
  assign vec_rsc_0_0_i_d_d_pff = modulo_dev_cmp_return_rsc_z;
  assign COMP_LOOP_or_5_cse = and_dcpl_21 | and_dcpl_28;
  assign and_28_nl = and_dcpl_24 & and_dcpl_19 & and_dcpl_23;
  assign vec_rsc_0_0_i_radr_d_pff = MUX1HOT_v_9_3_2(COMP_LOOP_acc_psp_sva_1, (z_out_5_10_1[9:1]),
      (COMP_LOOP_acc_1_cse_sva[9:1]), {and_dcpl_17 , COMP_LOOP_or_5_cse , and_28_nl});
  assign and_31_nl = and_dcpl_20 & and_dcpl_23;
  assign mux_30_nl = MUX_s_1_2_2(or_tmp_16, or_tmp_14, fsm_output[5]);
  assign and_34_nl = (~ mux_30_nl) & and_dcpl_31;
  assign and_36_nl = and_dcpl_13 & and_dcpl_33;
  assign vec_rsc_0_0_i_wadr_d_pff = MUX1HOT_v_9_3_2(COMP_LOOP_acc_psp_sva, ({COMP_LOOP_acc_10_cse_10_1_1_sva_9_8
      , (COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[7:1])}), (COMP_LOOP_acc_1_cse_sva[9:1]),
      {and_31_nl , and_34_nl , and_36_nl});
  assign mux_34_nl = MUX_s_1_2_2(or_tmp_20, or_tmp_16, VEC_LOOP_j_sva_9_0[0]);
  assign or_28_nl = (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[4]) | (~ (fsm_output[0]))
      | (fsm_output[1]);
  assign mux_35_nl = MUX_s_1_2_2(mux_34_nl, or_28_nl, COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]);
  assign mux_31_nl = MUX_s_1_2_2(or_tmp_18, or_tmp_14, COMP_LOOP_acc_1_cse_sva[0]);
  assign or_26_nl = (COMP_LOOP_acc_1_cse_sva[0]) | (~ (fsm_output[4])) | (fsm_output[0])
      | (fsm_output[1]);
  assign mux_32_nl = MUX_s_1_2_2(mux_31_nl, or_26_nl, COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]);
  assign mux_36_nl = MUX_s_1_2_2(mux_35_nl, mux_32_nl, fsm_output[5]);
  assign vec_rsc_0_0_i_we_d_pff = (~ mux_36_nl) & and_dcpl_31;
  assign or_108_nl = (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[6]);
  assign nor_29_nl = ~((VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6]));
  assign mux_37_nl = MUX_s_1_2_2(or_108_nl, nor_29_nl, z_out_5_10_1[0]);
  assign and_93_nl = nor_8_cse & mux_37_nl;
  assign nor_30_nl = ~((~ (fsm_output[0])) | (fsm_output[4]) | (z_out_5_10_1[0])
      | (fsm_output[6]));
  assign mux_38_nl = MUX_s_1_2_2(and_93_nl, nor_30_nl, fsm_output[5]);
  assign nand_8_nl = ~((fsm_output[2]) & mux_38_nl);
  assign or_113_nl = (fsm_output[2]) | (fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[4])
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm) | (COMP_LOOP_acc_1_cse_sva[0]) |
      (~ (fsm_output[6]));
  assign mux_39_nl = MUX_s_1_2_2(nand_8_nl, or_113_nl, fsm_output[1]);
  assign vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_39_nl | (fsm_output[3]));
  assign or_36_nl = (~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[4]) | (~ (fsm_output[0]))
      | (fsm_output[1]);
  assign mux_42_nl = MUX_s_1_2_2(or_tmp_16, or_tmp_20, VEC_LOOP_j_sva_9_0[0]);
  assign mux_43_nl = MUX_s_1_2_2(or_36_nl, mux_42_nl, COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]);
  assign or_35_nl = (~ (COMP_LOOP_acc_1_cse_sva[0])) | (~ (fsm_output[4])) | (fsm_output[0])
      | (fsm_output[1]);
  assign mux_40_nl = MUX_s_1_2_2(or_tmp_14, or_tmp_18, COMP_LOOP_acc_1_cse_sva[0]);
  assign mux_41_nl = MUX_s_1_2_2(or_35_nl, mux_40_nl, COMP_LOOP_acc_10_cse_10_1_1_sva_7_0[0]);
  assign mux_44_nl = MUX_s_1_2_2(mux_43_nl, mux_41_nl, fsm_output[5]);
  assign vec_rsc_0_1_i_we_d_pff = (~ mux_44_nl) & and_dcpl_31;
  assign nor_26_nl = ~((~ (VEC_LOOP_j_sva_9_0[0])) | (fsm_output[6]));
  assign or_40_nl = (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6]);
  assign mux_45_nl = MUX_s_1_2_2(nor_26_nl, or_40_nl, z_out_5_10_1[0]);
  assign nor_25_nl = ~((fsm_output[0]) | (~((fsm_output[4]) & mux_45_nl)));
  assign nor_27_nl = ~((~ (fsm_output[0])) | (fsm_output[4]) | (~ (z_out_5_10_1[0]))
      | (fsm_output[6]));
  assign mux_46_nl = MUX_s_1_2_2(nor_25_nl, nor_27_nl, fsm_output[5]);
  assign nand_7_nl = ~((fsm_output[2]) & mux_46_nl);
  assign or_112_nl = (fsm_output[2]) | (fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[4])
      | (~ COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm) | (~((COMP_LOOP_acc_1_cse_sva[0])
      & (fsm_output[6])));
  assign mux_47_nl = MUX_s_1_2_2(nand_7_nl, or_112_nl, fsm_output[1]);
  assign vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d = ~(mux_47_nl | (fsm_output[3]));
  assign nor_56_nl = ~((~ (fsm_output[6])) | (~ (fsm_output[0])) | (fsm_output[1]));
  assign nor_57_nl = ~((fsm_output[6]) | (fsm_output[0]) | (~ (fsm_output[1])));
  assign mux_cse = MUX_s_1_2_2(nor_56_nl, nor_57_nl, fsm_output[4]);
  assign and_dcpl_84 = mux_cse & and_dcpl_61 & (~ (fsm_output[5]));
  assign nor_54_nl = ~((~ (fsm_output[5])) | (fsm_output[6]) | (fsm_output[0]) |
      (~ (fsm_output[1])));
  assign nor_55_nl = ~((fsm_output[5]) | (~ (fsm_output[6])) | (~ (fsm_output[0]))
      | (fsm_output[1]));
  assign mux_118_nl = MUX_s_1_2_2(nor_54_nl, nor_55_nl, fsm_output[4]);
  assign and_dcpl_85 = mux_118_nl & and_dcpl_61;
  assign and_dcpl_96 = and_dcpl_7 & (fsm_output[0]) & (~ (fsm_output[6])) & (fsm_output[2])
      & (fsm_output[5]) & (~ (fsm_output[4]));
  assign and_dcpl_99 = mux_cse & (~ (fsm_output[3])) & (fsm_output[2]) & (~ (fsm_output[5]));
  assign and_dcpl_101 = (fsm_output[2]) & (~ (fsm_output[5])) & (~ (fsm_output[4]));
  assign and_dcpl_102 = ~((fsm_output[3]) | (fsm_output[6]));
  assign and_dcpl_103 = ~((fsm_output[1:0]!=2'b00));
  assign and_dcpl_105 = and_dcpl_103 & and_dcpl_102 & and_dcpl_101;
  assign and_dcpl_108 = (fsm_output[1:0]==2'b01) & and_dcpl_102 & and_dcpl_101;
  assign and_dcpl_113 = and_dcpl_103 & (fsm_output[6:2]==5'b11101);
  assign and_169_nl = (fsm_output[4]) & ((fsm_output[1]) | (fsm_output[3]));
  assign mux_tmp_129 = MUX_s_1_2_2(and_169_nl, (fsm_output[4]), fsm_output[0]);
  always @(posedge clk) begin
    if ( (and_dcpl_7 & (~ (fsm_output[0])) & (~ (fsm_output[4])) & and_dcpl_5) |
        STAGE_LOOP_i_3_0_sva_mx0c1 ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b0001, (z_out_4[3:0]), STAGE_LOOP_i_3_0_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( mux_29_itm ) begin
      p_sva <= p_rsci_idat;
      r_sva <= r_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= 1'b0;
      reg_ensig_cgo_cse <= 1'b0;
    end
    else begin
      reg_vec_rsc_triosy_0_1_obj_ld_cse <= and_dcpl_13 & and_dcpl_10 & (fsm_output[5])
          & (~ (z_out_2_64_2[0]));
      reg_ensig_cgo_cse <= mux_53_rmff;
    end
  end
  always @(posedge clk) begin
    operator_66_true_div_cmp_a <= MUX_v_65_2_2(z_out_3, ({operator_64_false_acc_mut_64
        , operator_64_false_acc_mut_63_0}), and_dcpl_46);
    operator_66_true_div_cmp_b_9_0 <= MUX_v_10_2_2(STAGE_LOOP_lshift_psp_sva_mx0w0,
        STAGE_LOOP_lshift_psp_sva, and_dcpl_46);
    modExp_dev_exp_1_sva_0 <= (COMP_LOOP_mux_25_nl & (~(and_dcpl_7 & and_cse & and_dcpl_16)))
        | mux_110_nl;
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(nor_34_nl, mux_tmp_52, fsm_output[5]) ) begin
      STAGE_LOOP_lshift_psp_sva <= STAGE_LOOP_lshift_psp_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_126_nl | (fsm_output[3])) ) begin
      operator_64_false_acc_mut_64 <= operator_64_false_operator_64_false_mux_rgt[64];
    end
  end
  always @(posedge clk) begin
    if ( mux_132_nl & (~ (fsm_output[3])) ) begin
      operator_64_false_acc_mut_63_0 <= operator_64_false_operator_64_false_mux_rgt[63:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      VEC_LOOP_j_sva_9_0 <= 10'b0000000000;
    end
    else if ( (~(mux_72_nl | (fsm_output[3]) | (fsm_output[6]) | (fsm_output[5])))
        | VEC_LOOP_j_sva_9_0_mx0c1 ) begin
      VEC_LOOP_j_sva_9_0 <= MUX_v_10_2_2(10'b0000000000, (VEC_LOOP_acc_1_psp_1[9:0]),
          VEC_LOOP_j_sva_9_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( ~(mux_135_nl | (fsm_output[3])) ) begin
      COMP_LOOP_k_9_1_sva_7_0 <= MUX_v_8_2_2(8'b00000000, (z_out_4[7:0]), or_nl);
    end
  end
  always @(posedge clk) begin
    if ( mux_80_nl | and_61_rgt ) begin
      modExp_dev_result_sva <= MUX_v_64_2_2(64'b0000000000000000000000000000000000000000000000000000000000000001,
          modulo_dev_cmp_return_rsc_z, and_61_rgt);
    end
  end
  always @(posedge clk) begin
    if ( mux_84_nl | (fsm_output[6:5]!=2'b00) ) begin
      modExp_dev_exp_sva <= MUX_v_64_2_2((operator_66_true_div_cmp_z[63:0]), (z_out_3[63:0]),
          and_dcpl_58);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= 1'b0;
    end
    else if ( and_dcpl_58 | and_dcpl_63 | and_dcpl_28 ) begin
      exit_COMP_LOOP_1_modExp_dev_1_while_sva <= MUX_s_1_2_2((~ (z_out_2_64_2[62])),
          (~ (readslicef_10_1_9(COMP_LOOP_1_acc_nl))), and_dcpl_28);
    end
  end
  always @(posedge clk) begin
    if ( ~((fsm_output!=7'b0010100)) ) begin
      COMP_LOOP_acc_psp_sva <= COMP_LOOP_acc_psp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_1_cse_sva <= 10'b0000000000;
    end
    else if ( MUX_s_1_2_2(mux_95_nl, nor_tmp, fsm_output[5]) ) begin
      COMP_LOOP_acc_1_cse_sva <= z_out_1;
    end
  end
  always @(posedge clk) begin
    if ( and_dcpl_17 | and_dcpl_21 ) begin
      COMP_LOOP_2_slc_COMP_LOOP_acc_9_itm <= MUX_s_1_2_2((readslicef_9_1_8(operator_64_false_1_acc_nl)),
          (z_out_1[9]), and_dcpl_21);
    end
  end
  always @(posedge clk) begin
    if ( ((~ mux_100_nl) & and_dcpl_69) | tmp_2_lpi_4_dfm_mx0c1 ) begin
      tmp_2_lpi_4_dfm <= MUX_v_64_2_2(vec_rsc_0_0_i_q_d, vec_rsc_0_1_i_q_d, tmp_2_lpi_4_dfm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( MUX_s_1_2_2(mux_137_nl, or_145_nl, fsm_output[5]) ) begin
      modExp_dev_exp_1_sva_63_9 <= MUX_v_55_2_2(55'b0000000000000000000000000000000000000000000000000000000,
          (z_out_3[63:9]), or_164_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_9_8 <= 2'b00;
    end
    else if ( ~ mux_145_nl ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_9_8 <= COMP_LOOP_mux1h_15_rgt[9:8];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_7_0 <= 8'b00000000;
    end
    else if ( mux_148_nl & (fsm_output[3:2]==2'b01) ) begin
      COMP_LOOP_acc_10_cse_10_1_1_sva_7_0 <= COMP_LOOP_mux1h_15_rgt[7:0];
    end
  end
  assign mux_104_nl = MUX_s_1_2_2((~ and_tmp_4), or_tmp_58, fsm_output[6]);
  assign mux_106_nl = MUX_s_1_2_2(mux_tmp_96, mux_104_nl, fsm_output[2]);
  assign mux_107_nl = MUX_s_1_2_2(mux_106_nl, mux_tmp_94, fsm_output[5]);
  assign COMP_LOOP_mux_25_nl = MUX_s_1_2_2(modExp_dev_exp_1_sva_0, (z_out_3[0]),
      mux_107_nl);
  assign or_105_nl = (fsm_output[4]) | (~ or_dcpl_7);
  assign mux_108_nl = MUX_s_1_2_2((~ and_tmp_5), or_105_nl, fsm_output[6]);
  assign mux_109_nl = MUX_s_1_2_2(mux_tmp_96, mux_108_nl, fsm_output[2]);
  assign mux_110_nl = MUX_s_1_2_2(mux_109_nl, mux_tmp_94, fsm_output[5]);
  assign nor_34_nl = ~((fsm_output[3]) | (fsm_output[2]) | (fsm_output[1]) | (fsm_output[6])
      | (fsm_output[4]));
  assign or_159_nl = (fsm_output[4]) | (~ (fsm_output[0])) | (fsm_output[6]);
  assign nand_15_nl = ~((fsm_output[4]) & (fsm_output[0]) & (fsm_output[6]));
  assign mux_124_nl = MUX_s_1_2_2(or_159_nl, nand_15_nl, fsm_output[1]);
  assign mux_123_nl = MUX_s_1_2_2(nor_88_cse, or_107_cse, fsm_output[1]);
  assign mux_125_nl = MUX_s_1_2_2(mux_124_nl, mux_123_nl, fsm_output[2]);
  assign or_161_nl = (~ (fsm_output[1])) | (fsm_output[4]) | nand_16_cse;
  assign or_162_nl = and_cse | (fsm_output[6]);
  assign or_163_nl = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[6]);
  assign mux_121_nl = MUX_s_1_2_2(or_162_nl, or_163_nl, fsm_output[1]);
  assign mux_122_nl = MUX_s_1_2_2(or_161_nl, mux_121_nl, fsm_output[2]);
  assign mux_126_nl = MUX_s_1_2_2(mux_125_nl, mux_122_nl, fsm_output[5]);
  assign nor_84_nl = ~((fsm_output[4]) | (~ (fsm_output[0])) | (fsm_output[6]));
  assign and_177_nl = (fsm_output[4]) & (fsm_output[0]) & (fsm_output[6]);
  assign mux_130_nl = MUX_s_1_2_2(nor_84_nl, and_177_nl, fsm_output[1]);
  assign or_137_nl = (fsm_output[0]) | (fsm_output[6]);
  assign mux_128_nl = MUX_s_1_2_2(or_137_nl, (fsm_output[0]), fsm_output[4]);
  assign nor_85_nl = ~((~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[6]));
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, nor_85_nl, fsm_output[1]);
  assign mux_131_nl = MUX_s_1_2_2(mux_130_nl, mux_129_nl, fsm_output[2]);
  assign nor_86_nl = ~((~ (fsm_output[1])) | (fsm_output[4]) | nand_16_cse);
  assign nor_87_nl = ~(and_178_cse | (fsm_output[0]) | (fsm_output[6]));
  assign mux_127_nl = MUX_s_1_2_2(nor_86_nl, nor_87_nl, fsm_output[2]);
  assign mux_132_nl = MUX_s_1_2_2(mux_131_nl, mux_127_nl, fsm_output[5]);
  assign mux_72_nl = MUX_s_1_2_2((~ nor_tmp_15), or_tmp_44, fsm_output[2]);
  assign or_63_nl = (fsm_output[6]) | (~ nor_tmp_15);
  assign or_62_nl = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1]);
  assign mux_73_nl = MUX_s_1_2_2(or_63_nl, or_62_nl, fsm_output[2]);
  assign mux_74_nl = MUX_s_1_2_2(mux_73_nl, or_tmp_51, fsm_output[5]);
  assign or_nl = mux_74_nl | (fsm_output[3]);
  assign or_156_nl = (fsm_output[5]) | (~((fsm_output[4]) & (fsm_output[0]) & (fsm_output[1])));
  assign nand_13_nl = ~((fsm_output[5]) & (fsm_output[4]) & (fsm_output[0]) & (fsm_output[1]));
  assign mux_134_nl = MUX_s_1_2_2(or_156_nl, nand_13_nl, fsm_output[6]);
  assign or_157_nl = (fsm_output[5]) | (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1]);
  assign or_158_nl = (fsm_output[5]) | (~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[1]);
  assign mux_133_nl = MUX_s_1_2_2(or_157_nl, or_158_nl, fsm_output[6]);
  assign mux_135_nl = MUX_s_1_2_2(mux_134_nl, mux_133_nl, fsm_output[2]);
  assign nor_91_nl = ~((fsm_output[6]) | and_tmp_4);
  assign nor_92_nl = ~((fsm_output[6]) | (fsm_output[4]));
  assign mux_79_nl = MUX_s_1_2_2(nor_91_nl, nor_92_nl, fsm_output[2]);
  assign mux_80_nl = MUX_s_1_2_2(mux_79_nl, mux_tmp_52, fsm_output[5]);
  assign mux_84_nl = MUX_s_1_2_2(mux_142_cse, or_tmp_58, fsm_output[2]);
  assign nl_COMP_LOOP_1_acc_nl = ({z_out_4 , 1'b0}) + ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[9:1]))})
      + 10'b0000000001;
  assign COMP_LOOP_1_acc_nl = nl_COMP_LOOP_1_acc_nl[9:0];
  assign nor_89_nl = ~((fsm_output[6]) | nor_tmp_17);
  assign nor_90_nl = ~((fsm_output[6]) | and_tmp_5);
  assign mux_95_nl = MUX_s_1_2_2(nor_89_nl, nor_90_nl, fsm_output[2]);
  assign nl_operator_64_false_1_acc_nl = ({1'b1 , (~ COMP_LOOP_k_9_1_sva_7_0)}) +
      9'b000000001;
  assign operator_64_false_1_acc_nl = nl_operator_64_false_1_acc_nl[8:0];
  assign mux_99_nl = MUX_s_1_2_2(mux_tmp_89, or_tmp_75, VEC_LOOP_j_sva_9_0[0]);
  assign or_94_nl = (VEC_LOOP_j_sva_9_0[0]) | (fsm_output[6]) | (~ and_cse);
  assign mux_100_nl = MUX_s_1_2_2(mux_99_nl, or_94_nl, COMP_LOOP_acc_1_cse_sva[0]);
  assign or_164_nl = mux_tmp_89 | (fsm_output[3]) | (fsm_output[1]) | (~ (fsm_output[2]))
      | (fsm_output[5]);
  assign nand_11_nl = ~((fsm_output[4]) & (((fsm_output[2:0]==3'b111)) | (fsm_output[3])));
  assign nor_82_nl = ~(((fsm_output[2:1]==2'b11)) | (fsm_output[3]));
  assign or_146_nl = (fsm_output[3:2]!=2'b00);
  assign mux_136_nl = MUX_s_1_2_2(nor_82_nl, or_146_nl, fsm_output[4]);
  assign mux_137_nl = MUX_s_1_2_2(nand_11_nl, mux_136_nl, fsm_output[6]);
  assign or_145_nl = (fsm_output[6]) | (fsm_output[4]) | (or_155_cse & (fsm_output[2]))
      | (fsm_output[3]);
  assign nand_10_nl = ~((fsm_output[4:3]==2'b11));
  assign mux_143_nl = MUX_s_1_2_2(nand_10_nl, mux_142_cse, fsm_output[6]);
  assign mux_144_nl = MUX_s_1_2_2(mux_143_nl, or_151_cse, fsm_output[5]);
  assign mux_140_nl = MUX_s_1_2_2((~ mux_tmp_129), mux_tmp_129, fsm_output[6]);
  assign or_149_nl = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[1]) | (fsm_output[3]);
  assign mux_141_nl = MUX_s_1_2_2(mux_140_nl, or_149_nl, fsm_output[5]);
  assign mux_145_nl = MUX_s_1_2_2(mux_144_nl, mux_141_nl, fsm_output[2]);
  assign nor_79_nl = ~((~ (fsm_output[4])) | (fsm_output[1]));
  assign mux_146_nl = MUX_s_1_2_2(and_178_cse, nor_79_nl, fsm_output[0]);
  assign nor_80_nl = ~(and_cse | (fsm_output[1]));
  assign mux_147_nl = MUX_s_1_2_2(mux_146_nl, nor_80_nl, fsm_output[6]);
  assign nor_81_nl = ~((fsm_output[6]) | (~ (fsm_output[0])) | (fsm_output[4]) |
      (fsm_output[1]));
  assign mux_148_nl = MUX_s_1_2_2(mux_147_nl, nor_81_nl, fsm_output[5]);
  assign COMP_LOOP_mux_26_nl = MUX_v_10_2_2(VEC_LOOP_j_sva_9_0, ({1'b1 , (~ (STAGE_LOOP_lshift_psp_sva[9:1]))}),
      and_dcpl_96);
  assign COMP_LOOP_or_6_nl = (~(and_dcpl_7 & nor_88_cse & (fsm_output[2]) & (~ (fsm_output[5]))
      & (fsm_output[4]))) | and_dcpl_96;
  assign nl_acc_nl = ({COMP_LOOP_mux_26_nl , COMP_LOOP_or_6_nl}) + conv_u2u_10_11({COMP_LOOP_k_9_1_sva_7_0
      , 2'b11});
  assign acc_nl = nl_acc_nl[10:0];
  assign z_out_1 = readslicef_11_10_1(acc_nl);
  assign operator_64_false_1_operator_64_false_1_or_1_nl = (~ and_dcpl_113) | and_dcpl_99
      | and_dcpl_105 | and_dcpl_108;
  assign operator_64_false_1_or_1_nl = and_dcpl_99 | and_dcpl_108;
  assign operator_64_false_1_mux1h_2_nl = MUX1HOT_v_64_3_2((~ (z_out_3[63:0])), (~
      (operator_66_true_div_cmp_z[63:0])), ({61'b0000000000000000000000000000000000000000000000000000000000000
      , (z_out_4[3:1])}), {operator_64_false_1_or_1_nl , and_dcpl_105 , and_dcpl_113});
  assign nl_operator_64_false_1_acc_1_nl = ({operator_64_false_1_operator_64_false_1_or_1_nl
      , operator_64_false_1_mux1h_2_nl}) + conv_u2u_2_65({and_dcpl_113 , 1'b1});
  assign operator_64_false_1_acc_1_nl = nl_operator_64_false_1_acc_1_nl[64:0];
  assign z_out_2_64_2 = readslicef_65_63_2(operator_64_false_1_acc_1_nl);
  assign and_181_nl = (~((fsm_output[3]) | (fsm_output[1]) | (~ (fsm_output[0]))
      | (fsm_output[6]))) & (fsm_output[2]) & (~ (fsm_output[5])) & (~ (fsm_output[4]));
  assign operator_64_false_mux1h_1_nl = MUX1HOT_v_64_3_2(p_sva, modExp_dev_exp_sva,
      ({modExp_dev_exp_1_sva_63_9 , COMP_LOOP_acc_10_cse_10_1_1_sva_7_0 , modExp_dev_exp_1_sva_0}),
      {(~ (fsm_output[2])) , and_181_nl , and_dcpl_99});
  assign nl_z_out_3 = conv_u2u_64_65(operator_64_false_mux1h_1_nl) + 65'b11111111111111111111111111111111111111111111111111111111111111111;
  assign z_out_3 = nl_z_out_3[64:0];
  assign and_183_nl = and_dcpl_103 & (fsm_output[6:2]==5'b10101);
  assign STAGE_LOOP_mux_3_nl = MUX_v_8_2_2(({4'b0000 , STAGE_LOOP_i_3_0_sva}), COMP_LOOP_k_9_1_sva_7_0,
      and_183_nl);
  assign nl_z_out_4 = conv_u2u_8_9(STAGE_LOOP_mux_3_nl) + 9'b000000001;
  assign z_out_4 = nl_z_out_4[8:0];
  assign and_184_nl = and_dcpl_7 & (~ (fsm_output[0])) & (fsm_output[6]) & (fsm_output[2])
      & (~ (fsm_output[5])) & (fsm_output[4]);
  assign nl_acc_4_nl = conv_u2u_9_11({COMP_LOOP_k_9_1_sva_7_0 , and_184_nl}) + conv_u2u_10_11(VEC_LOOP_j_sva_9_0)
      + conv_u2u_10_11(STAGE_LOOP_lshift_psp_sva);
  assign acc_4_nl = nl_acc_4_nl[10:0];
  assign z_out_5_10_1 = readslicef_11_10_1(acc_4_nl);

  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_4_2;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [3:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | ( input_1 & {64{sel[1]}});
    result = result | ( input_2 & {64{sel[2]}});
    result = result | ( input_3 & {64{sel[3]}});
    MUX1HOT_v_64_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [54:0] MUX_v_55_2_2;
    input [54:0] input_0;
    input [54:0] input_1;
    input [0:0] sel;
    reg [54:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_55_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [64:0] MUX_v_65_2_2;
    input [64:0] input_0;
    input [64:0] input_1;
    input [0:0] sel;
    reg [64:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_65_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [62:0] readslicef_65_63_2;
    input [64:0] vector;
    reg [64:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_65_63_2 = tmp[62:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [64:0] conv_u2u_2_65 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_65 = {{63{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [64:0] conv_u2u_64_65 ;
    input [63:0]  vector ;
  begin
    conv_u2u_64_65 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    inPlaceNTT_DIT
// ------------------------------------------------------------------


module inPlaceNTT_DIT (
  clk, rst, vec_rsc_0_0_wadr, vec_rsc_0_0_d, vec_rsc_0_0_we, vec_rsc_0_0_radr, vec_rsc_0_0_q,
      vec_rsc_triosy_0_0_lz, vec_rsc_0_1_wadr, vec_rsc_0_1_d, vec_rsc_0_1_we, vec_rsc_0_1_radr,
      vec_rsc_0_1_q, vec_rsc_triosy_0_1_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat,
      r_rsc_triosy_lz
);
  input clk;
  input rst;
  output [8:0] vec_rsc_0_0_wadr;
  output [63:0] vec_rsc_0_0_d;
  output vec_rsc_0_0_we;
  output [8:0] vec_rsc_0_0_radr;
  input [63:0] vec_rsc_0_0_q;
  output vec_rsc_triosy_0_0_lz;
  output [8:0] vec_rsc_0_1_wadr;
  output [63:0] vec_rsc_0_1_d;
  output vec_rsc_0_1_we;
  output [8:0] vec_rsc_0_1_radr;
  input [63:0] vec_rsc_0_1_q;
  output vec_rsc_triosy_0_1_lz;
  input [63:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [63:0] r_rsc_dat;
  output r_rsc_triosy_lz;


  // Interconnect Declarations
  wire [63:0] vec_rsc_0_0_i_q_d;
  wire vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_1_i_q_d;
  wire vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d;
  wire [63:0] vec_rsc_0_0_i_d_d_iff;
  wire [8:0] vec_rsc_0_0_i_radr_d_iff;
  wire [8:0] vec_rsc_0_0_i_wadr_d_iff;
  wire vec_rsc_0_0_i_we_d_iff;
  wire vec_rsc_0_1_i_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_8_9_64_512_512_64_1_gen vec_rsc_0_0_i
      (
      .q(vec_rsc_0_0_q),
      .radr(vec_rsc_0_0_radr),
      .we(vec_rsc_0_0_we),
      .d(vec_rsc_0_0_d),
      .wadr(vec_rsc_0_0_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_0_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_0_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_0_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_9_9_64_512_512_64_1_gen vec_rsc_0_1_i
      (
      .q(vec_rsc_0_1_q),
      .radr(vec_rsc_0_1_radr),
      .we(vec_rsc_0_1_we),
      .d(vec_rsc_0_1_d),
      .wadr(vec_rsc_0_1_wadr),
      .d_d(vec_rsc_0_0_i_d_d_iff),
      .q_d(vec_rsc_0_1_i_q_d),
      .radr_d(vec_rsc_0_0_i_radr_d_iff),
      .wadr_d(vec_rsc_0_0_i_wadr_d_iff),
      .we_d(vec_rsc_0_1_i_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(vec_rsc_0_1_i_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d)
    );
  inPlaceNTT_DIT_core inPlaceNTT_DIT_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_triosy_0_0_lz(vec_rsc_triosy_0_0_lz),
      .vec_rsc_triosy_0_1_lz(vec_rsc_triosy_0_1_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_dat(r_rsc_dat),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .vec_rsc_0_0_i_q_d(vec_rsc_0_0_i_q_d),
      .vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_0_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_1_i_q_d(vec_rsc_0_1_i_q_d),
      .vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d(vec_rsc_0_1_i_readA_r_ram_ir_internal_RMASK_B_d),
      .vec_rsc_0_0_i_d_d_pff(vec_rsc_0_0_i_d_d_iff),
      .vec_rsc_0_0_i_radr_d_pff(vec_rsc_0_0_i_radr_d_iff),
      .vec_rsc_0_0_i_wadr_d_pff(vec_rsc_0_0_i_wadr_d_iff),
      .vec_rsc_0_0_i_we_d_pff(vec_rsc_0_0_i_we_d_iff),
      .vec_rsc_0_1_i_we_d_pff(vec_rsc_0_1_i_we_d_iff)
    );
endmodule



