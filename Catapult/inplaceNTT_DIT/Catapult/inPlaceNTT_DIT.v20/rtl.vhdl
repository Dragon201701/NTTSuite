-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   yl7897@newnano.poly.edu
--  Generated date: Wed May 19 22:39:40 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen
    IS
  PORT(
    qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea : OUT STD_LOGIC;
    da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    adra_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
    da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen;

ARCHITECTURE v20 OF inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen
    IS
  -- Default Constants

BEGIN
  qa_d <= qa;
  wea <= (rwA_rw_ram_ir_internal_WMASK_B_d);
  da <= (da_d);
  adra <= (adra_d);
END v20;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen
    IS
  PORT(
    qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea : OUT STD_LOGIC;
    da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    adra_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
    da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    wea_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
    rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
  );
END inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen;

ARCHITECTURE v20 OF inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen
    IS
  -- Default Constants

BEGIN
  qa_d <= qa;
  wea <= (rwA_rw_ram_ir_internal_WMASK_B_d);
  da <= (da_d);
  adra <= (adra_d);
END v20;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIT_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIT_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (40 DOWNTO 0);
    STAGE_LOOP_C_0_tr0 : IN STD_LOGIC;
    modExp_while_C_4_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_1_tr0 : IN STD_LOGIC;
    COMP_LOOP_1_modExp_1_while_C_4_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_10_tr0 : IN STD_LOGIC;
    COMP_LOOP_2_modExp_1_while_C_4_tr0 : IN STD_LOGIC;
    COMP_LOOP_C_20_tr0 : IN STD_LOGIC;
    VEC_LOOP_C_0_tr0 : IN STD_LOGIC;
    STAGE_LOOP_C_1_tr0 : IN STD_LOGIC
  );
END inPlaceNTT_DIT_core_core_fsm;

ARCHITECTURE v20 OF inPlaceNTT_DIT_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for inPlaceNTT_DIT_core_core_fsm_1
  TYPE inPlaceNTT_DIT_core_core_fsm_1_ST IS (main_C_0, STAGE_LOOP_C_0, modExp_while_C_0,
      modExp_while_C_1, modExp_while_C_2, modExp_while_C_3, modExp_while_C_4, COMP_LOOP_C_0,
      COMP_LOOP_C_1, COMP_LOOP_1_modExp_1_while_C_0, COMP_LOOP_1_modExp_1_while_C_1,
      COMP_LOOP_1_modExp_1_while_C_2, COMP_LOOP_1_modExp_1_while_C_3, COMP_LOOP_1_modExp_1_while_C_4,
      COMP_LOOP_C_2, COMP_LOOP_C_3, COMP_LOOP_C_4, COMP_LOOP_C_5, COMP_LOOP_C_6,
      COMP_LOOP_C_7, COMP_LOOP_C_8, COMP_LOOP_C_9, COMP_LOOP_C_10, COMP_LOOP_C_11,
      COMP_LOOP_2_modExp_1_while_C_0, COMP_LOOP_2_modExp_1_while_C_1, COMP_LOOP_2_modExp_1_while_C_2,
      COMP_LOOP_2_modExp_1_while_C_3, COMP_LOOP_2_modExp_1_while_C_4, COMP_LOOP_C_12,
      COMP_LOOP_C_13, COMP_LOOP_C_14, COMP_LOOP_C_15, COMP_LOOP_C_16, COMP_LOOP_C_17,
      COMP_LOOP_C_18, COMP_LOOP_C_19, COMP_LOOP_C_20, VEC_LOOP_C_0, STAGE_LOOP_C_1,
      main_C_1);

  SIGNAL state_var : inPlaceNTT_DIT_core_core_fsm_1_ST;
  SIGNAL state_var_NS : inPlaceNTT_DIT_core_core_fsm_1_ST;

BEGIN
  inPlaceNTT_DIT_core_core_fsm_1 : PROCESS (STAGE_LOOP_C_0_tr0, modExp_while_C_4_tr0,
      COMP_LOOP_C_1_tr0, COMP_LOOP_1_modExp_1_while_C_4_tr0, COMP_LOOP_C_10_tr0,
      COMP_LOOP_2_modExp_1_while_C_4_tr0, COMP_LOOP_C_20_tr0, VEC_LOOP_C_0_tr0, STAGE_LOOP_C_1_tr0,
      state_var)
  BEGIN
    CASE state_var IS
      WHEN STAGE_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000000010");
        IF ( STAGE_LOOP_C_0_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_0;
        ELSE
          state_var_NS <= modExp_while_C_0;
        END IF;
      WHEN modExp_while_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000000100");
        state_var_NS <= modExp_while_C_1;
      WHEN modExp_while_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000001000");
        state_var_NS <= modExp_while_C_2;
      WHEN modExp_while_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000010000");
        state_var_NS <= modExp_while_C_3;
      WHEN modExp_while_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000100000");
        state_var_NS <= modExp_while_C_4;
      WHEN modExp_while_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000001000000");
        IF ( modExp_while_C_4_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_0;
        ELSE
          state_var_NS <= modExp_while_C_0;
        END IF;
      WHEN COMP_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000010000000");
        state_var_NS <= COMP_LOOP_C_1;
      WHEN COMP_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000100000000");
        IF ( COMP_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_2;
        ELSE
          state_var_NS <= COMP_LOOP_1_modExp_1_while_C_0;
        END IF;
      WHEN COMP_LOOP_1_modExp_1_while_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000001000000000");
        state_var_NS <= COMP_LOOP_1_modExp_1_while_C_1;
      WHEN COMP_LOOP_1_modExp_1_while_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000010000000000");
        state_var_NS <= COMP_LOOP_1_modExp_1_while_C_2;
      WHEN COMP_LOOP_1_modExp_1_while_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000100000000000");
        state_var_NS <= COMP_LOOP_1_modExp_1_while_C_3;
      WHEN COMP_LOOP_1_modExp_1_while_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000001000000000000");
        state_var_NS <= COMP_LOOP_1_modExp_1_while_C_4;
      WHEN COMP_LOOP_1_modExp_1_while_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000010000000000000");
        IF ( COMP_LOOP_1_modExp_1_while_C_4_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_2;
        ELSE
          state_var_NS <= COMP_LOOP_1_modExp_1_while_C_0;
        END IF;
      WHEN COMP_LOOP_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000100000000000000");
        state_var_NS <= COMP_LOOP_C_3;
      WHEN COMP_LOOP_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000001000000000000000");
        state_var_NS <= COMP_LOOP_C_4;
      WHEN COMP_LOOP_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000010000000000000000");
        state_var_NS <= COMP_LOOP_C_5;
      WHEN COMP_LOOP_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000100000000000000000");
        state_var_NS <= COMP_LOOP_C_6;
      WHEN COMP_LOOP_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000001000000000000000000");
        state_var_NS <= COMP_LOOP_C_7;
      WHEN COMP_LOOP_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000010000000000000000000");
        state_var_NS <= COMP_LOOP_C_8;
      WHEN COMP_LOOP_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000100000000000000000000");
        state_var_NS <= COMP_LOOP_C_9;
      WHEN COMP_LOOP_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000001000000000000000000000");
        state_var_NS <= COMP_LOOP_C_10;
      WHEN COMP_LOOP_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000010000000000000000000000");
        IF ( COMP_LOOP_C_10_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_11;
        END IF;
      WHEN COMP_LOOP_C_11 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000100000000000000000000000");
        state_var_NS <= COMP_LOOP_2_modExp_1_while_C_0;
      WHEN COMP_LOOP_2_modExp_1_while_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000001000000000000000000000000");
        state_var_NS <= COMP_LOOP_2_modExp_1_while_C_1;
      WHEN COMP_LOOP_2_modExp_1_while_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000010000000000000000000000000");
        state_var_NS <= COMP_LOOP_2_modExp_1_while_C_2;
      WHEN COMP_LOOP_2_modExp_1_while_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000100000000000000000000000000");
        state_var_NS <= COMP_LOOP_2_modExp_1_while_C_3;
      WHEN COMP_LOOP_2_modExp_1_while_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000001000000000000000000000000000");
        state_var_NS <= COMP_LOOP_2_modExp_1_while_C_4;
      WHEN COMP_LOOP_2_modExp_1_while_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000010000000000000000000000000000");
        IF ( COMP_LOOP_2_modExp_1_while_C_4_tr0 = '1' ) THEN
          state_var_NS <= COMP_LOOP_C_12;
        ELSE
          state_var_NS <= COMP_LOOP_2_modExp_1_while_C_0;
        END IF;
      WHEN COMP_LOOP_C_12 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000100000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_13;
      WHEN COMP_LOOP_C_13 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000001000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_14;
      WHEN COMP_LOOP_C_14 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000010000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_15;
      WHEN COMP_LOOP_C_15 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000100000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_16;
      WHEN COMP_LOOP_C_16 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001000000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_17;
      WHEN COMP_LOOP_C_17 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010000000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_18;
      WHEN COMP_LOOP_C_18 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100000000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_19;
      WHEN COMP_LOOP_C_19 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000000000000000000000000000000000000");
        state_var_NS <= COMP_LOOP_C_20;
      WHEN COMP_LOOP_C_20 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000000000000000000000000000000000000");
        IF ( COMP_LOOP_C_20_tr0 = '1' ) THEN
          state_var_NS <= VEC_LOOP_C_0;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN VEC_LOOP_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000000000000000000000000000000000000");
        IF ( VEC_LOOP_C_0_tr0 = '1' ) THEN
          state_var_NS <= STAGE_LOOP_C_1;
        ELSE
          state_var_NS <= COMP_LOOP_C_0;
        END IF;
      WHEN STAGE_LOOP_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000000000000000000000000000000000000");
        IF ( STAGE_LOOP_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= STAGE_LOOP_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000000000000000000000000000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000000000001");
        state_var_NS <= STAGE_LOOP_C_0;
    END CASE;
  END PROCESS inPlaceNTT_DIT_core_core_fsm_1;

  inPlaceNTT_DIT_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS inPlaceNTT_DIT_core_core_fsm_1_REG;

END v20;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIT_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIT_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    r_rsc_triosy_lz : OUT STD_LOGIC;
    vec_rsc_0_0_i_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_1_i_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
    vec_rsc_0_0_i_adra_d_pff : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    vec_rsc_0_0_i_da_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_i_wea_d_pff : OUT STD_LOGIC;
    vec_rsc_0_1_i_wea_d_pff : OUT STD_LOGIC
  );
END inPlaceNTT_DIT_core;

ARCHITECTURE v20 OF inPlaceNTT_DIT_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL p_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL r_rsci_idat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_a : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_b : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_z : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (40 DOWNTO 0);
  SIGNAL and_dcpl_4 : STD_LOGIC;
  SIGNAL or_dcpl_29 : STD_LOGIC;
  SIGNAL or_dcpl_42 : STD_LOGIC;
  SIGNAL or_dcpl_50 : STD_LOGIC;
  SIGNAL and_dcpl_75 : STD_LOGIC;
  SIGNAL and_dcpl_86 : STD_LOGIC;
  SIGNAL or_dcpl_63 : STD_LOGIC;
  SIGNAL or_dcpl_69 : STD_LOGIC;
  SIGNAL or_dcpl_70 : STD_LOGIC;
  SIGNAL or_tmp_41 : STD_LOGIC;
  SIGNAL or_tmp_59 : STD_LOGIC;
  SIGNAL or_tmp_88 : STD_LOGIC;
  SIGNAL or_tmp_92 : STD_LOGIC;
  SIGNAL exit_COMP_LOOP_1_modExp_1_while_sva : STD_LOGIC;
  SIGNAL COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm : STD_LOGIC;
  SIGNAL VEC_LOOP_j_sva_11_0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL p_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL STAGE_LOOP_lshift_psp_sva_mx0w0 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL modExp_exp_1_0_1_sva : STD_LOGIC;
  SIGNAL COMP_LOOP_acc_10_cse_12_1_1_sva : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_1_cse_sva : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL or_151_m1c : STD_LOGIC;
  SIGNAL reg_vec_rsc_triosy_0_1_obj_ld_cse : STD_LOGIC;
  SIGNAL COMP_LOOP_k_9_1_sva_7_0 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_psp_sva_1 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL COMP_LOOP_acc_psp_sva : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL modExp_base_1_sva_mx1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL or_tmp_132 : STD_LOGIC;
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (64 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL r_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL STAGE_LOOP_i_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL STAGE_LOOP_lshift_psp_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL modExp_result_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_exp_1_7_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_6_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_5_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_4_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_3_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_2_1_sva : STD_LOGIC;
  SIGNAL modExp_exp_1_1_1_sva : STD_LOGIC;
  SIGNAL modExp_1_result_1_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_exp_1_0_1_sva_1 : STD_LOGIC;
  SIGNAL tmp_2_lpi_4_dfm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_base_1_sva : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL COMP_LOOP_1_acc_8_itm : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL STAGE_LOOP_i_3_0_sva_2 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_a_mx0c1 : STD_LOGIC;
  SIGNAL modulo_result_rem_cmp_a_mx0c3 : STD_LOGIC;
  SIGNAL modExp_result_sva_mx0c0 : STD_LOGIC;
  SIGNAL modExp_exp_sva_mx0w0 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_1_result_1_sva_mx0c2 : STD_LOGIC;
  SIGNAL modExp_while_and_3 : STD_LOGIC;
  SIGNAL modExp_while_and_5 : STD_LOGIC;
  SIGNAL modExp_exp_sva_mx0_63_1 : STD_LOGIC_VECTOR (62 DOWNTO 0);
  SIGNAL modExp_result_and_rgt : STD_LOGIC;
  SIGNAL modExp_result_and_1_rgt : STD_LOGIC;
  SIGNAL modExp_1_result_and_rgt : STD_LOGIC;
  SIGNAL modExp_1_result_and_1_rgt : STD_LOGIC;
  SIGNAL or_152_rgt : STD_LOGIC;
  SIGNAL COMP_LOOP_or_1_cse : STD_LOGIC;
  SIGNAL STAGE_LOOP_acc_itm_2_1 : STD_LOGIC;
  SIGNAL operator_64_false_1_or_1_cse : STD_LOGIC;

  SIGNAL COMP_LOOP_1_acc_5_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_or_nl : STD_LOGIC;
  SIGNAL nor_nl : STD_LOGIC;
  SIGNAL or_154_nl : STD_LOGIC;
  SIGNAL or_155_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_10_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_and_3_nl : STD_LOGIC;
  SIGNAL or_159_nl : STD_LOGIC;
  SIGNAL or_162_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_1_acc_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL COMP_LOOP_mux1h_17_nl : STD_LOGIC;
  SIGNAL or_206_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_38_nl : STD_LOGIC;
  SIGNAL or_210_nl : STD_LOGIC;
  SIGNAL STAGE_LOOP_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL or_118_nl : STD_LOGIC;
  SIGNAL modExp_while_if_mux1h_1_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modExp_while_if_or_1_nl : STD_LOGIC;
  SIGNAL or_256_nl : STD_LOGIC;
  SIGNAL modExp_while_if_modExp_while_if_mux1h_1_nl : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL modExp_while_if_and_2_nl : STD_LOGIC;
  SIGNAL modExp_while_if_and_3_nl : STD_LOGIC;
  SIGNAL operator_64_false_1_operator_64_false_1_or_1_nl : STD_LOGIC_VECTOR (51 DOWNTO
      0);
  SIGNAL operator_64_false_1_and_2_nl : STD_LOGIC_VECTOR (51 DOWNTO 0);
  SIGNAL operator_64_false_1_mux_1_nl : STD_LOGIC_VECTOR (51 DOWNTO 0);
  SIGNAL operator_64_false_1_nor_2_nl : STD_LOGIC;
  SIGNAL operator_64_false_1_or_11_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_64_false_1_and_3_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_64_false_1_mux1h_5_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_64_false_1_nor_3_nl : STD_LOGIC;
  SIGNAL operator_64_false_1_or_12_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_64_false_1_mux1h_6_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL operator_64_false_1_or_13_nl : STD_LOGIC;
  SIGNAL operator_64_false_1_mux1h_7_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL operator_64_false_1_or_14_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL operator_64_false_1_mux1h_8_nl : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (65 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_or_3_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_or_4_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux_43_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_mux1h_66_nl : STD_LOGIC_VECTOR (62 DOWNTO 0);
  SIGNAL COMP_LOOP_or_14_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_55_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_56_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_57_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_58_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_59_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_60_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_61_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_62_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_63_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_64_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_65_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_66_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_67_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_68_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_69_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_70_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_71_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_72_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_73_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_74_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_75_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_76_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_77_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_78_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_79_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_80_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_81_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_82_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_83_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_84_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_85_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_86_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_87_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_88_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_89_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_90_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_91_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_92_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_93_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_94_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_95_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_96_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_97_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_98_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_99_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_100_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_101_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_102_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_103_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_104_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_105_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_106_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_107_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_108_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_109_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_and_8_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COMP_LOOP_COMP_LOOP_mux_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL COMP_LOOP_or_15_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_nor_7_nl : STD_LOGIC;
  SIGNAL COMP_LOOP_COMP_LOOP_or_5_nl : STD_LOGIC;
  SIGNAL p_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL p_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL r_rsci_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL r_rsci_idat_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL modulo_result_rem_cmp_a_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_b_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL modulo_result_rem_cmp_z_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  SIGNAL STAGE_LOOP_lshift_rg_a : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL STAGE_LOOP_lshift_rg_s : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL STAGE_LOOP_lshift_rg_z : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT inPlaceNTT_DIT_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (40 DOWNTO 0);
      STAGE_LOOP_C_0_tr0 : IN STD_LOGIC;
      modExp_while_C_4_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_1_tr0 : IN STD_LOGIC;
      COMP_LOOP_1_modExp_1_while_C_4_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_10_tr0 : IN STD_LOGIC;
      COMP_LOOP_2_modExp_1_while_C_4_tr0 : IN STD_LOGIC;
      COMP_LOOP_C_20_tr0 : IN STD_LOGIC;
      VEC_LOOP_C_0_tr0 : IN STD_LOGIC;
      STAGE_LOOP_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (40 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_10_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_2_modExp_1_while_C_4_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0 : STD_LOGIC;
  SIGNAL inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  PROCEDURE divmod_65_11(
    left:UNSIGNED;
    right:UNSIGNED;
    result_div:OUT UNSIGNED(64 DOWNTO 0);
    result_mod:OUT UNSIGNED(10 DOWNTO 0))
  IS
    VARIABLE left_buffer:UNSIGNED(75 DOWNTO 0);
    VARIABLE diff:UNSIGNED(11 DOWNTO 0);
  BEGIN
    left_buffer:=(OTHERS=>'0');
    left_buffer(64 DOWNTO 0):=left;
    FOR i IN 64 DOWNTO 0 LOOP
      diff:=left_buffer(75 DOWNTO 64)-UNSIGNED('0'&right);
      result_div(i):=NOT diff(11);
      IF diff(11)='0' THEN
        left_buffer(75 DOWNTO 64):=diff;
      END IF;
      left_buffer(75 DOWNTO 1):=left_buffer(74 DOWNTO 0);
    END LOOP;
    result_mod:=left_buffer(75 DOWNTO 65);
  END;

  FUNCTION rslv_65(input1:STD_LOGIC_VECTOR;input2:STD_LOGIC_VECTOR)
  RETURN STD_LOGIC_VECTOR IS
    ALIAS input1_array:STD_LOGIC_VECTOR(64 DOWNTO 0) IS input1;
    ALIAS input2_array:STD_LOGIC_VECTOR(64 DOWNTO 0) IS input2;
    VARIABLE result:STD_LOGIC_VECTOR(64 DOWNTO 0);
  BEGIN
    result:=(OTHERS=>'0');
    -- pragma translate_off
    FOR i IN 64 DOWNTO 0 LOOP
      result(i):=resolved(input1_array(i)&input2_array(i));
    END LOOP;
    -- pragma translate_on
    RETURN result;
  END;

  FUNCTION FABS_65(input_val:SIGNED(64 DOWNTO 0))
  RETURN UNSIGNED IS
  BEGIN
    CASE input_val(64) IS
    WHEN '1'
      -- pragma translate_off
      | 'H'
      -- pragma translate_on
      =>RETURN UNSIGNED'( "0")-UNSIGNED(input_val);
    WHEN '0'
      -- pragma translate_off
      | 'L'
      -- pragma translate_on
      =>RETURN UNSIGNED(input_val);
    WHEN OTHERS =>
      RETURN UNSIGNED(rslv_65(
        STD_LOGIC_VECTOR(input_val),
        STD_LOGIC_VECTOR(UNSIGNED'( "0"-UNSIGNED(input_val)))
      ));
    END CASE;
  END;

  FUNCTION rslv_11(input1:STD_LOGIC_VECTOR;input2:STD_LOGIC_VECTOR)
  RETURN STD_LOGIC_VECTOR IS
    ALIAS input1_array:STD_LOGIC_VECTOR(10 DOWNTO 0) IS input1;
    ALIAS input2_array:STD_LOGIC_VECTOR(10 DOWNTO 0) IS input2;
    VARIABLE result:STD_LOGIC_VECTOR(10 DOWNTO 0);
  BEGIN
    result:=(OTHERS=>'0');
    -- pragma translate_off
    FOR i IN 10 DOWNTO 0 LOOP
      result(i):=resolved(input1_array(i)&input2_array(i));
    END LOOP;
    -- pragma translate_on
    RETURN result;
  END;

  FUNCTION FABS_11(input_val:SIGNED(10 DOWNTO 0))
  RETURN UNSIGNED IS
  BEGIN
    CASE input_val(10) IS
    WHEN '1'
      -- pragma translate_off
      | 'H'
      -- pragma translate_on
      =>RETURN UNSIGNED'( "0")-UNSIGNED(input_val);
    WHEN '0'
      -- pragma translate_off
      | 'L'
      -- pragma translate_on
      =>RETURN UNSIGNED(input_val);
    WHEN OTHERS =>
      RETURN UNSIGNED(rslv_11(
        STD_LOGIC_VECTOR(input_val),
        STD_LOGIC_VECTOR(UNSIGNED'( "0"-UNSIGNED(input_val)))
      ));
    END CASE;
  END;

  FUNCTION FDIV_2_65_11(left:SIGNED;right:SIGNED)
  RETURN SIGNED IS
    VARIABLE result_div:UNSIGNED(64 DOWNTO 0);
    VARIABLE result_mod:UNSIGNED(10 DOWNTO 0);
    CONSTANT zeroes:UNSIGNED(64 DOWNTO 0):=(OTHERS=>'0');
  BEGIN
    divmod_65_11(FABS_65(left),FABS_11(right),result_div,result_mod);
    IF to_X01(left(64))/=to_X01(right(10)) THEN
      result_div:=zeroes-result_div;
    END IF;
    RETURN SIGNED(result_div);
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_4_2(input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_11_5_2(input_4 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_3_2(input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_5_2(input_4 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_63_6_2(input_5 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(5 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(62 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(62 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_3_2(input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_64_4_2(input_3 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_7_2(input_6 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
      tmp := (OTHERS=>sel( 5));
      result := result or ( input_5 and tmp);
      tmp := (OTHERS=>sel( 6));
      result := result or ( input_6 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_12_2_2(input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_52_2_2(input_0 : STD_LOGIC_VECTOR(51 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(51 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(51 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_63_2_2(input_0 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(62 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(62 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_64_2_2(input_0 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(63 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(63 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  p_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 2,
      width => 64
      )
    PORT MAP(
      dat => p_rsci_dat,
      idat => p_rsci_idat_1
    );
  p_rsci_dat <= p_rsc_dat;
  p_rsci_idat <= p_rsci_idat_1;

  r_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 3,
      width => 64
      )
    PORT MAP(
      dat => r_rsci_dat,
      idat => r_rsci_idat_1
    );
  r_rsci_dat <= r_rsc_dat;
  r_rsci_idat <= r_rsci_idat_1;

  vec_rsc_triosy_0_1_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_1_obj_ld_cse,
      lz => vec_rsc_triosy_0_1_lz
    );
  vec_rsc_triosy_0_0_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_1_obj_ld_cse,
      lz => vec_rsc_triosy_0_0_lz
    );
  p_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_1_obj_ld_cse,
      lz => p_rsc_triosy_lz
    );
  r_rsc_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_vec_rsc_triosy_0_1_obj_ld_cse,
      lz => r_rsc_triosy_lz
    );
  modulo_result_rem_cmp : mgc_hls.mgc_comps.mgc_rem
    GENERIC MAP(
      width_a => 64,
      width_b => 64,
      signd => 1
      )
    PORT MAP(
      a => modulo_result_rem_cmp_a_1,
      b => modulo_result_rem_cmp_b_1,
      z => modulo_result_rem_cmp_z_1
    );
  modulo_result_rem_cmp_a_1 <= modulo_result_rem_cmp_a;
  modulo_result_rem_cmp_b_1 <= modulo_result_rem_cmp_b;
  modulo_result_rem_cmp_z <= modulo_result_rem_cmp_z_1;

  STAGE_LOOP_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 1,
      signd_a => 0,
      width_s => 4,
      width_z => 10
      )
    PORT MAP(
      a => STAGE_LOOP_lshift_rg_a,
      s => STAGE_LOOP_lshift_rg_s,
      z => STAGE_LOOP_lshift_rg_z
    );
  STAGE_LOOP_lshift_rg_a(0) <= '1';
  STAGE_LOOP_lshift_rg_s <= STAGE_LOOP_i_3_0_sva;
  STAGE_LOOP_lshift_psp_sva_mx0w0 <= STAGE_LOOP_lshift_rg_z;

  inPlaceNTT_DIT_core_core_fsm_inst : inPlaceNTT_DIT_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => inPlaceNTT_DIT_core_core_fsm_inst_fsm_output,
      STAGE_LOOP_C_0_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0,
      modExp_while_C_4_tr0 => exit_COMP_LOOP_1_modExp_1_while_sva,
      COMP_LOOP_C_1_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0,
      COMP_LOOP_1_modExp_1_while_C_4_tr0 => exit_COMP_LOOP_1_modExp_1_while_sva,
      COMP_LOOP_C_10_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_10_tr0,
      COMP_LOOP_2_modExp_1_while_C_4_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_2_modExp_1_while_C_4_tr0,
      COMP_LOOP_C_20_tr0 => exit_COMP_LOOP_1_modExp_1_while_sva,
      VEC_LOOP_C_0_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0,
      STAGE_LOOP_C_1_tr0 => inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_1_tr0
    );
  fsm_output <= inPlaceNTT_DIT_core_core_fsm_inst_fsm_output;
  inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_0_tr0 <= NOT (z_out_2(64));
  inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_1_tr0 <= NOT COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm;
  inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_C_10_tr0 <= NOT COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm;
  inPlaceNTT_DIT_core_core_fsm_inst_COMP_LOOP_2_modExp_1_while_C_4_tr0 <= NOT COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm;
  inPlaceNTT_DIT_core_core_fsm_inst_VEC_LOOP_C_0_tr0 <= z_out_1(12);
  inPlaceNTT_DIT_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 <= NOT STAGE_LOOP_acc_itm_2_1;

  modExp_result_and_rgt <= (NOT modExp_while_and_5) AND (fsm_output(4));
  modExp_result_and_1_rgt <= modExp_while_and_5 AND (fsm_output(4));
  modExp_1_result_and_rgt <= (NOT modExp_while_and_5) AND or_tmp_59;
  modExp_1_result_and_1_rgt <= modExp_while_and_5 AND or_tmp_59;
  or_152_rgt <= (fsm_output(23)) OR (fsm_output(8));
  COMP_LOOP_or_1_cse <= (fsm_output(14)) OR (fsm_output(29));
  STAGE_LOOP_i_3_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STAGE_LOOP_i_3_0_sva)
      + UNSIGNED'( "0001"), 4));
  COMP_LOOP_acc_psp_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(VEC_LOOP_j_sva_11_0(11
      DOWNTO 1)) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_9_1_sva_7_0),
      8), 11), 11));
  modExp_exp_sva_mx0w0 <= STD_LOGIC_VECTOR(CONV_SIGNED(FDIV_2_65_11(SIGNED(z_out_1),CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(STAGE_LOOP_lshift_psp_sva_mx0w0),
      10), 11)), 64));
  modExp_exp_sva_mx0_63_1 <= MUX_v_63_2_2((modExp_exp_sva_mx0w0(63 DOWNTO 1)), (modExp_1_result_1_sva(63
      DOWNTO 1)), fsm_output(6));
  modExp_base_1_sva_mx1 <= MUX_v_64_2_2(modulo_result_rem_cmp_z, (z_out_1(63 DOWNTO
      0)), modulo_result_rem_cmp_z(63));
  modExp_while_and_3 <= (NOT (modulo_result_rem_cmp_z(63))) AND modExp_exp_1_0_1_sva;
  modExp_while_and_5 <= (modulo_result_rem_cmp_z(63)) AND modExp_exp_1_0_1_sva;
  and_dcpl_4 <= NOT((fsm_output(40)) OR (fsm_output(0)));
  or_dcpl_29 <= (fsm_output(36)) OR (fsm_output(21));
  or_dcpl_42 <= (fsm_output(6)) OR (fsm_output(1));
  or_dcpl_50 <= (fsm_output(13)) OR (fsm_output(24));
  and_dcpl_75 <= NOT(CONV_SL_1_1(fsm_output(4 DOWNTO 3)/=STD_LOGIC_VECTOR'("00")));
  and_dcpl_86 <= NOT((fsm_output(10)) OR (fsm_output(6)));
  or_dcpl_63 <= (fsm_output(9)) OR (fsm_output(2));
  or_dcpl_69 <= CONV_SL_1_1(fsm_output(27 DOWNTO 26)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_70 <= (fsm_output(10)) OR (fsm_output(12));
  or_tmp_41 <= (fsm_output(32)) OR (fsm_output(17));
  or_tmp_59 <= (fsm_output(28)) OR (fsm_output(11));
  or_tmp_88 <= or_dcpl_70 OR (fsm_output(25)) OR (fsm_output(11)) OR or_dcpl_69 OR
      or_dcpl_50;
  or_tmp_92 <= (fsm_output(28)) OR (fsm_output(9));
  modulo_result_rem_cmp_a_mx0c1 <= (fsm_output(35)) OR (fsm_output(20)) OR (fsm_output(5))
      OR (fsm_output(19)) OR (fsm_output(12)) OR (fsm_output(34)) OR (fsm_output(11))
      OR (fsm_output(27)) OR (fsm_output(26)) OR (fsm_output(4));
  modulo_result_rem_cmp_a_mx0c3 <= (fsm_output(30)) OR (fsm_output(15));
  modExp_result_sva_mx0c0 <= (fsm_output(40)) OR (fsm_output(0)) OR (fsm_output(39))
      OR (fsm_output(1));
  modExp_1_result_1_sva_mx0c2 <= NOT((NOT and_dcpl_86) OR (fsm_output(28)) OR (fsm_output(14))
      OR (fsm_output(5)) OR (fsm_output(12)) OR (fsm_output(25)) OR (fsm_output(11))
      OR (fsm_output(27)) OR (fsm_output(26)) OR (fsm_output(13)) OR (fsm_output(24))
      OR (fsm_output(1)) OR (fsm_output(29)) OR (NOT and_dcpl_75) OR (fsm_output(9))
      OR (fsm_output(2)));
  STAGE_LOOP_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STAGE_LOOP_i_3_0_sva_2(3
      DOWNTO 1)) + SIGNED'( "011"), 3));
  STAGE_LOOP_acc_itm_2_1 <= STAGE_LOOP_acc_nl(2);
  or_151_m1c <= (fsm_output(6)) OR (fsm_output(13));
  or_118_nl <= (fsm_output(34)) OR (fsm_output(22));
  vec_rsc_0_0_i_adra_d_pff <= MUX1HOT_v_11_5_2(COMP_LOOP_acc_psp_sva_1, (z_out_1(12
      DOWNTO 2)), COMP_LOOP_acc_psp_sva, (COMP_LOOP_acc_10_cse_12_1_1_sva(11 DOWNTO
      1)), (COMP_LOOP_acc_1_cse_sva(11 DOWNTO 1)), STD_LOGIC_VECTOR'( (fsm_output(7))
      & COMP_LOOP_or_1_cse & (fsm_output(19)) & or_dcpl_29 & or_118_nl));
  vec_rsc_0_0_i_da_d_pff <= modExp_base_1_sva_mx1;
  vec_rsc_0_0_i_wea_d_pff <= ((NOT (VEC_LOOP_j_sva_11_0(0))) AND (fsm_output(19)))
      OR ((NOT (COMP_LOOP_acc_10_cse_12_1_1_sva(0))) AND or_dcpl_29) OR ((NOT (COMP_LOOP_acc_1_cse_sva(0)))
      AND (fsm_output(34)));
  vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d <= ((NOT (VEC_LOOP_j_sva_11_0(0)))
      AND (fsm_output(7))) OR ((NOT (z_out_1(1))) AND (fsm_output(29))) OR ((NOT
      (z_out_1(1))) AND (fsm_output(14))) OR (COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm
      AND (NOT (COMP_LOOP_acc_1_cse_sva(0))) AND (fsm_output(22)));
  vec_rsc_0_1_i_wea_d_pff <= ((VEC_LOOP_j_sva_11_0(0)) AND (fsm_output(19))) OR ((COMP_LOOP_acc_10_cse_12_1_1_sva(0))
      AND or_dcpl_29) OR ((COMP_LOOP_acc_1_cse_sva(0)) AND (fsm_output(34)));
  vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d <= ((VEC_LOOP_j_sva_11_0(0)) AND
      (fsm_output(7))) OR ((z_out_1(1)) AND (fsm_output(29))) OR ((z_out_1(1)) AND
      (fsm_output(14))) OR (COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm
      AND (COMP_LOOP_acc_1_cse_sva(0)) AND (fsm_output(22)));
  or_tmp_132 <= (fsm_output(36)) OR (fsm_output(34)) OR (fsm_output(32)) OR (fsm_output(28))
      OR (fsm_output(26)) OR (fsm_output(21)) OR (fsm_output(19)) OR (fsm_output(17))
      OR (fsm_output(13)) OR (fsm_output(11)) OR (fsm_output(6)) OR (fsm_output(4));
  operator_64_false_1_or_1_cse <= (fsm_output(7)) OR (fsm_output(24)) OR (fsm_output(9));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_4 = '0' ) THEN
        p_sva <= p_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((fsm_output(0)) OR (fsm_output(39))) = '1' ) THEN
        STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(STD_LOGIC_VECTOR'( "0001"), STAGE_LOOP_i_3_0_sva_2,
            fsm_output(39));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_4 = '0' ) THEN
        r_sva <= r_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_vec_rsc_triosy_0_1_obj_ld_cse <= '0';
        modExp_exp_1_0_1_sva <= '0';
        modExp_exp_1_7_1_sva <= '0';
        modExp_exp_1_0_1_sva_1 <= '0';
      ELSE
        reg_vec_rsc_triosy_0_1_obj_ld_cse <= (NOT STAGE_LOOP_acc_itm_2_1) AND (fsm_output(39));
        modExp_exp_1_0_1_sva <= (COMP_LOOP_mux1h_10_nl AND (NOT (fsm_output(8))))
            OR (NOT((NOT and_dcpl_86) OR (fsm_output(28)) OR (fsm_output(12)) OR
            (fsm_output(25)) OR (fsm_output(11)) OR (fsm_output(27)) OR (fsm_output(26))
            OR (fsm_output(13)) OR (fsm_output(24)) OR (fsm_output(8)) OR (fsm_output(1))
            OR (fsm_output(3)) OR (fsm_output(9)) OR (fsm_output(2))));
        modExp_exp_1_7_1_sva <= COMP_LOOP_mux1h_17_nl AND (NOT (fsm_output(28)));
        modExp_exp_1_0_1_sva_1 <= COMP_LOOP_mux1h_38_nl AND (NOT (fsm_output(13)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      modulo_result_rem_cmp_b <= p_sva;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((fsm_output(24)) OR (fsm_output(2)) OR modulo_result_rem_cmp_a_mx0c1
          OR (fsm_output(9)) OR modulo_result_rem_cmp_a_mx0c3 OR or_tmp_41) = '1'
          ) THEN
        modulo_result_rem_cmp_a <= MUX1HOT_v_64_3_2(z_out, COMP_LOOP_1_acc_8_itm,
            STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(COMP_LOOP_1_acc_5_nl), 64)), STD_LOGIC_VECTOR'(
            modulo_result_or_nl & modulo_result_rem_cmp_a_mx0c1 & or_tmp_41));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        VEC_LOOP_j_sva_11_0 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( ((fsm_output(38)) OR or_dcpl_42) = '1' ) THEN
        VEC_LOOP_j_sva_11_0 <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), (z_out_1(11
            DOWNTO 0)), (fsm_output(38)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT(and_dcpl_4 AND (NOT (fsm_output(39))) AND (NOT (fsm_output(1)))))
          = '1' ) THEN
        STAGE_LOOP_lshift_psp_sva <= STAGE_LOOP_lshift_psp_sva_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_k_9_1_sva_7_0 <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( ((fsm_output(1)) OR (fsm_output(6)) OR (fsm_output(29)) OR (fsm_output(38)))
          = '1' ) THEN
        COMP_LOOP_k_9_1_sva_7_0 <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), (z_out_2(7
            DOWNTO 0)), nor_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((modExp_while_and_3 OR modExp_while_and_5 OR modExp_result_sva_mx0c0
          OR (NOT((NOT and_dcpl_4) OR (fsm_output(39)) OR (fsm_output(1)) OR (fsm_output(4)))))
          AND (modExp_result_sva_mx0c0 OR modExp_result_and_rgt OR modExp_result_and_1_rgt))
          = '1' ) THEN
        modExp_result_sva <= MUX1HOT_v_64_3_2(STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000001"),
            modulo_result_rem_cmp_z, (z_out_1(63 DOWNTO 0)), STD_LOGIC_VECTOR'( modExp_result_sva_mx0c0
            & modExp_result_and_rgt & modExp_result_and_1_rgt));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_1_result_1_sva <= STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000000");
      ELSIF ( ((modExp_while_and_3 OR modExp_while_and_5 OR or_dcpl_42 OR (fsm_output(10))
          OR (fsm_output(14)) OR (fsm_output(5)) OR (fsm_output(12)) OR (fsm_output(25))
          OR (fsm_output(27)) OR (fsm_output(26)) OR or_dcpl_50 OR (fsm_output(29))
          OR (fsm_output(3)) OR (fsm_output(4)) OR (fsm_output(9)) OR (fsm_output(2))
          OR modExp_1_result_1_sva_mx0c2) AND (or_dcpl_42 OR modExp_1_result_1_sva_mx0c2
          OR modExp_1_result_and_rgt OR modExp_1_result_and_1_rgt)) = '1' ) THEN
        modExp_1_result_1_sva <= MUX1HOT_v_64_4_2(('0' & modExp_exp_sva_mx0_63_1),
            STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000001"),
            modulo_result_rem_cmp_z, (z_out_1(63 DOWNTO 0)), STD_LOGIC_VECTOR'( or_dcpl_42
            & modExp_1_result_1_sva_mx0c2 & modExp_1_result_and_rgt & modExp_1_result_and_1_rgt));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((fsm_output(28)) OR (fsm_output(27)) OR (fsm_output(24)) OR or_dcpl_63))
          = '1' ) THEN
        modExp_base_1_sva <= MUX1HOT_v_64_4_2(r_sva, modulo_result_rem_cmp_z, (z_out_1(63
            DOWNTO 0)), modExp_result_sva, STD_LOGIC_VECTOR'( (fsm_output(1)) & or_154_nl
            & or_155_nl & or_152_rgt));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((fsm_output(18)) OR (fsm_output(33)) OR (fsm_output(19)) OR (fsm_output(34))
          OR (fsm_output(11)) OR (fsm_output(26)) OR (fsm_output(4)))) = '1' ) THEN
        COMP_LOOP_1_acc_8_itm <= MUX1HOT_v_64_3_2(('0' & modExp_exp_sva_mx0_63_1),
            z_out, (z_out_2(63 DOWNTO 0)), STD_LOGIC_VECTOR'( or_dcpl_42 & or_162_nl
            & or_tmp_41));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_COMP_LOOP_1_modExp_1_while_sva <= '0';
      ELSIF ( ((fsm_output(29)) OR (fsm_output(9)) OR (fsm_output(2))) = '1' ) THEN
        exit_COMP_LOOP_1_modExp_1_while_sva <= MUX1HOT_s_1_3_2((NOT (z_out_2(63))),
            (NOT (z_out_1(8))), (NOT (COMP_LOOP_1_acc_nl(9))), STD_LOGIC_VECTOR'(
            (fsm_output(2)) & (fsm_output(9)) & (fsm_output(29))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (fsm_output(7)) = '1' ) THEN
        COMP_LOOP_acc_psp_sva <= COMP_LOOP_acc_psp_sva_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((fsm_output(14)) OR (fsm_output(24)) OR (fsm_output(7))) = '1' ) THEN
        COMP_LOOP_1_operator_64_false_1_slc_operator_64_false_1_acc_9_1_itm <= MUX1HOT_s_1_3_2((z_out_1(9)),
            (z_out_2(9)), (z_out_1(8)), STD_LOGIC_VECTOR'( (fsm_output(7)) & (fsm_output(14))
            & (fsm_output(24))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_1_cse_sva <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( ((fsm_output(35)) OR (fsm_output(37)) OR (fsm_output(36)) OR (fsm_output(6))
          OR (fsm_output(5)) OR (fsm_output(40)) OR (fsm_output(0)) OR (fsm_output(34))
          OR (fsm_output(7)) OR (fsm_output(39)) OR (fsm_output(1)) OR (fsm_output(38))
          OR (NOT and_dcpl_75) OR (fsm_output(2))) = '1' ) THEN
        COMP_LOOP_acc_1_cse_sva <= z_out_2(11 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_6_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_6_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(5)), modExp_exp_1_7_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(6)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_5_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_5_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(4)), modExp_exp_1_6_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(5)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_4_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_4_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(3)), modExp_exp_1_5_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(4)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_3_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_3_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(2)), modExp_exp_1_4_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(3)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_2_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_2_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(1)), modExp_exp_1_3_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(2)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        modExp_exp_1_1_1_sva <= '0';
      ELSIF ( or_tmp_88 = '0' ) THEN
        modExp_exp_1_1_1_sva <= MUX1HOT_s_1_3_2((COMP_LOOP_k_9_1_sva_7_0(0)), modExp_exp_1_2_1_sva,
            (COMP_LOOP_k_9_1_sva_7_0(1)), STD_LOGIC_VECTOR'( (fsm_output(8)) & or_tmp_92
            & (fsm_output(23))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( or_152_rgt = '1' ) THEN
        tmp_2_lpi_4_dfm <= MUX_v_64_2_2(vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, or_206_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        COMP_LOOP_acc_10_cse_12_1_1_sva <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( COMP_LOOP_or_1_cse = '1' ) THEN
        COMP_LOOP_acc_10_cse_12_1_1_sva <= z_out_1(12 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS;
  COMP_LOOP_and_3_nl <= (NOT (fsm_output(6))) AND or_dcpl_42;
  or_159_nl <= or_dcpl_70 OR (fsm_output(25)) OR or_dcpl_69 OR or_dcpl_50 OR (fsm_output(3))
      OR or_dcpl_63;
  COMP_LOOP_mux1h_10_nl <= MUX1HOT_s_1_4_2((modExp_exp_sva_mx0w0(0)), (modExp_1_result_1_sva(0)),
      modExp_exp_1_0_1_sva_1, modExp_exp_1_0_1_sva, STD_LOGIC_VECTOR'( COMP_LOOP_and_3_nl
      & (fsm_output(6)) & or_tmp_59 & or_159_nl));
  COMP_LOOP_mux1h_17_nl <= MUX1HOT_s_1_4_2((COMP_LOOP_k_9_1_sva_7_0(6)), modExp_exp_1_0_1_sva_1,
      modExp_exp_1_7_1_sva, (COMP_LOOP_k_9_1_sva_7_0(7)), STD_LOGIC_VECTOR'( (fsm_output(8))
      & (fsm_output(9)) & or_tmp_88 & (fsm_output(23))));
  or_210_nl <= (fsm_output(10)) OR (fsm_output(25)) OR (fsm_output(27)) OR (fsm_output(26))
      OR (fsm_output(24));
  COMP_LOOP_mux1h_38_nl <= MUX1HOT_s_1_4_2((COMP_LOOP_k_9_1_sva_7_0(7)), modExp_exp_1_1_1_sva,
      modExp_exp_1_0_1_sva_1, (COMP_LOOP_k_9_1_sva_7_0(0)), STD_LOGIC_VECTOR'( (fsm_output(8))
      & or_tmp_92 & or_210_nl & (fsm_output(23))));
  COMP_LOOP_1_acc_5_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(tmp_2_lpi_4_dfm) +
      SIGNED(modExp_base_1_sva_mx1), 64));
  modulo_result_or_nl <= (fsm_output(2)) OR modulo_result_rem_cmp_a_mx0c3 OR (fsm_output(9))
      OR (fsm_output(24));
  nor_nl <= NOT(or_dcpl_42 OR (fsm_output(38)));
  or_154_nl <= ((NOT (modulo_result_rem_cmp_z(63))) AND or_151_m1c) OR ((NOT (modulo_result_rem_cmp_z(63)))
      AND (fsm_output(26)));
  or_155_nl <= ((modulo_result_rem_cmp_z(63)) AND or_151_m1c) OR ((modulo_result_rem_cmp_z(63))
      AND (fsm_output(26)));
  or_162_nl <= (fsm_output(10)) OR (fsm_output(3)) OR (fsm_output(25));
  COMP_LOOP_1_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED((z_out_2(8 DOWNTO 0))
      & '0') + SIGNED('1' & (NOT (STAGE_LOOP_lshift_psp_sva(9 DOWNTO 1)))) + SIGNED'(
      "0000000001"), 10));
  or_206_nl <= ((COMP_LOOP_acc_1_cse_sva(0)) AND (fsm_output(23))) OR ((VEC_LOOP_j_sva_11_0(0))
      AND (fsm_output(8)));
  modExp_while_if_or_1_nl <= modulo_result_rem_cmp_a_mx0c3 OR (fsm_output(25)) OR
      (fsm_output(9));
  or_256_nl <= (fsm_output(24)) OR (fsm_output(10)) OR (fsm_output(3));
  modExp_while_if_mux1h_1_nl <= MUX1HOT_v_64_3_2(modExp_result_sva, modExp_1_result_1_sva,
      modExp_base_1_sva, STD_LOGIC_VECTOR'( (fsm_output(2)) & modExp_while_if_or_1_nl
      & or_256_nl));
  modExp_while_if_and_2_nl <= (NOT (COMP_LOOP_acc_10_cse_12_1_1_sva(0))) AND modulo_result_rem_cmp_a_mx0c3;
  modExp_while_if_and_3_nl <= (COMP_LOOP_acc_10_cse_12_1_1_sva(0)) AND modulo_result_rem_cmp_a_mx0c3;
  modExp_while_if_modExp_while_if_mux1h_1_nl <= MUX1HOT_v_64_3_2(modExp_base_1_sva,
      vec_rsc_0_0_i_qa_d, vec_rsc_0_1_i_qa_d, STD_LOGIC_VECTOR'( (NOT modulo_result_rem_cmp_a_mx0c3)
      & modExp_while_if_and_2_nl & modExp_while_if_and_3_nl));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(modExp_while_if_mux1h_1_nl)
      * UNSIGNED(modExp_while_if_modExp_while_if_mux1h_1_nl)), 64));
  operator_64_false_1_mux_1_nl <= MUX_v_52_2_2((p_sva(63 DOWNTO 12)), (modulo_result_rem_cmp_z(63
      DOWNTO 12)), or_tmp_132);
  operator_64_false_1_nor_2_nl <= NOT((fsm_output(14)) OR (fsm_output(29)) OR (fsm_output(38)));
  operator_64_false_1_and_2_nl <= MUX_v_52_2_2(STD_LOGIC_VECTOR'("0000000000000000000000000000000000000000000000000000"),
      operator_64_false_1_mux_1_nl, operator_64_false_1_nor_2_nl);
  operator_64_false_1_operator_64_false_1_or_1_nl <= MUX_v_52_2_2(operator_64_false_1_and_2_nl,
      STD_LOGIC_VECTOR'("1111111111111111111111111111111111111111111111111111"),
      operator_64_false_1_or_1_cse);
  operator_64_false_1_mux1h_5_nl <= MUX1HOT_v_2_3_2((p_sva(11 DOWNTO 10)), (modulo_result_rem_cmp_z(11
      DOWNTO 10)), (VEC_LOOP_j_sva_11_0(11 DOWNTO 10)), STD_LOGIC_VECTOR'( (fsm_output(1))
      & or_tmp_132 & (fsm_output(38))));
  operator_64_false_1_nor_3_nl <= NOT((fsm_output(14)) OR (fsm_output(29)));
  operator_64_false_1_and_3_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), operator_64_false_1_mux1h_5_nl,
      operator_64_false_1_nor_3_nl);
  operator_64_false_1_or_11_nl <= MUX_v_2_2_2(operator_64_false_1_and_3_nl, STD_LOGIC_VECTOR'("11"),
      operator_64_false_1_or_1_cse);
  operator_64_false_1_mux1h_6_nl <= MUX1HOT_v_2_5_2(STD_LOGIC_VECTOR'( '1' & (NOT
      (COMP_LOOP_k_9_1_sva_7_0(7)))), (p_sva(9 DOWNTO 8)), (modulo_result_rem_cmp_z(9
      DOWNTO 8)), (z_out_3(9 DOWNTO 8)), (VEC_LOOP_j_sva_11_0(9 DOWNTO 8)), STD_LOGIC_VECTOR'(
      (fsm_output(7)) & (fsm_output(1)) & or_tmp_132 & COMP_LOOP_or_1_cse & (fsm_output(38))));
  operator_64_false_1_or_13_nl <= (fsm_output(24)) OR (fsm_output(9));
  operator_64_false_1_or_12_nl <= MUX_v_2_2_2(operator_64_false_1_mux1h_6_nl, STD_LOGIC_VECTOR'("11"),
      operator_64_false_1_or_13_nl);
  operator_64_false_1_mux1h_7_nl <= MUX1HOT_v_8_7_2(((NOT (COMP_LOOP_k_9_1_sva_7_0(6
      DOWNTO 0))) & '1'), STD_LOGIC_VECTOR'( (NOT modExp_exp_1_7_1_sva) & (NOT modExp_exp_1_6_1_sva)
      & (NOT modExp_exp_1_5_1_sva) & (NOT modExp_exp_1_4_1_sva) & (NOT modExp_exp_1_3_1_sva)
      & (NOT modExp_exp_1_2_1_sva) & (NOT modExp_exp_1_1_1_sva) & (NOT modExp_exp_1_0_1_sva_1)),
      (p_sva(7 DOWNTO 0)), (modulo_result_rem_cmp_z(7 DOWNTO 0)), (z_out_3(7 DOWNTO
      0)), (VEC_LOOP_j_sva_11_0(7 DOWNTO 0)), STD_LOGIC_VECTOR'( (NOT modExp_exp_1_0_1_sva_1)
      & (NOT modExp_exp_1_7_1_sva) & (NOT modExp_exp_1_6_1_sva) & (NOT modExp_exp_1_5_1_sva)
      & (NOT modExp_exp_1_4_1_sva) & (NOT modExp_exp_1_3_1_sva) & (NOT modExp_exp_1_2_1_sva)
      & (NOT modExp_exp_1_1_1_sva)), STD_LOGIC_VECTOR'( (fsm_output(7)) & (fsm_output(24))
      & (fsm_output(1)) & or_tmp_132 & COMP_LOOP_or_1_cse & (fsm_output(38)) & (fsm_output(9))));
  operator_64_false_1_mux1h_8_nl <= MUX1HOT_v_64_4_2(STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000000000001"),
      p_sva, (STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000")
      & VEC_LOOP_j_sva_11_0), (STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000")
      & STAGE_LOOP_lshift_psp_sva), STD_LOGIC_VECTOR'( operator_64_false_1_or_1_cse
      & or_tmp_132 & COMP_LOOP_or_1_cse & (fsm_output(38))));
  operator_64_false_1_or_14_nl <= MUX_v_64_2_2(operator_64_false_1_mux1h_8_nl, STD_LOGIC_VECTOR'("1111111111111111111111111111111111111111111111111111111111111111"),
      (fsm_output(1)));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(operator_64_false_1_operator_64_false_1_or_1_nl
      & operator_64_false_1_or_11_nl & operator_64_false_1_or_12_nl & operator_64_false_1_mux1h_7_nl),
      64), 65) + CONV_UNSIGNED(SIGNED(operator_64_false_1_or_14_nl), 65), 65));
  COMP_LOOP_COMP_LOOP_or_3_nl <= (NOT(or_tmp_41 OR (fsm_output(14)) OR (fsm_output(7))
      OR (fsm_output(29)))) OR CONV_SL_1_1(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"));
  COMP_LOOP_mux_43_nl <= MUX_s_1_2_2((tmp_2_lpi_4_dfm(63)), (NOT (modExp_exp_sva_mx0w0(63))),
      fsm_output(1));
  COMP_LOOP_COMP_LOOP_or_4_nl <= (COMP_LOOP_mux_43_nl AND (NOT((fsm_output(14)) OR
      (fsm_output(7)) OR (fsm_output(29))))) OR (fsm_output(2));
  COMP_LOOP_mux1h_66_nl <= MUX1HOT_v_63_6_2((tmp_2_lpi_4_dfm(62 DOWNTO 0)), (STD_LOGIC_VECTOR'(
      "000000000000000000000000000000000000000000000000000001") & (NOT (STAGE_LOOP_lshift_psp_sva(9
      DOWNTO 1)))), (STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000")
      & VEC_LOOP_j_sva_11_0), (STD_LOGIC_VECTOR'( "0000000000000000000000000000000000000000000000000000000")
      & COMP_LOOP_k_9_1_sva_7_0), (NOT (modExp_exp_sva_mx0w0(62 DOWNTO 0))), (NOT
      (COMP_LOOP_1_acc_8_itm(62 DOWNTO 0))), STD_LOGIC_VECTOR'( or_tmp_41 & (fsm_output(14))
      & (fsm_output(7)) & (fsm_output(29)) & (fsm_output(1)) & (fsm_output(2))));
  COMP_LOOP_or_14_nl <= (NOT((fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)))) OR or_tmp_41 OR (fsm_output(14));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_55_nl <= NOT((modExp_base_1_sva_mx1(63)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_56_nl <= NOT((modExp_base_1_sva_mx1(62)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_57_nl <= NOT((modExp_base_1_sva_mx1(61)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_58_nl <= NOT((modExp_base_1_sva_mx1(60)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_59_nl <= NOT((modExp_base_1_sva_mx1(59)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_60_nl <= NOT((modExp_base_1_sva_mx1(58)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_61_nl <= NOT((modExp_base_1_sva_mx1(57)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_62_nl <= NOT((modExp_base_1_sva_mx1(56)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_63_nl <= NOT((modExp_base_1_sva_mx1(55)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_64_nl <= NOT((modExp_base_1_sva_mx1(54)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_65_nl <= NOT((modExp_base_1_sva_mx1(53)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_66_nl <= NOT((modExp_base_1_sva_mx1(52)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_67_nl <= NOT((modExp_base_1_sva_mx1(51)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_68_nl <= NOT((modExp_base_1_sva_mx1(50)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_69_nl <= NOT((modExp_base_1_sva_mx1(49)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_70_nl <= NOT((modExp_base_1_sva_mx1(48)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_71_nl <= NOT((modExp_base_1_sva_mx1(47)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_72_nl <= NOT((modExp_base_1_sva_mx1(46)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_73_nl <= NOT((modExp_base_1_sva_mx1(45)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_74_nl <= NOT((modExp_base_1_sva_mx1(44)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_75_nl <= NOT((modExp_base_1_sva_mx1(43)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_76_nl <= NOT((modExp_base_1_sva_mx1(42)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_77_nl <= NOT((modExp_base_1_sva_mx1(41)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_78_nl <= NOT((modExp_base_1_sva_mx1(40)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_79_nl <= NOT((modExp_base_1_sva_mx1(39)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_80_nl <= NOT((modExp_base_1_sva_mx1(38)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_81_nl <= NOT((modExp_base_1_sva_mx1(37)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_82_nl <= NOT((modExp_base_1_sva_mx1(36)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_83_nl <= NOT((modExp_base_1_sva_mx1(35)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_84_nl <= NOT((modExp_base_1_sva_mx1(34)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_85_nl <= NOT((modExp_base_1_sva_mx1(33)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_86_nl <= NOT((modExp_base_1_sva_mx1(32)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_87_nl <= NOT((modExp_base_1_sva_mx1(31)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_88_nl <= NOT((modExp_base_1_sva_mx1(30)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_89_nl <= NOT((modExp_base_1_sva_mx1(29)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_90_nl <= NOT((modExp_base_1_sva_mx1(28)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_91_nl <= NOT((modExp_base_1_sva_mx1(27)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_92_nl <= NOT((modExp_base_1_sva_mx1(26)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_93_nl <= NOT((modExp_base_1_sva_mx1(25)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_94_nl <= NOT((modExp_base_1_sva_mx1(24)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_95_nl <= NOT((modExp_base_1_sva_mx1(23)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_96_nl <= NOT((modExp_base_1_sva_mx1(22)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_97_nl <= NOT((modExp_base_1_sva_mx1(21)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_98_nl <= NOT((modExp_base_1_sva_mx1(20)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_99_nl <= NOT((modExp_base_1_sva_mx1(19)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_100_nl <= NOT((modExp_base_1_sva_mx1(18)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_101_nl <= NOT((modExp_base_1_sva_mx1(17)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_102_nl <= NOT((modExp_base_1_sva_mx1(16)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_103_nl <= NOT((modExp_base_1_sva_mx1(15)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_104_nl <= NOT((modExp_base_1_sva_mx1(14)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_105_nl <= NOT((modExp_base_1_sva_mx1(13)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_106_nl <= NOT((modExp_base_1_sva_mx1(12)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_107_nl <= NOT((modExp_base_1_sva_mx1(11)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_108_nl <= NOT((modExp_base_1_sva_mx1(10)) OR
      (fsm_output(14)) OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1))
      OR (fsm_output(2)));
  COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_109_nl <= NOT((modExp_base_1_sva_mx1(9)) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_or_15_nl <= (fsm_output(14)) OR (fsm_output(7));
  COMP_LOOP_COMP_LOOP_mux_3_nl <= MUX_v_8_2_2((NOT (modExp_base_1_sva_mx1(8 DOWNTO
      1))), COMP_LOOP_k_9_1_sva_7_0, COMP_LOOP_or_15_nl);
  COMP_LOOP_nor_7_nl <= NOT((fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2)));
  COMP_LOOP_and_8_nl <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), COMP_LOOP_COMP_LOOP_mux_3_nl,
      COMP_LOOP_nor_7_nl);
  COMP_LOOP_COMP_LOOP_or_5_nl <= (NOT (modExp_base_1_sva_mx1(0))) OR (fsm_output(14))
      OR (fsm_output(7)) OR (fsm_output(29)) OR (fsm_output(1)) OR (fsm_output(2));
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_COMP_LOOP_or_3_nl
      & COMP_LOOP_COMP_LOOP_or_4_nl & COMP_LOOP_mux1h_66_nl & COMP_LOOP_or_14_nl)
      + CONV_UNSIGNED(CONV_SIGNED(SIGNED(COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_55_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_56_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_57_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_58_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_59_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_60_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_61_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_62_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_63_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_64_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_65_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_66_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_67_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_68_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_69_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_70_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_71_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_72_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_73_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_74_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_75_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_76_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_77_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_78_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_79_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_80_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_81_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_82_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_83_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_84_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_85_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_86_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_87_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_88_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_89_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_90_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_91_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_92_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_93_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_94_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_95_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_96_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_97_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_98_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_99_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_100_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_101_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_102_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_103_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_104_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_105_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_106_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_107_nl
      & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_108_nl & COMP_LOOP_COMP_LOOP_COMP_LOOP_nor_109_nl
      & COMP_LOOP_and_8_nl & COMP_LOOP_COMP_LOOP_or_5_nl & '1'), 65), 66), 66));
  z_out_2 <= acc_1_nl(65 DOWNTO 1);
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STAGE_LOOP_lshift_psp_sva) +
      CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(COMP_LOOP_k_9_1_sva_7_0 & (fsm_output(29))),
      9), 10), 10));
END v20;

-- ------------------------------------------------------------------
--  Design Unit:    inPlaceNTT_DIT
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;


ENTITY inPlaceNTT_DIT IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    vec_rsc_0_0_adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    vec_rsc_0_0_da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_0_wea : OUT STD_LOGIC;
    vec_rsc_0_0_qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
    vec_rsc_0_1_adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    vec_rsc_0_1_da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_0_1_wea : OUT STD_LOGIC;
    vec_rsc_0_1_qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
    p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    p_rsc_triosy_lz : OUT STD_LOGIC;
    r_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    r_rsc_triosy_lz : OUT STD_LOGIC
  );
END inPlaceNTT_DIT;

ARCHITECTURE v20 OF inPlaceNTT_DIT IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL vec_rsc_0_0_i_qa_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_1_i_qa_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL vec_rsc_0_0_i_adra_d_iff : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_da_d_iff : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_wea_d_iff : STD_LOGIC;
  SIGNAL vec_rsc_0_1_i_wea_d_iff : STD_LOGIC;

  COMPONENT inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen
    PORT(
      qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea : OUT STD_LOGIC;
      da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      adra_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
      da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_0_i_qa : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_da : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_adra : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_adra_d : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_da_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_0_i_qa_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen
    PORT(
      qa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea : OUT STD_LOGIC;
      da : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      adra : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      adra_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
      da_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      qa_d : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      wea_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_RMASK_B_d : IN STD_LOGIC;
      rwA_rw_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL vec_rsc_0_1_i_qa : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_da : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_adra : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_adra_d : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_da_d : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL vec_rsc_0_1_i_qa_d_1 : STD_LOGIC_VECTOR (63 DOWNTO 0);

  COMPONENT inPlaceNTT_DIT_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      vec_rsc_triosy_0_0_lz : OUT STD_LOGIC;
      vec_rsc_triosy_0_1_lz : OUT STD_LOGIC;
      p_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      p_rsc_triosy_lz : OUT STD_LOGIC;
      r_rsc_dat : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      r_rsc_triosy_lz : OUT STD_LOGIC;
      vec_rsc_0_0_i_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_1_i_qa_d : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d : OUT STD_LOGIC;
      vec_rsc_0_0_i_adra_d_pff : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      vec_rsc_0_0_i_da_d_pff : OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
      vec_rsc_0_0_i_wea_d_pff : OUT STD_LOGIC;
      vec_rsc_0_1_i_wea_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL inPlaceNTT_DIT_core_inst_p_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL inPlaceNTT_DIT_core_inst_r_rsc_dat : STD_LOGIC_VECTOR (63 DOWNTO 0);
  SIGNAL inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_qa_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIT_core_inst_vec_rsc_0_1_i_qa_d : STD_LOGIC_VECTOR (63 DOWNTO
      0);
  SIGNAL inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_adra_d_pff : STD_LOGIC_VECTOR (10
      DOWNTO 0);
  SIGNAL inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_da_d_pff : STD_LOGIC_VECTOR (63 DOWNTO
      0);

BEGIN
  vec_rsc_0_0_i : inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_4_11_64_2048_2048_64_1_gen
    PORT MAP(
      qa => vec_rsc_0_0_i_qa,
      wea => vec_rsc_0_0_wea,
      da => vec_rsc_0_0_i_da,
      adra => vec_rsc_0_0_i_adra,
      adra_d => vec_rsc_0_0_i_adra_d,
      da_d => vec_rsc_0_0_i_da_d,
      qa_d => vec_rsc_0_0_i_qa_d_1,
      wea_d => vec_rsc_0_0_i_wea_d_iff,
      rwA_rw_ram_ir_internal_RMASK_B_d => vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d => vec_rsc_0_0_i_wea_d_iff
    );
  vec_rsc_0_0_i_qa <= vec_rsc_0_0_qa;
  vec_rsc_0_0_da <= vec_rsc_0_0_i_da;
  vec_rsc_0_0_adra <= vec_rsc_0_0_i_adra;
  vec_rsc_0_0_i_adra_d <= vec_rsc_0_0_i_adra_d_iff;
  vec_rsc_0_0_i_da_d <= vec_rsc_0_0_i_da_d_iff;
  vec_rsc_0_0_i_qa_d <= vec_rsc_0_0_i_qa_d_1;

  vec_rsc_0_1_i : inPlaceNTT_DIT_Xilinx_RAMS_BLOCK_2R1W_RBW_DUAL_rwport_5_11_64_2048_2048_64_1_gen
    PORT MAP(
      qa => vec_rsc_0_1_i_qa,
      wea => vec_rsc_0_1_wea,
      da => vec_rsc_0_1_i_da,
      adra => vec_rsc_0_1_i_adra,
      adra_d => vec_rsc_0_1_i_adra_d,
      da_d => vec_rsc_0_1_i_da_d,
      qa_d => vec_rsc_0_1_i_qa_d_1,
      wea_d => vec_rsc_0_1_i_wea_d_iff,
      rwA_rw_ram_ir_internal_RMASK_B_d => vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      rwA_rw_ram_ir_internal_WMASK_B_d => vec_rsc_0_1_i_wea_d_iff
    );
  vec_rsc_0_1_i_qa <= vec_rsc_0_1_qa;
  vec_rsc_0_1_da <= vec_rsc_0_1_i_da;
  vec_rsc_0_1_adra <= vec_rsc_0_1_i_adra;
  vec_rsc_0_1_i_adra_d <= vec_rsc_0_0_i_adra_d_iff;
  vec_rsc_0_1_i_da_d <= vec_rsc_0_0_i_da_d_iff;
  vec_rsc_0_1_i_qa_d <= vec_rsc_0_1_i_qa_d_1;

  inPlaceNTT_DIT_core_inst : inPlaceNTT_DIT_core
    PORT MAP(
      clk => clk,
      rst => rst,
      vec_rsc_triosy_0_0_lz => vec_rsc_triosy_0_0_lz,
      vec_rsc_triosy_0_1_lz => vec_rsc_triosy_0_1_lz,
      p_rsc_dat => inPlaceNTT_DIT_core_inst_p_rsc_dat,
      p_rsc_triosy_lz => p_rsc_triosy_lz,
      r_rsc_dat => inPlaceNTT_DIT_core_inst_r_rsc_dat,
      r_rsc_triosy_lz => r_rsc_triosy_lz,
      vec_rsc_0_0_i_qa_d => inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_qa_d,
      vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d => vec_rsc_0_0_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_1_i_qa_d => inPlaceNTT_DIT_core_inst_vec_rsc_0_1_i_qa_d,
      vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d => vec_rsc_0_1_i_rwA_rw_ram_ir_internal_RMASK_B_d,
      vec_rsc_0_0_i_adra_d_pff => inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_adra_d_pff,
      vec_rsc_0_0_i_da_d_pff => inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_da_d_pff,
      vec_rsc_0_0_i_wea_d_pff => vec_rsc_0_0_i_wea_d_iff,
      vec_rsc_0_1_i_wea_d_pff => vec_rsc_0_1_i_wea_d_iff
    );
  inPlaceNTT_DIT_core_inst_p_rsc_dat <= p_rsc_dat;
  inPlaceNTT_DIT_core_inst_r_rsc_dat <= r_rsc_dat;
  inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_qa_d <= vec_rsc_0_0_i_qa_d;
  inPlaceNTT_DIT_core_inst_vec_rsc_0_1_i_qa_d <= vec_rsc_0_1_i_qa_d;
  vec_rsc_0_0_i_adra_d_iff <= inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_adra_d_pff;
  vec_rsc_0_0_i_da_d_iff <= inPlaceNTT_DIT_core_inst_vec_rsc_0_0_i_da_d_pff;

END v20;



