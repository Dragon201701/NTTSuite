// ----------------------------------------------------------------------------
// User Testbench Interface Header
//
//    HLS version: 10.5c/896140 Production Release
//       HLS date: Sun Sep  6 22:45:38 PDT 2020
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4.1
//
//   Generated by: yl7897@newnano.poly.edu
// Generated date: Sat Aug 14 17:08:27 EDT 2021
//
// ----------------------------------------------------------------------------

#ifndef CCS_TESTBENCH_H
#define CCS_TESTBENCH_H
#include <ac_int.h>
#include "mc_wait_ctrl.h"
#include <string.h>
#include <iostream>

class testbench
{
   public:
   int argc;
   char** argv;
   int main(); //CCS_MAIN
   static bool enable_idle_sync_mode;
   static unsigned short idle_sync_stable_cycles;
   static void set_enable_stalls(bool flag);
   static void reset_request();
   static bool base_ignore;
   static bool base_skip;
   static bool base_skip_quiet;
   static bool base_skip_once;
   static bool base_skip_noerr;
   static int  base_array_comp_first;
   static int  base_array_comp_last;
   static mc_wait_ctrl base_wait_ctrl;
   static bool exp_ignore;
   static bool exp_skip;
   static bool exp_skip_quiet;
   static bool exp_skip_once;
   static bool exp_skip_noerr;
   static int  exp_array_comp_first;
   static int  exp_array_comp_last;
   static mc_wait_ctrl exp_wait_ctrl;
   static bool m_ignore;
   static bool m_skip;
   static bool m_skip_quiet;
   static bool m_skip_once;
   static bool m_skip_noerr;
   static int  m_array_comp_first;
   static int  m_array_comp_last;
   static mc_wait_ctrl m_wait_ctrl;
   static bool result_ignore;
   static bool result_skip;
   static bool result_skip_quiet;
   static bool result_skip_once;
   static bool result_skip_noerr;
   static int  result_array_comp_first;
   static int  result_array_comp_last;
   static mc_wait_ctrl result_IN_wait_ctrl;
   static bool result_use_mask;
   static ac_int<64, false > result_output_mask;
   static mc_wait_ctrl result_wait_ctrl;
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   static void exec_modExp(ac_int<64, false > base, ac_int<64, false > exp, ac_int<64, false > m,  ac_int<64, false > &result);
   #endif
   explicit testbench(int _argc, const char* const *_argv)
      :argc(_argc), argv(const_cast<char**>(_argv))
   {
   }
   ~testbench()
   {
   }
   private:
   testbench() {}
};
extern void mc_testbench_reset_request();
extern void mc_testbench_base_skip(bool v);
extern void mc_testbench_exp_skip(bool v);
extern void mc_testbench_m_skip(bool v);
extern void mc_testbench_result_skip(bool v);
#endif //CCS_TESTBENCH_H
