// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5c/896140 Production Release
//  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
// 
//  Generated by:   jd4691@newnano.poly.edu
//  Generated date: Thu Sep  9 23:04:57 2021
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module ntt_flat_core_core_fsm (
  clk, rst, core_wen, fsm_output, for_C_1_tr0, INNER_LOOP_C_1_tr0, STAGE_LOOP_C_1_tr0
);
  input clk;
  input rst;
  input core_wen;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input for_C_1_tr0;
  input INNER_LOOP_C_1_tr0;
  input STAGE_LOOP_C_1_tr0;


  // FSM State Type Declaration for ntt_flat_core_core_fsm_1
  parameter
    main_C_0 = 3'd0,
    for_C_0 = 3'd1,
    for_C_1 = 3'd2,
    STAGE_LOOP_C_0 = 3'd3,
    INNER_LOOP_C_0 = 3'd4,
    INNER_LOOP_C_1 = 3'd5,
    STAGE_LOOP_C_1 = 3'd6,
    main_C_1 = 3'd7;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : ntt_flat_core_core_fsm_1
    case (state_var)
      for_C_0 : begin
        fsm_output = 8'b00000010;
        state_var_NS = for_C_1;
      end
      for_C_1 : begin
        fsm_output = 8'b00000100;
        if ( for_C_1_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_0;
        end
        else begin
          state_var_NS = for_C_0;
        end
      end
      STAGE_LOOP_C_0 : begin
        fsm_output = 8'b00001000;
        state_var_NS = INNER_LOOP_C_0;
      end
      INNER_LOOP_C_0 : begin
        fsm_output = 8'b00010000;
        state_var_NS = INNER_LOOP_C_1;
      end
      INNER_LOOP_C_1 : begin
        fsm_output = 8'b00100000;
        if ( INNER_LOOP_C_1_tr0 ) begin
          state_var_NS = STAGE_LOOP_C_1;
        end
        else begin
          state_var_NS = INNER_LOOP_C_0;
        end
      end
      STAGE_LOOP_C_1 : begin
        fsm_output = 8'b01000000;
        if ( STAGE_LOOP_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = STAGE_LOOP_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000001;
        state_var_NS = for_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( core_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_staller
// ------------------------------------------------------------------


module ntt_flat_core_staller (
  clk, rst, core_wen, core_wten, vec_rsci_wen_comp, twiddle_rsci_wen_comp, twiddle_h_rsci_wen_comp,
      result_rsci_wen_comp, result_rsci_wen_comp_1
);
  input clk;
  input rst;
  output core_wen;
  output core_wten;
  reg core_wten;
  input vec_rsci_wen_comp;
  input twiddle_rsci_wen_comp;
  input twiddle_h_rsci_wen_comp;
  input result_rsci_wen_comp;
  input result_rsci_wen_comp_1;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = vec_rsci_wen_comp & twiddle_rsci_wen_comp & twiddle_h_rsci_wen_comp
      & result_rsci_wen_comp & result_rsci_wen_comp_1;
  always @(posedge clk) begin
    if ( rst ) begin
      core_wten <= 1'b0;
    end
    else begin
      core_wten <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_result_rsc_triosy_obj_result_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_result_rsc_triosy_obj_result_rsc_triosy_wait_ctrl (
  core_wten, result_rsc_triosy_obj_iswt0, result_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input result_rsc_triosy_obj_iswt0;
  output result_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign result_rsc_triosy_obj_ld_core_sct = result_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl (
  core_wten, twiddle_h_rsc_triosy_obj_iswt0, twiddle_h_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input twiddle_h_rsc_triosy_obj_iswt0;
  output twiddle_h_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsc_triosy_obj_ld_core_sct = twiddle_h_rsc_triosy_obj_iswt0 &
      (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl (
  core_wten, twiddle_rsc_triosy_obj_iswt0, twiddle_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input twiddle_rsc_triosy_obj_iswt0;
  output twiddle_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsc_triosy_obj_ld_core_sct = twiddle_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl (
  core_wten, r_rsc_triosy_obj_iswt0, r_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input r_rsc_triosy_obj_iswt0;
  output r_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign r_rsc_triosy_obj_ld_core_sct = r_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl (
  core_wten, p_rsc_triosy_obj_iswt0, p_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input p_rsc_triosy_obj_iswt0;
  output p_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign p_rsc_triosy_obj_ld_core_sct = p_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_vec_rsc_triosy_obj_vec_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_vec_rsc_triosy_obj_vec_rsc_triosy_wait_ctrl (
  core_wten, vec_rsc_triosy_obj_iswt0, vec_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input vec_rsc_triosy_obj_iswt0;
  output vec_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign vec_rsc_triosy_obj_ld_core_sct = vec_rsc_triosy_obj_iswt0 & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_result_rsci_result_rsc_wait_dp
// ------------------------------------------------------------------


module ntt_flat_core_result_rsci_result_rsc_wait_dp (
  clk, rst, result_rsci_oswt, result_rsci_wen_comp, result_rsci_oswt_1, result_rsci_wen_comp_1,
      result_rsci_s_raddr_core, result_rsci_s_waddr_core, result_rsci_s_din_mxwt,
      result_rsci_s_dout_core, result_rsci_biwt, result_rsci_bdwt, result_rsci_bcwt,
      result_rsci_biwt_1, result_rsci_bdwt_2, result_rsci_bcwt_1, result_rsci_s_raddr,
      result_rsci_s_raddr_core_sct, result_rsci_s_waddr, result_rsci_s_waddr_core_sct,
      result_rsci_s_din, result_rsci_s_dout
);
  input clk;
  input rst;
  input result_rsci_oswt;
  output result_rsci_wen_comp;
  input result_rsci_oswt_1;
  output result_rsci_wen_comp_1;
  input [13:0] result_rsci_s_raddr_core;
  input [13:0] result_rsci_s_waddr_core;
  output [31:0] result_rsci_s_din_mxwt;
  input [31:0] result_rsci_s_dout_core;
  input result_rsci_biwt;
  input result_rsci_bdwt;
  output result_rsci_bcwt;
  reg result_rsci_bcwt;
  input result_rsci_biwt_1;
  input result_rsci_bdwt_2;
  output result_rsci_bcwt_1;
  reg result_rsci_bcwt_1;
  output [13:0] result_rsci_s_raddr;
  input result_rsci_s_raddr_core_sct;
  output [13:0] result_rsci_s_waddr;
  input result_rsci_s_waddr_core_sct;
  input [31:0] result_rsci_s_din;
  output [31:0] result_rsci_s_dout;


  // Interconnect Declarations
  reg [31:0] result_rsci_s_din_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign result_rsci_wen_comp = (~ result_rsci_oswt) | result_rsci_biwt | result_rsci_bcwt;
  assign result_rsci_wen_comp_1 = (~ result_rsci_oswt_1) | result_rsci_biwt_1 | result_rsci_bcwt_1;
  assign result_rsci_s_raddr = MUX_v_14_2_2(14'b00000000000000, result_rsci_s_raddr_core,
      result_rsci_s_raddr_core_sct);
  assign result_rsci_s_waddr = MUX_v_14_2_2(14'b00000000000000, result_rsci_s_waddr_core,
      result_rsci_s_waddr_core_sct);
  assign result_rsci_s_din_mxwt = MUX_v_32_2_2(result_rsci_s_din, result_rsci_s_din_bfwt,
      result_rsci_bcwt);
  assign result_rsci_s_dout = MUX_v_32_2_2(32'b00000000000000000000000000000000,
      result_rsci_s_dout_core, result_rsci_s_waddr_core_sct);
  always @(posedge clk) begin
    if ( rst ) begin
      result_rsci_bcwt <= 1'b0;
      result_rsci_bcwt_1 <= 1'b0;
    end
    else begin
      result_rsci_bcwt <= ~((~(result_rsci_bcwt | result_rsci_biwt)) | result_rsci_bdwt);
      result_rsci_bcwt_1 <= ~((~(result_rsci_bcwt_1 | result_rsci_biwt_1)) | result_rsci_bdwt_2);
    end
  end
  always @(posedge clk) begin
    if ( result_rsci_biwt ) begin
      result_rsci_s_din_bfwt <= result_rsci_s_din;
    end
  end

  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_result_rsci_result_rsc_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_result_rsci_result_rsc_wait_ctrl (
  core_wen, result_rsci_oswt, result_rsci_oswt_1, result_rsci_biwt, result_rsci_bdwt,
      result_rsci_bcwt, result_rsci_s_re_core_sct, result_rsci_biwt_1, result_rsci_bdwt_2,
      result_rsci_bcwt_1, result_rsci_s_we_core_sct, result_rsci_s_rrdy, result_rsci_s_wrdy
);
  input core_wen;
  input result_rsci_oswt;
  input result_rsci_oswt_1;
  output result_rsci_biwt;
  output result_rsci_bdwt;
  input result_rsci_bcwt;
  output result_rsci_s_re_core_sct;
  output result_rsci_biwt_1;
  output result_rsci_bdwt_2;
  input result_rsci_bcwt_1;
  output result_rsci_s_we_core_sct;
  input result_rsci_s_rrdy;
  input result_rsci_s_wrdy;


  // Interconnect Declarations
  wire result_rsci_ogwt;
  wire result_rsci_ogwt_1;


  // Interconnect Declarations for Component Instantiations 
  assign result_rsci_bdwt = result_rsci_oswt & core_wen;
  assign result_rsci_biwt = result_rsci_ogwt & result_rsci_s_rrdy;
  assign result_rsci_ogwt = result_rsci_oswt & (~ result_rsci_bcwt);
  assign result_rsci_s_re_core_sct = result_rsci_ogwt;
  assign result_rsci_bdwt_2 = result_rsci_oswt_1 & core_wen;
  assign result_rsci_biwt_1 = result_rsci_ogwt_1 & result_rsci_s_wrdy;
  assign result_rsci_ogwt_1 = result_rsci_oswt_1 & (~ result_rsci_bcwt_1);
  assign result_rsci_s_we_core_sct = result_rsci_ogwt_1;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp (
  clk, rst, twiddle_h_rsci_oswt, twiddle_h_rsci_wen_comp, twiddle_h_rsci_s_raddr_core,
      twiddle_h_rsci_s_din_mxwt, twiddle_h_rsci_biwt, twiddle_h_rsci_bdwt, twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_raddr, twiddle_h_rsci_s_raddr_core_sct, twiddle_h_rsci_s_din
);
  input clk;
  input rst;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_wen_comp;
  input [9:0] twiddle_h_rsci_s_raddr_core;
  output [31:0] twiddle_h_rsci_s_din_mxwt;
  input twiddle_h_rsci_biwt;
  input twiddle_h_rsci_bdwt;
  output twiddle_h_rsci_bcwt;
  reg twiddle_h_rsci_bcwt;
  output [9:0] twiddle_h_rsci_s_raddr;
  input twiddle_h_rsci_s_raddr_core_sct;
  input [31:0] twiddle_h_rsci_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_h_rsci_s_din_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsci_wen_comp = (~ twiddle_h_rsci_oswt) | twiddle_h_rsci_biwt
      | twiddle_h_rsci_bcwt;
  assign twiddle_h_rsci_s_raddr = MUX_v_10_2_2(10'b0000000000, twiddle_h_rsci_s_raddr_core,
      twiddle_h_rsci_s_raddr_core_sct);
  assign twiddle_h_rsci_s_din_mxwt = MUX_v_32_2_2(twiddle_h_rsci_s_din, twiddle_h_rsci_s_din_bfwt,
      twiddle_h_rsci_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_h_rsci_bcwt <= 1'b0;
    end
    else begin
      twiddle_h_rsci_bcwt <= ~((~(twiddle_h_rsci_bcwt | twiddle_h_rsci_biwt)) | twiddle_h_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_h_rsci_biwt ) begin
      twiddle_h_rsci_s_din_bfwt <= twiddle_h_rsci_s_din;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl (
  core_wen, twiddle_h_rsci_oswt, twiddle_h_rsci_biwt, twiddle_h_rsci_bdwt, twiddle_h_rsci_bcwt,
      twiddle_h_rsci_s_re_core_sct, twiddle_h_rsci_s_rrdy
);
  input core_wen;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_biwt;
  output twiddle_h_rsci_bdwt;
  input twiddle_h_rsci_bcwt;
  output twiddle_h_rsci_s_re_core_sct;
  input twiddle_h_rsci_s_rrdy;


  // Interconnect Declarations
  wire twiddle_h_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_h_rsci_bdwt = twiddle_h_rsci_oswt & core_wen;
  assign twiddle_h_rsci_biwt = twiddle_h_rsci_ogwt & twiddle_h_rsci_s_rrdy;
  assign twiddle_h_rsci_ogwt = twiddle_h_rsci_oswt & (~ twiddle_h_rsci_bcwt);
  assign twiddle_h_rsci_s_re_core_sct = twiddle_h_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_dp
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_dp (
  clk, rst, twiddle_rsci_oswt, twiddle_rsci_wen_comp, twiddle_rsci_s_raddr_core,
      twiddle_rsci_s_din_mxwt, twiddle_rsci_biwt, twiddle_rsci_bdwt, twiddle_rsci_bcwt,
      twiddle_rsci_s_raddr, twiddle_rsci_s_raddr_core_sct, twiddle_rsci_s_din
);
  input clk;
  input rst;
  input twiddle_rsci_oswt;
  output twiddle_rsci_wen_comp;
  input [9:0] twiddle_rsci_s_raddr_core;
  output [31:0] twiddle_rsci_s_din_mxwt;
  input twiddle_rsci_biwt;
  input twiddle_rsci_bdwt;
  output twiddle_rsci_bcwt;
  reg twiddle_rsci_bcwt;
  output [9:0] twiddle_rsci_s_raddr;
  input twiddle_rsci_s_raddr_core_sct;
  input [31:0] twiddle_rsci_s_din;


  // Interconnect Declarations
  reg [31:0] twiddle_rsci_s_din_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsci_wen_comp = (~ twiddle_rsci_oswt) | twiddle_rsci_biwt | twiddle_rsci_bcwt;
  assign twiddle_rsci_s_raddr = MUX_v_10_2_2(10'b0000000000, twiddle_rsci_s_raddr_core,
      twiddle_rsci_s_raddr_core_sct);
  assign twiddle_rsci_s_din_mxwt = MUX_v_32_2_2(twiddle_rsci_s_din, twiddle_rsci_s_din_bfwt,
      twiddle_rsci_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      twiddle_rsci_bcwt <= 1'b0;
    end
    else begin
      twiddle_rsci_bcwt <= ~((~(twiddle_rsci_bcwt | twiddle_rsci_biwt)) | twiddle_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( twiddle_rsci_biwt ) begin
      twiddle_rsci_s_din_bfwt <= twiddle_rsci_s_din;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_ctrl (
  core_wen, twiddle_rsci_oswt, twiddle_rsci_biwt, twiddle_rsci_bdwt, twiddle_rsci_bcwt,
      twiddle_rsci_s_re_core_sct, twiddle_rsci_s_rrdy
);
  input core_wen;
  input twiddle_rsci_oswt;
  output twiddle_rsci_biwt;
  output twiddle_rsci_bdwt;
  input twiddle_rsci_bcwt;
  output twiddle_rsci_s_re_core_sct;
  input twiddle_rsci_s_rrdy;


  // Interconnect Declarations
  wire twiddle_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign twiddle_rsci_bdwt = twiddle_rsci_oswt & core_wen;
  assign twiddle_rsci_biwt = twiddle_rsci_ogwt & twiddle_rsci_s_rrdy;
  assign twiddle_rsci_ogwt = twiddle_rsci_oswt & (~ twiddle_rsci_bcwt);
  assign twiddle_rsci_s_re_core_sct = twiddle_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_vec_rsci_vec_rsc_wait_dp
// ------------------------------------------------------------------


module ntt_flat_core_vec_rsci_vec_rsc_wait_dp (
  clk, rst, vec_rsci_oswt, vec_rsci_wen_comp, vec_rsci_s_raddr_core, vec_rsci_s_din_mxwt,
      vec_rsci_biwt, vec_rsci_bdwt, vec_rsci_bcwt, vec_rsci_s_raddr, vec_rsci_s_raddr_core_sct,
      vec_rsci_s_din
);
  input clk;
  input rst;
  input vec_rsci_oswt;
  output vec_rsci_wen_comp;
  input [9:0] vec_rsci_s_raddr_core;
  output [31:0] vec_rsci_s_din_mxwt;
  input vec_rsci_biwt;
  input vec_rsci_bdwt;
  output vec_rsci_bcwt;
  reg vec_rsci_bcwt;
  output [9:0] vec_rsci_s_raddr;
  input vec_rsci_s_raddr_core_sct;
  input [31:0] vec_rsci_s_din;


  // Interconnect Declarations
  reg [31:0] vec_rsci_s_din_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign vec_rsci_wen_comp = (~ vec_rsci_oswt) | vec_rsci_biwt | vec_rsci_bcwt;
  assign vec_rsci_s_raddr = MUX_v_10_2_2(10'b0000000000, vec_rsci_s_raddr_core, vec_rsci_s_raddr_core_sct);
  assign vec_rsci_s_din_mxwt = MUX_v_32_2_2(vec_rsci_s_din, vec_rsci_s_din_bfwt,
      vec_rsci_bcwt);
  always @(posedge clk) begin
    if ( rst ) begin
      vec_rsci_bcwt <= 1'b0;
    end
    else begin
      vec_rsci_bcwt <= ~((~(vec_rsci_bcwt | vec_rsci_biwt)) | vec_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( vec_rsci_biwt ) begin
      vec_rsci_s_din_bfwt <= vec_rsci_s_din;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_vec_rsci_vec_rsc_wait_ctrl
// ------------------------------------------------------------------


module ntt_flat_core_vec_rsci_vec_rsc_wait_ctrl (
  core_wen, vec_rsci_oswt, vec_rsci_biwt, vec_rsci_bdwt, vec_rsci_bcwt, vec_rsci_s_re_core_sct,
      vec_rsci_s_rrdy
);
  input core_wen;
  input vec_rsci_oswt;
  output vec_rsci_biwt;
  output vec_rsci_bdwt;
  input vec_rsci_bcwt;
  output vec_rsci_s_re_core_sct;
  input vec_rsci_s_rrdy;


  // Interconnect Declarations
  wire vec_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign vec_rsci_bdwt = vec_rsci_oswt & core_wen;
  assign vec_rsci_biwt = vec_rsci_ogwt & vec_rsci_s_rrdy;
  assign vec_rsci_ogwt = vec_rsci_oswt & (~ vec_rsci_bcwt);
  assign vec_rsci_s_re_core_sct = vec_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_result_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_result_rsc_triosy_obj (
  result_rsc_triosy_lz, core_wten, result_rsc_triosy_obj_iswt0
);
  output result_rsc_triosy_lz;
  input core_wten;
  input result_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire result_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) result_rsc_triosy_obj (
      .ld(result_rsc_triosy_obj_ld_core_sct),
      .lz(result_rsc_triosy_lz)
    );
  ntt_flat_core_result_rsc_triosy_obj_result_rsc_triosy_wait_ctrl ntt_flat_core_result_rsc_triosy_obj_result_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .result_rsc_triosy_obj_iswt0(result_rsc_triosy_obj_iswt0),
      .result_rsc_triosy_obj_ld_core_sct(result_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_h_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_h_rsc_triosy_obj (
  twiddle_h_rsc_triosy_lz, core_wten, twiddle_h_rsc_triosy_obj_iswt0
);
  output twiddle_h_rsc_triosy_lz;
  input core_wten;
  input twiddle_h_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_h_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_h_rsc_triosy_obj (
      .ld(twiddle_h_rsc_triosy_obj_ld_core_sct),
      .lz(twiddle_h_rsc_triosy_lz)
    );
  ntt_flat_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl ntt_flat_core_twiddle_h_rsc_triosy_obj_twiddle_h_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_obj_iswt0(twiddle_h_rsc_triosy_obj_iswt0),
      .twiddle_h_rsc_triosy_obj_ld_core_sct(twiddle_h_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_rsc_triosy_obj (
  twiddle_rsc_triosy_lz, core_wten, twiddle_rsc_triosy_obj_iswt0
);
  output twiddle_rsc_triosy_lz;
  input core_wten;
  input twiddle_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire twiddle_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) twiddle_rsc_triosy_obj (
      .ld(twiddle_rsc_triosy_obj_ld_core_sct),
      .lz(twiddle_rsc_triosy_lz)
    );
  ntt_flat_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl ntt_flat_core_twiddle_rsc_triosy_obj_twiddle_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .twiddle_rsc_triosy_obj_iswt0(twiddle_rsc_triosy_obj_iswt0),
      .twiddle_rsc_triosy_obj_ld_core_sct(twiddle_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_r_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_r_rsc_triosy_obj (
  r_rsc_triosy_lz, core_wten, r_rsc_triosy_obj_iswt0
);
  output r_rsc_triosy_lz;
  input core_wten;
  input r_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire r_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) r_rsc_triosy_obj (
      .ld(r_rsc_triosy_obj_ld_core_sct),
      .lz(r_rsc_triosy_lz)
    );
  ntt_flat_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl ntt_flat_core_r_rsc_triosy_obj_r_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(r_rsc_triosy_obj_iswt0),
      .r_rsc_triosy_obj_ld_core_sct(r_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_p_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_p_rsc_triosy_obj (
  p_rsc_triosy_lz, core_wten, p_rsc_triosy_obj_iswt0
);
  output p_rsc_triosy_lz;
  input core_wten;
  input p_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire p_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) p_rsc_triosy_obj (
      .ld(p_rsc_triosy_obj_ld_core_sct),
      .lz(p_rsc_triosy_lz)
    );
  ntt_flat_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl ntt_flat_core_p_rsc_triosy_obj_p_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(p_rsc_triosy_obj_iswt0),
      .p_rsc_triosy_obj_ld_core_sct(p_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_vec_rsc_triosy_obj
// ------------------------------------------------------------------


module ntt_flat_core_vec_rsc_triosy_obj (
  vec_rsc_triosy_lz, core_wten, vec_rsc_triosy_obj_iswt0
);
  output vec_rsc_triosy_lz;
  input core_wten;
  input vec_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire vec_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) vec_rsc_triosy_obj (
      .ld(vec_rsc_triosy_obj_ld_core_sct),
      .lz(vec_rsc_triosy_lz)
    );
  ntt_flat_core_vec_rsc_triosy_obj_vec_rsc_triosy_wait_ctrl ntt_flat_core_vec_rsc_triosy_obj_vec_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .vec_rsc_triosy_obj_iswt0(vec_rsc_triosy_obj_iswt0),
      .vec_rsc_triosy_obj_ld_core_sct(vec_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_result_rsci
// ------------------------------------------------------------------


module ntt_flat_core_result_rsci (
  clk, rst, result_rsc_s_tdone, result_rsc_tr_write_done, result_rsc_RREADY, result_rsc_RVALID,
      result_rsc_RUSER, result_rsc_RLAST, result_rsc_RRESP, result_rsc_RDATA, result_rsc_RID,
      result_rsc_ARREADY, result_rsc_ARVALID, result_rsc_ARUSER, result_rsc_ARREGION,
      result_rsc_ARQOS, result_rsc_ARPROT, result_rsc_ARCACHE, result_rsc_ARLOCK,
      result_rsc_ARBURST, result_rsc_ARSIZE, result_rsc_ARLEN, result_rsc_ARADDR,
      result_rsc_ARID, result_rsc_BREADY, result_rsc_BVALID, result_rsc_BUSER, result_rsc_BRESP,
      result_rsc_BID, result_rsc_WREADY, result_rsc_WVALID, result_rsc_WUSER, result_rsc_WLAST,
      result_rsc_WSTRB, result_rsc_WDATA, result_rsc_AWREADY, result_rsc_AWVALID,
      result_rsc_AWUSER, result_rsc_AWREGION, result_rsc_AWQOS, result_rsc_AWPROT,
      result_rsc_AWCACHE, result_rsc_AWLOCK, result_rsc_AWBURST, result_rsc_AWSIZE,
      result_rsc_AWLEN, result_rsc_AWADDR, result_rsc_AWID, core_wen, result_rsci_oswt,
      result_rsci_wen_comp, result_rsci_oswt_1, result_rsci_wen_comp_1, result_rsci_s_raddr_core,
      result_rsci_s_waddr_core, result_rsci_s_din_mxwt, result_rsci_s_dout_core
);
  input clk;
  input rst;
  input result_rsc_s_tdone;
  input result_rsc_tr_write_done;
  input result_rsc_RREADY;
  output result_rsc_RVALID;
  output result_rsc_RUSER;
  output result_rsc_RLAST;
  output [1:0] result_rsc_RRESP;
  output [31:0] result_rsc_RDATA;
  output result_rsc_RID;
  output result_rsc_ARREADY;
  input result_rsc_ARVALID;
  input result_rsc_ARUSER;
  input [3:0] result_rsc_ARREGION;
  input [3:0] result_rsc_ARQOS;
  input [2:0] result_rsc_ARPROT;
  input [3:0] result_rsc_ARCACHE;
  input result_rsc_ARLOCK;
  input [1:0] result_rsc_ARBURST;
  input [2:0] result_rsc_ARSIZE;
  input [7:0] result_rsc_ARLEN;
  input [13:0] result_rsc_ARADDR;
  input result_rsc_ARID;
  input result_rsc_BREADY;
  output result_rsc_BVALID;
  output result_rsc_BUSER;
  output [1:0] result_rsc_BRESP;
  output result_rsc_BID;
  output result_rsc_WREADY;
  input result_rsc_WVALID;
  input result_rsc_WUSER;
  input result_rsc_WLAST;
  input [3:0] result_rsc_WSTRB;
  input [31:0] result_rsc_WDATA;
  output result_rsc_AWREADY;
  input result_rsc_AWVALID;
  input result_rsc_AWUSER;
  input [3:0] result_rsc_AWREGION;
  input [3:0] result_rsc_AWQOS;
  input [2:0] result_rsc_AWPROT;
  input [3:0] result_rsc_AWCACHE;
  input result_rsc_AWLOCK;
  input [1:0] result_rsc_AWBURST;
  input [2:0] result_rsc_AWSIZE;
  input [7:0] result_rsc_AWLEN;
  input [13:0] result_rsc_AWADDR;
  input result_rsc_AWID;
  input core_wen;
  input result_rsci_oswt;
  output result_rsci_wen_comp;
  input result_rsci_oswt_1;
  output result_rsci_wen_comp_1;
  input [13:0] result_rsci_s_raddr_core;
  input [13:0] result_rsci_s_waddr_core;
  output [31:0] result_rsci_s_din_mxwt;
  input [31:0] result_rsci_s_dout_core;


  // Interconnect Declarations
  wire result_rsci_biwt;
  wire result_rsci_bdwt;
  wire result_rsci_bcwt;
  wire result_rsci_s_re_core_sct;
  wire result_rsci_biwt_1;
  wire result_rsci_bdwt_2;
  wire result_rsci_bcwt_1;
  wire result_rsci_s_we_core_sct;
  wire [13:0] result_rsci_s_raddr;
  wire [13:0] result_rsci_s_waddr;
  wire [31:0] result_rsci_s_din;
  wire [31:0] result_rsci_s_dout;
  wire result_rsci_s_rrdy;
  wire result_rsci_s_wrdy;
  wire result_rsc_is_idle_1;


  // Interconnect Declarations for Component Instantiations 
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd11264),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd14),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd14),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) result_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(result_rsc_AWID),
      .AWADDR(result_rsc_AWADDR),
      .AWLEN(result_rsc_AWLEN),
      .AWSIZE(result_rsc_AWSIZE),
      .AWBURST(result_rsc_AWBURST),
      .AWLOCK(result_rsc_AWLOCK),
      .AWCACHE(result_rsc_AWCACHE),
      .AWPROT(result_rsc_AWPROT),
      .AWQOS(result_rsc_AWQOS),
      .AWREGION(result_rsc_AWREGION),
      .AWUSER(result_rsc_AWUSER),
      .AWVALID(result_rsc_AWVALID),
      .AWREADY(result_rsc_AWREADY),
      .WDATA(result_rsc_WDATA),
      .WSTRB(result_rsc_WSTRB),
      .WLAST(result_rsc_WLAST),
      .WUSER(result_rsc_WUSER),
      .WVALID(result_rsc_WVALID),
      .WREADY(result_rsc_WREADY),
      .BID(result_rsc_BID),
      .BRESP(result_rsc_BRESP),
      .BUSER(result_rsc_BUSER),
      .BVALID(result_rsc_BVALID),
      .BREADY(result_rsc_BREADY),
      .ARID(result_rsc_ARID),
      .ARADDR(result_rsc_ARADDR),
      .ARLEN(result_rsc_ARLEN),
      .ARSIZE(result_rsc_ARSIZE),
      .ARBURST(result_rsc_ARBURST),
      .ARLOCK(result_rsc_ARLOCK),
      .ARCACHE(result_rsc_ARCACHE),
      .ARPROT(result_rsc_ARPROT),
      .ARQOS(result_rsc_ARQOS),
      .ARREGION(result_rsc_ARREGION),
      .ARUSER(result_rsc_ARUSER),
      .ARVALID(result_rsc_ARVALID),
      .ARREADY(result_rsc_ARREADY),
      .RID(result_rsc_RID),
      .RDATA(result_rsc_RDATA),
      .RRESP(result_rsc_RRESP),
      .RLAST(result_rsc_RLAST),
      .RUSER(result_rsc_RUSER),
      .RVALID(result_rsc_RVALID),
      .RREADY(result_rsc_RREADY),
      .s_re(result_rsci_s_re_core_sct),
      .s_we(result_rsci_s_we_core_sct),
      .s_raddr(result_rsci_s_raddr),
      .s_waddr(result_rsci_s_waddr),
      .s_din(result_rsci_s_din),
      .s_dout(result_rsci_s_dout),
      .s_rrdy(result_rsci_s_rrdy),
      .s_wrdy(result_rsci_s_wrdy),
      .is_idle(result_rsc_is_idle_1),
      .tr_write_done(result_rsc_tr_write_done),
      .s_tdone(result_rsc_s_tdone)
    );
  ntt_flat_core_result_rsci_result_rsc_wait_ctrl ntt_flat_core_result_rsci_result_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .result_rsci_oswt(result_rsci_oswt),
      .result_rsci_oswt_1(result_rsci_oswt_1),
      .result_rsci_biwt(result_rsci_biwt),
      .result_rsci_bdwt(result_rsci_bdwt),
      .result_rsci_bcwt(result_rsci_bcwt),
      .result_rsci_s_re_core_sct(result_rsci_s_re_core_sct),
      .result_rsci_biwt_1(result_rsci_biwt_1),
      .result_rsci_bdwt_2(result_rsci_bdwt_2),
      .result_rsci_bcwt_1(result_rsci_bcwt_1),
      .result_rsci_s_we_core_sct(result_rsci_s_we_core_sct),
      .result_rsci_s_rrdy(result_rsci_s_rrdy),
      .result_rsci_s_wrdy(result_rsci_s_wrdy)
    );
  ntt_flat_core_result_rsci_result_rsc_wait_dp ntt_flat_core_result_rsci_result_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .result_rsci_oswt(result_rsci_oswt),
      .result_rsci_wen_comp(result_rsci_wen_comp),
      .result_rsci_oswt_1(result_rsci_oswt_1),
      .result_rsci_wen_comp_1(result_rsci_wen_comp_1),
      .result_rsci_s_raddr_core(result_rsci_s_raddr_core),
      .result_rsci_s_waddr_core(result_rsci_s_waddr_core),
      .result_rsci_s_din_mxwt(result_rsci_s_din_mxwt),
      .result_rsci_s_dout_core(result_rsci_s_dout_core),
      .result_rsci_biwt(result_rsci_biwt),
      .result_rsci_bdwt(result_rsci_bdwt),
      .result_rsci_bcwt(result_rsci_bcwt),
      .result_rsci_biwt_1(result_rsci_biwt_1),
      .result_rsci_bdwt_2(result_rsci_bdwt_2),
      .result_rsci_bcwt_1(result_rsci_bcwt_1),
      .result_rsci_s_raddr(result_rsci_s_raddr),
      .result_rsci_s_raddr_core_sct(result_rsci_s_re_core_sct),
      .result_rsci_s_waddr(result_rsci_s_waddr),
      .result_rsci_s_waddr_core_sct(result_rsci_s_we_core_sct),
      .result_rsci_s_din(result_rsci_s_din),
      .result_rsci_s_dout(result_rsci_s_dout)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_h_rsci
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_h_rsci (
  clk, rst, twiddle_h_rsc_s_tdone, twiddle_h_rsc_tr_write_done, twiddle_h_rsc_RREADY,
      twiddle_h_rsc_RVALID, twiddle_h_rsc_RUSER, twiddle_h_rsc_RLAST, twiddle_h_rsc_RRESP,
      twiddle_h_rsc_RDATA, twiddle_h_rsc_RID, twiddle_h_rsc_ARREADY, twiddle_h_rsc_ARVALID,
      twiddle_h_rsc_ARUSER, twiddle_h_rsc_ARREGION, twiddle_h_rsc_ARQOS, twiddle_h_rsc_ARPROT,
      twiddle_h_rsc_ARCACHE, twiddle_h_rsc_ARLOCK, twiddle_h_rsc_ARBURST, twiddle_h_rsc_ARSIZE,
      twiddle_h_rsc_ARLEN, twiddle_h_rsc_ARADDR, twiddle_h_rsc_ARID, twiddle_h_rsc_BREADY,
      twiddle_h_rsc_BVALID, twiddle_h_rsc_BUSER, twiddle_h_rsc_BRESP, twiddle_h_rsc_BID,
      twiddle_h_rsc_WREADY, twiddle_h_rsc_WVALID, twiddle_h_rsc_WUSER, twiddle_h_rsc_WLAST,
      twiddle_h_rsc_WSTRB, twiddle_h_rsc_WDATA, twiddle_h_rsc_AWREADY, twiddle_h_rsc_AWVALID,
      twiddle_h_rsc_AWUSER, twiddle_h_rsc_AWREGION, twiddle_h_rsc_AWQOS, twiddle_h_rsc_AWPROT,
      twiddle_h_rsc_AWCACHE, twiddle_h_rsc_AWLOCK, twiddle_h_rsc_AWBURST, twiddle_h_rsc_AWSIZE,
      twiddle_h_rsc_AWLEN, twiddle_h_rsc_AWADDR, twiddle_h_rsc_AWID, core_wen, twiddle_h_rsci_oswt,
      twiddle_h_rsci_wen_comp, twiddle_h_rsci_s_raddr_core, twiddle_h_rsci_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  input core_wen;
  input twiddle_h_rsci_oswt;
  output twiddle_h_rsci_wen_comp;
  input [9:0] twiddle_h_rsci_s_raddr_core;
  output [31:0] twiddle_h_rsci_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_h_rsci_biwt;
  wire twiddle_h_rsci_bdwt;
  wire twiddle_h_rsci_bcwt;
  wire twiddle_h_rsci_s_re_core_sct;
  wire [9:0] twiddle_h_rsci_s_raddr;
  wire [31:0] twiddle_h_rsci_s_din;
  wire twiddle_h_rsci_s_rrdy;
  wire twiddle_h_rsci_s_wrdy;
  wire twiddle_h_rsc_is_idle;


  // Interconnect Declarations for Component Instantiations 
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_h_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_h_rsc_AWID),
      .AWADDR(twiddle_h_rsc_AWADDR),
      .AWLEN(twiddle_h_rsc_AWLEN),
      .AWSIZE(twiddle_h_rsc_AWSIZE),
      .AWBURST(twiddle_h_rsc_AWBURST),
      .AWLOCK(twiddle_h_rsc_AWLOCK),
      .AWCACHE(twiddle_h_rsc_AWCACHE),
      .AWPROT(twiddle_h_rsc_AWPROT),
      .AWQOS(twiddle_h_rsc_AWQOS),
      .AWREGION(twiddle_h_rsc_AWREGION),
      .AWUSER(twiddle_h_rsc_AWUSER),
      .AWVALID(twiddle_h_rsc_AWVALID),
      .AWREADY(twiddle_h_rsc_AWREADY),
      .WDATA(twiddle_h_rsc_WDATA),
      .WSTRB(twiddle_h_rsc_WSTRB),
      .WLAST(twiddle_h_rsc_WLAST),
      .WUSER(twiddle_h_rsc_WUSER),
      .WVALID(twiddle_h_rsc_WVALID),
      .WREADY(twiddle_h_rsc_WREADY),
      .BID(twiddle_h_rsc_BID),
      .BRESP(twiddle_h_rsc_BRESP),
      .BUSER(twiddle_h_rsc_BUSER),
      .BVALID(twiddle_h_rsc_BVALID),
      .BREADY(twiddle_h_rsc_BREADY),
      .ARID(twiddle_h_rsc_ARID),
      .ARADDR(twiddle_h_rsc_ARADDR),
      .ARLEN(twiddle_h_rsc_ARLEN),
      .ARSIZE(twiddle_h_rsc_ARSIZE),
      .ARBURST(twiddle_h_rsc_ARBURST),
      .ARLOCK(twiddle_h_rsc_ARLOCK),
      .ARCACHE(twiddle_h_rsc_ARCACHE),
      .ARPROT(twiddle_h_rsc_ARPROT),
      .ARQOS(twiddle_h_rsc_ARQOS),
      .ARREGION(twiddle_h_rsc_ARREGION),
      .ARUSER(twiddle_h_rsc_ARUSER),
      .ARVALID(twiddle_h_rsc_ARVALID),
      .ARREADY(twiddle_h_rsc_ARREADY),
      .RID(twiddle_h_rsc_RID),
      .RDATA(twiddle_h_rsc_RDATA),
      .RRESP(twiddle_h_rsc_RRESP),
      .RLAST(twiddle_h_rsc_RLAST),
      .RUSER(twiddle_h_rsc_RUSER),
      .RVALID(twiddle_h_rsc_RVALID),
      .RREADY(twiddle_h_rsc_RREADY),
      .s_re(twiddle_h_rsci_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_h_rsci_s_raddr),
      .s_waddr(10'b0000000000),
      .s_din(twiddle_h_rsci_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_h_rsci_s_rrdy),
      .s_wrdy(twiddle_h_rsci_s_wrdy),
      .is_idle(twiddle_h_rsc_is_idle),
      .tr_write_done(twiddle_h_rsc_tr_write_done),
      .s_tdone(twiddle_h_rsc_s_tdone)
    );
  ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_h_rsci_oswt(twiddle_h_rsci_oswt),
      .twiddle_h_rsci_biwt(twiddle_h_rsci_biwt),
      .twiddle_h_rsci_bdwt(twiddle_h_rsci_bdwt),
      .twiddle_h_rsci_bcwt(twiddle_h_rsci_bcwt),
      .twiddle_h_rsci_s_re_core_sct(twiddle_h_rsci_s_re_core_sct),
      .twiddle_h_rsci_s_rrdy(twiddle_h_rsci_s_rrdy)
    );
  ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp ntt_flat_core_twiddle_h_rsci_twiddle_h_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsci_oswt(twiddle_h_rsci_oswt),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp),
      .twiddle_h_rsci_s_raddr_core(twiddle_h_rsci_s_raddr_core),
      .twiddle_h_rsci_s_din_mxwt(twiddle_h_rsci_s_din_mxwt),
      .twiddle_h_rsci_biwt(twiddle_h_rsci_biwt),
      .twiddle_h_rsci_bdwt(twiddle_h_rsci_bdwt),
      .twiddle_h_rsci_bcwt(twiddle_h_rsci_bcwt),
      .twiddle_h_rsci_s_raddr(twiddle_h_rsci_s_raddr),
      .twiddle_h_rsci_s_raddr_core_sct(twiddle_h_rsci_s_re_core_sct),
      .twiddle_h_rsci_s_din(twiddle_h_rsci_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_twiddle_rsci
// ------------------------------------------------------------------


module ntt_flat_core_twiddle_rsci (
  clk, rst, twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done, twiddle_rsc_RREADY, twiddle_rsc_RVALID,
      twiddle_rsc_RUSER, twiddle_rsc_RLAST, twiddle_rsc_RRESP, twiddle_rsc_RDATA,
      twiddle_rsc_RID, twiddle_rsc_ARREADY, twiddle_rsc_ARVALID, twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION, twiddle_rsc_ARQOS, twiddle_rsc_ARPROT, twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST, twiddle_rsc_ARSIZE, twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR, twiddle_rsc_ARID, twiddle_rsc_BREADY, twiddle_rsc_BVALID,
      twiddle_rsc_BUSER, twiddle_rsc_BRESP, twiddle_rsc_BID, twiddle_rsc_WREADY,
      twiddle_rsc_WVALID, twiddle_rsc_WUSER, twiddle_rsc_WLAST, twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA, twiddle_rsc_AWREADY, twiddle_rsc_AWVALID, twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION, twiddle_rsc_AWQOS, twiddle_rsc_AWPROT, twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST, twiddle_rsc_AWSIZE, twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR, twiddle_rsc_AWID, core_wen, twiddle_rsci_oswt, twiddle_rsci_wen_comp,
      twiddle_rsci_s_raddr_core, twiddle_rsci_s_din_mxwt
);
  input clk;
  input rst;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  input core_wen;
  input twiddle_rsci_oswt;
  output twiddle_rsci_wen_comp;
  input [9:0] twiddle_rsci_s_raddr_core;
  output [31:0] twiddle_rsci_s_din_mxwt;


  // Interconnect Declarations
  wire twiddle_rsci_biwt;
  wire twiddle_rsci_bdwt;
  wire twiddle_rsci_bcwt;
  wire twiddle_rsci_s_re_core_sct;
  wire [9:0] twiddle_rsci_s_raddr;
  wire [31:0] twiddle_rsci_s_din;
  wire twiddle_rsci_s_rrdy;
  wire twiddle_rsci_s_wrdy;
  wire twiddle_rsc_is_idle;


  // Interconnect Declarations for Component Instantiations 
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) twiddle_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(twiddle_rsc_AWID),
      .AWADDR(twiddle_rsc_AWADDR),
      .AWLEN(twiddle_rsc_AWLEN),
      .AWSIZE(twiddle_rsc_AWSIZE),
      .AWBURST(twiddle_rsc_AWBURST),
      .AWLOCK(twiddle_rsc_AWLOCK),
      .AWCACHE(twiddle_rsc_AWCACHE),
      .AWPROT(twiddle_rsc_AWPROT),
      .AWQOS(twiddle_rsc_AWQOS),
      .AWREGION(twiddle_rsc_AWREGION),
      .AWUSER(twiddle_rsc_AWUSER),
      .AWVALID(twiddle_rsc_AWVALID),
      .AWREADY(twiddle_rsc_AWREADY),
      .WDATA(twiddle_rsc_WDATA),
      .WSTRB(twiddle_rsc_WSTRB),
      .WLAST(twiddle_rsc_WLAST),
      .WUSER(twiddle_rsc_WUSER),
      .WVALID(twiddle_rsc_WVALID),
      .WREADY(twiddle_rsc_WREADY),
      .BID(twiddle_rsc_BID),
      .BRESP(twiddle_rsc_BRESP),
      .BUSER(twiddle_rsc_BUSER),
      .BVALID(twiddle_rsc_BVALID),
      .BREADY(twiddle_rsc_BREADY),
      .ARID(twiddle_rsc_ARID),
      .ARADDR(twiddle_rsc_ARADDR),
      .ARLEN(twiddle_rsc_ARLEN),
      .ARSIZE(twiddle_rsc_ARSIZE),
      .ARBURST(twiddle_rsc_ARBURST),
      .ARLOCK(twiddle_rsc_ARLOCK),
      .ARCACHE(twiddle_rsc_ARCACHE),
      .ARPROT(twiddle_rsc_ARPROT),
      .ARQOS(twiddle_rsc_ARQOS),
      .ARREGION(twiddle_rsc_ARREGION),
      .ARUSER(twiddle_rsc_ARUSER),
      .ARVALID(twiddle_rsc_ARVALID),
      .ARREADY(twiddle_rsc_ARREADY),
      .RID(twiddle_rsc_RID),
      .RDATA(twiddle_rsc_RDATA),
      .RRESP(twiddle_rsc_RRESP),
      .RLAST(twiddle_rsc_RLAST),
      .RUSER(twiddle_rsc_RUSER),
      .RVALID(twiddle_rsc_RVALID),
      .RREADY(twiddle_rsc_RREADY),
      .s_re(twiddle_rsci_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(twiddle_rsci_s_raddr),
      .s_waddr(10'b0000000000),
      .s_din(twiddle_rsci_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(twiddle_rsci_s_rrdy),
      .s_wrdy(twiddle_rsci_s_wrdy),
      .is_idle(twiddle_rsc_is_idle),
      .tr_write_done(twiddle_rsc_tr_write_done),
      .s_tdone(twiddle_rsc_s_tdone)
    );
  ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_ctrl ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .twiddle_rsci_oswt(twiddle_rsci_oswt),
      .twiddle_rsci_biwt(twiddle_rsci_biwt),
      .twiddle_rsci_bdwt(twiddle_rsci_bdwt),
      .twiddle_rsci_bcwt(twiddle_rsci_bcwt),
      .twiddle_rsci_s_re_core_sct(twiddle_rsci_s_re_core_sct),
      .twiddle_rsci_s_rrdy(twiddle_rsci_s_rrdy)
    );
  ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_dp ntt_flat_core_twiddle_rsci_twiddle_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .twiddle_rsci_oswt(twiddle_rsci_oswt),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_rsci_s_raddr_core(twiddle_rsci_s_raddr_core),
      .twiddle_rsci_s_din_mxwt(twiddle_rsci_s_din_mxwt),
      .twiddle_rsci_biwt(twiddle_rsci_biwt),
      .twiddle_rsci_bdwt(twiddle_rsci_bdwt),
      .twiddle_rsci_bcwt(twiddle_rsci_bcwt),
      .twiddle_rsci_s_raddr(twiddle_rsci_s_raddr),
      .twiddle_rsci_s_raddr_core_sct(twiddle_rsci_s_re_core_sct),
      .twiddle_rsci_s_din(twiddle_rsci_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core_vec_rsci
// ------------------------------------------------------------------


module ntt_flat_core_vec_rsci (
  clk, rst, vec_rsc_s_tdone, vec_rsc_tr_write_done, vec_rsc_RREADY, vec_rsc_RVALID,
      vec_rsc_RUSER, vec_rsc_RLAST, vec_rsc_RRESP, vec_rsc_RDATA, vec_rsc_RID, vec_rsc_ARREADY,
      vec_rsc_ARVALID, vec_rsc_ARUSER, vec_rsc_ARREGION, vec_rsc_ARQOS, vec_rsc_ARPROT,
      vec_rsc_ARCACHE, vec_rsc_ARLOCK, vec_rsc_ARBURST, vec_rsc_ARSIZE, vec_rsc_ARLEN,
      vec_rsc_ARADDR, vec_rsc_ARID, vec_rsc_BREADY, vec_rsc_BVALID, vec_rsc_BUSER,
      vec_rsc_BRESP, vec_rsc_BID, vec_rsc_WREADY, vec_rsc_WVALID, vec_rsc_WUSER,
      vec_rsc_WLAST, vec_rsc_WSTRB, vec_rsc_WDATA, vec_rsc_AWREADY, vec_rsc_AWVALID,
      vec_rsc_AWUSER, vec_rsc_AWREGION, vec_rsc_AWQOS, vec_rsc_AWPROT, vec_rsc_AWCACHE,
      vec_rsc_AWLOCK, vec_rsc_AWBURST, vec_rsc_AWSIZE, vec_rsc_AWLEN, vec_rsc_AWADDR,
      vec_rsc_AWID, core_wen, vec_rsci_oswt, vec_rsci_wen_comp, vec_rsci_s_raddr_core,
      vec_rsci_s_din_mxwt
);
  input clk;
  input rst;
  input vec_rsc_s_tdone;
  input vec_rsc_tr_write_done;
  input vec_rsc_RREADY;
  output vec_rsc_RVALID;
  output vec_rsc_RUSER;
  output vec_rsc_RLAST;
  output [1:0] vec_rsc_RRESP;
  output [31:0] vec_rsc_RDATA;
  output vec_rsc_RID;
  output vec_rsc_ARREADY;
  input vec_rsc_ARVALID;
  input vec_rsc_ARUSER;
  input [3:0] vec_rsc_ARREGION;
  input [3:0] vec_rsc_ARQOS;
  input [2:0] vec_rsc_ARPROT;
  input [3:0] vec_rsc_ARCACHE;
  input vec_rsc_ARLOCK;
  input [1:0] vec_rsc_ARBURST;
  input [2:0] vec_rsc_ARSIZE;
  input [7:0] vec_rsc_ARLEN;
  input [11:0] vec_rsc_ARADDR;
  input vec_rsc_ARID;
  input vec_rsc_BREADY;
  output vec_rsc_BVALID;
  output vec_rsc_BUSER;
  output [1:0] vec_rsc_BRESP;
  output vec_rsc_BID;
  output vec_rsc_WREADY;
  input vec_rsc_WVALID;
  input vec_rsc_WUSER;
  input vec_rsc_WLAST;
  input [3:0] vec_rsc_WSTRB;
  input [31:0] vec_rsc_WDATA;
  output vec_rsc_AWREADY;
  input vec_rsc_AWVALID;
  input vec_rsc_AWUSER;
  input [3:0] vec_rsc_AWREGION;
  input [3:0] vec_rsc_AWQOS;
  input [2:0] vec_rsc_AWPROT;
  input [3:0] vec_rsc_AWCACHE;
  input vec_rsc_AWLOCK;
  input [1:0] vec_rsc_AWBURST;
  input [2:0] vec_rsc_AWSIZE;
  input [7:0] vec_rsc_AWLEN;
  input [11:0] vec_rsc_AWADDR;
  input vec_rsc_AWID;
  input core_wen;
  input vec_rsci_oswt;
  output vec_rsci_wen_comp;
  input [9:0] vec_rsci_s_raddr_core;
  output [31:0] vec_rsci_s_din_mxwt;


  // Interconnect Declarations
  wire vec_rsci_biwt;
  wire vec_rsci_bdwt;
  wire vec_rsci_bcwt;
  wire vec_rsci_s_re_core_sct;
  wire [9:0] vec_rsci_s_raddr;
  wire [31:0] vec_rsci_s_din;
  wire vec_rsci_s_rrdy;
  wire vec_rsci_s_wrdy;
  wire vec_rsc_is_idle;


  // Interconnect Declarations for Component Instantiations 
  ccs_axi4_slave_mem #(.rscid(32'sd0),
  .depth(32'sd1024),
  .op_width(32'sd32),
  .cwidth(32'sd32),
  .addr_w(32'sd10),
  .nopreload(32'sd0),
  .rst_ph(32'sd0),
  .ADDR_WIDTH(32'sd12),
  .DATA_WIDTH(32'sd32),
  .ID_WIDTH(32'sd1),
  .USER_WIDTH(32'sd1),
  .REGION_MAP_SIZE(32'sd1),
  .wBASE_ADDRESS(32'sd0),
  .rBASE_ADDRESS(32'sd0)) vec_rsci (
      .ACLK(clk),
      .ARESETn(1'b1),
      .AWID(vec_rsc_AWID),
      .AWADDR(vec_rsc_AWADDR),
      .AWLEN(vec_rsc_AWLEN),
      .AWSIZE(vec_rsc_AWSIZE),
      .AWBURST(vec_rsc_AWBURST),
      .AWLOCK(vec_rsc_AWLOCK),
      .AWCACHE(vec_rsc_AWCACHE),
      .AWPROT(vec_rsc_AWPROT),
      .AWQOS(vec_rsc_AWQOS),
      .AWREGION(vec_rsc_AWREGION),
      .AWUSER(vec_rsc_AWUSER),
      .AWVALID(vec_rsc_AWVALID),
      .AWREADY(vec_rsc_AWREADY),
      .WDATA(vec_rsc_WDATA),
      .WSTRB(vec_rsc_WSTRB),
      .WLAST(vec_rsc_WLAST),
      .WUSER(vec_rsc_WUSER),
      .WVALID(vec_rsc_WVALID),
      .WREADY(vec_rsc_WREADY),
      .BID(vec_rsc_BID),
      .BRESP(vec_rsc_BRESP),
      .BUSER(vec_rsc_BUSER),
      .BVALID(vec_rsc_BVALID),
      .BREADY(vec_rsc_BREADY),
      .ARID(vec_rsc_ARID),
      .ARADDR(vec_rsc_ARADDR),
      .ARLEN(vec_rsc_ARLEN),
      .ARSIZE(vec_rsc_ARSIZE),
      .ARBURST(vec_rsc_ARBURST),
      .ARLOCK(vec_rsc_ARLOCK),
      .ARCACHE(vec_rsc_ARCACHE),
      .ARPROT(vec_rsc_ARPROT),
      .ARQOS(vec_rsc_ARQOS),
      .ARREGION(vec_rsc_ARREGION),
      .ARUSER(vec_rsc_ARUSER),
      .ARVALID(vec_rsc_ARVALID),
      .ARREADY(vec_rsc_ARREADY),
      .RID(vec_rsc_RID),
      .RDATA(vec_rsc_RDATA),
      .RRESP(vec_rsc_RRESP),
      .RLAST(vec_rsc_RLAST),
      .RUSER(vec_rsc_RUSER),
      .RVALID(vec_rsc_RVALID),
      .RREADY(vec_rsc_RREADY),
      .s_re(vec_rsci_s_re_core_sct),
      .s_we(1'b0),
      .s_raddr(vec_rsci_s_raddr),
      .s_waddr(10'b0000000000),
      .s_din(vec_rsci_s_din),
      .s_dout(32'b00000000000000000000000000000000),
      .s_rrdy(vec_rsci_s_rrdy),
      .s_wrdy(vec_rsci_s_wrdy),
      .is_idle(vec_rsc_is_idle),
      .tr_write_done(vec_rsc_tr_write_done),
      .s_tdone(vec_rsc_s_tdone)
    );
  ntt_flat_core_vec_rsci_vec_rsc_wait_ctrl ntt_flat_core_vec_rsci_vec_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .vec_rsci_oswt(vec_rsci_oswt),
      .vec_rsci_biwt(vec_rsci_biwt),
      .vec_rsci_bdwt(vec_rsci_bdwt),
      .vec_rsci_bcwt(vec_rsci_bcwt),
      .vec_rsci_s_re_core_sct(vec_rsci_s_re_core_sct),
      .vec_rsci_s_rrdy(vec_rsci_s_rrdy)
    );
  ntt_flat_core_vec_rsci_vec_rsc_wait_dp ntt_flat_core_vec_rsci_vec_rsc_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .vec_rsci_oswt(vec_rsci_oswt),
      .vec_rsci_wen_comp(vec_rsci_wen_comp),
      .vec_rsci_s_raddr_core(vec_rsci_s_raddr_core),
      .vec_rsci_s_din_mxwt(vec_rsci_s_din_mxwt),
      .vec_rsci_biwt(vec_rsci_biwt),
      .vec_rsci_bdwt(vec_rsci_bdwt),
      .vec_rsci_bcwt(vec_rsci_bcwt),
      .vec_rsci_s_raddr(vec_rsci_s_raddr),
      .vec_rsci_s_raddr_core_sct(vec_rsci_s_re_core_sct),
      .vec_rsci_s_din(vec_rsci_s_din)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat_core
// ------------------------------------------------------------------


module ntt_flat_core (
  clk, rst, vec_rsc_s_tdone, vec_rsc_tr_write_done, vec_rsc_RREADY, vec_rsc_RVALID,
      vec_rsc_RUSER, vec_rsc_RLAST, vec_rsc_RRESP, vec_rsc_RDATA, vec_rsc_RID, vec_rsc_ARREADY,
      vec_rsc_ARVALID, vec_rsc_ARUSER, vec_rsc_ARREGION, vec_rsc_ARQOS, vec_rsc_ARPROT,
      vec_rsc_ARCACHE, vec_rsc_ARLOCK, vec_rsc_ARBURST, vec_rsc_ARSIZE, vec_rsc_ARLEN,
      vec_rsc_ARADDR, vec_rsc_ARID, vec_rsc_BREADY, vec_rsc_BVALID, vec_rsc_BUSER,
      vec_rsc_BRESP, vec_rsc_BID, vec_rsc_WREADY, vec_rsc_WVALID, vec_rsc_WUSER,
      vec_rsc_WLAST, vec_rsc_WSTRB, vec_rsc_WDATA, vec_rsc_AWREADY, vec_rsc_AWVALID,
      vec_rsc_AWUSER, vec_rsc_AWREGION, vec_rsc_AWQOS, vec_rsc_AWPROT, vec_rsc_AWCACHE,
      vec_rsc_AWLOCK, vec_rsc_AWBURST, vec_rsc_AWSIZE, vec_rsc_AWLEN, vec_rsc_AWADDR,
      vec_rsc_AWID, vec_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_triosy_lz,
      twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done, twiddle_rsc_RREADY, twiddle_rsc_RVALID,
      twiddle_rsc_RUSER, twiddle_rsc_RLAST, twiddle_rsc_RRESP, twiddle_rsc_RDATA,
      twiddle_rsc_RID, twiddle_rsc_ARREADY, twiddle_rsc_ARVALID, twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION, twiddle_rsc_ARQOS, twiddle_rsc_ARPROT, twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST, twiddle_rsc_ARSIZE, twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR, twiddle_rsc_ARID, twiddle_rsc_BREADY, twiddle_rsc_BVALID,
      twiddle_rsc_BUSER, twiddle_rsc_BRESP, twiddle_rsc_BID, twiddle_rsc_WREADY,
      twiddle_rsc_WVALID, twiddle_rsc_WUSER, twiddle_rsc_WLAST, twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA, twiddle_rsc_AWREADY, twiddle_rsc_AWVALID, twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION, twiddle_rsc_AWQOS, twiddle_rsc_AWPROT, twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST, twiddle_rsc_AWSIZE, twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR, twiddle_rsc_AWID, twiddle_rsc_triosy_lz, twiddle_h_rsc_s_tdone,
      twiddle_h_rsc_tr_write_done, twiddle_h_rsc_RREADY, twiddle_h_rsc_RVALID, twiddle_h_rsc_RUSER,
      twiddle_h_rsc_RLAST, twiddle_h_rsc_RRESP, twiddle_h_rsc_RDATA, twiddle_h_rsc_RID,
      twiddle_h_rsc_ARREADY, twiddle_h_rsc_ARVALID, twiddle_h_rsc_ARUSER, twiddle_h_rsc_ARREGION,
      twiddle_h_rsc_ARQOS, twiddle_h_rsc_ARPROT, twiddle_h_rsc_ARCACHE, twiddle_h_rsc_ARLOCK,
      twiddle_h_rsc_ARBURST, twiddle_h_rsc_ARSIZE, twiddle_h_rsc_ARLEN, twiddle_h_rsc_ARADDR,
      twiddle_h_rsc_ARID, twiddle_h_rsc_BREADY, twiddle_h_rsc_BVALID, twiddle_h_rsc_BUSER,
      twiddle_h_rsc_BRESP, twiddle_h_rsc_BID, twiddle_h_rsc_WREADY, twiddle_h_rsc_WVALID,
      twiddle_h_rsc_WUSER, twiddle_h_rsc_WLAST, twiddle_h_rsc_WSTRB, twiddle_h_rsc_WDATA,
      twiddle_h_rsc_AWREADY, twiddle_h_rsc_AWVALID, twiddle_h_rsc_AWUSER, twiddle_h_rsc_AWREGION,
      twiddle_h_rsc_AWQOS, twiddle_h_rsc_AWPROT, twiddle_h_rsc_AWCACHE, twiddle_h_rsc_AWLOCK,
      twiddle_h_rsc_AWBURST, twiddle_h_rsc_AWSIZE, twiddle_h_rsc_AWLEN, twiddle_h_rsc_AWADDR,
      twiddle_h_rsc_AWID, twiddle_h_rsc_triosy_lz, result_rsc_s_tdone, result_rsc_tr_write_done,
      result_rsc_RREADY, result_rsc_RVALID, result_rsc_RUSER, result_rsc_RLAST, result_rsc_RRESP,
      result_rsc_RDATA, result_rsc_RID, result_rsc_ARREADY, result_rsc_ARVALID, result_rsc_ARUSER,
      result_rsc_ARREGION, result_rsc_ARQOS, result_rsc_ARPROT, result_rsc_ARCACHE,
      result_rsc_ARLOCK, result_rsc_ARBURST, result_rsc_ARSIZE, result_rsc_ARLEN,
      result_rsc_ARADDR, result_rsc_ARID, result_rsc_BREADY, result_rsc_BVALID, result_rsc_BUSER,
      result_rsc_BRESP, result_rsc_BID, result_rsc_WREADY, result_rsc_WVALID, result_rsc_WUSER,
      result_rsc_WLAST, result_rsc_WSTRB, result_rsc_WDATA, result_rsc_AWREADY, result_rsc_AWVALID,
      result_rsc_AWUSER, result_rsc_AWREGION, result_rsc_AWQOS, result_rsc_AWPROT,
      result_rsc_AWCACHE, result_rsc_AWLOCK, result_rsc_AWBURST, result_rsc_AWSIZE,
      result_rsc_AWLEN, result_rsc_AWADDR, result_rsc_AWID, result_rsc_triosy_lz
);
  input clk;
  input rst;
  input vec_rsc_s_tdone;
  input vec_rsc_tr_write_done;
  input vec_rsc_RREADY;
  output vec_rsc_RVALID;
  output vec_rsc_RUSER;
  output vec_rsc_RLAST;
  output [1:0] vec_rsc_RRESP;
  output [31:0] vec_rsc_RDATA;
  output vec_rsc_RID;
  output vec_rsc_ARREADY;
  input vec_rsc_ARVALID;
  input vec_rsc_ARUSER;
  input [3:0] vec_rsc_ARREGION;
  input [3:0] vec_rsc_ARQOS;
  input [2:0] vec_rsc_ARPROT;
  input [3:0] vec_rsc_ARCACHE;
  input vec_rsc_ARLOCK;
  input [1:0] vec_rsc_ARBURST;
  input [2:0] vec_rsc_ARSIZE;
  input [7:0] vec_rsc_ARLEN;
  input [11:0] vec_rsc_ARADDR;
  input vec_rsc_ARID;
  input vec_rsc_BREADY;
  output vec_rsc_BVALID;
  output vec_rsc_BUSER;
  output [1:0] vec_rsc_BRESP;
  output vec_rsc_BID;
  output vec_rsc_WREADY;
  input vec_rsc_WVALID;
  input vec_rsc_WUSER;
  input vec_rsc_WLAST;
  input [3:0] vec_rsc_WSTRB;
  input [31:0] vec_rsc_WDATA;
  output vec_rsc_AWREADY;
  input vec_rsc_AWVALID;
  input vec_rsc_AWUSER;
  input [3:0] vec_rsc_AWREGION;
  input [3:0] vec_rsc_AWQOS;
  input [2:0] vec_rsc_AWPROT;
  input [3:0] vec_rsc_AWCACHE;
  input vec_rsc_AWLOCK;
  input [1:0] vec_rsc_AWBURST;
  input [2:0] vec_rsc_AWSIZE;
  input [7:0] vec_rsc_AWLEN;
  input [11:0] vec_rsc_AWADDR;
  input vec_rsc_AWID;
  output vec_rsc_triosy_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  output r_rsc_triosy_lz;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  output twiddle_rsc_triosy_lz;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  output twiddle_h_rsc_triosy_lz;
  input result_rsc_s_tdone;
  input result_rsc_tr_write_done;
  input result_rsc_RREADY;
  output result_rsc_RVALID;
  output result_rsc_RUSER;
  output result_rsc_RLAST;
  output [1:0] result_rsc_RRESP;
  output [31:0] result_rsc_RDATA;
  output result_rsc_RID;
  output result_rsc_ARREADY;
  input result_rsc_ARVALID;
  input result_rsc_ARUSER;
  input [3:0] result_rsc_ARREGION;
  input [3:0] result_rsc_ARQOS;
  input [2:0] result_rsc_ARPROT;
  input [3:0] result_rsc_ARCACHE;
  input result_rsc_ARLOCK;
  input [1:0] result_rsc_ARBURST;
  input [2:0] result_rsc_ARSIZE;
  input [7:0] result_rsc_ARLEN;
  input [13:0] result_rsc_ARADDR;
  input result_rsc_ARID;
  input result_rsc_BREADY;
  output result_rsc_BVALID;
  output result_rsc_BUSER;
  output [1:0] result_rsc_BRESP;
  output result_rsc_BID;
  output result_rsc_WREADY;
  input result_rsc_WVALID;
  input result_rsc_WUSER;
  input result_rsc_WLAST;
  input [3:0] result_rsc_WSTRB;
  input [31:0] result_rsc_WDATA;
  output result_rsc_AWREADY;
  input result_rsc_AWVALID;
  input result_rsc_AWUSER;
  input [3:0] result_rsc_AWREGION;
  input [3:0] result_rsc_AWQOS;
  input [2:0] result_rsc_AWPROT;
  input [3:0] result_rsc_AWCACHE;
  input result_rsc_AWLOCK;
  input [1:0] result_rsc_AWBURST;
  input [2:0] result_rsc_AWSIZE;
  input [7:0] result_rsc_AWLEN;
  input [13:0] result_rsc_AWADDR;
  input result_rsc_AWID;
  output result_rsc_triosy_lz;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire vec_rsci_wen_comp;
  reg [9:0] vec_rsci_s_raddr_core;
  wire [31:0] vec_rsci_s_din_mxwt;
  wire [31:0] p_rsci_idat;
  wire twiddle_rsci_wen_comp;
  wire [31:0] twiddle_rsci_s_din_mxwt;
  wire twiddle_h_rsci_wen_comp;
  wire [31:0] twiddle_h_rsci_s_din_mxwt;
  wire result_rsci_wen_comp;
  wire result_rsci_wen_comp_1;
  wire [31:0] result_rsci_s_din_mxwt;
  reg [31:0] result_rsci_s_dout_core;
  reg [3:0] result_rsci_s_raddr_core_13_10;
  reg [8:0] result_rsci_s_raddr_core_9_1;
  reg result_rsci_s_raddr_core_0;
  reg [3:0] result_rsci_s_waddr_core_13_10;
  reg [8:0] result_rsci_s_waddr_core_9_1;
  reg result_rsci_s_waddr_core_0;
  wire [7:0] fsm_output;
  wire or_dcpl_3;
  wire [9:0] INNER_LOOP_j_9_0_sva_2;
  wire [10:0] nl_INNER_LOOP_j_9_0_sva_2;
  wire [31:0] modulo_sub_base_sva_1;
  wire [32:0] nl_modulo_sub_base_sva_1;
  reg [10:0] for_i_10_0_sva_1;
  reg INNER_LOOP_stage_0_1;
  reg INNER_LOOP_stage_0;
  reg INNER_LOOP_stage_0_2;
  reg [31:0] p_sva;
  reg reg_vec_rsci_oswt_cse;
  reg reg_twiddle_rsci_oswt_cse;
  reg [9:0] reg_twiddle_rsci_s_raddr_core_cse;
  wire signed [20:0] nl_reg_twiddle_rsci_s_raddr_core_cse;
  reg reg_result_rsci_oswt_cse;
  reg reg_result_rsci_oswt_1_cse;
  reg reg_vec_rsc_triosy_obj_iswt0_cse;
  wire INNER_LOOP_and_cse;
  wire nor_6_cse;
  wire [13:0] z_out;
  wire [3:0] z_out_1;
  wire [4:0] nl_z_out_1;
  wire [31:0] z_out_3;
  wire [13:0] z_out_5;
  wire [9:0] z_out_6;
  wire [31:0] z_out_7;
  wire [63:0] nl_z_out_7;
  wire [51:0] z_out_8;
  wire [63:0] nl_z_out_8;
  reg [3:0] STAGE_LOOP_i_3_0_sva;
  reg [3:0] operator_20_false_acc_psp_sva;
  wire [4:0] nl_operator_20_false_acc_psp_sva;
  reg [9:0] operator_33_true_return_9_0_sva;
  reg [9:0] operator_20_false_rshift_psp_sva;
  reg [3:0] butterFly_f1_acc_itm;
  wire [4:0] nl_butterFly_f1_acc_itm;
  reg [3:0] operator_20_false_acc_itm;
  wire [4:0] nl_operator_20_false_acc_itm;
  reg INNER_LOOP_k_slc_INNER_LOOP_k_13_0_0_itm;
  reg [3:0] operator_20_false_1_acc_itm;
  wire [4:0] nl_operator_20_false_1_acc_itm;
  reg [9:0] butterFly_slc_butterFly_idx2_13_0_9_0_itm;
  reg [31:0] butterFly_f2_sva_1;
  reg [31:0] INNER_LOOP_tf_asn_itm_1;
  reg [31:0] INNER_LOOP_tf_h_asn_itm_1;
  reg [3:0] operator_20_false_1_acc_itm_1;
  reg [9:0] butterFly_slc_butterFly_idx2_13_0_9_0_itm_1;
  reg [8:0] INNER_LOOP_j_9_0_sva_8_0;
  wire [31:0] INNER_LOOP_tf_asn_itm_1_mx1;
  wire [13:0] butterFly_idx2_13_0_sva_1;
  wire [14:0] nl_butterFly_idx2_13_0_sva_1;
  wire [12:0] INNER_LOOP_idx1_acc_psp_sva_1;
  wire [13:0] nl_INNER_LOOP_idx1_acc_psp_sva_1;
  reg INNER_LOOP_k_13_0_sva_0;
  reg [8:0] INNER_LOOP_idx1_acc_psp_sva_8_0;
  wire INNER_LOOP_tf_and_cse;
  wire STAGE_LOOP_gp_and_cse;
  wire INNER_LOOP_tf_h_and_cse;
  wire INNER_LOOP_k_and_cse;
  wire operator_20_false_acc_itm_4_1;
  wire z_out_4_32;

  wire[3:0] butterFly_f2_acc_nl;
  wire[4:0] nl_butterFly_f2_acc_nl;
  wire[3:0] operator_20_false_mux_1_nl;
  wire[0:0] for_not_nl;
  wire[32:0] acc_2_nl;
  wire[33:0] nl_acc_2_nl;
  wire[0:0] for_or_1_nl;
  wire[0:0] for_or_2_nl;
  wire[0:0] INNER_LOOP_j_not_1_nl;
  wire[31:0] modulo_sub_qif_acc_nl;
  wire[32:0] nl_modulo_sub_qif_acc_nl;
  wire[4:0] operator_20_false_acc_nl;
  wire[5:0] nl_operator_20_false_acc_nl;
  wire[14:0] acc_nl;
  wire[15:0] nl_acc_nl;
  wire[13:0] for_mux_10_nl;
  wire[0:0] for_or_3_nl;
  wire[8:0] for_mux_11_nl;
  wire[32:0] acc_3_nl;
  wire[33:0] nl_acc_3_nl;
  wire[31:0] butterFly_mux_3_nl;
  wire[0:0] butterFly_or_1_nl;
  wire[31:0] butterFly_mux_4_nl;
  wire[33:0] acc_4_nl;
  wire[34:0] nl_acc_4_nl;
  wire[31:0] mult_if_mux_3_nl;
  wire[31:0] mult_if_mux_4_nl;
  wire[31:0] INNER_LOOP_idx1_mux_2_nl;
  wire[31:0] INNER_LOOP_idx1_mux_3_nl;
  wire[31:0] mult_z_mux_2_nl;
  wire[31:0] mult_z_mux_3_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [8:0] nl_INNER_LOOP_k_lshift_rg_a;
  assign nl_INNER_LOOP_k_lshift_rg_a = MUX_v_9_2_2(9'b000000001, (z_out_6[8:0]),
      fsm_output[4]);
  wire [3:0] nl_INNER_LOOP_k_lshift_rg_s;
  assign nl_INNER_LOOP_k_lshift_rg_s = MUX_v_4_2_2(z_out_1, operator_20_false_acc_psp_sva,
      fsm_output[4]);
  wire[8:0] operator_20_false_operator_20_false_and_nl;
  wire [10:0] nl_INNER_LOOP_g_rshift_rg_a;
  assign operator_20_false_operator_20_false_and_nl = MUX_v_9_2_2(9'b000000000, INNER_LOOP_j_9_0_sva_8_0,
      (fsm_output[4]));
  assign nl_INNER_LOOP_g_rshift_rg_a = {(~ (fsm_output[4])) , 1'b0 , operator_20_false_operator_20_false_and_nl};
  wire [3:0] nl_INNER_LOOP_g_rshift_rg_s;
  assign nl_INNER_LOOP_g_rshift_rg_s = MUX_v_4_2_2(STAGE_LOOP_i_3_0_sva, operator_20_false_acc_psp_sva,
      fsm_output[4]);
  wire [13:0] nl_ntt_flat_core_result_rsci_inst_result_rsci_s_raddr_core;
  assign nl_ntt_flat_core_result_rsci_inst_result_rsci_s_raddr_core = {result_rsci_s_raddr_core_13_10
      , result_rsci_s_raddr_core_9_1 , result_rsci_s_raddr_core_0};
  wire [13:0] nl_ntt_flat_core_result_rsci_inst_result_rsci_s_waddr_core;
  assign nl_ntt_flat_core_result_rsci_inst_result_rsci_s_waddr_core = {result_rsci_s_waddr_core_13_10
      , result_rsci_s_waddr_core_9_1 , result_rsci_s_waddr_core_0};
  wire [0:0] nl_ntt_flat_core_core_fsm_inst_for_C_1_tr0;
  assign nl_ntt_flat_core_core_fsm_inst_for_C_1_tr0 = for_i_10_0_sva_1[10];
  wire [0:0] nl_ntt_flat_core_core_fsm_inst_INNER_LOOP_C_1_tr0;
  assign nl_ntt_flat_core_core_fsm_inst_INNER_LOOP_C_1_tr0 = ~(INNER_LOOP_stage_0_1
      | INNER_LOOP_stage_0_2 | INNER_LOOP_stage_0);
  wire [0:0] nl_ntt_flat_core_core_fsm_inst_STAGE_LOOP_C_1_tr0;
  assign nl_ntt_flat_core_core_fsm_inst_STAGE_LOOP_C_1_tr0 = operator_20_false_acc_itm_4_1;
  ccs_in_v1 #(.rscid(32'sd2),
  .width(32'sd32)) p_rsci (
      .dat(p_rsc_dat),
      .idat(p_rsci_idat)
    );
  mgc_shift_l_v5 #(.width_a(32'sd9),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd14)) INNER_LOOP_k_lshift_rg (
      .a(nl_INNER_LOOP_k_lshift_rg_a[8:0]),
      .s(nl_INNER_LOOP_k_lshift_rg_s[3:0]),
      .z(z_out_5)
    );
  mgc_shift_r_v5 #(.width_a(32'sd11),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd10)) INNER_LOOP_g_rshift_rg (
      .a(nl_INNER_LOOP_g_rshift_rg_a[10:0]),
      .s(nl_INNER_LOOP_g_rshift_rg_s[3:0]),
      .z(z_out_6)
    );
  ntt_flat_core_vec_rsci ntt_flat_core_vec_rsci_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_s_tdone(vec_rsc_s_tdone),
      .vec_rsc_tr_write_done(vec_rsc_tr_write_done),
      .vec_rsc_RREADY(vec_rsc_RREADY),
      .vec_rsc_RVALID(vec_rsc_RVALID),
      .vec_rsc_RUSER(vec_rsc_RUSER),
      .vec_rsc_RLAST(vec_rsc_RLAST),
      .vec_rsc_RRESP(vec_rsc_RRESP),
      .vec_rsc_RDATA(vec_rsc_RDATA),
      .vec_rsc_RID(vec_rsc_RID),
      .vec_rsc_ARREADY(vec_rsc_ARREADY),
      .vec_rsc_ARVALID(vec_rsc_ARVALID),
      .vec_rsc_ARUSER(vec_rsc_ARUSER),
      .vec_rsc_ARREGION(vec_rsc_ARREGION),
      .vec_rsc_ARQOS(vec_rsc_ARQOS),
      .vec_rsc_ARPROT(vec_rsc_ARPROT),
      .vec_rsc_ARCACHE(vec_rsc_ARCACHE),
      .vec_rsc_ARLOCK(vec_rsc_ARLOCK),
      .vec_rsc_ARBURST(vec_rsc_ARBURST),
      .vec_rsc_ARSIZE(vec_rsc_ARSIZE),
      .vec_rsc_ARLEN(vec_rsc_ARLEN),
      .vec_rsc_ARADDR(vec_rsc_ARADDR),
      .vec_rsc_ARID(vec_rsc_ARID),
      .vec_rsc_BREADY(vec_rsc_BREADY),
      .vec_rsc_BVALID(vec_rsc_BVALID),
      .vec_rsc_BUSER(vec_rsc_BUSER),
      .vec_rsc_BRESP(vec_rsc_BRESP),
      .vec_rsc_BID(vec_rsc_BID),
      .vec_rsc_WREADY(vec_rsc_WREADY),
      .vec_rsc_WVALID(vec_rsc_WVALID),
      .vec_rsc_WUSER(vec_rsc_WUSER),
      .vec_rsc_WLAST(vec_rsc_WLAST),
      .vec_rsc_WSTRB(vec_rsc_WSTRB),
      .vec_rsc_WDATA(vec_rsc_WDATA),
      .vec_rsc_AWREADY(vec_rsc_AWREADY),
      .vec_rsc_AWVALID(vec_rsc_AWVALID),
      .vec_rsc_AWUSER(vec_rsc_AWUSER),
      .vec_rsc_AWREGION(vec_rsc_AWREGION),
      .vec_rsc_AWQOS(vec_rsc_AWQOS),
      .vec_rsc_AWPROT(vec_rsc_AWPROT),
      .vec_rsc_AWCACHE(vec_rsc_AWCACHE),
      .vec_rsc_AWLOCK(vec_rsc_AWLOCK),
      .vec_rsc_AWBURST(vec_rsc_AWBURST),
      .vec_rsc_AWSIZE(vec_rsc_AWSIZE),
      .vec_rsc_AWLEN(vec_rsc_AWLEN),
      .vec_rsc_AWADDR(vec_rsc_AWADDR),
      .vec_rsc_AWID(vec_rsc_AWID),
      .core_wen(core_wen),
      .vec_rsci_oswt(reg_vec_rsci_oswt_cse),
      .vec_rsci_wen_comp(vec_rsci_wen_comp),
      .vec_rsci_s_raddr_core(vec_rsci_s_raddr_core),
      .vec_rsci_s_din_mxwt(vec_rsci_s_din_mxwt)
    );
  ntt_flat_core_twiddle_rsci ntt_flat_core_twiddle_rsci_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_rsc_s_tdone(twiddle_rsc_s_tdone),
      .twiddle_rsc_tr_write_done(twiddle_rsc_tr_write_done),
      .twiddle_rsc_RREADY(twiddle_rsc_RREADY),
      .twiddle_rsc_RVALID(twiddle_rsc_RVALID),
      .twiddle_rsc_RUSER(twiddle_rsc_RUSER),
      .twiddle_rsc_RLAST(twiddle_rsc_RLAST),
      .twiddle_rsc_RRESP(twiddle_rsc_RRESP),
      .twiddle_rsc_RDATA(twiddle_rsc_RDATA),
      .twiddle_rsc_RID(twiddle_rsc_RID),
      .twiddle_rsc_ARREADY(twiddle_rsc_ARREADY),
      .twiddle_rsc_ARVALID(twiddle_rsc_ARVALID),
      .twiddle_rsc_ARUSER(twiddle_rsc_ARUSER),
      .twiddle_rsc_ARREGION(twiddle_rsc_ARREGION),
      .twiddle_rsc_ARQOS(twiddle_rsc_ARQOS),
      .twiddle_rsc_ARPROT(twiddle_rsc_ARPROT),
      .twiddle_rsc_ARCACHE(twiddle_rsc_ARCACHE),
      .twiddle_rsc_ARLOCK(twiddle_rsc_ARLOCK),
      .twiddle_rsc_ARBURST(twiddle_rsc_ARBURST),
      .twiddle_rsc_ARSIZE(twiddle_rsc_ARSIZE),
      .twiddle_rsc_ARLEN(twiddle_rsc_ARLEN),
      .twiddle_rsc_ARADDR(twiddle_rsc_ARADDR),
      .twiddle_rsc_ARID(twiddle_rsc_ARID),
      .twiddle_rsc_BREADY(twiddle_rsc_BREADY),
      .twiddle_rsc_BVALID(twiddle_rsc_BVALID),
      .twiddle_rsc_BUSER(twiddle_rsc_BUSER),
      .twiddle_rsc_BRESP(twiddle_rsc_BRESP),
      .twiddle_rsc_BID(twiddle_rsc_BID),
      .twiddle_rsc_WREADY(twiddle_rsc_WREADY),
      .twiddle_rsc_WVALID(twiddle_rsc_WVALID),
      .twiddle_rsc_WUSER(twiddle_rsc_WUSER),
      .twiddle_rsc_WLAST(twiddle_rsc_WLAST),
      .twiddle_rsc_WSTRB(twiddle_rsc_WSTRB),
      .twiddle_rsc_WDATA(twiddle_rsc_WDATA),
      .twiddle_rsc_AWREADY(twiddle_rsc_AWREADY),
      .twiddle_rsc_AWVALID(twiddle_rsc_AWVALID),
      .twiddle_rsc_AWUSER(twiddle_rsc_AWUSER),
      .twiddle_rsc_AWREGION(twiddle_rsc_AWREGION),
      .twiddle_rsc_AWQOS(twiddle_rsc_AWQOS),
      .twiddle_rsc_AWPROT(twiddle_rsc_AWPROT),
      .twiddle_rsc_AWCACHE(twiddle_rsc_AWCACHE),
      .twiddle_rsc_AWLOCK(twiddle_rsc_AWLOCK),
      .twiddle_rsc_AWBURST(twiddle_rsc_AWBURST),
      .twiddle_rsc_AWSIZE(twiddle_rsc_AWSIZE),
      .twiddle_rsc_AWLEN(twiddle_rsc_AWLEN),
      .twiddle_rsc_AWADDR(twiddle_rsc_AWADDR),
      .twiddle_rsc_AWID(twiddle_rsc_AWID),
      .core_wen(core_wen),
      .twiddle_rsci_oswt(reg_twiddle_rsci_oswt_cse),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_rsci_s_raddr_core(reg_twiddle_rsci_s_raddr_core_cse),
      .twiddle_rsci_s_din_mxwt(twiddle_rsci_s_din_mxwt)
    );
  ntt_flat_core_twiddle_h_rsci ntt_flat_core_twiddle_h_rsci_inst (
      .clk(clk),
      .rst(rst),
      .twiddle_h_rsc_s_tdone(twiddle_h_rsc_s_tdone),
      .twiddle_h_rsc_tr_write_done(twiddle_h_rsc_tr_write_done),
      .twiddle_h_rsc_RREADY(twiddle_h_rsc_RREADY),
      .twiddle_h_rsc_RVALID(twiddle_h_rsc_RVALID),
      .twiddle_h_rsc_RUSER(twiddle_h_rsc_RUSER),
      .twiddle_h_rsc_RLAST(twiddle_h_rsc_RLAST),
      .twiddle_h_rsc_RRESP(twiddle_h_rsc_RRESP),
      .twiddle_h_rsc_RDATA(twiddle_h_rsc_RDATA),
      .twiddle_h_rsc_RID(twiddle_h_rsc_RID),
      .twiddle_h_rsc_ARREADY(twiddle_h_rsc_ARREADY),
      .twiddle_h_rsc_ARVALID(twiddle_h_rsc_ARVALID),
      .twiddle_h_rsc_ARUSER(twiddle_h_rsc_ARUSER),
      .twiddle_h_rsc_ARREGION(twiddle_h_rsc_ARREGION),
      .twiddle_h_rsc_ARQOS(twiddle_h_rsc_ARQOS),
      .twiddle_h_rsc_ARPROT(twiddle_h_rsc_ARPROT),
      .twiddle_h_rsc_ARCACHE(twiddle_h_rsc_ARCACHE),
      .twiddle_h_rsc_ARLOCK(twiddle_h_rsc_ARLOCK),
      .twiddle_h_rsc_ARBURST(twiddle_h_rsc_ARBURST),
      .twiddle_h_rsc_ARSIZE(twiddle_h_rsc_ARSIZE),
      .twiddle_h_rsc_ARLEN(twiddle_h_rsc_ARLEN),
      .twiddle_h_rsc_ARADDR(twiddle_h_rsc_ARADDR),
      .twiddle_h_rsc_ARID(twiddle_h_rsc_ARID),
      .twiddle_h_rsc_BREADY(twiddle_h_rsc_BREADY),
      .twiddle_h_rsc_BVALID(twiddle_h_rsc_BVALID),
      .twiddle_h_rsc_BUSER(twiddle_h_rsc_BUSER),
      .twiddle_h_rsc_BRESP(twiddle_h_rsc_BRESP),
      .twiddle_h_rsc_BID(twiddle_h_rsc_BID),
      .twiddle_h_rsc_WREADY(twiddle_h_rsc_WREADY),
      .twiddle_h_rsc_WVALID(twiddle_h_rsc_WVALID),
      .twiddle_h_rsc_WUSER(twiddle_h_rsc_WUSER),
      .twiddle_h_rsc_WLAST(twiddle_h_rsc_WLAST),
      .twiddle_h_rsc_WSTRB(twiddle_h_rsc_WSTRB),
      .twiddle_h_rsc_WDATA(twiddle_h_rsc_WDATA),
      .twiddle_h_rsc_AWREADY(twiddle_h_rsc_AWREADY),
      .twiddle_h_rsc_AWVALID(twiddle_h_rsc_AWVALID),
      .twiddle_h_rsc_AWUSER(twiddle_h_rsc_AWUSER),
      .twiddle_h_rsc_AWREGION(twiddle_h_rsc_AWREGION),
      .twiddle_h_rsc_AWQOS(twiddle_h_rsc_AWQOS),
      .twiddle_h_rsc_AWPROT(twiddle_h_rsc_AWPROT),
      .twiddle_h_rsc_AWCACHE(twiddle_h_rsc_AWCACHE),
      .twiddle_h_rsc_AWLOCK(twiddle_h_rsc_AWLOCK),
      .twiddle_h_rsc_AWBURST(twiddle_h_rsc_AWBURST),
      .twiddle_h_rsc_AWSIZE(twiddle_h_rsc_AWSIZE),
      .twiddle_h_rsc_AWLEN(twiddle_h_rsc_AWLEN),
      .twiddle_h_rsc_AWADDR(twiddle_h_rsc_AWADDR),
      .twiddle_h_rsc_AWID(twiddle_h_rsc_AWID),
      .core_wen(core_wen),
      .twiddle_h_rsci_oswt(reg_twiddle_rsci_oswt_cse),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp),
      .twiddle_h_rsci_s_raddr_core(reg_twiddle_rsci_s_raddr_core_cse),
      .twiddle_h_rsci_s_din_mxwt(twiddle_h_rsci_s_din_mxwt)
    );
  ntt_flat_core_result_rsci ntt_flat_core_result_rsci_inst (
      .clk(clk),
      .rst(rst),
      .result_rsc_s_tdone(result_rsc_s_tdone),
      .result_rsc_tr_write_done(result_rsc_tr_write_done),
      .result_rsc_RREADY(result_rsc_RREADY),
      .result_rsc_RVALID(result_rsc_RVALID),
      .result_rsc_RUSER(result_rsc_RUSER),
      .result_rsc_RLAST(result_rsc_RLAST),
      .result_rsc_RRESP(result_rsc_RRESP),
      .result_rsc_RDATA(result_rsc_RDATA),
      .result_rsc_RID(result_rsc_RID),
      .result_rsc_ARREADY(result_rsc_ARREADY),
      .result_rsc_ARVALID(result_rsc_ARVALID),
      .result_rsc_ARUSER(result_rsc_ARUSER),
      .result_rsc_ARREGION(result_rsc_ARREGION),
      .result_rsc_ARQOS(result_rsc_ARQOS),
      .result_rsc_ARPROT(result_rsc_ARPROT),
      .result_rsc_ARCACHE(result_rsc_ARCACHE),
      .result_rsc_ARLOCK(result_rsc_ARLOCK),
      .result_rsc_ARBURST(result_rsc_ARBURST),
      .result_rsc_ARSIZE(result_rsc_ARSIZE),
      .result_rsc_ARLEN(result_rsc_ARLEN),
      .result_rsc_ARADDR(result_rsc_ARADDR),
      .result_rsc_ARID(result_rsc_ARID),
      .result_rsc_BREADY(result_rsc_BREADY),
      .result_rsc_BVALID(result_rsc_BVALID),
      .result_rsc_BUSER(result_rsc_BUSER),
      .result_rsc_BRESP(result_rsc_BRESP),
      .result_rsc_BID(result_rsc_BID),
      .result_rsc_WREADY(result_rsc_WREADY),
      .result_rsc_WVALID(result_rsc_WVALID),
      .result_rsc_WUSER(result_rsc_WUSER),
      .result_rsc_WLAST(result_rsc_WLAST),
      .result_rsc_WSTRB(result_rsc_WSTRB),
      .result_rsc_WDATA(result_rsc_WDATA),
      .result_rsc_AWREADY(result_rsc_AWREADY),
      .result_rsc_AWVALID(result_rsc_AWVALID),
      .result_rsc_AWUSER(result_rsc_AWUSER),
      .result_rsc_AWREGION(result_rsc_AWREGION),
      .result_rsc_AWQOS(result_rsc_AWQOS),
      .result_rsc_AWPROT(result_rsc_AWPROT),
      .result_rsc_AWCACHE(result_rsc_AWCACHE),
      .result_rsc_AWLOCK(result_rsc_AWLOCK),
      .result_rsc_AWBURST(result_rsc_AWBURST),
      .result_rsc_AWSIZE(result_rsc_AWSIZE),
      .result_rsc_AWLEN(result_rsc_AWLEN),
      .result_rsc_AWADDR(result_rsc_AWADDR),
      .result_rsc_AWID(result_rsc_AWID),
      .core_wen(core_wen),
      .result_rsci_oswt(reg_result_rsci_oswt_cse),
      .result_rsci_wen_comp(result_rsci_wen_comp),
      .result_rsci_oswt_1(reg_result_rsci_oswt_1_cse),
      .result_rsci_wen_comp_1(result_rsci_wen_comp_1),
      .result_rsci_s_raddr_core(nl_ntt_flat_core_result_rsci_inst_result_rsci_s_raddr_core[13:0]),
      .result_rsci_s_waddr_core(nl_ntt_flat_core_result_rsci_inst_result_rsci_s_waddr_core[13:0]),
      .result_rsci_s_din_mxwt(result_rsci_s_din_mxwt),
      .result_rsci_s_dout_core(result_rsci_s_dout_core)
    );
  ntt_flat_core_vec_rsc_triosy_obj ntt_flat_core_vec_rsc_triosy_obj_inst (
      .vec_rsc_triosy_lz(vec_rsc_triosy_lz),
      .core_wten(core_wten),
      .vec_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_p_rsc_triosy_obj ntt_flat_core_p_rsc_triosy_obj_inst (
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .core_wten(core_wten),
      .p_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_r_rsc_triosy_obj ntt_flat_core_r_rsc_triosy_obj_inst (
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .core_wten(core_wten),
      .r_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_twiddle_rsc_triosy_obj ntt_flat_core_twiddle_rsc_triosy_obj_inst
      (
      .twiddle_rsc_triosy_lz(twiddle_rsc_triosy_lz),
      .core_wten(core_wten),
      .twiddle_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_twiddle_h_rsc_triosy_obj ntt_flat_core_twiddle_h_rsc_triosy_obj_inst
      (
      .twiddle_h_rsc_triosy_lz(twiddle_h_rsc_triosy_lz),
      .core_wten(core_wten),
      .twiddle_h_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_result_rsc_triosy_obj ntt_flat_core_result_rsc_triosy_obj_inst (
      .result_rsc_triosy_lz(result_rsc_triosy_lz),
      .core_wten(core_wten),
      .result_rsc_triosy_obj_iswt0(reg_vec_rsc_triosy_obj_iswt0_cse)
    );
  ntt_flat_core_staller ntt_flat_core_staller_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vec_rsci_wen_comp(vec_rsci_wen_comp),
      .twiddle_rsci_wen_comp(twiddle_rsci_wen_comp),
      .twiddle_h_rsci_wen_comp(twiddle_h_rsci_wen_comp),
      .result_rsci_wen_comp(result_rsci_wen_comp),
      .result_rsci_wen_comp_1(result_rsci_wen_comp_1)
    );
  ntt_flat_core_core_fsm ntt_flat_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .fsm_output(fsm_output),
      .for_C_1_tr0(nl_ntt_flat_core_core_fsm_inst_for_C_1_tr0[0:0]),
      .INNER_LOOP_C_1_tr0(nl_ntt_flat_core_core_fsm_inst_INNER_LOOP_C_1_tr0[0:0]),
      .STAGE_LOOP_C_1_tr0(nl_ntt_flat_core_core_fsm_inst_STAGE_LOOP_C_1_tr0[0:0])
    );
  assign INNER_LOOP_tf_and_cse = core_wen & INNER_LOOP_stage_0_1;
  assign nor_6_cse = ~((fsm_output[5:4]!=2'b00));
  assign STAGE_LOOP_gp_and_cse = core_wen & (~ or_dcpl_3);
  assign INNER_LOOP_tf_h_and_cse = core_wen & (fsm_output[5]);
  assign INNER_LOOP_and_cse = core_wen & ((fsm_output[3]) | (fsm_output[5]));
  assign INNER_LOOP_k_and_cse = core_wen & (~ (fsm_output[5]));
  assign nl_modulo_sub_qif_acc_nl = ({1'b1 , (modulo_sub_base_sva_1[30:0])}) + p_sva;
  assign modulo_sub_qif_acc_nl = nl_modulo_sub_qif_acc_nl[31:0];
  assign INNER_LOOP_tf_asn_itm_1_mx1 = MUX_v_32_2_2(({1'b0 , (modulo_sub_base_sva_1[30:0])}),
      modulo_sub_qif_acc_nl, modulo_sub_base_sva_1[31]);
  assign nl_modulo_sub_base_sva_1 = result_rsci_s_din_mxwt - butterFly_f2_sva_1;
  assign modulo_sub_base_sva_1 = nl_modulo_sub_base_sva_1[31:0];
  assign nl_INNER_LOOP_j_9_0_sva_2 = conv_u2u_9_10(INNER_LOOP_j_9_0_sva_8_0) + 10'b0000000001;
  assign INNER_LOOP_j_9_0_sva_2 = nl_INNER_LOOP_j_9_0_sva_2[9:0];
  assign nl_butterFly_idx2_13_0_sva_1 = ({INNER_LOOP_idx1_acc_psp_sva_1 , (z_out[0])})
      + conv_u2u_10_14(operator_20_false_rshift_psp_sva);
  assign butterFly_idx2_13_0_sva_1 = nl_butterFly_idx2_13_0_sva_1[13:0];
  assign nl_INNER_LOOP_idx1_acc_psp_sva_1 = (z_out_7[12:0]) + (z_out[13:1]);
  assign INNER_LOOP_idx1_acc_psp_sva_1 = nl_INNER_LOOP_idx1_acc_psp_sva_1[12:0];
  assign nl_operator_20_false_acc_nl = ({1'b1 , (~ z_out_1)}) + 5'b01011;
  assign operator_20_false_acc_nl = nl_operator_20_false_acc_nl[4:0];
  assign operator_20_false_acc_itm_4_1 = readslicef_5_1_4(operator_20_false_acc_nl);
  assign or_dcpl_3 = (fsm_output[5:4]!=2'b00);
  always @(posedge clk) begin
    if ( core_wen & ((fsm_output[7]) | (fsm_output[0])) ) begin
      p_sva <= p_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( core_wen ) begin
      vec_rsci_s_raddr_core <= MUX_v_10_2_2(10'b0000000000, (for_i_10_0_sva_1[9:0]),
          (fsm_output[2]));
      result_rsci_s_raddr_core_9_1 <= MUX_v_9_2_2((butterFly_idx2_13_0_sva_1[9:1]),
          INNER_LOOP_idx1_acc_psp_sva_8_0, fsm_output[5]);
      result_rsci_s_raddr_core_0 <= MUX_s_1_2_2((butterFly_idx2_13_0_sva_1[0]), INNER_LOOP_k_13_0_sva_0,
          fsm_output[5]);
      result_rsci_s_raddr_core_13_10 <= MUX_v_4_2_2(butterFly_f2_acc_nl, butterFly_f1_acc_itm,
          fsm_output[5]);
      result_rsci_s_waddr_core_9_1 <= MUX1HOT_v_9_3_2((vec_rsci_s_raddr_core[9:1]),
          result_rsci_s_raddr_core_9_1, (butterFly_slc_butterFly_idx2_13_0_9_0_itm_1[9:1]),
          {(fsm_output[1]) , (fsm_output[4]) , (fsm_output[5])});
      result_rsci_s_waddr_core_0 <= MUX1HOT_s_1_3_2((vec_rsci_s_raddr_core[0]), INNER_LOOP_k_slc_INNER_LOOP_k_13_0_0_itm,
          (butterFly_slc_butterFly_idx2_13_0_9_0_itm_1[0]), {(fsm_output[1]) , (fsm_output[4])
          , (fsm_output[5])});
      result_rsci_s_waddr_core_13_10 <= MUX_v_4_2_2(4'b0000, operator_20_false_mux_1_nl,
          for_not_nl);
      result_rsci_s_dout_core <= MUX1HOT_v_32_3_2(vec_rsci_s_din_mxwt, (readslicef_33_32_1(acc_2_nl)),
          z_out_3, {(fsm_output[1]) , for_or_1_nl , for_or_2_nl});
      INNER_LOOP_tf_asn_itm_1 <= MUX_v_32_2_2(INNER_LOOP_tf_asn_itm_1_mx1, twiddle_rsci_s_din_mxwt,
          fsm_output[5]);
      butterFly_f2_sva_1 <= MUX_v_32_2_2((z_out_8[31:0]), result_rsci_s_din_mxwt,
          fsm_output[5]);
      INNER_LOOP_k_13_0_sva_0 <= z_out[0];
      INNER_LOOP_idx1_acc_psp_sva_8_0 <= INNER_LOOP_idx1_acc_psp_sva_1[8:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vec_rsci_oswt_cse <= 1'b0;
      reg_twiddle_rsci_oswt_cse <= 1'b0;
      reg_result_rsci_oswt_cse <= 1'b0;
      reg_result_rsci_oswt_1_cse <= 1'b0;
      reg_vec_rsc_triosy_obj_iswt0_cse <= 1'b0;
      for_i_10_0_sva_1 <= 11'b00000000000;
      INNER_LOOP_stage_0 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_vec_rsci_oswt_cse <= ~((~((fsm_output[0]) | (fsm_output[2]))) | ((for_i_10_0_sva_1[10])
          & (fsm_output[2])));
      reg_twiddle_rsci_oswt_cse <= INNER_LOOP_stage_0_1 & (fsm_output[4]);
      reg_result_rsci_oswt_cse <= INNER_LOOP_stage_0_1 & or_dcpl_3;
      reg_result_rsci_oswt_1_cse <= (INNER_LOOP_stage_0_2 & or_dcpl_3) | (fsm_output[1]);
      reg_vec_rsc_triosy_obj_iswt0_cse <= operator_20_false_acc_itm_4_1 & (fsm_output[6]);
      for_i_10_0_sva_1 <= z_out[10:0];
      INNER_LOOP_stage_0 <= (INNER_LOOP_stage_0 & (~(nor_6_cse | (INNER_LOOP_stage_0_1
          & (INNER_LOOP_j_9_0_sva_2[9]) & (fsm_output[4]))))) | (fsm_output[3]);
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_tf_and_cse ) begin
      reg_twiddle_rsci_s_raddr_core_cse <= nl_reg_twiddle_rsci_s_raddr_core_cse[9:0];
      butterFly_f1_acc_itm <= nl_butterFly_f1_acc_itm[3:0];
      butterFly_slc_butterFly_idx2_13_0_9_0_itm <= butterFly_idx2_13_0_sva_1[9:0];
      operator_20_false_1_acc_itm <= nl_operator_20_false_1_acc_itm[3:0];
    end
  end
  always @(posedge clk) begin
    if ( core_wen & ((fsm_output[2]) | (fsm_output[6])) ) begin
      STAGE_LOOP_i_3_0_sva <= MUX_v_4_2_2(4'b0001, z_out_1, fsm_output[6]);
    end
  end
  always @(posedge clk) begin
    if ( (~ (fsm_output[5])) & core_wen & (INNER_LOOP_stage_0_1 | (~ (fsm_output[4])))
        ) begin
      INNER_LOOP_j_9_0_sva_8_0 <= MUX_v_9_2_2(9'b000000000, (INNER_LOOP_j_9_0_sva_2[8:0]),
          INNER_LOOP_j_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( STAGE_LOOP_gp_and_cse ) begin
      operator_33_true_return_9_0_sva <= z_out_5[9:0];
      operator_20_false_rshift_psp_sva <= z_out_6;
      operator_20_false_acc_psp_sva <= nl_operator_20_false_acc_psp_sva[3:0];
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_tf_h_and_cse ) begin
      INNER_LOOP_tf_h_asn_itm_1 <= twiddle_h_rsci_s_din_mxwt;
      operator_20_false_1_acc_itm_1 <= operator_20_false_1_acc_itm;
      butterFly_slc_butterFly_idx2_13_0_9_0_itm_1 <= butterFly_slc_butterFly_idx2_13_0_9_0_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INNER_LOOP_stage_0_1 <= 1'b0;
      INNER_LOOP_stage_0_2 <= 1'b0;
    end
    else if ( INNER_LOOP_and_cse ) begin
      INNER_LOOP_stage_0_1 <= INNER_LOOP_stage_0 | (fsm_output[3]);
      INNER_LOOP_stage_0_2 <= INNER_LOOP_stage_0_1 & (~ (fsm_output[3]));
    end
  end
  always @(posedge clk) begin
    if ( INNER_LOOP_k_and_cse ) begin
      INNER_LOOP_k_slc_INNER_LOOP_k_13_0_0_itm <= z_out[0];
      operator_20_false_acc_itm <= nl_operator_20_false_acc_itm[3:0];
    end
  end
  assign nl_butterFly_f2_acc_nl = STAGE_LOOP_i_3_0_sva + (butterFly_idx2_13_0_sva_1[13:10]);
  assign butterFly_f2_acc_nl = nl_butterFly_f2_acc_nl[3:0];
  assign operator_20_false_mux_1_nl = MUX_v_4_2_2(operator_20_false_acc_itm, operator_20_false_1_acc_itm_1,
      fsm_output[5]);
  assign for_not_nl = ~ nor_6_cse;
  assign nl_acc_2_nl = ({z_out_3 , 1'b1}) + ({(~ p_sva) , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[32:0];
  assign for_or_1_nl = (z_out_4_32 & (fsm_output[4])) | ((~ z_out_4_32) & (fsm_output[5]));
  assign for_or_2_nl = ((~ z_out_4_32) & (fsm_output[4])) | (z_out_4_32 & (fsm_output[5]));
  assign nl_reg_twiddle_rsci_s_raddr_core_cse  = $signed(operator_33_true_return_9_0_sva)
      * $signed(conv_u2s_10_11(z_out[9:0]));
  assign nl_butterFly_f1_acc_itm  = STAGE_LOOP_i_3_0_sva + (INNER_LOOP_idx1_acc_psp_sva_1[12:9]);
  assign nl_operator_20_false_1_acc_itm  = STAGE_LOOP_i_3_0_sva + (butterFly_idx2_13_0_sva_1[13:10])
      + 4'b0001;
  assign INNER_LOOP_j_not_1_nl = ~ nor_6_cse;
  assign nl_operator_20_false_acc_psp_sva  = (~ STAGE_LOOP_i_3_0_sva) + 4'b1011;
  assign nl_operator_20_false_acc_itm  = STAGE_LOOP_i_3_0_sva + (INNER_LOOP_idx1_acc_psp_sva_1[12:9])
      + 4'b0001;
  assign for_mux_10_nl = MUX_v_14_2_2(({4'b0000 , vec_rsci_s_raddr_core}), (~ z_out_5),
      fsm_output[4]);
  assign for_or_3_nl = (~ (fsm_output[1])) | (fsm_output[4]);
  assign for_mux_11_nl = MUX_v_9_2_2(9'b000000001, INNER_LOOP_j_9_0_sva_8_0, fsm_output[4]);
  assign nl_acc_nl = ({for_mux_10_nl , for_or_3_nl}) + conv_u2u_10_15({for_mux_11_nl
      , 1'b1});
  assign acc_nl = nl_acc_nl[14:0];
  assign z_out = readslicef_15_14_1(acc_nl);
  assign nl_z_out_1 = STAGE_LOOP_i_3_0_sva + conv_s2u_2_4({(~ (fsm_output[6])) ,
      1'b1});
  assign z_out_1 = nl_z_out_1[3:0];
  assign butterFly_mux_3_nl = MUX_v_32_2_2(result_rsci_s_din_mxwt, butterFly_f2_sva_1,
      fsm_output[5]);
  assign butterFly_or_1_nl = (fsm_output[5:4]!=2'b01);
  assign butterFly_mux_4_nl = MUX_v_32_2_2(butterFly_f2_sva_1, (~ z_out_7), fsm_output[5]);
  assign nl_acc_3_nl = ({butterFly_mux_3_nl , butterFly_or_1_nl}) + ({butterFly_mux_4_nl
      , 1'b1});
  assign acc_3_nl = nl_acc_3_nl[32:0];
  assign z_out_3 = readslicef_33_32_1(acc_3_nl);
  assign mult_if_mux_3_nl = MUX_v_32_2_2(z_out_3, p_sva, fsm_output[4]);
  assign mult_if_mux_4_nl = MUX_v_32_2_2((~ p_sva), (~ z_out_3), fsm_output[4]);
  assign nl_acc_4_nl = ({1'b1 , mult_if_mux_3_nl , 1'b1}) + conv_u2u_33_34({mult_if_mux_4_nl
      , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[33:0];
  assign z_out_4_32 = readslicef_34_1_33(acc_4_nl);
  assign INNER_LOOP_idx1_mux_2_nl = MUX_v_32_2_2(({23'b00000000000000000000000 ,
      (z_out_6[8:0])}), (z_out_8[51:20]), fsm_output[5]);
  assign INNER_LOOP_idx1_mux_3_nl = MUX_v_32_2_2(({22'b0000000000000000000000 , operator_20_false_rshift_psp_sva}),
      p_sva, fsm_output[5]);
  assign nl_z_out_7 = INNER_LOOP_idx1_mux_2_nl * INNER_LOOP_idx1_mux_3_nl;
  assign z_out_7 = nl_z_out_7[31:0];
  assign mult_z_mux_2_nl = MUX_v_32_2_2(INNER_LOOP_tf_asn_itm_1_mx1, INNER_LOOP_tf_asn_itm_1,
      fsm_output[5]);
  assign mult_z_mux_3_nl = MUX_v_32_2_2(INNER_LOOP_tf_asn_itm_1, INNER_LOOP_tf_h_asn_itm_1,
      fsm_output[5]);
  assign nl_z_out_8 = mult_z_mux_2_nl * mult_z_mux_3_nl;
  assign z_out_8 = nl_z_out_8[51:0];

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | ( input_1 & {32{sel[1]}});
    result = result | ( input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [13:0] readslicef_15_14_1;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_15_14_1 = tmp[13:0];
  end
  endfunction


  function automatic [31:0] readslicef_33_32_1;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_33_32_1 = tmp[31:0];
  end
  endfunction


  function automatic [0:0] readslicef_34_1_33;
    input [33:0] vector;
    reg [33:0] tmp;
  begin
    tmp = vector >> 33;
    readslicef_34_1_33 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function automatic [3:0] conv_s2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_10_14 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_14 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_10_15 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_15 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [33:0] conv_u2u_33_34 ;
    input [32:0]  vector ;
  begin
    conv_u2u_33_34 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ntt_flat
// ------------------------------------------------------------------


module ntt_flat (
  clk, rst, vec_rsc_s_tdone, vec_rsc_tr_write_done, vec_rsc_RREADY, vec_rsc_RVALID,
      vec_rsc_RUSER, vec_rsc_RLAST, vec_rsc_RRESP, vec_rsc_RDATA, vec_rsc_RID, vec_rsc_ARREADY,
      vec_rsc_ARVALID, vec_rsc_ARUSER, vec_rsc_ARREGION, vec_rsc_ARQOS, vec_rsc_ARPROT,
      vec_rsc_ARCACHE, vec_rsc_ARLOCK, vec_rsc_ARBURST, vec_rsc_ARSIZE, vec_rsc_ARLEN,
      vec_rsc_ARADDR, vec_rsc_ARID, vec_rsc_BREADY, vec_rsc_BVALID, vec_rsc_BUSER,
      vec_rsc_BRESP, vec_rsc_BID, vec_rsc_WREADY, vec_rsc_WVALID, vec_rsc_WUSER,
      vec_rsc_WLAST, vec_rsc_WSTRB, vec_rsc_WDATA, vec_rsc_AWREADY, vec_rsc_AWVALID,
      vec_rsc_AWUSER, vec_rsc_AWREGION, vec_rsc_AWQOS, vec_rsc_AWPROT, vec_rsc_AWCACHE,
      vec_rsc_AWLOCK, vec_rsc_AWBURST, vec_rsc_AWSIZE, vec_rsc_AWLEN, vec_rsc_AWADDR,
      vec_rsc_AWID, vec_rsc_triosy_lz, p_rsc_dat, p_rsc_triosy_lz, r_rsc_dat, r_rsc_triosy_lz,
      twiddle_rsc_s_tdone, twiddle_rsc_tr_write_done, twiddle_rsc_RREADY, twiddle_rsc_RVALID,
      twiddle_rsc_RUSER, twiddle_rsc_RLAST, twiddle_rsc_RRESP, twiddle_rsc_RDATA,
      twiddle_rsc_RID, twiddle_rsc_ARREADY, twiddle_rsc_ARVALID, twiddle_rsc_ARUSER,
      twiddle_rsc_ARREGION, twiddle_rsc_ARQOS, twiddle_rsc_ARPROT, twiddle_rsc_ARCACHE,
      twiddle_rsc_ARLOCK, twiddle_rsc_ARBURST, twiddle_rsc_ARSIZE, twiddle_rsc_ARLEN,
      twiddle_rsc_ARADDR, twiddle_rsc_ARID, twiddle_rsc_BREADY, twiddle_rsc_BVALID,
      twiddle_rsc_BUSER, twiddle_rsc_BRESP, twiddle_rsc_BID, twiddle_rsc_WREADY,
      twiddle_rsc_WVALID, twiddle_rsc_WUSER, twiddle_rsc_WLAST, twiddle_rsc_WSTRB,
      twiddle_rsc_WDATA, twiddle_rsc_AWREADY, twiddle_rsc_AWVALID, twiddle_rsc_AWUSER,
      twiddle_rsc_AWREGION, twiddle_rsc_AWQOS, twiddle_rsc_AWPROT, twiddle_rsc_AWCACHE,
      twiddle_rsc_AWLOCK, twiddle_rsc_AWBURST, twiddle_rsc_AWSIZE, twiddle_rsc_AWLEN,
      twiddle_rsc_AWADDR, twiddle_rsc_AWID, twiddle_rsc_triosy_lz, twiddle_h_rsc_s_tdone,
      twiddle_h_rsc_tr_write_done, twiddle_h_rsc_RREADY, twiddle_h_rsc_RVALID, twiddle_h_rsc_RUSER,
      twiddle_h_rsc_RLAST, twiddle_h_rsc_RRESP, twiddle_h_rsc_RDATA, twiddle_h_rsc_RID,
      twiddle_h_rsc_ARREADY, twiddle_h_rsc_ARVALID, twiddle_h_rsc_ARUSER, twiddle_h_rsc_ARREGION,
      twiddle_h_rsc_ARQOS, twiddle_h_rsc_ARPROT, twiddle_h_rsc_ARCACHE, twiddle_h_rsc_ARLOCK,
      twiddle_h_rsc_ARBURST, twiddle_h_rsc_ARSIZE, twiddle_h_rsc_ARLEN, twiddle_h_rsc_ARADDR,
      twiddle_h_rsc_ARID, twiddle_h_rsc_BREADY, twiddle_h_rsc_BVALID, twiddle_h_rsc_BUSER,
      twiddle_h_rsc_BRESP, twiddle_h_rsc_BID, twiddle_h_rsc_WREADY, twiddle_h_rsc_WVALID,
      twiddle_h_rsc_WUSER, twiddle_h_rsc_WLAST, twiddle_h_rsc_WSTRB, twiddle_h_rsc_WDATA,
      twiddle_h_rsc_AWREADY, twiddle_h_rsc_AWVALID, twiddle_h_rsc_AWUSER, twiddle_h_rsc_AWREGION,
      twiddle_h_rsc_AWQOS, twiddle_h_rsc_AWPROT, twiddle_h_rsc_AWCACHE, twiddle_h_rsc_AWLOCK,
      twiddle_h_rsc_AWBURST, twiddle_h_rsc_AWSIZE, twiddle_h_rsc_AWLEN, twiddle_h_rsc_AWADDR,
      twiddle_h_rsc_AWID, twiddle_h_rsc_triosy_lz, result_rsc_s_tdone, result_rsc_tr_write_done,
      result_rsc_RREADY, result_rsc_RVALID, result_rsc_RUSER, result_rsc_RLAST, result_rsc_RRESP,
      result_rsc_RDATA, result_rsc_RID, result_rsc_ARREADY, result_rsc_ARVALID, result_rsc_ARUSER,
      result_rsc_ARREGION, result_rsc_ARQOS, result_rsc_ARPROT, result_rsc_ARCACHE,
      result_rsc_ARLOCK, result_rsc_ARBURST, result_rsc_ARSIZE, result_rsc_ARLEN,
      result_rsc_ARADDR, result_rsc_ARID, result_rsc_BREADY, result_rsc_BVALID, result_rsc_BUSER,
      result_rsc_BRESP, result_rsc_BID, result_rsc_WREADY, result_rsc_WVALID, result_rsc_WUSER,
      result_rsc_WLAST, result_rsc_WSTRB, result_rsc_WDATA, result_rsc_AWREADY, result_rsc_AWVALID,
      result_rsc_AWUSER, result_rsc_AWREGION, result_rsc_AWQOS, result_rsc_AWPROT,
      result_rsc_AWCACHE, result_rsc_AWLOCK, result_rsc_AWBURST, result_rsc_AWSIZE,
      result_rsc_AWLEN, result_rsc_AWADDR, result_rsc_AWID, result_rsc_triosy_lz
);
  input clk;
  input rst;
  input vec_rsc_s_tdone;
  input vec_rsc_tr_write_done;
  input vec_rsc_RREADY;
  output vec_rsc_RVALID;
  output vec_rsc_RUSER;
  output vec_rsc_RLAST;
  output [1:0] vec_rsc_RRESP;
  output [31:0] vec_rsc_RDATA;
  output vec_rsc_RID;
  output vec_rsc_ARREADY;
  input vec_rsc_ARVALID;
  input vec_rsc_ARUSER;
  input [3:0] vec_rsc_ARREGION;
  input [3:0] vec_rsc_ARQOS;
  input [2:0] vec_rsc_ARPROT;
  input [3:0] vec_rsc_ARCACHE;
  input vec_rsc_ARLOCK;
  input [1:0] vec_rsc_ARBURST;
  input [2:0] vec_rsc_ARSIZE;
  input [7:0] vec_rsc_ARLEN;
  input [11:0] vec_rsc_ARADDR;
  input vec_rsc_ARID;
  input vec_rsc_BREADY;
  output vec_rsc_BVALID;
  output vec_rsc_BUSER;
  output [1:0] vec_rsc_BRESP;
  output vec_rsc_BID;
  output vec_rsc_WREADY;
  input vec_rsc_WVALID;
  input vec_rsc_WUSER;
  input vec_rsc_WLAST;
  input [3:0] vec_rsc_WSTRB;
  input [31:0] vec_rsc_WDATA;
  output vec_rsc_AWREADY;
  input vec_rsc_AWVALID;
  input vec_rsc_AWUSER;
  input [3:0] vec_rsc_AWREGION;
  input [3:0] vec_rsc_AWQOS;
  input [2:0] vec_rsc_AWPROT;
  input [3:0] vec_rsc_AWCACHE;
  input vec_rsc_AWLOCK;
  input [1:0] vec_rsc_AWBURST;
  input [2:0] vec_rsc_AWSIZE;
  input [7:0] vec_rsc_AWLEN;
  input [11:0] vec_rsc_AWADDR;
  input vec_rsc_AWID;
  output vec_rsc_triosy_lz;
  input [31:0] p_rsc_dat;
  output p_rsc_triosy_lz;
  input [31:0] r_rsc_dat;
  output r_rsc_triosy_lz;
  input twiddle_rsc_s_tdone;
  input twiddle_rsc_tr_write_done;
  input twiddle_rsc_RREADY;
  output twiddle_rsc_RVALID;
  output twiddle_rsc_RUSER;
  output twiddle_rsc_RLAST;
  output [1:0] twiddle_rsc_RRESP;
  output [31:0] twiddle_rsc_RDATA;
  output twiddle_rsc_RID;
  output twiddle_rsc_ARREADY;
  input twiddle_rsc_ARVALID;
  input twiddle_rsc_ARUSER;
  input [3:0] twiddle_rsc_ARREGION;
  input [3:0] twiddle_rsc_ARQOS;
  input [2:0] twiddle_rsc_ARPROT;
  input [3:0] twiddle_rsc_ARCACHE;
  input twiddle_rsc_ARLOCK;
  input [1:0] twiddle_rsc_ARBURST;
  input [2:0] twiddle_rsc_ARSIZE;
  input [7:0] twiddle_rsc_ARLEN;
  input [11:0] twiddle_rsc_ARADDR;
  input twiddle_rsc_ARID;
  input twiddle_rsc_BREADY;
  output twiddle_rsc_BVALID;
  output twiddle_rsc_BUSER;
  output [1:0] twiddle_rsc_BRESP;
  output twiddle_rsc_BID;
  output twiddle_rsc_WREADY;
  input twiddle_rsc_WVALID;
  input twiddle_rsc_WUSER;
  input twiddle_rsc_WLAST;
  input [3:0] twiddle_rsc_WSTRB;
  input [31:0] twiddle_rsc_WDATA;
  output twiddle_rsc_AWREADY;
  input twiddle_rsc_AWVALID;
  input twiddle_rsc_AWUSER;
  input [3:0] twiddle_rsc_AWREGION;
  input [3:0] twiddle_rsc_AWQOS;
  input [2:0] twiddle_rsc_AWPROT;
  input [3:0] twiddle_rsc_AWCACHE;
  input twiddle_rsc_AWLOCK;
  input [1:0] twiddle_rsc_AWBURST;
  input [2:0] twiddle_rsc_AWSIZE;
  input [7:0] twiddle_rsc_AWLEN;
  input [11:0] twiddle_rsc_AWADDR;
  input twiddle_rsc_AWID;
  output twiddle_rsc_triosy_lz;
  input twiddle_h_rsc_s_tdone;
  input twiddle_h_rsc_tr_write_done;
  input twiddle_h_rsc_RREADY;
  output twiddle_h_rsc_RVALID;
  output twiddle_h_rsc_RUSER;
  output twiddle_h_rsc_RLAST;
  output [1:0] twiddle_h_rsc_RRESP;
  output [31:0] twiddle_h_rsc_RDATA;
  output twiddle_h_rsc_RID;
  output twiddle_h_rsc_ARREADY;
  input twiddle_h_rsc_ARVALID;
  input twiddle_h_rsc_ARUSER;
  input [3:0] twiddle_h_rsc_ARREGION;
  input [3:0] twiddle_h_rsc_ARQOS;
  input [2:0] twiddle_h_rsc_ARPROT;
  input [3:0] twiddle_h_rsc_ARCACHE;
  input twiddle_h_rsc_ARLOCK;
  input [1:0] twiddle_h_rsc_ARBURST;
  input [2:0] twiddle_h_rsc_ARSIZE;
  input [7:0] twiddle_h_rsc_ARLEN;
  input [11:0] twiddle_h_rsc_ARADDR;
  input twiddle_h_rsc_ARID;
  input twiddle_h_rsc_BREADY;
  output twiddle_h_rsc_BVALID;
  output twiddle_h_rsc_BUSER;
  output [1:0] twiddle_h_rsc_BRESP;
  output twiddle_h_rsc_BID;
  output twiddle_h_rsc_WREADY;
  input twiddle_h_rsc_WVALID;
  input twiddle_h_rsc_WUSER;
  input twiddle_h_rsc_WLAST;
  input [3:0] twiddle_h_rsc_WSTRB;
  input [31:0] twiddle_h_rsc_WDATA;
  output twiddle_h_rsc_AWREADY;
  input twiddle_h_rsc_AWVALID;
  input twiddle_h_rsc_AWUSER;
  input [3:0] twiddle_h_rsc_AWREGION;
  input [3:0] twiddle_h_rsc_AWQOS;
  input [2:0] twiddle_h_rsc_AWPROT;
  input [3:0] twiddle_h_rsc_AWCACHE;
  input twiddle_h_rsc_AWLOCK;
  input [1:0] twiddle_h_rsc_AWBURST;
  input [2:0] twiddle_h_rsc_AWSIZE;
  input [7:0] twiddle_h_rsc_AWLEN;
  input [11:0] twiddle_h_rsc_AWADDR;
  input twiddle_h_rsc_AWID;
  output twiddle_h_rsc_triosy_lz;
  input result_rsc_s_tdone;
  input result_rsc_tr_write_done;
  input result_rsc_RREADY;
  output result_rsc_RVALID;
  output result_rsc_RUSER;
  output result_rsc_RLAST;
  output [1:0] result_rsc_RRESP;
  output [31:0] result_rsc_RDATA;
  output result_rsc_RID;
  output result_rsc_ARREADY;
  input result_rsc_ARVALID;
  input result_rsc_ARUSER;
  input [3:0] result_rsc_ARREGION;
  input [3:0] result_rsc_ARQOS;
  input [2:0] result_rsc_ARPROT;
  input [3:0] result_rsc_ARCACHE;
  input result_rsc_ARLOCK;
  input [1:0] result_rsc_ARBURST;
  input [2:0] result_rsc_ARSIZE;
  input [7:0] result_rsc_ARLEN;
  input [13:0] result_rsc_ARADDR;
  input result_rsc_ARID;
  input result_rsc_BREADY;
  output result_rsc_BVALID;
  output result_rsc_BUSER;
  output [1:0] result_rsc_BRESP;
  output result_rsc_BID;
  output result_rsc_WREADY;
  input result_rsc_WVALID;
  input result_rsc_WUSER;
  input result_rsc_WLAST;
  input [3:0] result_rsc_WSTRB;
  input [31:0] result_rsc_WDATA;
  output result_rsc_AWREADY;
  input result_rsc_AWVALID;
  input result_rsc_AWUSER;
  input [3:0] result_rsc_AWREGION;
  input [3:0] result_rsc_AWQOS;
  input [2:0] result_rsc_AWPROT;
  input [3:0] result_rsc_AWCACHE;
  input result_rsc_AWLOCK;
  input [1:0] result_rsc_AWBURST;
  input [2:0] result_rsc_AWSIZE;
  input [7:0] result_rsc_AWLEN;
  input [13:0] result_rsc_AWADDR;
  input result_rsc_AWID;
  output result_rsc_triosy_lz;



  // Interconnect Declarations for Component Instantiations 
  ntt_flat_core ntt_flat_core_inst (
      .clk(clk),
      .rst(rst),
      .vec_rsc_s_tdone(vec_rsc_s_tdone),
      .vec_rsc_tr_write_done(vec_rsc_tr_write_done),
      .vec_rsc_RREADY(vec_rsc_RREADY),
      .vec_rsc_RVALID(vec_rsc_RVALID),
      .vec_rsc_RUSER(vec_rsc_RUSER),
      .vec_rsc_RLAST(vec_rsc_RLAST),
      .vec_rsc_RRESP(vec_rsc_RRESP),
      .vec_rsc_RDATA(vec_rsc_RDATA),
      .vec_rsc_RID(vec_rsc_RID),
      .vec_rsc_ARREADY(vec_rsc_ARREADY),
      .vec_rsc_ARVALID(vec_rsc_ARVALID),
      .vec_rsc_ARUSER(vec_rsc_ARUSER),
      .vec_rsc_ARREGION(vec_rsc_ARREGION),
      .vec_rsc_ARQOS(vec_rsc_ARQOS),
      .vec_rsc_ARPROT(vec_rsc_ARPROT),
      .vec_rsc_ARCACHE(vec_rsc_ARCACHE),
      .vec_rsc_ARLOCK(vec_rsc_ARLOCK),
      .vec_rsc_ARBURST(vec_rsc_ARBURST),
      .vec_rsc_ARSIZE(vec_rsc_ARSIZE),
      .vec_rsc_ARLEN(vec_rsc_ARLEN),
      .vec_rsc_ARADDR(vec_rsc_ARADDR),
      .vec_rsc_ARID(vec_rsc_ARID),
      .vec_rsc_BREADY(vec_rsc_BREADY),
      .vec_rsc_BVALID(vec_rsc_BVALID),
      .vec_rsc_BUSER(vec_rsc_BUSER),
      .vec_rsc_BRESP(vec_rsc_BRESP),
      .vec_rsc_BID(vec_rsc_BID),
      .vec_rsc_WREADY(vec_rsc_WREADY),
      .vec_rsc_WVALID(vec_rsc_WVALID),
      .vec_rsc_WUSER(vec_rsc_WUSER),
      .vec_rsc_WLAST(vec_rsc_WLAST),
      .vec_rsc_WSTRB(vec_rsc_WSTRB),
      .vec_rsc_WDATA(vec_rsc_WDATA),
      .vec_rsc_AWREADY(vec_rsc_AWREADY),
      .vec_rsc_AWVALID(vec_rsc_AWVALID),
      .vec_rsc_AWUSER(vec_rsc_AWUSER),
      .vec_rsc_AWREGION(vec_rsc_AWREGION),
      .vec_rsc_AWQOS(vec_rsc_AWQOS),
      .vec_rsc_AWPROT(vec_rsc_AWPROT),
      .vec_rsc_AWCACHE(vec_rsc_AWCACHE),
      .vec_rsc_AWLOCK(vec_rsc_AWLOCK),
      .vec_rsc_AWBURST(vec_rsc_AWBURST),
      .vec_rsc_AWSIZE(vec_rsc_AWSIZE),
      .vec_rsc_AWLEN(vec_rsc_AWLEN),
      .vec_rsc_AWADDR(vec_rsc_AWADDR),
      .vec_rsc_AWID(vec_rsc_AWID),
      .vec_rsc_triosy_lz(vec_rsc_triosy_lz),
      .p_rsc_dat(p_rsc_dat),
      .p_rsc_triosy_lz(p_rsc_triosy_lz),
      .r_rsc_triosy_lz(r_rsc_triosy_lz),
      .twiddle_rsc_s_tdone(twiddle_rsc_s_tdone),
      .twiddle_rsc_tr_write_done(twiddle_rsc_tr_write_done),
      .twiddle_rsc_RREADY(twiddle_rsc_RREADY),
      .twiddle_rsc_RVALID(twiddle_rsc_RVALID),
      .twiddle_rsc_RUSER(twiddle_rsc_RUSER),
      .twiddle_rsc_RLAST(twiddle_rsc_RLAST),
      .twiddle_rsc_RRESP(twiddle_rsc_RRESP),
      .twiddle_rsc_RDATA(twiddle_rsc_RDATA),
      .twiddle_rsc_RID(twiddle_rsc_RID),
      .twiddle_rsc_ARREADY(twiddle_rsc_ARREADY),
      .twiddle_rsc_ARVALID(twiddle_rsc_ARVALID),
      .twiddle_rsc_ARUSER(twiddle_rsc_ARUSER),
      .twiddle_rsc_ARREGION(twiddle_rsc_ARREGION),
      .twiddle_rsc_ARQOS(twiddle_rsc_ARQOS),
      .twiddle_rsc_ARPROT(twiddle_rsc_ARPROT),
      .twiddle_rsc_ARCACHE(twiddle_rsc_ARCACHE),
      .twiddle_rsc_ARLOCK(twiddle_rsc_ARLOCK),
      .twiddle_rsc_ARBURST(twiddle_rsc_ARBURST),
      .twiddle_rsc_ARSIZE(twiddle_rsc_ARSIZE),
      .twiddle_rsc_ARLEN(twiddle_rsc_ARLEN),
      .twiddle_rsc_ARADDR(twiddle_rsc_ARADDR),
      .twiddle_rsc_ARID(twiddle_rsc_ARID),
      .twiddle_rsc_BREADY(twiddle_rsc_BREADY),
      .twiddle_rsc_BVALID(twiddle_rsc_BVALID),
      .twiddle_rsc_BUSER(twiddle_rsc_BUSER),
      .twiddle_rsc_BRESP(twiddle_rsc_BRESP),
      .twiddle_rsc_BID(twiddle_rsc_BID),
      .twiddle_rsc_WREADY(twiddle_rsc_WREADY),
      .twiddle_rsc_WVALID(twiddle_rsc_WVALID),
      .twiddle_rsc_WUSER(twiddle_rsc_WUSER),
      .twiddle_rsc_WLAST(twiddle_rsc_WLAST),
      .twiddle_rsc_WSTRB(twiddle_rsc_WSTRB),
      .twiddle_rsc_WDATA(twiddle_rsc_WDATA),
      .twiddle_rsc_AWREADY(twiddle_rsc_AWREADY),
      .twiddle_rsc_AWVALID(twiddle_rsc_AWVALID),
      .twiddle_rsc_AWUSER(twiddle_rsc_AWUSER),
      .twiddle_rsc_AWREGION(twiddle_rsc_AWREGION),
      .twiddle_rsc_AWQOS(twiddle_rsc_AWQOS),
      .twiddle_rsc_AWPROT(twiddle_rsc_AWPROT),
      .twiddle_rsc_AWCACHE(twiddle_rsc_AWCACHE),
      .twiddle_rsc_AWLOCK(twiddle_rsc_AWLOCK),
      .twiddle_rsc_AWBURST(twiddle_rsc_AWBURST),
      .twiddle_rsc_AWSIZE(twiddle_rsc_AWSIZE),
      .twiddle_rsc_AWLEN(twiddle_rsc_AWLEN),
      .twiddle_rsc_AWADDR(twiddle_rsc_AWADDR),
      .twiddle_rsc_AWID(twiddle_rsc_AWID),
      .twiddle_rsc_triosy_lz(twiddle_rsc_triosy_lz),
      .twiddle_h_rsc_s_tdone(twiddle_h_rsc_s_tdone),
      .twiddle_h_rsc_tr_write_done(twiddle_h_rsc_tr_write_done),
      .twiddle_h_rsc_RREADY(twiddle_h_rsc_RREADY),
      .twiddle_h_rsc_RVALID(twiddle_h_rsc_RVALID),
      .twiddle_h_rsc_RUSER(twiddle_h_rsc_RUSER),
      .twiddle_h_rsc_RLAST(twiddle_h_rsc_RLAST),
      .twiddle_h_rsc_RRESP(twiddle_h_rsc_RRESP),
      .twiddle_h_rsc_RDATA(twiddle_h_rsc_RDATA),
      .twiddle_h_rsc_RID(twiddle_h_rsc_RID),
      .twiddle_h_rsc_ARREADY(twiddle_h_rsc_ARREADY),
      .twiddle_h_rsc_ARVALID(twiddle_h_rsc_ARVALID),
      .twiddle_h_rsc_ARUSER(twiddle_h_rsc_ARUSER),
      .twiddle_h_rsc_ARREGION(twiddle_h_rsc_ARREGION),
      .twiddle_h_rsc_ARQOS(twiddle_h_rsc_ARQOS),
      .twiddle_h_rsc_ARPROT(twiddle_h_rsc_ARPROT),
      .twiddle_h_rsc_ARCACHE(twiddle_h_rsc_ARCACHE),
      .twiddle_h_rsc_ARLOCK(twiddle_h_rsc_ARLOCK),
      .twiddle_h_rsc_ARBURST(twiddle_h_rsc_ARBURST),
      .twiddle_h_rsc_ARSIZE(twiddle_h_rsc_ARSIZE),
      .twiddle_h_rsc_ARLEN(twiddle_h_rsc_ARLEN),
      .twiddle_h_rsc_ARADDR(twiddle_h_rsc_ARADDR),
      .twiddle_h_rsc_ARID(twiddle_h_rsc_ARID),
      .twiddle_h_rsc_BREADY(twiddle_h_rsc_BREADY),
      .twiddle_h_rsc_BVALID(twiddle_h_rsc_BVALID),
      .twiddle_h_rsc_BUSER(twiddle_h_rsc_BUSER),
      .twiddle_h_rsc_BRESP(twiddle_h_rsc_BRESP),
      .twiddle_h_rsc_BID(twiddle_h_rsc_BID),
      .twiddle_h_rsc_WREADY(twiddle_h_rsc_WREADY),
      .twiddle_h_rsc_WVALID(twiddle_h_rsc_WVALID),
      .twiddle_h_rsc_WUSER(twiddle_h_rsc_WUSER),
      .twiddle_h_rsc_WLAST(twiddle_h_rsc_WLAST),
      .twiddle_h_rsc_WSTRB(twiddle_h_rsc_WSTRB),
      .twiddle_h_rsc_WDATA(twiddle_h_rsc_WDATA),
      .twiddle_h_rsc_AWREADY(twiddle_h_rsc_AWREADY),
      .twiddle_h_rsc_AWVALID(twiddle_h_rsc_AWVALID),
      .twiddle_h_rsc_AWUSER(twiddle_h_rsc_AWUSER),
      .twiddle_h_rsc_AWREGION(twiddle_h_rsc_AWREGION),
      .twiddle_h_rsc_AWQOS(twiddle_h_rsc_AWQOS),
      .twiddle_h_rsc_AWPROT(twiddle_h_rsc_AWPROT),
      .twiddle_h_rsc_AWCACHE(twiddle_h_rsc_AWCACHE),
      .twiddle_h_rsc_AWLOCK(twiddle_h_rsc_AWLOCK),
      .twiddle_h_rsc_AWBURST(twiddle_h_rsc_AWBURST),
      .twiddle_h_rsc_AWSIZE(twiddle_h_rsc_AWSIZE),
      .twiddle_h_rsc_AWLEN(twiddle_h_rsc_AWLEN),
      .twiddle_h_rsc_AWADDR(twiddle_h_rsc_AWADDR),
      .twiddle_h_rsc_AWID(twiddle_h_rsc_AWID),
      .twiddle_h_rsc_triosy_lz(twiddle_h_rsc_triosy_lz),
      .result_rsc_s_tdone(result_rsc_s_tdone),
      .result_rsc_tr_write_done(result_rsc_tr_write_done),
      .result_rsc_RREADY(result_rsc_RREADY),
      .result_rsc_RVALID(result_rsc_RVALID),
      .result_rsc_RUSER(result_rsc_RUSER),
      .result_rsc_RLAST(result_rsc_RLAST),
      .result_rsc_RRESP(result_rsc_RRESP),
      .result_rsc_RDATA(result_rsc_RDATA),
      .result_rsc_RID(result_rsc_RID),
      .result_rsc_ARREADY(result_rsc_ARREADY),
      .result_rsc_ARVALID(result_rsc_ARVALID),
      .result_rsc_ARUSER(result_rsc_ARUSER),
      .result_rsc_ARREGION(result_rsc_ARREGION),
      .result_rsc_ARQOS(result_rsc_ARQOS),
      .result_rsc_ARPROT(result_rsc_ARPROT),
      .result_rsc_ARCACHE(result_rsc_ARCACHE),
      .result_rsc_ARLOCK(result_rsc_ARLOCK),
      .result_rsc_ARBURST(result_rsc_ARBURST),
      .result_rsc_ARSIZE(result_rsc_ARSIZE),
      .result_rsc_ARLEN(result_rsc_ARLEN),
      .result_rsc_ARADDR(result_rsc_ARADDR),
      .result_rsc_ARID(result_rsc_ARID),
      .result_rsc_BREADY(result_rsc_BREADY),
      .result_rsc_BVALID(result_rsc_BVALID),
      .result_rsc_BUSER(result_rsc_BUSER),
      .result_rsc_BRESP(result_rsc_BRESP),
      .result_rsc_BID(result_rsc_BID),
      .result_rsc_WREADY(result_rsc_WREADY),
      .result_rsc_WVALID(result_rsc_WVALID),
      .result_rsc_WUSER(result_rsc_WUSER),
      .result_rsc_WLAST(result_rsc_WLAST),
      .result_rsc_WSTRB(result_rsc_WSTRB),
      .result_rsc_WDATA(result_rsc_WDATA),
      .result_rsc_AWREADY(result_rsc_AWREADY),
      .result_rsc_AWVALID(result_rsc_AWVALID),
      .result_rsc_AWUSER(result_rsc_AWUSER),
      .result_rsc_AWREGION(result_rsc_AWREGION),
      .result_rsc_AWQOS(result_rsc_AWQOS),
      .result_rsc_AWPROT(result_rsc_AWPROT),
      .result_rsc_AWCACHE(result_rsc_AWCACHE),
      .result_rsc_AWLOCK(result_rsc_AWLOCK),
      .result_rsc_AWBURST(result_rsc_AWBURST),
      .result_rsc_AWSIZE(result_rsc_AWSIZE),
      .result_rsc_AWLEN(result_rsc_AWLEN),
      .result_rsc_AWADDR(result_rsc_AWADDR),
      .result_rsc_AWID(result_rsc_AWID),
      .result_rsc_triosy_lz(result_rsc_triosy_lz)
    );
endmodule



